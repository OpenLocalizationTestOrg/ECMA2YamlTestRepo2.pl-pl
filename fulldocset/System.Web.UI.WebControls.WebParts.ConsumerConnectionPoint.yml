### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  id: ConsumerConnectionPoint
  children:
  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)
  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  langs:
  - csharp
  name: ConsumerConnectionPoint
  nameWithType: ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  type: Class
  summary: "Definiuje obiekt punktu połączenia, który umożliwia formantu serwer działający jako odbiorców do utworzenia połączenia z dostawcą."
  remarks: "W związku z każdej części sieci Web między dwoma kontrolki serwera każda kontrolka musi mieć (między innymi wymagania) skojarzona z połączeniem obiektu punktu, który umożliwia nawiązywania połączenia z innymi formantu i zapewnij albo wykorzystują dane, w zależności od tego, czy formant jest wyznaczony jako dostawcy lub odbiorcy dla połączenia. A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>obiekt ogólnie zawiera szczegóły dotyczące sposobu formantu mogą łączyć się inny formant i typu danych, można go udostępniać.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> W przypadku formantu działający jako użytkownik w przypadku połączenia punktu połączenia musi być obiektem ConsumerConnectionPoint. Aby uzyskać więcej informacji na składniki Web Part połączenia i punkty połączenia, przeczytaj tematy wymienione w poniższej sekcji Zobacz też.       Aby utworzyć obiekt ConsumerConnectionPoint, wymagane są kilka kroków: 1.  Włącz formantu konsumentów do odwołania wystąpienia interfejsu. A <xref:System.Web.UI.WebControls.WebParts.WebPart>lub inny formant serwera (dowolnego typu formantu serwera, który zostanie dodany do <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>strefy można użyć) musi mieć możliwość pracy z danymi z wystąpienia określonego interfejsu.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> Formant nie muszą implementować interfejs; tylko dostawca musi implementować go. Konsument albo może współpracować z typu interfejs obsługiwane przez dostawcę lub, jeśli nie, <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>obiekt może służyć do przekształcania danych z typu interfejsu dostawcy do typu rozpoznawany przez konsumenta.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Typowy sposób włączania konsumenta jest aby zadeklarować pole prywatne zawiera odwołanie do typu żądanego interfejsu.      2.  Określ metodę wywołania zwrotnego. Metody konsumenta musi zostać określony jako metoda wywołania zwrotnego do nawiązania połączenia z dostawcą. Ta metoda pobiera wystąpienie interfejsu implementuje dostawcy i przypisuje go do (na przykład) pole prywatne utworzony w pierwszym kroku. Podejście części sieci Web do identyfikacji metody wywołania zwrotnego w konsumenta jest dodanie `ConnectionConsumer` atrybutu metadanych (zdefiniowane przez <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>klasy) do metody, która otrzymuje wystąpienie interfejsu.</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> Po dodaniu atrybutu tylko wymaganego parametru jest wyświetlana nazwa do użycia na potrzeby punkt połączenia klienta. Parametry opcjonalne można również dodać, takich jak identyfikator.      3.  Proces i wyjścia danych z wystąpienia interfejsu. Wykonaj wszystkie wewnętrzne przetwarzanie w danych w razie potrzeby, a następnie zwykle formantu użytkownika spowoduje, że dane na stronie. Typowy sposób wykonać to zadanie jest zastąpienie formantu <xref:System.Web.UI.Control.OnPreRender%2A>metody.</xref:System.Web.UI.Control.OnPreRender%2A>          > [!NOTE] > Podczas synchronicznego żądania, klient powinien zażądać danych bezpośrednio od dostawcy, podczas lub bezpośrednio po <xref:System.Web.UI.Control.PreRender>zdarzeń.</xref:System.Web.UI.Control.PreRender> Podczas żądania asynchronicznego Jeśli metoda wywołania zwrotnego dostawcy nie jest wywoływana w dowolnym momencie podczas renderowania, deweloper można założyć, że żadne dane nie został wysyłane do użytkownika.       Po formantu ma został przystosowany do działania klientów, formantu może uczestniczyć w połączeniach (przy założeniu, że formant dostawcy również wyposażone i dostępna). Aby utworzyć połączenie statycznych, deklaratywne w znaczniku strony sieci Web, deweloperzy mogą używać `<asp:webpartconnection>` elementu. Jeśli `ConnectionConsumer` atrybutu w kodzie źródłowym konsumenta, który identyfikuje metodę wywołania zwrotnego Określa identyfikator punktu połączenia, a następnie ta wartość musi być przypisany do `ConsumerConnectionPointID` atrybutu w `<asp:webpartconnection>` elementu na stronie. Dlatego, że deweloper może określić identyfikator punkt połączenia klienta jest, jeśli istnieje wiele punktów połączenia zdefiniowane w formancie użytkownika. Jeśli nie określono Identyfikatora dla punkt połączenia klienta w formancie konsumenta, nie ma wartość do przypisania do `ConsumerConnectionPointID` atrybutu na stronie albo, ponieważ połączenie zostanie utworzony przy użyciu wartości domyślnej uzyskane z <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>pola.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       Można utworzyć połączenia w kodzie, deweloperzy należy utworzyć nowy obiekt ConsumerConnectionPoint przez wywołanie metody <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>— Metoda i przekazanie do niego identyfikator formantu konsumenta, wraz z Identyfikatora lub indeks obiektu ConsumerConnectionPoint zdefiniowanych w formancie użytkownika.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> Zwrócony obiekt ConsumerConnectionPoint, wraz z odwołaniem do sterowania konsumenta, odwołanie do formantu dostawcy, a odpowiadające mu <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>obiektów, wyświetlane są wszystkie przekazany do <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>metody, aby utworzyć nową <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>obiektu.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       Mimo że deweloperzy mogą używać punktów połączenia klienta podczas ustanawiania połączenia deklaratywnie lub programowo, również interakcji użytkowników z punktów połączenia klienta do nawiązywania połączeń za pośrednictwem interfejsu użytkownika (UI). Jeśli deweloperzy zadeklarować <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>kontrolki na stronie sieci Web zapewnia czasu wykonywania interfejsu użytkownika dla użytkowników w celu utworzenia połączenia.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Jeśli użytkownik wybierze kontroli dostawcy jako punktu wyjścia do nawiązywania połączenia, klikając jej połączyć zlecenie (one również wybrać konsumenta; nie ma żadnej różnicy w wynikowej połączenia), w Interfejsie użytkownika zostanie wyświetlona formantu listy rozwijanej o nazwy wyświetlane dostępne odbiorców połączenia punktu (lub punktów, jeśli istnieje wiele migawek) czy dostawca może wysyłać dane do. Użytkownicy muszą wybrać punkt połączenia klienta, aby nawiązać połączenie.       Obiekt ConsumerConnectionPoint kojarzy bezpośrednio za pomocą formantu określonego użytkownika i przechowuje szczegółowe informacje o połączeniu we właściwościach, który dziedziczy z podstawowego <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>klasy.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Na przykład w dziedziczonego <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>Właściwości, typ interfejsu używa śledzi punkt połączenia klienta.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> Jeśli dostawcy i klienta w połączeniu obu rozpoznaje typ interfejsu, formanty są zgodne i nadaje się do tworzenia bezpośrednie połączenie. Jeśli dostawcy i klienta nie może działać z tego samego typu interfejsu, są niezgodne i musi być <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>obiektu tłumaczenie punkt połączenia dostawcy <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>Właściwość do typu, który użytkownik może współpracować z.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Inną ważną właściwość dziedziczona jest <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>właściwość, która zapewnia przyjazną nazwę wyświetlaną w Interfejsie użytkownika dla użytkowników wybrać połączenia klienta punktu podczas tworzenia połączenia.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> Nazwa wyświetlana jest wymaganego parametru, gdy deweloperzy dodają `ConnectionConsumer` atrybut do metody wywołania zwrotnego w formancie użytkownika. Dziedziczonego <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>Właściwość przydaje się również, jak wspomniano powyżej, ponieważ zawiera unikatowy identyfikator dla punkt połączenia klienta w przypadku, gdy klient ma wiele punktów połączenia.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> Klient może mieć wielu obiektów ConsumerConnectionPoint zdefiniowane w nim, a w tym przypadku podczas dodawania deweloperzy `ConnectionConsumer` atrybut do metody, należy określić wartość Identyfikatora odróżnienie każdego punktu połączenia. Jest jednym innych istotnych Dziedziczona właściwość <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>właściwość, która wskazuje, czy punkt połączenia klienta mogą jednocześnie połączyć się z wielu dostawców.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> Wartość tej właściwości jest `false` domyślnie dla konsumentów punkty połączenia (natomiast domyślnie `true` punktów połączenia dostawcy).       Klasy ConsumerConnectionPoint dodaje kilka metod unikatowy członkom dziedziczy z <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>klasy.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A>— Metoda wywołuje metodę wywołania zwrotnego klienta własnych zdefiniowane można pobrać wystąpienia interfejsu od dostawcy.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>Metoda zwraca wartość logiczną wskazującą, czy punkt połączenia jest w stanie nawiązywać połączenia na podstawie bieżącego stanu formantu skojarzony konsumenta.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>"
  example:
  - "The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a consumer connection point.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_376_1.ascx)]\n [!code-vb[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_376_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_376_2.vb)]\n [!code-cs[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_376_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the `<staticconnections>` element on the page. This demonstrates one way of creating a connection--note the `ConsumerConnectionPointID` attribute in the `<asp:webpartconnection>` element. You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method. In this case, a ConsumerConnectionPoint object is created and then passed to a method that creates the actual connection. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_376_3.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_376_3.aspx)]  \n  \n After you load the page in a browser, click the **Connection Point Details** button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the **Display Mode** drop-down control to switch the page into connect mode. On the verbs menu of the **ZIP Code Provider**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page. This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier. Click the **Disconnect** button to terminate the existing static connection. Click the **Create a Connection to a Consumer** link. The UI now displays a drop-down control that lists the consumer connection point display name. Select the connection point in the drop-down list, and then click **Connect** to complete the connection. Next, click **Disconnect** again. Click the **Dynamic Connection** button to create a connection programmatically. Use the **Display Mode** control to return the page to browse mode. Click the **Connection Point Details** button again, to indicate details about the consumer connection point object once more.  \n  \n The example has demonstrated establishing a connection and using a consumer connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a ConsumerConnectionPoint object; and a connection created by a user through the connection UI."
  syntax:
    content: 'public class ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint'
  inheritance:
  - System.Object
  - System.Web.UI.WebControls.WebParts.ConnectionPoint
  implements: []
  inheritedMembers:
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  id: '#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)'
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  langs:
  - csharp
  name: ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&quot;> </xref> klasy."
  remarks: "Konstruktor ConsumerConnectionPoint <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>klasy po prostu wywołuje konstruktora podstawowego, przekazywanie do niego różnych parametrów i inicjowania klasy podstawowej.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       Konstruktor klasy podstawowej sprawdza liczbę parametrów dla punktu połączenia i może zgłosić kilkoma wyjątkami. Listę możliwych wyjątków zobacz sekcję wyjątków.       Możesz wywołać konstruktor ConsumerConnectionPoint, można utworzyć wystąpienia <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>klasy.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Jednak w przypadku należy po prostu ustanawiania połączenia i nie rozszerzania klasy, należy wywołać <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>Metoda zwraca obiekt punktu połączenia z dostawcą.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>"
  example:
  - "The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class to create a custom provider connection point.  \n  \n The code example has three parts:  \n  \n-   A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object.  \n  \n-   A Web page that hosts the controls in a static connection.  \n  \n-   An explanation of how to run the example code.  \n  \n The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class, named `TableConsumerConnectionPoint`. Note that the constructor of the `TableConsumerConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section. Also note that in the `TableConsumer` class, the `SetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionConsumer` attribute declares the custom `TableConsumerConnectionPoint` as a parameter. This demonstrates how to create a custom consumer connection point and then associate it with a consumer control. This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/add/codesnippet/csharp/e8ae1165-f151-4ac1-9590-_1.cs)]  \n  \n The second part of the code example is the Web page that hosts the custom controls in a static Web parts connection. At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls. The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/add/codesnippet/csharp/e8ae1165-f151-4ac1-9590-_2.aspx)]  \n  \n Load the page in a browser. The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page."
  syntax:
    content: public ConsumerConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);
    parameters:
    - id: callbackMethod
      type: System.Reflection.MethodInfo
      description: "Metoda w formancie użytkownika, który zwraca wystąpienie interfejsu dla konsumentów, aby nawiązać połączenie."
    - id: interfaceType
      type: System.Type
      description: "<xref:System.Type>Interfejsu, który użytkownik otrzyma od dostawcy.</xref:System.Type>"
    - id: controlType
      type: System.Type
      description: "<xref:System.Type>Formantu konsumenta, z którym skojarzony jest punkt połączenia klienta.</xref:System.Type>"
    - id: displayName
      type: System.String
      description: "Przyjazną nazwę wyświetlaną dla wyświetlany w interfejsie użytkownika (UI) połączenia punkt połączenia klienta."
    - id: id
      type: System.String
      description: "Unikatowy identyfikator punkt połączenia klienta."
    - id: allowsMultipleConnections
      type: System.Boolean
      description: "Wartość logiczna wskazująca, czy punkt połączenia klienta mogą mieć wiele równoczesnych połączeń z dostawcami."
  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>callbackMethod</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>interfaceType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>controlType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>displayName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string (\"\")."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>controlType </code>nie jest taki sam typ jak kontrolka użytkownika (lub nieprawidłową klasę pochodzić od niego)."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)
  id: SetObject(System.Web.UI.Control,System.Object)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  langs:
  - csharp
  name: SetObject(Control,Object)
  nameWithType: ConsumerConnectionPoint.SetObject(Control,Object)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(Control,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Wywołuje metodę wywołania zwrotnego w formancie konsumenta i pobiera wystąpienie interfejsu za pomocą formantu dostawcy."
  remarks: "Ta metoda otrzymuje wystąpienie interfejsu od dostawcy, który zawiera dane dla kontrolki użytkownika.       Metoda elementu SetObject jest wywoływana przez <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>obiektów po uaktywnieniu połączeń.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Jest to krytycznym kroku, będącej częścią inicjowania połączenia i włączenie dwóch formantów udostępniania danych.       Formant użytkownika w przypadku połączenia musi mieć możliwość pracy tego samego typu interfejsu, ponieważ dostawca. Jeśli nie, kontrolki są niezgodne i <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>obiektu musi być używany do nawiązania połączenia.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>"
  syntax:
    content: public virtual void SetObject (System.Web.UI.Control control, object data);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Formant użytkownika skojarzonego z punktem połączenia klienta."
    - id: data
      type: System.Object
      description: "Zwrócił wystąpienie interfejsu za pomocą formantu dostawcy."
  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>control</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  id: SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  langs:
  - csharp
  name: SupportsConnection(Control,ConnectionInterfaceCollection)
  nameWithType: ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Określa, czy punkt połączenia klienta jest obecnie możliwe ustanawiania połączenia."
  remarks: "Metoda SupportsConnection zaimplementowanego zawsze zwraca `true` we wszystkich przypadkach dla <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>klasy.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Celem tej metody jest ona sprawdzić stan `control` i `secondaryInterfaces` w niektórych punktach krytycznych, aby określić, czy <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>obiekt jest obecnie w stanie utworzyć połączenie.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       Może istnieć scenariusze gdzie `control` jest w stanie, który uniemożliwia do utworzenia połączenia, lub gdy `secondaryInterfaces` muszą istnieć przed połączenie mogą być tworzone. W takich przypadkach, deweloperzy mogą dziedziczyć <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>klasy, a następnie zastąp metodę SupportsConnection, zapewniając implementacja niestandardowa, aby określić, gdy punkt połączenia jest gotowe do obsługi połączeń.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>"
  syntax:
    content: public virtual bool SupportsConnection (System.Web.UI.Control control, System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Formant użytkownika skojarzonego z <xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&quot;> </xref>."
    - id: secondaryInterfaces
      type: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&quot;> </xref> z interfejsami dodatkowej uczestniczących w połączeniu."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli punkt połączenia można obecnie nawiązać połączenie; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Wartość domyślna to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.ConnectionPoint
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SetObject(Control,Object)
  nameWithType: ConsumerConnectionPoint.SetObject(Control,Object)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(Control,Object)
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SupportsConnection(Control,ConnectionInterfaceCollection)
  nameWithType: ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
- uid: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConnectionInterfaceCollection
  nameWithType: ConnectionInterfaceCollection
  fullName: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor*
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject*
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SetObject
  nameWithType: ConsumerConnectionPoint.SetObject
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection*
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SupportsConnection
  nameWithType: ConsumerConnectionPoint.SupportsConnection
