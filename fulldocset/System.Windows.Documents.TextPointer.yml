### YamlMime:ManagedReference
items:
- uid: System.Windows.Documents.TextPointer
  id: TextPointer
  children:
  - System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)
  - System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)
  - System.Windows.Documents.TextPointer.DocumentEnd
  - System.Windows.Documents.TextPointer.DocumentStart
  - System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)
  - System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)
  - System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)
  - System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)
  - System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)
  - System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.HasValidLayout
  - System.Windows.Documents.TextPointer.InsertLineBreak
  - System.Windows.Documents.TextPointer.InsertParagraphBreak
  - System.Windows.Documents.TextPointer.InsertTextInRun(System.String)
  - System.Windows.Documents.TextPointer.IsAtInsertionPosition
  - System.Windows.Documents.TextPointer.IsAtLineStartPosition
  - System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)
  - System.Windows.Documents.TextPointer.LogicalDirection
  - System.Windows.Documents.TextPointer.Paragraph
  - System.Windows.Documents.TextPointer.Parent
  - System.Windows.Documents.TextPointer.ToString
  langs:
  - csharp
  name: TextPointer
  nameWithType: TextPointer
  fullName: System.Windows.Documents.TextPointer
  type: Class
  summary: "Reprezentuje pozycję w <xref href=&quot;System.Windows.Documents.FlowDocument&quot;> </xref> lub <xref href=&quot;System.Windows.Controls.TextBlock&quot;> </xref>."
  remarks: "Klasa wskaźnika TextPointer wprowadzono następującą terminologią: - Umieść — z założenia, zawsze wskazuje wskaźnika TextPointer *pozycji* w zawartości.  Takie pozycji, albo można podzielić między znaków w zawartości lub przepływ zawartości elementu tagi, które definiowania struktury zawartości.      -Bieżącej pozycji — ponieważ wskaźnika TextPointer zawsze wskazuje pozycji, ponieważ wiele operacji, które mogą być wykonywane za pomocą wskaźnika TextPointer względem pozycji aktualnie wskazywana przez wskaźnik TextPointer, dobrym rozwiązaniem jest po prostu odwoływać się do pozycji wskaźnika TextPointer jako *bieżącego położenia*.      -Wstawiania - *wstawiania* jest położenie, w którym można dodać nowej zawartości bez przerywania wszelkie semantycznego reguły dla skojarzonej zawartości.  W praktyce wstawiania jest dowolne miejsce w sytuacjach, gdy znajduje się daszek zawartości.  Przykładem prawidłową pozycją wskaźnika TextPointer, który nie jest wstawiania jest położenie między dwóch sąsiadujących ze sobą <xref:System.Windows.Documents.Paragraph>tagi (to znaczy między tagu zamykającego z poprzednim akapicie i otwierający tag następnego akapitu).</xref:System.Windows.Documents.Paragraph>      — Symbol - na potrzeby operacji wskaźnika TextPointer, które obejmują symbole, następujących jest traktowany jako *symbol*: - otwierający lub tagu zamykającego <xref:System.Windows.Documents.TextElement>elementu.</xref:System.Windows.Documents.TextElement>          - <xref:System.Windows.UIElement>Element zawarty w <xref:System.Windows.Documents.InlineUIContainer>lub <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Uwaga takich <xref:System.Windows.UIElement>jest zawsze traktowanych jak dokładnie jeden symbol; zawartość dodatkowych ani elementów zawartych w <xref:System.Windows.UIElement>nie są liczone jako symbole.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>          -Każdy 16-bitowych [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] znak wewnątrz tekstu <xref:System.Windows.Documents.Run>elementu.</xref:System.Windows.Documents.Run>      -Kontener tekstu — A *kontenera dopisków fonetycznych* jest element, który stanowi ultimate obramowanie wykonywanego zawartość śródwierszowa; pozycji wskaźnika TextPointer zawsze wypada w kontenerze tekstu.  Obecnie kontenera tekst musi być albo <xref:System.Windows.Documents.FlowDocument>lub <xref:System.Windows.Controls.TextBlock>.</xref:System.Windows.Controls.TextBlock> </xref:System.Windows.Documents.FlowDocument>  Ogólnie rzecz biorąc nie są obsługiwane operacje między wystąpieniami wskaźnika TextPointer w kontenerach inny tekst.      Kontener - dokumentu — zawartość w tekście jest określany jako *dokumentu*, jak w <xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A>— Metoda i <xref:System.Windows.Documents.TextPointer.DocumentStart%2A>i <xref:System.Windows.Documents.TextPointer.DocumentEnd%2A>Właściwości.</xref:System.Windows.Documents.TextPointer.DocumentEnd%2A> </xref:System.Windows.Documents.TextPointer.DocumentStart%2A> </xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A>       Klasa wskaźnika TextPointer ma na celu ułatwienia przechodzenie i manipulowania nimi zawartość, która jest reprezentowana przez [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] przepływ elementy zawartości; zazwyczaj takie elementy pochodzi od <xref:System.Windows.Documents.TextElement>.</xref:System.Windows.Documents.TextElement>  Niektóre operacje, które ułatwia wskaźnika TextPointer są następujące:-wykonać porządkowej porównanie bieżącej pozycji z drugiego określonej pozycji.  Zobacz <xref:System.Windows.Documents.TextPointer.CompareTo%2A>metody.</xref:System.Windows.Documents.TextPointer.CompareTo%2A>      -Określ typ zawartości sąsiadujące bieżącą pozycję w określonym kierunku.  Zobacz <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>— Metoda i <xref:System.Windows.Documents.TextPointerContext>wyliczenie.</xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>      -Get <xref:System.Windows.Documents.TextElement>zakresów lub jest przylegające do bieżącego położenia.</xref:System.Windows.Documents.TextElement>  Zobacz <xref:System.Windows.Documents.Paragraph>i <xref:System.Windows.Documents.TextPointer.GetAdjacentElement%2A>metody.</xref:System.Windows.Documents.TextPointer.GetAdjacentElement%2A> </xref:System.Windows.Documents.Paragraph>      — Pobierz kontener tekst, który zakresów bieżącego dokumentu.  Zobacz <xref:System.Windows.Documents.TextPointer.Parent%2A>Właściwości.</xref:System.Windows.Documents.TextPointer.Parent%2A>      — Pobierz określoną liczbę znaków poprzedzające lub następujące bieżącego położenia.  Zobacz <xref:System.Windows.Documents.TextPointer.GetTextInRun%2A>metody.</xref:System.Windows.Documents.TextPointer.GetTextInRun%2A>      -Wstawić ciąg znaków w bieżącym położeniu.  Zobacz <xref:System.Windows.Documents.TextPointer.InsertTextInRun%2A>metody.</xref:System.Windows.Documents.TextPointer.InsertTextInRun%2A>      -Znalezienie granice wiersza w zawartości.  Zobacz <xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>— Metoda i <xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A>Właściwości.</xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A> </xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>      -Tłumaczenia położenia wskaźnika TextPointer i przesunięcia symbol do zawartości.  Zobacz <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>i <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>metody.</xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> </xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>      — Wykonaj visual testowania trafień przez tłumaczenie między pozycji wskaźnika TextPointer i <xref:System.Windows.Point>reprezentujący współrzędnych względnych.</xref:System.Windows.Point>      -Znalezienie pobliskich wstawiania lub sprawdź, czy bieżące położenie jest wstawiania.  Zobacz <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A>i <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A>metody i <xref:System.Windows.Documents.TextPointer.IsAtInsertionPosition%2A>Właściwości.</xref:System.Windows.Documents.TextPointer.IsAtInsertionPosition%2A> </xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A> </xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A>       Położenie i <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>wskazanych przez obiekt wskaźnika TextPointer są niezmienne.</xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>  Edytowane lub modyfikacji zawartości pozycji wskaźnika TextPointer nie powoduje zmiany względem otaczającego tekstu; zamiast przesunięcie tej pozycji od początku zawartości jest dostosowywany odpowiednio do nowej pozycji względnej w zawartości.  Na przykład wskaźnika TextPointer, wskazującą położenie na początku danego akapitu w dalszym ciągu punktu Początek ust nawet wtedy, gdy zawartość zostanie wstawiony lub usunięty przed lub po akapicie.       Klasa wskaźnika TextPointer nie zawiera żadnych konstruktorów publicznych.  Wystąpienie wskaźnika TextPointer jest tworzona przy użyciu właściwości lub metody innych obiektów (w tym inne obiekty wskaźnika TextPointer). Poniższa lista zawiera kilka przykładów metody i właściwości, które tworzą i zwracać wskaźnik TextPointer.  Ta lista nie jest wyczerpująca: - z <xref:System.Windows.Documents.TextRange>: <xref:System.Windows.Documents.TextRange.Start%2A>i <xref:System.Windows.Documents.TextRange.End%2A>.</xref:System.Windows.Documents.TextRange.End%2A> </xref:System.Windows.Documents.TextRange.Start%2A> </xref:System.Windows.Documents.TextRange>      -   From a <xref:System.Windows.Documents.TextElement>:  <xref:System.Windows.Documents.TextElement.ContentStart%2A>, <xref:System.Windows.Documents.TextElement.ContentEnd%2A>, <xref:System.Windows.Documents.TextElement.ElementStart%2A>, and <xref:System.Windows.Documents.TextElement.ElementEnd%2A>.</xref:System.Windows.Documents.TextElement.ElementEnd%2A></xref:System.Windows.Documents.TextElement.ElementStart%2A></xref:System.Windows.Documents.TextElement.ContentEnd%2A></xref:System.Windows.Documents.TextElement.ContentStart%2A></xref:System.Windows.Documents.TextElement>      -From <xref:System.Windows.Controls.TextBlock>(kontener tekst): <xref:System.Windows.Controls.TextBlock.ContentStart%2A>, <xref:System.Windows.Controls.TextBlock.ContentEnd%2A>i <xref:System.Windows.Controls.TextBlock.GetPositionFromPoint%2A>.</xref:System.Windows.Controls.TextBlock.GetPositionFromPoint%2A> </xref:System.Windows.Controls.TextBlock.ContentEnd%2A> </xref:System.Windows.Controls.TextBlock.ContentStart%2A> </xref:System.Windows.Controls.TextBlock>      -From <xref:System.Windows.Documents.FlowDocument>(kontener tekst): <xref:System.Windows.Documents.FlowDocument.ContentStart%2A>, i <xref:System.Windows.Documents.FlowDocument.ContentEnd%2A>— z istniejącego wskaźnika TextPointer: <xref:System.Windows.Documents.TextPointer.DocumentStart%2A>, <xref:System.Windows.Documents.TextPointer.DocumentEnd%2A>, <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A>i <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>.</xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> </xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A> </xref:System.Windows.Documents.TextPointer.DocumentEnd%2A> </xref:System.Windows.Documents.TextPointer.DocumentStart%2A> </xref:System.Windows.Documents.FlowDocument.ContentEnd%2A> </xref:System.Windows.Documents.FlowDocument.ContentStart%2A> </xref:System.Windows.Documents.FlowDocument>"
  example:
  - "The following example demonstrates how to use a TextPointer to find a position just inside of the first <xref:System.Windows.Documents.Run> element in a specified text container.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_TextPointer1](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_textpointer1)]\n [!code-vb[TextPointer_Snippets#_TextPointer_TextPointer1](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_textpointer1)]  \n  \n The following example implements a simplistic find algorithm using TextPointer facilities.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_TextPointer2](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_textpointer2)]\n [!code-vb[TextPointer_Snippets#_TextPointer_TextPointer2](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_textpointer2)]"
  syntax:
    content: 'public class TextPointer : System.Windows.Documents.ContentPosition'
  inheritance:
  - System.Object
  - System.Windows.Documents.ContentPosition
  implements: []
  inheritedMembers:
  - System.Windows.Documents.ContentPosition.Missing
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)
  id: CompareTo(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: CompareTo(TextPointer)
  nameWithType: TextPointer.CompareTo(TextPointer)
  fullName: System.Windows.Documents.TextPointer.CompareTo(TextPointer)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Wykonuje porządkowej porównanie położenia określonego przez bieżący <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> i określić drugi <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Wartość -1 wskazuje, że pozycja określona przez bieżące <xref:System.Windows.Documents.TextPointer>poprzedza pozycja określona przez `position`.</xref:System.Windows.Documents.TextPointer>  Wartość 0 wskazuje, że wskazany pozycje są takie same.  Wartość dodatnią +&1; oznacza, że pozycja określona przez bieżące <xref:System.Windows.Documents.TextPointer>następuje pozycja określona przez `position`.</xref:System.Windows.Documents.TextPointer>"
  example:
  - "The following example demonstrates a use for this method.  In the example, the CompareTo method is used in conjunction with the <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A> method to test whether a specified <xref:System.Windows.Documents.TextElement> is empty.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getinsertionposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getinsertionposition)]"
  syntax:
    content: public int CompareTo (System.Windows.Documents.TextPointer position);
    parameters:
    - id: position
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> , który określa położenie do porównania z bieżącym położeniu."
    return:
      type: System.Int32
      description: "– 1, gdy bieżący <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> poprzedza <code> position </code>; 0, jeśli lokalizacje są takie same; + 1, jeśli bieżący <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> następuje <code> position </code>."
  overload: System.Windows.Documents.TextPointer.CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>position</code>Określa położenie poza kontener tekst skojarzony z bieżącym położeniu."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)
  id: DeleteTextInRun(System.Int32)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: DeleteTextInRun(Int32)
  nameWithType: TextPointer.DeleteTextInRun(Int32)
  fullName: System.Windows.Documents.TextPointer.DeleteTextInRun(Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Usuwa określoną liczbę znaków od pozycji bieżącej <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Określ wartość dodatnią, aby usunąć znaki, które należy wykonać bieżącej pozycji (podobnie jak w <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>); określ wartość ujemną, aby usunąć znaki, które należy poprzedzić bieżącego położenia (podobnie jak w <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>).</xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName> </xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>       Liczba znaków w rzeczywistości usunięty może być mniejsza niż liczba określona przez `count`.  Dzieje się tak w przypadku których `count` określa więcej znaków niż istnieje do usunięcia."
  syntax:
    content: public int DeleteTextInRun (int count);
    parameters:
    - id: count
      type: System.Int32
      description: "Liczba znaków do usunięcia, zaczynając od bieżącego położenia. Określ wartość dodatnią, aby usunąć znaki, które należy wykonać bieżącej pozycji; Określ wartość ujemną, aby usunąć znaki, które należy poprzedzić bieżącego położenia."
    return:
      type: System.Int32
      description: "Liczba znaków w rzeczywistości usunięty."
  overload: System.Windows.Documents.TextPointer.DeleteTextInRun*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Metoda jest wywoływana w miejscu, w których tekst nie jest dozwolone."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.DocumentEnd
  id: DocumentEnd
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: DocumentEnd
  nameWithType: TextPointer.DocumentEnd
  fullName: System.Windows.Documents.TextPointer.DocumentEnd
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Pobiera <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> na końcu zawartości kontenera tekstowego skojarzonego z bieżącego położenia."
  remarks: "<xref:System.Windows.Documents.TextPointer.Parent%2A>Dla zwróconego <xref:System.Windows.Documents.TextPointer>jest zawsze kontenerze tekstu (<xref:System.Windows.Controls.TextBlock> lub <xref:System.Windows.Documents.FlowDocument>), zamiast <xref:System.Windows.Documents.TextElement>.</xref:System.Windows.Documents.TextElement> </xref:System.Windows.Documents.FlowDocument> </xref:System.Windows.Controls.TextBlock> </xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer.Parent%2A>"
  syntax:
    content: public System.Windows.Documents.TextPointer DocumentEnd { get; }
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> na końcu zawartości kontenera tekstowego skojarzonego z bieżącego położenia."
  overload: System.Windows.Documents.TextPointer.DocumentEnd*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.DocumentStart
  id: DocumentStart
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: DocumentStart
  nameWithType: TextPointer.DocumentStart
  fullName: System.Windows.Documents.TextPointer.DocumentStart
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Pobiera <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> na początku zawartości kontenera tekstowego skojarzonego z bieżącego położenia."
  remarks: "Użyj pozycji zwracane przez tę właściwość jako pozycji linii bazowej, w którym do pracy z przesunięciem względną do innych pozycji.  <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>i <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>metody umożliwiają tłumaczenie między i pozycji przesunięciami.</xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> </xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>       <xref:System.Windows.Documents.TextPointer.Parent%2A>Dla zwróconego <xref:System.Windows.Documents.TextPointer>jest zawsze kontenerze tekstu (<xref:System.Windows.Controls.TextBlock> lub <xref:System.Windows.Documents.FlowDocument>), zamiast <xref:System.Windows.Documents.TextElement>.</xref:System.Windows.Documents.TextElement> </xref:System.Windows.Documents.FlowDocument> </xref:System.Windows.Controls.TextBlock> </xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer.Parent%2A>"
  syntax:
    content: public System.Windows.Documents.TextPointer DocumentStart { get; }
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> na początku zawartości kontenera tekstowego skojarzonego z bieżącego położenia."
  overload: System.Windows.Documents.TextPointer.DocumentStart*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)
  id: GetAdjacentElement(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetAdjacentElement(LogicalDirection)
  nameWithType: TextPointer.GetAdjacentElement(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetAdjacentElement(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Zwraca element, jeśli obramowania bieżącej <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> w określonym kierunku logiczne."
  remarks: "Zwrócony element jest zwykle <xref:System.Windows.Documents.TextElement>.</xref:System.Windows.Documents.TextElement>  A <xref:System.Windows.UIElement>może być zwracany podczas <xref:System.Windows.Documents.TextPointer>wskazuje położenie wewnątrz <xref:System.Windows.Documents.BlockUIContainer>element lub <xref:System.Windows.Documents.InlineUIContainer>elementu.</xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.TextPointer> </xref:System.Windows.UIElement>"
  syntax:
    content: public System.Windows.DependencyObject GetAdjacentElement (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Jeden z <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> wartości, które określa kierunek logicznej wyszukiwania dla elementu sąsiadujących ze sobą."
    return:
      type: System.Windows.DependencyObject
      description: "Element sąsiadujących ze sobą w określonym <code> direction </code>, lub <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Jeśli sąsiadujących ze sobą nie zawiera żadnego elementu."
  overload: System.Windows.Documents.TextPointer.GetAdjacentElement*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)
  id: GetCharacterRect(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetCharacterRect(LogicalDirection)
  nameWithType: TextPointer.GetCharacterRect(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetCharacterRect(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Zwraca obwiedni (<xref href=&quot;System.Windows.Rect&quot;></xref>) dla zawartości, która obramowania bieżącej <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> w określonym kierunku logiczne."
  remarks: "<xref:System.Windows.Documents.TextElement>krawędziach nie są uznawane za zawartości na potrzeby tej metody.</xref:System.Windows.Documents.TextElement>  Jeśli <xref:System.Windows.Documents.TextPointer>jest umieszczony przed <xref:System.Windows.Documents.TextElement>krawędzi, zwracana wartość jest obwiednią Następna z systemem innym niż<xref:System.Windows.Documents.TextElement> zawartości w określonym kierunku.</xref:System.Windows.Documents.TextElement> </xref:System.Windows.Documents.TextElement> </xref:System.Windows.Documents.TextPointer>  Jeśli brak zawartości w określonym kierunku zerowej szerokości <xref:System.Windows.Rect>jest zwracany za wysokości dopasowania wysokości żadnych poprzedzających zawartości.</xref:System.Windows.Rect>       Operacja wykonywana przez tę metodę zależy od prawidłowy układu.  Jeśli to konieczne, ta metoda próbuje automatycznie ponownie wygenerować układzie prawidłowe przed wykonaniem operacji.  Trwa ponowne generowanie układu może być dość kosztowna operacja.  Użyj <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>Właściwość do sprawdzenia układu prawidłowe przed wykonaniem operacji, które może ponownie wygenerować układ.</xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>  Aby uzyskać więcej informacji, zobacz [układu](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Windows.Rect GetCharacterRect (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Jeden z <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> wartości, które określa logicznej kierunek, w którym można znaleźć zawartości obwiedni."
    return:
      type: System.Windows.Rect
      description: "Obwiedni zawartości ograniczająca bieżącego <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> w określonym kierunku lub &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; Jeśli bieżąca, informacje o układzie prawidłowy jest niedostępny."
  overload: System.Windows.Documents.TextPointer.GetCharacterRect*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)
  id: GetInsertionPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetInsertionPosition(LogicalDirection)
  nameWithType: TextPointer.GetInsertionPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetInsertionPosition(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Zwraca <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> do najbliższego wstawiania w określonym kierunku logiczne."
  remarks: "Pozycja wstawiania jest położenie, w którym można dodać nowej zawartości bez przerywania wszelkie semantycznego reguły dla skojarzonej zawartości.  W praktyce wstawiania jest dowolne miejsce w sytuacjach, gdy znajduje się daszek zawartości.  Przykład prawidłowego <xref:System.Windows.Documents.TextPointer>pozycji, która nie jest wstawiania jest pozycją między dwóch sąsiadujących ze sobą <xref:System.Windows.Documents.Paragraph>tagi (oznacza to, że między tagu zamykającego z poprzednim akapicie i otwierający tag następnego akapitu).</xref:System.Windows.Documents.Paragraph> </xref:System.Windows.Documents.TextPointer>       Jeśli <xref:System.Windows.Documents.TextPointer>już wskazuje prawidłowy wstawiania, lecz tag zamykający dla niepustej sekwencji formatowania bezpośrednio następuje tej pozycji w określonym kierunku, a następnie <xref:System.Windows.Documents.TextPointer>zwróconych przez to metody jest dostosowana do wskaż pozycja wstawiania zaraz po zamknięciu formatowania sekwencji.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer>    Rozważmy na przykład sekwencji znaczników `<Bold>``a``</Bold>``b`.  Należy pamiętać, że istnieją dwie pozycje wstawiania między literami `a` i `b`— poprzedzającym zamknięcia `Bold` tag, a drugi, bezpośrednio po upływie `Bold` tagu.  Jeśli GetInsertionPosition jest wywoływana na <xref:System.Windows.Documents.TextPointer>do położenia bezpośrednio po literę `a` i przed zamknięcia `Bold` tag i z `direction` z <xref:System.Windows.Documents.LogicalDirection>, zwracana <xref:System.Windows.Documents.TextPointer>jest ustawiane w pozycji tuż przed literą `b`, po upływie `Bold` tagu.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.LogicalDirection> </xref:System.Windows.Documents.TextPointer>  Podobne dostosowań do otwarcia tagów formatowania podczas pracy w przeciwnym kierunku logiczne.  Ta metoda jest przeznaczona do pozwalają Uściślanie między pozycje wstawiania w podobnych przypadków.       Ta metoda umożliwia również można selektywnie punkty wstawienia, gdy uczestniczy sekwencji strukturalnych tagów. Na przykład, gdy na pozycji od zamknięcia i otwarcia tagów akapitu, kierunku parametru może służyć do wybierz najbliższy punkt wstawiania na początku następujący ustęp (określając <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>) lub na końcu poprzednim akapicie (określając <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>).</xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName> </xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>       Gdy wskaźnik myszy znajduje się już w wstawiania i nie ma żadnych sąsiadujących znaczników formatowania w określonym `direction`, zwróciła <xref:System.Windows.Documents.TextPointer>wskazuje na tym samym miejscu wywołania <xref:System.Windows.Documents.TextPointer>.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer>       Istnieje możliwość, czy nie prawidłowy wstawiania istnieje względem z pozycji wskazywanej przez <xref:System.Windows.Documents.TextPointer>.</xref:System.Windows.Documents.TextPointer>  Może to nastąpić, jeśli przywoływanej zawartości jest strukturalnie niekompletne, jak pusta tabela lub listy.  W takich przypadkach, ta metoda po prostu zwraca <xref:System.Windows.Documents.TextPointer>na tym samym miejscu <xref:System.Windows.Documents.TextPointer>z została wywołana metoda.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer>  Ta metoda zawsze zwraca prawidłową <xref:System.Windows.Documents.TextPointer>.</xref:System.Windows.Documents.TextPointer>"
  example:
  - "This example shows how to use the GetInsertionPosition method to check whether a specified <xref:System.Windows.Documents.TextElement> is empty of printable content.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getinsertionposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getinsertionposition)]"
  syntax:
    content: public System.Windows.Documents.TextPointer GetInsertionPosition (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Jeden z <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> wartości, które określa logicznej kierunek, w których będą poszukiwane najbliższego wstawiania."
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> do najbliższego wstawiania w określonym kierunku."
  overload: System.Windows.Documents.TextPointer.GetInsertionPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)
  id: GetLineStartPosition(System.Int32)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetLineStartPosition(Int32)
  nameWithType: TextPointer.GetLineStartPosition(Int32)
  fullName: System.Windows.Documents.TextPointer.GetLineStartPosition(Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Zwraca <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> na początku wiersza, który został określony względem bieżącej <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Jeśli <xref:System.Windows.Documents.TextPointer>punktów niejednoznaczne pozycji, na przykład między dwoma liniami wiersza w kierunku określony przez <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>został wybrany jako względną wiersza początkowego.</xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> </xref:System.Windows.Documents.TextPointer>       Operacja wykonywana przez tę metodę zależy od prawidłowy układu.  Jeśli to konieczne, ta metoda próbuje automatycznie ponownie wygenerować układzie prawidłowe przed wykonaniem operacji.  Trwa ponowne generowanie układu może być dość kosztowna operacja.  Użyj <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>do sprawdzenia układu prawidłowe przed wykonaniem operacji, które może ponownie wygenerować układ.</xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>  Aby uzyskać więcej informacji, zobacz [układu](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Windows.Documents.TextPointer GetLineStartPosition (int count);
    parameters:
    - id: count
      type: System.Int32
      description: "Liczba znaczników linii początkowej można pominąć w przypadku określenia wiersza, dla którego ma zostać zwrócona pozycji początkowej. Wartości ujemne określić poprzednich wierszy, 0 określa bieżącego wiersza i określ liczbę wartości dodatnich kolejne wiersze."
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> wskazujące na początku określonego wiersza (z <xref:System.Windows.Documents.TextPointer.LogicalDirection*>ustawioną <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref>), lub <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Jeśli określonego wiersza jest spoza zakresu lub w przeciwnym razie nie można odnaleźć.</xref:System.Windows.Documents.TextPointer.LogicalDirection*>"
  overload: System.Windows.Documents.TextPointer.GetLineStartPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)
  id: GetLineStartPosition(System.Int32,System.Int32@)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetLineStartPosition(Int32,Int32)
  nameWithType: TextPointer.GetLineStartPosition(Int32,Int32)
  fullName: System.Windows.Documents.TextPointer.GetLineStartPosition(Int32,Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Zwraca <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> na początku wiersza, który został określony względem bieżącej <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>i w raportach, ile wierszy zostały pominięte."
  remarks: "Jeśli <xref:System.Windows.Documents.TextPointer>punktów niejednoznaczne pozycji, na przykład między dwoma liniami wiersza w kierunku określony przez <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>Właściwość został wybrany jako względną wiersza początkowego.</xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> </xref:System.Windows.Documents.TextPointer>"
  syntax:
    content: public System.Windows.Documents.TextPointer GetLineStartPosition (int count, out int actualCount);
    parameters:
    - id: count
      type: System.Int32
      description: "Liczba znaczników linii początkowej można pominąć w przypadku określenia wiersza, dla którego ma zostać zwrócona pozycji początkowej. Wartości ujemne określić poprzednich wierszy, 0 określa bieżącego wiersza i określ liczbę wartości dodatnich kolejne wiersze."
    - id: actualCount
      type: System.Int32
      description: "Gdy metoda zwróci wartość, zawiera rzeczywistą liczbę znaczników początek wiersza, które zostały pominięte podczas określania wiersza, dla którego ma zostać zwrócona pozycji początkowej.  Ta wartość może być mniejsza niż `count` Jeśli początek lub koniec zawartości napotkano przed określoną liczbę wierszy są pomijane. Ten parametr jest przekazywany jako niezainicjowany."
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> wskazujące na początku określonego wiersza (z <xref:System.Windows.Documents.TextPointer.LogicalDirection*>ustawioną <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref>), lub do początku wiersza najbliżej określonego wiersza, jeśli określony wiersz jest poza zakresem.</xref:System.Windows.Documents.TextPointer.LogicalDirection*>"
  overload: System.Windows.Documents.TextPointer.GetLineStartPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)
  id: GetNextContextPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetNextContextPosition(LogicalDirection)
  nameWithType: TextPointer.GetNextContextPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetNextContextPosition(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Zwraca wskaźnik do następny symbol w określonym kierunku logiczne."
  remarks: "Jedną z następujących czynności jest traktowany jako symbol: — otwierający lub zamykający dla <xref:System.Windows.Documents.TextElement>elementu.</xref:System.Windows.Documents.TextElement>      - <xref:System.Windows.UIElement>Element zawarta w <xref:System.Windows.Documents.InlineUIContainer>lub <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Uwaga takich <xref:System.Windows.UIElement>jest zawsze traktowanych jak dokładnie jeden symbol; zawartość dodatkowych ani elementów zawartych w <xref:System.Windows.UIElement>nie są liczone jako symbole.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      16-bitowych [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] znak wewnątrz tekstu <xref:System.Windows.Documents.Run>elementu.</xref:System.Windows.Documents.Run>       Jeśli następny symbol jest skategoryzowany jako <xref:System.Windows.Documents.TextPointerContext>, <xref:System.Windows.Documents.TextPointerContext>, lub <xref:System.Windows.Documents.TextPointerContext>(określonej za pomocą <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>— Metoda), a następnie <xref:System.Windows.Documents.TextPointer>zwróconych przez to metoda jest zaawansowane dokładnie jeden symbol od bieżącego położenia.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> </xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointerContext>       Jeśli następny symbol jest skategoryzowany jako <xref:System.Windows.Documents.TextPointerContext>, a następnie <xref:System.Windows.Documents.TextPointer>zwróconych przez to metody jest zaawansowane poza tekst, aby następny symbol nietekstowych (czyli następnej pozycji where <xref:System.Windows.Documents.TextPointerContext>nie jest <xref:System.Windows.Documents.TextPointerContext>).</xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointerContext>  Liczba dokładne symbol przekroczyła może zostać obliczona wcześniej przez wywołanie metody <xref:System.Windows.Documents.TextPointer.GetTextRunLength%2A>metody.</xref:System.Windows.Documents.TextPointer.GetTextRunLength%2A>"
  example:
  - "The following example demonstrates a use for this method.  The example uses the GetNextContextPosition method in conjunction with the <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> method to traverse and extract the symbols in a specified <xref:System.Windows.Documents.TextElement>.  \n  \n While the example can be used to extract a [!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)] structure for the contents of a given <xref:System.Windows.Documents.TextElement>, it is intended for illustrative purposes only, and should not be used in production code.  See the <xref:System.Xml> namespace for a rich set of types designed for working with and processing XML.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetNextContextPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getnextcontextposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetNextContextPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getnextcontextposition)]"
  syntax:
    content: public System.Windows.Documents.TextPointer GetNextContextPosition (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Jeden z <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> wartości, które określa logicznej kierunek, w których będą poszukiwane następny symbol."
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> na następny symbol w kierunku żądanej lub <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Jeśli bieżące <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> obramowania początek lub koniec zawartości."
  overload: System.Windows.Documents.TextPointer.GetNextContextPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)
  id: GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetNextInsertionPosition(LogicalDirection)
  nameWithType: TextPointer.GetNextInsertionPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetNextInsertionPosition(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Zwraca <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> do następnego wstawiania w określonym kierunku logiczne."
  remarks: "*Wstawiania* jest położenie, w którym można dodać nowej zawartości bez przerywania wszelkie semantycznego reguły dla skojarzonej zawartości.  W praktyce wstawiania jest dowolne miejsce w sytuacjach, gdy znajduje się daszek zawartości.  Przykład prawidłowego <xref:System.Windows.Documents.TextPointer>pozycji, która nie jest wstawiania jest pozycją między dwóch sąsiadujących ze sobą <xref:System.Windows.Documents.Paragraph>tagi (oznacza to, że między tagu zamykającego z poprzednim akapicie i otwierający tag następnego akapitu).</xref:System.Windows.Documents.Paragraph> </xref:System.Windows.Documents.TextPointer>"
  example:
  - "The following example demonstrates a use for this method. The example uses the GetNextInsertionPosition method to traverse content element boundaries in order to count the number of <xref:System.Windows.Documents.Paragraph> elements present between two specified <xref:System.Windows.Documents.TextPointer> instances.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetNextInsertionPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getnextinsertionposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetNextInsertionPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getnextinsertionposition)]"
  syntax:
    content: public System.Windows.Documents.TextPointer GetNextInsertionPosition (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Jeden z <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> wartości, które określa logicznej kierunek, w których będą poszukiwane dalej wstawiania."
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> , które identyfikują dalej wstawiania w kierunku żądanej lub <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> w przypadku nieodnalezienia nie dalej wstawiania."
  overload: System.Windows.Documents.TextPointer.GetNextInsertionPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)
  id: GetOffsetToPosition(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetOffsetToPosition(TextPointer)
  nameWithType: TextPointer.GetOffsetToPosition(TextPointer)
  fullName: System.Windows.Documents.TextPointer.GetOffsetToPosition(TextPointer)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Zwraca liczbę symbole między bieżącą <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> i określić drugi <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Jedną z następujących czynności jest traktowany jako symbol: — otwierający lub zamykający dla <xref:System.Windows.Documents.TextElement>elementu.</xref:System.Windows.Documents.TextElement>      - <xref:System.Windows.UIElement>Element zawarta w <xref:System.Windows.Documents.InlineUIContainer>lub <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Uwaga takich <xref:System.Windows.UIElement>jest zawsze traktowanych jak dokładnie jeden symbol; zawartość dodatkowych ani elementów zawartych w <xref:System.Windows.UIElement>nie są liczone jako symbole.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      16-bitowych [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] znak wewnątrz tekstu <xref:System.Windows.Documents.Run>elementu.</xref:System.Windows.Documents.Run>"
  example:
  - "The following example demonstrates a use for this method. The example uses the GetOffsetToPosition method to find the offsets for two <xref:System.Windows.Documents.TextPointer> instances, and then uses this information to save and restore the selection in a <xref:System.Windows.Controls.RichTextBox>.  The example assumes that the contents of the <xref:System.Windows.Controls.RichTextBox> have not changed between a selection save and a selection restore.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetOffsetToPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getoffsettoposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetOffsetToPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getoffsettoposition)]"
  syntax:
    content: public int GetOffsetToPosition (System.Windows.Documents.TextPointer position);
    parameters:
    - id: position
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> , który określa stanie znaleźć odległość (w symboli)."
    return:
      type: System.Int32
      description: "Względne liczbę symboli między bieżącą <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> i <code> position </code>.  Ujemna wartość oznacza, że bieżący <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> następuje pozycja określona przez <code> position </code>, 0 wskazuje, że pozycje są takie same i dodatnią wartość wskazuje, że bieżące <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> poprzedza pozycja określona przez <code> position </code>."
  overload: System.Windows.Documents.TextPointer.GetOffsetToPosition*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>position</code>Określa położenie poza kontener tekst skojarzony z bieżącym położeniu."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)
  id: GetPointerContext(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetPointerContext(LogicalDirection)
  nameWithType: TextPointer.GetPointerContext(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetPointerContext(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Zwraca wskaźnik kategorii, dla zawartości przylegające do bieżącego <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> w określonym kierunku logiczne."
  remarks: ''
  example:
  - "The following example demonstrates a use for this method. The example uses the GetPointerContext method to implement an algorithm for calculating the balance of opening and closing element tags between two specified <xref:System.Windows.Documents.TextPointer> positions.  Each opening element tag is counted as +1, and each closing element tag is counted as –1.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetOffsetToPosition2](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getoffsettoposition2)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetOffsetToPosition2](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getoffsettoposition2)]"
  syntax:
    content: public System.Windows.Documents.TextPointerContext GetPointerContext (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Jeden z <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> wartości, które określa logicznej kierunek, w którym można określić kategorię dla zawartości sąsiadujących ze sobą."
    return:
      type: System.Windows.Documents.TextPointerContext
      description: "Jeden z <xref href=&quot;System.Windows.Documents.TextPointerContext&quot;> </xref> wartości, które wskazuje, że kategoria sąsiadujących zawartości w określonym kierunku logiczne."
  overload: System.Windows.Documents.TextPointer.GetPointerContext*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)
  id: GetPositionAtOffset(System.Int32)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetPositionAtOffset(Int32)
  nameWithType: TextPointer.GetPositionAtOffset(Int32)
  fullName: System.Windows.Documents.TextPointer.GetPositionAtOffset(Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Zwraca <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> przez określone przesunięcie w symbolach, począwszy od bieżącej pozycji <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Jedną z następujących czynności jest traktowany jako symbol: — otwierający lub zamykający dla <xref:System.Windows.Documents.TextElement>elementu.</xref:System.Windows.Documents.TextElement>      - <xref:System.Windows.UIElement>Element zawarta w <xref:System.Windows.Documents.InlineUIContainer>lub <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Uwaga takich <xref:System.Windows.UIElement>jest zawsze traktowanych jak dokładnie jeden symbol; zawartość dodatkowych ani elementów zawartych w <xref:System.Windows.UIElement>nie są liczone jako symbole.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      16-bitowych [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] znak wewnątrz tekstu <xref:System.Windows.Documents.Run>elementu.</xref:System.Windows.Documents.Run>"
  example:
  - "The following example demonstrates a use for this method. The example uses the GetPositionAtOffset method to implement a pair of methods, one to calculate the offset to a specified position relative to any hosting paragraph, and the other to return a <xref:System.Windows.Documents.TextPointer> to a specified offset in a specified paragraph.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetPositionAtOffset](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getpositionatoffset)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetPositionAtOffset](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getpositionatoffset)]"
  syntax:
    content: public System.Windows.Documents.TextPointer GetPositionAtOffset (int offset);
    parameters:
    - id: offset
      type: System.Int32
      description: "Przesunięcie w symbolach, dla której obliczana i zwraca położenie.  Jeśli przesunięcie jest ujemna, pozycja jest obliczana w kierunku logicznej przeciwne wskazaną przez <xref:System.Windows.Documents.TextPointer.LogicalDirection*>Właściwości.</xref:System.Windows.Documents.TextPointer.LogicalDirection*>"
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> pozycji przez określone przesunięcie lub<xref uid=&quot;langword_csharp_ null &quot; name=&quot; null &quot; href=&quot;&quot;></xref>w przypadku nieodnalezienia nie odpowiedniej pozycji."
  overload: System.Windows.Documents.TextPointer.GetPositionAtOffset*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)
  id: GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetPositionAtOffset(Int32,LogicalDirection)
  nameWithType: TextPointer.GetPositionAtOffset(Int32,LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetPositionAtOffset(Int32,LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Zwraca <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> przez określone przesunięcie w symbolach, począwszy od bieżącej pozycji <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> i w określonym kierunku."
  remarks: "Jedną z następujących czynności jest traktowany jako symbol: — otwierający lub zamykający dla <xref:System.Windows.Documents.TextElement>elementu.</xref:System.Windows.Documents.TextElement>      - <xref:System.Windows.UIElement>Element zawarta w <xref:System.Windows.Documents.InlineUIContainer>lub <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Uwaga takich <xref:System.Windows.UIElement>jest zawsze traktowanych jak dokładnie jeden symbol; zawartość dodatkowych ani elementów zawartych w <xref:System.Windows.UIElement>nie są liczone jako symbole.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      16-bitowych [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] znak wewnątrz tekstu <xref:System.Windows.Documents.Run>elementu.</xref:System.Windows.Documents.Run>"
  syntax:
    content: public System.Windows.Documents.TextPointer GetPositionAtOffset (int offset, System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: offset
      type: System.Int32
      description: "Przesunięcie w symbolach, dla której obliczana i zwraca położenie.  Jeśli przesunięcie jest ujemna, zwracana <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> poprzedza bieżącego <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>; w przeciwnym razie wynika z."
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Jeden z <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> wartości, które określa kierunek logicznej zwracana <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> pozycji przez określone przesunięcie lub<xref uid=&quot;langword_csharp_ null &quot; name=&quot; null &quot; href=&quot;&quot;></xref>Jeśli przesunięcie rozciąga się poza koniec zawartości."
  overload: System.Windows.Documents.TextPointer.GetPositionAtOffset*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)
  id: GetTextInRun(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetTextInRun(LogicalDirection)
  nameWithType: TextPointer.GetTextInRun(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetTextInRun(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Zwraca ciąg zawierający tekst obok bieżącej <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> w określonym kierunku logiczne."
  remarks: "Ta metoda zwraca tylko nieprzerwaną serii tekstu.  Nic nie zostanie zwrócone, jeśli żadnego typu symbolu innego niż <xref:System.Windows.Documents.TextPointerContext>sąsiaduje z bieżącej <xref:System.Windows.Documents.TextPointer>w określonym kierunku.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointerContext>  Podobnie tekstu jest zwracana tylko do następny symbol nietekstowych."
  example:
  - "The following example demonstrates a use for this method. The example uses the GetTextInRun method to implement a simple text extractor.  The method returns a string concatenation of all text between two specified <xref:System.Windows.Documents.TextPointer> instances.  \n  \n While the example can be used to extract any text between two <xref:System.Windows.Documents.TextPointer> instances, it is intended for illustrative purposes only, and should not be used in production code.  Use the <xref:System.Windows.Documents.TextRange.Text%2A?displayProperty=fullName> property instead.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetTextInRun](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_gettextinrun)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetTextInRun](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_gettextinrun)]"
  syntax:
    content: public string GetTextInRun (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Jeden z <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> wartości, które określa kierunek logicznej odnajdujący i zwracający dowolnym sąsiadującym tekstem."
    return:
      type: System.String
      description: "Ciąg zawierający dowolnym sąsiadującym tekstem w określonym kierunku logiczne, lub &lt;xref:System.String?displayProperty=fullName&gt; w przypadku nieodnalezienia nie sąsiadującym tekstem."
  overload: System.Windows.Documents.TextPointer.GetTextInRun*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)
  id: GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  nameWithType: TextPointer.GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  fullName: System.Windows.Documents.TextPointer.GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Kopiuje określoną maksymalną liczbę znaków z dowolnym sąsiadującym tekstem w określonym kierunku do tablicy znaków dostarczony przez obiekt wywołujący."
  remarks: "Ta metoda zwraca tylko nieprzerwaną serii tekstu.  Nic nie zostanie zwrócone, jeśli żadnego typu symbolu innego niż <xref:System.Windows.Documents.TextPointerContext>sąsiaduje z bieżącej <xref:System.Windows.Documents.TextPointer>w określonym kierunku.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointerContext>  Podobnie tekstu jest zwracana tylko do następny symbol nietekstowych."
  syntax:
    content: public int GetTextInRun (System.Windows.Documents.LogicalDirection direction, char[] textBuffer, int startIndex, int count);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Jeden z <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> wartości, które określa logicznej kierunek, w którym można znaleźć i skopiować dowolnym sąsiadującym tekstem."
    - id: textBuffer
      type: System.Char[]
      description: "Bufor, do którego jest skopiowany tekst."
    - id: startIndex
      type: System.Int32
      description: "Indeks do `textBuffer` jaką rozpocząć pisanie skopiowany tekst."
    - id: count
      type: System.Int32
      description: "Maksymalna liczba znaków do skopiowania."
    return:
      type: System.Int32
      description: "Liczba znaków, które faktycznie kopiowane do <code> textBuffer </code>."
  overload: System.Windows.Documents.TextPointer.GetTextInRun*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>startIndex</code>jest mniejsza niż 0 lub większą niż <xref:System.Array.Length*> właściwość <code>textBuffer</code>.       - lub - <code>count</code> jest mniejsza niż 0 lub większą niż pozostałe miejsce w <code>textBuffer</code> (<code>textBuffer</code>.<xref:System.Array.Length*> minus <code>startIndex</code>)."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)
  id: GetTextRunLength(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetTextRunLength(LogicalDirection)
  nameWithType: TextPointer.GetTextRunLength(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetTextRunLength(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Zwraca liczbę znaków Unicode między bieżącą <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> i następny symbol nietekstowych w określonym kierunku logiczne."
  remarks: "Jedną z następujących czynności jest traktowany jako symbol: — otwierający lub zamykający dla <xref:System.Windows.Documents.TextElement>elementu.</xref:System.Windows.Documents.TextElement>      - <xref:System.Windows.UIElement>Element zawarta w <xref:System.Windows.Documents.InlineUIContainer>lub <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Uwaga takich <xref:System.Windows.UIElement>jest zawsze traktowanych jak dokładnie jeden symbol; zawartość dodatkowych ani elementów zawartych w <xref:System.Windows.UIElement>nie są liczone jako symbole.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      16-bitowych [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] znak wewnątrz tekstu <xref:System.Windows.Documents.Run>elementu.</xref:System.Windows.Documents.Run>"
  syntax:
    content: public int GetTextRunLength (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Jeden z <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> wartości, które określa logicznej kierunek, w którym można określić liczbę znaków."
    return:
      type: System.Int32
      description: "Liczba znaków Unicode między bieżącą <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> i następny symbol nietekstowych.  Ta liczba może być 0, jeśli nie ma żadnego tekstu sąsiadujących ze sobą."
  overload: System.Windows.Documents.TextPointer.GetTextRunLength*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.HasValidLayout
  id: HasValidLayout
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: HasValidLayout
  nameWithType: TextPointer.HasValidLayout
  fullName: System.Windows.Documents.TextPointer.HasValidLayout
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Pobiera wartość wskazującą, czy kontener tekst skojarzony z bieżącą pozycję ma prawidłową układ (aktualne)."
  remarks: "W razie potrzeby operacje, które są zależne od prawidłowy układu (takich jak <xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>metody <xref:System.Windows.Documents.TextPointer.GetCharacterRect%2A>metody i <xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A>Właściwości) próbować automatycznie ponownie wygenerować układzie prawidłowe przed wykonaniem operacji.</xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A> </xref:System.Windows.Documents.TextPointer.GetCharacterRect%2A> </xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>  Trwa ponowne generowanie układu może być dość kosztowna operacja.  Tej właściwości należy użyć, aby sprawdzić układ prawidłowe przed wykonaniem operacji, które może ponownie wygenerować układu.  Aby uzyskać więcej informacji, zobacz [układu](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool HasValidLayout { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli układ są aktualne i prawidłowe; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.TextPointer.HasValidLayout*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.InsertLineBreak
  id: InsertLineBreak
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: InsertLineBreak()
  nameWithType: TextPointer.InsertLineBreak()
  fullName: System.Windows.Documents.TextPointer.InsertLineBreak()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Wstawia podział wiersza w bieżącym położeniu."
  syntax:
    content: public System.Windows.Documents.TextPointer InsertLineBreak ();
    parameters: []
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> pozycjonowane natychmiast po <xref href=&quot;System.Windows.Documents.LineBreak&quot;> </xref> element wstawiony przez tę metodę."
  overload: System.Windows.Documents.TextPointer.InsertLineBreak*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.InsertParagraphBreak
  id: InsertParagraphBreak
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: InsertParagraphBreak()
  nameWithType: TextPointer.InsertParagraphBreak()
  fullName: System.Windows.Documents.TextPointer.InsertParagraphBreak()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Wstawia podział akapitu w bieżącym położeniu."
  remarks: "Jeśli ta metoda jest wywoływana, gdy bieżące położenie jest wewnątrz istniejącego <xref:System.Windows.Documents.Paragraph>elementu, istniejące akapitu oraz zawartość zawiera są podzielone na dwa akapity w bieżącym położeniu.</xref:System.Windows.Documents.Paragraph>  Jeśli ta metoda jest wywoływana, gdy bieżąca pozycja nie znajduje się wewnątrz istniejącego akapitu, jest wstawiany akapitu nowy, pusty.  Jeśli ta metoda jest wywoływana na pozycji nie nadaje się do dzielenia lub wstawianie akapitu (na przykład, jeśli bieżące położenie jest wewnątrz <xref:System.Windows.Documents.Hyperlink>element), jest zgłaszany wyjątek.</xref:System.Windows.Documents.Hyperlink>"
  syntax:
    content: public System.Windows.Documents.TextPointer InsertParagraphBreak ();
    parameters: []
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> na początku (<xref:System.Windows.Documents.TextElement.ContentStart*>) nowy akapit.</xref:System.Windows.Documents.TextElement.ContentStart*>"
  overload: System.Windows.Documents.TextPointer.InsertParagraphBreak*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Ta metoda jest wywoływana na pozycji nie można podzielić, aby pomieścić nowy akapit, takich jak w zakresie <xref href=&quot;System.Windows.Documents.Hyperlink&quot;> </xref> lub <xref href=&quot;System.Windows.Documents.InlineUIContainer&quot;> </xref>."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.InsertTextInRun(System.String)
  id: InsertTextInRun(System.String)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: InsertTextInRun(String)
  nameWithType: TextPointer.InsertTextInRun(String)
  fullName: System.Windows.Documents.TextPointer.InsertTextInRun(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Wstawia określony tekst w tekście <xref href=&quot;System.Windows.Documents.Run&quot;> </xref> w bieżącym położeniu."
  remarks: "Jeśli <xref:System.Windows.Documents.TextPointer>jest poza zakresem przez <xref:System.Windows.Documents.Run>elementu <xref:System.Windows.Documents.Run>dodaje się wraz z programem `textData`.</xref:System.Windows.Documents.Run> </xref:System.Windows.Documents.Run> </xref:System.Windows.Documents.TextPointer>"
  syntax:
    content: public void InsertTextInRun (string textData);
    parameters:
    - id: textData
      type: System.String
      description: "Tekst do wstawienia."
  overload: System.Windows.Documents.TextPointer.InsertTextInRun*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Bieżąca pozycja nie znajduje się w <xref href=&quot;System.Windows.Documents.Run&quot;> </xref> elementu."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>textData</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.IsAtInsertionPosition
  id: IsAtInsertionPosition
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: IsAtInsertionPosition
  nameWithType: TextPointer.IsAtInsertionPosition
  fullName: System.Windows.Documents.TextPointer.IsAtInsertionPosition
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Pobiera wartość wskazującą, czy bieżące położenie jest wstawiania."
  remarks: "Pozycja wstawiania jest położenie, w którym można dodać nowej zawartości bez przerywania wszelkie semantycznego reguły dla skojarzonej zawartości.  W praktyce wstawiania jest dowolne miejsce w sytuacjach, gdy znajduje się daszek zawartości.  Przykład prawidłowego <xref:System.Windows.Documents.TextPointer>pozycji, która nie jest wstawiania jest pozycją między dwóch sąsiadujących ze sobą <xref:System.Windows.Documents.Paragraph>tagi (oznacza to, że między tagu zamykającego z poprzednim akapicie i otwierający tag następnego akapitu).</xref:System.Windows.Documents.Paragraph> </xref:System.Windows.Documents.TextPointer>"
  syntax:
    content: public bool IsAtInsertionPosition { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli bieżące położenie jest wstawiania; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.TextPointer.IsAtInsertionPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.IsAtLineStartPosition
  id: IsAtLineStartPosition
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: IsAtLineStartPosition
  nameWithType: TextPointer.IsAtLineStartPosition
  fullName: System.Windows.Documents.TextPointer.IsAtLineStartPosition
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Pobiera wartość wskazującą, czy bieżące położenie jest na początku wiersza."
  remarks: "Jeśli <xref:System.Windows.Documents.TextPointer>punktów niejednoznaczne pozycji, na przykład między dwoma liniami wiersza w kierunku określony przez <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>Właściwość został wybrany jako względną wiersza początkowego.</xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> </xref:System.Windows.Documents.TextPointer>       Operacja wykonywana przez tę właściwość zależy od prawidłowy układu.  Jeśli to konieczne, ta metoda próbuje automatycznie ponownie wygenerować układzie prawidłowe przed wykonaniem operacji.  Trwa ponowne generowanie układu może być dość kosztowna operacja.  Użyj <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>Właściwość do sprawdzenia układu prawidłowe przed wykonaniem operacji, które może ponownie wygenerować układ.</xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>  Aby uzyskać więcej informacji, zobacz [układu](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool IsAtLineStartPosition { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli bieżące położenie jest na początku wiersza; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.TextPointer.IsAtLineStartPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)
  id: IsInSameDocument(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: IsInSameDocument(TextPointer)
  nameWithType: TextPointer.IsInSameDocument(TextPointer)
  fullName: System.Windows.Documents.TextPointer.IsInSameDocument(TextPointer)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Wskazuje, czy określona pozycja jest w tym samym kontenerze tekstu jako bieżącego położenia."
  remarks: "Większość operacji obejmujących wiele <xref:System.Windows.Documents.TextPointer>wystąpienia są prawidłowe tylko, jeśli wystąpienia danego wskazują miejsca, w których znajdują się w tym samym zakresie tekstu w kontenerze.</xref:System.Windows.Documents.TextPointer>  Na przykład <xref:System.Windows.Documents.TextPointer.CompareTo%2A>i <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>nie można używać metod <xref:System.Windows.Documents.TextPointer>do położenia poza kontener tekst skojarzony z bieżącą pozycję.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> </xref:System.Windows.Documents.TextPointer.CompareTo%2A>  Ta metoda służy do sprawdzenia, czy określonej <xref:System.Windows.Documents.TextPointer>jest zgodny z bieżącą pozycję w takich operacjach.</xref:System.Windows.Documents.TextPointer>"
  example:
  - "The following example demonstrates a use for this method.  The example uses the IsInSameDocument method to check whether a specified <xref:System.Windows.Documents.TextPointer> is positioned between two other specified <xref:System.Windows.Documents.TextPointer> instances in a situation when there is no guarantee that all three positions belong to the same text container.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_IsInSameDocument](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_isinsamedocument)]\n [!code-vb[TextPointer_Snippets#_TextPointer_IsInSameDocument](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_isinsamedocument)]"
  syntax:
    content: public bool IsInSameDocument (System.Windows.Documents.TextPointer textPosition);
    parameters:
    - id: textPosition
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> , który określa położenie do porównania z bieżącym położeniu."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli <code> textPosition </code> wskazuje pozycję, który znajduje się w tym samym kontenerze tekstu jako bieżącego położenia; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.TextPointer.IsInSameDocument*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>textPosition</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.LogicalDirection
  id: LogicalDirection
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: LogicalDirection
  nameWithType: TextPointer.LogicalDirection
  fullName: System.Windows.Documents.TextPointer.LogicalDirection
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Pobiera kierunek logiczne skojarzone z bieżącą pozycję, który służy do odróżniania zawartości skojarzonej z bieżącą pozycję."
  remarks: "Jak ta właściwość jest używana, na przykład <xref:System.Windows.Documents.LogicalDirection>z <xref:System.Windows.Documents.TextPointer>zwrócony przez testu trafienia metoda daje trafień, który jest między znakami tekstu.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.LogicalDirection> Logiczne direction Określa, które dwóch znaków faktycznie został trafiony — po lewej lub prawej."
  syntax:
    content: public System.Windows.Documents.LogicalDirection LogicalDirection { get; }
    return:
      type: System.Windows.Documents.LogicalDirection
      description: "<xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> Wartość, która jest skojarzona z bieżącym położeniu."
  overload: System.Windows.Documents.TextPointer.LogicalDirection*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.Paragraph
  id: Paragraph
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: Paragraph
  nameWithType: TextPointer.Paragraph
  fullName: System.Windows.Documents.TextPointer.Paragraph
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Pobiera akapicie zakresów bieżącą pozycję, jeśli istnieje."
  syntax:
    content: public System.Windows.Documents.Paragraph Paragraph { get; }
    return:
      type: System.Windows.Documents.Paragraph
      description: "<xref href=&quot;System.Windows.Documents.Paragraph&quot;> </xref> Który zakresów bieżącego położenia lub<xref uid=&quot;langword_csharp_ null &quot; name=&quot; null &quot; href=&quot;&quot;></xref>Jeśli istnieje nie takie akapitu."
  overload: System.Windows.Documents.TextPointer.Paragraph*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.Parent
  id: Parent
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: Parent
  nameWithType: TextPointer.Parent
  fullName: System.Windows.Documents.TextPointer.Parent
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Pobiera logicznej nadrzędnej, czy bieżące położenie zakresów."
  syntax:
    content: public System.Windows.DependencyObject Parent { get; }
    return:
      type: System.Windows.DependencyObject
      description: "Logiczne nadrzędnej, czy bieżące położenie zakresów."
  overload: System.Windows.Documents.TextPointer.Parent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.ToString
  id: ToString
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: ToString()
  nameWithType: TextPointer.ToString()
  fullName: System.Windows.Documents.TextPointer.ToString()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Ten typ lub element członkowski obsługuje [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] infrastrukturę i nie jest przeznaczona do użycia bezpośrednio w kodzie."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "Ciąg reprezentujący obiekt."
  overload: System.Windows.Documents.TextPointer.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Documents.ContentPosition
  isExternal: false
  name: System.Windows.Documents.ContentPosition
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: CompareTo(TextPointer)
  nameWithType: TextPointer.CompareTo(TextPointer)
  fullName: System.Windows.Documents.TextPointer.CompareTo(TextPointer)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Documents.TextPointer
  parent: System.Windows.Documents
  isExternal: false
  name: TextPointer
  nameWithType: TextPointer
  fullName: System.Windows.Documents.TextPointer
- uid: System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DeleteTextInRun(Int32)
  nameWithType: TextPointer.DeleteTextInRun(Int32)
  fullName: System.Windows.Documents.TextPointer.DeleteTextInRun(Int32)
- uid: System.Windows.Documents.TextPointer.DocumentEnd
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DocumentEnd
  nameWithType: TextPointer.DocumentEnd
  fullName: System.Windows.Documents.TextPointer.DocumentEnd
- uid: System.Windows.Documents.TextPointer.DocumentStart
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DocumentStart
  nameWithType: TextPointer.DocumentStart
  fullName: System.Windows.Documents.TextPointer.DocumentStart
- uid: System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetAdjacentElement(LogicalDirection)
  nameWithType: TextPointer.GetAdjacentElement(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetAdjacentElement(LogicalDirection)
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.Documents.LogicalDirection
  parent: System.Windows.Documents
  isExternal: false
  name: LogicalDirection
  nameWithType: LogicalDirection
  fullName: System.Windows.Documents.LogicalDirection
- uid: System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetCharacterRect(LogicalDirection)
  nameWithType: TextPointer.GetCharacterRect(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetCharacterRect(LogicalDirection)
- uid: System.Windows.Rect
  parent: System.Windows
  isExternal: false
  name: Rect
  nameWithType: Rect
  fullName: System.Windows.Rect
- uid: System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetInsertionPosition(LogicalDirection)
  nameWithType: TextPointer.GetInsertionPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetInsertionPosition(LogicalDirection)
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetLineStartPosition(Int32)
  nameWithType: TextPointer.GetLineStartPosition(Int32)
  fullName: System.Windows.Documents.TextPointer.GetLineStartPosition(Int32)
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetLineStartPosition(Int32,Int32)
  nameWithType: TextPointer.GetLineStartPosition(Int32,Int32)
  fullName: System.Windows.Documents.TextPointer.GetLineStartPosition(Int32,Int32)
- uid: System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetNextContextPosition(LogicalDirection)
  nameWithType: TextPointer.GetNextContextPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetNextContextPosition(LogicalDirection)
- uid: System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetNextInsertionPosition(LogicalDirection)
  nameWithType: TextPointer.GetNextInsertionPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetNextInsertionPosition(LogicalDirection)
- uid: System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetOffsetToPosition(TextPointer)
  nameWithType: TextPointer.GetOffsetToPosition(TextPointer)
  fullName: System.Windows.Documents.TextPointer.GetOffsetToPosition(TextPointer)
- uid: System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPointerContext(LogicalDirection)
  nameWithType: TextPointer.GetPointerContext(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetPointerContext(LogicalDirection)
- uid: System.Windows.Documents.TextPointerContext
  parent: System.Windows.Documents
  isExternal: false
  name: TextPointerContext
  nameWithType: TextPointerContext
  fullName: System.Windows.Documents.TextPointerContext
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPositionAtOffset(Int32)
  nameWithType: TextPointer.GetPositionAtOffset(Int32)
  fullName: System.Windows.Documents.TextPointer.GetPositionAtOffset(Int32)
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPositionAtOffset(Int32,LogicalDirection)
  nameWithType: TextPointer.GetPositionAtOffset(Int32,LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetPositionAtOffset(Int32,LogicalDirection)
- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextInRun(LogicalDirection)
  nameWithType: TextPointer.GetTextInRun(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetTextInRun(LogicalDirection)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  nameWithType: TextPointer.GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  fullName: System.Windows.Documents.TextPointer.GetTextInRun(LogicalDirection,Char[],Int32,Int32)
- uid: System.Char[]
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char[]
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: Char[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextRunLength(LogicalDirection)
  nameWithType: TextPointer.GetTextRunLength(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetTextRunLength(LogicalDirection)
- uid: System.Windows.Documents.TextPointer.HasValidLayout
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: HasValidLayout
  nameWithType: TextPointer.HasValidLayout
  fullName: System.Windows.Documents.TextPointer.HasValidLayout
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Documents.TextPointer.InsertLineBreak
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertLineBreak()
  nameWithType: TextPointer.InsertLineBreak()
  fullName: System.Windows.Documents.TextPointer.InsertLineBreak()
- uid: System.Windows.Documents.TextPointer.InsertParagraphBreak
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertParagraphBreak()
  nameWithType: TextPointer.InsertParagraphBreak()
  fullName: System.Windows.Documents.TextPointer.InsertParagraphBreak()
- uid: System.Windows.Documents.TextPointer.InsertTextInRun(System.String)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertTextInRun(String)
  nameWithType: TextPointer.InsertTextInRun(String)
  fullName: System.Windows.Documents.TextPointer.InsertTextInRun(String)
- uid: System.Windows.Documents.TextPointer.IsAtInsertionPosition
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsAtInsertionPosition
  nameWithType: TextPointer.IsAtInsertionPosition
  fullName: System.Windows.Documents.TextPointer.IsAtInsertionPosition
- uid: System.Windows.Documents.TextPointer.IsAtLineStartPosition
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsAtLineStartPosition
  nameWithType: TextPointer.IsAtLineStartPosition
  fullName: System.Windows.Documents.TextPointer.IsAtLineStartPosition
- uid: System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsInSameDocument(TextPointer)
  nameWithType: TextPointer.IsInSameDocument(TextPointer)
  fullName: System.Windows.Documents.TextPointer.IsInSameDocument(TextPointer)
- uid: System.Windows.Documents.TextPointer.LogicalDirection
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: LogicalDirection
  nameWithType: TextPointer.LogicalDirection
  fullName: System.Windows.Documents.TextPointer.LogicalDirection
- uid: System.Windows.Documents.TextPointer.Paragraph
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: Paragraph
  nameWithType: TextPointer.Paragraph
  fullName: System.Windows.Documents.TextPointer.Paragraph
- uid: System.Windows.Documents.Paragraph
  parent: System.Windows.Documents
  isExternal: false
  name: Paragraph
  nameWithType: Paragraph
  fullName: System.Windows.Documents.Paragraph
- uid: System.Windows.Documents.TextPointer.Parent
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: Parent
  nameWithType: TextPointer.Parent
  fullName: System.Windows.Documents.TextPointer.Parent
- uid: System.Windows.Documents.TextPointer.ToString
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: ToString()
  nameWithType: TextPointer.ToString()
  fullName: System.Windows.Documents.TextPointer.ToString()
- uid: System.Windows.Documents.TextPointer.CompareTo*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: CompareTo
  nameWithType: TextPointer.CompareTo
- uid: System.Windows.Documents.TextPointer.DeleteTextInRun*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DeleteTextInRun
  nameWithType: TextPointer.DeleteTextInRun
- uid: System.Windows.Documents.TextPointer.DocumentEnd*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DocumentEnd
  nameWithType: TextPointer.DocumentEnd
- uid: System.Windows.Documents.TextPointer.DocumentStart*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DocumentStart
  nameWithType: TextPointer.DocumentStart
- uid: System.Windows.Documents.TextPointer.GetAdjacentElement*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetAdjacentElement
  nameWithType: TextPointer.GetAdjacentElement
- uid: System.Windows.Documents.TextPointer.GetCharacterRect*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetCharacterRect
  nameWithType: TextPointer.GetCharacterRect
- uid: System.Windows.Documents.TextPointer.GetInsertionPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetInsertionPosition
  nameWithType: TextPointer.GetInsertionPosition
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetLineStartPosition
  nameWithType: TextPointer.GetLineStartPosition
- uid: System.Windows.Documents.TextPointer.GetNextContextPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetNextContextPosition
  nameWithType: TextPointer.GetNextContextPosition
- uid: System.Windows.Documents.TextPointer.GetNextInsertionPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetNextInsertionPosition
  nameWithType: TextPointer.GetNextInsertionPosition
- uid: System.Windows.Documents.TextPointer.GetOffsetToPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetOffsetToPosition
  nameWithType: TextPointer.GetOffsetToPosition
- uid: System.Windows.Documents.TextPointer.GetPointerContext*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPointerContext
  nameWithType: TextPointer.GetPointerContext
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPositionAtOffset
  nameWithType: TextPointer.GetPositionAtOffset
- uid: System.Windows.Documents.TextPointer.GetTextInRun*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextInRun
  nameWithType: TextPointer.GetTextInRun
- uid: System.Windows.Documents.TextPointer.GetTextRunLength*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextRunLength
  nameWithType: TextPointer.GetTextRunLength
- uid: System.Windows.Documents.TextPointer.HasValidLayout*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: HasValidLayout
  nameWithType: TextPointer.HasValidLayout
- uid: System.Windows.Documents.TextPointer.InsertLineBreak*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertLineBreak
  nameWithType: TextPointer.InsertLineBreak
- uid: System.Windows.Documents.TextPointer.InsertParagraphBreak*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertParagraphBreak
  nameWithType: TextPointer.InsertParagraphBreak
- uid: System.Windows.Documents.TextPointer.InsertTextInRun*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertTextInRun
  nameWithType: TextPointer.InsertTextInRun
- uid: System.Windows.Documents.TextPointer.IsAtInsertionPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsAtInsertionPosition
  nameWithType: TextPointer.IsAtInsertionPosition
- uid: System.Windows.Documents.TextPointer.IsAtLineStartPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsAtLineStartPosition
  nameWithType: TextPointer.IsAtLineStartPosition
- uid: System.Windows.Documents.TextPointer.IsInSameDocument*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsInSameDocument
  nameWithType: TextPointer.IsInSameDocument
- uid: System.Windows.Documents.TextPointer.LogicalDirection*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: LogicalDirection
  nameWithType: TextPointer.LogicalDirection
- uid: System.Windows.Documents.TextPointer.Paragraph*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: Paragraph
  nameWithType: TextPointer.Paragraph
- uid: System.Windows.Documents.TextPointer.Parent*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: Parent
  nameWithType: TextPointer.Parent
- uid: System.Windows.Documents.TextPointer.ToString*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: ToString
  nameWithType: TextPointer.ToString
