### YamlMime:ManagedReference
items:
- uid: System.Data.DataRowCollection
  id: DataRowCollection
  children:
  - System.Data.DataRowCollection.Add(System.Data.DataRow)
  - System.Data.DataRowCollection.Add(System.Object[])
  - System.Data.DataRowCollection.Clear
  - System.Data.DataRowCollection.Contains(System.Object)
  - System.Data.DataRowCollection.Contains(System.Object[])
  - System.Data.DataRowCollection.CopyTo(System.Array,System.Int32)
  - System.Data.DataRowCollection.CopyTo(System.Data.DataRow[],System.Int32)
  - System.Data.DataRowCollection.Count
  - System.Data.DataRowCollection.Find(System.Object)
  - System.Data.DataRowCollection.Find(System.Object[])
  - System.Data.DataRowCollection.GetEnumerator
  - System.Data.DataRowCollection.IndexOf(System.Data.DataRow)
  - System.Data.DataRowCollection.InsertAt(System.Data.DataRow,System.Int32)
  - System.Data.DataRowCollection.Item(System.Int32)
  - System.Data.DataRowCollection.Remove(System.Data.DataRow)
  - System.Data.DataRowCollection.RemoveAt(System.Int32)
  langs:
  - csharp
  name: DataRowCollection
  nameWithType: DataRowCollection
  fullName: System.Data.DataRowCollection
  type: Class
  summary: "Reprezentuje kolekcję wierszy dla <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "Kolekcji DataRowCollection jest głównym <xref:System.Data.DataTable>.</xref:System.Data.DataTable> Podczas <xref:System.Data.DataColumnCollection>definiuje schemat tabeli kolekcji DataRowCollection zawiera aktualne dane dla tabeli, gdzie każdy <xref:System.Data.DataRow>w kolekcji DataRowCollection reprezentuje pojedynczy wiersz.</xref:System.Data.DataRow> </xref:System.Data.DataColumnCollection>       Możesz wywołać <xref:System.Data.DataRowCollection.Add%2A>i <xref:System.Data.DataRowCollection.Remove%2A>metody Wstawianie i usuwanie <xref:System.Data.DataRow>obiektów z kolekcji DataRowCollection.</xref:System.Data.DataRow> </xref:System.Data.DataRowCollection.Remove%2A> </xref:System.Data.DataRowCollection.Add%2A> Możesz także wywołać <xref:System.Data.DataRowCollection.Find%2A>metodę wyszukiwania <xref:System.Data.DataRow>obiektów zawierających określonej wartości kolumn klucza podstawowego i <xref:System.Data.DataRowCollection.Contains%2A>metody do wyszukiwania danych znakowych dla pojedynczego słów ani fraz.</xref:System.Data.DataRowCollection.Contains%2A> </xref:System.Data.DataRow> </xref:System.Data.DataRowCollection.Find%2A>       Dla innych operacji, takich jak sortowanie lub filtrowanie kolekcji DataRowCollection należy użyć metody w kolekcji DataRowCollection skojarzone <xref:System.Data.DataTable>.</xref:System.Data.DataTable>"
  example:
  - "The first example in this section prints the value of column 1 for every row in a DataRowCollection. The second example adds a new row created by using the <xref:System.Data.DataTable.NewRow%2A> method to the DataRowCollection.  \n  \n [!code-cs[Classic WebData DataRowCollection Example#1](~/add/codesnippet/csharp/t-system.data.datarowcol_1.cs)]\n [!code-vb[Classic WebData DataRowCollection Example#1](~/add/codesnippet/visualbasic/t-system.data.datarowcol_1.vb)]"
  syntax:
    content: 'public sealed class DataRowCollection : System.Data.InternalDataCollectionBase'
  inheritance:
  - System.Object
  - System.Data.InternalDataCollectionBase
  implements: []
  inheritedMembers:
  - System.Data.InternalDataCollectionBase.IsReadOnly
  - System.Data.InternalDataCollectionBase.IsSynchronized
  - System.Data.InternalDataCollectionBase.List
  - System.Data.InternalDataCollectionBase.SyncRoot
  platform:
  - net462
- uid: System.Data.DataRowCollection.Add(System.Data.DataRow)
  id: Add(System.Data.DataRow)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Add(DataRow)
  nameWithType: DataRowCollection.Add(DataRow)
  fullName: System.Data.DataRowCollection.Add(DataRow)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Dodaje określony <xref href=&quot;System.Data.DataRow&quot;> </xref> do <xref href=&quot;System.Data.DataRowCollection&quot;> </xref> obiektu."
  remarks: "Aby utworzyć nowy <xref:System.Data.DataRow>należy użyć <xref:System.Data.DataTable.NewRow%2A>metody <xref:System.Data.DataTable>klasy.</xref:System.Data.DataTable> </xref:System.Data.DataTable.NewRow%2A> </xref:System.Data.DataRow> Jeśli używasz <xref:System.Data.DataTable.NewRow%2A>metody, nowy <xref:System.Data.DataRow>obiekt jest zwracany za pomocą schematu nadrzędnej <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataRow> </xref:System.Data.DataTable.NewRow%2A> Po utworzeniu <xref:System.Data.DataRow>obiektów i ustaw wartości dla każdego z jego kolumn, użyj metody Add można dodać obiektu do kolekcji.</xref:System.Data.DataRow>       Generuje wyjątek, jeśli użytkownik generuje wyjątek <xref:System.Data.DataTable.RowChanging>zdarzeń.</xref:System.Data.DataTable.RowChanging> Jeśli wystąpi wyjątek, wiersz nie został dodany do tabeli."
  example:
  - "The following example uses the Add method to add a new <xref:System.Data.DataRow> to a <xref:System.Data.DataRowCollection> object.  \n  \n [!code-cs[Classic WebData DataRowCollection.Add Example#1](~/add/codesnippet/csharp/m-system.data.datarowcol_2_1.cs)]\n [!code-vb[Classic WebData DataRowCollection.Add Example#1](~/add/codesnippet/visualbasic/m-system.data.datarowcol_2_1.vb)]"
  syntax:
    content: public void Add (System.Data.DataRow row);
    parameters:
    - id: row
      type: System.Data.DataRow
      description: "The <xref href=&quot;System.Data.DataRow&quot;></xref> to add."
  overload: System.Data.DataRowCollection.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Wiersz ma wartość null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Wiersz należy do innej tabeli lub należy już do tej tabeli."
  - type: System.Data.ConstraintException
    commentId: T:System.Data.ConstraintException
    description: "Dodanie unieważnia ograniczenia."
  - type: System.Data.NoNullAllowedException
    commentId: T:System.Data.NoNullAllowedException
    description: "Dodanie próbuje umieścić wartość null w <xref href=&quot;System.Data.DataColumn&quot;> </xref> gdzie <xref:System.Data.DataColumn.AllowDBNull*>ma wartość false.</xref:System.Data.DataColumn.AllowDBNull*>"
  platform:
  - net462
- uid: System.Data.DataRowCollection.Add(System.Object[])
  id: Add(System.Object[])
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Add(Object[])
  nameWithType: DataRowCollection.Add(Object[])
  fullName: System.Data.DataRowCollection.Add(Object[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Tworzy wiersza przy użyciu określonych wartości i dodaje go do <xref href=&quot;System.Data.DataRowCollection&quot;> </xref>."
  remarks: "Jeśli <xref:System.Data.DataColumn>obiekt ma jego <xref:System.Data.DataColumn.AutoIncrement%2A>ma wartość True, null powinny zostać przekazane do pobrana wartość domyślna dla tej kolumny.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn>       Wyjątki może również wystąpić, jeśli Generowanie Wystąpił wyjątek podczas albo <xref:System.Data.DataTable.ColumnChanging>lub <xref:System.Data.DataTable.RowChanging>zdarzeń.</xref:System.Data.DataTable.RowChanging> </xref:System.Data.DataTable.ColumnChanging> Jeśli wystąpi wyjątek, wiersz nie został dodany do tabeli."
  example:
  - "The following example uses the <xref:System.Data.DataRowCollection.Add%2A> method to create and add a new <xref:System.Data.DataRow> object to a <xref:System.Data.DataRowCollection>.  \n  \n [!code-cs[Classic WebData DataRowCollection.Add1 Example#1](~/add/codesnippet/csharp/m-system.data.datarowcol_5_1.cs)]\n [!code-vb[Classic WebData DataRowCollection.Add1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datarowcol_5_1.vb)]"
  syntax:
    content: public System.Data.DataRow Add (object[] values);
    parameters:
    - id: values
      type: System.Object[]
      description: "Tablica wartości, które są używane do tworzenia nowego wiersza."
    return:
      type: System.Data.DataRow
      description: "Brak."
  overload: System.Data.DataRowCollection.Add*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Tablica jest większa niż liczba kolumn w tabeli."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Wartość jest niezgodny z typem odpowiedniej kolumny."
  - type: System.Data.ConstraintException
    commentId: T:System.Data.ConstraintException
    description: "Dodawanie wiersza unieważnia ograniczenia."
  - type: System.Data.NoNullAllowedException
    commentId: T:System.Data.NoNullAllowedException
    description: "W trakcie umieścić wartość null w kolumnie gdzie <xref:System.Data.DataColumn.AllowDBNull*>ma wartość false.</xref:System.Data.DataColumn.AllowDBNull*>"
  platform:
  - net462
- uid: System.Data.DataRowCollection.Clear
  id: Clear
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Clear()
  nameWithType: DataRowCollection.Clear()
  fullName: System.Data.DataRowCollection.Clear()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Czyści kolekcję wszystkich wierszy."
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Data.DataRowCollection.Clear*
  exceptions:
  - type: System.Data.InvalidConstraintException
    commentId: T:System.Data.InvalidConstraintException
    description: "A <xref href=&quot;System.Data.ForeignKeyConstraint&quot;> </xref> są wymuszane na <xref href=&quot;System.Data.DataRowCollection&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataRowCollection.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: DataRowCollection.Contains(Object)
  fullName: System.Data.DataRowCollection.Contains(Object)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera wartość wskazującą, czy wszystkie wiersze w kolekcji klucz podstawowy zawiera określoną wartość."
  remarks: "Przy użyciu metody zawiera <xref:System.Data.DataTable>obiektu, do którego <xref:System.Data.DataRowCollection>obiekt należy do musi mieć co najmniej jedną kolumnę wyznaczony jako kolumna klucza podstawowego.</xref:System.Data.DataRowCollection> </xref:System.Data.DataTable> Zobacz <xref:System.Data.DataTable.PrimaryKey%2A>Właściwości, aby uzyskać więcej informacji o sposobie tworzenia kolumna klucza podstawowego.</xref:System.Data.DataTable.PrimaryKey%2A>       Zaraz po ustaleniu, że wiersz zawiera określoną wartość, można użyć <xref:System.Data.DataRowCollection.Find%2A>metodę, aby zwrócić konkretnym <xref:System.Data.DataRow>obiektu, który ma wartość.</xref:System.Data.DataRow> </xref:System.Data.DataRowCollection.Find%2A>"
  example:
  - "The following Visual Basic example uses the Contains method to determine whether a <xref:System.Data.DataRowCollection> object contains a specific value.  \n  \n [!code-vb[Classic WebData DataRowCollection.Contains Example#1](~/add/codesnippet/visualbasic/m-system.data.datarowcol_7_1.vb)]"
  syntax:
    content: public bool Contains (object key);
    parameters:
    - id: key
      type: System.Object
      description: "Wartość klucza podstawowego do testowania."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli kolekcja zawiera <xref href=&quot;System.Data.DataRow&quot;> </xref> z określonej wartości klucza podstawowego; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataRowCollection.Contains*
  exceptions:
  - type: System.Data.MissingPrimaryKeyException
    commentId: T:System.Data.MissingPrimaryKeyException
    description: "Tabela nie ma klucza podstawowego."
  platform:
  - net462
- uid: System.Data.DataRowCollection.Contains(System.Object[])
  id: Contains(System.Object[])
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Contains(Object[])
  nameWithType: DataRowCollection.Contains(Object[])
  fullName: System.Data.DataRowCollection.Contains(Object[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera wartość wskazującą, czy kolumny klucza podstawowego każdego wiersza w kolekcji zawierają wartości określone w tablicy object."
  remarks: "Do używania <xref:System.Data.DataRowCollection.Contains%2A>metody z tablicy wartości, <xref:System.Data.DataTable>obiektu, do którego <xref:System.Data.DataRowCollection>należy obiekt musi mieć tablica kolumn wyznaczony jako klucze podstawowe.</xref:System.Data.DataRowCollection> </xref:System.Data.DataTable> </xref:System.Data.DataRowCollection.Contains%2A> Zobacz <xref:System.Data.DataTable.PrimaryKey%2A>Właściwości, aby uzyskać więcej informacji o sposobie tworzenia tablicy kolumn klucza podstawowego.</xref:System.Data.DataTable.PrimaryKey%2A> Liczba elementów tablicy musi odpowiadać liczba kolumn klucza podstawowego w <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Zaraz po ustaleniu, że wiersz zawiera określoną wartość, użyj <xref:System.Data.DataRowCollection.Find%2A>metodę, aby zwrócić konkretnym <xref:System.Data.DataRow>obiektu, który ma wartość.</xref:System.Data.DataRow> </xref:System.Data.DataRowCollection.Find%2A>"
  example:
  - "The following Visual Basic example uses the <xref:System.Data.DataRowCollection.Contains%2A> method to find a particular row in a <xref:System.Data.DataRowCollection> object. The example creates an array of values, one element for each primary key in the table, and then passes the array to the method to return a `true` or `false`.  \n  \n [!code-vb[Classic WebData DataRowCollection.Contains1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datarowcol_4_1.vb)]"
  syntax:
    content: public bool Contains (object[] keys);
    parameters:
    - id: keys
      type: System.Object[]
      description: "Tablica wartości kluczy podstawowych do testowania."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli <xref href=&quot;System.Data.DataRowCollection&quot;> </xref> zawiera <xref href=&quot;System.Data.DataRow&quot;> </xref> z określonymi wartościami klucza; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataRowCollection.Contains*
  exceptions:
  - type: System.Data.MissingPrimaryKeyException
    commentId: T:System.Data.MissingPrimaryKeyException
    description: "Tabela nie ma klucza podstawowego."
  platform:
  - net462
- uid: System.Data.DataRowCollection.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: DataRowCollection.CopyTo(Array,Int32)
  fullName: System.Data.DataRowCollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Kopiuje wszystkie <xref href=&quot;System.Data.DataRow&quot;> </xref> obiektów z kolekcji do danej tablicy, zaczynając od danego przeznaczenia indeksu tablicy."
  syntax:
    content: public override void CopyTo (Array ar, int index);
    parameters:
    - id: ar
      type: System.Array
      description: "Jednowymiarowa tablica, która jest miejscem docelowym elementów kopiowanych z <xref uid=&quot;langword_csharp_DataRowCollection&quot; name=&quot;DataRowCollection&quot; href=&quot;&quot;> </xref>. Tablica musi mieć indeksowania liczony od zera."
    - id: index
      type: System.Int32
      description: "Rozpoczyna się od zera indeks w tablicy, od których kopiowanie."
  overload: System.Data.DataRowCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRowCollection.CopyTo(System.Data.DataRow[],System.Int32)
  id: CopyTo(System.Data.DataRow[],System.Int32)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: CopyTo(DataRow[],Int32)
  nameWithType: DataRowCollection.CopyTo(DataRow[],Int32)
  fullName: System.Data.DataRowCollection.CopyTo(DataRow[],Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Kopiuje wszystkie <xref href=&quot;System.Data.DataRow&quot;> </xref> obiektów z kolekcji do danej tablicy, zaczynając od danego przeznaczenia indeksu tablicy."
  syntax:
    content: public void CopyTo (System.Data.DataRow[] array, int index);
    parameters:
    - id: array
      type: System.Data.DataRow[]
      description: "Jednowymiarowa tablica, która jest miejscem docelowym elementów kopiowanych z <xref uid=&quot;langword_csharp_DataRowCollection&quot; name=&quot;DataRowCollection&quot; href=&quot;&quot;> </xref>. Tablica musi mieć indeksowania liczony od zera."
    - id: index
      type: System.Int32
      description: "Rozpoczyna się od zera indeks w tablicy, od których kopiowanie."
  overload: System.Data.DataRowCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRowCollection.Count
  id: Count
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Count
  nameWithType: DataRowCollection.Count
  fullName: System.Data.DataRowCollection.Count
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera całkowitą liczbę <xref href=&quot;System.Data.DataRow&quot;> </xref> obiektów w tej kolekcji."
  syntax:
    content: public override int Count { get; }
    return:
      type: System.Int32
      description: "Całkowita liczba <xref href=&quot;System.Data.DataRow&quot;> </xref> obiektów w tej kolekcji."
  overload: System.Data.DataRowCollection.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRowCollection.Find(System.Object)
  id: Find(System.Object)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Find(Object)
  nameWithType: DataRowCollection.Find(Object)
  fullName: System.Data.DataRowCollection.Find(Object)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera wiersza określony przez wartość klucza podstawowego."
  remarks: "Do używania `Find` metody <xref:System.Data.DataTable>obiektu, do którego <xref:System.Data.DataRowCollection>należy obiekt musi mieć co najmniej jedną kolumnę wyznaczony jako kolumna klucza podstawowego.</xref:System.Data.DataRowCollection> </xref:System.Data.DataTable> Zobacz <xref:System.Data.DataTable.PrimaryKey%2A>Właściwości, aby uzyskać więcej informacji o sposobie tworzenia kolumna klucza podstawowego.</xref:System.Data.DataTable.PrimaryKey%2A>"
  example:
  - "The following example uses the Find method to find the primary key value \"2\" in a collection of <xref:System.Data.DataRow> objects. The method returns the specific <xref:System.Data.DataRow> object letting you change its values, as needed.  \n  \n [!code-vb[Classic WebData DataRowCollection.Find Example#1](~/add/codesnippet/visualbasic/m-system.data.datarowcol_0_1.vb)]\n [!code-cs[Classic WebData DataRowCollection.Find Example#1](~/add/codesnippet/csharp/m-system.data.datarowcol_0_1.cs)]"
  syntax:
    content: public System.Data.DataRow Find (object key);
    parameters:
    - id: key
      type: System.Object
      description: "Wartość klucza podstawowego <xref href=&quot;System.Data.DataRow&quot;> </xref> można znaleźć."
    return:
      type: System.Data.DataRow
      description: "A <xref href=&quot;System.Data.DataRow&quot;> </xref> zawierający określone wartości klucza podstawowego; w przeciwnym razie wartość null wartość, gdy wartość klucza podstawowego nie istnieje w <xref href=&quot;System.Data.DataRowCollection&quot;> </xref>."
  overload: System.Data.DataRowCollection.Find*
  exceptions:
  - type: System.Data.MissingPrimaryKeyException
    commentId: T:System.Data.MissingPrimaryKeyException
    description: "Tabela nie ma klucza podstawowego."
  platform:
  - net462
- uid: System.Data.DataRowCollection.Find(System.Object[])
  id: Find(System.Object[])
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Find(Object[])
  nameWithType: DataRowCollection.Find(Object[])
  fullName: System.Data.DataRowCollection.Find(Object[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera wiersza, który zawiera określonej wartości klucza podstawowego."
  remarks: "Do używania <xref:System.Data.DataRowCollection.Find%2A>metody <xref:System.Data.DataTable>obiektu, do którego <xref:System.Data.DataRowCollection>należy obiekt musi mieć co najmniej jedną kolumnę wyznaczony jako kolumna klucza podstawowego.</xref:System.Data.DataRowCollection> </xref:System.Data.DataTable> </xref:System.Data.DataRowCollection.Find%2A> Gdy dwa lub więcej wierszy mają taką samą wartość klucza podstawowego, jest zwracany pierwszy wiersz znaleziono. W takim przypadku <xref:System.Data.DataSet.EnforceConstraints%2A>ma wartość false.</xref:System.Data.DataSet.EnforceConstraints%2A> Zobacz <xref:System.Data.DataTable.PrimaryKey%2A>Właściwości, aby uzyskać więcej informacji o sposobie tworzenia <xref:System.Data.DataTable.PrimaryKey%2A>kolumny lub tablicę <xref:System.Data.DataColumn>obiektów, gdy tabela zawiera więcej niż jeden klucz podstawowy.</xref:System.Data.DataColumn> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.DataTable.PrimaryKey%2A>"
  example:
  - "The following example uses the values of an array to find a specific row in a collection of <xref:System.Data.DataRow> objects. The method assumes that a <xref:System.Data.DataTable> exists with three primary key columns. After creating an array of the values, the code uses the <xref:System.Data.DataRowCollection.Find%2A> method with the array to get the particular object that you want.  \n  \n [!code-cs[Classic WebData DataRowCollection.Find1 Example#1](~/add/codesnippet/csharp/m-system.data.datarowcol_6_1.cs)]\n [!code-vb[Classic WebData DataRowCollection.Find1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datarowcol_6_1.vb)]"
  syntax:
    content: public System.Data.DataRow Find (object[] keys);
    parameters:
    - id: keys
      type: System.Object[]
      description: "Tablica wartości klucza podstawowego można znaleźć. Typ tablicy jest <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Data.DataRow
      description: "A <xref href=&quot;System.Data.DataRow&quot;> </xref> określony obiekt, który zawiera wartości klucza podstawowego; w przeciwnym razie wartość null wartość, gdy wartość klucza podstawowego nie istnieje w <xref href=&quot;System.Data.DataRowCollection&quot;> </xref>."
  overload: System.Data.DataRowCollection.Find*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "Wiersz nie odpowiada tej wartości indeksu."
  - type: System.Data.MissingPrimaryKeyException
    commentId: T:System.Data.MissingPrimaryKeyException
    description: "Tabela nie ma klucza podstawowego."
  platform:
  - net462
- uid: System.Data.DataRowCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: DataRowCollection.GetEnumerator()
  fullName: System.Data.DataRowCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera <xref:System.Collections.IEnumerator>dla tej kolekcji.</xref:System.Collections.IEnumerator>"
  syntax:
    content: public override System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>Dla tej kolekcji.</xref:System.Collections.IEnumerator>"
  overload: System.Data.DataRowCollection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRowCollection.IndexOf(System.Data.DataRow)
  id: IndexOf(System.Data.DataRow)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: IndexOf(DataRow)
  nameWithType: DataRowCollection.IndexOf(DataRow)
  fullName: System.Data.DataRowCollection.IndexOf(DataRow)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera indeks określonego <xref href=&quot;System.Data.DataRow&quot;> </xref> obiektu."
  syntax:
    content: public int IndexOf (System.Data.DataRow row);
    parameters:
    - id: row
      type: System.Data.DataRow
      description: "<xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;> </xref> Do wyszukania."
    return:
      type: System.Int32
      description: "Liczony od zera indeks wiersza lub -1, jeśli wiersz nie zostanie znaleziony w kolekcji."
  overload: System.Data.DataRowCollection.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRowCollection.InsertAt(System.Data.DataRow,System.Int32)
  id: InsertAt(System.Data.DataRow,System.Int32)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: InsertAt(DataRow,Int32)
  nameWithType: DataRowCollection.InsertAt(DataRow,Int32)
  fullName: System.Data.DataRowCollection.InsertAt(DataRow,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Wstawia nowy wiersz do kolekcji w określonej lokalizacji."
  remarks: "Ta jest uwzględniana przez kolejność wierszy w lokalizacji określonej przez InsertAt <xref:System.Data.DataRowCollection>tylko.</xref:System.Data.DataRowCollection> Jeśli więcej niż jeden wiersz, jest zwracany w <xref:System.Data.DataRow>tablicy, wstawionego wiersza nie może być zwrócona w lokalizacji określonej przez InsertAt.</xref:System.Data.DataRow> Na przykład <xref:System.Data.DataTable.Rows%2A>właściwość zwraca wiersz na pozycji określonej insert.</xref:System.Data.DataTable.Rows%2A> <xref:System.Data.DataTable.Select%2A>i <xref:System.Data.DataRow.GetChildRows%2A>nie mogą.</xref:System.Data.DataRow.GetChildRows%2A></xref:System.Data.DataTable.Select%2A> Podczas zapisu zawartości w <xref:System.Data.DataRowCollection>formacie XML, na przykład, <xref:System.Data.DataSet.WriteXml%2A>że wiersze są zapisywane w kolejności określonej przez <xref:System.Data.DataRowCollection>.</xref:System.Data.DataRowCollection> </xref:System.Data.DataSet.WriteXml%2A> </xref:System.Data.DataRowCollection>       Jeśli wartość określona dla `pos` parametru jest większa niż liczba wierszy w kolekcji, nowy wiersz został dodany na końcu."
  syntax:
    content: public void InsertAt (System.Data.DataRow row, int pos);
    parameters:
    - id: row
      type: System.Data.DataRow
      description: "The <xref href=&quot;System.Data.DataRow&quot;></xref> to add."
    - id: pos
      type: System.Int32
      description: "Lokalizacji (liczony od zera) w kolekcji, której chcesz dodać <xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataRowCollection.InsertAt*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRowCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: DataRowCollection.Item(Int32)
  fullName: System.Data.DataRowCollection.Item(Int32)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera wiersz pod określonym indeksem."
  remarks: "Użyj <xref:System.Data.DataRowCollection.Contains%2A>metodę, aby określić, czy określona wartość istnieje w kolumnie klucza wiersza.</xref:System.Data.DataRowCollection.Contains%2A>"
  example:
  - "The following example prints the value of column 1 of each row in a <xref:System.Data.DataRowCollection>.  \n  \n [!code-vb[Classic WebData DataRowCollection.this Example#1](~/add/codesnippet/visualbasic/p-system.data.datarowcol_1.vb)]\n [!code-cs[Classic WebData DataRowCollection.this Example#1](~/add/codesnippet/csharp/p-system.data.datarowcol_1.cs)]"
  syntax:
    content: public System.Data.DataRow this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: "Liczony od zera indeks wiersza do zwrócenia."
    return:
      type: System.Data.DataRow
      description: "Określony <xref href=&quot;System.Data.DataRow&quot;> </xref>."
  overload: System.Data.DataRowCollection.Item*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "Wartość indeksu jest większa niż liczba elementów w kolekcji."
  platform:
  - net462
- uid: System.Data.DataRowCollection.Remove(System.Data.DataRow)
  id: Remove(System.Data.DataRow)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Remove(DataRow)
  nameWithType: DataRowCollection.Remove(DataRow)
  fullName: System.Data.DataRowCollection.Remove(DataRow)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Usuwa określoną <xref href=&quot;System.Data.DataRow&quot;> </xref> z kolekcji."
  remarks: "Po usunięciu wiersza, wszystkie dane w tym wierszu zostaną utracone. Możesz także wywołać <xref:System.Data.DataRow.Delete%2A>metody <xref:System.Data.DataRow>klasy nieco oznaczyć wierszy do usunięcia.</xref:System.Data.DataRow> </xref:System.Data.DataRow.Delete%2A> Wywoływanie `Remove` jest taka sama jak wywołującego <xref:System.Data.DataRow.Delete%2A>i wywoływać metodę <xref:System.Data.DataRow.AcceptChanges%2A>.</xref:System.Data.DataRow.AcceptChanges%2A> </xref:System.Data.DataRow.Delete%2A>       Usuń nie powinna być wywoływana w pętli foreach podczas iteracji <xref:System.Data.DataRowCollection>obiektu.</xref:System.Data.DataRowCollection> Usuń modyfikuje stan kolekcji.       Można również użyć <xref:System.Data.DataRowCollection.Clear%2A>metodę, aby usunąć wszystkich członków kolekcji, w tym samym czasie.</xref:System.Data.DataRowCollection.Clear%2A>"
  example:
  - "The following example uses the Remove method to delete a found row in a <xref:System.Data.DataRowCollection> object. The example first uses the <xref:System.Data.DataRowCollection.Contains%2A> method to determine whether the rows collection contains a row. If it does, the <xref:System.Data.DataRowCollection.Find%2A> method is used to find the specific row, and the Remove method is then used to remove the row.  \n  \n [!code-vb[Classic WebData DataRowCollection.Remove Example#1](~/add/codesnippet/visualbasic/m-system.data.datarowcol_1_1.vb)]"
  syntax:
    content: public void Remove (System.Data.DataRow row);
    parameters:
    - id: row
      type: System.Data.DataRow
      description: "<xref href=&quot;System.Data.DataRow&quot;> </xref> Do usunięcia."
  overload: System.Data.DataRowCollection.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRowCollection.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: DataRowCollection.RemoveAt(Int32)
  fullName: System.Data.DataRowCollection.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Usuwa wiersz pod określonym indeksem z kolekcji."
  remarks: "Po usunięciu wiersza, wszystkie dane w tym wierszu zostaną utracone. Możesz także wywołać <xref:System.Data.DataRow.Delete%2A>metody <xref:System.Data.DataRow>klasy nieco oznaczyć wierszy do usunięcia.</xref:System.Data.DataRow> </xref:System.Data.DataRow.Delete%2A> Wywoływanie `RemoveAt` jest taka sama jak wywołującego <xref:System.Data.DataRow.Delete%2A>i wywoływać metodę <xref:System.Data.DataRow.AcceptChanges%2A>.</xref:System.Data.DataRow.AcceptChanges%2A> </xref:System.Data.DataRow.Delete%2A>       Można użyć <xref:System.Data.DataRowCollection.Clear%2A>metodę, aby usunąć wszystkich członków kolekcji, w tym samym czasie.</xref:System.Data.DataRowCollection.Clear%2A>"
  example:
  - "The following example removes the last row in a <xref:System.Data.DataRowCollection> by calling the RemoveAt method.  \n  \n [!code-vb[Classic WebData DataRowCollection.RemoveAt Example#1](~/add/codesnippet/visualbasic/m-system.data.datarowcol_3_1.vb)]"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Indeks wiersza do usunięcia."
  overload: System.Data.DataRowCollection.RemoveAt*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.InternalDataCollectionBase
  isExternal: false
  name: System.Data.InternalDataCollectionBase
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.ConstraintException
  parent: System.Data
  isExternal: false
  name: ConstraintException
  nameWithType: ConstraintException
  fullName: System.Data.ConstraintException
- uid: System.Data.NoNullAllowedException
  parent: System.Data
  isExternal: false
  name: NoNullAllowedException
  nameWithType: NoNullAllowedException
  fullName: System.Data.NoNullAllowedException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Data.InvalidConstraintException
  parent: System.Data
  isExternal: false
  name: InvalidConstraintException
  nameWithType: InvalidConstraintException
  fullName: System.Data.InvalidConstraintException
- uid: System.Data.MissingPrimaryKeyException
  parent: System.Data
  isExternal: false
  name: MissingPrimaryKeyException
  nameWithType: MissingPrimaryKeyException
  fullName: System.Data.MissingPrimaryKeyException
- uid: System.IndexOutOfRangeException
  isExternal: true
  name: System.IndexOutOfRangeException
- uid: System.Data.DataRowCollection.Add(System.Data.DataRow)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Add(DataRow)
  nameWithType: DataRowCollection.Add(DataRow)
  fullName: System.Data.DataRowCollection.Add(DataRow)
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.DataRowCollection.Add(System.Object[])
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Add(Object[])
  nameWithType: DataRowCollection.Add(Object[])
  fullName: System.Data.DataRowCollection.Add(Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataRowCollection.Clear
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Clear()
  nameWithType: DataRowCollection.Clear()
  fullName: System.Data.DataRowCollection.Clear()
- uid: System.Data.DataRowCollection.Contains(System.Object)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Contains(Object)
  nameWithType: DataRowCollection.Contains(Object)
  fullName: System.Data.DataRowCollection.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.DataRowCollection.Contains(System.Object[])
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Contains(Object[])
  nameWithType: DataRowCollection.Contains(Object[])
  fullName: System.Data.DataRowCollection.Contains(Object[])
- uid: System.Data.DataRowCollection.CopyTo(System.Array,System.Int32)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: DataRowCollection.CopyTo(Array,Int32)
  fullName: System.Data.DataRowCollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataRowCollection.CopyTo(System.Data.DataRow[],System.Int32)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: CopyTo(DataRow[],Int32)
  nameWithType: DataRowCollection.CopyTo(DataRow[],Int32)
  fullName: System.Data.DataRowCollection.CopyTo(DataRow[],Int32)
- uid: System.Data.DataRow[]
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow[]
  spec.csharp:
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: DataRow[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataRowCollection.Count
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Count
  nameWithType: DataRowCollection.Count
  fullName: System.Data.DataRowCollection.Count
- uid: System.Data.DataRowCollection.Find(System.Object)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Find(Object)
  nameWithType: DataRowCollection.Find(Object)
  fullName: System.Data.DataRowCollection.Find(Object)
- uid: System.Data.DataRowCollection.Find(System.Object[])
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Find(Object[])
  nameWithType: DataRowCollection.Find(Object[])
  fullName: System.Data.DataRowCollection.Find(Object[])
- uid: System.Data.DataRowCollection.GetEnumerator
  parent: System.Data.DataRowCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: DataRowCollection.GetEnumerator()
  fullName: System.Data.DataRowCollection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Data.DataRowCollection.IndexOf(System.Data.DataRow)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: IndexOf(DataRow)
  nameWithType: DataRowCollection.IndexOf(DataRow)
  fullName: System.Data.DataRowCollection.IndexOf(DataRow)
- uid: System.Data.DataRowCollection.InsertAt(System.Data.DataRow,System.Int32)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: InsertAt(DataRow,Int32)
  nameWithType: DataRowCollection.InsertAt(DataRow,Int32)
  fullName: System.Data.DataRowCollection.InsertAt(DataRow,Int32)
- uid: System.Data.DataRowCollection.Item(System.Int32)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Item(Int32)
  nameWithType: DataRowCollection.Item(Int32)
  fullName: System.Data.DataRowCollection.Item(Int32)
- uid: System.Data.DataRowCollection.Remove(System.Data.DataRow)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Remove(DataRow)
  nameWithType: DataRowCollection.Remove(DataRow)
  fullName: System.Data.DataRowCollection.Remove(DataRow)
- uid: System.Data.DataRowCollection.RemoveAt(System.Int32)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: DataRowCollection.RemoveAt(Int32)
  fullName: System.Data.DataRowCollection.RemoveAt(Int32)
- uid: System.Data.DataRowCollection.Add*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Add
  nameWithType: DataRowCollection.Add
- uid: System.Data.DataRowCollection.Clear*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Clear
  nameWithType: DataRowCollection.Clear
- uid: System.Data.DataRowCollection.Contains*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Contains
  nameWithType: DataRowCollection.Contains
- uid: System.Data.DataRowCollection.CopyTo*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: CopyTo
  nameWithType: DataRowCollection.CopyTo
- uid: System.Data.DataRowCollection.Count*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Count
  nameWithType: DataRowCollection.Count
- uid: System.Data.DataRowCollection.Find*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Find
  nameWithType: DataRowCollection.Find
- uid: System.Data.DataRowCollection.GetEnumerator*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: DataRowCollection.GetEnumerator
- uid: System.Data.DataRowCollection.IndexOf*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: IndexOf
  nameWithType: DataRowCollection.IndexOf
- uid: System.Data.DataRowCollection.InsertAt*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: InsertAt
  nameWithType: DataRowCollection.InsertAt
- uid: System.Data.DataRowCollection.Item*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Item
  nameWithType: DataRowCollection.Item
- uid: System.Data.DataRowCollection.Remove*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Remove
  nameWithType: DataRowCollection.Remove
- uid: System.Data.DataRowCollection.RemoveAt*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: RemoveAt
  nameWithType: DataRowCollection.RemoveAt
