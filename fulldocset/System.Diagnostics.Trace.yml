### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.Trace
  id: Trace
  children:
  - System.Diagnostics.Trace.Assert(System.Boolean)
  - System.Diagnostics.Trace.Assert(System.Boolean,System.String)
  - System.Diagnostics.Trace.Assert(System.Boolean,System.String,System.String)
  - System.Diagnostics.Trace.AutoFlush
  - System.Diagnostics.Trace.Close
  - System.Diagnostics.Trace.CorrelationManager
  - System.Diagnostics.Trace.Fail(System.String)
  - System.Diagnostics.Trace.Fail(System.String,System.String)
  - System.Diagnostics.Trace.Flush
  - System.Diagnostics.Trace.Indent
  - System.Diagnostics.Trace.IndentLevel
  - System.Diagnostics.Trace.IndentSize
  - System.Diagnostics.Trace.Listeners
  - System.Diagnostics.Trace.Refresh
  - System.Diagnostics.Trace.TraceError(System.String)
  - System.Diagnostics.Trace.TraceError(System.String,System.Object[])
  - System.Diagnostics.Trace.TraceInformation(System.String)
  - System.Diagnostics.Trace.TraceInformation(System.String,System.Object[])
  - System.Diagnostics.Trace.TraceWarning(System.String)
  - System.Diagnostics.Trace.TraceWarning(System.String,System.Object[])
  - System.Diagnostics.Trace.Unindent
  - System.Diagnostics.Trace.UseGlobalLock
  - System.Diagnostics.Trace.Write(System.Object)
  - System.Diagnostics.Trace.Write(System.String)
  - System.Diagnostics.Trace.Write(System.Object,System.String)
  - System.Diagnostics.Trace.Write(System.String,System.String)
  - System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object)
  - System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)
  - System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object,System.String)
  - System.Diagnostics.Trace.WriteIf(System.Boolean,System.String,System.String)
  - System.Diagnostics.Trace.WriteLine(System.Object)
  - System.Diagnostics.Trace.WriteLine(System.String)
  - System.Diagnostics.Trace.WriteLine(System.Object,System.String)
  - System.Diagnostics.Trace.WriteLine(System.String,System.String)
  - System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object)
  - System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)
  - System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object,System.String)
  - System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String,System.String)
  langs:
  - csharp
  name: Trace
  nameWithType: Trace
  fullName: System.Diagnostics.Trace
  type: Class
  summary: "Udostępnia zestaw metod i właściwości, które ułatwiają śledzenia realizacji kodu. Ta klasa nie może być dziedziczona."
  remarks: "Można użyć właściwości i metod w klasie śledzenia instrumentem kompilacje wydania. Instrumentacja służy do monitorowania kondycji aplikacji uruchomionej w ustawieniach rzeczywistych. Śledzenie pomaga wyizolować problemy i popraw je bez zakłócania uruchomionym systemie.       Ta klasa dostarcza metody do wyświetlenia <xref:System.Diagnostics.Trace.Assert%2A>okno dialogowe i do wysyłania potwierdzenia, że zawsze <xref:System.Diagnostics.Trace.Fail%2A>.</xref:System.Diagnostics.Trace.Fail%2A> </xref:System.Diagnostics.Trace.Assert%2A> Ta klasa dostarcza metody zapisu w następujących zmian: <xref:System.Diagnostics.Trace.Write%2A>, <xref:System.Diagnostics.Trace.WriteLine%2A>, <xref:System.Diagnostics.Trace.WriteIf%2A>i <xref:System.Diagnostics.Trace.WriteLineIf%2A>.</xref:System.Diagnostics.Trace.WriteLineIf%2A> </xref:System.Diagnostics.Trace.WriteIf%2A> </xref:System.Diagnostics.Trace.WriteLine%2A> </xref:System.Diagnostics.Trace.Write%2A>       <xref:System.Diagnostics.BooleanSwitch>i <xref:System.Diagnostics.TraceSwitch>klasy zapewniają sposób dynamicznie kontroli danych wyjściowych śledzenia.</xref:System.Diagnostics.TraceSwitch> </xref:System.Diagnostics.BooleanSwitch> Można zmodyfikować wartości tych przełączników, bez konieczności ponownego kompilowania aplikacji. Uzyskać informacji dotyczących używania pliku konfiguracji do ustawiona przełącznik, zobacz <xref:System.Diagnostics.Switch>klasy i [porady: tworzenie, inicjowanie i konfigurowanie przełączników śledzenia](~/add/includes/ajax-current-ext-md.md) tematu.</xref:System.Diagnostics.Switch>       Dane wyjściowe śledzenia docelowych można dostosować, dodając <xref:System.Diagnostics.TraceListener>wystąpień do lub usuwanie wystąpienia z <xref:System.Diagnostics.Trace.Listeners%2A>kolekcji.</xref:System.Diagnostics.Trace.Listeners%2A> </xref:System.Diagnostics.TraceListener> <xref:System.Diagnostics.Trace.Listeners%2A>Kolekcji jest udostępniany przez oba <xref:System.Diagnostics.Debug>i klasy śledzenia; Dodawanie nasłuchującego śledzenia do każdej klasy dodaje odbiornika zarówno.</xref:System.Diagnostics.Debug> </xref:System.Diagnostics.Trace.Listeners%2A> Domyślnie dane wyjściowe śledzenia jest emitowany przy użyciu <xref:System.Diagnostics.DefaultTraceListener>klasy.</xref:System.Diagnostics.DefaultTraceListener>      > [!NOTE] > Dodawanie odbiornik śledzenia do <xref:System.Diagnostics.Trace.Listeners%2A>kolekcji może spowodować wyjątek zostanie wygenerowany podczas śledzenia, jeśli zasób stosowany przez odbiornik śledzenia nie jest dostępna.</xref:System.Diagnostics.Trace.Listeners%2A> Warunki i zgłoszono wyjątek zależą od obiektu nasłuchującego śledzenia i nie można wyliczyć w tym temacie. Może być przydatne do wywołania metody śledzenia w `try` / `catch` bloków do wykrywania i obsługi wyjątków z obiektów nasłuchujących śledzenia.      > [!NOTE] > Po dodaniu obiektów nasłuchujących śledzenia do częściowo zaufany kod otrzymasz <xref:System.Security.SecurityException>wyjątku, ponieważ dodanie obiekty nasłuchujące śledzenia wymaga <xref:System.Security.Permissions.SecurityPermissionFlag>uprawnień.</xref:System.Security.Permissions.SecurityPermissionFlag> </xref:System.Security.SecurityException> Aby śledzić częściowo zaufany kod, który jest uruchomiony w piaskownicy w programie Visual Studio, nie należy dodawać obiekty nasłuchujące śledzenia. Zamiast tego należy wyświetlić śledzenia i <xref:System.Diagnostics.Debug>w wiadomości **dane wyjściowe** okna.</xref:System.Diagnostics.Debug>       Klasa śledzenia udostępnia właściwości, aby pobrać lub ustawić poziom <xref:System.Diagnostics.Trace.Indent%2A>, <xref:System.Diagnostics.Trace.IndentSize%2A>oraz czy <xref:System.Diagnostics.Trace.AutoFlush%2A>po wykonaniu każdego zapisu.</xref:System.Diagnostics.Trace.AutoFlush%2A> </xref:System.Diagnostics.Trace.IndentSize%2A> </xref:System.Diagnostics.Trace.Indent%2A>       Aby ustawić <xref:System.Diagnostics.Trace.AutoFlush%2A>i <xref:System.Diagnostics.Trace.IndentSize%2A>śledzenia, można edytować plik konfiguracji, który odpowiada nazwie aplikacji.</xref:System.Diagnostics.Trace.IndentSize%2A> </xref:System.Diagnostics.Trace.AutoFlush%2A> Plik konfiguracji powinien być sformatowany jak w następującym przykładzie: ```   <configuration>     <system.diagnostics>       <trace autoflush=&quot;false&quot; indentsize=&quot;3&quot; />     </system.diagnostics>   </configuration>   ``` <xref:System.Diagnostics.ConditionalAttribute>atrybut jest stosowany do metod śledzenia.</xref:System.Diagnostics.ConditionalAttribute> Kompilatory, które obsługują <xref:System.Diagnostics.ConditionalAttribute>Ignoruj wywołania tych metod, chyba że &quot;TRACE&quot; jest zdefiniowany jako symbole kompilacji warunkowej.</xref:System.Diagnostics.ConditionalAttribute> Zapoznaj się z dokumentacją kompilatora, aby określić, czy <xref:System.Diagnostics.ConditionalAttribute>jest obsługiwana i składnia do definiowania symbol kompilacji warunkowej.</xref:System.Diagnostics.ConditionalAttribute>      > [!NOTE] > Projekty w programie Visual Studio, domyślnie symbol kompilacji warunkowej na &quot;Debugowanie&quot; jest zdefiniowany w przypadku kompilacji debugowania i symbol &quot;TRACE&quot; jest zdefiniowany zarówno debug i release kompiluje. Aby dowiedzieć się, jak wyłączyć to zachowanie, zobacz dokumentację programu Visual Studio.       Aby w języku C#, zdefiniuj symbol kompilacji warunkowej &quot;TRACE&quot;, Dodaj `/d:TRACE` opcje wiersza polecenia kompilatora podczas kompilowania kodu przy użyciu wiersza polecenia lub Dodaj `#define TRACE` na początku pliku. W języku Visual Basic, Dodaj `/d:TRACE=True` — opcja kompilatora w wierszu polecenia lub Dodaj `#Const TRACE=True` do pliku.       <xref:System.Diagnostics.ConditionalAttribute>nie jest obsługiwana przez kompilator języka C++.</xref:System.Diagnostics.ConditionalAttribute> Aby zapewnić podobne funkcje, należy ująć wywołaniami metod śledzenia w `#if defined(TRACE) ... #endif` zablokować, a także dodać `/DTRACE` — opcja kompilatora w wierszu polecenia lub Dodaj `#define TRACE` do pliku."
  example:
  - "The following example uses Trace to indicate the beginning and the end of a program's execution. The example also uses the <xref:System.Diagnostics.Trace.Indent%2A?displayProperty=fullName> and <xref:System.Diagnostics.Trace.Unindent%2A?displayProperty=fullName> methods to distinguish the tracing output. For a more complete example of the use of Trace, see [How to: Add Trace Statements to Application Code](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cpp[Classic Trace Example#1](~/add/codesnippet/cpp/t-system.diagnostics.trace_1.cpp)]\n [!code-cs[Classic Trace Example#1](~/add/codesnippet/csharp/t-system.diagnostics.trace_1.cs)]\n [!code-vb[Classic Trace Example#1](~/add/codesnippet/visualbasic/t-system.diagnostics.trace_1.vb)]"
  syntax:
    content: public sealed class Trace
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Assert(System.Boolean)
  id: Assert(System.Boolean)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Assert(Boolean)
  nameWithType: Trace.Assert(Boolean)
  fullName: System.Diagnostics.Trace.Assert(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Sprawdza, czy warunek; Jeśli warunek nie jest <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, wyświetla komunikat, który pokazuje stosu wywołań."
  remarks: "Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=fullName> method if you want to do assertions in release builds. The <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=fullName> method works only in debug builds. For more information, see [Assertions in Managed Code](~/add/includes/ajax-current-ext-md.md).  \n  \n Typically, the Assert method is used to identify logic errors during program development. Assert evaluates the condition. If the result is `false`, it sends a failure message to the <xref:System.Diagnostics.Trace.Listeners%2A> collection. You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Trace.Listeners%2A> collection.  \n  \n When the application runs in user-interface mode, it displays a message box that shows the call stack with file and line numbers. The message box contains three buttons: **Abort**, **Retry**, and **Ignore**. Clicking the **Abort** button terminates the application. Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not. Clicking **Ignore** continues with the next instruction in the code.  \n  \n> [!NOTE]\n>  The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>. If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [\\&lt;clear\\&gt;](../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), the [\\&lt;remove\\&gt;](../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \n  \n You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application. In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=fullName> property. The configuration file should be formatted as follows:  \n  \n```  \n<configuration>  \n  <system.diagnostics>  \n    <switches>  \n      <add name=\"mySwitch\" value=\"4\"/>  \n    </switches>  \n    <trace autoflush=\"false\" indentsize=\"4\"/>  \n    <assert assertuienabled=\"true\" logfilename=\".\\TraceLog.txt\"/>  \n  </system.diagnostics>  \n</configuration>  \n```"
  example:
  - "The following example creates an index for an array. Then some action is performed that sets the value of the index. Next the code calls Assert to verify the index value is valid. If it is not valid, the Assert outputs the call stack.  \n  \n [!code-cs[Classic Trace.Assert Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_23_1.cs)]\n [!code-cpp[Classic Trace.Assert Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_23_1.cpp)]\n [!code-vb[Classic Trace.Assert Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_23_1.vb)]"
  syntax:
    content: public static void Assert (bool condition);
    parameters:
    - id: condition
      type: System.Boolean
      description: "Wyrażenie warunkowe do oceny. Jeśli warunek nie jest <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, komunikat o błędzie nie są wysyłane i nie zostanie wyświetlone okno komunikatu."
  overload: System.Diagnostics.Trace.Assert*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Assert(System.Boolean,System.String)
  id: Assert(System.Boolean,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Assert(Boolean,String)
  nameWithType: Trace.Assert(Boolean,String)
  fullName: System.Diagnostics.Trace.Assert(Boolean,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Sprawdza, czy warunek; Jeśli warunek nie jest <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, generuje określony komunikat i wyświetla komunikat, który pokazuje stosu wywołań."
  remarks: "Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=fullName> method if you want to do assertions in release builds. The <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=fullName> method works only in debug builds. For more information, see [Assertions in Managed Code](~/add/includes/ajax-current-ext-md.md).  \n  \n Typically, the Assert method is used to identify logic errors during program development. Assert evaluates the condition. If the result is `false`, it sends the specified diagnostic message to the <xref:System.Diagnostics.Trace.Listeners%2A> collection. You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Trace.Listeners%2A> collection.  \n  \n When the application runs in user-interface mode, it displays a message box that shows the call stack with file and line numbers. The message box contains three buttons: **Abort**, **Retry**, and **Ignore**. Clicking the **Abort** button terminates the application. Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not. Clicking **Ignore** continues with the next instruction in the code.  \n  \n> [!NOTE]\n>  The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>. If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [\\&lt;clear\\&gt;](../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), the [\\&lt;remove\\&gt;](../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \n  \n You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application. In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=fullName> property. The configuration file should be formatted as follows:  \n  \n```  \n<configuration>  \n  <system.diagnostics>  \n    <switches>  \n      <add name=\"mySwitch\" value=\"4\"/>  \n    </switches>  \n    <trace autoflush=\"false\" indentsize=\"4\"/>  \n    <assert assertuienabled=\"true\" logfilename=\".\\TraceLog.txt\"/>  \n  </system.diagnostics>  \n</configuration>  \n```"
  example:
  - "The following example checks to see that the `type` parameter is valid. If the `type` passed in is `null`, the <xref:System.Diagnostics.Trace.Assert%2A> outputs a message.  \n  \n [!code-cs[Classic Trace.Assert1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_20_1.cs)]\n [!code-cpp[Classic Trace.Assert1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_20_1.cpp)]\n [!code-vb[Classic Trace.Assert1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_20_1.vb)]"
  syntax:
    content: public static void Assert (bool condition, string message);
    parameters:
    - id: condition
      type: System.Boolean
      description: "Wyrażenie warunkowe do oceny. Jeśli warunek nie jest <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, określony komunikat nie są wysyłane i nie zostanie wyświetlone okno komunikatu."
    - id: message
      type: System.String
      description: "Komunikat do wysłania do <xref:System.Diagnostics.Trace.Listeners*>kolekcji.</xref:System.Diagnostics.Trace.Listeners*>"
  overload: System.Diagnostics.Trace.Assert*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Assert(System.Boolean,System.String,System.String)
  id: Assert(System.Boolean,System.String,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Assert(Boolean,String,String)
  nameWithType: Trace.Assert(Boolean,String,String)
  fullName: System.Diagnostics.Trace.Assert(Boolean,String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Sprawdza, czy warunek; Jeśli warunek nie jest <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, generuje dwa komunikaty określonego i wyświetla komunikat, który pokazuje stosu wywołań."
  remarks: "Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=fullName> method if you want to do assertions in release builds. The <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=fullName> method works only in debug builds. For more information, see [Assertions in Managed Code](~/add/includes/ajax-current-ext-md.md).  \n  \n Typically, the Assert method is used to identify logic errors during program development. Assert evaluates the condition. If the result is `false`, it sends the specified diagnostic message and detailed message to the <xref:System.Diagnostics.Trace.Listeners%2A> collection. You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Trace.Listeners%2A> collection.  \n  \n When the application runs in user-interface mode, it displays a message box that shows the call stack with file and line numbers. The message box contains three buttons: **Abort**, **Retry**, and **Ignore**. Clicking the **Abort** button terminates the application. Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not. Clicking **Ignore** continues with the next instruction in the code.  \n  \n> [!NOTE]\n>  The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>. If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [\\&lt;clear\\&gt;](../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), the [\\&lt;remove\\&gt;](../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \n  \n You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application. In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=fullName> property. The configuration file should be formatted as follows:  \n  \n```  \n<configuration>  \n  <system.diagnostics>  \n    <switches>  \n      <add name=\"mySwitch\" value=\"4\"/>  \n    </switches>  \n    <trace autoflush=\"false\" indentsize=\"4\"/>  \n    <assert assertuienabled=\"true\" logfilename=\".\\TraceLog.txt\"/>  \n  </system.diagnostics>  \n</configuration>  \n```"
  example:
  - "The following example checks to see that the `type` parameter is valid. If the `type` passed in is `null`, the <xref:System.Diagnostics.Trace.Assert%2A> outputs a message.  \n  \n [!code-cs[Classic Trace.Assert2 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_24_1.cs)]\n [!code-vb[Classic Trace.Assert2 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_24_1.vb)]\n [!code-cpp[Classic Trace.Assert2 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_24_1.cpp)]"
  syntax:
    content: public static void Assert (bool condition, string message, string detailMessage);
    parameters:
    - id: condition
      type: System.Boolean
      description: "Wyrażenie warunkowe do oceny. Jeśli warunek nie jest <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, nie są wysyłane wiadomości określona i nie zostanie wyświetlone okno komunikatu."
    - id: message
      type: System.String
      description: "Komunikat do wysłania do <xref:System.Diagnostics.Trace.Listeners*>kolekcji.</xref:System.Diagnostics.Trace.Listeners*>"
    - id: detailMessage
      type: System.String
      description: "Szczegółowy komunikat do wysłania do <xref:System.Diagnostics.Trace.Listeners*>kolekcji.</xref:System.Diagnostics.Trace.Listeners*>"
  overload: System.Diagnostics.Trace.Assert*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.AutoFlush
  id: AutoFlush
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: AutoFlush
  nameWithType: Trace.AutoFlush
  fullName: System.Diagnostics.Trace.AutoFlush
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Pobiera lub ustawia czy <> </> *> powinna być wywoływana na <> </> *> po każdego zapisu."
  remarks: "Wartość domyślna to `false`.       Opróżnianie strumienia nie opróżnić jego podstawowym kodera, chyba że jawnie wywołać <xref:System.Diagnostics.Trace.Flush%2A>lub <xref:System.Diagnostics.Trace.Close%2A>.</xref:System.Diagnostics.Trace.Close%2A> </xref:System.Diagnostics.Trace.Flush%2A> Ustawienie AutoFlush `true` oznacza, że dane zostaną opróżnione z buforu w strumieniu, ale nie zostaną opróżnione kodera stanu. Dzięki temu koder ma zachowywać stan (częściowe znaki), aby ją poprawnie kodowania kolejny blok znaków. Ten scenariusz dotyczy UTF8 i UTF7, w której niektóre znaki mogą być kodowane tylko po otrzymaniu koder sąsiedniego znaku ani znaków.       Aby ustawić AutoFlush i <xref:System.Diagnostics.Trace.IndentSize%2A>dla <xref:System.Diagnostics.Trace>, można również edytować plik konfiguracji, który odpowiada nazwie aplikacji.</xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Trace.IndentSize%2A> Plik konfiguracji powinien być sformatowany jak w następującym przykładzie:```   <configuration>     <system.diagnostics>       <trace autoflush=&quot;false&quot; indentsize=&quot;3&quot; />     </system.diagnostics>   </configuration>   ```"
  syntax:
    content: public static bool AutoFlush { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli <> </> *> jest wywoływana na <> </> *> po każdym zapisu; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.Trace.AutoFlush*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Close
  id: Close
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Close()
  nameWithType: Trace.Close()
  fullName: System.Diagnostics.Trace.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Opróżnia bufor wyjściowy, a następnie zamyka <xref:System.Diagnostics.Trace.Listeners*>.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Użyj tej metody, gdy dane wyjściowe przechodzi do pliku, takich jak do <xref:System.Diagnostics.TextWriterTraceListener>.</xref:System.Diagnostics.TextWriterTraceListener>       Opróżnianie strumienia nie opróżnić jego podstawowym kodera, chyba że jawnie wywołać <xref:System.Diagnostics.Trace.Flush%2A>lub zamknąć.</xref:System.Diagnostics.Trace.Flush%2A> Ustawienie <xref:System.Diagnostics.Trace.AutoFlush%2A>do `true` oznacza, że dane zostaną opróżnione z buforu w strumieniu, ale nie zostaną opróżnione stanu kodera.</xref:System.Diagnostics.Trace.AutoFlush%2A> Dzięki temu koder ma zachowywać stan (częściowe znaki), aby ją poprawnie kodowania kolejny blok znaków. Ten scenariusz dotyczy UTF8 i UTF7, w której niektóre znaki mogą być kodowane tylko po otrzymaniu koder sąsiedniego znaku ani znaków."
  example:
  - "The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> named `myTextListener`. `myTextListener` uses a <xref:System.IO.StreamWriter> called `myOutputWriter` to write to a file named `TestFile.txt`. The example creates the file, stream and text writer, writes one line of text to the file, and then flushes and closes the output.  \n  \n [!code-cs[Classic Trace.Flush Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_9_1.cs)]\n [!code-cpp[Classic Trace.Flush Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_9_1.cpp)]\n [!code-vb[Classic Trace.Flush Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_9_1.vb)]"
  syntax:
    content: public static void Close ();
    parameters: []
  overload: System.Diagnostics.Trace.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.CorrelationManager
  id: CorrelationManager
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: CorrelationManager
  nameWithType: Trace.CorrelationManager
  fullName: System.Diagnostics.Trace.CorrelationManager
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Pobiera Menedżera korelacji dla wątku dla tego śledzenia."
  remarks: "> [!NOTE]> Jest zaawansowaną właściwość większość aplikacji nie ma okazji do użycia.       <xref:System.Diagnostics.CorrelationManager>Klasa udostępnia metody używane do przechowywania tożsamości operacji logicznej w kontekście wątku wiązaniem i automatycznie dodają tagi każdego zdarzenia śledzenia generowane przez wątek z tożsamością przechowywanych.</xref:System.Diagnostics.CorrelationManager>"
  syntax:
    content: public static System.Diagnostics.CorrelationManager CorrelationManager { get; }
    return:
      type: System.Diagnostics.CorrelationManager
      description: "<xref href=&quot;System.Diagnostics.CorrelationManager&quot;> </xref> Obiekt skojarzony z wątku dla tego śledzenia."
  overload: System.Diagnostics.Trace.CorrelationManager*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Fail(System.String)
  id: Fail(System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Fail(String)
  nameWithType: Trace.Fail(String)
  fullName: System.Diagnostics.Trace.Fail(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Emituje określony komunikat o błędzie."
  remarks: "The default behavior for the default trace listener is to output the `message` parameter to a message box when the application runs in user-interface mode, and to the <xref:System.Diagnostics.TraceListener> instances in the <xref:System.Diagnostics.Trace.Listeners%2A> collection.  \n  \n> [!NOTE]\n>  The display of the message box is dependent on the presence of the <xref:System.Diagnostics.DefaultTraceListener>. If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [\\&lt;clear\\&gt;](../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), the [\\&lt;remove\\&gt;](../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \n  \n You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or by removing one from, the <xref:System.Diagnostics.Trace.Listeners%2A> collection."
  example:
  - "The following example uses the Fail method to print a message during exception handling.  \n  \n [!code-cs[Classic Trace.Fail Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_1_1.cs)]\n [!code-cpp[Classic Trace.Fail Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_1_1.cpp)]\n [!code-vb[Classic Trace.Fail Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_1_1.vb)]  \n  \n You can also use the Fail method in a switch statement.  \n  \n [!code-cs[Classic Trace.Fail Example#2](~/add/codesnippet/csharp/m-system.diagnostics.tra_1_2.cs)]\n [!code-cpp[Classic Trace.Fail Example#2](~/add/codesnippet/cpp/m-system.diagnostics.tra_1_2.cpp)]\n [!code-vb[Classic Trace.Fail Example#2](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_1_2.vb)]"
  syntax:
    content: public static void Fail (string message);
    parameters:
    - id: message
      type: System.String
      description: "Komunikat emisji."
  overload: System.Diagnostics.Trace.Fail*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Fail(System.String,System.String)
  id: Fail(System.String,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Fail(String,String)
  nameWithType: Trace.Fail(String,String)
  fullName: System.Diagnostics.Trace.Fail(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Emituje komunikat o błędzie i szczegółowy komunikat o błędzie."
  remarks: "The default behavior is for the default trace listener to output the `message` parameter and the `detailedMessage` parameter to a message box when the application runs in user-interface mode, and to the <xref:System.Diagnostics.TraceListener> instances in the <xref:System.Diagnostics.Trace.Listeners%2A> collection.  \n  \n> [!NOTE]\n>  The display of the message box is dependent on the presence of the <xref:System.Diagnostics.DefaultTraceListener>. If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [\\&lt;clear\\&gt;](../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), the [\\&lt;remove\\&gt;](../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \n  \n You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or by removing one from, the <xref:System.Diagnostics.Trace.Listeners%2A> collection."
  example:
  - "The following example uses the <xref:System.Diagnostics.Trace.Fail%2A> method to print a message during exception handling.  \n  \n [!code-cs[Classic Trace.Fail1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_13_1.cs)]\n [!code-cpp[Classic Trace.Fail1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_13_1.cpp)]\n [!code-vb[Classic Trace.Fail1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_13_1.vb)]  \n  \n You can also use the <xref:System.Diagnostics.Trace.Fail%2A> method in a switch statement.  \n  \n [!code-cs[Classic Trace.Fail1 Example#2](~/add/codesnippet/csharp/m-system.diagnostics.tra_13_2.cs)]\n [!code-cpp[Classic Trace.Fail1 Example#2](~/add/codesnippet/cpp/m-system.diagnostics.tra_13_2.cpp)]\n [!code-vb[Classic Trace.Fail1 Example#2](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_13_2.vb)]"
  syntax:
    content: public static void Fail (string message, string detailMessage);
    parameters:
    - id: message
      type: System.String
      description: "Komunikat emisji."
    - id: detailMessage
      type: System.String
      description: "Szczegółowy komunikat do wysyłania."
  overload: System.Diagnostics.Trace.Fail*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Flush
  id: Flush
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Flush()
  nameWithType: Trace.Flush()
  fullName: System.Diagnostics.Trace.Flush()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Opróżnia bufor wyjściowy i powoduje, że buforowane dane są zapisywane do <xref:System.Diagnostics.Trace.Listeners*>.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Opróżnianie strumienia nie opróżnić jego podstawowym kodera, chyba że jawnie wywołać Flush lub <xref:System.Diagnostics.Trace.Close%2A>.</xref:System.Diagnostics.Trace.Close%2A> Ustawienie <xref:System.Diagnostics.Trace.AutoFlush%2A>do `true` oznacza, że dane zostaną opróżnione z buforu w strumieniu, ale nie zostaną opróżnione stanu kodera.</xref:System.Diagnostics.Trace.AutoFlush%2A> Dzięki temu koder ma zachowywać stan (częściowe znaki), aby ją poprawnie kodowania kolejny blok znaków. Ten scenariusz dotyczy UTF8 i UTF7, w której niektóre znaki mogą być kodowane tylko po otrzymaniu koder sąsiedniego znaku ani znaków."
  example:
  - "The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> named `myTextListener`. `myTextListener` uses a <xref:System.IO.StreamWriter> called `myOutputWriter` to write to a file named `TestFile.txt`. The example creates the file, stream and text writer, writes one line of text to the file, and then flushes and closes the output.  \n  \n [!code-cs[Classic Trace.Flush Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_17_1.cs)]\n [!code-cpp[Classic Trace.Flush Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_17_1.cpp)]\n [!code-vb[Classic Trace.Flush Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_17_1.vb)]"
  syntax:
    content: public static void Flush ();
    parameters: []
  overload: System.Diagnostics.Trace.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Indent
  id: Indent
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Indent()
  nameWithType: Trace.Indent()
  fullName: System.Diagnostics.Trace.Indent()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zwiększa bieżącego <xref:System.Diagnostics.Trace.IndentLevel*>o jeden.</xref:System.Diagnostics.Trace.IndentLevel*>"
  remarks: ''
  example:
  - "The following example increments and decrements the indent level and emits tracing messages.  \n  \n [!code-cpp[Classic Trace.IndentLevel Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_6_1.cpp)]\n [!code-cs[Classic Trace.IndentLevel Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_6_1.cs)]\n [!code-vb[Classic Trace.IndentLevel Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_6_1.vb)]  \n  \n This example produces the following output:  \n  \n```  \nList of errors:  \n     Error 1: File not found  \n     Error 2: Directory not found  \nEnd of list of errors  \n```"
  syntax:
    content: public static void Indent ();
    parameters: []
  overload: System.Diagnostics.Trace.Indent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.IndentLevel
  id: IndentLevel
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: IndentLevel
  nameWithType: Trace.IndentLevel
  fullName: System.Diagnostics.Trace.IndentLevel
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Pobiera lub ustawia poziom wcięcia."
  remarks: "Właściwość IndentLevel reprezentuje liczbę wcięcie rozmiar <xref:System.Diagnostics.Trace.IndentSize%2A>została zastosowana.</xref:System.Diagnostics.Trace.IndentSize%2A> Ta właściwość jest przechowywane na podstawie wątku/na — żądań."
  example:
  - "The following example increments and decrements the indent level and emits tracing messages.  \n  \n [!code-cpp[Classic Trace.IndentLevel Example#1](~/add/codesnippet/cpp/p-system.diagnostics.tra_10_1.cpp)]\n [!code-cs[Classic Trace.IndentLevel Example#1](~/add/codesnippet/csharp/p-system.diagnostics.tra_10_1.cs)]\n [!code-vb[Classic Trace.IndentLevel Example#1](~/add/codesnippet/visualbasic/p-system.diagnostics.tra_10_1.vb)]  \n  \n This example produces the following output:  \n  \n```  \n  \nList of errors:  \n     Error 1: File not found  \n     Error 2: Directory not found  \nEnd of list of errors  \n  \n```"
  syntax:
    content: public static int IndentLevel { get; set; }
    return:
      type: System.Int32
      description: "Poziom wcięcia. Wartość domyślna to zero."
  overload: System.Diagnostics.Trace.IndentLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.IndentSize
  id: IndentSize
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: IndentSize
  nameWithType: Trace.IndentSize
  fullName: System.Diagnostics.Trace.IndentSize
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Pobiera lub ustawia liczbę spacji w wcięcia."
  remarks: "A <xref:System.Diagnostics.TextWriterTraceListener>interpretuje tego numeru jako spacji.</xref:System.Diagnostics.TextWriterTraceListener> <xref:System.Diagnostics.EventLogTraceListener>Ignoruje tę wartość.</xref:System.Diagnostics.EventLogTraceListener>       Ta właściwość jest przechowywane na podstawie wątku/na — żądań.       Aby ustawić <xref:System.Diagnostics.Trace.AutoFlush%2A>i IndentSize dla <xref:System.Diagnostics.Trace>, można również edytować plik konfiguracji, który odpowiada nazwie aplikacji.</xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Trace.AutoFlush%2A> Plik konfiguracji powinien być sformatowany jak w następującym przykładzie:```   <configuration>     <system.diagnostics>       <trace autoflush=&quot;false&quot; indentsize=&quot;3&quot; />     </system.diagnostics>   </configuration>   ```"
  syntax:
    content: public static int IndentSize { get; set; }
    return:
      type: System.Int32
      description: "Liczba spacji w wcięcia. Wartość domyślna to&4;."
  overload: System.Diagnostics.Trace.IndentSize*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Listeners
  id: Listeners
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Listeners
  nameWithType: Trace.Listeners
  fullName: System.Diagnostics.Trace.Listeners
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Pobiera kolekcję obiektów nasłuchujących monitorowaną danych wyjściowych śledzenia."
  remarks: "Odbiorniki utworzyć sformatowane dane wyjściowe z danych wyjściowych śledzenia. Domyślnie kolekcja zawiera wystąpienie <xref:System.Diagnostics.DefaultTraceListener>klasy.</xref:System.Diagnostics.DefaultTraceListener> Jeśli chcesz usunąć odbiornik domyślne, należy wywołać <xref:System.Diagnostics.TraceListenerCollection.Remove%2A>metody i przekaż go wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener> </xref:System.Diagnostics.TraceListenerCollection.Remove%2A> Przekierowywanie danych wyjściowych do okna konsoli, należy dodać wystąpienia <xref:System.Diagnostics.ConsoleTraceListener>klasy.</xref:System.Diagnostics.ConsoleTraceListener>      > [!NOTE] > Kolekcja obiektów nasłuchujących jest udostępniany przez oba <xref:System.Diagnostics.Debug>i <xref:System.Diagnostics.Trace>klasy; Dodawanie odbiornik śledzenia do każdej klasy dodaje odbiornika zarówno.</xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>"
  example:
  - "The following example creates a <xref:System.Diagnostics.ConsoleTraceListener> that outputs to the console screen. The code then adds the new listener to the Listeners.  \n  \n [!code-cs[Classic Trace.Listeners Example#1](~/add/codesnippet/csharp/p-system.diagnostics.tra_2_1.cs)]\n [!code-vb[Classic Trace.Listeners Example#1](~/add/codesnippet/visualbasic/p-system.diagnostics.tra_2_1.vb)]\n [!code-cpp[Classic Trace.Listeners Example#1](~/add/codesnippet/cpp/p-system.diagnostics.tra_2_1.cpp)]"
  syntax:
    content: public static System.Diagnostics.TraceListenerCollection Listeners { get; }
    return:
      type: System.Diagnostics.TraceListenerCollection
      description: "A <xref href=&quot;System.Diagnostics.TraceListenerCollection&quot;> </xref> reprezentujący kolekcję typu <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> monitorowania danych wyjściowych śledzenia."
  overload: System.Diagnostics.Trace.Listeners*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Refresh
  id: Refresh
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Refresh()
  nameWithType: Trace.Refresh()
  fullName: System.Diagnostics.Trace.Refresh()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Odświeża dane konfiguracji śledzenia."
  remarks: "Dane konfiguracji śledzenia są przechwytywane, gdy aplikacja jest uruchomiona. Jeśli dane konfiguracji zostaną zmienione po uruchomieniu aplikacji, należy wywołać metodę odświeżania, aby zaktualizować dane konfiguracji śledzenia."
  syntax:
    content: public static void Refresh ();
    parameters: []
  overload: System.Diagnostics.Trace.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.TraceError(System.String)
  id: TraceError(System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: TraceError(String)
  nameWithType: Trace.TraceError(String)
  fullName: System.Diagnostics.Trace.TraceError(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje komunikat o błędzie odbiorniki śledzenia w <xref:System.Diagnostics.Trace.Listeners*>kolekcji przy użyciu określonego komunikatu.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Błąd śledzenia wywołań `TraceEvent` metodę dla każdego nasłuchującego śledzenia z typem zdarzenia śledzenia <xref:System.Diagnostics.TraceEventType>, przekazując komunikat informacyjny jako ciąg z komunikatem.</xref:System.Diagnostics.TraceEventType>"
  syntax:
    content: public static void TraceError (string message);
    parameters:
    - id: message
      type: System.String
      description: "Komunikat informacyjny do zapisania."
  overload: System.Diagnostics.Trace.TraceError*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.TraceError(System.String,System.Object[])
  id: TraceError(System.String,System.Object[])
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: TraceError(String,Object[])
  nameWithType: Trace.TraceError(String,Object[])
  fullName: System.Diagnostics.Trace.TraceError(String,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje komunikat o błędzie odbiorniki śledzenia w <xref:System.Diagnostics.Trace.Listeners*>kolekcji przy użyciu określonej tablicy obiektów i informacje dotyczące formatowania.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Błąd śledzenia wywołań `TraceEvent` metod obiektów nasłuchujących śledzenia z typem zdarzenia śledzenia <xref:System.Diagnostics.TraceEventType>, przekazanie zawartość komunikatu jako tablica obiektów z formatowaniem informacji.</xref:System.Diagnostics.TraceEventType> Zobacz <xref:System.String.Format%2A>metody, aby uzyskać więcej informacji na temat `format` i `args` parametrów.</xref:System.String.Format%2A>"
  syntax:
    content: public static void TraceError (string format, object[] args);
    parameters:
    - id: format
      type: System.String
      description: "Ciąg formatu, który zawiera zero lub więcej elementów formatu, które odnoszą się do obiektów w `args` tablicy."
    - id: args
      type: System.Object[]
      description: "<xref uid=&quot;langword_csharp_object&quot; name=&quot;object&quot; href=&quot;&quot;> </xref> Tablicę zawierającą zero lub więcej obiektów do formatowania."
  overload: System.Diagnostics.Trace.TraceError*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.TraceInformation(System.String)
  id: TraceInformation(System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: TraceInformation(String)
  nameWithType: Trace.TraceInformation(String)
  fullName: System.Diagnostics.Trace.TraceInformation(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje komunikat informacyjny odbiorniki śledzenia w <xref:System.Diagnostics.Trace.Listeners*>kolekcji przy użyciu określonego komunikatu.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Informacje o śledzeniu wywołania `TraceEvent` metodę dla każdego nasłuchującego śledzenia z typem zdarzenia śledzenia <xref:System.Diagnostics.TraceEventType>, przekazując komunikat informacyjny jako ciąg z komunikatem.</xref:System.Diagnostics.TraceEventType>"
  syntax:
    content: public static void TraceInformation (string message);
    parameters:
    - id: message
      type: System.String
      description: "Komunikat informacyjny do zapisania."
  overload: System.Diagnostics.Trace.TraceInformation*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.TraceInformation(System.String,System.Object[])
  id: TraceInformation(System.String,System.Object[])
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: TraceInformation(String,Object[])
  nameWithType: Trace.TraceInformation(String,Object[])
  fullName: System.Diagnostics.Trace.TraceInformation(String,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje komunikat informacyjny odbiorniki śledzenia w <xref:System.Diagnostics.Trace.Listeners*>kolekcji przy użyciu określonej tablicy obiektów i informacje dotyczące formatowania.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Informacje o śledzeniu wywołania `TraceEvent` metod obiektów nasłuchujących śledzenia z typem zdarzenia śledzenia <xref:System.Diagnostics.TraceEventType>, przekazanie zawartość komunikatu jako tablica obiektów z formatowaniem informacji.</xref:System.Diagnostics.TraceEventType> Zobacz <xref:System.String.Format%2A>metody, aby uzyskać więcej informacji na temat `format` i `args` parametrów.</xref:System.String.Format%2A>"
  syntax:
    content: public static void TraceInformation (string format, object[] args);
    parameters:
    - id: format
      type: System.String
      description: "Ciąg formatu, który zawiera zero lub więcej elementów formatu, które odnoszą się do obiektów w `args` tablicy."
    - id: args
      type: System.Object[]
      description: "<xref uid=&quot;langword_csharp_object&quot; name=&quot;object&quot; href=&quot;&quot;> </xref> Tablicę zawierającą zero lub więcej obiektów do formatowania."
  overload: System.Diagnostics.Trace.TraceInformation*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.TraceWarning(System.String)
  id: TraceWarning(System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: TraceWarning(String)
  nameWithType: Trace.TraceWarning(String)
  fullName: System.Diagnostics.Trace.TraceWarning(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje komunikat ostrzegawczy odbiorniki śledzenia w <xref:System.Diagnostics.Trace.Listeners*>kolekcji przy użyciu określonego komunikatu.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Zarejestrowano element TraceWarning wywołania `TraceEvent` metody dla każdego odbiornika śledzenia z typem zdarzenia śledzenia <xref:System.Diagnostics.TraceEventType>, przekazując komunikat informacyjny jako ciąg z komunikatem.</xref:System.Diagnostics.TraceEventType>"
  syntax:
    content: public static void TraceWarning (string message);
    parameters:
    - id: message
      type: System.String
      description: "Komunikat informacyjny do zapisania."
  overload: System.Diagnostics.Trace.TraceWarning*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.TraceWarning(System.String,System.Object[])
  id: TraceWarning(System.String,System.Object[])
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: TraceWarning(String,Object[])
  nameWithType: Trace.TraceWarning(String,Object[])
  fullName: System.Diagnostics.Trace.TraceWarning(String,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje komunikat ostrzegawczy odbiorniki śledzenia w <xref:System.Diagnostics.Trace.Listeners*>kolekcji przy użyciu określonej tablicy obiektów i informacje dotyczące formatowania.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Zarejestrowano element TraceWarning wywołania `TraceEvent` metod obiektów nasłuchujących śledzenia z typem zdarzenia śledzenia <xref:System.Diagnostics.TraceEventType>, przekazanie zawartość komunikatu jako tablica obiektów z formatowaniem informacji.</xref:System.Diagnostics.TraceEventType> Zobacz <xref:System.String.Format%2A>metody, aby uzyskać więcej informacji na temat `format` i `args` parametrów.</xref:System.String.Format%2A>"
  syntax:
    content: public static void TraceWarning (string format, object[] args);
    parameters:
    - id: format
      type: System.String
      description: "Ciąg formatu, który zawiera zero lub więcej elementów formatu, które odnoszą się do obiektów w `args` tablicy."
    - id: args
      type: System.Object[]
      description: "<xref uid=&quot;langword_csharp_object&quot; name=&quot;object&quot; href=&quot;&quot;> </xref> Tablicę zawierającą zero lub więcej obiektów do formatowania."
  overload: System.Diagnostics.Trace.TraceWarning*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Unindent
  id: Unindent
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Unindent()
  nameWithType: Trace.Unindent()
  fullName: System.Diagnostics.Trace.Unindent()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zmniejsza bieżącego <xref:System.Diagnostics.Trace.IndentLevel*>o jeden.</xref:System.Diagnostics.Trace.IndentLevel*>"
  remarks: ''
  example:
  - "The following example increments and decrements the indent level and emits tracing messages.  \n  \n [!code-cpp[Classic Trace.IndentLevel Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_14_1.cpp)]\n [!code-cs[Classic Trace.IndentLevel Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_14_1.cs)]\n [!code-vb[Classic Trace.IndentLevel Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_14_1.vb)]  \n  \n This example produces the following output:  \n  \n```  \n  \nList of errors:  \n     Error 1: File not found  \n     Error 2: Directory not found  \nEnd of list of errors  \n  \n```"
  syntax:
    content: public static void Unindent ();
    parameters: []
  overload: System.Diagnostics.Trace.Unindent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.UseGlobalLock
  id: UseGlobalLock
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: UseGlobalLock
  nameWithType: Trace.UseGlobalLock
  fullName: System.Diagnostics.Trace.UseGlobalLock
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Pobiera lub ustawia wartość wskazującą, czy globalne blokady powinien być używany."
  remarks: "Globalne blokady jest zawsze używana, jeśli odbiornik śledzenia nie jest bezpieczne, niezależnie od wartości UseGlobalLock wątku. <xref:System.Diagnostics.TraceListener.IsThreadSafe%2A>Właściwość jest używana do określenia, czy odbiornik jest bezpieczne dla wątków.</xref:System.Diagnostics.TraceListener.IsThreadSafe%2A> Globalne blokady nie jest używany tylko wtedy, gdy wartość UseGlobalLock `false` i wartość <xref:System.Diagnostics.TraceListener.IsThreadSafe%2A>jest `true`.</xref:System.Diagnostics.TraceListener.IsThreadSafe%2A> Domyślnym zachowaniem jest używać globalne blokady.       Aby ustawić UseGlobalLock dla <xref:System.Diagnostics.Trace>, można również edytować plik konfiguracji, który odpowiada nazwie aplikacji.</xref:System.Diagnostics.Trace> Plik konfiguracji powinien być sformatowany jak w następującym przykładzie:```   <configuration>     <system.diagnostics>       <trace useGlobalLock=&quot;false&quot; />     </system.diagnostics>   </configuration>   ```"
  syntax:
    content: public static bool UseGlobalLock { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli globalne blokady ma być używana; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Wartość domyślna to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.Trace.UseGlobalLock*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Write(System.Object)
  id: Write(System.Object)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Write(Object)
  nameWithType: Trace.Write(Object)
  fullName: System.Diagnostics.Trace.Write(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje wartość obiektu <> </> *> metodę odbiorniki śledzenia w <> </> *> kolekcji."
  remarks: "Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.Write%2A>metody obiektu nasłuchującego śledzenia.</xref:System.Diagnostics.TraceListener.Write%2A>      > [!NOTE] > ASP.NET udostępnia funkcje śledzenia, dostosowane do stron sieci Web. Aby zapisać komunikaty śledzenia stron ASP.NET, należy użyć <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>Właściwości.</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>       Domyślnie w kodzie skojarzony ze stroną sieci Web ASP.NET, instrukcja `Trace.Write(&quot;...&quot;)` jest to wywołanie <xref:System.Web.TraceContext.Write%2A>metody <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>Właściwości.</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> </xref:System.Web.TraceContext.Write%2A> Aby użyć <xref:System.Diagnostics.Trace?displayProperty=fullName>klasy na stronach sieci Web musi zawierać przestrzeni nazw, na przykład `System.Diagnostics.Trace.Write(&quot;...&quot;)`.</xref:System.Diagnostics.Trace?displayProperty=fullName>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first name of the `value` parameter to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs a message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.Write1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_26_1.cpp)]\n [!code-vb[Classic Trace.Write1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_26_1.vb)]\n [!code-cs[Classic Trace.Write1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_26_1.cs)]"
  syntax:
    content: public static void Write (object value);
    parameters:
    - id: value
      type: System.Object
      description: ", <xref:System.Object>Którego nazwa jest wysyłany do <xref:System.Diagnostics.Trace.Listeners*>.</xref:System.Diagnostics.Trace.Listeners*> </xref:System.Object>"
  overload: System.Diagnostics.Trace.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Write(System.String)
  id: Write(System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Write(String)
  nameWithType: Trace.Write(String)
  fullName: System.Diagnostics.Trace.Write(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje komunikat odbiorniki śledzenia w <xref:System.Diagnostics.Trace.Listeners*>kolekcji.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.Write%2A>metody obiektu nasłuchującego śledzenia.</xref:System.Diagnostics.TraceListener.Write%2A>      > [!NOTE] > ASP.NET udostępnia funkcje śledzenia, dostosowane do stron sieci Web. Aby zapisać komunikaty śledzenia stron ASP.NET, należy użyć <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>Właściwości.</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>       Domyślnie w kodzie skojarzony ze stroną sieci Web ASP.NET, instrukcja `Trace.Write(&quot;...&quot;)` jest to wywołanie <xref:System.Web.TraceContext.Write%2A>metody <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>Właściwości.</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> </xref:System.Web.TraceContext.Write%2A> Aby użyć <xref:System.Diagnostics.Trace?displayProperty=fullName>klasy na stronach sieci Web musi zawierać przestrzeni nazw, na przykład `System.Diagnostics.Trace.Write(&quot;...&quot;)`.</xref:System.Diagnostics.Trace?displayProperty=fullName>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. A line terminator follows the second message.  \n  \n [!code-cpp[Classic Trace.Write Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_12_1.cpp)]\n [!code-cs[Classic Trace.Write Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_12_1.cs)]\n [!code-vb[Classic Trace.Write Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_12_1.vb)]"
  syntax:
    content: public static void Write (string message);
    parameters:
    - id: message
      type: System.String
      description: "Komunikat do zapisania."
  overload: System.Diagnostics.Trace.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Write(System.Object,System.String)
  id: Write(System.Object,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Write(Object,String)
  nameWithType: Trace.Write(Object,String)
  fullName: System.Diagnostics.Trace.Write(Object,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Nazwa kategorii i wartość obiektu <> </> *> metodę odbiorniki śledzenia w <> </> *> kolekcji."
  remarks: "Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       `category` Parametr może służyć do grupowania komunikaty wyjściowe.       Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.Write%2A>metody obiektu nasłuchującego śledzenia.</xref:System.Diagnostics.TraceListener.Write%2A>      > [!NOTE] > ASP.NET udostępnia funkcje śledzenia, dostosowane do stron sieci Web. Aby zapisać komunikaty śledzenia stron ASP.NET, należy użyć <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>Właściwości.</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>       Domyślnie w kodzie skojarzony ze stroną sieci Web ASP.NET, instrukcja `Trace.Write(&quot;...&quot;)` jest to wywołanie <xref:System.Web.TraceContext.Write%2A>metody <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>Właściwości.</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> </xref:System.Web.TraceContext.Write%2A> Aby użyć <xref:System.Diagnostics.Trace?displayProperty=fullName>klasy na stronach sieci Web musi zawierać przestrzeni nazw, na przykład `System.Diagnostics.Trace.Write(&quot;...&quot;)`.</xref:System.Diagnostics.Trace?displayProperty=fullName>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the name of the `myObject` and the `category` to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.Write3 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_16_1.cpp)]\n [!code-cs[Classic Trace.Write3 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_16_1.cs)]\n [!code-vb[Classic Trace.Write3 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_16_1.vb)]"
  syntax:
    content: public static void Write (object value, string category);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>Nazwa jest wysyłany do <xref:System.Diagnostics.Trace.Listeners*>.</xref:System.Diagnostics.Trace.Listeners*> </xref:System.Object>"
    - id: category
      type: System.String
      description: "Nazwa kategorii, używane do organizowania danych wyjściowych."
  overload: System.Diagnostics.Trace.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Write(System.String,System.String)
  id: Write(System.String,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Write(String,String)
  nameWithType: Trace.Write(String,String)
  fullName: System.Diagnostics.Trace.Write(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje nazwę kategorii i komunikat odbiorniki śledzenia w <xref:System.Diagnostics.Trace.Listeners*>kolekcji.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       `category` Parametr może służyć do grupowania komunikaty wyjściowe.       Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.Write%2A>metody obiektu nasłuchującego śledzenia.</xref:System.Diagnostics.TraceListener.Write%2A>      > [!NOTE] > ASP.NET udostępnia funkcje śledzenia, dostosowane do stron sieci Web. Aby zapisać komunikaty śledzenia stron ASP.NET, należy użyć <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>Właściwości.</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>       Domyślnie w kodzie skojarzony ze stroną sieci Web ASP.NET, instrukcja `Trace.Write(&quot;...&quot;)` jest to wywołanie <xref:System.Web.TraceContext.Write%2A>metody <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>Właściwości.</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> </xref:System.Web.TraceContext.Write%2A> Aby użyć <xref:System.Diagnostics.Trace?displayProperty=fullName>klasy na stronach sieci Web musi zawierać przestrzeni nazw, na przykład `System.Diagnostics.Trace.Write(&quot;...&quot;)`.</xref:System.Diagnostics.Trace?displayProperty=fullName>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.Write2 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_4_1.cpp)]\n [!code-vb[Classic Trace.Write2 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_4_1.vb)]\n [!code-cs[Classic Trace.Write2 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_4_1.cs)]"
  syntax:
    content: public static void Write (string message, string category);
    parameters:
    - id: message
      type: System.String
      description: "Komunikat do zapisania."
    - id: category
      type: System.String
      description: "Nazwa kategorii, używane do organizowania danych wyjściowych."
  overload: System.Diagnostics.Trace.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object)
  id: WriteIf(System.Boolean,System.Object)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteIf(Boolean,Object)
  nameWithType: Trace.WriteIf(Boolean,Object)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje wartość obiektu <> </> *> metodę odbiorniki śledzenia w <> </> *> kolekcji, jeśli wynikiem warunku jest <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.Write%2A>metody obiektu nasłuchującego śledzenia.</xref:System.Diagnostics.TraceListener.Write%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first name of the value parameter to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs a message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.WriteIf1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_2_1.cpp)]\n [!code-vb[Classic Trace.WriteIf1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_2_1.vb)]\n [!code-cs[Classic Trace.WriteIf1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_2_1.cs)]"
  syntax:
    content: public static void WriteIf (bool condition, object value);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby spowodować, że komunikat do zapisania; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: value
      type: System.Object
      description: ", <xref:System.Object>Którego nazwa jest wysyłany do <xref:System.Diagnostics.Trace.Listeners*>.</xref:System.Diagnostics.Trace.Listeners*> </xref:System.Object>"
  overload: System.Diagnostics.Trace.WriteIf*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)
  id: WriteIf(System.Boolean,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteIf(Boolean,String)
  nameWithType: Trace.WriteIf(Boolean,String)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje komunikat odbiorniki śledzenia w <xref:System.Diagnostics.Trace.Listeners*>kolekcji, jeśli wynikiem warunku jest <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.Write%2A>metody obiektu nasłuchującego śledzenia.</xref:System.Diagnostics.TraceListener.Write%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cs[Classic Trace.WriteIf Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_10_1.cs)]\n [!code-cpp[Classic Trace.WriteIf Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_10_1.cpp)]\n [!code-vb[Classic Trace.WriteIf Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_10_1.vb)]"
  syntax:
    content: public static void WriteIf (bool condition, string message);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby spowodować, że komunikat do zapisania; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: message
      type: System.String
      description: "Komunikat do zapisania."
  overload: System.Diagnostics.Trace.WriteIf*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object,System.String)
  id: WriteIf(System.Boolean,System.Object,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteIf(Boolean,Object,String)
  nameWithType: Trace.WriteIf(Boolean,Object,String)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,Object,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Nazwa kategorii i wartość obiektu <> </> *> metodę odbiorniki śledzenia w <> </> *> kolekcji, jeśli wynikiem warunku jest <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       `category` Parametr może służyć do grupowania komunikaty wyjściowe.       Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.Write%2A>metody obiektu nasłuchującego śledzenia.</xref:System.Diagnostics.TraceListener.Write%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the name of the `myObject` and the `category` to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cs[Classic Trace.WriteIf3 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_8_1.cs)]\n [!code-vb[Classic Trace.WriteIf3 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_8_1.vb)]\n [!code-cpp[Classic Trace.WriteIf3 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_8_1.cpp)]"
  syntax:
    content: public static void WriteIf (bool condition, object value, string category);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby spowodować, że komunikat do zapisania; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: value
      type: System.Object
      description: ", <xref:System.Object>Którego nazwa jest wysyłany do <xref:System.Diagnostics.Trace.Listeners*>.</xref:System.Diagnostics.Trace.Listeners*> </xref:System.Object>"
    - id: category
      type: System.String
      description: "Nazwa kategorii, używane do organizowania danych wyjściowych."
  overload: System.Diagnostics.Trace.WriteIf*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.String,System.String)
  id: WriteIf(System.Boolean,System.String,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteIf(Boolean,String,String)
  nameWithType: Trace.WriteIf(Boolean,String,String)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje nazwę kategorii i komunikat odbiorniki śledzenia w <xref:System.Diagnostics.Trace.Listeners*>kolekcji, jeśli wynikiem warunku jest <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       `category` Parametr może służyć do grupowania komunikaty wyjściowe.       Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.Write%2A>metody obiektu nasłuchującego śledzenia.</xref:System.Diagnostics.TraceListener.Write%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cs[Classic Trace.WriteIf2 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_7_1.cs)]\n [!code-cpp[Classic Trace.WriteIf2 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_7_1.cpp)]\n [!code-vb[Classic Trace.WriteIf2 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_7_1.vb)]"
  syntax:
    content: public static void WriteIf (bool condition, string message, string category);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby spowodować, że komunikat do zapisania; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: message
      type: System.String
      description: "Komunikat do zapisania."
    - id: category
      type: System.String
      description: "Nazwa kategorii, używane do organizowania danych wyjściowych."
  overload: System.Diagnostics.Trace.WriteIf*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLine(System.Object)
  id: WriteLine(System.Object)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLine(Object)
  nameWithType: Trace.WriteLine(Object)
  fullName: System.Diagnostics.Trace.WriteLine(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje wartość obiektu <> </> *> metodę odbiorniki śledzenia w <> </> *> kolekcji."
  remarks: "Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.WriteLine%2A>metody obiektu nasłuchującego śledzenia.</xref:System.Diagnostics.TraceListener.WriteLine%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the name of the object on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.WriteLine1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_18_1.cpp)]\n [!code-cs[Classic Trace.WriteLine1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_18_1.cs)]\n [!code-vb[Classic Trace.WriteLine1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_18_1.vb)]"
  syntax:
    content: public static void WriteLine (object value);
    parameters:
    - id: value
      type: System.Object
      description: ", <xref:System.Object>Którego nazwa jest wysyłany do <xref:System.Diagnostics.Trace.Listeners*>.</xref:System.Diagnostics.Trace.Listeners*> </xref:System.Object>"
  overload: System.Diagnostics.Trace.WriteLine*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLine(System.String)
  id: WriteLine(System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLine(String)
  nameWithType: Trace.WriteLine(String)
  fullName: System.Diagnostics.Trace.WriteLine(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje komunikat odbiorniki śledzenia w <xref:System.Diagnostics.Trace.Listeners*>kolekcji.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.WriteLine%2A>metody obiektu nasłuchującego śledzenia.</xref:System.Diagnostics.TraceListener.WriteLine%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.Write Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_3_1.cpp)]\n [!code-cs[Classic Trace.Write Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_3_1.cs)]\n [!code-vb[Classic Trace.Write Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_3_1.vb)]"
  syntax:
    content: public static void WriteLine (string message);
    parameters:
    - id: message
      type: System.String
      description: "Komunikat do zapisania."
  overload: System.Diagnostics.Trace.WriteLine*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLine(System.Object,System.String)
  id: WriteLine(System.Object,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLine(Object,String)
  nameWithType: Trace.WriteLine(Object,String)
  fullName: System.Diagnostics.Trace.WriteLine(Object,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Nazwa kategorii i wartość obiektu <> </> *> metodę odbiorniki śledzenia w <> </> *> kolekcji."
  remarks: "Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       `category` Parametr może służyć do grupowania komunikaty wyjściowe.       Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.WriteLine%2A>metody obiektu nasłuchującego śledzenia.</xref:System.Diagnostics.TraceListener.WriteLine%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.WriteLine3 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_19_1.cpp)]\n [!code-vb[Classic Trace.WriteLine3 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_19_1.vb)]\n [!code-cs[Classic Trace.WriteLine3 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_19_1.cs)]"
  syntax:
    content: public static void WriteLine (object value, string category);
    parameters:
    - id: value
      type: System.Object
      description: ", <xref:System.Object>Którego nazwa jest wysyłany do <xref:System.Diagnostics.Trace.Listeners*>.</xref:System.Diagnostics.Trace.Listeners*> </xref:System.Object>"
    - id: category
      type: System.String
      description: "Nazwa kategorii, używane do organizowania danych wyjściowych."
  overload: System.Diagnostics.Trace.WriteLine*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLine(System.String,System.String)
  id: WriteLine(System.String,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLine(String,String)
  nameWithType: Trace.WriteLine(String,String)
  fullName: System.Diagnostics.Trace.WriteLine(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje nazwę kategorii i komunikat odbiorniki śledzenia w <xref:System.Diagnostics.Trace.Listeners*>kolekcji.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       `category` Parametr może służyć do grupowania komunikaty wyjściowe.       Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.WriteLine%2A>metody obiektu nasłuchującego śledzenia.</xref:System.Diagnostics.TraceListener.WriteLine%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message and the `category` on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.WriteLine2 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_25_1.cpp)]\n [!code-vb[Classic Trace.WriteLine2 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_25_1.vb)]\n [!code-cs[Classic Trace.WriteLine2 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_25_1.cs)]"
  syntax:
    content: public static void WriteLine (string message, string category);
    parameters:
    - id: message
      type: System.String
      description: "Komunikat do zapisania."
    - id: category
      type: System.String
      description: "Nazwa kategorii, używane do organizowania danych wyjściowych."
  overload: System.Diagnostics.Trace.WriteLine*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object)
  id: WriteLineIf(System.Boolean,System.Object)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLineIf(Boolean,Object)
  nameWithType: Trace.WriteLineIf(Boolean,Object)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje wartość obiektu <> </> *> metodę odbiorniki śledzenia w <> </> *> kolekcji, jeśli wynikiem warunku jest <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.WriteLine%2A>metody obiektu nasłuchującego śledzenia.</xref:System.Diagnostics.TraceListener.WriteLine%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the name of the object on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.WriteLineIf1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_5_1.cpp)]\n [!code-vb[Classic Trace.WriteLineIf1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_5_1.vb)]\n [!code-cs[Classic Trace.WriteLineIf1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_5_1.cs)]"
  syntax:
    content: public static void WriteLineIf (bool condition, object value);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby spowodować, że komunikat do zapisania; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: value
      type: System.Object
      description: ", <xref:System.Object>Którego nazwa jest wysyłany do <xref:System.Diagnostics.Trace.Listeners*>.</xref:System.Diagnostics.Trace.Listeners*> </xref:System.Object>"
  overload: System.Diagnostics.Trace.WriteLineIf*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)
  id: WriteLineIf(System.Boolean,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLineIf(Boolean,String)
  nameWithType: Trace.WriteLineIf(Boolean,String)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje komunikat odbiorniki śledzenia w <xref:System.Diagnostics.Trace.Listeners*>kolekcji, jeśli wynikiem warunku jest <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.WriteLine%2A>metody obiektu nasłuchującego śledzenia.</xref:System.Diagnostics.TraceListener.WriteLine%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cs[Classic Trace.WriteIf Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_11_1.cs)]\n [!code-cpp[Classic Trace.WriteIf Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_11_1.cpp)]\n [!code-vb[Classic Trace.WriteIf Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_11_1.vb)]"
  syntax:
    content: public static void WriteLineIf (bool condition, string message);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby spowodować, że komunikat do zapisania; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: message
      type: System.String
      description: "Komunikat do zapisania."
  overload: System.Diagnostics.Trace.WriteLineIf*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object,System.String)
  id: WriteLineIf(System.Boolean,System.Object,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLineIf(Boolean,Object,String)
  nameWithType: Trace.WriteLineIf(Boolean,Object,String)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,Object,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Nazwa kategorii i wartość obiektu <> </> *> metodę odbiorniki śledzenia w <> </> *> kolekcji, jeśli wynikiem warunku jest <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       `category` Parametr może służyć do grupowania komunikaty wyjściowe.       Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.WriteLine%2A>metody obiektu nasłuchującego śledzenia.</xref:System.Diagnostics.TraceListener.WriteLine%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cs[Classic Trace.WriteLineIf3 Example#1](~/add/codesnippet/csharp/96a954ed-2f0b-4ec7-91f9-_1.cs)]\n [!code-vb[Classic Trace.WriteLineIf3 Example#1](~/add/codesnippet/visualbasic/96a954ed-2f0b-4ec7-91f9-_1.vb)]\n [!code-cpp[Classic Trace.WriteLineIf3 Example#1](~/add/codesnippet/cpp/96a954ed-2f0b-4ec7-91f9-_1.cpp)]"
  syntax:
    content: public static void WriteLineIf (bool condition, object value, string category);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby spowodować, że komunikat do zapisania; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: value
      type: System.Object
      description: ", <xref:System.Object>Którego nazwa jest wysyłany do <xref:System.Diagnostics.Trace.Listeners*>.</xref:System.Diagnostics.Trace.Listeners*> </xref:System.Object>"
    - id: category
      type: System.String
      description: "Nazwa kategorii, używane do organizowania danych wyjściowych."
  overload: System.Diagnostics.Trace.WriteLineIf*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String,System.String)
  id: WriteLineIf(System.Boolean,System.String,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLineIf(Boolean,String,String)
  nameWithType: Trace.WriteLineIf(Boolean,String,String)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje nazwę kategorii i komunikat odbiorniki śledzenia w <xref:System.Diagnostics.Trace.Listeners*>kolekcji, jeśli wynikiem warunku jest <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       `category` Parametr może służyć do grupowania komunikaty wyjściowe.       Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.WriteLine%2A>metody obiektu nasłuchującego śledzenia.</xref:System.Diagnostics.TraceListener.WriteLine%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message and the `category` on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-vb[Classic Trace.WriteLineIf2 Example#1](~/add/codesnippet/visualbasic/7f54460b-5f74-4be1-a3dd-_1.vb)]\n [!code-cs[Classic Trace.WriteLineIf2 Example#1](~/add/codesnippet/csharp/7f54460b-5f74-4be1-a3dd-_1.cs)]\n [!code-cpp[Classic Trace.WriteLineIf2 Example#1](~/add/codesnippet/cpp/7f54460b-5f74-4be1-a3dd-_1.cpp)]"
  syntax:
    content: public static void WriteLineIf (bool condition, string message, string category);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby spowodować, że komunikat do zapisania; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: message
      type: System.String
      description: "Komunikat do zapisania."
    - id: category
      type: System.String
      description: "Nazwa kategorii, używane do organizowania danych wyjściowych."
  overload: System.Diagnostics.Trace.WriteLineIf*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Diagnostics.Trace.Assert(System.Boolean)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Assert(Boolean)
  nameWithType: Trace.Assert(Boolean)
  fullName: System.Diagnostics.Trace.Assert(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.Trace.Assert(System.Boolean,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Assert(Boolean,String)
  nameWithType: Trace.Assert(Boolean,String)
  fullName: System.Diagnostics.Trace.Assert(Boolean,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.Trace.Assert(System.Boolean,System.String,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Assert(Boolean,String,String)
  nameWithType: Trace.Assert(Boolean,String,String)
  fullName: System.Diagnostics.Trace.Assert(Boolean,String,String)
- uid: System.Diagnostics.Trace.AutoFlush
  parent: System.Diagnostics.Trace
  isExternal: false
  name: AutoFlush
  nameWithType: Trace.AutoFlush
  fullName: System.Diagnostics.Trace.AutoFlush
- uid: System.Diagnostics.Trace.Close
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Close()
  nameWithType: Trace.Close()
  fullName: System.Diagnostics.Trace.Close()
- uid: System.Diagnostics.Trace.CorrelationManager
  parent: System.Diagnostics.Trace
  isExternal: false
  name: CorrelationManager
  nameWithType: Trace.CorrelationManager
  fullName: System.Diagnostics.Trace.CorrelationManager
- uid: System.Diagnostics.CorrelationManager
  parent: System.Diagnostics
  isExternal: false
  name: CorrelationManager
  nameWithType: CorrelationManager
  fullName: System.Diagnostics.CorrelationManager
- uid: System.Diagnostics.Trace.Fail(System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Fail(String)
  nameWithType: Trace.Fail(String)
  fullName: System.Diagnostics.Trace.Fail(String)
- uid: System.Diagnostics.Trace.Fail(System.String,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Fail(String,String)
  nameWithType: Trace.Fail(String,String)
  fullName: System.Diagnostics.Trace.Fail(String,String)
- uid: System.Diagnostics.Trace.Flush
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Flush()
  nameWithType: Trace.Flush()
  fullName: System.Diagnostics.Trace.Flush()
- uid: System.Diagnostics.Trace.Indent
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Indent()
  nameWithType: Trace.Indent()
  fullName: System.Diagnostics.Trace.Indent()
- uid: System.Diagnostics.Trace.IndentLevel
  parent: System.Diagnostics.Trace
  isExternal: false
  name: IndentLevel
  nameWithType: Trace.IndentLevel
  fullName: System.Diagnostics.Trace.IndentLevel
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.Trace.IndentSize
  parent: System.Diagnostics.Trace
  isExternal: false
  name: IndentSize
  nameWithType: Trace.IndentSize
  fullName: System.Diagnostics.Trace.IndentSize
- uid: System.Diagnostics.Trace.Listeners
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Listeners
  nameWithType: Trace.Listeners
  fullName: System.Diagnostics.Trace.Listeners
- uid: System.Diagnostics.TraceListenerCollection
  parent: System.Diagnostics
  isExternal: false
  name: TraceListenerCollection
  nameWithType: TraceListenerCollection
  fullName: System.Diagnostics.TraceListenerCollection
- uid: System.Diagnostics.Trace.Refresh
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Refresh()
  nameWithType: Trace.Refresh()
  fullName: System.Diagnostics.Trace.Refresh()
- uid: System.Diagnostics.Trace.TraceError(System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceError(String)
  nameWithType: Trace.TraceError(String)
  fullName: System.Diagnostics.Trace.TraceError(String)
- uid: System.Diagnostics.Trace.TraceError(System.String,System.Object[])
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceError(String,Object[])
  nameWithType: Trace.TraceError(String,Object[])
  fullName: System.Diagnostics.Trace.TraceError(String,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.Trace.TraceInformation(System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceInformation(String)
  nameWithType: Trace.TraceInformation(String)
  fullName: System.Diagnostics.Trace.TraceInformation(String)
- uid: System.Diagnostics.Trace.TraceInformation(System.String,System.Object[])
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceInformation(String,Object[])
  nameWithType: Trace.TraceInformation(String,Object[])
  fullName: System.Diagnostics.Trace.TraceInformation(String,Object[])
- uid: System.Diagnostics.Trace.TraceWarning(System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceWarning(String)
  nameWithType: Trace.TraceWarning(String)
  fullName: System.Diagnostics.Trace.TraceWarning(String)
- uid: System.Diagnostics.Trace.TraceWarning(System.String,System.Object[])
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceWarning(String,Object[])
  nameWithType: Trace.TraceWarning(String,Object[])
  fullName: System.Diagnostics.Trace.TraceWarning(String,Object[])
- uid: System.Diagnostics.Trace.Unindent
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Unindent()
  nameWithType: Trace.Unindent()
  fullName: System.Diagnostics.Trace.Unindent()
- uid: System.Diagnostics.Trace.UseGlobalLock
  parent: System.Diagnostics.Trace
  isExternal: false
  name: UseGlobalLock
  nameWithType: Trace.UseGlobalLock
  fullName: System.Diagnostics.Trace.UseGlobalLock
- uid: System.Diagnostics.Trace.Write(System.Object)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Write(Object)
  nameWithType: Trace.Write(Object)
  fullName: System.Diagnostics.Trace.Write(Object)
- uid: System.Diagnostics.Trace.Write(System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Write(String)
  nameWithType: Trace.Write(String)
  fullName: System.Diagnostics.Trace.Write(String)
- uid: System.Diagnostics.Trace.Write(System.Object,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Write(Object,String)
  nameWithType: Trace.Write(Object,String)
  fullName: System.Diagnostics.Trace.Write(Object,String)
- uid: System.Diagnostics.Trace.Write(System.String,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Write(String,String)
  nameWithType: Trace.Write(String,String)
  fullName: System.Diagnostics.Trace.Write(String,String)
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteIf(Boolean,Object)
  nameWithType: Trace.WriteIf(Boolean,Object)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,Object)
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteIf(Boolean,String)
  nameWithType: Trace.WriteIf(Boolean,String)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,String)
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteIf(Boolean,Object,String)
  nameWithType: Trace.WriteIf(Boolean,Object,String)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,Object,String)
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.String,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteIf(Boolean,String,String)
  nameWithType: Trace.WriteIf(Boolean,String,String)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,String,String)
- uid: System.Diagnostics.Trace.WriteLine(System.Object)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLine(Object)
  nameWithType: Trace.WriteLine(Object)
  fullName: System.Diagnostics.Trace.WriteLine(Object)
- uid: System.Diagnostics.Trace.WriteLine(System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLine(String)
  nameWithType: Trace.WriteLine(String)
  fullName: System.Diagnostics.Trace.WriteLine(String)
- uid: System.Diagnostics.Trace.WriteLine(System.Object,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLine(Object,String)
  nameWithType: Trace.WriteLine(Object,String)
  fullName: System.Diagnostics.Trace.WriteLine(Object,String)
- uid: System.Diagnostics.Trace.WriteLine(System.String,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLine(String,String)
  nameWithType: Trace.WriteLine(String,String)
  fullName: System.Diagnostics.Trace.WriteLine(String,String)
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLineIf(Boolean,Object)
  nameWithType: Trace.WriteLineIf(Boolean,Object)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,Object)
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLineIf(Boolean,String)
  nameWithType: Trace.WriteLineIf(Boolean,String)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,String)
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLineIf(Boolean,Object,String)
  nameWithType: Trace.WriteLineIf(Boolean,Object,String)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,Object,String)
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLineIf(Boolean,String,String)
  nameWithType: Trace.WriteLineIf(Boolean,String,String)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,String,String)
- uid: System.Diagnostics.Trace.Assert*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Assert
  nameWithType: Trace.Assert
- uid: System.Diagnostics.Trace.AutoFlush*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: AutoFlush
  nameWithType: Trace.AutoFlush
- uid: System.Diagnostics.Trace.Close*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Close
  nameWithType: Trace.Close
- uid: System.Diagnostics.Trace.CorrelationManager*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: CorrelationManager
  nameWithType: Trace.CorrelationManager
- uid: System.Diagnostics.Trace.Fail*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Fail
  nameWithType: Trace.Fail
- uid: System.Diagnostics.Trace.Flush*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Flush
  nameWithType: Trace.Flush
- uid: System.Diagnostics.Trace.Indent*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Indent
  nameWithType: Trace.Indent
- uid: System.Diagnostics.Trace.IndentLevel*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: IndentLevel
  nameWithType: Trace.IndentLevel
- uid: System.Diagnostics.Trace.IndentSize*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: IndentSize
  nameWithType: Trace.IndentSize
- uid: System.Diagnostics.Trace.Listeners*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Listeners
  nameWithType: Trace.Listeners
- uid: System.Diagnostics.Trace.Refresh*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Refresh
  nameWithType: Trace.Refresh
- uid: System.Diagnostics.Trace.TraceError*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceError
  nameWithType: Trace.TraceError
- uid: System.Diagnostics.Trace.TraceInformation*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceInformation
  nameWithType: Trace.TraceInformation
- uid: System.Diagnostics.Trace.TraceWarning*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceWarning
  nameWithType: Trace.TraceWarning
- uid: System.Diagnostics.Trace.Unindent*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Unindent
  nameWithType: Trace.Unindent
- uid: System.Diagnostics.Trace.UseGlobalLock*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: UseGlobalLock
  nameWithType: Trace.UseGlobalLock
- uid: System.Diagnostics.Trace.Write*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Write
  nameWithType: Trace.Write
- uid: System.Diagnostics.Trace.WriteIf*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteIf
  nameWithType: Trace.WriteIf
- uid: System.Diagnostics.Trace.WriteLine*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLine
  nameWithType: Trace.WriteLine
- uid: System.Diagnostics.Trace.WriteLineIf*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLineIf
  nameWithType: Trace.WriteLineIf
