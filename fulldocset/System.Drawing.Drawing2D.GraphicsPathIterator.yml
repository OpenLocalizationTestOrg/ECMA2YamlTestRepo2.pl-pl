### YamlMime:ManagedReference
items:
- uid: System.Drawing.Drawing2D.GraphicsPathIterator
  id: GraphicsPathIterator
  children:
  - System.Drawing.Drawing2D.GraphicsPathIterator.#ctor(System.Drawing.Drawing2D.GraphicsPath)
  - System.Drawing.Drawing2D.GraphicsPathIterator.CopyData(System.Drawing.PointF[]@,System.Byte[]@,System.Int32,System.Int32)
  - System.Drawing.Drawing2D.GraphicsPathIterator.Count
  - System.Drawing.Drawing2D.GraphicsPathIterator.Dispose
  - System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate(System.Drawing.PointF[]@,System.Byte[]@)
  - System.Drawing.Drawing2D.GraphicsPathIterator.Finalize
  - System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve
  - System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)
  - System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Int32@,System.Int32@)
  - System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType(System.Byte@,System.Int32@,System.Int32@)
  - System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean@)
  - System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Int32@,System.Int32@,System.Boolean@)
  - System.Drawing.Drawing2D.GraphicsPathIterator.Rewind
  - System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount
  langs:
  - csharp
  name: GraphicsPathIterator
  nameWithType: GraphicsPathIterator
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator
  type: Class
  summary: "Zapewnia możliwość iterację podrzędne w <xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref> i testowanie typów kształtów podrzędnej. Ta klasa nie może być dziedziczona."
  syntax:
    content: 'public sealed class GraphicsPathIterator : MarshalByRefObject, IDisposable'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.#ctor(System.Drawing.Drawing2D.GraphicsPath)
  id: '#ctor(System.Drawing.Drawing2D.GraphicsPath)'
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: GraphicsPathIterator(GraphicsPath)
  nameWithType: GraphicsPathIterator.GraphicsPathIterator(GraphicsPath)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.GraphicsPathIterator(GraphicsPath)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Drawing.Drawing2D.GraphicsPathIterator&quot;> </xref> klasy z określonym <xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref> obiektu."
  syntax:
    content: public GraphicsPathIterator (System.Drawing.Drawing2D.GraphicsPath path);
    parameters:
    - id: path
      type: System.Drawing.Drawing2D.GraphicsPath
      description: "<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref> Obiektu, dla którego ma zostać zainicjowana ta klasa pomocy."
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.CopyData(System.Drawing.PointF[]@,System.Byte[]@,System.Int32,System.Int32)
  id: CopyData(System.Drawing.PointF[]@,System.Byte[]@,System.Int32,System.Int32)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: CopyData(PointF[],Byte[],Int32,Int32)
  nameWithType: GraphicsPathIterator.CopyData(PointF[],Byte[],Int32,Int32)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.CopyData(PointF[],Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Kopie <> </> *> właściwości i <> </> *> tablice właściwości skojarzonego <xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref> do dwóch określonych tablic."
  remarks: "Użyj `startIndex` i `endIndex` parametrów, aby skopiować dane ścieżki określonego zakresu."
  example:
  - "The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a graphics path.  \n  \n-   Populates it with several primitives and some markers.  \n  \n-   Lists the path data on the left side of the screen.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> and rewinds it.  \n  \n-   Increments the path data index to the second marker.  \n  \n-   Calls the CopyData method to copy the path data contained between the start and end indexes to the points and types arrays.  \n  \n-   Lists this copied data on the right side of the screen.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/add/codesnippet/visualbasic/b1ea0b64-123f-4dcb-86c3-_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/add/codesnippet/cpp/b1ea0b64-123f-4dcb-86c3-_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/add/codesnippet/csharp/b1ea0b64-123f-4dcb-86c3-_1.cs)]"
  syntax:
    content: public int CopyData (ref System.Drawing.PointF[] points, ref byte[] types, int startIndex, int endIndex);
    parameters:
    - id: points
      type: System.Drawing.PointF[]
      description: "Po powrocie, zawiera tablicę <xref href=&quot;System.Drawing.PointF&quot;> </xref> struktur, które reprezentują punkty w ścieżce."
    - id: types
      type: System.Byte[]
      description: "Po powrocie zawiera tablicę bajtów reprezentujący typy punktów w ścieżce."
    - id: startIndex
      type: System.Int32
      description: "Określa indeks początkowy tablic."
    - id: endIndex
      type: System.Int32
      description: "Określa końcowy indeks tablic."
    return:
      type: System.Int32
      description: "Liczba punktów skopiowane."
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.CopyData*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Count
  id: Count
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: Count
  nameWithType: GraphicsPathIterator.Count
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Count
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Pobiera liczbę punktów, które w ścieżce."
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "Liczba punktów w ścieżce."
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Dispose
  id: Dispose
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: Dispose()
  nameWithType: GraphicsPathIterator.Dispose()
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Dispose()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Zwalnia wszelkie zasoby używane przez to <xref href=&quot;System.Drawing.Drawing2D.GraphicsPathIterator&quot;> </xref> obiektu."
  remarks: "Wywoływanie `Dispose` umożliwia zasoby używane przez to <xref:System.Drawing.Drawing2D.GraphicsPathIterator>obiektu odbiorczego do innych celów.</xref:System.Drawing.Drawing2D.GraphicsPathIterator>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate(System.Drawing.PointF[]@,System.Byte[]@)
  id: Enumerate(System.Drawing.PointF[]@,System.Byte[]@)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: Enumerate(PointF[],Byte[])
  nameWithType: GraphicsPathIterator.Enumerate(PointF[],Byte[])
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate(PointF[],Byte[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Kopie <> </> *> właściwości i <> </> *> tablice właściwości skojarzonego <xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref> do dwóch określonych tablic."
  remarks: ''
  example:
  - "The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a graphics path.  \n  \n-   Populates it with several primitives and some markers.  \n  \n-   Lists the path data on the left side of the screen.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> and rewinds it.  \n  \n-   Increments the path data index to the second marker.  \n  \n-   Calls the Enumerate method to copy the path data to the `points` and `types` arrays.  \n  \n-   Lists this copied data on the right side of the screen.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/add/codesnippet/visualbasic/5dbb8a2f-b3c5-4d23-b81d-_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/add/codesnippet/cpp/5dbb8a2f-b3c5-4d23-b81d-_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/add/codesnippet/csharp/5dbb8a2f-b3c5-4d23-b81d-_1.cs)]"
  syntax:
    content: public int Enumerate (ref System.Drawing.PointF[] points, ref byte[] types);
    parameters:
    - id: points
      type: System.Drawing.PointF[]
      description: "Po powrocie, zawiera tablicę <xref href=&quot;System.Drawing.PointF&quot;> </xref> struktur, które reprezentują punkty w ścieżce."
    - id: types
      type: System.Byte[]
      description: "Po powrocie zawiera tablicę bajtów reprezentujący typy punktów w ścieżce."
    return:
      type: System.Int32
      description: "Liczba punktów skopiowane."
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Finalize
  id: Finalize
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: Finalize()
  nameWithType: GraphicsPathIterator.Finalize()
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Finalize()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Umożliwia obiektu, próby zwolnienia zasobów i wykonywać inne operacje oczyszczania, przed jego jest odzyskana przez wyrzucanie elementów bezużytecznych."
  syntax:
    content: ~GraphicsPathIterator ();
    parameters: []
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve
  id: HasCurve
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: HasCurve()
  nameWithType: GraphicsPathIterator.HasCurve()
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Wskazuje, czy ścieżka jest skojarzony z tym <xref href=&quot;System.Drawing.Drawing2D.GraphicsPathIterator&quot;> </xref> zawiera krzywą."
  remarks: "Krzywe wszystkie ścieżki są przechowywane jako sekwencji krzywych Beziera. Na przykład podczas dodawania elipsy do ścieżki, określasz lewego górnego rogu, szerokość i wysokość prostokąta obwiedni elipsy. Te numery (lewego górnego rogu, szerokość i wysokość) nie są przechowywane w ścieżce; Zamiast tego; elipsy jest konwertowana na sekwencję cztery krzywych Beziera. Ścieżka sklepów punktów końcowych i punkty kontrolne tych krzywych Beziera.       Ścieżka przechowuje tablicy punktów danych, z których każdy należy do wiersza lub krzywej Beziera. Jeśli niektóre punkty w tablicy należą do krzywych Beziera, a następnie zwraca HasCurve `true`. Jeśli wszystkie punkty w tablicy należą do wierszy, a następnie zwraca HasCurve `false`.       Niektóre metody spłaszczanie ścieżki, co oznacza, że wszystkie krzywych w ścieżce są konwertowane na sekwencji wierszy. Po została spłaszczona ścieżki, zawsze zwróci HasCurve `false`. Wywoływanie <xref:System.Drawing.Drawing2D.GraphicsPath.Flatten%2A>, <xref:System.Drawing.Drawing2D.GraphicsPath.Widen%2A>, lub <xref:System.Drawing.Drawing2D.GraphicsPath.Warp%2A>metody <xref:System.Drawing.Drawing2D.GraphicsPath>klasy uprości ścieżką</xref:System.Drawing.Drawing2D.GraphicsPath> </xref:System.Drawing.Drawing2D.GraphicsPath.Warp%2A> </xref:System.Drawing.Drawing2D.GraphicsPath.Widen%2A> </xref:System.Drawing.Drawing2D.GraphicsPath.Flatten%2A>"
  example:
  - "The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object, `myPath`.  \n  \n-   Adds three lines, a rectangle, and an ellipse.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> object for `myPath`.  \n  \n-   Tests to see if the current path `myPath` contains a curve.  \n  \n-   Shows the result of the test in a message box.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/add/codesnippet/visualbasic/m-system.drawing.drawing_17_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/add/codesnippet/cpp/m-system.drawing.drawing_17_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/add/codesnippet/csharp/m-system.drawing.drawing_17_1.cs)]"
  syntax:
    content: public bool HasCurve ();
    parameters: []
    return:
      type: System.Boolean
      description: "Ta metoda zwraca <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> Jeśli podrzędną bieżącej zawiera krzywej; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)
  id: NextMarker(System.Drawing.Drawing2D.GraphicsPath)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: NextMarker(GraphicsPath)
  nameWithType: GraphicsPathIterator.NextMarker(GraphicsPath)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(GraphicsPath)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "To <xref href=&quot;System.Drawing.Drawing2D.GraphicsPathIterator&quot;> </xref> obiekt ma <xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref> obiekt skojarzony z nim. Metoda NextMarker zwiększa skojarzone <xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref> do następnego znacznika w jego ścieżkę i kopie wszystkich punktów zawarte między bieżący znacznik i dalej znacznika (lub końca ścieżki) do drugiej <xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref> obiekt przekazany do parametru."
  remarks: "Użyj <xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A>metody można ustawić znaczników na ścieżki.</xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> Znaczniki są używane do tworzenia grup podrzędne. Co najmniej jeden podrzędne może być między dwoma znacznikami."
  example:
  - "The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object.  \n  \n-   Adds three lines, a rectangle, an ellipse, and two markers.  \n  \n-   Lists the values of all the path's points to the left side of the screen.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> object.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object, `myPathSection`, to receive copied points.  \n  \n-   Calls the NextMarker method, which iterates to the first marker and copies all the points contained between that marker and the next to `myPathSection`.  \n  \n-   Returns the number of points copied to `markerPoints`.  \n  \n-   Lists the marker number (the first marker) and number of points it contains to the right side of the screen.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/add/codesnippet/visualbasic/8b47b275-716e-4cd3-9f07-_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/add/codesnippet/cpp/8b47b275-716e-4cd3-9f07-_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/add/codesnippet/csharp/8b47b275-716e-4cd3-9f07-_1.cs)]"
  syntax:
    content: public int NextMarker (System.Drawing.Drawing2D.GraphicsPath path);
    parameters:
    - id: path
      type: System.Drawing.Drawing2D.GraphicsPath
      description: "<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref> Obiekt, do którego zostaną skopiowane punkty."
    return:
      type: System.Int32
      description: "Liczba punktów między znacznika tej i następnych."
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Int32@,System.Int32@)
  id: NextMarker(System.Int32@,System.Int32@)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: NextMarker(Int32,Int32)
  nameWithType: GraphicsPathIterator.NextMarker(Int32,Int32)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(Int32,Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Zwiększa <xref href=&quot;System.Drawing.Drawing2D.GraphicsPathIterator&quot;> </xref> do następnego znacznika w ścieżce i zwraca indeksów rozpoczęcie i zakończenie na parametry [out]."
  remarks: "Użyj <xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A>metody można ustawić znaczników na ścieżki.</xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> Znaczniki są używane do tworzenia grup podrzędne. Co najmniej jeden podrzędne może być między dwoma znacznikami."
  example:
  - "The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object.  \n  \n-   Adds three lines, a rectangle, and an ellipse ¾ with markers between each.  \n  \n-   Draws the values for the array of points to the screen.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> object.  \n  \n-   Calls the NextMarker method.  \n  \n-   Uses the values returned from the iterative calls to NextMarker to draw the start and stop points for each marker to the screen.  \n  \n-   Draws the value for the total number of points to the screen.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/add/codesnippet/visualbasic/2a36a4b2-3946-4c96-a406-_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/add/codesnippet/cpp/2a36a4b2-3946-4c96-a406-_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/add/codesnippet/csharp/2a36a4b2-3946-4c96-a406-_1.cs)]"
  syntax:
    content: public int NextMarker (out int startIndex, out int endIndex);
    parameters:
    - id: startIndex
      type: System.Int32
      description: '[out] Odwołanie do liczby całkowitej dostarczony do tego parametru odbiera indeks punktu, która rozpoczyna się jej ścieżka podrzędna.'
    - id: endIndex
      type: System.Int32
      description: '[out] Odwołanie do liczby całkowitej dostarczony do tego parametru odbiera indeks punktu, który kończy się podrzędną, do którego `startIndex` punktów.'
    return:
      type: System.Int32
      description: "Liczba punktów między znacznika tej i następnych."
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType(System.Byte@,System.Int32@,System.Int32@)
  id: NextPathType(System.Byte@,System.Int32@,System.Int32@)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: NextPathType(Byte,Int32,Int32)
  nameWithType: GraphicsPathIterator.NextPathType(Byte,Int32,Int32)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType(Byte,Int32,Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Pobiera początkowy indeksu i końcową indeksu następnej grupy danych wskazuje, mające tego samego typu."
  remarks: ''
  example:
  - "The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object.  \n  \n-   Adds three lines, a rectangle, and an ellipse.  \n  \n-   Lists the values of all the points to the left side of the screen.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> and rewinds it.  \n  \n-   In a `for` loop, iterates through the points using the NextPathType and NextPathType methods.  \n  \n-   Uses the values returned from the iterative calls to list the subpath number, the number of points in it, and the type of the path points to the right side of the screen.  \n  \n-   Displays the value for the total number of points to the screen.  \n  \n Note that `ListPathPoints` is a helper function that separates most (not all) of the display code from the graphics path code.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/add/codesnippet/visualbasic/95680980-3c12-42ae-ac98-_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/add/codesnippet/cpp/95680980-3c12-42ae-ac98-_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/add/codesnippet/csharp/95680980-3c12-42ae-ac98-_1.cs)]"
  syntax:
    content: public int NextPathType (out byte pathType, out int startIndex, out int endIndex);
    parameters:
    - id: pathType
      type: System.Byte
      description: '[out] Odbiera typ punktu współużytkowane przez wszystkie punkty w grupie. Możliwe typy mogą być pobierane z <xref href=&quot;System.Drawing.Drawing2D.PathPointType&quot;> </xref> wyliczenia.'
    - id: startIndex
      type: System.Int32
      description: '[out] Odbiera indeks początkowy grupa punktów.'
    - id: endIndex
      type: System.Int32
      description: '[out] Odbiera końcową indeksu grupy punktów.'
    return:
      type: System.Int32
      description: "Ta metoda zwraca liczbę punktów danych w grupie. Jeśli nie ma żadnych więcej grup w ścieżce, ta metoda zwraca wartość 0."
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean@)
  id: NextSubpath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean@)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: NextSubpath(GraphicsPath,Boolean)
  nameWithType: GraphicsPathIterator.NextSubpath(GraphicsPath,Boolean)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(GraphicsPath,Boolean)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Pobiera następny rysunek (podrzędną) ze skojarzoną ścieżkę tego <xref href=&quot;System.Drawing.Drawing2D.GraphicsPathIterator&quot;> </xref>."
  remarks: ''
  example:
  - "The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object.  \n  \n-   Adds three lines, a rectangle, an ellipse, and two markers.  \n  \n-   Lists the values of all the path's points to the left side of the screen.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> object.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object, `myPathSection`, to receive copied points.  \n  \n-   Calls the NextSubpath method, which iterates to the third subpath (figure) and copies all the points contained in that subpath to the `myPathSection` path, and also returns the number of points copied to `subpathPoints`.  \n  \n-   Lists the subpath number and number of points it contains to the right side of the screen.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/add/codesnippet/visualbasic/fe78f5d8-9a93-4fb0-b017-_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/add/codesnippet/cpp/fe78f5d8-9a93-4fb0-b017-_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/add/codesnippet/csharp/fe78f5d8-9a93-4fb0-b017-_1.cs)]"
  syntax:
    content: public int NextSubpath (System.Drawing.Drawing2D.GraphicsPath path, out bool isClosed);
    parameters:
    - id: path
      type: System.Drawing.Drawing2D.GraphicsPath
      description: "A <xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref> to ma swoje dane punkty Ustaw odpowiadający punktów danych pobranej wartości (podrzędną) to iteratora."
    - id: isClosed
      type: System.Boolean
      description: '[out] Wskazuje, czy bieżący podrzędną jest zamknięty. Jest <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> Jeśli obszar, jeśli liczba jest zamknięty, w przeciwnym razie jest <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.'
    return:
      type: System.Int32
      description: "Liczba punktów danych na rysunku pobrane (podrzędną). Jeśli nie ma żadnych więcej wartości do pobrania, zwracana jest wartość zero."
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Int32@,System.Int32@,System.Boolean@)
  id: NextSubpath(System.Int32@,System.Int32@,System.Boolean@)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: NextSubpath(Int32,Int32,Boolean)
  nameWithType: GraphicsPathIterator.NextSubpath(Int32,Int32,Boolean)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(Int32,Int32,Boolean)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Przenosi <xref href=&quot;System.Drawing.Drawing2D.GraphicsPathIterator&quot;> </xref> do następnego podrzędną w ścieżce. Indeks początkowy i końcowy indeks następnego podrzędną znajdują się w parametry [out]."
  remarks: ''
  example:
  - "The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object.  \n  \n-   Adds three lines, a rectangle, and an ellipse.  \n  \n-   Draws the values for the array of points to the screen.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> object.  \n  \n-   Calls the NextSubpath method.  \n  \n-   Uses the values returned from the iterative calls to NextSubpath to draw the start and stop values for each subpath to the screen.  \n  \n-   Draws the value for the total number of subpaths to the screen.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/add/codesnippet/visualbasic/63165689-53f3-4b43-b800-_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/add/codesnippet/cpp/63165689-53f3-4b43-b800-_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/add/codesnippet/csharp/63165689-53f3-4b43-b800-_1.cs)]"
  syntax:
    content: public int NextSubpath (out int startIndex, out int endIndex, out bool isClosed);
    parameters:
    - id: startIndex
      type: System.Int32
      description: '[out] Odbiera indeks początkowy dalej podrzędną.'
    - id: endIndex
      type: System.Int32
      description: '[out] Odbiera końcowy indeks następnego podrzędną.'
    - id: isClosed
      type: System.Boolean
      description: '[out] Wskazuje, czy ścieżka podrzędna jest zamknięty.'
    return:
      type: System.Int32
      description: "Liczba ścieżek podrzędnych w <xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref> obiektu."
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Rewind
  id: Rewind
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: Rewind()
  nameWithType: GraphicsPathIterator.Rewind()
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Rewind()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Przewija do tyłu to <xref href=&quot;System.Drawing.Drawing2D.GraphicsPathIterator&quot;> </xref> na początku ścieżki skojarzone."
  remarks: "Przy pierwszym wywołaniu <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A>metody iteracyjne, pobiera pierwszy rysunek (podrzędną) z tym iteratora skojarzone ścieżki.</xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> Drugim, pobiera drugi rysunek i tak dalej. Po wywołaniu metody do tyłu ciąg rozpoczyna się za pośrednictwem; oznacza to po wywołaniu metody do tyłu następne wywołanie <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A>pobiera pierwszy rysunek w ścieżce</xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A>i <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A>metody zachowują się podobnie.</xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A> </xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A>"
  syntax:
    content: public void Rewind ();
    parameters: []
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.Rewind*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount
  id: SubpathCount
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: SubpathCount
  nameWithType: GraphicsPathIterator.SubpathCount
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Pobiera liczbę podrzędne w ścieżce."
  syntax:
    content: public int SubpathCount { get; }
    return:
      type: System.Int32
      description: "Liczba ścieżek podrzędnych w ścieżce."
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.#ctor(System.Drawing.Drawing2D.GraphicsPath)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: GraphicsPathIterator(GraphicsPath)
  nameWithType: GraphicsPathIterator.GraphicsPathIterator(GraphicsPath)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.GraphicsPathIterator(GraphicsPath)
- uid: System.Drawing.Drawing2D.GraphicsPath
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: GraphicsPath
  nameWithType: GraphicsPath
  fullName: System.Drawing.Drawing2D.GraphicsPath
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.CopyData(System.Drawing.PointF[]@,System.Byte[]@,System.Int32,System.Int32)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: CopyData(PointF[],Byte[],Int32,Int32)
  nameWithType: GraphicsPathIterator.CopyData(PointF[],Byte[],Int32,Int32)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.CopyData(PointF[],Byte[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Drawing.PointF[]
  parent: System.Drawing
  isExternal: false
  name: PointF
  nameWithType: PointF
  fullName: System.Drawing.PointF[]
  spec.csharp:
  - uid: System.Drawing.PointF
    name: PointF
    nameWithType: PointF
    fullName: PointF[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Count
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: Count
  nameWithType: GraphicsPathIterator.Count
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Count
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Dispose
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: Dispose()
  nameWithType: GraphicsPathIterator.Dispose()
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Dispose()
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate(System.Drawing.PointF[]@,System.Byte[]@)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: Enumerate(PointF[],Byte[])
  nameWithType: GraphicsPathIterator.Enumerate(PointF[],Byte[])
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate(PointF[],Byte[])
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Finalize
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: Finalize()
  nameWithType: GraphicsPathIterator.Finalize()
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Finalize()
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: HasCurve()
  nameWithType: GraphicsPathIterator.HasCurve()
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: NextMarker(GraphicsPath)
  nameWithType: GraphicsPathIterator.NextMarker(GraphicsPath)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(GraphicsPath)
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Int32@,System.Int32@)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: NextMarker(Int32,Int32)
  nameWithType: GraphicsPathIterator.NextMarker(Int32,Int32)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(Int32,Int32)
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType(System.Byte@,System.Int32@,System.Int32@)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: NextPathType(Byte,Int32,Int32)
  nameWithType: GraphicsPathIterator.NextPathType(Byte,Int32,Int32)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType(Byte,Int32,Int32)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean@)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: NextSubpath(GraphicsPath,Boolean)
  nameWithType: GraphicsPathIterator.NextSubpath(GraphicsPath,Boolean)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(GraphicsPath,Boolean)
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Int32@,System.Int32@,System.Boolean@)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: NextSubpath(Int32,Int32,Boolean)
  nameWithType: GraphicsPathIterator.NextSubpath(Int32,Int32,Boolean)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(Int32,Int32,Boolean)
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Rewind
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: Rewind()
  nameWithType: GraphicsPathIterator.Rewind()
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Rewind()
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: SubpathCount
  nameWithType: GraphicsPathIterator.SubpathCount
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.#ctor*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: GraphicsPathIterator
  nameWithType: GraphicsPathIterator.GraphicsPathIterator
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.CopyData*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: CopyData
  nameWithType: GraphicsPathIterator.CopyData
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Count*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: Count
  nameWithType: GraphicsPathIterator.Count
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Dispose*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: Dispose
  nameWithType: GraphicsPathIterator.Dispose
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: Enumerate
  nameWithType: GraphicsPathIterator.Enumerate
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Finalize*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: Finalize
  nameWithType: GraphicsPathIterator.Finalize
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: HasCurve
  nameWithType: GraphicsPathIterator.HasCurve
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: NextMarker
  nameWithType: GraphicsPathIterator.NextMarker
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: NextPathType
  nameWithType: GraphicsPathIterator.NextPathType
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: NextSubpath
  nameWithType: GraphicsPathIterator.NextSubpath
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Rewind*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: Rewind
  nameWithType: GraphicsPathIterator.Rewind
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: SubpathCount
  nameWithType: GraphicsPathIterator.SubpathCount
