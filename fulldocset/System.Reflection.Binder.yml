### YamlMime:ManagedReference
items:
- uid: System.Reflection.Binder
  id: Binder
  children:
  - System.Reflection.Binder.#ctor
  - System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)
  - System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)
  - System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)
  - System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)
  - System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])
  langs:
  - csharp
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
  type: Class
  summary: "Wybrany element członkowski z listy kandydatów i wykonuje konwersji typu z typu rzeczywisty argument do formalnego argumentu typu."
  remarks: "Implementacje klasy Binder są używane przez metody takie jak <xref:System.Type.InvokeMember%2A?displayProperty=fullName>, które wybierze z zestaw elementów członkowskich możliwe do wykonania, na podstawie zestawu typy parametrów i wartości argumentów; <xref:System.Type.GetMethod%2A?displayProperty=fullName>, który wybiera metody, w zależności od typów parametrów; i tak dalej.</xref:System.Type.GetMethod%2A?displayProperty=fullName> </xref:System.Type.InvokeMember%2A?displayProperty=fullName>       Domyślna implementacja klasy integratora jest udostępniany przez <xref:System.Type.DefaultBinder%2A?displayProperty=fullName>Właściwości.</xref:System.Type.DefaultBinder%2A?displayProperty=fullName>"
  example:
  - "The following example implements and demonstrates all members of the `Binder` class. The private method `CanConvertFrom` finds compatible types for a given type.  \n  \n [!code-cpp[Binder_1#1](~/add/codesnippet/cpp/t-system.reflection.binder_1.cpp)]\n [!code-vb[Binder_1#1](~/add/codesnippet/visualbasic/t-system.reflection.binder_1.vb)]\n [!code-cs[Binder_1#1](~/add/codesnippet/csharp/t-system.reflection.binder_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class Binder
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Reflection.Binder.#ctor
  id: '#ctor'
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: Binder()
  nameWithType: Binder.Binder()
  fullName: System.Reflection.Binder.Binder()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Reflection.Binder&quot;> </xref> klasy."
  remarks: "Ten konstruktor jest wywoływany przez konstruktory klas pochodnych zainicjować stanu, w tym typie."
  syntax:
    content: protected Binder ();
    parameters: []
  overload: System.Reflection.Binder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)
  id: BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  nameWithType: Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  fullName: System.Reflection.Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Wybiera pola z danego zestawu pól, w oparciu o określone kryteria."
  remarks: "Jeśli `bindingAttr` nie obejmuje <xref:System.Reflection.BindingFlags?displayProperty=fullName>, domyślną implementację integratora podał <xref:System.Type.DefaultBinder%2A?displayProperty=fullName>po prostu zwraca pierwszy element `match`.</xref:System.Type.DefaultBinder%2A?displayProperty=fullName> </xref:System.Reflection.BindingFlags?displayProperty=fullName> Brak zaznaczenia to zrobić.       Ta metoda Określa wiązanie podał <xref:System.Type.InvokeMember%2A?displayProperty=fullName>.</xref:System.Type.InvokeMember%2A?displayProperty=fullName>"
  syntax:
    content: public abstract System.Reflection.FieldInfo BindToField (System.Reflection.BindingFlags bindingAttr, System.Reflection.FieldInfo[] match, object value, System.Globalization.CultureInfo culture);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Bitowe połączenie <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref> wartości."
    - id: match
      type: System.Reflection.FieldInfo[]
      description: "Zestaw pól, które nadają się do dopasowania. Na przykład, jeśli <xref href=&quot;System.Reflection.Binder&quot;> </xref> obiekt jest używany przez &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, ten parametr określa zestaw pól, które stwierdził, że odbicia możliwe jest zgodny, zwykle ponieważ mają poprawny element członkowski. Domyślna implementacja dostarczonych przez &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; zmienia kolejność tej tablicy."
    - id: value
      type: System.Object
      description: "Wartość pola używana do lokalizowania zgodnego pola."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "Wystąpienie <xref:System.Globalization.CultureInfo>umożliwiające sterowanie koercja typów danych w implementacjach integratora, które typy wymuszone.</xref:System.Globalization.CultureInfo> Jeśli `culture` jest <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, <xref:System.Globalization.CultureInfo>służy bieżącego wątku.</xref:System.Globalization.CultureInfo>       Uwaga na przykład jeśli implementację integratora umożliwia koercja wartości ciągu na typy liczbowe, ten parametr jest niezbędne przekonwertować <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> reprezentujący 1000 do <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> wartości, ponieważ 1000 jest inaczej reprezentowany przez innych kultur. Domyślny integrator nie takie wymuszeniami ciągu."
    return:
      type: System.Reflection.FieldInfo
      description: "Pole zgodne."
  overload: System.Reflection.Binder.BindToField*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "Dla domyślnego integratora <code> bindingAttr </code> obejmuje <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>, i <code> match </code> zawiera kilka pól, które są równie dobrej dopasowań dla <code> value </code>. Na przykład <code> value </code> zawiera `MyClass` obiekt, który implementuje `IMyClass` interfejsu i <code> match </code> zawiera pola typu `MyClass` i pola typu `IMyClass`."
  - type: System.MissingFieldException
    commentId: T:System.MissingFieldException
    description: "Dla domyślnego integratora <code> bindingAttr </code> obejmuje <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>, i <code> match </code> nie zawiera żadnych pól może akceptować <code> value </code>."
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "Dla domyślnego integratora <code> bindingAttr </code> obejmuje <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>, i <code> match </code> jest <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> albo być pustą tablicą.       -or-       <code>bindingAttr</code> includes <xref href=&quot;System.Reflection.BindingFlags&quot;></xref>, and <code>value</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)
  id: BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  nameWithType: Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  fullName: System.Reflection.Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Wybrana metoda do wywołania z danego zestawu metod, w oparciu o podanych argumentów."
  remarks: "Domyślny integrator uwzględnia oba parametry z wartościami i `params` tablic (`ParamArray` tablic w języku Visual Basic). W związku z tym jest możliwość znalezienia dopasowania w przypadkach, gdy `args` i `match` nie zawierają tę samą liczbę elementów.       Obiekt wiążący umożliwia klientowi mapy tablica argumentów do postaci oryginalnej, jeśli tablica argumentów ma zostać modyfikowany w zakresie przez BindToMethod. Ta możliwość ponownego mapowania umożliwia odzyskanie argumentów przez odwołanie, gdy istnieją takie argumentów. Gdy argument jest przekazywany przez nazwę obiektu wiążącego zmienia kolejność tablica argumentów. `state` Parametru przechowuje informacje o argument zmianę kolejności, umożliwiając w ten sposób obiektu wiążącego <xref:System.Reflection.Binder.ReorderArgumentArray%2A>metodę, aby zmienić kolejność tablica argumentów do postaci oryginalnej.</xref:System.Reflection.Binder.ReorderArgumentArray%2A>       Metoda BindToMethod jest używana przez <xref:System.Type.InvokeMember%2A?displayProperty=fullName>metody.</xref:System.Type.InvokeMember%2A?displayProperty=fullName>"
  syntax:
    content: public abstract System.Reflection.MethodBase BindToMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, ref object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] names, out object state);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Bitowe połączenie <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref> wartości."
    - id: match
      type: System.Reflection.MethodBase[]
      description: "Zbiór metod, które są kandydatami do dopasowania. Na przykład, jeśli <xref href=&quot;System.Reflection.Binder&quot;> </xref> obiekt jest używany przez &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, ten parametr określa zestaw metod, które stwierdził, że odbicia możliwe jest zgodny, zwykle ponieważ mają poprawny element członkowski. Domyślna implementacja dostarczonych przez &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; zmienia kolejność tej tablicy."
    - id: args
      type: System.Object[]
      description: "Argumenty, które są przekazywane w. Obiekt wiążący można zmienić kolejność argumentów w tej macierzy; na przykład domyślny integrator zmienia kolejność argumentów Jeśli `names` parametr służy do określania porządku niż pozycyjnych kolejności. Jeśli implementację integratora przekształca wynik dane typy argumentów, typy i wartości argumentów można także zmienić."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "Tablica modyfikatorów parametrów, umożliwiające powiązanie do pracy z podpisów parametru, w których typy zostały zmodyfikowane. Domyślna implementacja integrator nie korzysta z tego parametru."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "Wystąpienie <xref:System.Globalization.CultureInfo>umożliwiające sterowanie koercja typów danych w implementacjach integratora, które typy wymuszone.</xref:System.Globalization.CultureInfo> Jeśli `culture` jest <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, <xref:System.Globalization.CultureInfo>służy bieżącego wątku.</xref:System.Globalization.CultureInfo>       Uwaga na przykład jeśli implementację integratora umożliwia koercja wartości ciągu na typy liczbowe, ten parametr jest niezbędne przekonwertować <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> reprezentujący 1000 do <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> wartości, ponieważ 1000 jest inaczej reprezentowany przez innych kultur. Domyślny integrator nie takie wymuszeniami ciągu."
    - id: names
      type: System.String[]
      description: "Nazwy parametrów, należy wziąć pod uwagę podczas dopasowywania, jeśli parametr nazwy lub <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Jeśli argumenty są traktowane jako całkowicie pozycyjnych. Na przykład nazwy parametru należy użyć, jeśli nie podano argumentów w kolejności pozycyjnych."
    - id: state
      type: System.Object
      description: "Po powrocie z metody `state` zawiera obiekt dostarczane przez obiekt wiążący, który śledzi zmiany kolejności argumentu. Obiekt wiążący tworzy tego obiektu, a obiekt wiążący jest jedynym konsumenta tego obiektu. Jeśli `state` nie jest <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> podczas <xref uid=&quot;langword_csharp_BindToMethod&quot; name=&quot;BindToMethod&quot; href=&quot;&quot;> </xref> zwraca, trzeba przekazać `state` do <xref:System.Reflection.Binder.ReorderArgumentArray*>metodę, jeśli chcesz przywrócić `args` do jego oryginalnej kolejność, na przykład, dzięki czemu można pobrać wartości <xref uid=&quot;langword_csharp_ref&quot; name=&quot;ref&quot; href=&quot;&quot;> </xref> parametrów (<xref uid=&quot;langword_csharp_ByRef&quot; name=&quot;ByRef&quot; href=&quot;&quot;> </xref> parametrów w języku Visual Basic).</xref:System.Reflection.Binder.ReorderArgumentArray*>"
    return:
      type: System.Reflection.MethodBase
      description: "Zgodną metodę."
  overload: System.Reflection.Binder.BindToMethod*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "Dla domyślnego integratora <code> match </code> zawiera wiele metod, które są równie dobrej dopasowań dla <code> args </code>. Na przykład <code> args </code> zawiera `MyClass` obiekt, który implementuje `IMyClass` interfejsu i <code> match </code> zawiera metodę, która przyjmuje `MyClass` i metody, która przyjmuje `IMyClass`."
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: "Dla domyślnego integratora <code> match </code> zawiera żadnych metod, które mogą akceptować argumenty podane w <code> args </code>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Dla domyślnego integratora <code> match </code> jest <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> albo być pustą tablicą."
  platform:
  - net462
- uid: System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)
  id: ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: ChangeType(Object,Type,CultureInfo)
  nameWithType: Binder.ChangeType(Object,Type,CultureInfo)
  fullName: System.Reflection.Binder.ChangeType(Object,Type,CultureInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Zmienia typ danej <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> do danego <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref>."
  remarks: "Odbicie modele wspólny system typów reguł ułatwień dostępu. Na przykład jeśli element wywołujący jest w tym samym zestawie, obiekt wywołujący nie potrzebuje specjalne uprawnienia dla wewnętrzne elementy członkowskie. W przeciwnym razie wywołujący musi <xref:System.Security.Permissions.ReflectionPermission>.</xref:System.Security.Permissions.ReflectionPermission> Jest to zgodne z wyszukiwania elementów członkowskich, które są chronione, prywatne i tak dalej.       Ogólną zasadą jest to, że `ChangeType` należy wykonywać tylko rozszerzanie wymuszeniami, które nigdy nie spowodować utratę danych. Przykład rozszerzającą koercja jest coercing wartość całkowita 32-bitowa wartość całkowita 64-bitowych jest. Jest to różnią się od zawężającej koercja, która może spowodować utratę danych. Przykład zawężającej koercja jest coercing całkowita 64-bitowego do 32-bitowej podpisanej liczby całkowitej.       W poniższej tabeli wymieniono wymuszeniami wykonywany domyślnie `ChangeType`.      | Typ źródła | Typ docelowy |   |-----------------|-----------------|   | Dowolnego typu | Jego typ podstawowy. |   | Dowolnego typu | Implementuje interfejs. |   | Char | UInt16, UInt32, Int32, UInt64, Int64, Single, Double |   | Bajt | Char, UInt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double |   | SByte | Int16, Int32, Int64, Single, Double |   | UInt16 | UInt32, Int32, UInt64, Int64, Single, Double |   | Int16 | Int32, Int64, Single, Double |   | UInt32 | UInt64, Int64, Single, Double |   | Int32 | Int64, jeden dwukrotnie |   | UInt64 | Single, Double |   | Int64 | Single, Double |   | Pojedynczy | Podwójne |   | Inne niż odwołanie | Przez odwołanie. |"
  syntax:
    content: public abstract object ChangeType (object value, Type type, System.Globalization.CultureInfo culture);
    parameters:
    - id: value
      type: System.Object
      description: "Obiekt, aby zmienić w nowym <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref>."
    - id: type
      type: System.Type
      description: "Nowy <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref> który `value` staną się."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "Wystąpienie <xref:System.Globalization.CultureInfo>umożliwiające sterowanie koercja typów danych.</xref:System.Globalization.CultureInfo> Jeśli `culture` jest <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, <xref:System.Globalization.CultureInfo>służy bieżącego wątku.</xref:System.Globalization.CultureInfo>       Uwaga na przykład ten parametr jest niezbędne przekonwertować <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> reprezentujący 1000 do <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> wartości, ponieważ 1000 jest inaczej reprezentowany przez innych kultur."
    return:
      type: System.Object
      description: "Obiekt, który zawiera podanej wartości jako nowego typu."
  overload: System.Reflection.Binder.ChangeType*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)
  id: ReorderArgumentArray(System.Object[]@,System.Object)
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: ReorderArgumentArray(Object[],Object)
  nameWithType: Binder.ReorderArgumentArray(Object[],Object)
  fullName: System.Reflection.Binder.ReorderArgumentArray(Object[],Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Na zwracanie z <xref:System.Reflection.Binder.BindToMethod*>, przywraca <code> args </code> argument do chwili pochodzi z <xref uid=&quot;langword_csharp_BindToMethod&quot; name=&quot;BindToMethod&quot; href=&quot;&quot;> </xref>.</xref:System.Reflection.Binder.BindToMethod*>"
  remarks: "Środowisko uruchomieniowe języka wspólnego wywołuje tę metodę, jeśli `state` nie jest `null` po powrocie z `BindToMethod`."
  syntax:
    content: public abstract void ReorderArgumentArray (ref object[] args, object state);
    parameters:
    - id: args
      type: System.Object[]
      description: "Argumenty rzeczywiste, które są przekazywane w. Typy i wartości argumentów można zmienić."
    - id: state
      type: System.Object
      description: "Obiekt dostarczony do integratora, który śledzi zmiany kolejności argumentu."
  overload: System.Reflection.Binder.ReorderArgumentArray*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])
  id: SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  nameWithType: Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  fullName: System.Reflection.Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Wybiera metodę z danego zestawu metod, w zależności od typu argumentu."
  remarks: "Ta metoda powinna zwrócić `null` Jeśli żadna metoda spełnia kryteria. Ta metoda określa udostępniane przez zaznaczenie `GetConstructor` i `GetMethod` metody `Type`."
  syntax:
    content: public abstract System.Reflection.MethodBase SelectMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Bitowe połączenie <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref> wartości."
    - id: match
      type: System.Reflection.MethodBase[]
      description: "Zbiór metod, które są kandydatami do dopasowania. Na przykład, jeśli <xref href=&quot;System.Reflection.Binder&quot;> </xref> obiekt jest używany przez &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, ten parametr określa zestaw metod, które stwierdził, że odbicia możliwe jest zgodny, zwykle ponieważ mają poprawny element członkowski. Domyślna implementacja dostarczonych przez &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; zmienia kolejność tej tablicy."
    - id: types
      type: System.Type[]
      description: "Typy parametrów używana do lokalizowania odpowiadającej metody."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "Tablica modyfikatorów parametrów, umożliwiające powiązanie do pracy z podpisów parametru, w których typy zostały zmodyfikowane."
    return:
      type: System.Reflection.MethodBase
      description: "Metody, dopasowania, jeśli znaleziono; w przeciwnym razie <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Reflection.Binder.SelectMethod*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "Dla domyślnego integratora <code> match </code> zawiera wiele metod, które są równie dobrej dopasowań dla typów parametrów opisanego przez <code> types </code>. Na przykład tablicy w <code> types </code> zawiera <xref:System.Type>obiekt do `MyClass` i array w <code> match </code> zawiera metodę, która przyjmuje jest klasą podstawową `MyClass` i metody pobierającej interfejs `MyClass` implementuje.</xref:System.Type>"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Dla domyślnego integratora <code> match </code> jest <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> albo być pustą tablicą.       - lub - element <code> types </code> pochodną <xref:System.Type>, ale nie jest typu <xref uid=&quot;langword_csharp_RuntimeType&quot; name=&quot;RuntimeType&quot; href=&quot;&quot;> </xref>.</xref:System.Type>"
  platform:
  - net462
- uid: System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])
  id: SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  nameWithType: Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  fullName: System.Reflection.Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Wybiera właściwość z danego zestawu właściwości, w oparciu o określone kryteria."
  remarks: "Ta metoda określa udostępniane przez zaznaczenie `GetProperty` metoda `Type`."
  syntax:
    content: public abstract System.Reflection.PropertyInfo SelectProperty (System.Reflection.BindingFlags bindingAttr, System.Reflection.PropertyInfo[] match, Type returnType, Type[] indexes, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Bitowe połączenie <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref> wartości."
    - id: match
      type: System.Reflection.PropertyInfo[]
      description: "Zbiór właściwości, które są kandydatami do dopasowania. Na przykład, jeśli <xref href=&quot;System.Reflection.Binder&quot;> </xref> obiekt jest używany przez &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, ten parametr określa zbiór właściwości, które stwierdził, że odbicia możliwe jest zgodny, zwykle ponieważ mają poprawny element członkowski. Domyślna implementacja dostarczonych przez &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; zmienia kolejność tej tablicy."
    - id: returnType
      type: System.Type
      description: "Musi mieć wartość zwracaną dopasowania właściwości."
    - id: indexes
      type: System.Type[]
      description: "Typy indeksu właściwość. Używany dla właściwości indeksu, takie jak indeksatora dla klasy."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "Tablica modyfikatorów parametrów, umożliwiające powiązanie do pracy z podpisów parametru, w których typy zostały zmodyfikowane."
    return:
      type: System.Reflection.PropertyInfo
      description: "Dopasowania właściwości."
  overload: System.Reflection.Binder.SelectProperty*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "Dla domyślnego integratora <code> match </code> zawiera wiele właściwości, które są równie dobrej dopasowań dla <code> returnType </code> i <code> indexes </code>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Dla domyślnego integratora <code> match </code> jest <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> albo być pustą tablicą."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Reflection.AmbiguousMatchException
  isExternal: true
  name: System.Reflection.AmbiguousMatchException
- uid: System.MissingFieldException
  isExternal: true
  name: System.MissingFieldException
- uid: System.NullReferenceException
  isExternal: true
  name: System.NullReferenceException
- uid: System.MissingMethodException
  isExternal: true
  name: System.MissingMethodException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Reflection.Binder.#ctor
  parent: System.Reflection.Binder
  isExternal: false
  name: Binder()
  nameWithType: Binder.Binder()
  fullName: System.Reflection.Binder.Binder()
- uid: System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)
  parent: System.Reflection.Binder
  isExternal: false
  name: BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  nameWithType: Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  fullName: System.Reflection.Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.FieldInfo[]
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo[]
  spec.csharp:
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: FieldInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)
  parent: System.Reflection.Binder
  isExternal: false
  name: BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  nameWithType: Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  fullName: System.Reflection.Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
- uid: System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: true
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.Reflection.MethodBase[]
  parent: System.Reflection
  isExternal: true
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase[]
  spec.csharp:
  - uid: System.Reflection.MethodBase
    name: MethodBase
    nameWithType: MethodBase
    fullName: MethodBase[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.ParameterModifier[]
  parent: System.Reflection
  isExternal: false
  name: ParameterModifier
  nameWithType: ParameterModifier
  fullName: System.Reflection.ParameterModifier[]
  spec.csharp:
  - uid: System.Reflection.ParameterModifier
    name: ParameterModifier
    nameWithType: ParameterModifier
    fullName: ParameterModifier[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)
  parent: System.Reflection.Binder
  isExternal: false
  name: ChangeType(Object,Type,CultureInfo)
  nameWithType: Binder.ChangeType(Object,Type,CultureInfo)
  fullName: System.Reflection.Binder.ChangeType(Object,Type,CultureInfo)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)
  parent: System.Reflection.Binder
  isExternal: false
  name: ReorderArgumentArray(Object[],Object)
  nameWithType: Binder.ReorderArgumentArray(Object[],Object)
  fullName: System.Reflection.Binder.ReorderArgumentArray(Object[],Object)
- uid: System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Binder
  isExternal: false
  name: SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  nameWithType: Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  fullName: System.Reflection.Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Binder
  isExternal: false
  name: SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  nameWithType: Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  fullName: System.Reflection.Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Reflection.PropertyInfo[]
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo[]
  spec.csharp:
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: PropertyInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Binder.#ctor*
  parent: System.Reflection.Binder
  isExternal: false
  name: Binder
  nameWithType: Binder.Binder
- uid: System.Reflection.Binder.BindToField*
  parent: System.Reflection.Binder
  isExternal: false
  name: BindToField
  nameWithType: Binder.BindToField
- uid: System.Reflection.Binder.BindToMethod*
  parent: System.Reflection.Binder
  isExternal: false
  name: BindToMethod
  nameWithType: Binder.BindToMethod
- uid: System.Reflection.Binder.ChangeType*
  parent: System.Reflection.Binder
  isExternal: false
  name: ChangeType
  nameWithType: Binder.ChangeType
- uid: System.Reflection.Binder.ReorderArgumentArray*
  parent: System.Reflection.Binder
  isExternal: false
  name: ReorderArgumentArray
  nameWithType: Binder.ReorderArgumentArray
- uid: System.Reflection.Binder.SelectMethod*
  parent: System.Reflection.Binder
  isExternal: false
  name: SelectMethod
  nameWithType: Binder.SelectMethod
- uid: System.Reflection.Binder.SelectProperty*
  parent: System.Reflection.Binder
  isExternal: false
  name: SelectProperty
  nameWithType: Binder.SelectProperty
