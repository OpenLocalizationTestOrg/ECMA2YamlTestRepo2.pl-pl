### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.LinqDataSource
  id: LinqDataSource
  children:
  - System.Web.UI.WebControls.LinqDataSource.#ctor
  - System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  - System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  - System.Web.UI.WebControls.LinqDataSource.AutoPage
  - System.Web.UI.WebControls.LinqDataSource.AutoSort
  - System.Web.UI.WebControls.LinqDataSource.ContextCreated
  - System.Web.UI.WebControls.LinqDataSource.ContextCreating
  - System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  - System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  - System.Web.UI.WebControls.LinqDataSource.CreateQueryableView
  - System.Web.UI.WebControls.LinqDataSource.CreateView
  - System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  - System.Web.UI.WebControls.LinqDataSource.Deleted
  - System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  - System.Web.UI.WebControls.LinqDataSource.Deleting
  - System.Web.UI.WebControls.LinqDataSource.EnableDelete
  - System.Web.UI.WebControls.LinqDataSource.EnableInsert
  - System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  - System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  - System.Web.UI.WebControls.LinqDataSource.GroupBy
  - System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  - System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)
  - System.Web.UI.WebControls.LinqDataSource.Inserted
  - System.Web.UI.WebControls.LinqDataSource.Inserting
  - System.Web.UI.WebControls.LinqDataSource.InsertParameters
  - System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)
  - System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)
  - System.Web.UI.WebControls.LinqDataSource.OrderBy
  - System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  - System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  - System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  - System.Web.UI.WebControls.LinqDataSource.Select
  - System.Web.UI.WebControls.LinqDataSource.Selected
  - System.Web.UI.WebControls.LinqDataSource.Selecting
  - System.Web.UI.WebControls.LinqDataSource.SelectParameters
  - System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  - System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType
  - System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName
  - System.Web.UI.WebControls.LinqDataSource.TableName
  - System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  - System.Web.UI.WebControls.LinqDataSource.Updated
  - System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  - System.Web.UI.WebControls.LinqDataSource.Updating
  - System.Web.UI.WebControls.LinqDataSource.Where
  - System.Web.UI.WebControls.LinqDataSource.WhereParameters
  langs:
  - csharp
  name: LinqDataSource
  nameWithType: LinqDataSource
  fullName: System.Web.UI.WebControls.LinqDataSource
  type: Class
  summary: "Umożliwia korzystanie z język Language-Integrated zapytania (LINQ) na stronie sieci Web ASP.NET za pomocą znacznika tekstu, aby pobrać i zmodyfikować danych z obiektu danych."
  remarks: "W tym temacie:- [wprowadzenie](#introduction)      -   [kolejność operacji](#order_of_operations)      -   [danych o ustalaniu kolejności](#ordering_data)      -   [grupowania danych](#grouping_data)      -   [modyfikacji danych](#data_modifications)      -   [obliczenia wartości w czasie wykonywania](#evaluating_value_at_run_time)      -   [Praca z procedur składowanych](#working_with_stored_procedures)      -   [składni deklaratywnej](#declarative_syntax) <a name=&quot;introduction&quot;> </a> ## Introduction Language-Integrated zapytania (LINQ) jest składnia zapytania, który definiuje zestaw operatorów zapytań, umożliwiające przechodzenie, filtrować i projekcji operacji wyrażane w deklaratywne w żadnym. Języka programowania opartego na sieci.       Obiekt danych może być zbierania danych w pamięci lub obiekt, który reprezentuje dane z bazy danych. Można pobrać lub modyfikować dane bez konieczności pisania poleceń SQL dla każdej operacji.       Formant LinqDataSource pozwala na użycie LINQ na stronie sieci Web ASP.NET, przez ustawienie właściwości w tekście znaczników. Formant LinqDataSource używa LINQ do SQL mają być automatycznie generowane polecenia danych. Aby uzyskać więcej informacji dotyczących składnika LINQ to SQL, zobacz [LINQ do SQL](~/add/includes/ajax-current-ext-md.md).       Jeśli dane są pobierane z kolekcji danych w pamięci, można skonfigurować ustawienie <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>właściwości do klasy, który zawiera kolekcję danych.</xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> Możesz ustawić <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>Właściwości właściwość lub pole, które zwraca zbierania danych.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Na przykład może mieć klasy o nazwie `Person` zawiera właściwość o nazwie `FavoriteCities` zwracająca tablicę wartości ciągu. W takim przypadku należy ustawić <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>właściwości `Person` i ustaw <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>właściwości `FavoriteCities`.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> </xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>       Podczas wykonywania zapytań dotyczących bazy danych, użytkownik musi najpierw utworzyć klas jednostek, które reprezentują bazy danych i jego tabele. Można użyć [!INCLUDE[vs_ordesigner_long](~/add/includes/vs-ordesigner-long-md.md)] lub narzędzia SqlMetal.exe do wygenerowania tych klas. Następnie ustaw <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>Właściwości klasy, która reprezentuje bazy danych i ustaw <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>Właściwości właściwość, która reprezentuje tabeli bazy danych.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> </xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>      <a name=&quot;order_of_operations&quot;></a>## Kolejność formantu LinqDataSource operacji stosuje operacje na danych w następującej kolejności: 1.  Gdzie (Określ dane, które rejestruje do zwrócenia).      2.  Order By (sortowania).      3.  Group By (rekordy agregacji danych, które współużytkują wartości).      4.  Kolejność grup według (sortowanie pogrupowanych danych).      5.  Wybierz (Określ pola lub właściwości do zwrócenia).      6.  Automatyczne sortowanie (Sortowanie rekordów danych według właściwości wybranego przez użytkownika).      7.  Strona automatycznie (pobierania ich podzbiór rekordów danych, które zostały wybrane przez użytkownika).       Dodawanie warunków do <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>właściwości do filtrowania rekordów danych, które są zwracane z kwerendy.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Jeśli <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>nie ustawiono właściwości, formantu LinqDataSource pobiera każdego rekordu z obiektu danych.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>      <a name=&quot;ordering_data&quot;></a>## Porządkowanie danych używasz <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>Właściwości w celu określenia nazwy właściwości z zwrócone dane, aby posortować według.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>      > [!NOTE] > Korzystając z formantu LinqDataSource [!INCLUDE[ss2k](~/add/includes/ss2k-md.md)] lub [!INCLUDE[ssEW](~/add/includes/ssew-md.md)] i <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>właściwość jest ustawiona na `true`, należy podać wartość w <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>Właściwości.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> Domyślnie <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>jest właściwość `true`.</xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> Jeśli przypisanie wartości do <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>Właściwości, należy również umieścić wszystkie kolumny tożsamości na liście właściwości, która jest zwracana w zapytaniu.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>      <a name=&quot;grouping_data&quot;></a>## Grupowanie danych używasz <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>Właściwości w celu określenia właściwości, które są używane do konsolidacji rekordów danych, które mają takie same wartości.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Grupując dane mogą obejmować `Key` i `It`, które są tworzone dynamicznie właściwości, w <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>Właściwości.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> `Key` Właściwość odwołuje się do wartości właściwości lub właściwości, które były używane do grupowania danych. Na przykład, jeśli grupowanie według właściwości o nazwie `Category`, `Key` właściwości będzie zawierać wszystkie unikatowe wartości w `Category` właściwości. `It` Właściwość odwołuje się do kolekcji poszczególne rekordy w metodzie grupowania danych. Można przejść przez `It` właściwość, aby pobrać poszczególne rekordy, które mają zostać skonsolidowane w operacji grupowania. Na przykład, jeśli grupowanie według właściwości o nazwie `Category`, `It` właściwość zawiera wszystkie poszczególne rekordy, które wspólną wartość w `Category` właściwości.       Możesz użyć <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>Właściwości w celu określenia właściwości, które mają zostać użyte do sortowania zgrupowanych danych.</xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> W przypadku grupowania danych, <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>właściwość określa sposób sortowania poszczególnych rekordów w zgrupowanych danych.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>       Domyślnie formantu LinqDataSource pobiera wartości dla wszystkich właściwości z obiektu danych. Możesz użyć <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>Właściwości w celu określenia właściwości, które do zwrócenia, jeśli chcesz pracować z podzbioru dostępnych właściwości.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Operacja Select są stosowane po Where, Order By i operacje Group By. W związku z tym Jeśli tworzysz nazwa aliasu w klauzuli Select, alias nie jest dostępna w innych klauzul.      <a name=&quot;data_modifications&quot;></a>## Modyfikacje danych można określić, czy włączono modyfikacji danych przy użyciu <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, i <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A>Właściwości.</xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> Interfejs użytkownika do modyfikacji danych za pomocą formantu LinqDataSource jest zwykle zapewniany przez formant powiązany z danymi, takich jak <xref:System.Web.UI.WebControls.DetailsView>kontroli.</xref:System.Web.UI.WebControls.DetailsView> Oprócz ustawienia <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, lub <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A>do `true`, poniższe warunki są wymagane do włączenia modyfikacji danych automatycznego: - <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>właściwość nie może być przypisana wartość.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>      - <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>Właściwość nie może być przypisana wartość.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>      -Klasa, która jest przypisana do <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>właściwości musi pochodzić od <xref:System.Data.Linq.DataContext>.</xref:System.Data.Linq.DataContext> </xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>      -Właściwość, która jest przypisana do <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>właściwości musi pochodzić od <xref:System.Data.Linq.Table%601>.</xref:System.Data.Linq.Table%601> </xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>       Można ograniczyć, właściwości, które są wyświetlane w formancie powiązane z danymi na dwa sposoby. Można albo zestaw <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>podzbiór właściwości, lub dla właściwości można zdefiniować pól dla formantu powiązanego z danymi, dodając <xref:System.Web.UI.WebControls.DataControlField>formantów.</xref:System.Web.UI.WebControls.DataControlField> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Jednak jeśli ustawisz <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>Właściwości, oznacza to, że nie można włączyć automatycznego aktualizowania, wstawiania i operacji delete.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Jeśli chcesz umożliwić modyfikacje danych podczas pracy z podzbioru dostępnych właściwości, nie należy ustawiać <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>Właściwości.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Zamiast tego należy pobrać wszystkie właściwości obiektu danych i zarządzania, które są wyświetlane przy użyciu formantu powiązanego z danymi. Jeśli używasz <xref:System.Web.UI.WebControls.DetailsView>kontroli lub <xref:System.Web.UI.WebControls.GridView>formantu, należy także ustawić <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A>lub <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A>właściwości `false`.</xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> </xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> </xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.DetailsView> Zapobiega to przyciski umożliwiające edytowanie i usuwanie danych w tym automatycznie formantu powiązanego z danymi. Wartości, które nie są wyświetlane w formancie powiązane z danymi są przechowywane w widoku stanu. Są one przekazywane bez zmian w źródle danych podczas aktualizacji danych.      <a name=&quot;evaluating_value_at_run_time&quot;></a>## Obliczenia wartości w czasie wykonywania w przypadku pozwala obliczyć wartości w czasie wykonywania porządkowania, filtrowanie, lub grupowanie wartości, należy dodać parametry <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>, lub <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>Kolekcje.</xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>       Jeśli chcesz określić wartości domyślne, można dodać parametry <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>kolekcji.</xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>       Jeśli chcesz przejrzeć lub zmodyfikuj wartości przed wykonaniem operacji danych może obsłużyć <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserting>, <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>, lub <xref:System.Web.UI.WebControls.LinqDataSource.Updating>zdarzeń.</xref:System.Web.UI.WebControls.LinqDataSource.Updating> </xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSource.Inserting> </xref:System.Web.UI.WebControls.LinqDataSource.Deleting> Można również obsługiwać te zdarzenia, aby anulować operację danych lub Sprawdź błędy sprawdzania poprawności, które wystąpiły podczas ustawiania właściwości w klasie danych oparte na danych wejściowych użytkownika.       Zbadanie wartości po zakończeniu operacji danych, obsługa <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, <xref:System.Web.UI.WebControls.LinqDataSource.Selected>, lub <xref:System.Web.UI.WebControls.LinqDataSource.Updated>zdarzeń.</xref:System.Web.UI.WebControls.LinqDataSource.Updated> </xref:System.Web.UI.WebControls.LinqDataSource.Selected> </xref:System.Web.UI.WebControls.LinqDataSource.Inserted> </xref:System.Web.UI.WebControls.LinqDataSource.Deleted>      <a name=&quot;working_with_stored_procedures&quot;></a>## Pracy z przechowywanych procedur można użyć formantu LinqDataSource do pobierania danych przez utworzenie programu obsługi zdarzeń dla procedury składowanej <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>zdarzeń.</xref:System.Web.UI.WebControls.LinqDataSource.Selecting> Zdarzeń programu obsługi, należy wywołać metodę w klasa kontekstu danych, która reprezentuje procedury składowanej i ustaw dla wyniku <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>Właściwość <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>obiektu.</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> Jeśli chcesz włączyć automatycznego aktualizowania, wstawiania i operacji usuwania dla danych typu, który jest zwracany przez metodę musi odpowiadać typowi określonego w <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>Właściwości.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Aby uzyskać więcej informacji o tworzeniu metod kontekstu danych, zobacz [porady: metody tworzenia DataContext mapowane na procedury składowane i funkcje (Projektanta obiektów relacyjnych)](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;declarative_syntax&quot;></a>## Składnia deklaratywne <CodeContentPlaceHolder>0</CodeContentPlaceHolder>"
  example:
  - "The following example shows a LinqDataSource control that retrieves data from an entity class named `Products`. The entity class could have been generated by using the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)] or the SqlMetal.exe utility. The <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property is set to return only records that have a value in the `Price` property greater than 50. A <xref:System.Web.UI.WebControls.GridView> control is bound to the LinqDataSource control to display the data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_1.aspx)]  \n  \n The following example shows a LinqDataSource control that enables users to update, delete, and insert records in the data source. A <xref:System.Web.UI.WebControls.DetailsView> control is bound to the LinqDataSource control and enables users to see and modify the data. Notice that no SQL commands are required in order to select, update, delete, or insert the records.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_2.aspx)]  \n  \n The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event that sets the data object based on a value in the Web page.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_3.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_3.vb)]  \n  \n The following example shows a LinqDataSource control that is configured to group by two columns. The `Key` property references an object that has two properties, `ProductCategory` and `Color`. The object represented by `It` is renamed (aliased) to `Products`. The renamed `Products` object contains a collection of the individual records in a grouping. Each instance will contain all the columns from the `Products` table.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_4.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_4.aspx)]  \n  \n The following example shows two <xref:System.Web.UI.WebControls.ListView> controls that display the data from the LinqDataSource control in the previous example. One <xref:System.Web.UI.WebControls.ListView> control displays the grouped data, and the other <xref:System.Web.UI.WebControls.ListView> control displays the individual names of products that belong to that group. The nested data-bound control's <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> property is set to `Products`, which is the alias for the `It` object.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_5.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_5.aspx)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Selecting")]

      [System.ComponentModel.DefaultProperty("ContextTypeName")]

      [System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]

      [System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.bmp")]

      [System.Web.UI.ParseChildren(true)]

      [System.Web.UI.PersistChildren(false)]

      public class LinqDataSource : System.Web.UI.WebControls.ContextDataSource, System.Web.DynamicData.IDynamicDataSource
  inheritance:
  - System.Object
  - System.Web.UI.Control
  - System.Web.UI.DataSourceControl
  - System.Web.UI.WebControls.QueryableDataSource
  - System.Web.UI.WebControls.ContextDataSource
  implements:
  - System.Web.DynamicData.IDynamicDataSource
  inheritedMembers:
  - System.Web.UI.Control.Adapter
  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)
  - System.Web.UI.Control.AddParsedSubObject(System.Object)
  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory
  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.BindingContainer
  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)
  - System.Web.UI.Control.ChildControlsCreated
  - System.Web.UI.Control.ClearCachedClientID
  - System.Web.UI.Control.ClearChildControlState
  - System.Web.UI.Control.ClearChildState
  - System.Web.UI.Control.ClearChildViewState
  - System.Web.UI.Control.ClearEffectiveClientIDMode
  - System.Web.UI.Control.ClientIDSeparator
  - System.Web.UI.Control.Context
  - System.Web.UI.Control.CreateChildControls
  - System.Web.UI.Control.DataBind
  - System.Web.UI.Control.DataBind(System.Boolean)
  - System.Web.UI.Control.DataBindChildren
  - System.Web.UI.Control.DataBinding
  - System.Web.UI.Control.DataItemContainer
  - System.Web.UI.Control.DataKeysContainer
  - System.Web.UI.Control.DesignMode
  - System.Web.UI.Control.Dispose
  - System.Web.UI.Control.Disposed
  - System.Web.UI.Control.EnableViewState
  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.EnsureChildControls
  - System.Web.UI.Control.EnsureID
  - System.Web.UI.Control.Events
  - System.Web.UI.Control.FindControl(System.String,System.Int32)
  - System.Web.UI.Control.GetDesignModeState
  - System.Web.UI.Control.GetRouteUrl(System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)
  - System.Web.UI.Control.HasChildViewState
  - System.Web.UI.Control.HasEvents
  - System.Web.UI.Control.ID
  - System.Web.UI.Control.IdSeparator
  - System.Web.UI.Control.Init
  - System.Web.UI.Control.IsChildControlStateCleared
  - System.Web.UI.Control.IsLiteralContent
  - System.Web.UI.Control.IsTrackingViewState
  - System.Web.UI.Control.IsViewStateEnabled
  - System.Web.UI.Control.Load
  - System.Web.UI.Control.LoadControlState(System.Object)
  - System.Web.UI.Control.LoadViewStateByID
  - System.Web.UI.Control.MapPathSecure(System.String)
  - System.Web.UI.Control.NamingContainer
  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.OnDataBinding(System.EventArgs)
  - System.Web.UI.Control.OnLoad(System.EventArgs)
  - System.Web.UI.Control.OnPreRender(System.EventArgs)
  - System.Web.UI.Control.OpenFile(System.String)
  - System.Web.UI.Control.Page
  - System.Web.UI.Control.Parent
  - System.Web.UI.Control.PreRender
  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)
  - System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)
  - System.Web.UI.Control.RenderingCompatibility
  - System.Web.UI.Control.ResolveAdapter
  - System.Web.UI.Control.ResolveClientUrl(System.String)
  - System.Web.UI.Control.ResolveUrl(System.String)
  - System.Web.UI.Control.SaveControlState
  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)
  - System.Web.UI.Control.Site
  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions
  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)
  - System.Web.UI.Control.TemplateControl
  - System.Web.UI.Control.TemplateSourceDirectory
  - System.Web.UI.Control.UniqueID
  - System.Web.UI.Control.Unload
  - System.Web.UI.Control.ValidateRequestMode
  - System.Web.UI.Control.ViewState
  - System.Web.UI.Control.ViewStateIgnoresCase
  - System.Web.UI.Control.ViewStateMode
  - System.Web.UI.DataSourceControl.ApplyStyleSheetSkin(System.Web.UI.Page)
  - System.Web.UI.DataSourceControl.ClientID
  - System.Web.UI.DataSourceControl.ClientIDMode
  - System.Web.UI.DataSourceControl.Controls
  - System.Web.UI.DataSourceControl.CreateControlCollection
  - System.Web.UI.DataSourceControl.EnableTheming
  - System.Web.UI.DataSourceControl.FindControl(System.String)
  - System.Web.UI.DataSourceControl.Focus
  - System.Web.UI.DataSourceControl.HasControls
  - System.Web.UI.DataSourceControl.RaiseDataSourceChangedEvent(System.EventArgs)
  - System.Web.UI.DataSourceControl.RenderControl(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.DataSourceControl.SkinID
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#ContainsListCollection
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#GetList
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetView(System.String)
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetViewNames
  - System.Web.UI.DataSourceControl.Visible
  - System.Web.UI.WebControls.ContextDataSource.EntitySetName
  - System.Web.UI.WebControls.ContextDataSource.EntityTypeName
  - System.Web.UI.WebControls.QueryableDataSource.GetView(System.String)
  - System.Web.UI.WebControls.QueryableDataSource.GetViewNames
  - System.Web.UI.WebControls.QueryableDataSource.LoadViewState(System.Object)
  - System.Web.UI.WebControls.QueryableDataSource.QueryCreated
  - System.Web.UI.WebControls.QueryableDataSource.RaiseViewChanged
  - System.Web.UI.WebControls.QueryableDataSource.SaveViewState
  - System.Web.UI.WebControls.QueryableDataSource.TrackViewState
  - System.Web.UI.WebControls.QueryableDataSource.UpdateParameterVales
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: LinqDataSource()
  nameWithType: LinqDataSource.LinqDataSource()
  fullName: System.Web.UI.WebControls.LinqDataSource.LinqDataSource()
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> klasy."
  syntax:
    content: public LinqDataSource ();
    parameters: []
  overload: System.Web.UI.WebControls.LinqDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  id: AutoGenerateOrderByClause
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoGenerateOrderByClause
  nameWithType: LinqDataSource.AutoGenerateOrderByClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Pobiera lub ustawia wartość wskazującą, czy <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> kontroli dynamicznie tworzy klauzuli Order By, na podstawie wartości w <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters*>kolekcji.</xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters*>"
  remarks: "Jeśli zostanie ustawiona właściwość AutoGenerateOrderByClause `true`, <xref:System.Web.UI.WebControls.LinqDataSource>kontroli dynamicznie tworzy klauzuli Order By, która jest oparta na wartości znajdujące się w <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>kolekcji.</xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource> <xref:System.Web.UI.WebControls.LinqDataSource>Dane są sortowane według pierwszy parametr i dodatkowo sortuje dane dla każdego parametru dodatkowe kontroli.</xref:System.Web.UI.WebControls.LinqDataSource> Parametry, które zawierają `null` lub wartość pustą nie znajdują się w klauzuli Order By.       Nie ustawiaj <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>Właściwości, gdy ustawiono AutoGenerateOrderByClause `true`, ponieważ analizator dynamicznie tworzy klauzuli Order By.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> <xref:System.Web.UI.WebControls.LinqDataSource>Kontroli zgłasza wyjątek, jeśli ustawiono AutoGenerateOrderByClause `true` i <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>Właściwości przypisano wartości.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoGenerateOrderByClause set to `true`. A parameter is included in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection that orders the data based on the property name that a user selects from a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/csharp/p-system.web.ui.webcontr_120_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_120_1.aspx)]"
  syntax:
    content: public bool AutoGenerateOrderByClause { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> kontroli tworzy klauzuli Order By; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Wartość domyślna to <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  id: AutoGenerateWhereClause
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoGenerateWhereClause
  nameWithType: LinqDataSource.AutoGenerateWhereClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Pobiera lub ustawia wartość wskazującą, czy <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> kontroli dynamicznie tworzy Where klauzuli na podstawie wartości zdefiniowane w <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters*>kolekcji.</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters*>"
  remarks: "Jeśli zostanie ustawiona właściwość AutoGenerateWhereClause `true`, <xref:System.Web.UI.WebControls.LinqDataSource>kontroli dynamicznie tworzy Where klauzuli z parametrów w <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>kolekcji.</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource> Każdego parametru dodawanego do <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>, Kolekcja musi mieć jego <xref:System.Web.UI.WebControls.Parameter.Name%2A>właściwość, ustaw wartość odpowiadającą właściwością w obiekcie danych, którego dotyczy zapytanie.</xref:System.Web.UI.WebControls.Parameter.Name%2A> </xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> Automatycznie wygenerowany gdzie klauzuli sprawdzi, czy określona wartość w <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>kolekcji jest równa wartości zgodnej właściwości w obiekcie danych.</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> Jeśli podasz więcej niż jeden parametr parametry są połączone funkcją logiczną `AND` operacji. Parametry, które zawierają `null` lub wartość pustą nie są uwzględniane w klauzuli.       Automatycznie wygenerowany <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>klauzuli można przetestować tylko pod względem równości i połączyć parametry tylko z `AND` operacji.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Nie ustawiono właściwość AutoGenerateWhereClause `true` Jeśli trzeba dodać warunek, który nie sprawdza pod kątem równości lub jeśli zajdzie potrzeba dotyczą parametrów z `OR` operacji. Można wykonać te zadania, ustawiając właściwość AutoGenerateWhereClause `false` i Dodawanie zastępczych w <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>Właściwości dla każdego parametru w <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>kolekcji.</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> W <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>Właściwości każdej nazwie symbol zastępczy jest poprzedzony znakiem @.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>       Nie ustawiaj <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>Właściwości, jeśli właściwość AutoGenerateWhereClause ma `true`, ponieważ analizator dynamicznie tworzy Where klauzuli.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> <xref:System.Web.UI.WebControls.LinqDataSource>Kontroli zgłasza wyjątek, jeśli właściwość AutoGenerateWhereClause ma `true` i <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>Właściwości przypisano wartości.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> </xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoGenerateWhereClause set to `true`. A <xref:System.Web.UI.WebControls.GridView> control is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control to display the data that is returned from the query. A <xref:System.Web.UI.WebControls.DropDownList> control is included that is populated with three values. A parameter is included in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection with the name set to `Category,` which matches one of the properties of the data object. Its <xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A> property is set to the ID of the <xref:System.Web.UI.WebControls.DropDownList> control. The <xref:System.Web.UI.WebControls.LinqDataSource> control automatically creates the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property to filter records based on the value that the user selects from the <xref:System.Web.UI.WebControls.DropDownList> control. The query returns the records whose `Category` property matches the value that the user has selected from the <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/add/codesnippet/csharp/p-system.web.ui.webcontr_223_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_223_1.aspx)]"
  syntax:
    content: public bool AutoGenerateWhereClause { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> kontrolki spowoduje utworzenie Where klauzuli; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Wartość domyślna to <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoPage
  id: AutoPage
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoPage
  nameWithType: LinqDataSource.AutoPage
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoPage
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Pobiera lub ustawia wartość wskazującą, czy <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> sterowanie obsługuje nawigację fragmentów danych w czasie wykonywania."
  remarks: "Ustaw właściwość AutoPage `true` Aby włączyć stronicowanie w <xref:System.Web.UI.WebControls.LinqDataSource>kontroli.</xref:System.Web.UI.WebControls.LinqDataSource> Aby umożliwić użytkownikowi przeglądanie danych, należy połączyć formantu powiązanego z danymi, który udostępnia interfejs umożliwiający stronicowania, aby <xref:System.Web.UI.WebControls.LinqDataSource>kontroli.</xref:System.Web.UI.WebControls.LinqDataSource> Jeśli ustawiono właściwość AutoPage `true`, <xref:System.Web.UI.WebControls.LinqDataSource>kontroli pobiera tylko wystarczającej liczby rekordów na jednej stronie formantu powiązanego z danymi.</xref:System.Web.UI.WebControls.LinqDataSource> Używa <xref:System.Linq.Enumerable.Skip%2A>i <xref:System.Linq.Enumerable.Take%2A>metody w celu pobrania rekordów dla bieżącej strony.</xref:System.Linq.Enumerable.Take%2A> </xref:System.Linq.Enumerable.Skip%2A>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoPage property set to `true` and a <xref:System.Web.UI.WebControls.GridView> control that is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control. The <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> property of the <xref:System.Web.UI.WebControls.GridView> control is set to `true` to provide the interface that lets users page through the data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_959_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_959_1.aspx)]"
  syntax:
    content: public bool AutoPage { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli użytkownik może przeglądania danych; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Wartość domyślna to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.AutoPage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoSort
  id: AutoSort
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoSort
  nameWithType: LinqDataSource.AutoSort
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoSort
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Pobiera lub ustawia wartość wskazującą, czy <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> sterowanie obsługuje sortowanie danych w czasie wykonywania."
  remarks: "<xref:System.Web.UI.WebControls.LinqDataSource>Kontrolka obsługuje dwa podejścia do sortowania danych.</xref:System.Web.UI.WebControls.LinqDataSource> Aby włączyć sortowanie w czasie wykonywania można użyć właściwości Autosortowania lub możesz ustawić <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>Właściwości, aby zdefiniować sortowania w czasie projektowania.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>       Ustaw dla właściwości Autosortowania `true` Aby włączyć sortowanie w <xref:System.Web.UI.WebControls.LinqDataSource>formant, który jest oparty na wyrażenia sortowania z formantu powiązanego z danymi.</xref:System.Web.UI.WebControls.LinqDataSource> Kontrolki powiązane z danymi udostępnia interfejs, który umożliwia użytkownikowi wybranie w czasie wykonywania, które właściwości można użyć do sortowania.       Programowo można ustawić kolejność, w którym dane są zwracane przez ustawienie <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>Właściwości z właściwością lub właściwości używane do sortowania.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> Gdy <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>właściwość ma ustawioną właściwość i właściwość Autosortowania jest `true`, wyrażenia sortowania z formantu powiązanego z danymi jest stosowana po wyrażeniu w <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>Właściwości.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> W związku z tym określa końcowego sortowania danych."
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoSort property set to `true` and a <xref:System.Web.UI.WebControls.GridView> control that is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control. The <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> property of the <xref:System.Web.UI.WebControls.GridView> control is set to `true` to provide the interface that lets users sort the data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_766_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_766_1.aspx)]"
  syntax:
    content: public bool AutoSort { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli użytkownik może sortować dane; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Wartość domyślna to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.AutoSort*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreated
  id: ContextCreated
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextCreated
  nameWithType: LinqDataSource.ContextCreated
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreated
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Występuje po utworzeniu wystąpienia obiektu typu kontekstu."
  remarks: "Obsługuj zdarzenie ContextCreated, aby sprawdzić obiekt typ kontekstu lub sprawdź wyjątki, które są generowane podczas tworzenia obiektu. Pobierz obiekt typu kontekstu z <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>Właściwość <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>obiektu, który jest skojarzony z tym zdarzeniem.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Pobrać wyjątek zgłoszony podczas operacji danych z <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>Właściwości.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>       Obiekt typu kontekstu jest tworzona podczas select, aktualizowania, wstawiania i operacji usunięcia i zostanie ponownie użyty w żądaniu.       Istnieje jeden raz, jeśli zdarzenie nie jest wywoływane. Jest to w przypadku programowane Ustawianie <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>właściwości do obiektu podczas <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>zdarzeń.</xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Dodatkowy warunek jest, że oryginalne wartości nie musi być przechowywane w widoku stanu lub obiekt w <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>implementuje właściwości <xref:System.Data.Linq.ITable>interfejsu.</xref:System.Data.Linq.ITable> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> ContextCreated;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreating
  id: ContextCreating
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextCreating
  nameWithType: LinqDataSource.ContextCreating
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreating
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Występuje przed utworzeniem wystąpienia obiektu typu kontekstu."
  remarks: "Domyślnie <xref:System.Web.UI.WebControls.LinqDataSource>kontroli tworzy wystąpienia typu określonego w <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>Właściwości.</xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> </xref:System.Web.UI.WebControls.LinqDataSource> <xref:System.Web.UI.WebControls.LinqDataSource>Kontroli wywołuje konstruktor domyślny obiektu kontekstu danych można utworzyć wystąpienia obiektu.</xref:System.Web.UI.WebControls.LinqDataSource> Możliwe, że z korzystaniem z systemem innym niż domyślny konstruktor lub należy utworzyć obiekt, który różni się od określonej w <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>Właściwości.</xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> W takim przypadku należy obsługi zdarzenia ContextCreating i ręcznie utworzyć obiekt kontekstu danych.       Obiekt typu kontekst został utworzony podczas select, aktualizowania, wstawiania i operacji usuwania.       Istnieje jeden raz, jeśli zdarzenie nie jest wywoływane. Jest to w przypadku programowane Ustawianie <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>właściwości do obiektu w obsłudze zdarzeń dla <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>zdarzeń.</xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Dodatkowy warunek jest, że oryginalne wartości nie musi być przechowywane w widoku stanu lub obiekt w <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>implementuje właściwości <xref:System.Data.Linq.ITable>interfejsu.</xref:System.Data.Linq.ITable> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>"
  example:
  - "The following example shows how to create the data context object by using a non-default constructor during the ContextCreating event. The code assigns the object to the <xref:System.Web.UI.WebControls.LinqDataSourceContextEventArgs.ObjectInstance%2A> property.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_153_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_153_1.vb)]"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceContextEventArgs> ContextCreating;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceContextEventArgs}
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  id: ContextDisposing
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextDisposing
  nameWithType: LinqDataSource.ContextDisposing
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Występuje przed disposing obiekt typu kontekstu."
  remarks: "Obsługuj zdarzenie ContextDisposing można zlikwidować obiektu ręcznie lub do wykonania oczyszczania specyficzne dla obiekt przed obiekt zostanie zniszczony."
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs> ContextDisposing;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs}
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  id: ContextTypeName
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextTypeName
  nameWithType: LinqDataSource.ContextTypeName
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Pobiera lub ustawia nazwę typu, który zawiera właściwość, którego wartość ma dane, które ma zostać pobrane."
  remarks: "Jeśli używasz <xref:System.Web.UI.WebControls.LinqDataSource>sterowania do pobierania danych z zbierania danych w pamięci lub bazy danych, należy określić dwie właściwości.</xref:System.Web.UI.WebControls.LinqDataSource> Pierwsza to klasa kontekstu danych, które reprezentuje źródło danych. Drugim jest właściwość klasy kontekstu danych, która zawiera dane. Ustaw właściwości ContextTypeName na nazwę klasy kontekstu danych i ustawisz <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>właściwości do zbierania danych, która zawiera dane.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>       Na przykład podczas pobierania danych z bazy danych, ustaw właściwości ContextTypeName nazwę klasy, która reprezentuje bazy danych. Również ustawić <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>Właściwości właściwość, która reprezentuje tabeli w bazie danych.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Aby wygenerować klas z bazy danych, należy użyć [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)] lub narzędzie SqlMetal.exe w celu automatycznego wygenerowania tych klas.       Podczas pobierania danych z kolekcji danych w pamięci, takich jak tablicy, ustaw właściwości ContextTypeName nazwę klasy, który zawiera właściwości tablicy. Następnie ustaw <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>Właściwości dla właściwości, która pobiera tablicę.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>       Aby włączyć automatyczną aktualizację, wstawiania lub usuwania operacji za pomocą <xref:System.Web.UI.WebControls.LinqDataSource>klasy przypisywane do właściwości ContextTypeName formantu, musi pochodzić od <xref:System.Data.Linq.DataContext>.</xref:System.Data.Linq.DataContext> </xref:System.Web.UI.WebControls.LinqDataSource> Ponadto właściwość przypisane do <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>właściwości musi pochodzić od <xref:System.Data.Linq.Table%601>.</xref:System.Data.Linq.Table%601> </xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Jeśli nie wymagają aby włączyć automatyczną aktualizację, wstawiania lub usuwanie operacji, można przypisać do właściwości ContextTypeName nazwa dowolnego typu klasy.       Aby uzyskać informacje o wybieraniu danych z wystąpienia klasy, zobacz <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>Właściwości.</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>"
  example:
  - "The following example shows how to set the ContextTypeName property to a class that contains an array of strings. It also shows how to set the property to a class (generated by the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)]) that represents a database.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_745_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_745_1.aspx)]  \n  \n The class named `ExampleDataContext` that represents the database table is not shown in this example. For this example to work, you must create this class by adding a LINQ To SQL class named Example.dbml and dragging a table named Movie onto the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)]. A class named `ExampleDataContext` with a property named `Movies` is generated.  \n  \n The following example shows the class named `MovieLibrary` that is referenced in the <xref:System.Web.UI.WebControls.LinqDataSource> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_745_2.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_745_2.vb)]"
  syntax:
    content: public override string ContextTypeName { get; set; }
    return:
      type: System.String
      description: "Nazwa klasy można pobrać danych z."
  overload: System.Web.UI.WebControls.LinqDataSource.ContextTypeName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView
  id: CreateQueryableView
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: CreateQueryableView()
  nameWithType: LinqDataSource.CreateQueryableView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Zwraca kolejność widoku."
  syntax:
    content: protected override System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView ();
    parameters: []
    return:
      type: System.Web.UI.WebControls.QueryableDataSourceView
      description: "Kolejność widoku."
  overload: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.CreateView
  id: CreateView
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: CreateView()
  nameWithType: LinqDataSource.CreateView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateView()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Tworzy nowe wystąpienie klasy <xref href=&quot;System.Web.UI.WebControls.LinqDataSourceView&quot;> </xref> klasy, która jest skojarzona z tym formantem."
  remarks: "Aby podać niestandardowy widok, można przesłonić tę metodę w klasie pochodnej."
  syntax:
    content: protected virtual System.Web.UI.WebControls.LinqDataSourceView CreateView ();
    parameters: []
    return:
      type: System.Web.UI.WebControls.LinqDataSourceView
      description: "Obiekt, który działa jako interfejs dla formantów powiązanych z danymi."
  overload: System.Web.UI.WebControls.LinqDataSource.CreateView*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  id: Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Delete(IDictionary,IDictionary)
  nameWithType: LinqDataSource.Delete(IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Delete(IDictionary,IDictionary)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Wykonuje operację usuwania."
  remarks: "Zazwyczaj nie trzeba wywołać metody Delete w kodzie. Jeśli używasz <xref:System.Web.UI.WebControls.LinqDataSource>kontroli z formantem powiązane z danymi formantu powiązanego z danymi automatyczne wywoływanie metody Delete, gdy użytkownik wykona akcję, aby usunąć rekord.</xref:System.Web.UI.WebControls.LinqDataSource> Jeśli chcesz utworzyć własny proces usuwania danych jawnie wywołać metody Delete. Na przykład jeśli chcesz usunąć rekord na podstawie zdarzenia poza kontrolą powiązane z danymi można wywołać metody Delete."
  syntax:
    content: public int Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);
    parameters:
    - id: keys
      type: System.Collections.IDictionary
      description: "Wartości klucza wiersza dla rekordy do usunięcia."
    - id: oldValues
      type: System.Collections.IDictionary
      description: "Wartości wierszy, które są oceniane w celu wykrycia konfliktów danych."
    return:
      type: System.Int32
      description: "Liczba zmodyfikowanych przez operację usuwania rekordów."
  overload: System.Web.UI.WebControls.LinqDataSource.Delete*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Deleted
  id: Deleted
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Deleted
  nameWithType: LinqDataSource.Deleted
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleted
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Występuje po zakończeniu operacji usuwania."
  remarks: "Obsługuj zdarzenie usunięte catch wszelkie wyjątki przez operację usuwania lub Sprawdź parametry wyjściowe po zakończeniu operacji. Parametry wyjściowe można pobrać <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>obiekt, który zostanie przekazany do procedury obsługi zdarzeń.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Deleted;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  id: DeleteParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: DeleteParameters
  nameWithType: LinqDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ta właściwość nie jest używana przez <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> klasy."
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Kolekcja parametrów."
  overload: System.Web.UI.WebControls.LinqDataSource.DeleteParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Deleting
  id: Deleting
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Deleting
  nameWithType: LinqDataSource.Deleting
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleting
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Występuje przed wykonaniem operacji delete."
  remarks: "Obsługuj zdarzenie usunięcie można sprawdzić poprawności obiektu do usunięcia, aby sprawdzić błędy sprawdzania poprawności danych z klasy danych, aby zmienić wartość przed operacją delete lub anulować operację usuwania. <xref:System.Web.UI.WebControls.LinqDataSource>Kontrola przechodzi <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>obiekt do obsługi zdarzeń dla zdarzenia usunięcie.</xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> </xref:System.Web.UI.WebControls.LinqDataSource> <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>Obiekt zawiera dane, które zostaną usunięte i pozwala anulować operację usuwania.</xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> Jeśli dane klasy zgłasza <xref:System.Web.UI.WebControls.LinqDataSourceValidationException>wyjątek, <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>obiekt zawiera ten wyjątek w <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A>Właściwości.</xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceValidationException>       Jeśli w obsłudze zdarzeń dla zdarzenia usunięcie jest zgłaszany wyjątek, musi obsługiwać wyjątek w tej obsłudze zdarzeń. Wyjątek nie zostaną przekazane do programu obsługi zdarzeń dla <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>zdarzenia (za pośrednictwem <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>Właściwość <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>obiektu).</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Deleted> <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>Właściwość zawiera tylko wyjątki, które są generowane po zdarzeniu usunięcie.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Deleting event. The code cancels the delete operation based on a property in the <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.OriginalObject%2A> property and a value from the Web page. In the example, when the `OnSale` property is set to `true`, the user must select a <xref:System.Web.UI.WebControls.CheckBox> control to confirm that a record should be deleted.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_77_1.vb)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_77_1.cs)]"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> Deleting;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs}
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableDelete
  id: EnableDelete
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableDelete
  nameWithType: LinqDataSource.EnableDelete
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableDelete
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Pobiera lub ustawia wartość wskazującą, czy rekordy danych można usunąć za pomocą <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> formantu."
  remarks: "Ustawioną właściwość EnableDelete `true` aby użytkownicy mogli usunąć rekord danych za pośrednictwem <xref:System.Web.UI.WebControls.LinqDataSource>kontroli.</xref:System.Web.UI.WebControls.LinqDataSource> Gdy właściwość EnableDelete ma `true`, <xref:System.Web.UI.WebControls.LinqDataSource>kontroli używa LINQ do SQL do automatycznego tworzenia polecenie, aby usunąć dane.</xref:System.Web.UI.WebControls.LinqDataSource> Musi zawierać interfejs, który umożliwia użytkownikom wybór rekord, aby usunąć, takich jak <xref:System.Web.UI.WebControls.DetailsView>kontroli.</xref:System.Web.UI.WebControls.DetailsView>       <xref:System.Web.UI.WebControls.LinqDataSource>Formant nie obsługuje operacji automatycznego usuwania podczas <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>Właściwości lub <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>właściwość jest ustawiona.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource> W takim przypadku <xref:System.Web.UI.WebControls.LinqDataSource>kontroli zgłasza wyjątek, jeśli zostanie podjęta próba operacji usuwania.</xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has EnableDelete set to `true`. A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and creates a button that lets users delete a data record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_368_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_368_1.aspx)]"
  syntax:
    content: public bool EnableDelete { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli włączono automatyczne usuwanie operacji; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Wartość domyślna to <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.EnableDelete*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableInsert
  id: EnableInsert
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableInsert
  nameWithType: LinqDataSource.EnableInsert
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableInsert
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Pobiera lub ustawia wartość wskazującą, czy rekordy danych mogą być wstawiane przez <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> formantu."
  remarks: "Ustaw właściwość EnableInsert `true` aby umożliwić użytkownikom wstawić nowy rekord danych za pośrednictwem <xref:System.Web.UI.WebControls.LinqDataSource>kontroli.</xref:System.Web.UI.WebControls.LinqDataSource> Gdy właściwość EnableInsert ma `true`, <xref:System.Web.UI.WebControls.LinqDataSource>kontroli używa LINQ do SQL do automatycznego tworzenia polecenie, aby wstawić dane.</xref:System.Web.UI.WebControls.LinqDataSource> Musi zawierać interfejs, który umożliwia użytkownikom wstawić nowy rekord, takich jak <xref:System.Web.UI.WebControls.DetailsView>kontroli.</xref:System.Web.UI.WebControls.DetailsView>       <xref:System.Web.UI.WebControls.LinqDataSource>Formant nie obsługuje operacji wstawiania automatyczne podczas <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>Właściwości lub <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>właściwość jest ustawiona.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource> W takim przypadku <xref:System.Web.UI.WebControls.LinqDataSource>kontroli zgłasza wyjątek, jeśli zostanie podjęta próba operacji wstawiania.</xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has EnableInsert set to `true`. A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and displays a button that switches the control to insert mode where users can create and save a new record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1142_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1142_1.aspx)]"
  syntax:
    content: public bool EnableInsert { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli są włączone operacje automatycznego wstawiania; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Wartość domyślna to <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.EnableInsert*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  id: EnableObjectTracking
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableObjectTracking
  nameWithType: LinqDataSource.EnableObjectTracking
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Pobiera lub ustawia wartość wskazującą, czy są śledzone zmiany obiektu kontekstu danych."
  remarks: "Właściwości EnableObjectTracking jest używana tylko podczas wybierania danych z obiektu kontekstu danych LINQ do SQL.       Gdy użytkownik korzysta z danych tylko do odczytu, ustawienie właściwości EnableObjectTracking `false` zwiększa wydajność, ponieważ dane nie są buforowane ustalenie, jeśli została ona zmieniona. Jednak on również wyłącza wykonywanie zapytań odroczonych. Ta właściwość musi mieć ustawioną `true` Jeśli chcesz używać do wykonywania zapytań odroczonych."
  syntax:
    content: public bool EnableObjectTracking { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli obiekt kontekstu danych śledzenia zmian; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Wartość domyślna to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  id: EnableUpdate
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableUpdate
  nameWithType: LinqDataSource.EnableUpdate
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Pobiera lub ustawia wartość wskazującą, czy rekordy danych może być aktualizowana za pośrednictwem <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> formantu."
  remarks: "Ustaw właściwość EnableUpdate `true` aby umożliwić użytkownikom zaktualizować rekord danych przy użyciu <xref:System.Web.UI.WebControls.LinqDataSource>kontroli.</xref:System.Web.UI.WebControls.LinqDataSource> Gdy właściwość EnableUpdate ma `true`, <xref:System.Web.UI.WebControls.LinqDataSource>kontroli używa LINQ do SQL do automatycznego tworzenia polecenie, aby zaktualizować dane.</xref:System.Web.UI.WebControls.LinqDataSource> Musi zawierać interfejs, który umożliwia użytkownikom zaktualizowania rekordu, takich jak <xref:System.Web.UI.WebControls.DetailsView>kontroli.</xref:System.Web.UI.WebControls.DetailsView>       <xref:System.Web.UI.WebControls.LinqDataSource>Formant nie obsługuje operacji aktualizacji automatycznych przy <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>Właściwości lub <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>właściwość jest ustawiona.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource> W takim przypadku <xref:System.Web.UI.WebControls.LinqDataSource>kontroli zgłasza wyjątek, jeśli zostanie podjęta próba operacji aktualizacji.</xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has EnableUpdate set to `true`. A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and creates a button that lets users update a data record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_116_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_116_1.aspx)]"
  syntax:
    content: public bool EnableUpdate { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli włączono automatyczną aktualizację operacji; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Wartość domyślna to <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.EnableUpdate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.GroupBy
  id: GroupBy
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: GroupBy
  nameWithType: LinqDataSource.GroupBy
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupBy
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Pobiera lub ustawia wartość określającą, właściwości, które są używane do grupowania pobrane dane."
  remarks: "Używasz właściwości GroupBy, aby określić właściwości, które są używane do konsolidacji rekordów danych, które mają takie same wartości. Na przykład, jeśli ustawiono właściwość GroupBy `Name`, wszystkie rekordy w zapytaniu, które mają taki sam `Name` wartość właściwości są zwracane jako pojedynczy rekord skonsolidowany.       Więcej niż jedną właściwość można przypisać do właściwości GroupBy, umieszczając wszystkie właściwości w `new` funkcji i oddzielając każdej właściwości za pomocą przecinka. Na przykład do grupy za pomocą właściwości `Name` , a następnie `Category`, ustaw dla właściwości GroupBy `new(Name, Category)`.       Wartości właściwości, które są używane do grupowania są zwracane przez wygenerowanej właściwości o nazwie `Key`. Możesz uwzględnić `Key` właściwości w <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>Właściwości można pobrać wartości grupowanych.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Można ustawić `Key` właściwości aliasu przy użyciu `As` — słowo kluczowe, ale nie muszą korzystać z aliasu. Na przykład można ustawić właściwości GroupBy na właściwość o nazwie `Category`. Można pobrać wartości skonsolidowanego z `Category` właściwości przez ustawienie <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>właściwości `new(Key As ProductCategory)`.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>       Aby dostęp do poszczególnych rekordów grupowanie, w tym `It` właściwości w <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>Właściwości.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> `It` Właściwość zawiera zestaw rekordów, które mają wartość we właściwości grupowanych. Można przejść przez `It` właściwości w celu pobrania poszczególnych rekordów.       Właściwości GroupBy jest często używane z metody agregacji. Można użyć następujących metod łączny:- `Count()`       -    `Average(` *kolumny* `)`       -    `Sum(` *kolumny* `)`       -    `Max(` *kolumny* `)`       -    `Min(` *kolumny* `)`       -    `Where(` *warunku* `)`       -    `Any()`       -    `All(` *warunku* `)` uzyskać więcej informacji, zobacz [NIB: — informacje o formancie LinqDataSource Web Server](http://msdn.microsoft.com/en-us/104cfc3f-7385-47d3-8a51-830dfa791136) i [jak: grupy i agregacji danych przy użyciu LinqDataSource Formant](http://msdn.microsoft.com/en-us/b922cf69-251f-4158-b405-ea960993a1af)."
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that groups the returned data by a property named `Category`. It returns the shared values and calculates the average price for the grouped records.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_84_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_84_1.aspx)]  \n  \n The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that is configured to group by two columns. The `Key` property references an object that has two properties, `ProductCategory` and `Color`. The object represented by `It` is renamed `Products`. The renamed `Products` object contains a collection of the individual records in a grouping, and each instance contains all the columns from the Products table.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_84_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_84_2.aspx)]  \n  \n The following example shows two <xref:System.Web.UI.WebControls.ListView> controls for displaying the data from the <xref:System.Web.UI.WebControls.LinqDataSource> control in the previous example. One <xref:System.Web.UI.WebControls.ListView> control displays the grouped data and the other <xref:System.Web.UI.WebControls.ListView> control displays the individual names of products that belong to that group. The nested data-bound control's <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> property is set to `Products`, which is the alias for the `It` object.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_84_3.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_84_3.aspx)]"
  syntax:
    content: public string GroupBy { get; set; }
    return:
      type: System.String
      description: "Ciąg, który jest używany do tworzenia w klauzuli Group By."
  overload: System.Web.UI.WebControls.LinqDataSource.GroupBy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  id: GroupByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: GroupByParameters
  nameWithType: LinqDataSource.GroupByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Pobiera kolekcję parametrów, które są używane do tworzenia w klauzuli Group By."
  remarks: "<xref:System.Web.UI.WebControls.LinqDataSource>Kontroli korzysta z parametrów w kolekcji GroupByParameters można utworzyć w klauzuli Group By w czasie wykonywania.</xref:System.Web.UI.WebControls.LinqDataSource> Zwykle nie będzie używać kolekcji GroupByParameters do grupowania danych. Zamiast tego można użyć <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>Właściwości.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Możesz użyć kolekcji GroupByParameters tylko wtedy, gdy wartości w klauzuli Group By należy ustawić w czasie wykonywania, a wartość nie jest nazwą właściwości. Na przykład użyć GroupByParameters kolekcji do grupowania danych na podstawie `LastName` właściwości w rekordach danych jest równa wartości podanego przez użytkownika.       Jeśli chcesz dane grupy według właściwości tej właściwości nie muszą być ustawione w czasie wykonywania, można zdefiniować właściwości grupowania w <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>Właściwości.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Na przykład, aby zwrócić wartości z tabeli bazy danych pogrupowane według `LastName`ustaw <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>&quot;LastName&quot; bez parametrów.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Jeśli chcesz dynamicznie dane grupy według właściwości utworzyć programu obsługi zdarzeń dla <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>zdarzeń i dostosować <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>Właściwości zgodnie z potrzebami.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Selecting>       Nazwa właściwości nie można przypisać jako wartość parametru w kolekcji GroupByParameters. Dodawanie parametrów do kolekcji GroupByParameters, jeśli chcesz dodać warunek <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>właściwość, która musi być ustawiona w czasie wykonywania.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>       Aby ustawić wartości w kolekcji GroupByParameters, Przypisz nazwę do każdego parametru a następnie dodaj element zastępczy w <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>właściwość o nazwie parametru.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> W klauzuli Group By każdej nazwie parametru jest poprzedzony znakiem @."
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection GroupByParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Parametry, które są używane do tworzenia w klauzuli Group By."
  overload: System.Web.UI.WebControls.LinqDataSource.GroupByParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)
  id: Insert(System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Insert(IDictionary)
  nameWithType: LinqDataSource.Insert(IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Insert(IDictionary)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Wykonuje operację wstawiania."
  remarks: "Zwykle nie trzeba wywołać metody Insert w kodzie. Kontrolki powiązane z danymi automatycznie będzie wywoływać metody Insert, gdy użytkownik wykona akcję, aby wstawić nowy rekord. Jeśli chcesz utworzyć procesu do wstawiania danych jawnie wywołać metody Insert."
  example:
  - "The following example shows how to programmatically insert a new record in the data source after the user clicks a button. The code passes a <xref:System.Collections.Specialized.ListDictionary> object that contains default values to the Insert method.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/add/codesnippet/csharp/cd9b3311-c882-4466-8d03-_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/add/codesnippet/visualbasic/cd9b3311-c882-4466-8d03-_1.vb)]  \n  \n The following example shows the markup for the previous example.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/add/codesnippet/csharp/cd9b3311-c882-4466-8d03-_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/add/codesnippet/visualbasic/cd9b3311-c882-4466-8d03-_2.aspx)]"
  syntax:
    content: public int Insert (System.Collections.IDictionary values);
    parameters:
    - id: values
      type: System.Collections.IDictionary
      description: "Wartości wierszy można wstawiać do źródła danych."
    return:
      type: System.Int32
      description: "Liczba wierszy wpływ operacji insert."
  overload: System.Web.UI.WebControls.LinqDataSource.Insert*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Inserted
  id: Inserted
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Inserted
  nameWithType: LinqDataSource.Inserted
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserted
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Występuje po zakończeniu operacji wstawiania."
  remarks: "Obsługuj zdarzenie Inserted catch wszelkie wyjątki przez operację wstawiania lub zbadać wartości po zakończeniu operacji insert. Możesz pobrać nowe wartości za pośrednictwem <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>obiekt, który zostanie przekazany do procedury obsługi zdarzeń.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Na przykład można użyć <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>obiekt, aby pobrać właściwość identity wygenerowanych przez bazę danych dla nowego rekordu danych.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  example:
  - "The following example shows how to create an event handler for the Inserted event that checks for exceptions and retrieves the identity property for the new record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_96_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_96_1.aspx)]"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Inserted;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Inserting
  id: Inserting
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Inserting
  nameWithType: LinqDataSource.Inserting
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserting
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Występuje przed wykonaniem operacji insert."
  remarks: "Obsługuj zdarzenie wstawianie do sprawdzania poprawności obiekt ma zostać wstawiony, aby sprawdzić błędy sprawdzania poprawności danych z klasy danych, aby zmienić wartość przed wykonaniem operacji wstawiania lub anulować operacji insert. <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>Obiekt przekazany do procedury obsługi zdarzeń dla tego zdarzenia zawiera nowy obiekt do wstawienia w źródle danych.</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>       Jeśli wystąpi błąd sprawdzania poprawności podczas operacji wstawiania, <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>obiekt zawiera wyjątki sprawdzania poprawności, które są generowane przez klasy danych.</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> Jeśli wartości do wstawienia nie jest zgodny z typem właściwości w klasie danych lub nie zostały spełnione sprawdzanie poprawności niestandardowego wystąpienia błędu weryfikacji. Program obsługi zdarzeń dla zdarzenia Wstawianie możesz pobrać wyjątki poprawności i podejmij odpowiednią akcję.       Jeśli w obsłudze zdarzeń dla zdarzenia Wstawianie jest zgłaszany wyjątek, musi obsługiwać wyjątek w tej obsłudze zdarzeń. Wyjątek nie zostaną przekazane do programu obsługi zdarzeń dla <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>zdarzenia (za pośrednictwem <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>Właściwość <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>obiektu).</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Inserted> <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>Właściwość zawiera tylko wyjątki, które są generowane po zdarzeniu Wstawianie.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Inserting event that modifies data before the insert operation. The object from the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> property is cast to a type named `Product`. The `DateModified` property of the `Product` object is set to the current date and time.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_110_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_110_1.vb)]  \n  \n The following example shows an event handler for the Inserting event that retrieves validation exceptions.  \n  \n```vb#  \nProtected Sub LinqDataSource_Inserting(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceInsertEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message & \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Inserting(object sender,   \n        LinqDataSourceInsertEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```  \n  \n The previous example retrieves validation exceptions. An exception might be thrown if a value does not match the type of the property. It might also be thrown from a customized check such as the one in the following example. The `OnAgeChanging` method checks that the number for the `Age` property is not negative.  \n  \n```c#  \npartial void  OnAgeChanging(int? value)  \n{  \n    if (value < 0)  \n    {  \n        throw new Exception(\"Age cannot be a negative number.\");  \n    }  \n}  \n```  \n  \n```vb#  \nPrivate Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  \n    If (value < 0) Then  \n        Throw New Exception(\"Age cannot be a negative number.\")  \n    End If  \nEnd Sub  \n```"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> Inserting;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceInsertEventArgs}
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.InsertParameters
  id: InsertParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: InsertParameters
  nameWithType: LinqDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.InsertParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Pobiera kolekcję parametrów, które są używane podczas operacji wstawiania."
  remarks: "Zwykle wartości, które są wymagane przez operację wstawiania są przekazywane do <xref:System.Web.UI.WebControls.LinqDataSource>kontroli przez formant powiązany z danymi.</xref:System.Web.UI.WebControls.LinqDataSource> Określ parametry insert, jeśli chcesz podać wartości domyślnej wartości lub określa, czy można przekonwertować wartości puste, aby `null`. Nie trzeba podać parametr dla każdej wartość, która zostanie wstawiony tylko dla wartości, które muszą być obsługiwane, gdy użytkownik nie dostarcza wartość.       Wartości podane w kolekcji InsertParameters kolekcji są używane tylko dla pól, które zostały zdefiniowane w źródle danych, ale nie są powiązane w formancie danych. Na przykład załóżmy, że tabela bazy danych ma kolumny o nazwach nazwa, adres i KodPocztowy, ale <xref:System.Web.UI.WebControls.ListView>formant, który jest powiązany z tabelą jest powiązany tylko z polami nazwy i adresu.</xref:System.Web.UI.WebControls.ListView> Wartości w kolekcji InsertParameters kolekcji będą używane tylko w przypadku pola KodPocztowy. Będą one nie służyć do pola nazwy i adresu. Dotyczy to nawet wtedy, gdy została wprowadzona żadna wartość dla tych pól. Jeśli pola powiązane z danymi formant automatycznie generuje dla wszystkich pól w źródle danych, nie wartości z kolekcji kolekcji InsertParameters będą używane."
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with a parameter that provides a default value in the InsertParameters collection. If the user does not provide a value for the `Category` property, the default value that is provided by the parameter is saved in the database.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1053_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1053_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Parametry, które są używane podczas operacji wstawiania."
  overload: System.Web.UI.WebControls.LinqDataSource.InsertParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)
  id: OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OnInit(EventArgs)
  nameWithType: LinqDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnInit(EventArgs)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Inicjuje <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> obiektu."
  syntax:
    content: protected override void OnInit (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Dane zdarzenia."
  overload: System.Web.UI.WebControls.LinqDataSource.OnInit*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)
  id: OnUnload(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OnUnload(EventArgs)
  nameWithType: LinqDataSource.OnUnload(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnUnload(EventArgs)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Zgłasza <xref href=&quot;System.Web.UI.Control.Unload&quot;> </xref> zdarzeń."
  syntax:
    content: protected override void OnUnload (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>Obiekt, który zawiera dane zdarzenia.</xref:System.EventArgs>"
  overload: System.Web.UI.WebControls.LinqDataSource.OnUnload*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderBy
  id: OrderBy
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderBy
  nameWithType: LinqDataSource.OrderBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderBy
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Pobiera lub ustawia wartość określającą, pola, które są używane do ustalania kolejności pobrane dane."
  remarks: "Właściwość OrderBy umożliwia określenie właściwości, które z zwróconych danych do użycia podczas sortowania. Właściwość sortowania danych musi istnieć w źródle danych, ale nie ma być uwzględniony w <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>Właściwości.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Można dodać spację i `Ascending`, `ASC`, `Descending`, lub `DESC` do właściwości w ciągu OrderBy, aby określić, jak uporządkowanej dane są zwracane.       Musisz podać więcej niż jedną właściwość we właściwości OrderBy, rozdzielając poszczególne właściwości za pomocą przecinka. Na przykład, aby kolejność według właściwości o nazwie `LastName` i `FirstName`, ustaw właściwość OrderBy &quot;Lastname, FirstName&quot;.      > [!NOTE] > Korzystając <xref:System.Web.UI.WebControls.LinqDataSource>sterować za pomocą [!INCLUDE[ss2k](~/add/includes/ss2k-md.md)] lub [!INCLUDE[ssEW](~/add/includes/ssew-md.md)] i <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>właściwość jest ustawiona na `true`, należy podać wartość właściwości OrderBy.</xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> </xref:System.Web.UI.WebControls.LinqDataSource> Domyślnie <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>jest właściwość `true`.</xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> Jeśli przypisanie wartości do <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>Właściwości, należy również umieścić wszystkie kolumny tożsamości na liście właściwości, która jest zwracana w zapytaniu.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>       Jeśli <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A>właściwość jest ustawiona na `true`, formantu powiązanego z danymi można przekazać wyrażenia sortowania do <xref:System.Web.UI.WebControls.LinqDataSource>formantu w czasie wykonywania.</xref:System.Web.UI.WebControls.LinqDataSource> </xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> <xref:System.Web.UI.WebControls.LinqDataSource>Sterowania zostaną zastosowane wyrażenie sortowania z formantu powiązanego z danymi, po zastosowaniu Właściwość OrderBy.</xref:System.Web.UI.WebControls.LinqDataSource> W związku z tym dane są zwracane zgodnie z wyrażenia sortowania z formantu powiązanego z danymi."
  example:
  - "The following example returns data in reverse alphabetical order based on values in the `Category` property.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/add/codesnippet/csharp/p-system.web.ui.webcontr_348_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_348_1.aspx)]"
  syntax:
    content: public string OrderBy { get; set; }
    return:
      type: System.String
      description: "Ciąg, który jest używany do tworzenia klauzuli Order By."
  overload: System.Web.UI.WebControls.LinqDataSource.OrderBy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  id: OrderByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderByParameters
  nameWithType: LinqDataSource.OrderByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Pobiera kolekcję parametrów, które są używane do tworzenia klauzuli Order By."
  remarks: "<xref:System.Web.UI.WebControls.LinqDataSource>Kontroli korzysta z parametrów w kolekcji właściwości OrderByParameters można utworzyć klauzuli Order By w czasie wykonywania.</xref:System.Web.UI.WebControls.LinqDataSource> Zwykle ustawiana <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>właściwości `true` po dodaniu parametrów w kolekcji właściwości OrderByParameters.</xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> Gdy <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>właściwość jest ustawiona na `true`, każdy parametr w kolekcji właściwości OrderByParameters jest dodawany do klauzuli Order By w sekwencji, że są one określone w kolekcji właściwości OrderByParameters.</xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> Gdy <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>jest właściwość `true`, nie trzeba nazwanych, ponieważ są stosowane w kolejności i nie są dopasowane do symbol zastępczy parametrów.</xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>       Jeśli nie ma wartości w czasie wykonywania w klauzuli Order By, nie trzeba użyć kolekcji właściwości OrderByParameters. Można zdefiniować pól do użycia na potrzeby porządkowanie danych w <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>Właściwości.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> Na przykład, aby zwrócić wartości z tabeli bazy danych uporządkowanych według `LastName`ustaw <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>&quot;LastName&quot; bez parametrów.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>       Można ustawić parametrów w kolekcji właściwości OrderByParameters i zgodne z parametrami symbole zastępcze w <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>Właściwości, ale ta metoda ma ograniczoną aplikacji.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> Korzystając z tej metody, parametrów w kolekcji właściwości OrderByParameters nie może reprezentować nazwę kolumny. Można ustawić wartości parametru, a następnie porównaj tę wartość do wartości właściwości. Można na przykład kolejność danych w oparciu czy wartości we właściwości są mniejsze niż wartość czasu wykonywania reprezentowanego przez parametr."
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> property set to `true`. A parameter is included in the OrderByParameters collection that orders the data based on the property name that a user selects from a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/csharp/p-system.web.ui.webcontr_757_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_757_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection OrderByParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Parametry, które są używane do tworzenia klauzuli Order By."
  overload: System.Web.UI.WebControls.LinqDataSource.OrderByParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  id: OrderGroupsBy
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderGroupsBy
  nameWithType: LinqDataSource.OrderGroupsBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Pobiera lub ustawia pola, które są używane do sortowania zgrupowanych danych."
  remarks: "Używasz właściwości OrderGroupsBy, aby określić sposób sortowania grupy danych. Na przykład można grupować wg `CategoryID` właściwości i następnie Sortuj każdy identyfikator kategorii Grupuj według średnią `Price` właściwości.       Można ustawić właściwości OrderGroupsBy, tylko wtedy, gdy jest zgrupowaniu danych. Po ustawieniu właściwości OrderGroupsBy bez ustawienia <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>Właściwość <xref:System.Web.UI.WebControls.LinqDataSource>kontroli zgłasza wyjątek.</xref:System.Web.UI.WebControls.LinqDataSource> </xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>       Właściwość, która jest używana do sortowania danych musi być właściwość, która służy do grupowania danych lub wynik funkcji agregacji na zgrupowanych danych. Aby określić, jak dane są sortowane, można dodać spację, a ciąg &quot;Ascending&quot;, &quot;ASC&quot;, &quot;Malejąco&quot; lub &quot;Opis&quot; Nazwa właściwości w ciągu OrderGroupsBy.       We właściwości OrderGroupsBy, można określić więcej niż jedną właściwość. Oddziel każdej właściwości, za pomocą przecinka."
  example:
  - "The following example shows how to group the data by using two properties, and how to sort the grouped data by using one of those properties. The data from a table named `Products` is grouped by using properties named `CategoryID` and `Discontinued`. The grouped data is sorted by the `CategoryID` property.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1127_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1127_1.aspx)]  \n  \n The following example shows how to group the data by using a property, and how to sort it based on the results of an aggregation function. The data from the `Products` table is grouped by using the `CategoryID` property. It is sorted based on the average of the `UnitPrice` property within each group.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1127_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1127_2.aspx)]"
  syntax:
    content: public string OrderGroupsBy { get; set; }
    return:
      type: System.String
      description: "Ciąg, który służy do tworzenia grup klauzuli Order."
  overload: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  id: OrderGroupsByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderGroupsByParameters
  nameWithType: LinqDataSource.OrderGroupsByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Pobiera kolekcję parametrów, które są używane do tworzenia grup klauzuli Order."
  remarks: "<xref:System.Web.UI.WebControls.LinqDataSource>Kontroli korzysta z parametrów w kolekcji OrderGroupsByParameters do tworzenia grup klauzuli Order w czasie wykonywania.</xref:System.Web.UI.WebControls.LinqDataSource>       Możesz dodać wartości do kolekcji OrderGroupsByParameters, tylko po ustawieniu wartości w czasie wykonywania w grupach klauzuli Order. Można określić pola, które są używane do kolejność danych przy użyciu <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>Właściwości.</xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>       Można ustawić parametrów w kolekcji OrderGroupsByParameters i zgodne z parametrami symbole zastępcze w <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>Właściwości.</xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> Jednak gdy posłuż się tą metodą, parametrów w kolekcji OrderGroupsByParameters nie może reprezentować nazwę kolumny; muszą one stanowić wartości. Można ustawić wartości parametru, a następnie porównaj tę wartość do właściwości. Można na przykład kolejność danych w oparciu czy wartości we właściwości są mniejsze niż wartość czasu wykonywania reprezentowanego przez parametr."
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Parametry, które są używane do tworzenia grup klauzuli Order."
  overload: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Select
  id: Select
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Select
  nameWithType: LinqDataSource.Select
  fullName: System.Web.UI.WebControls.LinqDataSource.Select
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Pobiera lub ustawia właściwości i obliczone wartości, które są objęte pobrane dane."
  remarks: "Jeśli nie zostały ustawione właściwości Select, <xref:System.Web.UI.WebControls.LinqDataSource>kontroli pobiera wszystkie właściwości (kolumny danych) z obiektu danych.</xref:System.Web.UI.WebControls.LinqDataSource> Aby pobrać podzbiór właściwości z obiektu lub do obliczania nowych wartości, podczas pobierania danych używana jest właściwość Select.       Należy określić właściwości, które można pobrać przez ustawienie właściwości Select do nazwy właściwości, które chcesz uwzględnić w zwróconych danych.       Jeśli pobierasz podzbiór właściwości z obiektu danych <xref:System.Web.UI.WebControls.LinqDataSource>kontroli dynamicznie tworzy klasę, która zawiera tylko właściwości, które określisz we właściwości Select.</xref:System.Web.UI.WebControls.LinqDataSource> Klasa tworzona jest również dynamicznie Jeśli obliczania właściwości, które nie są właściwości obiektu danych. W takich przypadkach obiektów zwróconych przez kwerendę nie jest wystąpieniem klasy, która została określona w <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>Właściwości.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Zamiast tego należy użyć `new` metody w właściwości Select, aby wskazać, że nowa klasa jest zwróconych przez kwerendę. Na przykład, aby zwrócić tylko `FirstName` i `LastName` właściwości z obiektu, który zawiera więcej niż te właściwości, wartość właściwości Select `new(FirstName, LastName)`. <xref:System.Web.UI.WebControls.LinqDataSource>Kontroli dynamicznie spowoduje utworzenie nowej klasy określonej w `new` metody.</xref:System.Web.UI.WebControls.LinqDataSource>       Można użyć `As` — słowo kluczowe można przypisać aliasu do wybranej wartości. Po przypisaniu alias musi zawierać Aliasy właściwości w `new` metody. Każdego formantu powiązanego z danymi, który jest powiązany z wyników z <xref:System.Web.UI.WebControls.LinqDataSource>kontroli musi odwoływać się do właściwości przez alias.</xref:System.Web.UI.WebControls.LinqDataSource> Na przykład, jeśli ustawiono właściwość wybierz `new(Region As SalesRegion, Revenue / 1000 As RevenueThousands)`, kontrolki powiązania danych mogą uzyskiwać dostęp do dwóch właściwości `SalesRegion` i `RevenueThousands`.       Możesz użyć `new` funkcji w właściwości Select, zgodnie z warunkami wymienione w poniższej tabeli.      | Wybierz | Użycie nowego | Przykład |   |------------|----------------|-------------|   | Jedna z właściwości. | `new` nie jest konieczne. | `Select=&quot;Category&quot;`|   | Wiele właściwości. | `new` potrzebne. | `Select=&quot;new(Cateogry, Name)&quot;`|   | Jeden lub wiele właściwości, które mają aliasu. | `new` potrzebne. | `Select=&quot;new(Category As CategoryGroup)&quot;`|       Jeśli chcesz włączyć modyfikacji danych automatyczne, ale nie chcesz wyświetlić wszystkie właściwości z obiektu danych, nie należy ustawiać właściwości Select. Zamiast tego należy zarządzać wyświetlanej przez formant powiązany z danymi. Jeśli używasz <xref:System.Web.UI.WebControls.DetailsView>kontroli lub <xref:System.Web.UI.WebControls.GridView>formantu, należy także ustawić <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A>lub <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A>właściwości `false`.</xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> </xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> </xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.DetailsView> Wartości, które nie są wyświetlane w formancie powiązane z danymi są przechowywane w widoku stanu. Są one przekazywane bez zmian w źródle danych podczas aktualizacji danych.       W przypadku grupowania danych w zapytaniu, mogą obejmować metody agregacji w właściwości Select. Można użyć następujących metod łączny:- `Count()`       -    `Average(` *kolumny* `)`       -    `Sum(` *kolumny* `)`       -    `Max(` *kolumny* `)`       -    `Min(` *kolumny* `)`       -    `Where(` *warunku* `)`       -    `Any()`       -    `All(` *warunku* `)` uzyskać więcej informacji, zobacz [NIB: — informacje o formancie LinqDataSource Web Server](http://msdn.microsoft.com/en-us/104cfc3f-7385-47d3-8a51-830dfa791136) i [jak: grupy i agregacji danych przy użyciu LinqDataSource Formant](http://msdn.microsoft.com/en-us/b922cf69-251f-4158-b405-ea960993a1af).       Grupując dane mogą obejmować `Key` i `It`, które są tworzone dynamicznie właściwości, wybierz opcję Właściwości. `Key` Właściwość odwołuje się do wartości właściwości lub właściwości, które były używane do grupowania danych. Na przykład, jeśli grupowanie według właściwości o nazwie `Category`, `Key` właściwości będzie zawierać każdej unikatowej wartości w `Category` właściwości. `It` Właściwość odwołuje się do kolekcji poszczególne rekordy w metodzie grupowania danych. Można przejść przez `It` właściwość, aby pobrać poszczególne rekordy, które mają zostać skonsolidowane w operacji grupowania. Na przykład, jeśli grupowanie według właściwości o nazwie `Category`, `It` właściwość zawiera wszystkie poszczególne rekordy, które wspólną wartość w `Category` właściwości.       Jeśli dołączysz `It` — słowo kluczowe w właściwości Select, grupując dane, należy przypisać aliasu `It` — słowo kluczowe. <xref:System.Web.UI.WebControls.LinqDataSource>Kontrolki spowoduje zgłoszenie wyjątku, jeśli `It` nie ma aliasu.</xref:System.Web.UI.WebControls.LinqDataSource> Można przypisać aliasu `Key` — słowo kluczowe, ale nie jest wymagana."
  example:
  - "The following example shows how to set the Select property to a subset of properties in the data object.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/add/codesnippet/csharp/p-system.web.ui.webcontr_580_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_580_1.aspx)]  \n  \n The following example shows how to retrieve values in a property that has been used to group data, and to retrieve the average for the grouped records. The `Key` keyword contains the property that has been used for grouping data. In this example, `Key` will contain the shared values from the `ProductCategory` property.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_580_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_580_2.aspx)]"
  syntax:
    content: public string Select { get; set; }
    return:
      type: System.String
      description: "Ciąg, który jest używany do tworzenia klauzuli Select."
  overload: System.Web.UI.WebControls.LinqDataSource.Select*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Selected
  id: Selected
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Selected
  nameWithType: LinqDataSource.Selected
  fullName: System.Web.UI.WebControls.LinqDataSource.Selected
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Występuje po zakończeniu operacji pobierania danych."
  remarks: "Obsługuj zdarzenie wybrane catch wszelkie wyjątki przez operację pobierania danych lub sprawdź obiekt danych po zakończeniu operacji pobierania. Obiekt jest dostępny z <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>obiekt, który zostanie przekazany do procedury obsługi zdarzeń.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Selected;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Selecting
  id: Selecting
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Selecting
  nameWithType: LinqDataSource.Selecting
  fullName: System.Web.UI.WebControls.LinqDataSource.Selecting
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Występuje przed wykonaniem operacji pobierania danych."
  remarks: "Obsługa zdarzenia Selecting w celu wykonywania następujących zadań:-zmodyfikuj parametry w celu pobierania danych.      -Programowo generowania zapytania.      -Modyfikowanie wartości sortowania i stronicowania.      — Wykonaj niestandardowy sortowania i stronicowania.      -Anuluj operację pobierania danych.       <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>Obiekt, który jest przekazywany do obsługi zdarzeń dla tego zdarzenia zawiera parametry dla operacji pobierania danych.</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> Można zmodyfikować parametry w obsłudze zdarzeń Selecting przed wykonuje zapytania lub można utworzyć nowego zestawu wyników i przypisać do <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>Właściwości.</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>       Możliwość implementacji niestandardowych sortowania i stronicowania w programy obsługi dla tego zdarzenia może być ograniczone przez formant powiązany z <xref:System.Web.UI.WebControls.LinqDataSource>.</xref:System.Web.UI.WebControls.LinqDataSource> Na przykład, jeśli nagłówek <xref:System.Web.UI.WebControls.GridView>formant zostanie kliknięty, formantu przeprowadza automatyczne sortowanie której może zastąpienie niezależnie od kolejności należy ustanowić zdarzeń programu obsługi.</xref:System.Web.UI.WebControls.GridView>       Jeśli wyjątek w obsłudze zdarzeń dla zdarzenia Selecting, musi obsługiwać wyjątek w tej obsłudze zdarzeń. Wyjątek nie zostaną przekazane do programu obsługi zdarzeń dla <xref:System.Web.UI.WebControls.LinqDataSource.Selected>zdarzenia (za pośrednictwem <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>Właściwość <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>obiektu).</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Selected> <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>Właściwość zawiera tylko wyjątki, które są generowane po wystąpieniu zdarzenia Selecting.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Selecting event. The handler creates a query that retrieves values from an array of string values in the Web page.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/csharp/e-system.web.ui.webcontr_69_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_69_1.vb)]  \n  \n The following example shows how to assign the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> property to the object that is returned from a method that represents a stored procedure.  \n  \n [Visual Basic]  \n  \n```  \nProtected Sub LinqDataSource_Selecting(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceSelectEventArgs)  \n    Dim exampleContext As ExampleDataContext = New ExampleDataContext()  \n    e.Result = exampleContext.GetRegisteredCustomers()  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Selecting(object sender,   \n        LinqDataSourceSelectEventArgs e)  \n{  \n    ExampleDataContext exampleContext = new ExampleDataContext();  \n    e.Result = exampleContext.GetRegisteredCustomers();  \n}  \n```"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> Selecting;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceSelectEventArgs}
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.SelectParameters
  id: SelectParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: SelectParameters
  nameWithType: LinqDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.SelectParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Pobiera kolekcję parametrów, które są używane podczas operacji pobierania danych."
  remarks: "<xref:System.Web.UI.WebControls.LinqDataSource>Kontroli korzysta z parametrów w kolekcji parametrów SelectParameters można utworzyć klauzuli Select w czasie wykonywania.</xref:System.Web.UI.WebControls.LinqDataSource> Parametry należy dodać do kolekcji SelectParameters, jeśli chcesz użyć wartości czasu wykonywania w klauzuli Select. Na przykład można dodać parametr do kolekcji SelectParameters, aby reprezentować właściwość profilu użytkownika. Następnie można użyć tej właściwości i wartości ze źródła danych do obliczenia nowej wartości.       Jeśli nie ma wartości w czasie wykonywania w klauzuli Select, nie trzeba użyć kolekcji SelectParameters. Można zdefiniować właściwości do pobrania w <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>Właściwości.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Na przykład, aby zwrócić `FirstName` i `LastName` wartości z tabeli bazy danych, ustaw <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>do &quot;FirstName, LastName&quot; bez parametrów.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>       Aby ustawić wartości w kolekcji parametrów SelectParameters, należy dodać element zastępczy w <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>Właściwości dla tego parametru.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> W klauzuli Select jest poprzedzony nazwy parametrów z znaku @.       Nie można użyć parametru w kolekcji parametrów SelectParameters do reprezentowania nazwy właściwości. Można ustawić dynamicznie <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>właściwość na nazwę właściwości, utworzyć programu obsługi zdarzeń dla <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>zdarzeń i dostosować <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>Właściwości zgodnie z potrzebami.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>"
  example:
  - "The following example shows how to use a user-supplied value to calculate a value in the returned data. The user can enter a value in the text box that represents the number of manufacturing days. That value is divided by a value from a database that represents the number of days to manufacture a product. The returned value indicates how many products can be manufactured during the specified number of days. The user's input is included in the Select command through the SelectParameters collection.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_129_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_129_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Parametry, które są używane do tworzenia klauzuli Select."
  overload: System.Web.UI.WebControls.LinqDataSource.SelectParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  id: StoreOriginalValuesInViewState
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: StoreOriginalValuesInViewState
  nameWithType: LinqDataSource.StoreOriginalValuesInViewState
  fullName: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Pobiera lub ustawia wartość wskazującą, czy dane ze źródła danych powinny być przechowywane w stan widoku, aby upewnić się, że dane nie został zmieniony przez inny proces przed jego zaktualizowane lub usunięte."
  remarks: "Domyślnie, kiedy aktualizować i usuwać operacje zostały włączone, <xref:System.Web.UI.WebControls.LinqDataSource>Formant przechowuje oryginalnych wartości dla wszystkich rekordów w widoku stanu.</xref:System.Web.UI.WebControls.LinqDataSource> <xref:System.Web.UI.WebControls.LinqDataSource>Formant przechowuje wartości dla wszystkich kluczy podstawowych i wszystkie właściwości nie jest oznaczony atrybutem `UpdateCheck.Never` w `Column` atrybutu.</xref:System.Web.UI.WebControls.LinqDataSource> Możesz ustawić `UpdateCheck` właściwość `Column` atrybutu w [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)].       LINQ do SQL aktualizuje lub usuwa dane, sprawdza wartości w widoku stanu względem bieżącej wartości w źródle danych. Jeśli wartości nie są zgodne, rekord źródła danych został zmieniony. W takim przypadku LINQ do SQL zgłasza wyjątek i nie kontynuować aktualizację lub operacji usuwania. Aby uzyskać więcej informacji dotyczących składnika LINQ to SQL, zobacz [LINQ do SQL](~/add/includes/ajax-current-ext-md.md).       Przechowywanie oryginalnych wartości w widoku stanu może spowodować, że rozmiar strony, aby stać się niepotrzebnie i mogą uwidaczniać poufne dane do złośliwy użytkownik. Możesz wyłączyć przechowywanie wartości w widoku stanu, ustawiając właściwość StoreOriginalValuesInViewState `false`. Jeśli to zrobisz, musisz podać własne sposób, aby upewnić się, że dane nie uległy zmianie. Jeśli ustawiono właściwość StoreOriginalValuesInViewState `false`, oryginalnych wartości nie są zachowywane w stan widoku formantu powiązanego z danymi. W takim przypadku LINQ do SQL nie może sprawdzić integralności danych. LINQ do SQL zgłosi wyjątek, który wskazuje na konflikt danych, nawet jeśli nie zmienił faktycznie danych w źródle danych.       Jeśli źródła danych zawiera pola sygnatury czasowej, który jest automatycznie aktualizowany podczas aktualizacji, można przechowywać tylko tej wartości w widoku stanu. W takim przypadku ma ustawioną właściwość sygnatury czasowej w klasie jednostki `IsVersion=true` i wszystkie właściwości są ustawione na `UpdateCheck.Never`. Ponieważ pola sygnatury czasowej jest automatycznie aktualizowany przez bazę danych, za każdym razem, gdy zmiany danych w tym rekordzie, LINQ do SQL określa z tej wartości, jeśli dane zostały zmienione. Pozwala to zmniejszyć rozmiar stan widoku, i jest narażony żadnych poufnych danych. LINQ do SQL sprawdza spójność danych przez porównanie wartości sygnatury czasowej w widoku stanu o wartości znaczników czasu w bazie danych. Aby uzyskać więcej informacji, zobacz [wskazówki: używanie sygnatury czasowej z formantu LinqDataSource, aby sprawdzić integralność danych](http://msdn.microsoft.com/en-us/e7700162-4f05-4130-81f7-3be1361027fa)."
  syntax:
    content: public bool StoreOriginalValuesInViewState { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli wartości będą przechowywane w widoku stanu; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Wartość domyślna to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType
  id: System#Web#DynamicData#IDynamicDataSource#ContextType
  isEii: true
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: System.Web.DynamicData.IDynamicDataSource.ContextType
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Opis tego elementu członkowskiego, zobacz <xref href=&quot;System.Web.DynamicData.IDynamicDataSource&quot;> </xref>."
  remarks: "Ten element jest jawną implementacją elementu interfejsu. Można go używać tylko wtedy, gdy <xref:System.Web.UI.WebControls.LinqDataSource>wystąpienia jest rzutowane na <xref:System.Web.DynamicData.IDynamicDataSource>interfejsu.</xref:System.Web.DynamicData.IDynamicDataSource> </xref:System.Web.UI.WebControls.LinqDataSource>"
  syntax:
    content: Type System.Web.DynamicData.IDynamicDataSource.ContextType { get; set; }
    return:
      type: System.Type
      description: "Typ, który jest skojarzony z klasą."
  overload: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName
  id: System#Web#DynamicData#IDynamicDataSource#EntitySetName
  isEii: true
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: System.Web.DynamicData.IDynamicDataSource.EntitySetName
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Opis tego elementu członkowskiego, zobacz <xref href=&quot;System.Web.DynamicData.IDynamicDataSource&quot;> </xref>."
  remarks: "Ten element jest jawną implementacją elementu interfejsu. Można go używać tylko wtedy, gdy <xref:System.Web.UI.WebControls.LinqDataSource>wystąpienia jest rzutowane na <xref:System.Web.DynamicData.IDynamicDataSource>interfejsu.</xref:System.Web.DynamicData.IDynamicDataSource> </xref:System.Web.UI.WebControls.LinqDataSource>"
  syntax:
    content: string System.Web.DynamicData.IDynamicDataSource.EntitySetName { get; set; }
    return:
      type: System.String
      description: "Nazwa jednostki."
  overload: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.TableName
  id: TableName
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: TableName
  nameWithType: LinqDataSource.TableName
  fullName: System.Web.UI.WebControls.LinqDataSource.TableName
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Pobiera lub ustawia nazwę właściwości lub pola w klasa kontekstu danych, która reprezentuje zbierania danych."
  remarks: "Ustaw właściwość TableName nazwę właściwości lub pola, które reprezentuje dane, które ma zostać pobrane. Jeśli łączysz się z tabeli bazy danych, nazwa właściwości jest zwykle taka sama jak nazwa tabeli. Podczas łączenia z do zbierania danych w pamięci ustaw właściwość TableName nazwę właściwości lub pola, które zwraca zbierania danych.       Można przypisać właściwości, która zwraca dowolnego typu na właściwość TableName dla operacji pobierania. Jeśli nie implementuje obiektu reprezentowanego przez właściwość <xref:System.Collections.IEnumerable>, <xref:System.Web.UI.WebControls.LinqDataSource>formant będzie automatycznie zawijany obiekt w wystąpieniu <xref:System.Collections.IEnumerable>obiektu.</xref:System.Collections.IEnumerable> </xref:System.Web.UI.WebControls.LinqDataSource> </xref:System.Collections.IEnumerable>       Aby włączyć automatyczną aktualizację, wstawiania lub usuwania działań, klasy, która jest przypisana do <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>właściwości musi pochodzić od <xref:System.Data.Linq.DataContext>i właściwości, przypisane do właściwości musi pochodzić od <xref:System.Data.Linq.Table%601>.</xref:System.Data.Linq.Table%601> właściwość TableName</xref:System.Data.Linq.DataContext> </xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>       Aby uzyskać informacje o wybieraniu danych z wystąpienia klasy, zobacz <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>Właściwości.</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>"
  example:
  - "The following example shows two <xref:System.Web.UI.WebControls.LinqDataSource> controls. In one <xref:System.Web.UI.WebControls.LinqDataSource> control, the TableName property is set to a property in a class. That property returns an array of strings. In the other <xref:System.Web.UI.WebControls.LinqDataSource> control, the TableName property is set to a property that represents a database table.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_811_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_811_1.aspx)]  \n  \n The class named `ExampleDataContext` that represents the database table is not shown in this example. For this example to work, you must create this class by adding a LINQ to SQL class named Example.dbml and dragging a table named Movie onto the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)]. A class named `ExampleDataContext` with a property named `Movies` is generated.  \n  \n The following example shows the class named `MovieLibrary` that is referenced in the <xref:System.Web.UI.WebControls.LinqDataSource> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_811_2.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_811_2.vb)]"
  syntax:
    content: public string TableName { get; set; }
    return:
      type: System.String
      description: "Ciąg zawierający nazwę właściwości, który zawiera kolekcję danych."
  overload: System.Web.UI.WebControls.LinqDataSource.TableName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  id: Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Update(IDictionary,IDictionary,IDictionary)
  nameWithType: LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Wykonuje operację aktualizacji."
  remarks: "Zazwyczaj nie trzeba wywołać metodę aktualizacja w kodzie. Kontrolki powiązane z danymi automatycznie będzie wywoływać metody aktualizacji, gdy użytkownik podejmuje działania w celu zaktualizowania rekordu. Jeśli chcesz utworzyć własny proces aktualizowania danych jawnie wywołać metody aktualizacji."
  example:
  - "The following example shows how to programmatically update a record in the data source after the user clicks a button. The code passes a <xref:System.Collections.Specialized.ListDictionary> object that contains the key value, a <xref:System.Collections.Specialized.ListDictionary> object that contains the original values, and a <xref:System.Collections.Specialized.ListDictionary> object that contains the new values to the Update method.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Update#1](~/add/codesnippet/csharp/6a1b9704-8770-4c58-8934-_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update#1](~/add/codesnippet/visualbasic/6a1b9704-8770-4c58-8934-_1.vb)]  \n  \n The following example shows the markup for the previous example.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Update#2](~/add/codesnippet/csharp/6a1b9704-8770-4c58-8934-_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update#2](~/add/codesnippet/visualbasic/6a1b9704-8770-4c58-8934-_2.aspx)]"
  syntax:
    content: public int Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);
    parameters:
    - id: keys
      type: System.Collections.IDictionary
      description: "Wartości klucza wiersza dla rekordów do aktualizacji."
    - id: values
      type: System.Collections.IDictionary
      description: "Wartości wierszy do zaktualizowania w źródle danych."
    - id: oldValues
      type: System.Collections.IDictionary
      description: "Wartości wierszy, które są oceniane w celu wykrycia konfliktów danych."
    return:
      type: System.Int32
      description: "Liczba rekordów dotyczy operacji aktualizacji."
  overload: System.Web.UI.WebControls.LinqDataSource.Update*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Updated
  id: Updated
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Updated
  nameWithType: LinqDataSource.Updated
  fullName: System.Web.UI.WebControls.LinqDataSource.Updated
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Występuje po zakończeniu operacji aktualizacji."
  remarks: "Obsłuż zdarzenie zaktualizowane, aby przechwytywać wszelkie wyjątki z operacji aktualizacji lub sprawdzać wartości parametrów wyjściowych po zakończeniu operacji aktualizacji. Parametry wyjściowe są dostępne z <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>obiekt, który zostanie przekazany do procedury obsługi zdarzeń.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Updated;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  id: UpdateParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: UpdateParameters
  nameWithType: LinqDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ta kolekcja nie jest używany przez <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> klasy."
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Kolekcja parametrów."
  overload: System.Web.UI.WebControls.LinqDataSource.UpdateParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Updating
  id: Updating
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Updating
  nameWithType: LinqDataSource.Updating
  fullName: System.Web.UI.WebControls.LinqDataSource.Updating
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Występuje przed wykonaniem operacji aktualizacji."
  remarks: "Obsługuj zdarzenie aktualizacji do sprawdzania poprawności obiektu, należy zaktualizować, aby sprawdzić błędy sprawdzania poprawności danych z klasy danych, aby zmienić wartość przed wykonaniem operacji aktualizacji lub anulować operacji aktualizacji. <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>Obiekt, który zostanie przekazany do procedury obsługi zdarzeń zawiera obiekt oryginalny i zaktualizowany obiekt.</xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>       Jeśli wystąpi błąd sprawdzania poprawności podczas operacji aktualizacji, <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>obiekt zawiera wyjątki sprawdzania poprawności, które są generowane przez klasy danych.</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> Jeśli wartość aktualizacji nie jest zgodny z typem właściwości w klasie danych lub nie zostały spełnione niestandardowego sprawdzania wystąpienia błędu weryfikacji. Program obsługi zdarzeń dla zdarzenia aktualizacji możesz pobrać wyjątki poprawności i podejmij odpowiednią akcję.       Jeśli w obsłudze zdarzeń dla zdarzenia aktualizacji jest zgłaszany wyjątek, musi obsługiwać wyjątek w tej obsłudze zdarzeń. Wyjątek nie zostaną przekazane do programu obsługi zdarzeń dla <xref:System.Web.UI.WebControls.LinqDataSource.Updated>zdarzenia (za pośrednictwem <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>Właściwość <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>obiektu).</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Updated> <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>Właściwość zawiera tylko wyjątki, które są generowane po zdarzeniu aktualizacji.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Updating event. The code compares properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to see whether a value has changed. If the value has changed, a value of the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_16_1.vb)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_16_1.cs)]  \n  \n The following example shows an event handler for the Updating event that retrieves validation exceptions.  \n  \n```vb#  \nProtected Sub LinqDataSource_Updating(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceUpdateEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message & \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Updating(object sender,   \n        LinqDataSourceUpdateEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```  \n  \n The previous example retrieves validation exceptions. An exception might be thrown if a value does not match the type of the property. It might also be thrown from a customized check such as the one in the following example. The `OnAgeChanging` method checks that the number for the `Age` property is not negative.  \n  \n```c#  \npartial void  OnAgeChanging(int? value)  \n{  \n    if (value < 0)  \n    {  \n        throw new Exception(\"Age cannot be a negative number.\");  \n    }  \n}  \n```  \n  \n```vb#  \nPrivate Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  \n    If (value < 0) Then  \n        Throw New Exception(\"Age cannot be a negative number.\")  \n    End If  \nEnd Sub  \n```"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> Updating;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs}
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Where
  id: Where
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Where
  nameWithType: LinqDataSource.Where
  fullName: System.Web.UI.WebControls.LinqDataSource.Where
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Pobiera lub ustawia wartość określającą, jaki warunki musi być prawdziwe dla rekordu do uwzględnienia w pobrane dane."
  remarks: "You use the Where property to specify the conditions for the record to be returned from a query. The syntax for the Where property is the same as the syntax for a LINQ Where clause in C#.  \n  \n You specify an expression that results in a Boolean value, and if the expression evaluates to `true` for a given row, the row is included in the result set. Expressions are composed of column names, comparison operators, and values to compare to, as shown in the following example:  \n  \n```  \n<asp:LinqDataSource ... Where=\"Price > 50\"...>  \n```  \n  \n To specify multiple expressions linked by logical `AND` or `OR` operators, you use `&&` as a logical AND operator and `||` as a logical OR operator, as shown in the following example:  \n  \n```  \n<asp:LinqDataSource ... Where=\"Price > 50 && Price < 100\"...>  \n<asp:LinqDataSource ... Where=\"Price <= 50 || Price >= 100\"...>  \n```  \n  \n If you want to test a property against a literal string value, the literal string value must be enclosed in double quotation marks. To do this in markup, enclose the Where clause value in single quotation marks, as shown in the following example:  \n  \n```  \n<asp:LinqDataSource ... Where='Category = \"Sports\"' ... >  \n```  \n  \n To test against a literal string value in code, use escape characters that are appropriate to the language you are using in order to insert double quotation marks, as shown in the following example:  \n  \n```vb#  \nLinqDataSource1.Where = \"Category = \"\"Sports\"\"\"  \n```  \n  \n```c#  \nLinqDataSource1.Where = \"Category = \\\"Sports\\\"\";  \n```  \n  \n If you want to test whether a string is greater than or less than another string, you must use methods of the <xref:System.String> class instead of using `<` or `>` operators between the column name and the string value. The following examples show how to select rows that have Category values that are less than, less than or equal to, greater than, or greater than or equal to \"Sports\":  \n  \n```  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") < 0' ... >  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") <= 0' ... >  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") > 0' ... >  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") >= 0' ... >  \n```  \n  \n You can also use other methods of the <xref:System.String> class, such as <xref:System.String.StartsWith%2A>, <xref:System.String.EndsWith%2A>, and <xref:System.String.Contains%2A>. For more information about how to compare strings, see [Comparing Strings](~/add/includes/ajax-current-ext-md.md). For more information about Where clause syntax, see [C# Operators](~/add/includes/ajax-current-ext-md.md) and [where clause](~/add/includes/ajax-current-ext-md.md).  \n  \n In addition to filtering based on static values that you define when you create the Web page, you can filter based on dynamic values that are evaluated at run time. In that case, you include a named parameter in the Where property that acts as a placeholder for the value. You then add a parameter that has the matching name to the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.  \n  \n Alternatively, you can set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property to `true` and define the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection. When the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property is `true`, you do not have to include the named parameters in the Where property. Instead, the <xref:System.Web.UI.WebControls.LinqDataSource> control automatically generates the Where clause from the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> property.  \n  \n For more information about how to filter data, see [Walkthrough: Selecting and Filtering a Subset of Data with the LinqDataSource and GridView Controls](http://msdn.microsoft.com/en-us/c1cca3e8-86e4-4e69-a29f-1c05b91f2205)."
  example:
  - "The following example shows how to filter the data returned from a query based on a static condition.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_778_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/csharp/p-system.web.ui.webcontr_778_1.aspx)]  \n  \n The following example shows how to filter the data based on a value that is provided by the user at run time. In this example a <xref:System.Web.UI.WebControls.DropDownList> control and a <xref:System.Web.UI.WebControls.GridView> control are displayed on the page. When the user selects one of the values in the <xref:System.Web.UI.WebControls.DropDownList> control, the <xref:System.Web.UI.WebControls.LinqDataSource> control selects from the `Products` table only rows that have `UserPrice` values equal to the selected value. The <xref:System.Web.UI.WebControls.GridView> control then displays the filtered data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_778_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_778_2.aspx)]"
  syntax:
    content: public string Where { get; set; }
    return:
      type: System.String
      description: "Ciąg, który jest używany do tworzenia Where klauzuli."
  overload: System.Web.UI.WebControls.LinqDataSource.Where*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.WhereParameters
  id: WhereParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: WhereParameters
  nameWithType: LinqDataSource.WhereParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.WhereParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Pobiera zbiór parametrów, który jest używany do tworzenia Where klauzuli."
  remarks: "<xref:System.Web.UI.WebControls.LinqDataSource>Kontroli używa parametrów w kolekcji właściwości WhereParameters do utworzenia Where klauzuli w czasie wykonywania.</xref:System.Web.UI.WebControls.LinqDataSource> Dodawanie parametrów do kolekcji właściwości WhereParameters, można programowo ustawić co najmniej jeden z warunków w klauzuli Where klauzuli. Na przykład można przeszukać tabeli bazy danych dla rekordów o nazwisko równa wartości <xref:System.Web.UI.WebControls.TextBox>kontroli.</xref:System.Web.UI.WebControls.TextBox> W takim przypadku dodać parametr do kolekcji właściwości WhereParameters wartość pola tekstowego.       Jeśli nie trzeba ustawić wartość w czasie wykonywania w przypadku, gdy klauzula, nie trzeba używać kolekcji właściwości WhereParameters. Można zdefiniować pól do pobrania w <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>Właściwości.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Na przykład, aby zwrócić wartości z tabeli bazy danych gdzie `LastName` jest równe &quot;Zawadzki&quot; w znaczniku, ustaw <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>właściwości `&quot;LastName = &quot;Adams&quot;&quot;` bez żadnych parametrów.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>       Można ustawić wartości w zbiorze właściwości WhereParameters, przypisać nazwę każdego parametru, a następnie dodaj element zastępczy w <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>właściwości tego parametru.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> W klauzuli Where klauzuli każdej nazwie parametru jest poprzedzony znakiem @."
  example:
  - "The following example shows how to use the WhereParameters collection to dynamically create the Where clause. The <xref:System.Web.UI.WebControls.LinqDataSource> control returns all the records with a value in the `Price` column that is greater than the value selected by the user in a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_594_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_594_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection WhereParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Kolekcja parametrów, które są używane do tworzenia Where w klauzuli <xref:System.Web.UI.WebControls.LinqDataSource.Where*>Właściwości.</xref:System.Web.UI.WebControls.LinqDataSource.Where*>"
  overload: System.Web.UI.WebControls.LinqDataSource.WhereParameters*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.ContextDataSource
  isExternal: false
  name: System.Web.UI.WebControls.ContextDataSource
- uid: System.Web.UI.WebControls.LinqDataSource.#ctor
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: LinqDataSource()
  nameWithType: LinqDataSource.LinqDataSource()
  fullName: System.Web.UI.WebControls.LinqDataSource.LinqDataSource()
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateOrderByClause
  nameWithType: LinqDataSource.AutoGenerateOrderByClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateWhereClause
  nameWithType: LinqDataSource.AutoGenerateWhereClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
- uid: System.Web.UI.WebControls.LinqDataSource.AutoPage
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoPage
  nameWithType: LinqDataSource.AutoPage
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoPage
- uid: System.Web.UI.WebControls.LinqDataSource.AutoSort
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoSort
  nameWithType: LinqDataSource.AutoSort
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoSort
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreated
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextCreated
  nameWithType: LinqDataSource.ContextCreated
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreated
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceStatusEventArgs>
  nameWithType: EventHandler<LinqDataSourceStatusEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs
    name: LinqDataSourceStatusEventArgs
    nameWithType: LinqDataSourceStatusEventArgs
    fullName: LinqDataSourceStatusEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreating
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextCreating
  nameWithType: LinqDataSource.ContextCreating
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreating
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceContextEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceContextEventArgs>
  nameWithType: EventHandler<LinqDataSourceContextEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceContextEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceContextEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceContextEventArgs
    name: LinqDataSourceContextEventArgs
    nameWithType: LinqDataSourceContextEventArgs
    fullName: LinqDataSourceContextEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextDisposing
  nameWithType: LinqDataSource.ContextDisposing
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceDisposeEventArgs>
  nameWithType: EventHandler<LinqDataSourceDisposeEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs
    name: LinqDataSourceDisposeEventArgs
    nameWithType: LinqDataSourceDisposeEventArgs
    fullName: LinqDataSourceDisposeEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextTypeName
  nameWithType: LinqDataSource.ContextTypeName
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateQueryableView()
  nameWithType: LinqDataSource.CreateQueryableView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView()
- uid: System.Web.UI.WebControls.QueryableDataSourceView
  parent: System.Web.UI.WebControls
  isExternal: false
  name: QueryableDataSourceView
  nameWithType: QueryableDataSourceView
  fullName: System.Web.UI.WebControls.QueryableDataSourceView
- uid: System.Web.UI.WebControls.LinqDataSource.CreateView
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateView()
  nameWithType: LinqDataSource.CreateView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateView()
- uid: System.Web.UI.WebControls.LinqDataSourceView
  parent: System.Web.UI.WebControls
  isExternal: false
  name: LinqDataSourceView
  nameWithType: LinqDataSourceView
  fullName: System.Web.UI.WebControls.LinqDataSourceView
- uid: System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Delete(IDictionary,IDictionary)
  nameWithType: LinqDataSource.Delete(IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Delete(IDictionary,IDictionary)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Web.UI.WebControls.LinqDataSource.Deleted
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Deleted
  nameWithType: LinqDataSource.Deleted
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleted
- uid: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: LinqDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.ParameterCollection
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ParameterCollection
  nameWithType: ParameterCollection
  fullName: System.Web.UI.WebControls.ParameterCollection
- uid: System.Web.UI.WebControls.LinqDataSource.Deleting
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Deleting
  nameWithType: LinqDataSource.Deleting
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleting
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceDeleteEventArgs>
  nameWithType: EventHandler<LinqDataSourceDeleteEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs
    name: LinqDataSourceDeleteEventArgs
    nameWithType: LinqDataSourceDeleteEventArgs
    fullName: LinqDataSourceDeleteEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.EnableDelete
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableDelete
  nameWithType: LinqDataSource.EnableDelete
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableDelete
- uid: System.Web.UI.WebControls.LinqDataSource.EnableInsert
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableInsert
  nameWithType: LinqDataSource.EnableInsert
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableInsert
- uid: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableObjectTracking
  nameWithType: LinqDataSource.EnableObjectTracking
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
- uid: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableUpdate
  nameWithType: LinqDataSource.EnableUpdate
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
- uid: System.Web.UI.WebControls.LinqDataSource.GroupBy
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupBy
  nameWithType: LinqDataSource.GroupBy
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupBy
- uid: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupByParameters
  nameWithType: LinqDataSource.GroupByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Insert(IDictionary)
  nameWithType: LinqDataSource.Insert(IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Insert(IDictionary)
- uid: System.Web.UI.WebControls.LinqDataSource.Inserted
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Inserted
  nameWithType: LinqDataSource.Inserted
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserted
- uid: System.Web.UI.WebControls.LinqDataSource.Inserting
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Inserting
  nameWithType: LinqDataSource.Inserting
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserting
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceInsertEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceInsertEventArgs>
  nameWithType: EventHandler<LinqDataSourceInsertEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
    name: LinqDataSourceInsertEventArgs
    nameWithType: LinqDataSourceInsertEventArgs
    fullName: LinqDataSourceInsertEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.InsertParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: LinqDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.InsertParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnInit(EventArgs)
  nameWithType: LinqDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnInit(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnUnload(EventArgs)
  nameWithType: LinqDataSource.OnUnload(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnUnload(EventArgs)
- uid: System.Web.UI.WebControls.LinqDataSource.OrderBy
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderBy
  nameWithType: LinqDataSource.OrderBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderByParameters
  nameWithType: LinqDataSource.OrderByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsBy
  nameWithType: LinqDataSource.OrderGroupsBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsByParameters
  nameWithType: LinqDataSource.OrderGroupsByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Select
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Select
  nameWithType: LinqDataSource.Select
  fullName: System.Web.UI.WebControls.LinqDataSource.Select
- uid: System.Web.UI.WebControls.LinqDataSource.Selected
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Selected
  nameWithType: LinqDataSource.Selected
  fullName: System.Web.UI.WebControls.LinqDataSource.Selected
- uid: System.Web.UI.WebControls.LinqDataSource.Selecting
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Selecting
  nameWithType: LinqDataSource.Selecting
  fullName: System.Web.UI.WebControls.LinqDataSource.Selecting
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceSelectEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceSelectEventArgs>
  nameWithType: EventHandler<LinqDataSourceSelectEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceSelectEventArgs
    name: LinqDataSourceSelectEventArgs
    nameWithType: LinqDataSourceSelectEventArgs
    fullName: LinqDataSourceSelectEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.SelectParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: LinqDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.SelectParameters
- uid: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: StoreOriginalValuesInViewState
  nameWithType: LinqDataSource.StoreOriginalValuesInViewState
  fullName: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.ContextType
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.EntitySetName
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
- uid: System.Web.UI.WebControls.LinqDataSource.TableName
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: TableName
  nameWithType: LinqDataSource.TableName
  fullName: System.Web.UI.WebControls.LinqDataSource.TableName
- uid: System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Update(IDictionary,IDictionary,IDictionary)
  nameWithType: LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
- uid: System.Web.UI.WebControls.LinqDataSource.Updated
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Updated
  nameWithType: LinqDataSource.Updated
  fullName: System.Web.UI.WebControls.LinqDataSource.Updated
- uid: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: LinqDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Updating
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Updating
  nameWithType: LinqDataSource.Updating
  fullName: System.Web.UI.WebControls.LinqDataSource.Updating
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceUpdateEventArgs>
  nameWithType: EventHandler<LinqDataSourceUpdateEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
    name: LinqDataSourceUpdateEventArgs
    nameWithType: LinqDataSourceUpdateEventArgs
    fullName: LinqDataSourceUpdateEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.Where
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Where
  nameWithType: LinqDataSource.Where
  fullName: System.Web.UI.WebControls.LinqDataSource.Where
- uid: System.Web.UI.WebControls.LinqDataSource.WhereParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: WhereParameters
  nameWithType: LinqDataSource.WhereParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.WhereParameters
- uid: System.Web.UI.WebControls.LinqDataSource.#ctor*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: LinqDataSource
  nameWithType: LinqDataSource.LinqDataSource
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateOrderByClause
  nameWithType: LinqDataSource.AutoGenerateOrderByClause
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateWhereClause
  nameWithType: LinqDataSource.AutoGenerateWhereClause
- uid: System.Web.UI.WebControls.LinqDataSource.AutoPage*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoPage
  nameWithType: LinqDataSource.AutoPage
- uid: System.Web.UI.WebControls.LinqDataSource.AutoSort*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoSort
  nameWithType: LinqDataSource.AutoSort
- uid: System.Web.UI.WebControls.LinqDataSource.ContextTypeName*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextTypeName
  nameWithType: LinqDataSource.ContextTypeName
- uid: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateQueryableView
  nameWithType: LinqDataSource.CreateQueryableView
- uid: System.Web.UI.WebControls.LinqDataSource.CreateView*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateView
  nameWithType: LinqDataSource.CreateView
- uid: System.Web.UI.WebControls.LinqDataSource.Delete*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Delete
  nameWithType: LinqDataSource.Delete
- uid: System.Web.UI.WebControls.LinqDataSource.DeleteParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: LinqDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.LinqDataSource.EnableDelete*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableDelete
  nameWithType: LinqDataSource.EnableDelete
- uid: System.Web.UI.WebControls.LinqDataSource.EnableInsert*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableInsert
  nameWithType: LinqDataSource.EnableInsert
- uid: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableObjectTracking
  nameWithType: LinqDataSource.EnableObjectTracking
- uid: System.Web.UI.WebControls.LinqDataSource.EnableUpdate*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableUpdate
  nameWithType: LinqDataSource.EnableUpdate
- uid: System.Web.UI.WebControls.LinqDataSource.GroupBy*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupBy
  nameWithType: LinqDataSource.GroupBy
- uid: System.Web.UI.WebControls.LinqDataSource.GroupByParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupByParameters
  nameWithType: LinqDataSource.GroupByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Insert*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Insert
  nameWithType: LinqDataSource.Insert
- uid: System.Web.UI.WebControls.LinqDataSource.InsertParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: LinqDataSource.InsertParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OnInit*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnInit
  nameWithType: LinqDataSource.OnInit
- uid: System.Web.UI.WebControls.LinqDataSource.OnUnload*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnUnload
  nameWithType: LinqDataSource.OnUnload
- uid: System.Web.UI.WebControls.LinqDataSource.OrderBy*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderBy
  nameWithType: LinqDataSource.OrderBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderByParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderByParameters
  nameWithType: LinqDataSource.OrderByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsBy
  nameWithType: LinqDataSource.OrderGroupsBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsByParameters
  nameWithType: LinqDataSource.OrderGroupsByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Select*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Select
  nameWithType: LinqDataSource.Select
- uid: System.Web.UI.WebControls.LinqDataSource.SelectParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: LinqDataSource.SelectParameters
- uid: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: StoreOriginalValuesInViewState
  nameWithType: LinqDataSource.StoreOriginalValuesInViewState
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.ContextType
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.EntitySetName
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
- uid: System.Web.UI.WebControls.LinqDataSource.TableName*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: TableName
  nameWithType: LinqDataSource.TableName
- uid: System.Web.UI.WebControls.LinqDataSource.Update*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Update
  nameWithType: LinqDataSource.Update
- uid: System.Web.UI.WebControls.LinqDataSource.UpdateParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: LinqDataSource.UpdateParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Where*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Where
  nameWithType: LinqDataSource.Where
- uid: System.Web.UI.WebControls.LinqDataSource.WhereParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: WhereParameters
  nameWithType: LinqDataSource.WhereParameters
