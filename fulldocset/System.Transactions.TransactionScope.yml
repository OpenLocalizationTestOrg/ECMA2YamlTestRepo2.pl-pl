### YamlMime:ManagedReference
items:
- uid: System.Transactions.TransactionScope
  id: TransactionScope
  children:
  - System.Transactions.TransactionScope.#ctor
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.Complete
  - System.Transactions.TransactionScope.Dispose
  langs:
  - csharp
  name: TransactionScope
  nameWithType: TransactionScope
  fullName: System.Transactions.TransactionScope
  type: Class
  summary: "Powoduje, że blok kodu transakcyjnego. Ta klasa nie może być dziedziczona."
  remarks: "<xref:System.Transactions>Infrastruktura zapewnia zarówno jawne programowania model na podstawie <xref:System.Transactions.Transaction>klasy, a także niejawne model programowania przy użyciu klasy elementu TransactionScope, w którym transakcje są automatycznie zarządzane przez infrastrukturę.</xref:System.Transactions.Transaction> </xref:System.Transactions>      > [!IMPORTANT] > Zaleca się utworzenie niejawne transakcji za pomocą klasy elementu TransactionScope tak, aby kontekstu transakcja otoczenia automatycznie odbywa się. Należy też używać elementu TransactionScope i <xref:System.Transactions.DependentTransaction>klasy dla aplikacji, które korzystają z tej samej transakcji w wielu wywołań funkcji lub wielu wywołań wątku.</xref:System.Transactions.DependentTransaction> Aby uzyskać więcej informacji na ten model, zobacz [implementacji niejawnej transakcji przy użyciu zakresu transakcji](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) tematu. Aby uzyskać więcej informacji na temat pisania transakcyjnych aplikacji, zobacz [zapisywania transakcyjnych aplikacji](http://msdn.microsoft.com/en-us/4a7cc4d1-0891-4605-941f-a933b9ce5bc8).       Podczas tworzenia wystąpienia TransactionScope przez `new` instrukcji, która transakcja brać udziału w określa Menedżera transakcji. Po określeniu zakresu zawsze uczestniczy w tej transakcji. Decyzja jest oparta na dwa składniki: Określa, czy transakcja otoczenia jest obecny i wartość `TransactionScopeOption` parametru w konstruktorze.  Transakcja otoczenia jest transakcji, który wykonuje kodu. Odwołanie do transakcja otoczenia można uzyskać przez wywołanie metody statycznej <xref:System.Transactions.Transaction.Current%2A>właściwości <xref:System.Transactions.Transaction>klasy.</xref:System.Transactions.Transaction> </xref:System.Transactions.Transaction.Current%2A> Aby uzyskać więcej informacji o sposobie użycia tego parametru, zobacz sekcję &quot;Zarządzanie przepływu transakcji&quot; [implementacji niejawnej transakcji przy użyciu zakresu transakcji](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) tematu.       Jeśli żaden wyjątek występuje w zakresie transakcji (czyli między inicjowania elementu TransactionScope obiektów i wywoływania z jego <xref:System.Transactions.TransactionScope.Dispose%2A>— Metoda), można kontynuować transakcji, w których uczestniczy zakresu, a następnie.</xref:System.Transactions.TransactionScope.Dispose%2A> Jeśli wyjątek jest wykonywane w zakresie transakcji, transakcji, w których uczestniczy będzie można wycofać.       Gdy aplikacja wykonuje całą pracę chce wykonać w ramach transakcji, należy wywołać <xref:System.Transactions.TransactionScope.Complete%2A>metody tylko raz do informowania menedżera transakcji jest można zatwierdzić transakcji.</xref:System.Transactions.TransactionScope.Complete%2A> Nie można wywołać tej metody przerywa transakcję.       Wywołanie <xref:System.Transactions.TransactionScope.Dispose%2A>Metoda oznacza koniec zakresu transakcji.</xref:System.Transactions.TransactionScope.Dispose%2A> Wyjątki, które występują po wywołaniu tej metody nie może mieć wpływ na transakcji.       Jeśli zmodyfikujesz wartość <xref:System.Transactions.Transaction.Current%2A>wewnątrz zakresu, jest zwracany wyjątek, kiedy <xref:System.Transactions.TransactionScope.Dispose%2A>jest wywoływana.</xref:System.Transactions.TransactionScope.Dispose%2A> </xref:System.Transactions.Transaction.Current%2A> Jednak na końcu zakresu, przywróceniu poprzedniej wartości. Ponadto, jeśli wywołujesz <xref:System.Transactions.TransactionScope.Dispose%2A>na <xref:System.Transactions.Transaction.Current%2A>wewnątrz zakresu transakcji, który utworzył transakcję, transakcja jest przerywana na końcu zakresu.</xref:System.Transactions.Transaction.Current%2A> </xref:System.Transactions.TransactionScope.Dispose%2A>"
  example:
  - "The following example demonstrates how to use the TransactionScope class to define a block of code to participate in a transaction.  \n  \n [!code-vb[TransactionScope#1](~/add/codesnippet/visualbasic/t-system.transactions.tr_0_1.vb)]\n [!code-cs[TransactionScope#1](~/add/codesnippet/csharp/t-system.transactions.tr_0_1.cs)]"
  syntax:
    content: 'public sealed class TransactionScope : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor
  id: '#ctor'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope()
  nameWithType: TransactionScope.TransactionScope()
  fullName: System.Transactions.TransactionScope.TransactionScope()
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> klasy."
  remarks: "Ten konstruktor tworzy nowy zakres transakcji z opcją zakresu transakcji równa <xref:System.Transactions.TransactionScopeOption>.</xref:System.Transactions.TransactionScopeOption> Oznacza to, że transakcji jest wymagane przez nowego zakresu i transakcja otoczenia jest używana, jeśli już istnieje. W przeciwnym razie tworzy nową transakcję przed wejściem do zakresu."
  syntax:
    content: public TransactionScope ();
    parameters: []
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)
  id: '#ctor(System.Transactions.Transaction)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction)
  nameWithType: TransactionScope.TransactionScope(Transaction)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> klasy i ustawia określonej transakcji jako transakcja otoczenia, dzięki czemu pracy transakcyjnej w zakresie używa tej transakcji."
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "Transakcja ma być ustawiona jako transakcja otoczenia, dzięki czemu pracy transakcyjnej w zakresie używa tej transakcji."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[Obsługiwane w programie .NET Framework 4.5.1 i nowszych wersjach]       Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> klasy z opcją określony przepływ asynchroniczny."
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "Wystąpienie <xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;> </xref> wyliczenie opisujące czy transakcja otoczenia skojarzone z zakresu transakcji będzie przepływać przez wątek kontynuacje, korzystając z zadania lub async/await async .NET — programowanie wzorce."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)
  id: '#ctor(System.Transactions.TransactionScopeOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> klasy określone wymagania."
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "Wystąpienie <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref> wyliczenia, które opisują wymagania dotyczące transakcji powiązanych z tym zakresem transakcji."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)
  id: '#ctor(System.Transactions.Transaction,System.TimeSpan)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction,TimeSpan)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> klasy z wartością określony limit czasu i ustawia określonej transakcji jako transakcja otoczenia, dzięki czemu pracy transakcyjnej w zakresie używa tej transakcji."
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse, TimeSpan scopeTimeout);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "Transakcja ma być ustawiona jako transakcja otoczenia, dzięki czemu pracy transakcyjnej w zakresie używa tej transakcji."
    - id: scopeTimeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>Po upływie którego zakresu transakcji upłynie limit czasu i przerywa transakcję.</xref:System.TimeSpan>"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[Obsługiwane w programie .NET Framework 4.5.1 i nowszych wersjach]       Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> klasy i ustawia określonej transakcji jako transakcja otoczenia, dzięki czemu pracy transakcyjnej w zakresie używa tej transakcji."
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "Transakcja ma być ustawiona jako transakcja otoczenia, dzięki czemu pracy transakcyjnej w zakresie używa tej transakcji."
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "Wystąpienie <xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;> </xref> wyliczenie opisujące czy transakcja otoczenia skojarzone z zakresu transakcji będzie przepływać przez wątek kontynuacje, korzystając z zadania lub async/await async .NET — programowanie wzorce."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TimeSpan)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> z określoną wartością limitu czasu i wymagań."
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, TimeSpan scopeTimeout);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "Wystąpienie <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref> wyliczenia, które opisują wymagania dotyczące transakcji powiązanych z tym zakresem transakcji."
    - id: scopeTimeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>Po upływie którego zakresu transakcji upłynie limit czasu i przerywa transakcję.</xref:System.TimeSpan>"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TransactionOptions)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> klasy określone wymagania."
  remarks: "Jeśli używasz `transactionOptions` parametr, aby określić <xref:System.Transactions.IsolationLevel>i zakres tworzy transakcję później, nowej transakcji jest skojarzony z poziomu izolacji określony.</xref:System.Transactions.IsolationLevel> Poziom izolacji jest przekazywany w wraz z transakcji, transakcja musi mieć poziom izolacji identyczne, czy jest zgłaszany wyjątek."
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions transactionOptions);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "Wystąpienie <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref> wyliczenia, które opisują wymagania dotyczące transakcji powiązanych z tym zakresem transakcji."
    - id: transactionOptions
      type: System.Transactions.TransactionOptions
      description: "A <xref href=&quot;System.Transactions.TransactionOptions&quot;> </xref> struktury, która opisuje opcje transakcji do użycia, jeśli utworzono nową transakcję. Jeśli istniejąca transakcja jest używany, wartość limitu czasu, w tym parametrze dotyczy zakresu transakcji. Jeśli przed jego usunięciu upływem tego czasu, transakcja została przerwana."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[Obsługiwane w programie .NET Framework 4.5.1 i nowszych wersjach]       Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> z określonych wymagań i opcji Przepływ asynchroniczny."
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "Wystąpienie <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref> wyliczenia, które opisują wymagania dotyczące transakcji powiązanych z tym zakresem transakcji."
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "Wystąpienie <xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;> </xref> wyliczenie opisujące czy transakcja otoczenia skojarzone z zakresu transakcji będzie przepływać przez wątek kontynuacje, korzystając z zadania lub async/await async .NET — programowanie wzorce."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)
  id: '#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> z określoną wartością limitu czasu i COM + współdziałanie wymagania i ustawia określonej transakcji jako transakcja otoczenia, dzięki czemu pracy transakcyjnej w zakresie używa tej transakcji."
  remarks: '**Uwaga** ta metoda używa <xref:System.Security.Permissions.SecurityAction>Aby zapobiec jest wywoływany z kodu niezaufane; jednak tylko bezpośredniego obiektu wywołującego jest wymagany do posiadał `FullTrust` zestaw uprawnień.</xref:System.Security.Permissions.SecurityAction>'
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse, TimeSpan scopeTimeout, System.Transactions.EnterpriseServicesInteropOption interopOption);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "Transakcja ma być ustawiona jako transakcja otoczenia, dzięki czemu pracy transakcyjnej w zakresie używa tej transakcji."
    - id: scopeTimeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>Po upływie którego zakresu transakcji upłynie limit czasu i przerywa transakcję.</xref:System.TimeSpan>"
    - id: interopOption
      type: System.Transactions.EnterpriseServicesInteropOption
      description: "Wystąpienie <xref href=&quot;System.Transactions.EnterpriseServicesInteropOption&quot;> </xref> wyliczenie opisujące jak skojarzonej transakcji współdziała z transakcji modelu COM +."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[Obsługiwane w programie .NET Framework 4.5.1 i nowszych wersjach]       Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> klasy z wartością określony limit czasu i ustawia określonej transakcji jako transakcja otoczenia, dzięki czemu pracy transakcyjnej w zakresie używa tej transakcji."
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse, TimeSpan scopeTimeout, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "Transakcja ma być ustawiona jako transakcja otoczenia, dzięki czemu pracy transakcyjnej w zakresie używa tej transakcji."
    - id: scopeTimeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>Po upływie którego zakresu transakcji upłynie limit czasu i przerywa transakcję.</xref:System.TimeSpan>"
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "Wystąpienie <xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;> </xref> wyliczenie opisujące czy transakcja otoczenia skojarzone z zakresu transakcji będzie przepływać przez wątek kontynuacje, korzystając z zadania lub async/await async .NET — programowanie wzorce."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[Obsługiwane w programie .NET Framework 4.5.1 i nowszych wersjach]       Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> z określona wartość limitu czasu, wymagań i opcji Przepływ asynchroniczny."
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, TimeSpan scopeTimeout, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "Wystąpienie <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref> wyliczenia, które opisują wymagania dotyczące transakcji powiązanych z tym zakresem transakcji."
    - id: scopeTimeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>Po upływie którego zakresu transakcji upłynie limit czasu i przerywa transakcję.</xref:System.TimeSpan>"
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "Wystąpienie <xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;> </xref> wyliczenie opisujące czy transakcja otoczenia skojarzone z zakresu transakcji będzie przepływać przez wątek kontynuacje, korzystając z zadania lub async/await async .NET — programowanie wzorce."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> z określonego zakresu i wymagania dotyczące współdziałania COM + i opcje transakcji."
  remarks: "Jeśli używasz `transactionOptions` parametr, aby określić <xref:System.Transactions.IsolationLevel>i zakres tworzy transakcję później, nowej transakcji jest skojarzony z poziomu izolacji określony.</xref:System.Transactions.IsolationLevel> Poziom izolacji jest przekazywany w wraz z transakcji, transakcja musi mieć poziom izolacji identyczne, czy jest zgłaszany wyjątek.       **Uwaga** ta metoda używa <xref:System.Security.Permissions.SecurityAction>Aby zapobiec jest wywoływany z kodu niezaufane; jednak tylko bezpośredniego obiektu wywołującego jest wymagany do posiadał `FullTrust` zestaw uprawnień.</xref:System.Security.Permissions.SecurityAction>"
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions transactionOptions, System.Transactions.EnterpriseServicesInteropOption interopOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "Wystąpienie <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref> wyliczenia, które opisują wymagania dotyczące transakcji powiązanych z tym zakresem transakcji."
    - id: transactionOptions
      type: System.Transactions.TransactionOptions
      description: "A <xref href=&quot;System.Transactions.TransactionOptions&quot;> </xref> struktury, która opisuje opcje transakcji do użycia, jeśli utworzono nową transakcję. Jeśli istniejąca transakcja jest używany, wartość limitu czasu, w tym parametrze dotyczy zakresu transakcji. Jeśli przed jego usunięciu upływem tego czasu, transakcja została przerwana."
    - id: interopOption
      type: System.Transactions.EnterpriseServicesInteropOption
      description: "Wystąpienie <xref href=&quot;System.Transactions.EnterpriseServicesInteropOption&quot;> </xref> wyliczenie opisujące jak skojarzonej transakcji współdziała z transakcji modelu COM +."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[Obsługiwane w programie .NET Framework 4.5.1 i nowszych wersjach]       Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> z określonych wymagań i opcji Przepływ asynchroniczny."
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions transactionOptions, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "Wystąpienie <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref> wyliczenia, które opisują wymagania dotyczące transakcji powiązanych z tym zakresem transakcji."
    - id: transactionOptions
      type: System.Transactions.TransactionOptions
      description: "A <xref href=&quot;System.Transactions.TransactionOptions&quot;> </xref> struktury, która opisuje opcje transakcji do użycia, jeśli utworzono nową transakcję. Jeśli istniejąca transakcja jest używany, wartość limitu czasu, w tym parametrze dotyczy zakresu transakcji. Jeśli przed jego usunięciu upływem tego czasu, transakcja została przerwana."
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "Wystąpienie <xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;> </xref> wyliczenie opisujące czy transakcja otoczenia skojarzone z zakresu transakcji będzie przepływać przez wątek kontynuacje, korzystając z zadania lub async/await async .NET — programowanie wzorce."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.Complete
  id: Complete
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: Complete()
  nameWithType: TransactionScope.Complete()
  fullName: System.Transactions.TransactionScope.Complete()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Wskazuje, że wszystkie operacje w zakresie zostały zakończone pomyślnie."
  remarks: "Po zakończeniu czy wszystkie operacje w zakresie zostały zakończone pomyślnie, należy wywołać tylko raz do tej metody do informowania menedżera transakcji, stan we wszystkich zasobów jest spójne, czy można można zatwierdzić transakcji. Jest bardzo dobrym rozwiązaniem, Umieść wywołanie jako ostatnią instrukcją w `using` bloku.       Aby uzyskać więcej informacji o sposobie użycia tej metody, zobacz [implementacji niejawnej transakcji przy użyciu zakresu transakcji](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) tematu.       Nie można wywołać tej metody przerywa transakcji, ponieważ Menedżer transakcji interpretuje jako awarii systemu lub wyjątki zgłaszane w zakresie transakcji. Jednak należy pamiętać, że wywołanie tej metody nie gwarantuje zatwierdzania transakcji. Jest tylko sposób informowania menedżera transakcji stan użytkownika. Po wywołaniu tej metody, nie jest już dostępne transakcja otoczenia za pośrednictwem <xref:System.Transactions.Transaction.Current%2A>Właściwości i wykonać tak powoduje wyjątek.</xref:System.Transactions.Transaction.Current%2A>       Rzeczywistą pracę zatwierdzania między Menedżera zasobów odbywa się na `End Using` instrukcji Jeśli <xref:System.Transactions.TransactionScope>utworzony obiekt transakcji.</xref:System.Transactions.TransactionScope> Jeśli nie utworzono transakcji, zatwierdzenia występuje zawsze, gdy <xref:System.Transactions.CommittableTransaction.Commit%2A>jest wywoływana przez właściciela <xref:System.Transactions.CommittableTransaction>obiektu.</xref:System.Transactions.CommittableTransaction> </xref:System.Transactions.CommittableTransaction.Commit%2A> W tym momencie Menedżera transakcji wywołuje zasobu menedżerów i informacją do zatwierdzania lub wycofywania według tego, czy ta metoda została wywołana w <xref:System.Transactions.TransactionScope>obiektu.</xref:System.Transactions.TransactionScope>"
  example:
  - "The following example demonstrates how to use the <xref:System.Transactions.TransactionScope> class to define a block of code to participate in a transaction.  \n  \n [!code-vb[TransactionScope#1](~/add/codesnippet/visualbasic/m-system.transactions.tr_1_1.vb)]\n [!code-cs[TransactionScope#1](~/add/codesnippet/csharp/m-system.transactions.tr_1_1.cs)]"
  syntax:
    content: public void Complete ();
    parameters: []
  overload: System.Transactions.TransactionScope.Complete*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Ta metoda została wywołana jeszcze raz."
  platform:
  - net462
- uid: System.Transactions.TransactionScope.Dispose
  id: Dispose
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: Dispose()
  nameWithType: TransactionScope.Dispose()
  fullName: System.Transactions.TransactionScope.Dispose()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Kończy się w zakresie transakcji."
  remarks: "Wywołanie tej metody oznacza koniec zakresu transakcji. Jeśli <xref:System.Transactions.TransactionScope>utworzony obiekt transakcji oraz <xref:System.Transactions.TransactionScope.Complete%2A>została wywołana w zakresie, <xref:System.Transactions.TransactionScope>obiektu próbuje zatwierdzić transakcji, gdy ta metoda jest wywoływana.</xref:System.Transactions.TransactionScope> </xref:System.Transactions.TransactionScope.Complete%2A> </xref:System.Transactions.TransactionScope>       Używanie języka C# `using` konstrukcja zapewnia, że ta metoda jest wywoływana, nawet jeśli wystąpi wyjątek. Wyjątki, które występują po wywołaniu tej metody nie może mieć wpływ na transakcji. Ta metoda również przywraca transakcja otoczenia go oryginalnego stanu. A <xref:System.Transactions.TransactionAbortedException>jest generowany, jeśli transakcja nie jest w rzeczywistości zatwierdzone.</xref:System.Transactions.TransactionAbortedException>       Ta metoda jest synchroniczne i blokuje dopóki transakcja została przekazana lub zostało przerwane. W związku z tym należy bardzo ostrożnie przy użyciu tej metody w aplikacji formularzy systemu Windows (formularza systemu Windows) lub może wystąpić zakleszczenie. Jeśli wywołanie tej metody wewnątrz jednego zdarzenia kontrolki formularza systemu Windows (na przykład kliknięcie przycisku) i używać synchroniczne <xref:System.Windows.Forms.Control.Invoke%2A>metody do kierowania formantu do wykonania niektórych zadań interfejsu użytkownika (na przykład zmiany kolorów) w trakcie przetwarzania transakcji, zakleszczenie nastąpi.</xref:System.Windows.Forms.Control.Invoke%2A> Jest to spowodowane <xref:System.Windows.Forms.Control.Invoke%2A>Metoda synchroniczna i blokuje wątku roboczego wątku interfejsu użytkownika zakończenie swojego zadania.</xref:System.Windows.Forms.Control.Invoke%2A> Jednak w naszym scenariuszu wątku interfejsu użytkownika jest również oczekiwanie na wątku roboczego można zatwierdzić transakcji. Wynik jest, że żaden nie jest możliwe w i zakres nieskończoność czeka na zakończenie zatwierdzania. Należy używać <xref:System.Windows.Forms.Control.BeginInvoke%2A>zamiast <xref:System.Windows.Forms.Control.Invoke%2A>wszędzie tam, gdzie to możliwe, ponieważ jest asynchroniczne, a w związku z tym mniej podatna na zakleszczenie.</xref:System.Windows.Forms.Control.Invoke%2A> </xref:System.Windows.Forms.Control.BeginInvoke%2A>       Aby uzyskać więcej informacji o sposobie użycia tej metody, zobacz [implementacji niejawnej transakcji przy użyciu zakresu transakcji](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) tematu."
  example:
  - "The following example demonstrates how to use the <xref:System.Transactions.TransactionScope> class to define a block of code to participate in a transaction.  \n  \n [!code-vb[TransactionScope#1](~/add/codesnippet/visualbasic/m-system.transactions.tr_0_1.vb)]\n [!code-cs[TransactionScope#1](~/add/codesnippet/csharp/m-system.transactions.tr_0_1.cs)]"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Transactions.TransactionScope.Dispose*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Transactions.TransactionScope.#ctor
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope()
  nameWithType: TransactionScope.TransactionScope()
  fullName: System.Transactions.TransactionScope.TransactionScope()
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction)
  nameWithType: TransactionScope.TransactionScope(Transaction)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction)
- uid: System.Transactions.Transaction
  parent: System.Transactions
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: System.Transactions.Transaction
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScopeAsyncFlowOption
  parent: System.Transactions
  isExternal: false
  name: TransactionScopeAsyncFlowOption
  nameWithType: TransactionScopeAsyncFlowOption
  fullName: System.Transactions.TransactionScopeAsyncFlowOption
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption)
- uid: System.Transactions.TransactionScopeOption
  parent: System.Transactions
  isExternal: false
  name: TransactionScopeOption
  nameWithType: TransactionScopeOption
  fullName: System.Transactions.TransactionScopeOption
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction,TimeSpan)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TimeSpan)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TransactionOptions)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)
- uid: System.Transactions.TransactionOptions
  parent: System.Transactions
  isExternal: false
  name: TransactionOptions
  nameWithType: TransactionOptions
  fullName: System.Transactions.TransactionOptions
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
- uid: System.Transactions.EnterpriseServicesInteropOption
  parent: System.Transactions
  isExternal: false
  name: EnterpriseServicesInteropOption
  nameWithType: EnterpriseServicesInteropOption
  fullName: System.Transactions.EnterpriseServicesInteropOption
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.Complete
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: Complete()
  nameWithType: TransactionScope.Complete()
  fullName: System.Transactions.TransactionScope.Complete()
- uid: System.Transactions.TransactionScope.Dispose
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: Dispose()
  nameWithType: TransactionScope.Dispose()
  fullName: System.Transactions.TransactionScope.Dispose()
- uid: System.Transactions.TransactionScope.#ctor*
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope
  nameWithType: TransactionScope.TransactionScope
- uid: System.Transactions.TransactionScope.Complete*
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: Complete
  nameWithType: TransactionScope.Complete
- uid: System.Transactions.TransactionScope.Dispose*
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: Dispose
  nameWithType: TransactionScope.Dispose
