### YamlMime:ManagedReference
items:
- uid: System.Windows.WeakEventManager
  id: WeakEventManager
  children:
  - System.Windows.WeakEventManager.#ctor
  - System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)
  - System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)
  - System.Windows.WeakEventManager.GetCurrentManager(System.Type)
  - System.Windows.WeakEventManager.Item(System.Object)
  - System.Windows.WeakEventManager.NewListenerList
  - System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)
  - System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)
  - System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)
  - System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)
  - System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)
  - System.Windows.WeakEventManager.ReadLock
  - System.Windows.WeakEventManager.Remove(System.Object)
  - System.Windows.WeakEventManager.ScheduleCleanup
  - System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)
  - System.Windows.WeakEventManager.StartListening(System.Object)
  - System.Windows.WeakEventManager.StopListening(System.Object)
  - System.Windows.WeakEventManager.WriteLock
  langs:
  - csharp
  name: WeakEventManager
  nameWithType: WeakEventManager
  fullName: System.Windows.WeakEventManager
  type: Class
  summary: "Udostępnia klasę podstawową dla menedżera zdarzeń, który jest używany w *wzorzec słabe zdarzeń*. Menedżer dodaje i usuwa odbiorników zdarzeń (lub wywołań zwrotnych) korzystających ze wzorca."
  remarks: "Wzorzec słabe zdarzeń jest zazwyczaj używana, gdy źródło zdarzenia ma okres istnienia obiektów, która jest niezależna od odbiorników zdarzeń. Przy użyciu funkcji wysyłania w centralnej zdarzeń klasa WeakEventManager umożliwia obsługi obiektu nasłuchującego być bezużytecznych nawet, jeśli obiekt źródłowy będzie się powtarzał. Z kolei podłączenie regularne zdarzeń przy użyciu `+=` operatora powoduje potencjalnie odłączonego źródła do przechowywania odwołanie do odbiorników. To zapobiega odbiornika bezużytecznych w odpowiednim czasie.       Jeden sytuacja wspólnej gdzie należy używać okresu istnienia relacji między źródłami i odbiorników wzorca słabe zdarzeń jest obsługi zdarzeń aktualizacji z powiązania danych.       Wzorzec słabe zdarzenia można również dla wywołań zwrotnych oraz zdarzeniami standardowymi."
  syntax:
    content: 'public abstract class WeakEventManager : System.Windows.Threading.DispatcherObject'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  implements: []
  inheritedMembers:
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.WeakEventManager.#ctor
  id: '#ctor'
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: WeakEventManager()
  nameWithType: WeakEventManager.WeakEventManager()
  fullName: System.Windows.WeakEventManager.WeakEventManager()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Inicjuje podstawowa Klasa wartości, gdy jest używany jako inicjator przez konstruktora klasy pochodnej."
  syntax:
    content: protected WeakEventManager ();
    parameters: []
  overload: System.Windows.WeakEventManager.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)
  id: DeliverEvent(System.Object,System.EventArgs)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: DeliverEvent(Object,EventArgs)
  nameWithType: WeakEventManager.DeliverEvent(Object,EventArgs)
  fullName: System.Windows.WeakEventManager.DeliverEvent(Object,EventArgs)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Dostarcza zdarzenia zarządzany każdego odbiornika."
  remarks: "Wywołanie metody DeliverEvent z obsługi zdarzeń, które zostały dodane lub usunięte przez <xref:System.Windows.WeakEventManager.StartListening%2A>i <xref:System.Windows.WeakEventManager.StopListening%2A>implementacje podklasy.</xref:System.Windows.WeakEventManager.StopListening%2A> </xref:System.Windows.WeakEventManager.StartListening%2A>       Wywołanie <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>metody w Twojej `AddListener` implementacji klasy listy odbiorników odbierającego zdarzenie jest przechowywany w kolekcji źródłowej.</xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> (`AddListener` nie jest częścią kontrakt interfejsu lub klasy. `AddListener`jest sugerowaną nazwę metody klasie manager, który wywołuje <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>i dodaje detektory wzorzec słabe zdarzeń dla zdarzenia).       <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>dodaje do jedną listę.</xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> </xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> Jeśli wdrożenie Menedżera ma więcej niż jedną listę odbiorników na zdarzenie, nie używaj DeliverEvent lub <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> Zamiast tego implementacji należy utworzyć własny <xref:System.Windows.WeakEventManager.ListenerList>wystąpień, `AddListener` należy dodać odbiorników na odpowiedniej liście i zdarzenia powinna zostać dostarczona do listy odpowiednie odbiornika, wywołując <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</xref:System.Windows.WeakEventManager.DeliverEventToList%2A> </xref:System.Windows.WeakEventManager.ListenerList>"
  syntax:
    content: protected void DeliverEvent (object sender, EventArgs args);
    parameters:
    - id: sender
      type: System.Object
      description: "Obiekt, w którym zdarzenie jest obsługiwane."
    - id: args
      type: System.EventArgs
      description: "<xref:System.EventArgs>Zawierający dane zdarzeń dla zdarzenia w celu dostarczenia.</xref:System.EventArgs>"
  overload: System.Windows.WeakEventManager.DeliverEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)
  id: DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  nameWithType: WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  fullName: System.Windows.WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  syntax:
    content: protected void DeliverEventToList (object sender, EventArgs args, System.Windows.WeakEventManager.ListenerList list);
    parameters:
    - id: sender
      type: System.Object
      description: "Do dodania."
    - id: args
      type: System.EventArgs
      description: "Do dodania."
    - id: list
      type: System.Windows.WeakEventManager.ListenerList
      description: "Do dodania."
  overload: System.Windows.WeakEventManager.DeliverEventToList*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.GetCurrentManager(System.Type)
  id: GetCurrentManager(System.Type)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: GetCurrentManager(Type)
  nameWithType: WeakEventManager.GetCurrentManager(Type)
  fullName: System.Windows.WeakEventManager.GetCurrentManager(Type)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Zwraca <xref href=&quot;System.Windows.WeakEventManager&quot;> </xref> implementację, która jest używana dla podanego typu."
  remarks: "<xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>implementacje wywołać tę metodę, przy użyciu ich przekazany `managerType`.</xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> Zwrócona <xref:System.Windows.WeakEventManager>służy jako różnicą, określająca otrzymano zdarzenie (event) i które obsługi Klasa prywatna do wywołania.</xref:System.Windows.WeakEventManager>"
  syntax:
    content: protected static System.Windows.WeakEventManager GetCurrentManager (Type managerType);
    parameters:
    - id: managerType
      type: System.Type
      description: "Typ do uzyskania <xref href=&quot;System.Windows.WeakEventManager&quot;> </xref> dla."
    return:
      type: System.Windows.WeakEventManager
      description: "Dopasowanie <xref href=&quot;System.Windows.WeakEventManager&quot;> </xref> implementacji."
  overload: System.Windows.WeakEventManager.GetCurrentManager*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.Item(System.Object)
  id: Item(System.Object)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: Item(Object)
  nameWithType: WeakEventManager.Item(Object)
  fullName: System.Windows.WeakEventManager.Item(Object)
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Pobiera lub ustawia przechowywanych dla określonego źródła danych."
  remarks: "Klasy pochodne mogą wybrać, jakie dane i typ do przechowywania w tym indeksatora. Zazwyczaj jest to implementowane jako <xref:System.Windows.WeakEventManager.ListenerList>, który znajduje się lista odwołania słabe do odbiorników.</xref:System.Windows.WeakEventManager.ListenerList> Czy wystarczy tylko zmienić tego typu, jeśli <xref:System.Windows.WeakEventManager.ListenerList>typu nie może zawierać wymaganych informacji.</xref:System.Windows.WeakEventManager.ListenerList> Jeśli tak, należy zastąpić <xref:System.Windows.WeakEventManager.Purge%2A>metody, aby wszystkie oczyszczania podstawowy typ odbywa się poprawnie.</xref:System.Windows.WeakEventManager.Purge%2A>"
  syntax:
    content: protected object this[object source] { get; set; }
    parameters:
    - id: source
      type: System.Object
      description: "Liczony od zera indeks żądanego źródła."
    return:
      type: System.Object
      description: "Przechowywanych przez menedżera dla tego źródła danych."
  overload: System.Windows.WeakEventManager.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.NewListenerList
  id: NewListenerList
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: NewListenerList()
  nameWithType: WeakEventManager.NewListenerList()
  fullName: System.Windows.WeakEventManager.NewListenerList()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Zwraca nowy obiekt, który zawiera odbiorników ze zdarzeniem."
  syntax:
    content: protected virtual System.Windows.WeakEventManager.ListenerList NewListenerList ();
    parameters: []
    return:
      type: System.Windows.WeakEventManager.ListenerList
      description: "Nowy obiekt zawierający odbiorników ze zdarzeniem."
  overload: System.Windows.WeakEventManager.NewListenerList*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)
  id: ProtectedAddHandler(System.Object,System.Delegate)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ProtectedAddHandler(Object,Delegate)
  nameWithType: WeakEventManager.ProtectedAddHandler(Object,Delegate)
  fullName: System.Windows.WeakEventManager.ProtectedAddHandler(Object,Delegate)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Dodaje określonego delegata jako program obsługi zdarzeń z określonego źródła."
  syntax:
    content: protected void ProtectedAddHandler (object source, Delegate handler);
    parameters:
    - id: source
      type: System.Object
      description: "Obiekt źródłowy, która ją subskrybuje delegata obsługi."
    - id: handler
      type: System.Delegate
      description: "Delegat, który obsługuje zdarzenia, które jest wywoływane przez `source`."
  overload: System.Windows.WeakEventManager.ProtectedAddHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)
  id: ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ProtectedAddListener(Object,IWeakEventListener)
  nameWithType: WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)
  fullName: System.Windows.WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Dodaje podany odbiornika do udostępnionego źródła zdarzeń zarządzany."
  remarks: "Wywołanie tej metody w klasie Menedżera `AddListener` metody <xref:System.Windows.WeakEventManager>implementacje.</xref:System.Windows.WeakEventManager> `AddListener`sugerowana nazwa jest dla metody statycznej zdefiniowanie w klasie manager, aby włączyć innych klas dodać odbiornika dla deseniu słabe zdarzeń. `AddListener`powinien mieć dwa parametry: `source` w przypadku, gdy odbiornika jest dołączony, a `listener` wystąpienia. Dla Twojego `AddListener` implementacji, wywołaj metodę ProtectedAddListener na bieżący Menedżer i przekazania tej samej dwa parametry.       Jeśli lista odbiorników było wcześniej puste, wywołuje metodę ProtectedAddListener <xref:System.Windows.WeakEventManager.StartListening%2A>— Metoda, która wywoła konkretnej <xref:System.Windows.WeakEventManager.StartListening%2A>zastąpienia za pośrednictwem polimorfizm.</xref:System.Windows.WeakEventManager.StartListening%2A> </xref:System.Windows.WeakEventManager.StartListening%2A>       Dodaje ProtectedAddListener do pojedynczego wewnętrznego <xref:System.Windows.WeakEventManager.ListenerList>na `source`.</xref:System.Windows.WeakEventManager.ListenerList> Jeśli wdrożenie Menedżera ma więcej niż jedną listę odbiorników dla każdej kombinacji źródło zdarzenia, nie należy używać ProtectedAddListener. Zamiast tego implementacji należy utworzyć własny <xref:System.Windows.WeakEventManager.ListenerList>wystąpień, `AddListener` należy dodać odbiorników na odpowiedniej liście i zdarzenia powinna zostać dostarczona do listy odpowiednie odbiornika wywołując <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>zdarzeń zamiast <xref:System.Windows.WeakEventManager.DeliverEvent%2A>— Metoda.</xref:System.Windows.WeakEventManager.DeliverEvent%2A> </xref:System.Windows.WeakEventManager.DeliverEventToList%2A> </xref:System.Windows.WeakEventManager.ListenerList>"
  syntax:
    content: protected void ProtectedAddListener (object source, System.Windows.IWeakEventListener listener);
    parameters:
    - id: source
      type: System.Object
      description: "Źródło do odbiorników do dołączenia."
    - id: listener
      type: System.Windows.IWeakEventListener
      description: "Klasa nasłuchiwania (który musi zaimplementować interfejs <xref href=&quot;System.Windows.IWeakEventListener&quot;> </xref>)."
  overload: System.Windows.WeakEventManager.ProtectedAddListener*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)
  id: ProtectedRemoveHandler(System.Object,System.Delegate)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ProtectedRemoveHandler(Object,Delegate)
  nameWithType: WeakEventManager.ProtectedRemoveHandler(Object,Delegate)
  fullName: System.Windows.WeakEventManager.ProtectedRemoveHandler(Object,Delegate)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Usuwa uprzednio dodanych obsługi pochodzących z określonego źródła."
  syntax:
    content: protected void ProtectedRemoveHandler (object source, Delegate handler);
    parameters:
    - id: source
      type: System.Object
      description: "Źródło do usunięcia programu obsługi."
    - id: handler
      type: System.Delegate
      description: "Delegat do usunięcia z `source`."
  overload: System.Windows.WeakEventManager.ProtectedRemoveHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)
  id: ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ProtectedRemoveListener(Object,IWeakEventListener)
  nameWithType: WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)
  fullName: System.Windows.WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Usuwa odbiornik uprzednio dodanych z podanego źródła."
  remarks: "Wywołanie tej metody w klasie Menedżera `RemoveListener` metody <xref:System.Windows.WeakEventManager>implementacje.</xref:System.Windows.WeakEventManager> `RemoveListener`sugerowana nazwa jest dla metody statycznej zdefiniowanie w klasie manager, aby włączyć innych klas usunąć odbiornik dla deseniu słabe zdarzeń. `RemoveListener`powinien mieć dwa parametry: `source` Jeśli odbiornik zostanie usunięty i `listener` klasy. Dla Twojego `RemoveListener` implementacji, wywołaj metodę ProtectedRemoveListener na bieżący Menedżer i przekazania tej samej dwa parametry.       Jeśli wywołanie ProtectedRemoveListener usuwa odbiornik ostatniego na liście, wywołuje metodę ProtectedRemoveListener <xref:System.Windows.WeakEventManager.StopListening%2A>— Metoda, która wywoła konkretnej <xref:System.Windows.WeakEventManager.StopListening%2A>zastąpienia za pośrednictwem polimorfizm.</xref:System.Windows.WeakEventManager.StopListening%2A> </xref:System.Windows.WeakEventManager.StopListening%2A>       ProtectedRemoveListener usuwa jeden wewnętrzny odbiorników <xref:System.Windows.WeakEventManager.ListenerList>na `source`.</xref:System.Windows.WeakEventManager.ListenerList> Jeśli wdrożenie Menedżera ma więcej niż jedną listę odbiorników dla każdej kombinacji źródło zdarzenia, nie należy używać ProtectedRemoveListener. Zamiast tego implementacji należy utworzyć własny <xref:System.Windows.WeakEventManager.ListenerList>wystąpień, `RemoveListener` należy usunąć odbiorników z listy odpowiednią i zdarzenia powinna zostać dostarczona do listy odpowiednie odbiornika przez wywołanie metody <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>zamiast metody <xref:System.Windows.WeakEventManager.DeliverEvent%2A>metody.</xref:System.Windows.WeakEventManager.DeliverEvent%2A> </xref:System.Windows.WeakEventManager.DeliverEventToList%2A> </xref:System.Windows.WeakEventManager.ListenerList>"
  syntax:
    content: protected void ProtectedRemoveListener (object source, System.Windows.IWeakEventListener listener);
    parameters:
    - id: source
      type: System.Object
      description: "Aby usunąć odbiorników z źródło."
    - id: listener
      type: System.Windows.IWeakEventListener
      description: "Klasa nasłuchiwania (który musi zaimplementować interfejs <xref href=&quot;System.Windows.IWeakEventListener&quot;> </xref>)."
  overload: System.Windows.WeakEventManager.ProtectedRemoveListener*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)
  id: Purge(System.Object,System.Object,System.Boolean)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: Purge(Object,Object,Boolean)
  nameWithType: WeakEventManager.Purge(Object,Object,Boolean)
  fullName: System.Windows.WeakEventManager.Purge(Object,Object,Boolean)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Usuwa nieaktywne odbiornika wpisy z listy danych dla podanego źródła. Zwraca <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> Jeśli niektóre wpisy rzeczywiście zostały usunięte z listy."
  remarks: "Domyślna implementacja, która spowoduje usunięcie wszystkich wpisów, gdy dane są <xref:System.Windows.WeakEventManager.ListenerList>.</xref:System.Windows.WeakEventManager.ListenerList> ma metody Purge"
  syntax:
    content: protected virtual bool Purge (object source, object data, bool purgeAll);
    parameters:
    - id: source
      type: System.Object
      description: "Źródło zdarzenia prowadzi nasłuch do."
    - id: data
      type: System.Object
      description: "Dane do sprawdzenia. Ten obiekt powinien być <xref:System.Windows.WeakEventManager.ListenerList>implementacji.</xref:System.Windows.WeakEventManager.ListenerList>"
    - id: purgeAll
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby zatrzymać nasłuchiwanie `source`i całkowicie usunąć wszystkie wpisy z `data`."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli niektóre wpisy rzeczywiście zostały usunięte; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.WeakEventManager.Purge*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ReadLock
  id: ReadLock
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ReadLock
  nameWithType: WeakEventManager.ReadLock
  fullName: System.Windows.WeakEventManager.ReadLock
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Ustanawia blokady odczytu w tabeli podstawowej danych i zwraca <xref:System.IDisposable>.</xref:System.IDisposable>"
  remarks: "W klasach pochodnych, wysyła zapytanie do tabeli zawartych w <xref:System.Windows.WeakEventManager.Item%2A>powinny być zawsze wykonywane w ramach `using (ReadLock) { ... }` klauzuli, z wyjątkiem zapytań, które znajdują się już na blokadę zapisu.</xref:System.Windows.WeakEventManager.Item%2A> Te zapytania może być konieczne, jeśli klasa obsługuje bardziej złożone `AddListener` implementację, która wymaga większej ilości danych poza `source` i `listener`i używa <xref:System.Windows.WeakEventManager.Item%2A>kolekcji do przechowywania dodatkowych informacji.</xref:System.Windows.WeakEventManager.Item%2A>"
  syntax:
    content: protected IDisposable ReadLock { get; }
    return:
      type: System.IDisposable
      description: "Obiekt, który może służyć do ustanowienia blokady w elementach członkowskich tabeli danych, a następnie odpowiednio usunięta z <xref uid=&quot;langword_csharp_using&quot; name=&quot;using&quot; href=&quot;&quot;> </xref> utworzenia."
  overload: System.Windows.WeakEventManager.ReadLock*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: WeakEventManager.Remove(Object)
  fullName: System.Windows.WeakEventManager.Remove(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Usuwa wszystkie odbiorników dla określonego źródła."
  syntax:
    content: protected void Remove (object source);
    parameters:
    - id: source
      type: System.Object
      description: "Aby usunąć odbiornik informacje dotyczące źródło."
  overload: System.Windows.WeakEventManager.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ScheduleCleanup
  id: ScheduleCleanup
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ScheduleCleanup()
  nameWithType: WeakEventManager.ScheduleCleanup()
  fullName: System.Windows.WeakEventManager.ScheduleCleanup()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Wykonanie usuwanie nieużywanych wpisów na liście podstawowej odbiornika na niższy priorytet wątku żądania."
  remarks: "Wywołanie metody ScheduleCleanup jest podobny do wywoływania <xref:System.Windows.WeakEventManager.Purge%2A>metody na liście bieżący Menedżer, niższym priorytetem wątków, z `purgeAll` ustawiona `false`.</xref:System.Windows.WeakEventManager.Purge%2A>"
  syntax:
    content: protected void ScheduleCleanup ();
    parameters: []
  overload: System.Windows.WeakEventManager.ScheduleCleanup*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)
  id: SetCurrentManager(System.Type,System.Windows.WeakEventManager)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: SetCurrentManager(Type,WeakEventManager)
  nameWithType: WeakEventManager.SetCurrentManager(Type,WeakEventManager)
  fullName: System.Windows.WeakEventManager.SetCurrentManager(Type,WeakEventManager)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Ustawia bieżący Menedżer Menedżera określonego typu."
  remarks: "Wywołaj metodę SetCurrentManager można zainicjować menedżera, jeśli, co jest wymagane przez wywołanie do Twojej `CurrentManager` właściwość <xref:System.Windows.WeakEventManager>implementacji.</xref:System.Windows.WeakEventManager>"
  syntax:
    content: protected static void SetCurrentManager (Type managerType, System.Windows.WeakEventManager manager);
    parameters:
    - id: managerType
      type: System.Type
      description: "Typ do nowego menedżera zdarzeń."
    - id: manager
      type: System.Windows.WeakEventManager
      description: "Nowy Menedżer zdarzeń."
  overload: System.Windows.WeakEventManager.SetCurrentManager*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.StartListening(System.Object)
  id: StartListening(System.Object)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: StartListening(Object)
  nameWithType: WeakEventManager.StartListening(Object)
  fullName: System.Windows.WeakEventManager.StartListening(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "W przypadku przesłonięcia w klasie pochodnej, rozpoczyna nasłuchiwanie zdarzeń zarządzany. Po pierwsze wywoływana jest metoda StartListening, Menedżera powinna być w stanie wywołania metody <> </> *> lub <> </> *> zawsze, gdy odpowiednie zdarzenie z podanego źródła jest obsługiwane."
  syntax:
    content: protected abstract void StartListening (object source);
    parameters:
    - id: source
      type: System.Object
      description: "Źródło, aby rozpocząć nasłuchiwania na."
  overload: System.Windows.WeakEventManager.StartListening*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.StopListening(System.Object)
  id: StopListening(System.Object)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: StopListening(Object)
  nameWithType: WeakEventManager.StopListening(Object)
  fullName: System.Windows.WeakEventManager.StopListening(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "W przypadku przesłonięcia w klasie pochodnej, zatrzymuje nasłuchiwanie dla podanego źródła zdarzeń zarządzany."
  syntax:
    content: protected abstract void StopListening (object source);
    parameters:
    - id: source
      type: System.Object
      description: "Źródło do zatrzymania nasłuchiwania."
  overload: System.Windows.WeakEventManager.StopListening*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.WriteLock
  id: WriteLock
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: WriteLock
  nameWithType: WeakEventManager.WriteLock
  fullName: System.Windows.WeakEventManager.WriteLock
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Ustanawia blokady zapisu w tabeli podstawowej danych i zwraca<xref:System.IDisposable>.</xref:System.IDisposable>"
  remarks: "W klasach pochodnych, wszystkie zmiany do tabeli podstawowej danych powinna wystąpić w ramach `using (WriteLock) { ... }` klauzuli. Poniższe zmiany, może być konieczne, jeśli klasa obsługuje bardziej złożone `AddListener` implementację, która wymaga większej ilości danych poza `source` i `listener`i używa <xref:System.Windows.WeakEventManager.Item%2A>kolekcji do przechowywania dodatkowych informacji.</xref:System.Windows.WeakEventManager.Item%2A>"
  syntax:
    content: protected IDisposable WriteLock { get; }
    return:
      type: System.IDisposable
      description: "Obiekt, który może służyć do ustanowienia blokady w elementach członkowskich tabeli danych, a następnie odpowiednio usunięta z <xref uid=&quot;langword_csharp_using&quot; name=&quot;using&quot; href=&quot;&quot;> </xref> utworzenia."
  overload: System.Windows.WeakEventManager.WriteLock*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: System.Windows.Threading.DispatcherObject
- uid: System.Windows.WeakEventManager.#ctor
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: WeakEventManager()
  nameWithType: WeakEventManager.WeakEventManager()
  fullName: System.Windows.WeakEventManager.WeakEventManager()
- uid: System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: DeliverEvent(Object,EventArgs)
  nameWithType: WeakEventManager.DeliverEvent(Object,EventArgs)
  fullName: System.Windows.WeakEventManager.DeliverEvent(Object,EventArgs)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  nameWithType: WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  fullName: System.Windows.WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
- uid: System.Windows.WeakEventManager.ListenerList
  parent: System.Windows
  isExternal: false
  name: WeakEventManager+ListenerList
  nameWithType: WeakEventManager+ListenerList
  fullName: System.Windows.WeakEventManager+ListenerList
- uid: System.Windows.WeakEventManager.GetCurrentManager(System.Type)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: GetCurrentManager(Type)
  nameWithType: WeakEventManager.GetCurrentManager(Type)
  fullName: System.Windows.WeakEventManager.GetCurrentManager(Type)
- uid: System.Windows.WeakEventManager
  parent: System.Windows
  isExternal: false
  name: WeakEventManager
  nameWithType: WeakEventManager
  fullName: System.Windows.WeakEventManager
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.WeakEventManager.Item(System.Object)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Item(Object)
  nameWithType: WeakEventManager.Item(Object)
  fullName: System.Windows.WeakEventManager.Item(Object)
- uid: System.Windows.WeakEventManager.NewListenerList
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: NewListenerList()
  nameWithType: WeakEventManager.NewListenerList()
  fullName: System.Windows.WeakEventManager.NewListenerList()
- uid: System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedAddHandler(Object,Delegate)
  nameWithType: WeakEventManager.ProtectedAddHandler(Object,Delegate)
  fullName: System.Windows.WeakEventManager.ProtectedAddHandler(Object,Delegate)
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedAddListener(Object,IWeakEventListener)
  nameWithType: WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)
  fullName: System.Windows.WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)
- uid: System.Windows.IWeakEventListener
  parent: System.Windows
  isExternal: false
  name: IWeakEventListener
  nameWithType: IWeakEventListener
  fullName: System.Windows.IWeakEventListener
- uid: System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedRemoveHandler(Object,Delegate)
  nameWithType: WeakEventManager.ProtectedRemoveHandler(Object,Delegate)
  fullName: System.Windows.WeakEventManager.ProtectedRemoveHandler(Object,Delegate)
- uid: System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedRemoveListener(Object,IWeakEventListener)
  nameWithType: WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)
  fullName: System.Windows.WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)
- uid: System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Purge(Object,Object,Boolean)
  nameWithType: WeakEventManager.Purge(Object,Object,Boolean)
  fullName: System.Windows.WeakEventManager.Purge(Object,Object,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.WeakEventManager.ReadLock
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ReadLock
  nameWithType: WeakEventManager.ReadLock
  fullName: System.Windows.WeakEventManager.ReadLock
- uid: System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Windows.WeakEventManager.Remove(System.Object)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Remove(Object)
  nameWithType: WeakEventManager.Remove(Object)
  fullName: System.Windows.WeakEventManager.Remove(Object)
- uid: System.Windows.WeakEventManager.ScheduleCleanup
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ScheduleCleanup()
  nameWithType: WeakEventManager.ScheduleCleanup()
  fullName: System.Windows.WeakEventManager.ScheduleCleanup()
- uid: System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: SetCurrentManager(Type,WeakEventManager)
  nameWithType: WeakEventManager.SetCurrentManager(Type,WeakEventManager)
  fullName: System.Windows.WeakEventManager.SetCurrentManager(Type,WeakEventManager)
- uid: System.Windows.WeakEventManager.StartListening(System.Object)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: StartListening(Object)
  nameWithType: WeakEventManager.StartListening(Object)
  fullName: System.Windows.WeakEventManager.StartListening(Object)
- uid: System.Windows.WeakEventManager.StopListening(System.Object)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: StopListening(Object)
  nameWithType: WeakEventManager.StopListening(Object)
  fullName: System.Windows.WeakEventManager.StopListening(Object)
- uid: System.Windows.WeakEventManager.WriteLock
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: WriteLock
  nameWithType: WeakEventManager.WriteLock
  fullName: System.Windows.WeakEventManager.WriteLock
- uid: System.Windows.WeakEventManager.#ctor*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: WeakEventManager
  nameWithType: WeakEventManager.WeakEventManager
- uid: System.Windows.WeakEventManager.DeliverEvent*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: DeliverEvent
  nameWithType: WeakEventManager.DeliverEvent
- uid: System.Windows.WeakEventManager.DeliverEventToList*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: DeliverEventToList
  nameWithType: WeakEventManager.DeliverEventToList
- uid: System.Windows.WeakEventManager.GetCurrentManager*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: GetCurrentManager
  nameWithType: WeakEventManager.GetCurrentManager
- uid: System.Windows.WeakEventManager.Item*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Item
  nameWithType: WeakEventManager.Item
- uid: System.Windows.WeakEventManager.NewListenerList*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: NewListenerList
  nameWithType: WeakEventManager.NewListenerList
- uid: System.Windows.WeakEventManager.ProtectedAddHandler*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedAddHandler
  nameWithType: WeakEventManager.ProtectedAddHandler
- uid: System.Windows.WeakEventManager.ProtectedAddListener*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedAddListener
  nameWithType: WeakEventManager.ProtectedAddListener
- uid: System.Windows.WeakEventManager.ProtectedRemoveHandler*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedRemoveHandler
  nameWithType: WeakEventManager.ProtectedRemoveHandler
- uid: System.Windows.WeakEventManager.ProtectedRemoveListener*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedRemoveListener
  nameWithType: WeakEventManager.ProtectedRemoveListener
- uid: System.Windows.WeakEventManager.Purge*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Purge
  nameWithType: WeakEventManager.Purge
- uid: System.Windows.WeakEventManager.ReadLock*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ReadLock
  nameWithType: WeakEventManager.ReadLock
- uid: System.Windows.WeakEventManager.Remove*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Remove
  nameWithType: WeakEventManager.Remove
- uid: System.Windows.WeakEventManager.ScheduleCleanup*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ScheduleCleanup
  nameWithType: WeakEventManager.ScheduleCleanup
- uid: System.Windows.WeakEventManager.SetCurrentManager*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: SetCurrentManager
  nameWithType: WeakEventManager.SetCurrentManager
- uid: System.Windows.WeakEventManager.StartListening*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: StartListening
  nameWithType: WeakEventManager.StartListening
- uid: System.Windows.WeakEventManager.StopListening*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: StopListening
  nameWithType: WeakEventManager.StopListening
- uid: System.Windows.WeakEventManager.WriteLock*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: WriteLock
  nameWithType: WeakEventManager.WriteLock
