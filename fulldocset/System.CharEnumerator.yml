### YamlMime:ManagedReference
items:
- uid: System.CharEnumerator
  id: CharEnumerator
  children:
  - System.CharEnumerator.Clone
  - System.CharEnumerator.Current
  - System.CharEnumerator.Dispose
  - System.CharEnumerator.MoveNext
  - System.CharEnumerator.Reset
  - System.CharEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: CharEnumerator
  nameWithType: CharEnumerator
  fullName: System.CharEnumerator
  type: Class
  summary: "Obsługuje Iterowanie po <xref:System.String>obiektu i odczytywanie ich indywidualnych znaków.</xref:System.String> Ta klasa nie może być dziedziczona."
  remarks: "CharEnumerator umożliwia dostęp tylko do odczytu do znaków w odwoływany <xref:System.String>obiektu.</xref:System.String> Na przykład `foreach` instrukcji języka Visual Basic i C# języków programowania, który iteruje po kolekcji elementów, pobiera CharEnumerator z <xref:System.String>obiekt, aby można było wykonać iterację znaków w tym obiekcie.</xref:System.String>       Nie ma publicznego konstruktora dla CharEnumerator. Zamiast tego wywołać <xref:System.String>obiektu <xref:System.String.GetEnumerator%2A>metodę, aby uzyskać CharEnumerator, inicjowany do odwołania ciągu.</xref:System.String.GetEnumerator%2A> </xref:System.String>       CharEnumerator obsługuje wewnętrzny indeks znaków w ciągu CharEnumerator odwołania. Stan indeksu jest nieprawidłowy, gdy odwołuje się do pozycji znaku logicznie przed pierwszym znakiem i po ostatnim znaku w ciągu i ważne, gdy odwołuje się do znaku w ciągu. Indeks jest ustawiana na pozycji logicznie przed pierwszym znakiem i ma ustawioną wartość pozycji za ostatni znak po zakończeniu iteracji. Wyjątek jest próba uzyskania dostępu znak, gdy indeks jest nieprawidłowy.       <xref:System.CharEnumerator.MoveNext%2A>Metody zwiększa indeks, dlatego pierwsze i kolejne znaki są dostępne z kolei.</xref:System.CharEnumerator.MoveNext%2A> <xref:System.CharEnumerator.Reset%2A>Metody ustawia indeks na pozycji logicznie przed pierwszym znakiem.</xref:System.CharEnumerator.Reset%2A> <xref:System.CharEnumerator.Current%2A>Właściwość pobiera znak obecnie wywoływane przez indeks.</xref:System.CharEnumerator.Current%2A> <xref:System.CharEnumerator.Clone%2A>Metoda tworzy kopię CharEnumerator.</xref:System.CharEnumerator.Clone%2A>      > [!NOTE] > Kilka wystąpień niezależne CharEnumerator między co najmniej jeden wątek może mieć dostęp do pojedynczego wystąpienia <xref:System.String>.</xref:System.String> Ta klasa jest zaimplementowana do obsługi <xref:System.Collections.IEnumerator>interfejsu.</xref:System.Collections.IEnumerator> Aby uzyskać więcej informacji na temat użycia modułu wyliczającego zobacz <xref:System.Collections.IEnumerator>tematu.</xref:System.Collections.IEnumerator>"
  example:
  - "The following example uses the CharEnumerator class to enumerate the individual characters in a string. It instantiates a CharEnumerator object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=fullName> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.  \n  \n [!code-cs[System.CharEnumerator.Class#1](~/add/codesnippet/csharp/t-system.charenumerator_1.cs)]\n [!code-cpp[System.CharEnumerator.Class#1](~/add/codesnippet/cpp/t-system.charenumerator_1.cpp)]\n [!code-vb[System.CharEnumerator.Class#1](~/add/codesnippet/visualbasic/t-system.charenumerator_1.vb)]  \n  \n Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.  \n  \n [!code-cs[System.CharEnumerator.Class#2](~/add/codesnippet/csharp/t-system.charenumerator_2.cs)]\n [!code-cpp[System.CharEnumerator.Class#2](~/add/codesnippet/cpp/t-system.charenumerator_2.cpp)]\n [!code-vb[System.CharEnumerator.Class#2](~/add/codesnippet/visualbasic/t-system.charenumerator_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator<char>
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerator<System.Char>
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.CharEnumerator.Clone
  id: Clone
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Clone()
  nameWithType: CharEnumerator.Clone()
  fullName: System.CharEnumerator.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Tworzy kopię bieżącego <xref href=&quot;System.CharEnumerator&quot;> </xref> obiektu."
  remarks: "Wartość zwracana jest kopię tego wystąpienia <xref:System.CharEnumerator>i swojego bieżącego stanu.</xref:System.CharEnumerator> Jest to przydatne w przypadku Zapisywanie stanu użytkownika podczas iteracji <xref:System.String>obiektu.</xref:System.String>       Na przykład załóżmy, że aplikacja korzysta z oryginalnego wystąpienia <xref:System.CharEnumerator>do iterowania po każdym znaku w <xref:System.String>.</xref:System.String> </xref:System.CharEnumerator> W przypadku niektórych znaków unikatowy aplikacji umożliwia przetwarzanie i wywołuje metodę klonowania. W efekcie zapisuje <xref:System.CharEnumerator>indeksu obiektu <xref:System.String>.</xref:System.String> </xref:System.CharEnumerator>       Aplikacja używa klonu, aby przejść do innej części `String` do wykonania niektórych dodatkowego przetwarzania. Efektem ubocznym tego nawigacji jest klonu utraci śledzenie pozycji, której przetwarzanie zostało zakończone. Jednak po ukończeniu dodatkowego przetwarzania aplikacji odrzuca klonu i używa oryginalnej <xref:System.CharEnumerator>wystąpienia, aby wznowić pracę na <xref:System.String>gdzie oryginalnego przetwarzania zatrzymana.</xref:System.String> </xref:System.CharEnumerator>      > [!NOTE] > Ta metoda jest zaimplementowana do obsługi <xref:System.ICloneable>interfejsu.</xref:System.ICloneable>"
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "<xref:System.Object>Czyli kopię bieżącego <xref href=&quot;System.CharEnumerator&quot;> </xref> obiektu.</xref:System.Object>"
  overload: System.CharEnumerator.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.Current
  id: Current
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: CharEnumerator.Current
  fullName: System.CharEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Pobiera obecnie przywoływanego znak w ciągu wyliczyć to <xref href=&quot;System.CharEnumerator&quot;> </xref> obiektu."
  remarks: "<xref:System.CharEnumerator>Klasa obsługuje indeks wewnętrzny wyliczany ciąg i bieżącą właściwość zwraca znak, który obecnie jest przywoływany przez indeks.</xref:System.CharEnumerator> Ta właściwość powinna być wywoływana tylko wtedy, gdy indeks jest nieprawidłowy; w przeciwnym wypadku jest zwracany wyjątek.       Indeks zawsze jest nieprawidłowy dla pustego ciągu (&quot;&quot;). Indeks jest nieprawidłowy po również <xref:System.String.GetEnumerator%2A?displayProperty=fullName>lub <xref:System.CharEnumerator.Reset%2A>Metoda jest wywoływana.</xref:System.CharEnumerator.Reset%2A> </xref:System.String.GetEnumerator%2A?displayProperty=fullName> Po każdej z tych metod, wywołaj <xref:System.CharEnumerator.MoveNext%2A>metodę, aby dopasować indeks pierwszego znaku w ciągu wyliczany.</xref:System.CharEnumerator.MoveNext%2A> Indeks jest nieprawidłowy gdy <xref:System.CharEnumerator.MoveNext%2A>Metoda zwraca `true`.</xref:System.CharEnumerator.MoveNext%2A>       Bieżący nie przenosi indeks i kolejne wywołania bieżącego zwracać ten sam znak do <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, lub <xref:System.String.GetEnumerator%2A?displayProperty=fullName>jest wywoływana.</xref:System.String.GetEnumerator%2A?displayProperty=fullName> </xref:System.CharEnumerator.Reset%2A> </xref:System.CharEnumerator.MoveNext%2A>"
  example:
  - "The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string. It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=fullName> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the Current property.  \n  \n [!code-cs[System.CharEnumerator.Class#1](~/add/codesnippet/csharp/p-system.charenumerator._1.cs)]\n [!code-cpp[System.CharEnumerator.Class#1](~/add/codesnippet/cpp/p-system.charenumerator._1.cpp)]\n [!code-vb[System.CharEnumerator.Class#1](~/add/codesnippet/visualbasic/p-system.charenumerator._1.vb)]  \n  \n Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.  \n  \n [!code-cs[System.CharEnumerator.Class#2](~/add/codesnippet/csharp/p-system.charenumerator._2.cs)]\n [!code-cpp[System.CharEnumerator.Class#2](~/add/codesnippet/cpp/p-system.charenumerator._2.cpp)]\n [!code-vb[System.CharEnumerator.Class#2](~/add/codesnippet/visualbasic/p-system.charenumerator._2.vb)]"
  syntax:
    content: public char Current { get; }
    return:
      type: System.Char
      description: "Znak Unicode, w obecnie odwołuje się ten <xref href=&quot;System.CharEnumerator&quot;> </xref> obiektu."
  overload: System.CharEnumerator.Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Indeks jest nieprawidłowy. oznacza to, że jest przed pierwszym lub za ostatnim znakiem wyliczany ciąg."
  platform:
  - net462
- uid: System.CharEnumerator.Dispose
  id: Dispose
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Dispose()
  nameWithType: CharEnumerator.Dispose()
  fullName: System.CharEnumerator.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Zwalnia wszelkie zasoby używane przez bieżące wystąpienie klasy <xref href=&quot;System.CharEnumerator&quot;> </xref> klasy."
  remarks: "Wywołaj metodę Dispose po zakończeniu przy użyciu <xref:System.CharEnumerator>.</xref:System.CharEnumerator> Metoda Dispose pozostawia <xref:System.CharEnumerator>w stanie uniemożliwiającym jego używanie.</xref:System.CharEnumerator> Po wywołaniu metody Dispose, konieczne jest zwolnienie wszystkich odwołań do <xref:System.CharEnumerator>, moduł zbierający elementy bezużyteczne mógł odzyskać pamięć który <xref:System.CharEnumerator>klasy.</xref:System.CharEnumerator> </xref:System.CharEnumerator>       Aby uzyskać więcej informacji, zobacz [czyszczenie zasobów niezarządzanych](~/add/includes/ajax-current-ext-md.md) i [implementacja metody Dispose](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Wywołania zawsze dysponować przed zwolnieniem ostatniego odwołania do <xref:System.CharEnumerator>.</xref:System.CharEnumerator> W przeciwnym razie używa zasobów nie zostanie zwolniona do wywołania modułu zbierającego elementy bezużyteczne <xref:System.CharEnumerator>obiektu `Finalize` metody.</xref:System.CharEnumerator>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.CharEnumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.MoveNext
  id: MoveNext
  parent: System.CharEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: CharEnumerator.MoveNext()
  fullName: System.CharEnumerator.MoveNext()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Indeks wewnętrzny bieżącego zwiększa <xref href=&quot;System.CharEnumerator&quot;> </xref> obiektu na następny znak wyliczany ciąg."
  remarks: "<xref:System.CharEnumerator>Klasa obsługuje indeks wewnętrzny wyliczany ciąg i skompiluj zwiększa indeks o jeden.</xref:System.CharEnumerator> Wywołaj polecenie MoveNext po wywołaniu <xref:System.String.GetEnumerator%2A>lub <xref:System.CharEnumerator.Reset%2A>Aby zwiększyć bieżącą pozycję znaku do pierwszego znaku w ciągu wyliczany.</xref:System.CharEnumerator.Reset%2A> </xref:System.String.GetEnumerator%2A> Sprawdź, czy jest zwracana wartość `true` ustalenie, czy bieżące położenie znaku jest prawidłowa.       Jeśli indeks jest poza ostatni znak wyliczany ciąg, indeks nie ulega zmianie i `false` jest zwracany.       Zwróć uwagę, że jeśli wyliczany ciąg jest pusty (&quot;&quot;), stan <xref:System.CharEnumerator>zawsze jest nieprawidłowa.</xref:System.CharEnumerator> Jest to spowodowane indeks wewnętrzny <xref:System.CharEnumerator>jest początkowo, przed pierwszym znakiem wyliczany ciąg i dlatego jest nieprawidłowy.</xref:System.CharEnumerator> MoveNext logicznie ustawia indeks za ostatni znak (nieistniejącą) wyliczany ciągu, który również jest nieprawidłowy."
  example:
  - "The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string. It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=fullName> method, moves from one character to the next by calling the MoveNext method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.  \n  \n [!code-cs[System.CharEnumerator.Class#1](~/add/codesnippet/csharp/m-system.charenumerator._1.cs)]\n [!code-cpp[System.CharEnumerator.Class#1](~/add/codesnippet/cpp/m-system.charenumerator._1.cpp)]\n [!code-vb[System.CharEnumerator.Class#1](~/add/codesnippet/visualbasic/m-system.charenumerator._1.vb)]  \n  \n Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.  \n  \n [!code-cs[System.CharEnumerator.Class#2](~/add/codesnippet/csharp/m-system.charenumerator._2.cs)]\n [!code-cpp[System.CharEnumerator.Class#2](~/add/codesnippet/cpp/m-system.charenumerator._2.cpp)]\n [!code-vb[System.CharEnumerator.Class#2](~/add/codesnippet/visualbasic/m-system.charenumerator._2.vb)]"
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli indeks pomyślnie jest zwiększany i ciągu wyliczany; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.CharEnumerator.MoveNext*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.Reset
  id: Reset
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: CharEnumerator.Reset()
  fullName: System.CharEnumerator.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Inicjuje indeks pozycji logicznie przed pierwszym znakiem wyliczany ciąg."
  remarks: "<xref:System.CharEnumerator>Indeks wewnętrzny wyliczany ciąg obsługuje klasy i metody resetowania ustawia indeks nieprawidłowy stan.</xref:System.CharEnumerator>"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.CharEnumerator.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.CharEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: CharEnumerator.System.Collections.IEnumerator.Current
  fullName: System.CharEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Pobiera obecnie przywoływanego znak w ciągu wyliczyć to <xref href=&quot;System.CharEnumerator&quot;> </xref> obiektu. Opis tego elementu członkowskiego, zobacz &lt;xref:System.Collections.IEnumerator.Current%2A?displayProperty=fullName&gt;."
  remarks: "Ten element jest jawną implementacją elementu interfejsu. Można go używać tylko wtedy, gdy <xref:System.CharEnumerator>wystąpienia jest rzutowane na <xref:System.Collections.IEnumerator>interfejsu.</xref:System.Collections.IEnumerator> </xref:System.CharEnumerator>"
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "Opakowany obecnie odwołuje się ten znak Unicode <xref href=&quot;System.CharEnumerator&quot;> </xref> obiektu."
  overload: System.CharEnumerator.System#Collections#IEnumerator#Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Wyliczanie nie zostało uruchomione.       - lub - wyliczanie zostało zakończone."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.CharEnumerator.Clone
  parent: System.CharEnumerator
  isExternal: false
  name: Clone()
  nameWithType: CharEnumerator.Clone()
  fullName: System.CharEnumerator.Clone()
- uid: System.CharEnumerator.Current
  parent: System.CharEnumerator
  isExternal: false
  name: Current
  nameWithType: CharEnumerator.Current
  fullName: System.CharEnumerator.Current
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.CharEnumerator.Dispose
  parent: System.CharEnumerator
  isExternal: false
  name: Dispose()
  nameWithType: CharEnumerator.Dispose()
  fullName: System.CharEnumerator.Dispose()
- uid: System.CharEnumerator.MoveNext
  parent: System.CharEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: CharEnumerator.MoveNext()
  fullName: System.CharEnumerator.MoveNext()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.CharEnumerator.Reset
  parent: System.CharEnumerator
  isExternal: false
  name: Reset()
  nameWithType: CharEnumerator.Reset()
  fullName: System.CharEnumerator.Reset()
- uid: System.CharEnumerator.System#Collections#IEnumerator#Current
  parent: System.CharEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: CharEnumerator.System.Collections.IEnumerator.Current
  fullName: System.CharEnumerator.System.Collections.IEnumerator.Current
- uid: System.CharEnumerator.Clone*
  parent: System.CharEnumerator
  isExternal: false
  name: Clone
  nameWithType: CharEnumerator.Clone
- uid: System.CharEnumerator.Current*
  parent: System.CharEnumerator
  isExternal: false
  name: Current
  nameWithType: CharEnumerator.Current
- uid: System.CharEnumerator.Dispose*
  parent: System.CharEnumerator
  isExternal: false
  name: Dispose
  nameWithType: CharEnumerator.Dispose
- uid: System.CharEnumerator.MoveNext*
  parent: System.CharEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: CharEnumerator.MoveNext
- uid: System.CharEnumerator.Reset*
  parent: System.CharEnumerator
  isExternal: false
  name: Reset
  nameWithType: CharEnumerator.Reset
- uid: System.CharEnumerator.System#Collections#IEnumerator#Current*
  parent: System.CharEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: CharEnumerator.System.Collections.IEnumerator.Current
