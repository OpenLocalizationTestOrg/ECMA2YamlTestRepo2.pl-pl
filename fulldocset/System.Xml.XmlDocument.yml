### YamlMime:ManagedReference
items:
- uid: System.Xml.XmlDocument
  id: XmlDocument
  children:
  - System.Xml.XmlDocument.#ctor
  - System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)
  - System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)
  - System.Xml.XmlDocument.BaseURI
  - System.Xml.XmlDocument.CloneNode(System.Boolean)
  - System.Xml.XmlDocument.CreateAttribute(System.String)
  - System.Xml.XmlDocument.CreateAttribute(System.String,System.String)
  - System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateCDataSection(System.String)
  - System.Xml.XmlDocument.CreateComment(System.String)
  - System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateDocumentFragment
  - System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateElement(System.String)
  - System.Xml.XmlDocument.CreateElement(System.String,System.String)
  - System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateEntityReference(System.String)
  - System.Xml.XmlDocument.CreateNavigator
  - System.Xml.XmlDocument.CreateNavigator(System.Xml.XmlNode)
  - System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)
  - System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)
  - System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)
  - System.Xml.XmlDocument.CreateTextNode(System.String)
  - System.Xml.XmlDocument.CreateWhitespace(System.String)
  - System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)
  - System.Xml.XmlDocument.DocumentElement
  - System.Xml.XmlDocument.DocumentType
  - System.Xml.XmlDocument.GetElementById(System.String)
  - System.Xml.XmlDocument.GetElementsByTagName(System.String)
  - System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)
  - System.Xml.XmlDocument.Implementation
  - System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)
  - System.Xml.XmlDocument.InnerText
  - System.Xml.XmlDocument.InnerXml
  - System.Xml.XmlDocument.IsReadOnly
  - System.Xml.XmlDocument.Load(System.IO.Stream)
  - System.Xml.XmlDocument.Load(System.IO.TextReader)
  - System.Xml.XmlDocument.Load(System.String)
  - System.Xml.XmlDocument.Load(System.Xml.XmlReader)
  - System.Xml.XmlDocument.LoadXml(System.String)
  - System.Xml.XmlDocument.LocalName
  - System.Xml.XmlDocument.Name
  - System.Xml.XmlDocument.NameTable
  - System.Xml.XmlDocument.NodeChanged
  - System.Xml.XmlDocument.NodeChanging
  - System.Xml.XmlDocument.NodeInserted
  - System.Xml.XmlDocument.NodeInserting
  - System.Xml.XmlDocument.NodeRemoved
  - System.Xml.XmlDocument.NodeRemoving
  - System.Xml.XmlDocument.NodeType
  - System.Xml.XmlDocument.OwnerDocument
  - System.Xml.XmlDocument.ParentNode
  - System.Xml.XmlDocument.PreserveWhitespace
  - System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)
  - System.Xml.XmlDocument.Save(System.IO.Stream)
  - System.Xml.XmlDocument.Save(System.IO.TextWriter)
  - System.Xml.XmlDocument.Save(System.String)
  - System.Xml.XmlDocument.Save(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.SchemaInfo
  - System.Xml.XmlDocument.Schemas
  - System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)
  - System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)
  - System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.XmlResolver
  langs:
  - csharp
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
  type: Class
  summary: "Reprezentuje dokumentu XML. Ta klasa służy do ładowania, sprawdzanie poprawności, edytować, Dodaj i umieść w dokumencie XML."
  remarks: "<a name=\"Remarks\"></a> The XmlDocument class is an in-memory representation of an XML document. It implements the W3C [XML Document Object Model (DOM)](~/add/includes/ajax-current-ext-md.md) Level 1 Core and the Core DOM Level 2.  \n  \n *DOM* stands for *document object model*. To read more about it, see [XML Document Object Model (DOM)](../Topic/XML%20Document%20Object%20Model%20\\(DOM\\).md).  \n  \n You can load XML into the DOM by using the XmlDocument class, and then programmatically read, modify, and remove XML in the document.  \n  \n If you want to pry open the XmlDocument class and see how it’s implemented, see the [Reference Source](http://referencesource.microsoft.com/#System.Xml/Xml/System/Xml/Dom/XmlDocument.cs#f82a4c1bd1f0ee12).  \n  \n<a name=\"Common\"></a>   \n## Tasks  \n  \n-   [Load XML into the document object model](#Load)  \n  \n-   [Validate it against a schema](#Validation)  \n  \n-   [Navigate the document tree](#Navigate)  \n  \n-   [Find nodes](#Find)  \n  \n-   [Edit nodes](#Edit)  \n  \n-   [Add nodes](#Add)  \n  \n-   [Remove nodes](#Remove)  \n  \n-   [Position nodes](#Position)  \n  \n<a name=\"Load\"></a>   \n## Load XML into the document object model  \n Start with an XML document like this one. It’s just a few books in a collection. But it does contain the basic things that you’d find in any XML document; a namespace, elements that represent data and attributes that describe the data.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n<books xmlns=\"http://www.contoso.com/books\">  \n  <book genre=\"novel\" ISBN=\"1-861001-57-8\" publicationdate=\"1823-01-28\">  \n    <title>Pride And Prejudice</title>  \n    <price>24.95</price>  \n  </book>  \n  <book genre=\"novel\" ISBN=\"1-861002-30-1\" publicationdate=\"1985-01-01\">  \n    <title>The Handmaid's Tale</title>  \n    <price>29.95</price>  \n  </book>  \n  <book genre=\"novel\" ISBN=\"1-861001-45-3\" publicationdate=\"1811-01-01\">  \n    <title>Sense and Sensibility</title>  \n    <price>19.95</price>  \n  </book>  \n</books>  \n```  \n  \n Next, load this data into the DOM so that you can work with it in memory. The most popular way to do this is refer to a file on your local computer or on a network.  \n  \n This example loads XML from a file. If the file doesn’t exist, it just generates some XML and loads that.  \n  \n [!code-cpp[XMLProcessingApp#1](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#1)]\n [!code-cs[XMLProcessingApp#1](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#1)]\n [!code-vb[XMLProcessingApp#1](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#1)]  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  \n  \n **Learn more:** [Reading an XML Document into the DOM](~/add/includes/ajax-current-ext-md.md)  \n  \n<a name=\"Validation\"></a>   \n## Validate it against a schema  \n Start with an XML schema like this one. This schema defines the data types in the XML and which attributes are required.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"  \n  attributeFormDefault=\"unqualified\"   \n  elementFormDefault=\"qualified\"  \n  targetNamespace=\"http://www.contoso.com/books\">   \n  <xs:element name=\"books\">  \n    <xs:complexType>  \n      <xs:sequence>  \n        <xs:element maxOccurs=\"unbounded\" name=\"book\">  \n          <xs:complexType>  \n            <xs:sequence>  \n              <xs:element name=\"title\" type=\"xs:string\" />  \n              <xs:element name=\"price\" type=\"xs:decimal\" />  \n            </xs:sequence>  \n            <xs:attribute name=\"genre\" type=\"xs:string\" use=\"required\" />  \n            <xs:attribute name=\"ISBN\" type=\"xs:string\" use=\"required\" />  \n            <xs:attribute name=\"publicationdate\" type=\"xs:date\" use=\"required\" />  \n          </xs:complexType>  \n        </xs:element>  \n      </xs:sequence>  \n    </xs:complexType>  \n  </xs:element>  \n</xs:schema>  \n```  \n  \n Create an <xref:System.Xml.XmlReader> object by using your schema, and then load that object into the DOM. Create an event handler that executes when code attempts to modify your XML file in ways that violate the rules of the schema.  \n  \n These blocks of code show helper methods that do all of this.  \n  \n [!code-cpp[XMLProcessingApp#2](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#2)]\n [!code-cs[XMLProcessingApp#2](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#2)]\n [!code-vb[XMLProcessingApp#2](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#2)]  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  \n  \n **Learn more:** [Validating an XML Document in the DOM](~/add/includes/ajax-current-ext-md.md)  \n  \n<a name=\"Navigate\"></a>   \n## Navigate the document tree  \n You can use properties to navigate around an XML document. But before you use any of them, let’s quickly review a few terms. Your document is composed of nodes. Each node has as single *parent* node directly above it. The only node that does not have a parent node is the document root, as it is the top-level node. Most nodes can have *child* nodes, which are nodes directly below them. Nodes that are at the same level are *siblings*.  \n  \n The following examples, show you how to obtain the root node, jump to the first child node of the root node, access any of its child nodes, get back out to the parent node, and then navigate across sibling nodes.  \n  \n **Start with the root node**  \n  \n This example gets the root node and then uses that node to output the contents of the document to the console.  \n  \n [!code-cs[Classic WebData XmlDocument.DocumentElement Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_3.cs)]\n [!code-cpp[Classic WebData XmlDocument.DocumentElement Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_3.cpp)]\n [!code-vb[Classic WebData XmlDocument.DocumentElement Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_3.vb)]  \n  \n **Get child nodes**  \n  \n This example jumps to the first child node of the root node and then iterates through the child nodes of that node if any exist.  \n  \n [!code-cs[Classic WebData XmlNode.HasChildNodes Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_4.cs)]\n [!code-cpp[Classic WebData XmlNode.HasChildNodes Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_4.cpp)]\n [!code-vb[Classic WebData XmlNode.HasChildNodes Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_4.vb)]  \n  \n **Get back to the parent node**  \n  \n Use the <xref:System.Xml.XmlDocument.ParentNode%2A> property.  \n  \n **Refer to the last child node**  \n  \n This example writes the price of a book to the console (which is the last child node of a book node).  \n  \n [!code-cpp[Classic WebData XmlNode.LastChild Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_5.cpp)]\n [!code-cs[Classic WebData XmlNode.LastChild Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_5.cs)]\n [!code-vb[Classic WebData XmlNode.LastChild Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_5.vb)]  \n  \n **Navigate forward across siblings**  \n  \n This example moves forward from book to book. Book nodes are siblings to one another.  \n  \n [!code-vb[Classic WebData XmlNode.NextSibling Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_6.vb)]\n [!code-cpp[Classic WebData XmlNode.NextSibling Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_6.cpp)]\n [!code-cs[Classic WebData XmlNode.NextSibling Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_6.cs)]  \n  \n **Navigate backwards across siblings**  \n  \n This example moves backwards from book to book.  \n  \n [!code-cs[Classic WebData XmlNode.PreviousSibling Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_7.cs)]\n [!code-cpp[Classic WebData XmlNode.PreviousSibling Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_7.cpp)]\n [!code-vb[Classic WebData XmlNode.PreviousSibling Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_7.vb)]  \n  \n<a name=\"Find\"></a>   \n## Find nodes  \n The most popular way to find one or more nodes of data is to use an XPath query string, but there are also methods that don’t require one.  \n  \n **Get a single node**  \n  \n This example locates a book by using the ISBN number.  \n  \n [!code-cpp[XMLProcessingApp#3](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#3)]\n [!code-cs[XMLProcessingApp#3](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#3)]\n [!code-vb[XMLProcessingApp#3](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#3)]  \n  \n The string used in this example is an Xpath query. You can find more examples of them here:   [XPath examples](https://msdn.microsoft.com/en-us/library/ms256086.aspx).  \n  \n You can also use the <xref:System.Xml.XmlDocument.GetElementById%2A> to retrieve nodes. To use this approach, you’ll have to define ID’s in the document type definition declarations of your XML file.  \n  \n After you get a node, you get the value of attributes or child nodes. This example does that with a book node.  \n  \n [!code-cpp[XMLProcessingApp#4](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#4)]\n [!code-cs[XMLProcessingApp#4](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#4)]\n [!code-vb[XMLProcessingApp#4](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#4)]  \n  \n **Get a collection of nodes**  \n  \n This example selects all books where the author's last name is **Austen**, and then changes the price of those books.  \n  \n [!code-cpp[Classic WebData XmlNode.SelectNodes Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_10.cpp)]\n [!code-cs[Classic WebData XmlNode.SelectNodes Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_10.cs)]\n [!code-vb[Classic WebData XmlNode.SelectNodes Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_10.vb)]  \n  \n You can also get a collection of nodes by using the name of the node. For example, this example gets a collection of all book titles.  \n  \n [!code-cs[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_11.cs)]\n [!code-cpp[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_11.cpp)]\n [!code-vb[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_11.vb)]  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  \n  \n **Learn more:** [Select Nodes Using XPath Navigation](~/add/includes/ajax-current-ext-md.md)  \n  \n<a name=\"Edit\"></a>   \n## Edit nodes  \n This example edits a book node and its attributes.  \n  \n [!code-cpp[XMLProcessingApp#7](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#7)]\n [!code-cs[XMLProcessingApp#7](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#7)]\n [!code-vb[XMLProcessingApp#7](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#7)]  \n  \n **Learn more:** [Modifying Nodes, Content, and Values in an XML Document](~/add/includes/ajax-current-ext-md.md)  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  \n  \n<a name=\"Add\"></a>   \n## Add nodes  \n To add a node, use the <xref:System.Xml.XmlDocument.CreateElement%2A> method or the <xref:System.Xml.XmlDocument.CreateNode%2A> method.  \n  \n To add a data node such as a book, use the <xref:System.Xml.XmlDocument.CreateElement%2A> method.  \n  \n For any other type of node such as a comment, whitespace node, or CDATA node, use the <xref:System.Xml.XmlDocument.CreateNode%2A> method.  \n  \n This example creates a book node, adds attrubutes to that node, and then adds that node to the document.  \n  \n [!code-cpp[XMLProcessingApp#5](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#5)]\n [!code-cs[XMLProcessingApp#5](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#5)]\n [!code-vb[XMLProcessingApp#5](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#5)]  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  \n  \n **Learn more:** [Inserting Nodes into an XML Document](~/add/includes/ajax-current-ext-md.md)  \n  \n<a name=\"Remove\"></a>   \n## Remove nodes  \n To remove a node, use the <xref:System.Xml.XmlNode.RemoveChild%2A> method.  \n  \n This example removes a book from the document and any whitespace that appears just before the book node.  \n  \n [!code-cpp[XMLProcessingApp#6](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#6)]\n [!code-cs[XMLProcessingApp#6](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#6)]\n [!code-vb[XMLProcessingApp#6](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#6)]  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  \n  \n **Learn more:** [Removing Nodes, Content, and Values from an XML Document](~/add/includes/ajax-current-ext-md.md)  \n  \n<a name=\"Position\"></a>   \n## Position nodes  \n You can choose where you want a node to appear in your document by using the <xref:System.Xml.XmlNode.InsertBefore%2A> and <xref:System.Xml.XmlNode.InsertAfter%2A> methods.  \n  \n This example shows two helper methods. One of them moves a node higher in a list. The other one moves a node lower.  \n  \n These methods could be used in an application that enables users to move books up and down in a list of books. When a user chooses a book and presses an up or down button, your code could call methods like these to position the corresponding book node before or after other book nodes.  \n  \n [!code-cpp[XMLProcessingApp#8](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#8)]\n [!code-cs[XMLProcessingApp#8](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#8)]\n [!code-vb[XMLProcessingApp#8](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#8)]  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)"
  syntax:
    content: 'public class XmlDocument : System.Xml.XmlNode'
  inheritance:
  - System.Object
  - System.Xml.XmlNode
  implements: []
  inheritedMembers:
  - System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.Attributes
  - System.Xml.XmlNode.ChildNodes
  - System.Xml.XmlNode.Clone
  - System.Xml.XmlNode.FirstChild
  - System.Xml.XmlNode.GetEnumerator
  - System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)
  - System.Xml.XmlNode.GetPrefixOfNamespace(System.String)
  - System.Xml.XmlNode.HasChildNodes
  - System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.Item(System.String)
  - System.Xml.XmlNode.Item(System.String,System.String)
  - System.Xml.XmlNode.LastChild
  - System.Xml.XmlNode.NamespaceURI
  - System.Xml.XmlNode.NextSibling
  - System.Xml.XmlNode.Normalize
  - System.Xml.XmlNode.OuterXml
  - System.Xml.XmlNode.Prefix
  - System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.PreviousSibling
  - System.Xml.XmlNode.PreviousText
  - System.Xml.XmlNode.RemoveAll
  - System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.SelectNodes(System.String)
  - System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.SelectSingleNode(System.String)
  - System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.Supports(System.String,System.String)
  - System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator
  - System.Xml.XmlNode.System#ICloneable#Clone
  - System.Xml.XmlNode.Value
  platform:
  - net462
- uid: System.Xml.XmlDocument.#ctor
  id: '#ctor'
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: XmlDocument()
  nameWithType: XmlDocument.XmlDocument()
  fullName: System.Xml.XmlDocument.XmlDocument()
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Xml.XmlDocument&quot;> </xref> klasy."
  remarks: ''
  example:
  - "The following is an example of load-time validation. A document type definition (DTD) validating <xref:System.Xml.XmlReader> is passed to the <xref:System.Xml.XmlDocument.Load%2A> method and a <xref:System.Xml.Schema.ValidationEventHandler> is provided to notify users of any validation errors. In this example a validation error is found, but the document is still loaded. Alternatively, you can define a validating <xref:System.Xml.XmlReader> to throw an exception and stop the load process when a validation error is found by not specifying the <xref:System.Xml.Schema.ValidationEventHandler>. For more information about validating XML data, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  \n  \n [!code-vb[XmlDocument.cctor#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_11_1.vb)]\n [!code-cs[XmlDocument.cctor#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_11_1.cs)]\n [!code-cpp[XmlDocument.cctor#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_11_1.cpp)]  \n  \n The example uses the `bookDTD.xml` file as input.  \n  \n [!code-xml[XmlDocument.cctor#2](~/add/codesnippet/xml/m-system.xml.xmldocument_11_2.xml)]"
  syntax:
    content: public XmlDocument ();
    parameters: []
  overload: System.Xml.XmlDocument.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)
  id: '#ctor(System.Xml.XmlImplementation)'
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: XmlDocument(XmlImplementation)
  nameWithType: XmlDocument.XmlDocument(XmlImplementation)
  fullName: System.Xml.XmlDocument.XmlDocument(XmlImplementation)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Inicjuje nowe wystąpienie klasy <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> klasy z określonym <xref href=&quot;System.Xml.XmlImplementation&quot;> </xref>."
  syntax:
    content: protected XmlDocument (System.Xml.XmlImplementation imp);
    parameters:
    - id: imp
      type: System.Xml.XmlImplementation
      description: "The <xref uid=&quot;langword_csharp_XmlImplementation&quot; name=&quot;XmlImplementation&quot; href=&quot;&quot;></xref> to use."
  overload: System.Xml.XmlDocument.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)
  id: '#ctor(System.Xml.XmlNameTable)'
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: XmlDocument(XmlNameTable)
  nameWithType: XmlDocument.XmlDocument(XmlNameTable)
  fullName: System.Xml.XmlDocument.XmlDocument(XmlNameTable)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Inicjuje nowe wystąpienie klasy <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> z określonym <xref:System.Xml.XmlNameTable>.</xref:System.Xml.XmlNameTable> — klasa"
  syntax:
    content: public XmlDocument (System.Xml.XmlNameTable nt);
    parameters:
    - id: nt
      type: System.Xml.XmlNameTable
      description: "The <xref uid=&quot;langword_csharp_XmlNameTable&quot; name=&quot;XmlNameTable&quot; href=&quot;&quot;></xref> to use."
  overload: System.Xml.XmlDocument.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.BaseURI
  id: BaseURI
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: BaseURI
  nameWithType: XmlDocument.BaseURI
  fullName: System.Xml.XmlDocument.BaseURI
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Pobiera podstawowy identyfikator URI bieżącego węzła."
  remarks: "Sieciowych dokumentu XML składa się z fragmentów dane zagregowane przy użyciu różnych mechanizmów standardowe włączenia W3C, dlatego zawiera węzły, które pochodzą z różnych miejscach. `BaseURI` Informuje, skąd pochodzą te węzły.       Dla węzłów dokumentu `BaseURI` Zwraca lokalizację dokumentu XML. Na przykład jeśli `XmlDocument` został załadowany przy użyciu następujących dokumentów wywołania. Obciążenia (&quot;http://server/mydata.xml&quot;), `BaseURI` dokumentu węzeł jest http://server/mydata.xml. Jednak jeśli <xref:System.Xml.XmlDocument.Load%2A>metody jest przekierowywane przez serwer do inny identyfikator URI `BaseURI` zwraca oryginalnego identyfikatora URI przekazane do `Load` metody.</xref:System.Xml.XmlDocument.Load%2A>       Ta właściwość jest rozszerzenie Microsoft do modelu DOM (Document Object). Aby uzyskać dodatkowe informacje na temat `BaseURI` i będzie pracował inne typy węzłów, zobacz <xref:System.Xml.XmlNode.BaseURI%2A?displayProperty=fullName>.</xref:System.Xml.XmlNode.BaseURI%2A?displayProperty=fullName>"
  syntax:
    content: public override string BaseURI { get; }
    return:
      type: System.String
      description: "Lokalizacja, z której została załadowana węzła."
  overload: System.Xml.XmlDocument.BaseURI*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CloneNode(System.Boolean)
  id: CloneNode(System.Boolean)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CloneNode(Boolean)
  nameWithType: XmlDocument.CloneNode(Boolean)
  fullName: System.Xml.XmlDocument.CloneNode(Boolean)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Tworzy duplikat tego węzła."
  remarks: "Ta metoda służy jako Konstruktor kopiujący dla węzłów. Sklonowany węzeł nie ma nadrzędnego (<xref:System.Xml.XmlNode.ParentNode%2A> zwraca `null`).</xref:System.Xml.XmlNode.ParentNode%2A>       Jeśli `deep` jest `true`, sklonowany węzeł zawiera wszystkie węzły podrzędne, w przeciwnym razie tylko `XmlDocument` węzeł został sklonowany. Zobacz <xref:System.Xml.XmlNode.CloneNode%2A?displayProperty=fullName>metody, aby zobaczyć, jak ta metoda ma zachowywać się na inne typy węzłów.</xref:System.Xml.XmlNode.CloneNode%2A?displayProperty=fullName>"
  example:
  - "The following example shows the difference between a deep and shallow clone.  \n  \n [!code-cpp[Classic WebData XmlDocument.CloneNode Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_13_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CloneNode Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_13_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CloneNode Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_13_1.vb)]"
  syntax:
    content: public override System.Xml.XmlNode CloneNode (bool deep);
    parameters:
    - id: deep
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby rekursywnie sklonować poddrzewo w określonym węźle; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> sklonować tylko węzeł."
    return:
      type: System.Xml.XmlNode
      description: "Sklonowany <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> węzła."
  overload: System.Xml.XmlDocument.CloneNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateAttribute(System.String)
  id: CreateAttribute(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateAttribute(String)
  nameWithType: XmlDocument.CreateAttribute(String)
  fullName: System.Xml.XmlDocument.CreateAttribute(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Tworzy <xref href=&quot;System.Xml.XmlAttribute&quot;> </xref> z określonym <xref:System.Xml.XmlDocument.Name*>.</xref:System.Xml.XmlDocument.Name*>"
  remarks: "`XmlAttribute` Mogą być dodawane do <xref:System.Xml.XmlElement>przy użyciu <xref:System.Xml.XmlElement.SetAttributeNode%2A>metody.</xref:System.Xml.XmlElement.SetAttributeNode%2A> </xref:System.Xml.XmlElement>"
  example:
  - "The following creates an attribute and adds it to an XML document.  \n  \n [!code-cs[Classic WebData XmlDocument.CreateAttribute Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_1_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.CreateAttribute Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_1_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateAttribute Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_1_1.vb)]"
  syntax:
    content: public System.Xml.XmlAttribute CreateAttribute (string name);
    parameters:
    - id: name
      type: System.String
      description: "Kwalifikowana nazwa atrybutu. Jeśli nazwa zawiera dwukropek, <> </> *> właściwość odzwierciedla część nazwy przed pierwszym dwukropek i <> </> *> właściwość odzwierciedla część nazwy po pierwszym dwukropkiem. <xref:System.Xml.XmlNode.NamespaceURI*>Pozostanie pusta, chyba że prefiks jest rozpoznany prefiks wbudowanych takich jak xmlns.</xref:System.Xml.XmlNode.NamespaceURI*> W takim przypadku <xref uid=&quot;langword_csharp_NamespaceURI&quot; name=&quot;NamespaceURI&quot; href=&quot;&quot;> </xref> ma wartość http://www.w3.org/2000/xmlns/."
    return:
      type: System.Xml.XmlAttribute
      description: "The new <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateAttribute(System.String,System.String)
  id: CreateAttribute(System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateAttribute(String,String)
  nameWithType: XmlDocument.CreateAttribute(String,String)
  fullName: System.Xml.XmlDocument.CreateAttribute(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Tworzy <xref href=&quot;System.Xml.XmlAttribute&quot;> </xref> z określonym kwalifikowaną nazwę i <xref:System.Xml.XmlNode.NamespaceURI*>.</xref:System.Xml.XmlNode.NamespaceURI*>"
  remarks: "`XmlAttribute` Mogą być dodawane do <xref:System.Xml.XmlElement>przy użyciu <xref:System.Xml.XmlElement.SetAttributeNode%2A>metody.</xref:System.Xml.XmlElement.SetAttributeNode%2A> </xref:System.Xml.XmlElement>"
  syntax:
    content: public System.Xml.XmlAttribute CreateAttribute (string qualifiedName, string namespaceURI);
    parameters:
    - id: qualifiedName
      type: System.String
      description: "Kwalifikowana nazwa atrybutu. Jeśli nazwa zawiera dwukropek, a następnie <> </> *> właściwości będzie odzwierciedlać część nazwy przed dwukropkiem i <> </> *> właściwości będzie odzwierciedlać część nazwy po dwukropkiem."
    - id: namespaceURI
      type: System.String
      description: "Jego identyfikator namespaceURI atrybutu. Jeśli kwalifikowana nazwa zawiera prefiks xmlns, ten parametr musi być http://www.w3.org/2000/xmlns/."
    return:
      type: System.Xml.XmlAttribute
      description: "The new <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)
  id: CreateAttribute(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateAttribute(String,String,String)
  nameWithType: XmlDocument.CreateAttribute(String,String,String)
  fullName: System.Xml.XmlDocument.CreateAttribute(String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Tworzy <xref href=&quot;System.Xml.XmlAttribute&quot;> </xref> z określonym <> </> *>, <> </> *> i <xref:System.Xml.XmlNode.NamespaceURI*>.</xref:System.Xml.XmlNode.NamespaceURI*>"
  remarks: "`XmlAttribute` Mogą być dodawane do <xref:System.Xml.XmlElement>przy użyciu <xref:System.Xml.XmlElement.SetAttributeNode%2A>metody.</xref:System.Xml.XmlElement.SetAttributeNode%2A> </xref:System.Xml.XmlElement>       Ta metoda jest rozszerzeniem firmy Microsoft do modelu DOM (Document Object)."
  syntax:
    content: public virtual System.Xml.XmlAttribute CreateAttribute (string prefix, string localName, string namespaceURI);
    parameters:
    - id: prefix
      type: System.String
      description: "Prefiks atrybutu (jeśli istnieje). String.Empty i <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> są równoważne."
    - id: localName
      type: System.String
      description: "Lokalna nazwa atrybutu."
    - id: namespaceURI
      type: System.String
      description: "Identyfikator URI przestrzeni nazw atrybutu (jeśli istnieje). String.Empty i <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> są równoważne. Jeśli `prefix` jest xmlns, ten parametr musi być http://www.w3.org/2000/xmlns/;, w przeciwnym razie jest zwracany wyjątek."
    return:
      type: System.Xml.XmlAttribute
      description: "The new <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateCDataSection(System.String)
  id: CreateCDataSection(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateCDataSection(String)
  nameWithType: XmlDocument.CreateCDataSection(String)
  fullName: System.Xml.XmlDocument.CreateCDataSection(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Tworzy <xref href=&quot;System.Xml.XmlCDataSection&quot;> </xref> zawierający określone dane."
  remarks: "Mimo że ta metoda tworzy nowy obiekt w kontekście dokumentu, nie automatycznie dodaje nowy obiekt w drzewie dokumentu. Aby dodać nowy obiekt, należy jawnie wywołać jednej z metod wstawiania węzła.       Zgodnie z zaleceniem W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210) węzły CDataSection są dozwolone w obrębie elementu węzłów i w węzłach EntityReference podczas węzeł EntityReference nie jest elementem podrzędnym węzła atrybutu."
  example:
  - "The following example creates a CDATA node and adds it to the document.  \n  \n [!code-vb[Classic WebData XmlDocument.CreateCDataSection Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_9_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.CreateCDataSection Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_9_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateCDataSection Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_9_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlCDataSection CreateCDataSection (string data);
    parameters:
    - id: data
      type: System.String
      description: "Zawartość nowego <xref uid=&quot;langword_csharp_XmlCDataSection&quot; name=&quot;XmlCDataSection&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Xml.XmlCDataSection
      description: "The new <xref uid=&quot;langword_csharp_XmlCDataSection&quot; name=&quot;XmlCDataSection&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateCDataSection*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateComment(System.String)
  id: CreateComment(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateComment(String)
  nameWithType: XmlDocument.CreateComment(String)
  fullName: System.Xml.XmlDocument.CreateComment(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Tworzy <xref href=&quot;System.Xml.XmlComment&quot;> </xref> zawierający określone dane."
  remarks: "Mimo że ta metoda tworzy nowy obiekt w kontekście dokumentu, nie automatycznie dodaje nowy obiekt w drzewie dokumentu. Aby dodać nowy obiekt, należy jawnie wywołać jednej z metod wstawiania węzła.       Zgodnie z zaleceniem W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210) węzły komentarza są dozwolone tylko węzłów dokumentu, Element i EntityReference, gdy węzeł EntityReference nie jest elementem podrzędnym węzła atrybutu."
  example:
  - "The following example creates a comment and adds it to an XML document.  \n  \n [!code-cs[Classic WebData XmlDocument.CreateComment Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_12_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateComment Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_12_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.CreateComment Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_12_1.cpp)]"
  syntax:
    content: public virtual System.Xml.XmlComment CreateComment (string data);
    parameters:
    - id: data
      type: System.String
      description: "Zawartość nowego <xref uid=&quot;langword_csharp_XmlComment&quot; name=&quot;XmlComment&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Xml.XmlComment
      description: "The new <xref uid=&quot;langword_csharp_XmlComment&quot; name=&quot;XmlComment&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateComment*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)
  id: CreateDefaultAttribute(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateDefaultAttribute(String,String,String)
  nameWithType: XmlDocument.CreateDefaultAttribute(String,String,String)
  fullName: System.Xml.XmlDocument.CreateDefaultAttribute(String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Tworzy domyślnego atrybutu z określonego prefiksu, lokalna nazwa i identyfikator URI przestrzeni nazw."
  remarks: "Ta metoda jest rozszerzeniem firmy Microsoft do modelu DOM (Document Object)."
  syntax:
    content: protected virtual System.Xml.XmlAttribute CreateDefaultAttribute (string prefix, string localName, string namespaceURI);
    parameters:
    - id: prefix
      type: System.String
      description: "Prefiks atrybutu (jeśli istnieje)."
    - id: localName
      type: System.String
      description: "Lokalna nazwa atrybutu."
    - id: namespaceURI
      type: System.String
      description: "Identyfikator URI przestrzeni nazw atrybutu (jeśli istnieje)."
    return:
      type: System.Xml.XmlAttribute
      description: "The new <xref href=&quot;System.Xml.XmlAttribute&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateDefaultAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateDocumentFragment
  id: CreateDocumentFragment
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateDocumentFragment()
  nameWithType: XmlDocument.CreateDocumentFragment()
  fullName: System.Xml.XmlDocument.CreateDocumentFragment()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Tworzy <xref href=&quot;System.Xml.XmlDocumentFragment&quot;> </xref>."
  remarks: "Nie można wstawić DocumentFragment węzły do dokumentu. Jednak można wstawić węzła DocumentFragment do dokumentu."
  example:
  - "The following example adds new nodes to an XML document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateDocumentFragment Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_14_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateDocumentFragment Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_14_1.vb)]\n [!code-cs[Classic WebData XmlDocument.CreateDocumentFragment Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_14_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlDocumentFragment CreateDocumentFragment ();
    parameters: []
    return:
      type: System.Xml.XmlDocumentFragment
      description: "The new <xref uid=&quot;langword_csharp_XmlDocumentFragment&quot; name=&quot;XmlDocumentFragment&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateDocumentFragment*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)
  id: CreateDocumentType(System.String,System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateDocumentType(String,String,String,String)
  nameWithType: XmlDocument.CreateDocumentType(String,String,String,String)
  fullName: System.Xml.XmlDocument.CreateDocumentType(String,String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Zwraca nowy <xref href=&quot;System.Xml.XmlDocumentType&quot;> </xref> obiektu."
  remarks: "Zwrócony węzeł będzie mieć przeanalizować <xref:System.Xml.XmlDocumentType.Entities%2A>i <xref:System.Xml.XmlDocumentType.Notations%2A>Kolekcje.</xref:System.Xml.XmlDocumentType.Notations%2A> </xref:System.Xml.XmlDocumentType.Entities%2A>       Mimo że ta metoda tworzy nowy obiekt w kontekście dokumentu, nie automatycznie dodaje nowy obiekt w drzewie dokumentu. Aby dodać nowy obiekt, należy jawnie wywołać jednej z metod wstawiania węzła.       Zgodnie z zaleceniem W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210) węzły DocumentType są dozwolone tylko w węzłach dokumentu. Każdy <xref:System.Xml.XmlDocument>może mieć tylko jeden węzeł DocumentType.</xref:System.Xml.XmlDocument> Węzeł DocumentType również należy wstawić przed elementem głównym `XmlDocument` (Jeśli dokument ma już element główny, nie można dodać węzła DocumentType).       Jeśli przekazanych parametrów nie łączyć do tworzenia prawidłowej `XmlDocumentType`, jest zgłaszany wyjątek."
  example:
  - "The following example creates a DocumentType node and adds it to an XML document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateDocumentType Example#1](~/add/codesnippet/cpp/8d2758e1-ca32-4a6b-b7e7-_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateDocumentType Example#1](~/add/codesnippet/csharp/8d2758e1-ca32-4a6b-b7e7-_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateDocumentType Example#1](~/add/codesnippet/visualbasic/8d2758e1-ca32-4a6b-b7e7-_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlDocumentType CreateDocumentType (string name, string publicId, string systemId, string internalSubset);
    parameters:
    - id: name
      type: System.String
      description: "Nazwa typu dokumentu."
    - id: publicId
      type: System.String
      description: "Identyfikatora publicznego typu dokumentu lub <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>. Można określić publicznego identyfikatora URI oraz identyfikatora systemowego do zidentyfikowania lokalizacji zewnętrznego podzestawu DTD."
    - id: systemId
      type: System.String
      description: "Systemowy identyfikator typu dokumentu lub <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>. Określa adres URL lokalizacji pliku zewnętrznego podzestawu DTD."
    - id: internalSubset
      type: System.String
      description: "Wewnętrznym podzestawie definicji DTD typu dokumentu lub <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Xml.XmlDocumentType
      description: "The new <xref uid=&quot;langword_csharp_XmlDocumentType&quot; name=&quot;XmlDocumentType&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateDocumentType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateElement(System.String)
  id: CreateElement(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateElement(String)
  nameWithType: XmlDocument.CreateElement(String)
  fullName: System.Xml.XmlDocument.CreateElement(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Tworzy element o określonej nazwie."
  remarks: "Należy pamiętać, że wystąpienie zwracane implementuje `XmlElement` interfejsu, więc domyślne atrybuty, które zostałyby utworzone bezpośrednio na zwracanym obiekcie.       Mimo że ta metoda tworzy nowy obiekt w kontekście dokumentu, nie automatycznie dodaje nowy obiekt w drzewie dokumentu. Aby dodać nowy obiekt, należy jawnie wywołać jednej z metod wstawiania węzła.       Zgodnie z zaleceniem W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210) węzły elementów są dozwolone dokumentu i elementu węzłów i w węzłach EntityReference podczas węzeł EntityReference nie jest elementem podrzędnym węzła atrybutu."
  example:
  - "The following example creates a new element and adds it to the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateElement Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_17_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateElement Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_17_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateElement Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_17_1.vb)]"
  syntax:
    content: public System.Xml.XmlElement CreateElement (string name);
    parameters:
    - id: name
      type: System.String
      description: "Kwalifikowana nazwa elementu. Jeśli nazwa zawiera dwukropek, a następnie <> </> *> właściwość odzwierciedla część nazwy przed dwukropkiem i <> </> *> właściwość odzwierciedla część nazwy po dwukropkiem. Kwalifikowana nazwa nie może zawierać of&quot;xmlns prefiks."
    return:
      type: System.Xml.XmlElement
      description: "The new <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateElement(System.String,System.String)
  id: CreateElement(System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateElement(String,String)
  nameWithType: XmlDocument.CreateElement(String,String)
  fullName: System.Xml.XmlDocument.CreateElement(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Tworzy <xref href=&quot;System.Xml.XmlElement&quot;> </xref> z nazwą kwalifikowaną i <xref:System.Xml.XmlNode.NamespaceURI*>.</xref:System.Xml.XmlNode.NamespaceURI*>"
  remarks: "Poniższy kod C# ```   XmlElement elem;   elem=doc.CreateElement(&quot;xy:item&quot;, &quot;urn:abc&quot;);   ``` powoduje element, który jest odpowiednikiem następującego tekstu XML.      ```   <xy:item          xmlns:xy=&quot;urn:abc&quot;/>   ```Mimo że ta metoda tworzy nowy obiekt w kontekście dokumentu, nie automatycznie dodaje nowy obiekt w drzewie dokumentu. Aby dodać nowy obiekt, należy jawnie wywołać jednej z metod wstawiania węzła.       Zgodnie z zaleceniem W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210) węzły elementów są dozwolone dokumentu i elementu węzłów i w węzłach EntityReference podczas węzeł EntityReference nie jest elementem podrzędnym węzła atrybutu."
  syntax:
    content: public System.Xml.XmlElement CreateElement (string qualifiedName, string namespaceURI);
    parameters:
    - id: qualifiedName
      type: System.String
      description: "Kwalifikowana nazwa elementu. Jeśli nazwa zawiera dwukropek, a następnie <> </> *> właściwości będzie odzwierciedlać część nazwy przed dwukropkiem i <> </> *> właściwości będzie odzwierciedlać część nazwy po dwukropkiem. Kwalifikowana nazwa nie może zawierać of&quot;xmlns prefiks."
    - id: namespaceURI
      type: System.String
      description: "Identyfikator URI elementu przestrzeni nazw."
    return:
      type: System.Xml.XmlElement
      description: "The new <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)
  id: CreateElement(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateElement(String,String,String)
  nameWithType: XmlDocument.CreateElement(String,String,String)
  fullName: System.Xml.XmlDocument.CreateElement(String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Tworzy element z określonym <> </> *>, <> </> *> i <xref:System.Xml.XmlNode.NamespaceURI*>.</xref:System.Xml.XmlNode.NamespaceURI*>"
  remarks: "Poniższy kod C# ```   XmlElement elem;   elem=doc.CreateElement(&quot;xy&quot;, &quot;item&quot;, &quot;urn:abc&quot;);   ``` tworzy element odpowiednikiem następującego tekstu XML: ```   <xy:item xmlns:xy=&quot;urn:abc&quot;/>   ``` mimo że ta metoda tworzy nowy obiekt w kontekście dokumentu, nie automatycznie dodaje nowy obiekt w drzewie dokumentu. Aby dodać nowy obiekt, należy jawnie wywołać jednej z metod wstawiania węzła.       Zgodnie z zaleceniem W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210) węzły elementów są dozwolone dokumentu i elementu węzłów i w węzłach EntityReference podczas EntityReference znajduje się poza węzła atrybutu.       Ta metoda jest rozszerzeniem firmy Microsoft do modelu DOM (Document Object)."
  example:
  - "The following example adds a new element to the existing XML document.  \n  \n [!code-cs[Classic WebData XmlDocument.CreateElement2 Example#1](~/add/codesnippet/csharp/9cc675fc-f986-4de5-bce9-_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateElement2 Example#1](~/add/codesnippet/visualbasic/9cc675fc-f986-4de5-bce9-_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.CreateElement2 Example#1](~/add/codesnippet/cpp/9cc675fc-f986-4de5-bce9-_1.cpp)]"
  syntax:
    content: public virtual System.Xml.XmlElement CreateElement (string prefix, string localName, string namespaceURI);
    parameters:
    - id: prefix
      type: System.String
      description: "Prefiks nowego elementu (jeśli istnieje). String.Empty i <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> są równoważne."
    - id: localName
      type: System.String
      description: "Lokalna nazwa nowego elementu."
    - id: namespaceURI
      type: System.String
      description: "Identyfikator URI przestrzeni nazw nowego elementu (jeśli istnieje). String.Empty i <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> są równoważne."
    return:
      type: System.Xml.XmlElement
      description: "The new <xref href=&quot;System.Xml.XmlElement&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateEntityReference(System.String)
  id: CreateEntityReference(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateEntityReference(String)
  nameWithType: XmlDocument.CreateEntityReference(String)
  fullName: System.Xml.XmlDocument.CreateEntityReference(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Tworzy <xref href=&quot;System.Xml.XmlEntityReference&quot;> </xref> o określonej nazwie."
  remarks: "Jeśli obiektem przywoływanym jest znany, lista podrzędna `XmlEntityReference` węzeł jest taki sam jak odpowiadającego wprowadzone <xref:System.Xml.XmlEntity>węzła.</xref:System.Xml.XmlEntity>       Przestrzenie nazw używane w tekst zastępczy dla odwołania do jednostki są powiązane z chwili utworzenia obiektu nadrzędnego węzła odniesienia jednostki ustawiono wcześniej (na przykład, gdy węzeł odniesienia jednostki są wstawiane do dokumentu). Na przykład podane następujące jednostki: ```   <!ENTITY a &quot;<b>test</b>&quot;>   ``` połączeń `CreateEntityReference(&quot;a&quot;)` powrócisz jednego węzła EntityReference typu bez elementów podrzędnych. Jeśli Dołącz ten węzeł jako element podrzędny następującego węzła ```   <item xmlns=&quot;urn:1&quot;/>   ``` następnie, w tym czasie wywołania metody <xref:System.Xml.XmlNode.AppendChild%2A>, ustawiono nadrzędnego węzła odniesienia nowo utworzonej jednostki i elementy podrzędne są rozwinięty w tym kontekście przestrzeni nazw.</xref:System.Xml.XmlNode.AppendChild%2A> Węzeł elementu podrzędnego `b` będą miały taki sam identyfikator NamespaceURI `urn:1`. Węzły podrzędne odwołanie do jednostki pozostają takie same, nawet jeśli przenosisz odwołanie do jednostki, w miejsce w dokumencie, który ma inną domyślny kontekst nazw. To nie odbywa się dla istniejących węzłów odwołanie do jednostki po usunięciu i wstawić je lub odwołań do jednostek, które można klonować z <xref:System.Xml.XmlDocument.CloneNode%2A>.</xref:System.Xml.XmlDocument.CloneNode%2A> Zdarza się tylko dla odwołania do nowo utworzonej jednostki.       Jeśli odpowiednia jednostka nie jest zdefiniowany w DocumentType po dodaniu węzła odwołanie do jednostki, ponieważ odwołanie do jednostki nie jest określony, jego tylko węzeł podrzędny będzie pusty tekst węzła.       Amp jednostek wbudowanych, lt, gt, apos i quot dozwolone są też i będą miały elementem podrzędnym tekstu z wartością odpowiedni znak rozwinięte.       Mimo że ta metoda tworzy nowy obiekt w kontekście dokumentu, nie automatycznie dodaje nowy obiekt w drzewie dokumentu. Aby dodać nowy obiekt, należy jawnie wywołać jednej z metod wstawiania węzła.       Zgodnie z zaleceniem W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210) węzły EntityReference są dozwolone tylko w obrębie elementu, atrybutu i EntityReference węzłów."
  example:
  - "The following example creates two entity reference nodes and inserts them into an XML document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateEntityReference Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_7_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateEntityReference Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_7_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateEntityReference Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_7_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlEntityReference CreateEntityReference (string name);
    parameters:
    - id: name
      type: System.String
      description: "Nazwa odwołania do jednostki."
    return:
      type: System.Xml.XmlEntityReference
      description: "The new <xref uid=&quot;langword_csharp_XmlEntityReference&quot; name=&quot;XmlEntityReference&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateEntityReference*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Nazwa jest nieprawidłowa (na przykład nazwy, począwszy od &quot;#&quot; są nieprawidłowe.)"
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateNavigator
  id: CreateNavigator
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateNavigator()
  nameWithType: XmlDocument.CreateNavigator()
  fullName: System.Xml.XmlDocument.CreateNavigator()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Tworzy nowy <xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref> obiektu do nawigowania tego dokumentu."
  remarks: "Ta metoda jest rozszerzeniem firmy Microsoft do modelu DOM (Document Object)."
  example:
  - See <xref:System.Xml.XmlNode.CreateNavigator%2A?displayProperty=fullName> for an example using this method.
  syntax:
    content: public override System.Xml.XPath.XPathNavigator CreateNavigator ();
    parameters: []
    return:
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref> Obiektu."
  overload: System.Xml.XmlDocument.CreateNavigator*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateNavigator(System.Xml.XmlNode)
  id: CreateNavigator(System.Xml.XmlNode)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateNavigator(XmlNode)
  nameWithType: XmlDocument.CreateNavigator(XmlNode)
  fullName: System.Xml.XmlDocument.CreateNavigator(XmlNode)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Tworzy <xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref> obiektu do nawigowania w tym dokumencie znajduje się na <xref href=&quot;System.Xml.XmlNode&quot;> </xref> określony."
  remarks: "Ta metoda jest rozszerzeniem firmy Microsoft do modelu DOM (Document Object)."
  example:
  - See <xref:System.Xml.XmlNode.CreateNavigator%2A?displayProperty=fullName> for an example using this method.
  syntax:
    content: protected virtual System.Xml.XPath.XPathNavigator CreateNavigator (System.Xml.XmlNode node);
    parameters:
    - id: node
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref> Ma Nawigatora wstępnie ustawiony na."
    return:
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref> Obiektu."
  overload: System.Xml.XmlDocument.CreateNavigator*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)
  id: CreateNode(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateNode(String,String,String)
  nameWithType: XmlDocument.CreateNode(String,String,String)
  fullName: System.Xml.XmlDocument.CreateNode(String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Tworzy <xref href=&quot;System.Xml.XmlNode&quot;> </xref> z typem określonym węźle <> </> *>, i <> </> *>."
  remarks: "The `nodeTypeString` parameter is case sensitive and must be one of the values in the following table.  \n  \n|nodeTypeString|XmlNodeType|  \n|--------------------|-----------------|  \n|attribute|Attribute|  \n|cdatasection|CDATA|  \n|comment|Comment|  \n|document|Document|  \n|documentfragment|DocumentFragment|  \n|documenttype|DocumentType|  \n|element|Element|  \n|entityreference|EntityReference|  \n|processinginstruction|ProcessingInstruction|  \n|significantwhitespace|SignificantWhitespace|  \n|text|Text|  \n|whitespace|Whitespace|  \n  \n Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.  \n  \n The following table shows you what NodeType[row] is allowed inside another NodeType[column] according to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210).  \n  \n||Document|DocumentType|XmlDeclaration|Element|Attribute|Text|CDATA|Markup|EntityReference|  \n|------|--------------|------------------|--------------------|-------------|---------------|----------|-----------|------------|---------------------|  \n|`Document`|no|no|no|no|no|no|no|no|no|  \n|`DocumentType`|yes|no|no|no|no|no|no|no|no|  \n|`XmlDeclaration`|yes*|no|no|no|no|no|no|no|no|  \n|`Element`|yes|no|no|yes|no|no|no|no|yes***|  \n|`Attribute`|no|no|no|yes****|no|no|no|no|no|  \n|`Text`|no|no|no|yes|yes|no|no|no|yes|  \n|`CDATA`|no|no|no|yes|no|no|no|no|yes***|  \n|`Markup**`|yes|no|no|yes|no|no|no|no|no|  \n|`EntityReference`|no|no|no|yes|yes|no|no|no|yes|  \n  \n \\* The XmlDeclaration node must be the first child of the Document node.  \n  \n ** Markup includes ProcessingInstruction and Comment nodes.  \n  \n *** Element and CDATA nodes are only allowed in EntityReference nodes when the EntityReference node is not a child of an Attribute node.  \n  \n **** Attributes are not children of an Element node. Attributes are contained inside an attribute collection that belongs to an Element node.  \n  \n This method is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example creates a new element and inserts it into the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateNode1 Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_15_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateNode1 Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_15_1.vb)]\n [!code-cs[Classic WebData XmlDocument.CreateNode1 Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_15_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlNode CreateNode (string nodeTypeString, string name, string namespaceURI);
    parameters:
    - id: nodeTypeString
      type: System.String
      description: "Wersja ciągu <xref:System.Xml.XmlNodeType>nowego węzła.</xref:System.Xml.XmlNodeType> Ten parametr musi być jedną z wartości wymienionych w poniższej tabeli."
    - id: name
      type: System.String
      description: "Kwalifikowana nazwa nowego węzła. Jeśli nazwa zawiera dwukropek, jest analizowana w <> </> *> i <> </> *> składników."
    - id: namespaceURI
      type: System.String
      description: "Identyfikator URI przestrzeni nazw z nowego węzła."
    return:
      type: System.Xml.XmlNode
      description: "The new <xref uid=&quot;langword_csharp_XmlNode&quot; name=&quot;XmlNode&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateNode*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Nie podano nazwy i <xref uid=&quot;langword_csharp_XmlNodeType&quot; name=&quot;XmlNodeType&quot; href=&quot;&quot;> </xref> wymaga nazwy; lub <code> nodeTypeString </code> nie jest jednym z poniższych ciągów."
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)
  id: CreateNode(System.Xml.XmlNodeType,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateNode(XmlNodeType,String,String)
  nameWithType: XmlDocument.CreateNode(XmlNodeType,String,String)
  fullName: System.Xml.XmlDocument.CreateNode(XmlNodeType,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Tworzy <xref href=&quot;System.Xml.XmlNode&quot;> </xref> z określonym <xref:System.Xml.XmlNodeType>, <> </> *>, i <> </> *>.</xref:System.Xml.XmlNodeType>"
  remarks: "Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.  \n  \n The following table shows you what NodeType[row] is allowed inside another NodeType[column] according to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210).  \n  \n||Document|DocumentType|XmlDeclaration|Element|Attribute|Text|CDATA|Markup|EntityReference|  \n|------|--------------|------------------|--------------------|-------------|---------------|----------|-----------|------------|---------------------|  \n|`Document`|no|no|no|no|no|no|no|no|no|  \n|`DocumentType`|yes|no|no|no|no|no|no|no|no|  \n|`XmlDeclaration`|yes*|no|no|no|no|no|no|no|no|  \n|`Element`|yes|no|no|yes|no|no|no|no|yes***|  \n|`Attribute`|no|no|no|yes****|no|no|no|no|no|  \n|`Text`|no|no|no|yes|yes|no|no|no|yes|  \n|`CDATA`|no|no|no|yes|no|no|no|no|yes***|  \n|`Markup**`|yes|no|no|yes|no|no|no|no|no|  \n|`EntityReference`|no|no|no|yes|yes|no|no|no|yes|  \n  \n \\* The XmlDeclaration node must be the first child of the Document node.  \n  \n ** Markup includes ProcessingInstruction and Comment nodes.  \n  \n *** Element and CDATA nodes are only allowed in EntityReference nodes when the EntityReference node is not a child of an Attribute node.  \n  \n **** Attributes are not children of an Element node. Attributes are contained inside an attribute collection that belongs to an Element node.  \n  \n This method is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example creates a new element and inserts it into an XML document.  \n  \n [!code-cs[Classic WebData XmlDocument.CreateNode Example#1](~/add/codesnippet/csharp/5e223793-7104-464b-b797-_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.CreateNode Example#1](~/add/codesnippet/cpp/5e223793-7104-464b-b797-_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateNode Example#1](~/add/codesnippet/visualbasic/5e223793-7104-464b-b797-_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlNode CreateNode (System.Xml.XmlNodeType type, string name, string namespaceURI);
    parameters:
    - id: type
      type: System.Xml.XmlNodeType
      description: "<xref uid=&quot;langword_csharp_XmlNodeType&quot; name=&quot;XmlNodeType&quot; href=&quot;&quot;> </xref> Nowego węzła."
    - id: name
      type: System.String
      description: "Kwalifikowana nazwa nowego węzła. Jeśli nazwa zawiera dwukropek, jest analizowana w <> </> *> i <> </> *> składników."
    - id: namespaceURI
      type: System.String
      description: "Identyfikator URI przestrzeni nazw z nowego węzła."
    return:
      type: System.Xml.XmlNode
      description: "The new <xref uid=&quot;langword_csharp_XmlNode&quot; name=&quot;XmlNode&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateNode*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Nie podano nazwy i <xref uid=&quot;langword_csharp_XmlNodeType&quot; name=&quot;XmlNodeType&quot; href=&quot;&quot;> </xref> wymaga nazwy."
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)
  id: CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateNode(XmlNodeType,String,String,String)
  nameWithType: XmlDocument.CreateNode(XmlNodeType,String,String,String)
  fullName: System.Xml.XmlDocument.CreateNode(XmlNodeType,String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Creates a <xref href=&quot;System.Xml.XmlNode&quot;></xref> with the specified <xref:System.Xml.XmlNodeType>, <>*>, <>*>, and <xref:System.Xml.XmlNode.NamespaceURI*>.</xref:System.Xml.XmlNode.NamespaceURI*></xref:System.Xml.XmlNodeType>"
  remarks: "Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.  \n  \n The following table shows you what NodeType[row] is allowed inside another NodeType[column] according to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210).  \n  \n||Document|DocumentType|XmlDeclaration|Element|Attribute|Text|CDATA|Markup|EntityReference|  \n|------|--------------|------------------|--------------------|-------------|---------------|----------|-----------|------------|---------------------|  \n|`Document`|no|no|no|no|no|no|no|no|no|  \n|`DocumentType`|yes|no|no|no|no|no|no|no|no|  \n|`XmlDeclaration`|yes*|no|no|no|no|no|no|no|no|  \n|`Element`|yes|no|no|yes|no|no|no|no|yes***|  \n|`Attribute`|no|no|no|yes****|no|no|no|no|no|  \n|`Text`|no|no|no|yes|yes|no|no|no|yes|  \n|`CDATA`|no|no|no|yes|no|no|no|no|yes***|  \n|`Markup**`|yes|no|no|yes|no|no|no|no|no|  \n|`EntityReference`|no|no|no|yes|yes|no|no|no|yes|  \n  \n \\* The XmlDeclaration node must be the first child of the Document node.  \n  \n ** Markup includes ProcessingInstruction and Comment nodes.  \n  \n *** Element and CDATA nodes are only allowed in EntityReference nodes when the EntityReference node is not a child of an Attribute node.  \n  \n **** Attributes are not children of an Element node. Attributes are contained inside an attribute collection that belongs to the Element node.  \n  \n This method is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example adds a new element to the document.  \n  \n [!code-vb[Classic WebData XmlDocument.CreateNode2 Example#1](~/add/codesnippet/visualbasic/9b485b37-d267-4da7-a8ac-_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.CreateNode2 Example#1](~/add/codesnippet/cpp/9b485b37-d267-4da7-a8ac-_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateNode2 Example#1](~/add/codesnippet/csharp/9b485b37-d267-4da7-a8ac-_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlNode CreateNode (System.Xml.XmlNodeType type, string prefix, string name, string namespaceURI);
    parameters:
    - id: type
      type: System.Xml.XmlNodeType
      description: "<xref uid=&quot;langword_csharp_XmlNodeType&quot; name=&quot;XmlNodeType&quot; href=&quot;&quot;> </xref> Nowego węzła."
    - id: prefix
      type: System.String
      description: "Prefiks nowego węzła."
    - id: name
      type: System.String
      description: "Lokalna nazwa nowego węzła."
    - id: namespaceURI
      type: System.String
      description: "Identyfikator URI przestrzeni nazw z nowego węzła."
    return:
      type: System.Xml.XmlNode
      description: "The new <xref uid=&quot;langword_csharp_XmlNode&quot; name=&quot;XmlNode&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateNode*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Nie podano nazwy i <xref uid=&quot;langword_csharp_XmlNodeType&quot; name=&quot;XmlNodeType&quot; href=&quot;&quot;> </xref> wymaga nazwy."
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)
  id: CreateProcessingInstruction(System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateProcessingInstruction(String,String)
  nameWithType: XmlDocument.CreateProcessingInstruction(String,String)
  fullName: System.Xml.XmlDocument.CreateProcessingInstruction(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Tworzy <xref href=&quot;System.Xml.XmlProcessingInstruction&quot;> </xref> z określoną nazwą i danych."
  remarks: "Mimo że ta metoda tworzy nowy obiekt w kontekście dokumentu, nie automatycznie dodaje nowy obiekt w drzewie dokumentu. Aby dodać nowy obiekt, należy jawnie wywołać jednej z metod wstawiania węzła.       Zgodnie z zaleceniem W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210) węzły ProcessingInstruction są dozwolone tylko węzłów dokumentu, Element i EntityReference, gdy węzeł EntityReference nie jest elementem podrzędnym węzła atrybutu."
  example:
  - "The following example creates a ProcessingInstruction node and adds it to the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateProcessingInstruction Example#1](~/add/codesnippet/cpp/b628e59c-914d-4083-89f5-_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateProcessingInstruction Example#1](~/add/codesnippet/visualbasic/b628e59c-914d-4083-89f5-_1.vb)]\n [!code-cs[Classic WebData XmlDocument.CreateProcessingInstruction Example#1](~/add/codesnippet/csharp/b628e59c-914d-4083-89f5-_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlProcessingInstruction CreateProcessingInstruction (string target, string data);
    parameters:
    - id: target
      type: System.String
      description: "Nazwa instrukcji przetwarzania."
    - id: data
      type: System.String
      description: "Dane dla instrukcji przetwarzania."
    return:
      type: System.Xml.XmlProcessingInstruction
      description: "The new <xref uid=&quot;langword_csharp_XmlProcessingInstruction&quot; name=&quot;XmlProcessingInstruction&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateProcessingInstruction*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)
  id: CreateSignificantWhitespace(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateSignificantWhitespace(String)
  nameWithType: XmlDocument.CreateSignificantWhitespace(String)
  fullName: System.Xml.XmlDocument.CreateSignificantWhitespace(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Tworzy <xref href=&quot;System.Xml.XmlSignificantWhitespace&quot;> </xref> węzła."
  remarks: "Ta metoda jest rozszerzeniem firmy Microsoft do modelu DOM (Document Object). Jeśli chcesz ręcznie format dokumentu jest używany.       Mimo że ta metoda tworzy nowy obiekt w kontekście dokumentu, nie automatycznie dodaje nowy obiekt w drzewie dokumentu. Aby dodać nowy obiekt, należy jawnie wywołać jednej z metod wstawiania węzła."
  example:
  - "The following example adds significant white space to the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateSignificantWhitespace Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_24_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateSignificantWhitespace Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_24_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateSignificantWhitespace Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_24_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlSignificantWhitespace CreateSignificantWhitespace (string text);
    parameters:
    - id: text
      type: System.String
      description: "Ciąg musi zawierać tylko następujące znaki &amp;#20; &amp;#10; &amp;#13; and &amp;#9;"
    return:
      type: System.Xml.XmlSignificantWhitespace
      description: "A new <xref uid=&quot;langword_csharp_XmlSignificantWhitespace&quot; name=&quot;XmlSignificantWhitespace&quot; href=&quot;&quot;></xref> node."
  overload: System.Xml.XmlDocument.CreateSignificantWhitespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateTextNode(System.String)
  id: CreateTextNode(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateTextNode(String)
  nameWithType: XmlDocument.CreateTextNode(String)
  fullName: System.Xml.XmlDocument.CreateTextNode(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Tworzy <xref href=&quot;System.Xml.XmlText&quot;> </xref> określonym tekstem."
  remarks: "Mimo że ta metoda tworzy nowy obiekt w kontekście dokumentu, nie automatycznie dodaje nowy obiekt w drzewie dokumentu. Aby dodać nowy obiekt, należy jawnie wywołać jednej z metod wstawiania węzła.       Zgodnie z zaleceniem W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210) węzły tekstowe są dozwolone tylko w obrębie elementu, atrybutu i EntityReference węzłów."
  example:
  - "The following example creates a new element and adds it to the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateElement Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_3_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateElement Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_3_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateElement Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_3_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlText CreateTextNode (string text);
    parameters:
    - id: text
      type: System.String
      description: "Tekst dla węzła tekstowego."
    return:
      type: System.Xml.XmlText
      description: "Nowy <xref uid=&quot;langword_csharp_XmlText&quot; name=&quot;XmlText&quot; href=&quot;&quot;> </xref> węzła."
  overload: System.Xml.XmlDocument.CreateTextNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateWhitespace(System.String)
  id: CreateWhitespace(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateWhitespace(String)
  nameWithType: XmlDocument.CreateWhitespace(String)
  fullName: System.Xml.XmlDocument.CreateWhitespace(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Tworzy <xref href=&quot;System.Xml.XmlWhitespace&quot;> </xref> węzła."
  remarks: "Ta metoda jest rozszerzeniem firmy Microsoft do modelu DOM (Document Object). Jeśli chcesz ręcznie format dokumentu jest używany.       Mimo że ta metoda tworzy nowy obiekt w kontekście dokumentu, nie automatycznie dodaje nowy obiekt w drzewie dokumentu. Aby dodać nowy obiekt, należy jawnie wywołać jednej z metod wstawiania węzła."
  example:
  - "The following example adds white space to the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateWhitespace Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_4_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateWhitespace Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_4_1.vb)]\n [!code-cs[Classic WebData XmlDocument.CreateWhitespace Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_4_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlWhitespace CreateWhitespace (string text);
    parameters:
    - id: text
      type: System.String
      description: "Ciąg musi zawierać tylko następujące znaki &amp;#20; &amp;#10; &amp;#13; and &amp;#9;"
    return:
      type: System.Xml.XmlWhitespace
      description: "A new <xref uid=&quot;langword_csharp_XmlWhitespace&quot; name=&quot;XmlWhitespace&quot; href=&quot;&quot;></xref> node."
  overload: System.Xml.XmlDocument.CreateWhitespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)
  id: CreateXmlDeclaration(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateXmlDeclaration(String,String,String)
  nameWithType: XmlDocument.CreateXmlDeclaration(String,String,String)
  fullName: System.Xml.XmlDocument.CreateXmlDeclaration(String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Tworzy <xref href=&quot;System.Xml.XmlDeclaration&quot;> </xref> węzła z określonymi wartościami."
  remarks: "Atrybuty są widoczne jako specjalne właściwości na `XmlDeclaration` węzeł, a nie jako <xref:System.Xml.XmlAttribute>węzłów.</xref:System.Xml.XmlAttribute>       Mimo że ta metoda tworzy nowy obiekt w kontekście dokumentu, nie automatycznie dodaje nowy obiekt w drzewie dokumentu. Aby dodać nowy obiekt, należy jawnie wywołać jednej z metod wstawiania węzła.       Zgodnie z zaleceniem W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210) `XmlDeclaration` węzła musi być pierwszym węzłem w dokumencie.       Ta metoda jest rozszerzeniem firmy Microsoft do modelu DOM (Document Object)."
  example:
  - "The following example creates an XML declaration and adds it to the document.  \n  \n [!code-cs[Classic WebData XmlDocument.CreateXmlDeclaration Example#1](~/add/codesnippet/csharp/89cf6f87-55c5-4c7d-9c11-_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.CreateXmlDeclaration Example#1](~/add/codesnippet/cpp/89cf6f87-55c5-4c7d-9c11-_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateXmlDeclaration Example#1](~/add/codesnippet/visualbasic/89cf6f87-55c5-4c7d-9c11-_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlDeclaration CreateXmlDeclaration (string version, string encoding, string standalone);
    parameters:
    - id: version
      type: System.String
      description: "Wersja musi być &quot;1.0&quot;."
    - id: encoding
      type: System.String
      description: "Wartość atrybutu kodowania. To kodowanie, które jest używane podczas zapisywania <xref href=&quot;System.Xml.XmlDocument&quot;> </xref> w pliku lub strumienia; w związku z tym należy ją ustawić na ciąg obsługiwane przez <xref:System.Text.Encoding>klasy, w przeciwnym razie <xref:System.Xml.XmlDocument.Save*>nie powiedzie się.</xref:System.Xml.XmlDocument.Save*> </xref:System.Text.Encoding> Jeśli jest to <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> lub String.Empty, <xref uid=&quot;langword_csharp_Save&quot; name=&quot;Save&quot; href=&quot;&quot;> </xref> — metoda nie zapisuje atrybut kodowania w deklaracji XML i w związku z tym jest używane domyślne kodowanie UTF-8.       Uwaga: Jeśli <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> są zapisywane albo <xref:System.IO.TextWriter>lub <xref:System.Xml.XmlTextWriter>, ta wartość kodowania zostaną odrzucone.</xref:System.Xml.XmlTextWriter> </xref:System.IO.TextWriter> Zamiast tego kodowanie <xref uid=&quot;langword_csharp_TextWriter&quot; name=&quot;TextWriter&quot; href=&quot;&quot;> </xref> lub <xref uid=&quot;langword_csharp_XmlTextWriter&quot; name=&quot;XmlTextWriter&quot; href=&quot;&quot;> </xref> jest używany. Dzięki temu, że XML zapisywane może zostać odczytany ponownie przy użyciu kodowania poprawne."
    - id: standalone
      type: System.String
      description: "Wartość musi być albo &quot;yes&quot; lub &quot;no&quot;. Jeśli jest to <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> lub String.Empty, <xref uid=&quot;langword_csharp_Save&quot; name=&quot;Save&quot; href=&quot;&quot;> </xref> — metoda nie zapisuje autonomicznego atrybutu deklaracji XML."
    return:
      type: System.Xml.XmlDeclaration
      description: "Nowy <xref uid=&quot;langword_csharp_XmlDeclaration&quot; name=&quot;XmlDeclaration&quot; href=&quot;&quot;> </xref> węzła."
  overload: System.Xml.XmlDocument.CreateXmlDeclaration*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Wartości <code> version </code> lub <code> standalone </code> są coś innych niż wymienione powyżej."
  platform:
  - net462
- uid: System.Xml.XmlDocument.DocumentElement
  id: DocumentElement
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: DocumentElement
  nameWithType: XmlDocument.DocumentElement
  fullName: System.Xml.XmlDocument.DocumentElement
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Pobiera głównego <xref href=&quot;System.Xml.XmlElement&quot;> </xref> dla dokumentu."
  remarks: ''
  example:
  - "The following example displays the root element of the XML document.  \n  \n [!code-cs[Classic WebData XmlDocument.DocumentElement Example#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_8_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.DocumentElement Example#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_8_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.DocumentElement Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_8_1.vb)]  \n  \n **Output:**  \n  \n```  \n<book genre=\"novel\" ISBN=\"1-861001-57-5\"><title>Pride And Prejudice</title></book>   \n```"
  syntax:
    content: public System.Xml.XmlElement DocumentElement { get; }
    return:
      type: System.Xml.XmlElement
      description: "<xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref> Reprezentujący korzeń drzewa dokumentu XML. Jeśli główny nie istnieje, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> jest zwracany."
  overload: System.Xml.XmlDocument.DocumentElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.DocumentType
  id: DocumentType
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: DocumentType
  nameWithType: XmlDocument.DocumentType
  fullName: System.Xml.XmlDocument.DocumentType
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Pobiera węzeł zawierający deklaracji DOCTYPE."
  remarks: "`XmlDocument` Może mieć tylko jeden element podrzędny o <xref:System.Xml.XmlNodeType>równa DocumentType.</xref:System.Xml.XmlNodeType>      > [!NOTE] > Ta właściwość jest tylko do odczytu. Aby zmienić węzeł dokumentu, usuń istniejący węzeł, Utwórz nowy go przy użyciu <xref:System.Xml.XmlDocument.CreateDocumentType%2A>metody i dodać nowego węzła do dokumentu.</xref:System.Xml.XmlDocument.CreateDocumentType%2A>"
  example:
  - "The following example gets and displays the DOCTYPE declaration for the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.DocumentType Example#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_4_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.DocumentType Example#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_4_1.cs)]\n [!code-vb[Classic WebData XmlDocument.DocumentType Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_4_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlDocumentType DocumentType { get; }
    return:
      type: System.Xml.XmlDocumentType
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref> Zawierający DocumentType (deklaracji typu dokumentu)."
  overload: System.Xml.XmlDocument.DocumentType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.GetElementById(System.String)
  id: GetElementById(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: GetElementById(String)
  nameWithType: XmlDocument.GetElementById(String)
  fullName: System.Xml.XmlDocument.GetElementById(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Pobiera <xref href=&quot;System.Xml.XmlElement&quot;> </xref> o określonym identyfikatorze."
  remarks: "Jeśli dokument ma wiele elementów o identyfikatorze dopasowania, ta metoda zwraca pierwszy element dopasowania w dokumencie.      > [!NOTE] > Implementacji modelu DOM musi mieć informacje, który definiuje atrybutów, które mają identyfikator typu. Mimo że można zdefiniować atrybutów typu ID schematów XSD lub definicji DTD, ta wersja produktu obsługuje tylko określone w definicji DTD. Atrybutów o tej nazwie, które nie mają &quot;ID&quot; wpisz identyfikator, jeśli więc jest zdefiniowany w definicji DTD. Implementacje, gdzie jest nieznany czy atrybut typu ID powinna zwrócić `null`."
  example:
  - "The following example uses the `GetElementById` method.  \n  \n [!code-cs[Classic WebData XmlDocument.GetElementById Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_20_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.GetElementById Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_20_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.GetElementById Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_20_1.vb)]  \n  \n The example uses the file, `ids.xml`, as input.  \n  \n```xml  \n<!DOCTYPE root [  \n  <!ELEMENT root ANY>   \n  <!ELEMENT Person ANY>   \n  <!ELEMENT Customer EMPTY>  \n  <!ELEMENT Team EMPTY>  \n  <!ATTLIST Person SSN ID #REQUIRED>  \n  <!ATTLIST Customer id IDREF #REQUIRED >  \n  <!ATTLIST Team members IDREFS #REQUIRED>]>  \n<root>  \n  <Person SSN='A111' Name='Fred'/>  \n  <Person SSN='A222' Name='Tom'/>  \n  <Customer id='A222334444'/>  \n  <Team members='A222334444 A333445555'/>  \n</root>  \n```"
  syntax:
    content: public virtual System.Xml.XmlElement GetElementById (string elementId);
    parameters:
    - id: elementId
      type: System.String
      description: "Identyfikator atrybutu do dopasowania."
    return:
      type: System.Xml.XmlElement
      description: "<xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref> o identyfikatorze pasującego lub <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> przypadku nieznalezienia Brak pasującego elementu."
  overload: System.Xml.XmlDocument.GetElementById*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.GetElementsByTagName(System.String)
  id: GetElementsByTagName(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: GetElementsByTagName(String)
  nameWithType: XmlDocument.GetElementsByTagName(String)
  fullName: System.Xml.XmlDocument.GetElementsByTagName(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Zwraca <xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> zawierający listę wszystkich elementów podrzędnych, spełniających określony <xref:System.Xml.XmlDocument.Name*>.</xref:System.Xml.XmlDocument.Name*>"
  remarks: "Węzły są umieszczane w kolejności, w których może wystąpić w dokumencie.      > [!NOTE] > Zaleca się, że używasz <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName>lub <xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName>metody zamiast metody GetElementsByTagName.</xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName> </xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName>"
  example:
  - "The following example creates a `XmlDocument` object and uses the `GetElementsByTagName` method and the resulting <xref:System.Xml.XmlNodeList> object to display all the book titles.  \n  \n [!code-cs[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_10_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_10_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_10_1.vb)]  \n  \n The example uses the `books.xml` file as input.  \n  \n [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/add/codesnippet/xml/m-system.xml.xmldocument_10_2.xml)]"
  syntax:
    content: public virtual System.Xml.XmlNodeList GetElementsByTagName (string name);
    parameters:
    - id: name
      type: System.String
      description: "Kwalifikowana nazwa do dopasowania. Jest dopasowywana <xref uid=&quot;langword_csharp_Name&quot; name=&quot;Name&quot; href=&quot;&quot;> </xref> właściwości pasujących węzła. Specjalna wartość &quot;*&quot; dopasowuje wszystkie tagi."
    return:
      type: System.Xml.XmlNodeList
      description: "<xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> Zawierający listę wszystkich zgodne węzły. Jeśli zgodny żadnych węzłów <code> name </code>, zwracana kolekcja będzie pusty."
  overload: System.Xml.XmlDocument.GetElementsByTagName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)
  id: GetElementsByTagName(System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: GetElementsByTagName(String,String)
  nameWithType: XmlDocument.GetElementsByTagName(String,String)
  fullName: System.Xml.XmlDocument.GetElementsByTagName(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Zwraca <xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> zawierający listę wszystkich elementów podrzędnych, które pasują do określonego <> </> *> i <> </> *>."
  remarks: "Węzły są umieszczane w kolejności, w których może wystąpić w drzewie dokumentu.      > [!NOTE] > Zaleca się, że używasz <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName>lub <xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName>metody zamiast metody GetElementsByTagName.</xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName> </xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName>"
  syntax:
    content: public virtual System.Xml.XmlNodeList GetElementsByTagName (string localName, string namespaceURI);
    parameters:
    - id: localName
      type: System.String
      description: "LocalName do dopasowania. Specjalna wartość &quot;*&quot; dopasowuje wszystkie tagi."
    - id: namespaceURI
      type: System.String
      description: "NamespaceURI do dopasowania."
    return:
      type: System.Xml.XmlNodeList
      description: "<xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> Zawierający listę wszystkich zgodne węzły. Jeśli żadnych węzłów odpowiada określonym <code> localName </code> i <code> namespaceURI </code>, zwracana kolekcja będzie pusty."
  overload: System.Xml.XmlDocument.GetElementsByTagName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.Implementation
  id: Implementation
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Implementation
  nameWithType: XmlDocument.Implementation
  fullName: System.Xml.XmlDocument.Implementation
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Pobiera <xref href=&quot;System.Xml.XmlImplementation&quot;> </xref> obiektu w bieżącym dokumencie."
  remarks: "`XmlDocument`obiekty utworzone z tej samej `XmlImplementation` udostępnianie tego samego <xref:System.Xml.XmlNameTable>.</xref:System.Xml.XmlNameTable> Dzięki temu użytkownicy mogą porównania nazw atrybutów i elementów jako obiekty zamiast ciągów.       Mimo że `XmlDocument` obiekty współużytkują tego samego wdrożenia, aby przenieść węzłów z jednego dokumentu należy użyć <xref:System.Xml.XmlDocument.ImportNode%2A>metody.</xref:System.Xml.XmlDocument.ImportNode%2A>"
  example:
  - "The following example creates a new `XmlDocument` using another document's implementation.  \n  \n [!code-cs[Classic WebData XmlDocument.Implementation Example#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_11_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.Implementation Example#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_11_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.Implementation Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_11_1.vb)]"
  syntax:
    content: public System.Xml.XmlImplementation Implementation { get; }
    return:
      type: System.Xml.XmlImplementation
      description: "<xref uid=&quot;langword_csharp_XmlImplementation&quot; name=&quot;XmlImplementation&quot; href=&quot;&quot;> </xref> Obiektu w bieżącym dokumencie."
  overload: System.Xml.XmlDocument.Implementation*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)
  id: ImportNode(System.Xml.XmlNode,System.Boolean)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: ImportNode(XmlNode,Boolean)
  nameWithType: XmlDocument.ImportNode(XmlNode,Boolean)
  fullName: System.Xml.XmlDocument.ImportNode(XmlNode,Boolean)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Importuje węzła z innego dokumentu do bieżącego dokumentu."
  remarks: "Zwrócony węzeł nie ma nadrzędnego. Węzeł źródłowy nie zostanie zmieniony lub usunięty z oryginalnego dokumentu; `ImportNode` tworzy kopię węzła źródłowego.       Importowanie węzła tworzy `XmlNode` obiektów należących do importowania dokumentu z <xref:System.Xml.XmlNode.Name%2A>i <xref:System.Xml.XmlNode.NodeType%2A>identyczne z węzła źródłowego.</xref:System.Xml.XmlNode.NodeType%2A> </xref:System.Xml.XmlNode.Name%2A> Nowy obiekt ma również atrybuty powiązane z przestrzeni nazw (<xref:System.Xml.XmlNode.Prefix%2A>, <xref:System.Xml.XmlNode.LocalName%2A>, i <xref:System.Xml.XmlNode.NamespaceURI%2A>).</xref:System.Xml.XmlNode.NamespaceURI%2A> </xref:System.Xml.XmlNode.LocalName%2A> </xref:System.Xml.XmlNode.Prefix%2A>       W zależności od typu węzła importowanych węzła i wartość `deep` parametru, dodatkowe informacje są kopiowane jako odpowiednie. Ta metoda próbuje dublowany zachowanie oczekiwane, jeśli fragment XML lub HTML źródła został skopiowany z jednego dokumentu do innego (rozpoznawanie, że w przypadku XML dwa dokumenty może mieć różne definicje DTD).       W poniższej tabeli opisano określone zachowanie dla każdego <xref:System.Xml.XmlNodeType>.</xref:System.Xml.XmlNodeType>      | Typ XmlNodeType | ImportNode(true) | ImportNode(false) |   |-----------------|------------------------|-------------------------|   | Atrybut | <xref:System.Xml.XmlAttribute.Specified%2A>Właściwość jest ustawiona na `true` w wygenerowanym <xref:System.Xml.XmlAttribute>.</xref:System.Xml.XmlAttribute> </xref:System.Xml.XmlAttribute.Specified%2A> Elementy podrzędne źródła `XmlAttribute` rekursywnie zaimportowane i wynikowy węzły są odbierane do utworzenia odpowiednich poddrzewo. | `deep` Parametru nie ma zastosowania do `XmlAttribute` węzłów; zakres ich zawierają ich elementy podrzędne z nimi po zaimportowaniu. |   | CData | Kopiuje węzła, w tym jego dane. | Kopiuje węzła, w tym jego dane. |   | Komentarz | Kopiuje węzła, w tym jego dane. | Kopiuje węzła, w tym jego dane. |   | DocumentFragment | Elementów podrzędnych węzła źródłowego są rekursywnie zaimportowane i wynikowy węzłów odbierane do utworzenia odpowiednich poddrzewo. | Generowany jest pusta <xref:System.Xml.XmlDocumentFragment>. |   | Typ dokumentu | Kopiuje węzła, w tym jego dane. *| Kopiuje węzła, w tym jego dane. *|   | Element | Elementów podrzędnych elementu źródła i jego węzły określonego atrybutu są rekursywnie zaimportowane i wynikowy węzłów odbierane do utworzenia odpowiednich poddrzewo.</xref:System.Xml.XmlDocumentFragment><br /><br /> Uwaga: Domyślne atrybuty nie są kopiowane. Jeśli importowany do dokumentu definiuje domyślne atrybuty dla tej nazwy elementu, te są przypisane. | Określony atrybut węzły elementu źródłowego zostały zaimportowane i wygenerowany `XmlAttribute` węzły są dołączone do wygenerowanego <xref:System.Xml.XmlElement>.</xref:System.Xml.XmlElement><br /><br /> Uwaga: Domyślne atrybuty nie są kopiowane. Jeśli importowany do dokumentu definiuje domyślne atrybuty dla tej nazwy elementu, te są przypisane. |   | Obiekt EntityReference | Ponieważ dokumenty źródłowy i docelowy mogą mieć jednostek określony inaczej, ta metoda tylko kopiuje <xref:System.Xml.XmlEntityReference>węzła.</xref:System.Xml.XmlEntityReference> Tekst zastępczy nie jest włączony. Jeśli plik docelowy ma jednostki zdefiniowane, jego wartość jest przypisywana. | Ponieważ dokumenty źródłowy i docelowy mogą mieć jednostek określony inaczej, ta metoda tylko kopiuje <xref:System.Xml.XmlEntityReference>węzła.</xref:System.Xml.XmlEntityReference> Tekst zastępczy nie jest włączony. Jeśli plik docelowy ma jednostki zdefiniowane, jego wartość jest przypisywana. |   | ProcessingInstruction | Kopiuje wartości docelowej i danych z węzła zaimportowany. | Kopiuje wartości docelowej i danych z węzła zaimportowany. |   | Tekst | Kopiuje węzła, w tym jego dane. | Kopiuje węzła, w tym jego dane. |   | Typu SignificantWhitespace | Kopiuje węzła, w tym jego dane. | Kopiuje węzła, w tym jego dane. |   | Odstępy | Kopiuje węzła, w tym jego dane. | Kopiuje węzła, w tym jego dane. |   | XmlDeclaration | Kopiuje wartości docelowej i danych z węzła zaimportowany. | Kopiuje wartości docelowej i danych z węzła zaimportowany. |   | Wszystkie inne typy węzła. | Nie można zaimportować typu węzła. | Nie można zaimportować typu węzła. |       * Mimo że można zaimportować węzłów dokumentu, dokument może mieć tylko jeden typ dokumentu. Jeśli dokument ma obecnie węzła DocumenType, należy usunąć przed dodaniem nowego."
  example:
  - "The following example imports a book node from a second XML document into the original XML document.  \n  \n [!code-vb[Classic WebData XmlDocument.ImportNode Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_22_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.ImportNode Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_22_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.ImportNode Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_22_1.cs)]  \n  \n The example uses the file, `books.xml`, as input.  \n  \n [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/add/codesnippet/xml/m-system.xml.xmldocument_22_2.xml)]"
  syntax:
    content: public virtual System.Xml.XmlNode ImportNode (System.Xml.XmlNode node, bool deep);
    parameters:
    - id: node
      type: System.Xml.XmlNode
      description: "Węzeł zostały zaimportowane."
    - id: deep
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>do wykonania w klonowania głębokiego; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Xml.XmlNode
      description: "Importowany <xref href=&quot;System.Xml.XmlNode&quot;> </xref>."
  overload: System.Xml.XmlDocument.ImportNode*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Wywołanie tej metody dla typu węzła, którego nie można zaimportować."
  platform:
  - net462
- uid: System.Xml.XmlDocument.InnerText
  id: InnerText
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: InnerText
  nameWithType: XmlDocument.InnerText
  fullName: System.Xml.XmlDocument.InnerText
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Zgłasza wyjątek <xref:System.InvalidOperationException>we wszystkich przypadkach.</xref:System.InvalidOperationException>"
  remarks: "Ta właściwość nie jest zaimplementowana."
  syntax:
    content: public override string InnerText { set; }
    return:
      type: System.String
      description: "Wartości węzła i wszystkich jego węzłów podrzędnych."
  overload: System.Xml.XmlDocument.InnerText*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "We wszystkich przypadkach."
  platform:
  - net462
- uid: System.Xml.XmlDocument.InnerXml
  id: InnerXml
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: InnerXml
  nameWithType: XmlDocument.InnerXml
  fullName: System.Xml.XmlDocument.InnerXml
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Pobiera lub ustawia znaczników reprezentującą elementy podrzędne bieżącego węzła."
  remarks: "Ustawienie tej właściwości zastępuje element podrzędny węzła przy użyciu analizowanej zawartości dany ciąg znaków. Analiza odbywa się w bieżącym kontekście przestrzeni nazw.       `InnerXml`Usuwa nadmiarowe przestrzeń nazw — deklaracje. Jako wynik wiele wycinanie i wklejanie operacje nie zwiększają rozmiar dokumentu z deklaracjami nadmiarowe przestrzeni nazw. Należy wziąć pod uwagę następujące dokumentu XSL: ```   <xsl:stylesheet version=&quot;1.0&quot;          xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;>        <xsl:template match=&quot;stock&quot;>            ...        </xsl:template>       </xsl:stylesheet>   ``` `InnerXml` właściwość w węźle arkusza stylów zwraca następujący ciąg: ```   <xsl:template match=&quot;stock&quot;          xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;>        ...       </xsl:template>   ``` zauważyć xmlns:xsl dodatkowe deklaracji przestrzeni nazw, który jest używany w celu zachowania tożsamości węzła. Jeśli ponownie wstawić ten wewnętrzny ciąg XML, wystąpi ponownie oryginalnego dokumentu. Innymi słowy `InnerXml` rozpoznaje xmlns:xsl deklaracji przestrzeni nazw jest nadmiarowa, biorąc pod uwagę, że element nadrzędny XSL: stylesheet już ma xmlns:xsl delcaration przestrzeni nazw i w związku z tym usuwa go.       Jeśli przeniesiesz `InnerXml` z dokumentu z obszaru nazw domyślny dokument z domyślnej przestrzeni nazw różni się nieco zachowanie. Rozważmy następujący ciąg XML: ```   <test>         <item>123</item>       </test>   ``` `InnerXml` zwraca zwykłego ciągu XML z nie deklaracji przestrzeni nazw: ```   <item>123</item>   ``` następnie wstawiania tego ciągu do dokumentu, który ma domyślny obszar nazw, takich jak następujące: ```   <test2 xmlns=&quot;urn:1&quot;>       </test>   ``` `InnerXml` po analizie ciąg w kontekście i nowe węzły odebrania nazw urn:&1;.               Wynik wygląda następująco: ```   <test2 xmlns=&quot;urn:1&quot;>         <item>123</item>       </test>   ``` teraz po na żądanie użytkownika `InnerXml` odzyskać następujące: ```   <item xmlns=&quot;urn:1&quot;>123</item>   ``` Jeśli chcesz jawnie wstawiony element, aby zachować fakt, że pochodzi z dokumentu, który miał bez przestrzeni nazw, należy ręcznie dodać xmlns = &quot;&quot; deklaracji i Wstaw wynikowy ciąg: ```   <item xmlns=&quot;&quot;>123</item>   ``` net efekt wszystkich to wygląda następująco: 1.  Wycinanie i wklejanie `InnerXml` między dokumenty, które nie korzystają z przestrzeni nazw jest czysty i proste i nie tworzy nadmiarowość &quot;xmlns&quot; w Twojej ciągów.      2.  `InnerXml`można również wycinanie i wklejanie między dokumenty, które mają więcej niż jeden obszar nazw (która jest arkusze stylów XSL).      3.  deklaracje xmlns:XSL automatycznie wyświetlane w Twojej ciągów i znikają w Twojej hierarchii węzła.      4.  W przypadku gdy jesteś przenoszenie `InnerXml` z dokumentu, który nie ma domyślnego obszaru nazw do dokumentu, który ma domyślnej przestrzeni nazw, nowe węzły pobierze nowy domyślny obszar nazw.       Jeśli `InnerXml` ustawiono tekstem zawierającym odwołań do jednostek, które nie są obecnie zdefiniowane w dokumencie, wynikowe drzewo będzie zawierało pusty EntityReference węzłów.       Ta właściwość jest rozszerzenie Microsoft do modelu DOM (Document Object)."
  syntax:
    content: public override string InnerXml { get; set; }
    return:
      type: System.String
      description: "Kod znaczników elementy podrzędne bieżącego węzła."
  overload: System.Xml.XmlDocument.InnerXml*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Kod XML określić, gdy ustawienie dla tej właściwości nie jest poprawnie sformułowany."
  platform:
  - net462
- uid: System.Xml.XmlDocument.IsReadOnly
  id: IsReadOnly
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: XmlDocument.IsReadOnly
  fullName: System.Xml.XmlDocument.IsReadOnly
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Pobiera wartość wskazującą, czy bieżący węzeł jest tylko do odczytu."
  remarks: "Węzeł tylko do odczytu jest jeden których atrybuty, właściwości lub podrzędnych nie można zmienić. Można usunąć węzła tylko do odczytu z drzewa i wstaw go w innym miejscu.       Ta właściwość jest rozszerzenie Microsoft do modelu DOM (Document Object)."
  example:
  - "The following example shows how to use the `IsReadOnly` property.  \n  \n [!code-cs[Classic WebData XmlDocument.IsReadOnly Example#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_7_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.IsReadOnly Example#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_7_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.IsReadOnly Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_7_1.vb)]"
  syntax:
    content: public override bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli bieżący węzeł jest tylko do odczytu. w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;></xref>zawsze zwraca węzłów <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xml.XmlDocument.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.Load(System.IO.Stream)
  id: Load(System.IO.Stream)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Load(Stream)
  nameWithType: XmlDocument.Load(Stream)
  fullName: System.Xml.XmlDocument.Load(Stream)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Ładuje dokumentu XML z określonego strumienia."
  remarks: "> [!NOTE]> `Load` Metody zawsze zachowuje znaczący biały znak. <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>Właściwość określa, czy zachowana jest nieważny biały znak, będącą biały znak w zawartości elementu.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A> Wartość domyślna to `false`; biały znak w zawartości elementu nie są zachowywane.       Jeśli chcesz, aby sprawdzanie poprawności jest wykonywane, można utworzyć sprawdzanie poprawności <xref:System.Xml.XmlReader>wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings>klasy i <xref:System.Xml.XmlReader.Create%2A>— Metoda.</xref:System.Xml.XmlReader.Create%2A> </xref:System.Xml.XmlReaderSettings> </xref:System.Xml.XmlReader> Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader>Strona referencyjna.</xref:System.Xml.XmlReader>       Ta metoda jest rozszerzeniem firmy Microsoft do modelu DOM (Document Object).       Ta metoda automatycznie wykrywa format ciągu wejściowego XML (na przykład UTF-8, ANSI i tak dalej). Jeśli aplikacja musi wiedzieć, który kodowanie jest używany do odczytu strumienia, należy rozważyć użycie <xref:System.Xml.XmlTextReader>do odczytu strumienia obiektu, a następnie użyj <xref:System.Xml.XmlTextReader.Encoding%2A?displayProperty=fullName>Właściwości w celu określenia kodowania.</xref:System.Xml.XmlTextReader.Encoding%2A?displayProperty=fullName> </xref:System.Xml.XmlTextReader> Jeśli musisz użyć <xref:System.Xml.XmlDocument>obiektu XML, można użyć <xref:System.Xml.XmlTextReader>obiekt, aby go utworzyć.</xref:System.Xml.XmlTextReader> </xref:System.Xml.XmlDocument> Aby uzyskać więcej informacji, zobacz [odczytywania danych XML przy użyciu XPathDocument i XmlDocument](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public virtual void Load (System.IO.Stream inStream);
    parameters:
    - id: inStream
      type: System.IO.Stream
      description: "Strumień, zawierający można załadować dokumentu XML."
  overload: System.Xml.XmlDocument.Load*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Występuje błąd obciążenia lub analizy w pliku XML. W takim przypadku <xref:System.IO.FileNotFoundException>jest wywoływane.</xref:System.IO.FileNotFoundException>"
  platform:
  - net462
- uid: System.Xml.XmlDocument.Load(System.IO.TextReader)
  id: Load(System.IO.TextReader)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Load(TextReader)
  nameWithType: XmlDocument.Load(TextReader)
  fullName: System.Xml.XmlDocument.Load(TextReader)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Ładuje dokumentu XML z określonym <xref:System.IO.TextReader>.</xref:System.IO.TextReader>"
  remarks: "> [!NOTE]> `Load` Metody zawsze zachowuje znaczący biały znak. <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>Właściwość określa, czy zachowana jest nieważny biały znak, będącą biały znak w zawartości elementu.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A> Wartość domyślna to `false`; biały znak w zawartości elementu nie są zachowywane.       Jeśli chcesz, aby sprawdzanie poprawności jest wykonywane, można utworzyć sprawdzanie poprawności <xref:System.Xml.XmlReader>wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings>klasy i <xref:System.Xml.XmlReader.Create%2A>— Metoda.</xref:System.Xml.XmlReader.Create%2A> </xref:System.Xml.XmlReaderSettings> </xref:System.Xml.XmlReader> Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader>Strona referencyjna.</xref:System.Xml.XmlReader>       Ta metoda jest rozszerzeniem firmy Microsoft do modelu DOM (Document Object)."
  example:
  - "The following example uses the <xref:System.IO.StringReader> class to load a string of XML data into the `XmlDocument` object.  \n  \n [!code-cs[Classic WebData XmlDocument.CreateElement2 Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_8_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateElement2 Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_8_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.CreateElement2 Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_8_1.cpp)]"
  syntax:
    content: public virtual void Load (System.IO.TextReader txtReader);
    parameters:
    - id: txtReader
      type: System.IO.TextReader
      description: "<xref uid=&quot;langword_csharp_TextReader&quot; name=&quot;TextReader&quot; href=&quot;&quot;> </xref> Używane do strumieniowego źródła danych XML do dokumentu."
  overload: System.Xml.XmlDocument.Load*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Występuje błąd obciążenia lub analizy w pliku XML. W takim przypadku dokument pozostanie puste."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Load(System.String)
  id: Load(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Load(String)
  nameWithType: XmlDocument.Load(String)
  fullName: System.Xml.XmlDocument.Load(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Ładuje dokumentu XML z określonego adresu URL."
  remarks: "> [!NOTE]> `Load` Metody zawsze zachowuje znaczący biały znak. <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>Właściwość określa, czy zachowana jest nieważny biały znak, będącą biały znak w zawartości elementu.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A> Wartość domyślna to `false`; biały znak w zawartości elementu nie są zachowywane.       Jeśli chcesz, aby sprawdzanie poprawności jest wykonywane, można utworzyć sprawdzanie poprawności <xref:System.Xml.XmlReader>wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings>klasy i <xref:System.Xml.XmlReader.Create%2A>— Metoda.</xref:System.Xml.XmlReader.Create%2A> </xref:System.Xml.XmlReaderSettings> </xref:System.Xml.XmlReader> Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader>Strona referencyjna.</xref:System.Xml.XmlReader>       Ta metoda jest rozszerzeniem firmy Microsoft do modelu DOM (Document Object)."
  syntax:
    content: public virtual void Load (string filename);
    parameters:
    - id: filename
      type: System.String
      description: "Adres URL pliku zawierającego dokument XML do załadowania. Adres URL może być lokalny plik lub adres HTTP URL (adres sieci Web)."
  overload: System.Xml.XmlDocument.Load*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Występuje błąd obciążenia lub analizy w pliku XML. W takim przypadku <xref:System.IO.FileNotFoundException>jest wywoływane.</xref:System.IO.FileNotFoundException>"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>filename</code>jest ciągiem o zerowej długości, zawiera tylko biały znak lub zawiera jeden lub więcej nieprawidłowych znaków, zgodnie z definicją w <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>filename</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "Określona ścieżka i nazwa pliku przekracza maksymalną długość zdefiniowana w systemie. Na przykład na platformach opartych na systemie Windows, ścieżki musi być mniejsza niż 248 znaków i nazwy pliku musi być mniejsza niż 260 znaków."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Określona ścieżka jest nieprawidłowa (na przykład jest na mapowany dysk)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Wystąpił błąd We/Wy podczas otwierania pliku."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>filename</code>określony plik jest tylko do odczytu.       - lub - tej operacji nie jest obsługiwane na bieżącej platformie.       - lub - <code>filename</code> określony katalog.       - lub - obiekt wywołujący nie ma wymaganych uprawnień."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "Plik określony w <code> filename </code> nie został znaleziony."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>filename</code>jest w nieprawidłowym formacie."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Obiekt wywołujący nie ma wymaganych uprawnień."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Load(System.Xml.XmlReader)
  id: Load(System.Xml.XmlReader)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Load(XmlReader)
  nameWithType: XmlDocument.Load(XmlReader)
  fullName: System.Xml.XmlDocument.Load(XmlReader)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Ładuje dokumentu XML z określonym <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  remarks: "> [!NOTE]> `Load` Metody zawsze zachowuje znaczący biały znak. <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>Właściwość określa, czy zachowana jest nieważny biały znak, będącą biały znak w zawartości elementu.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A> Wartość domyślna to `false`; biały znak w zawartości elementu nie są zachowywane.       Jeśli czytnik jest w stanie początkowym (<xref:System.Xml.XmlReader.ReadState%2A> = ReadState.Initial), `Load` zużywa całą zawartość czytnika danych i tworzy DOM z czym.</xref:System.Xml.XmlReader.ReadState%2A>       Jeśli czytnik jest już ustawiony na jednego z węzłów przy głębokości &quot;n&quot;, ta metoda ładuje ten węzeł i wszystkie kolejne elementy równorzędne do tagu końcowego, który zamyka głębokość &quot;n&quot;. Ma to następujące wyniki.       Jeśli bieżącego węzła i jego elementów równorzędnych wyglądać następująco: ```   <!--comment--><element1>one</element1><element2>two</element2>   ``` `Load` zgłasza wyjątek, ponieważ dokument nie może mieć dwóch elementów głównego poziomu.        Jeśli bieżącego węzła i jego elementów równorzędnych wyglądać następująco: ```   <!--comment--><?process instruction?><!--comment--></endtag>   ``` `Load` zakończy się powodzeniem, ale masz niekompletne drzewa modelu DOM, ponieważ nie istnieje żaden element poziomu głównego.        Przed zapisaniem dokumentu, należy dodać element poziomu głównego, w przeciwnym razie <xref:System.Xml.XmlDocument.Save%2A>spowoduje zgłoszenie wyjątku.</xref:System.Xml.XmlDocument.Save%2A>       Jeśli czytnik jest ustawiony na węzeł liścia, który jest nieprawidłowy dla poziomu głównego dokumentu, na przykład biały znak lub węzła atrybutu czytnik będzie kontynuowane do odczytu, dopóki nie zostanie on ustawiony na węźle, który może służyć do katalogu głównego. Dokument rozpoczyna się w tym momencie ładowania.       Jeśli chcesz, aby sprawdzanie poprawności jest wykonywane, można utworzyć sprawdzanie poprawności <xref:System.Xml.XmlReader>wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings>klasy i <xref:System.Xml.XmlReader.Create%2A>— Metoda.</xref:System.Xml.XmlReader.Create%2A> </xref:System.Xml.XmlReaderSettings> </xref:System.Xml.XmlReader> Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader>Strona referencyjna.</xref:System.Xml.XmlReader>       Ta metoda jest rozszerzeniem firmy Microsoft do modelu DOM (Document Object)."
  example:
  - "The following example loads the last book node of the `books.xml` file into the XML document.  \n  \n [!code-cs[Classic WebData XmlDocument.Load2 Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_23_1.cs)]\n [!code-vb[Classic WebData XmlDocument.Load2 Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_23_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.Load2 Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_23_1.cpp)]  \n  \n The example uses the file, `books.xml`, as input.  \n  \n [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/add/codesnippet/xml/m-system.xml.xmldocument_23_2.xml)]"
  syntax:
    content: public virtual void Load (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "<xref uid=&quot;langword_csharp_XmlReader&quot; name=&quot;XmlReader&quot; href=&quot;&quot;> </xref> Używane do strumieniowego źródła danych XML do dokumentu."
  overload: System.Xml.XmlDocument.Load*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Występuje błąd obciążenia lub analizy w pliku XML. W takim przypadku dokument pozostanie puste."
  platform:
  - net462
- uid: System.Xml.XmlDocument.LoadXml(System.String)
  id: LoadXml(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: LoadXml(String)
  nameWithType: XmlDocument.LoadXml(String)
  fullName: System.Xml.XmlDocument.LoadXml(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Ładuje dokumentu XML z określonego ciągu."
  remarks: "Domyślnie `LoadXml` — metoda nie zachowa biały znak lub znaczący biały znak.       Ta metoda analizuje definicji DTD, ale nie DTD lub schemat sprawdzania poprawności. Jeśli chcesz, aby sprawdzanie poprawności jest wykonywane, można utworzyć sprawdzanie poprawności <xref:System.Xml.XmlReader>wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings>klasy i <xref:System.Xml.XmlReader.Create%2A>— Metoda.</xref:System.Xml.XmlReader.Create%2A> </xref:System.Xml.XmlReaderSettings> </xref:System.Xml.XmlReader> Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader>Strona referencyjna.</xref:System.Xml.XmlReader>       Jeśli chcesz załadować z <xref:System.IO.Stream>, <xref:System.String>, <xref:System.IO.TextReader>, lub <xref:System.Xml.XmlReader>, zamiast tej metody należy użyć metody obciążenia.</xref:System.Xml.XmlReader> </xref:System.IO.TextReader> </xref:System.String> </xref:System.IO.Stream>       Ta metoda jest rozszerzeniem firmy Microsoft do modelu DOM (Document Object)."
  example:
  - "The following example loads XML into an `XmlDocument` object and saves it out to a file.  \n  \n [!code-cpp[Classic WebData XmlDocument.LoadXml Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_2_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.LoadXml Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_2_1.cs)]\n [!code-vb[Classic WebData XmlDocument.LoadXml Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_2_1.vb)]"
  syntax:
    content: public virtual void LoadXml (string xml);
    parameters:
    - id: xml
      type: System.String
      description: "Ciąg zawierający można załadować dokumentu XML."
  overload: System.Xml.XmlDocument.LoadXml*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Występuje błąd obciążenia lub analizy w pliku XML. W takim przypadku dokument pozostanie puste."
  platform:
  - net462
- uid: System.Xml.XmlDocument.LocalName
  id: LocalName
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: LocalName
  nameWithType: XmlDocument.LocalName
  fullName: System.Xml.XmlDocument.LocalName
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Pobiera nazwę lokalnego węzła."
  remarks: "Lokalna nazwa zwracane jest zależna od <xref:System.Xml.XmlDocument.NodeType%2A>węzła.</xref:System.Xml.XmlDocument.NodeType%2A> Aby wyświetlić tabelę opisującą lokalna nazwa dla każdego typu węzła zwracane, zobacz <xref:System.Xml.XmlNode.LocalName%2A>Właściwości w <xref:System.Xml.XmlNode>klasie.</xref:System.Xml.XmlNode> </xref:System.Xml.XmlNode.LocalName%2A>"
  syntax:
    content: public override string LocalName { get; }
    return:
      type: System.String
      description: 'Aby uzyskać <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> węzłów, nazwa lokalna jest #document.'
  overload: System.Xml.XmlDocument.LocalName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.Name
  id: Name
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Name
  nameWithType: XmlDocument.Name
  fullName: System.Xml.XmlDocument.Name
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Pobiera kwalifikowaną nazwę węzła."
  remarks: "Zwrócona nazwa zależy od <xref:System.Xml.XmlDocument.NodeType%2A>węzła.</xref:System.Xml.XmlDocument.NodeType%2A> Aby wyświetlić tabelę opisującą nazwa zwrócony dla każdego typu węzła, zobacz <xref:System.Xml.XmlNode.Name%2A>Właściwości w <xref:System.Xml.XmlNode>klasie.</xref:System.Xml.XmlNode> </xref:System.Xml.XmlNode.Name%2A>"
  syntax:
    content: public override string Name { get; }
    return:
      type: System.String
      description: 'Aby uzyskać <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> węzłów, nazwa jest #document.'
  overload: System.Xml.XmlDocument.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NameTable
  id: NameTable
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NameTable
  nameWithType: XmlDocument.NameTable
  fullName: System.Xml.XmlDocument.NameTable
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Pobiera <xref:System.Xml.XmlNameTable>skojarzone z tą implementacją.</xref:System.Xml.XmlNameTable>"
  remarks: "Każdy `XmlDocument` obiekt ma <xref:System.Xml.NameTable>obiektu.</xref:System.Xml.NameTable> Nazwy elementów i atrybutów są przechowywane w `NameTable` jako atomized ciągi. Oznacza to, że nawet jeśli odwołuje się do nazwy w dokumencie wielokrotnie jest on przechowywany tylko raz w `NameTable`. Na przykład, jeśli dokument ma wiele elementów o nazwie &quot;Klient&quot; `NameTable` zwraca tego samego obiektu, gdy odbiera żądanie dla tej nazwy. W związku z tym użytkownicy można napisać kod przy użyciu obiektu porównania te ciągi zamiast droższe porównywania ciągów.       Aby uzyskać więcej informacji na atomized ciągów zobacz <xref:System.Xml.XmlNameTable>.</xref:System.Xml.XmlNameTable>       Ta metoda jest rozszerzeniem firmy Microsoft do modelu DOM (Document Object)."
  syntax:
    content: public System.Xml.XmlNameTable NameTable { get; }
    return:
      type: System.Xml.XmlNameTable
      description: "<xref uid=&quot;langword_csharp_XmlNameTable&quot; name=&quot;XmlNameTable&quot; href=&quot;&quot;> </xref> Dzięki któremu można pobrać wersję atomized ciągu w tym dokumencie."
  overload: System.Xml.XmlDocument.NameTable*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeChanged
  id: NodeChanged
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeChanged
  nameWithType: XmlDocument.NodeChanged
  fullName: System.Xml.XmlDocument.NodeChanged
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Występuje, gdy <xref:System.Xml.XmlNode.Value*>węzła należące do tego dokumentu została zmieniona.</xref:System.Xml.XmlNode.Value*>"
  remarks: "To zdarzenie dotyczy tylko węzły, które mają wartość.       Wszystkie węzły utworzone przez tego dokumentu, czy zostały wstawione do dokumentu, są uwzględnione w tym zdarzeniu."
  syntax:
    content: public event System.Xml.XmlNodeChangedEventHandler NodeChanged;
    return:
      type: System.Xml.XmlNodeChangedEventHandler
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeChanging
  id: NodeChanging
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeChanging
  nameWithType: XmlDocument.NodeChanging
  fullName: System.Xml.XmlDocument.NodeChanging
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Występuje, gdy <xref:System.Xml.XmlNode.Value*>węzeł należącą do tego dokumentu jest zostanie zmieniony.</xref:System.Xml.XmlNode.Value*>"
  remarks: "To zdarzenie umożliwia użytkownikowi wykonaj dodatkowe sprawdzanie i, w razie potrzeby należy zgłosić wyjątek, aby zatrzymać operację. Jeśli wyjątek `XmlDocument` powróci do stanu pierwotnego. To zdarzenie dotyczy tylko węzły, które mają wartość.       Wszystkie węzły utworzone przez tego dokumentu, czy zostały wstawione do dokumentu, są uwzględnione w tym zdarzeniu."
  syntax:
    content: public event System.Xml.XmlNodeChangedEventHandler NodeChanging;
    return:
      type: System.Xml.XmlNodeChangedEventHandler
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeInserted
  id: NodeInserted
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeInserted
  nameWithType: XmlDocument.NodeInserted
  fullName: System.Xml.XmlDocument.NodeInserted
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Występuje, gdy węzeł należących do tego dokumentu została wsunięta do innego węzła."
  remarks: "Wszystkie węzły utworzone przez tego dokumentu, czy zostały wstawione do dokumentu, są uwzględnione w tym zdarzeniu."
  syntax:
    content: public event System.Xml.XmlNodeChangedEventHandler NodeInserted;
    return:
      type: System.Xml.XmlNodeChangedEventHandler
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeInserting
  id: NodeInserting
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeInserting
  nameWithType: XmlDocument.NodeInserting
  fullName: System.Xml.XmlDocument.NodeInserting
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Występuje, gdy węzeł należących do tego dokumentu ma zostać wstawiony do innego węzła."
  remarks: "To zdarzenie umożliwia użytkownikowi wykonaj dodatkowe sprawdzanie i, w razie potrzeby należy zgłosić wyjątek, aby zatrzymać operację. Jeśli wyjątek `XmlDocument` powróci do stanu pierwotnego.       Wszystkie węzły utworzone przez tego dokumentu, czy zostały wstawione do dokumentu, są uwzględnione w tym zdarzeniu."
  syntax:
    content: public event System.Xml.XmlNodeChangedEventHandler NodeInserting;
    return:
      type: System.Xml.XmlNodeChangedEventHandler
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeRemoved
  id: NodeRemoved
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeRemoved
  nameWithType: XmlDocument.NodeRemoved
  fullName: System.Xml.XmlDocument.NodeRemoved
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Występuje, gdy węzeł należących do tego dokumentu została usunięta z jego elementu nadrzędnego."
  remarks: "Wszystkie węzły utworzone przez tego dokumentu, czy zostały wstawione do dokumentu, są uwzględnione w tym zdarzeniu."
  syntax:
    content: public event System.Xml.XmlNodeChangedEventHandler NodeRemoved;
    return:
      type: System.Xml.XmlNodeChangedEventHandler
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeRemoving
  id: NodeRemoving
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeRemoving
  nameWithType: XmlDocument.NodeRemoving
  fullName: System.Xml.XmlDocument.NodeRemoving
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Występuje, gdy węzeł należących do tego dokumentu ma zostać usunięta z dokumentu."
  remarks: "To zdarzenie umożliwia użytkownikowi wykonaj dodatkowe sprawdzanie i, w razie potrzeby należy zgłosić wyjątek, aby zatrzymać operację. Jeśli wyjątek `XmlDocument` powróci do stanu pierwotnego.       Wszystkie węzły utworzone przez tego dokumentu, czy zostały wstawione do dokumentu, są uwzględnione w tym zdarzeniu."
  syntax:
    content: public event System.Xml.XmlNodeChangedEventHandler NodeRemoving;
    return:
      type: System.Xml.XmlNodeChangedEventHandler
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeType
  id: NodeType
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeType
  nameWithType: XmlDocument.NodeType
  fullName: System.Xml.XmlDocument.NodeType
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Pobiera typ bieżącego węzła."
  syntax:
    content: public override System.Xml.XmlNodeType NodeType { get; }
    return:
      type: System.Xml.XmlNodeType
      description: "Typ węzła. Aby uzyskać <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> węzłów, ta wartość jest XmlNodeType.Document."
  overload: System.Xml.XmlDocument.NodeType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.OwnerDocument
  id: OwnerDocument
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: OwnerDocument
  nameWithType: XmlDocument.OwnerDocument
  fullName: System.Xml.XmlDocument.OwnerDocument
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Pobiera <xref href=&quot;System.Xml.XmlDocument&quot;> </xref> do którego należy bieżący węzeł."
  syntax:
    content: public override System.Xml.XmlDocument OwnerDocument { get; }
    return:
      type: System.Xml.XmlDocument
      description: "Aby uzyskać <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> węzłów (<xref:System.Xml.XmlDocument.NodeType*> jest równe XmlNodeType.Document), ta właściwość zawsze zwraca <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Xml.XmlDocument.NodeType*>"
  overload: System.Xml.XmlDocument.OwnerDocument*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.ParentNode
  id: ParentNode
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: ParentNode
  nameWithType: XmlDocument.ParentNode
  fullName: System.Xml.XmlDocument.ParentNode
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Pobiera węzeł nadrzędny tego węzła (węzły, które mogą mieć elementów nadrzędnych)."
  syntax:
    content: public override System.Xml.XmlNode ParentNode { get; }
    return:
      type: System.Xml.XmlNode
      description: "Zawsze zwraca <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Xml.XmlDocument.ParentNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.PreserveWhitespace
  id: PreserveWhitespace
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: PreserveWhitespace
  nameWithType: XmlDocument.PreserveWhitespace
  fullName: System.Xml.XmlDocument.PreserveWhitespace
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Pobiera lub ustawia wartość wskazującą, czy chcesz zachować biały znak w zawartości elementu."
  remarks: "Ta właściwość określa sposób obsługi biały znak podczas ładowania i Zapisz procesu.       Jeśli `PreserveWhitespace` jest `true` przed <xref:System.Xml.XmlDocument.Load%2A>lub <xref:System.Xml.XmlDocument.LoadXml%2A>jest wywoływana, białe węzły są konserwowane; w przeciwnym razie, jeśli ta właściwość jest `false`znaczący biały znak jest zachowywana, nie jest białe.</xref:System.Xml.XmlDocument.LoadXml%2A> </xref:System.Xml.XmlDocument.Load%2A>       Jeśli `PreserveWhitespace` jest `true` przed <xref:System.Xml.XmlDocument.Save%2A>jest wywoływana, biały znak w dokumencie jest zachowanego w danych wyjściowych; w przeciwnym razie, jeśli ta właściwość jest `false`, `XmlDocument` wcięć automatycznie dane wyjściowe.</xref:System.Xml.XmlDocument.Save%2A>       Ta metoda jest rozszerzeniem firmy Microsoft do modelu DOM (Document Object)."
  example:
  - "The following example shows how to strip white space from a file.  \n  \n [!code-cs[Classic WebData XmlDocument.PreserveWhitespace Example#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_6_1.cs)]\n [!code-vb[Classic WebData XmlDocument.PreserveWhitespace Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_6_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.PreserveWhitespace Example#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_6_1.cpp)]  \n  \n The example uses the file `book.xml` as input.  \n  \n [!code-xml[Classic WebData XmlDocument.PreserveWhitespace Example#2](~/add/codesnippet/xml/p-system.xml.xmldocument_6_2.xml)]"
  syntax:
    content: public bool PreserveWhitespace { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby zachować biały znak w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Wartość domyślna to <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xml.XmlDocument.PreserveWhitespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)
  id: ReadNode(System.Xml.XmlReader)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: ReadNode(XmlReader)
  nameWithType: XmlDocument.ReadNode(XmlReader)
  fullName: System.Xml.XmlDocument.ReadNode(XmlReader)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Tworzy <xref href=&quot;System.Xml.XmlNode&quot;> </xref> obiekt na podstawie informacji w <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader> Czytnik musi być umieszczony w węźle lub atrybutu."
  remarks: "Odczytuje jedną `XmlNode` z danym czytnika i umieszcza na następny węzeł czytnika. Ta metoda tworzy typ `XmlNode` dopasowania <xref:System.Xml.XmlNode.NodeType%2A>, na którym aktualnie znajduje się czytnik.</xref:System.Xml.XmlNode.NodeType%2A> (Jeśli czytnik jest w stanie początkowym `ReadNode` przesuwa czytnik pierwszy węzeł i następnie działa w tym węźle.)       Jeśli czytnik znajduje się na początku elementu, `ReadNode` odczytuje wszystkie atrybuty i wszystkich podrzędnych węzłów, maksymalnie i, w tym do tagu końcowego bieżącego węzła. `XmlNode` Zwrócił zawiera poddrzewa reprezentujący wszystko do odczytu. Czytnik znajduje się bezpośrednio po tagu końcowego.       `ReadNode`Ponadto mogą odczytywać atrybuty, ale w takim przypadku go nie dojściu czytnik do następnego atrybutu. Dzięki temu można zapisać następującego kodu C#: ```   XmlDocument doc = new XmlDocument();   while (reader.MoveToNextAttribute())   {     XmlNode a = doc.ReadNode(reader);     // Do some more processing.   }   ``` `ReadNode` korzystać wartość atrybutu, co oznacza, że po wywołaniu `ReadNode` atrybutu <xref:System.Xml.XmlReader.ReadAttributeValue%2A?displayProperty=fullName>zwraca `false`.</xref:System.Xml.XmlReader.ReadAttributeValue%2A?displayProperty=fullName>       "
  example:
  - "The following example uses `ReadNode` to create a new node and then inserts the new node into the document.  \n  \n [!code-cs[Classic WebData XmlDocument.ReadNode Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_21_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.ReadNode Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_21_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.ReadNode Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_21_1.vb)]  \n  \n The example uses the file, `cd.xml`, as input.  \n  \n [!code-xml[Classic WebData XmlDocument.ReadNode Example#2](~/add/codesnippet/xml/m-system.xml.xmldocument_21_2.xml)]"
  syntax:
    content: public virtual System.Xml.XmlNode ReadNode (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Źródło XML"
    return:
      type: System.Xml.XmlNode
      description: "Nowy <xref uid=&quot;langword_csharp_XmlNode&quot; name=&quot;XmlNode&quot; href=&quot;&quot;> </xref> lub <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Jeśli nie istnieją żadne więcej węzłów."
  overload: System.Xml.XmlDocument.ReadNode*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "Czytnik jest ustawiony dla typu węzła, który nie wymaga prawidłowego węzła modelu DOM (na przykład EndElement lub EndEntity)."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Save(System.IO.Stream)
  id: Save(System.IO.Stream)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Save(Stream)
  nameWithType: XmlDocument.Save(Stream)
  fullName: System.Xml.XmlDocument.Save(Stream)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Zapisuje dokument XML do określonego strumienia."
  remarks: "Biały znak są zachowywane tylko wtedy, gdy <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>ustawiono `true`.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A>       XmlDeclaration bieżącego `XmlDocument` obiektu Określa atrybut kodowania w zapisany dokument. Wartość atrybutu kodowania jest pobierana z <xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName>Właściwości.</xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName> Jeśli `XmlDocument` jest ma XmlDeclaration lub jeśli XmlDeclaration nie ma atrybutu kodowania, zapisany dokument nie będzie miał jedną albo.       Po zapisaniu dokumentu xmlns atrybuty są generowane w celu utrwalenia tożsamości węzła (lokalna nazwa + identyfikator URI przestrzeni nazw) poprawnie. Na przykład następujący kod C# ```   XmlDocument doc = new XmlDocument();   doc.AppendChild(doc.CreateElement(&quot;item&quot;,&quot;urn:1&quot;));   doc.Save(Console.Out);   ``` generuje ten atrybut dane XML `<item xmls=&quot;urn:1&quot;/>`.       Ta metoda jest rozszerzeniem firmy Microsoft do modelu DOM (Document Object).       Uwaga tylko <xref:System.Xml.XmlDocument.Save%2A>metody wymusza poprawnie sformułowany dokument XML.</xref:System.Xml.XmlDocument.Save%2A> Wszystkie inne `Save` przeciążenia tylko zagwarantować poprawnie sformułowanym fragmentem."
  syntax:
    content: public virtual void Save (System.IO.Stream outStream);
    parameters:
    - id: outStream
      type: System.IO.Stream
      description: "Strumień, do której chcesz zapisać."
  overload: System.Xml.XmlDocument.Save*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Operacja nie spowoduje poprawnie sformułowany dokument XML (na przykład nie dokumentu elementu lub zduplikowane XML deklaracje)."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Save(System.IO.TextWriter)
  id: Save(System.IO.TextWriter)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Save(TextWriter)
  nameWithType: XmlDocument.Save(TextWriter)
  fullName: System.Xml.XmlDocument.Save(TextWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Zapisuje dokument XML do określonego <xref:System.IO.TextWriter>.</xref:System.IO.TextWriter>"
  remarks: "Kodowanie na `TextWriter` Określa kodowanie jest zapisywany (kodowanie węzła XmlDeclaration zastępuje kodowanie `TextWriter`). Jeśli nie było żadnych kodowanie określone na `TextWriter`, `XmlDocument` zapisaniu bez atrybutu kodowania.       Ta metoda jest rozszerzeniem firmy Microsoft do modelu DOM (Document Object).       Uwaga tylko <xref:System.Xml.XmlDocument.Save%2A>metody wymusza poprawnie sformułowany dokument XML.</xref:System.Xml.XmlDocument.Save%2A> Wszystkie inne `Save` przeciążenia tylko zagwarantować poprawnie sformułowanym fragmentem."
  syntax:
    content: public virtual void Save (System.IO.TextWriter writer);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "<xref uid=&quot;langword_csharp_TextWriter&quot; name=&quot;TextWriter&quot; href=&quot;&quot;> </xref> , Do której ma zostać zapisany."
  overload: System.Xml.XmlDocument.Save*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Operacja nie spowoduje poprawnie sformułowany dokument XML (na przykład nie dokumentu elementu lub zduplikowane XML deklaracje)."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Save(System.String)
  id: Save(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Save(String)
  nameWithType: XmlDocument.Save(String)
  fullName: System.Xml.XmlDocument.Save(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Zapisuje dokument XML do określonego pliku. Jeśli określony plik istnieje, ta metoda zastępuje go."
  remarks: "Biały znak są zachowywane w pliku danych wyjściowych, tylko gdy <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>ustawiono `true`.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A>       XmlDeclaration bieżącego `XmlDocument` obiektu Określa atrybut kodowania w zapisany dokument. Wartość atrybutu kodowania jest pobierana z <xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName>Właściwości.</xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName> Jeśli `XmlDocument` jest ma XmlDeclaration lub jeśli XmlDeclaration nie ma atrybutu kodowania, zapisany dokument nie będzie miał jedną albo.       Po zapisaniu dokumentu xmlns atrybuty są generowane w celu utrwalenia tożsamości węzła (lokalna nazwa + identyfikator URI przestrzeni nazw) poprawnie. Na przykład następujący kod C# ```   XmlDocument doc = new XmlDocument();   doc.AppendChild(doc.CreateElement(&quot;item&quot;,&quot;urn:1&quot;));   doc.Save(Console.Out);   ``` generuje ten atrybut dane XML `<item xmls=&quot;urn:1&quot;/>`.       Ta metoda jest rozszerzeniem firmy Microsoft do modelu DOM (Document Object).       Należy pamiętać, że tylko metody Zapisz wymusza poprawnie sformułowany dokument XML. Wszystkie inne `Save` przeciążenia tylko zagwarantować poprawnie sformułowanym fragmentem."
  example:
  - "The following example loads XML into an XmlDocument object, modifies it, and then saves it to a file named data.xml.  \n  \n [!code-cs[Classic WebData XmlDocument.Save Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_18_1.cs)]\n [!code-vb[Classic WebData XmlDocument.Save Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_18_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.Save Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_18_1.cpp)]  \n  \n The data.xml file will contain the following XML: `<item><name>wrench</name><price>10.95</price></item>`."
  syntax:
    content: public virtual void Save (string filename);
    parameters:
    - id: filename
      type: System.String
      description: "Lokalizacja pliku, w której chcesz zapisać plik."
  overload: System.Xml.XmlDocument.Save*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Operacja nie spowoduje poprawnie sformułowany dokument XML (na przykład nie dokumentu elementu lub zduplikowane XML deklaracje)."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Save(System.Xml.XmlWriter)
  id: Save(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Save(XmlWriter)
  nameWithType: XmlDocument.Save(XmlWriter)
  fullName: System.Xml.XmlDocument.Save(XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Zapisuje dokument XML do określonego <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  remarks: "Biały znak są zachowywane tylko wtedy, gdy <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>ustawiono `true`.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A>       Kodowanie na `XmlWriter` Określa kodowanie jest zapisywany (kodowanie węzła XmlDeclaration zastępuje kodowanie `XmlWriter`). Jeśli nie było żadnych kodowanie określone na `XmlWriter`, `XmlDocument` zapisaniu bez atrybutu kodowania.       Po zapisaniu dokumentu xmlns atrybuty są generowane w celu utrwalenia tożsamości węzła (LocalName + NamespaceURI) poprawnie. Na przykład następujący kod C# ```   XmlDocument doc = new XmlDocument();   doc.AppendChild(doc.CreateElement(&quot;item&quot;,&quot;urn:1&quot;));   doc.Save(Console.Out);   ``` generuje ten atrybut dane XML: ```   <item       xmls=&quot;urn:1&quot;/>   ``` ta metoda jest rozszerzeniem firmy Microsoft do modelu DOM (Document Object).       Uwaga tylko <xref:System.Xml.XmlDocument.Save%2A>metody wymusza poprawnie sformułowany dokument XML.</xref:System.Xml.XmlDocument.Save%2A> Wszystkie inne `Save` przeciążenia tylko zagwarantować poprawnie sformułowanym fragmentem."
  example:
  - "The following example loads XML into an `XmlDocument` object and saves it out to a file.  \n  \n [!code-cpp[Classic WebData XmlDocument.LoadXml Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_5_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.LoadXml Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_5_1.cs)]\n [!code-vb[Classic WebData XmlDocument.LoadXml Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_5_1.vb)]"
  syntax:
    content: public virtual void Save (System.Xml.XmlWriter w);
    parameters:
    - id: w
      type: System.Xml.XmlWriter
      description: "<xref uid=&quot;langword_csharp_XmlWriter&quot; name=&quot;XmlWriter&quot; href=&quot;&quot;> </xref> , Do której ma zostać zapisany."
  overload: System.Xml.XmlDocument.Save*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Operacja nie spowoduje poprawnie sformułowany dokument XML (na przykład nie dokumentu elementu lub zduplikowane XML deklaracje)."
  platform:
  - net462
- uid: System.Xml.XmlDocument.SchemaInfo
  id: SchemaInfo
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: SchemaInfo
  nameWithType: XmlDocument.SchemaInfo
  fullName: System.Xml.XmlDocument.SchemaInfo
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Zwraca po-Schema-weryfikacji-typu Infoset (PSVI) węzła."
  remarks: "Zawartość PSVI tej właściwości są ustawiane po sprawdzeniu poprawności węzła.       Ta właściwość jest rozszerzenie Microsoft do modelu DOM (Document Object)."
  syntax:
    content: public override System.Xml.Schema.IXmlSchemaInfo SchemaInfo { get; }
    return:
      type: System.Xml.Schema.IXmlSchemaInfo
      description: "<xref href=&quot;System.Xml.Schema.IXmlSchemaInfo&quot;> </xref> Obiekt reprezentujący PSVI węzła."
  overload: System.Xml.XmlDocument.SchemaInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.Schemas
  id: Schemas
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Schemas
  nameWithType: XmlDocument.Schemas
  fullName: System.Xml.XmlDocument.Schemas
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Pobiera lub ustawia <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> obiekt skojarzony z tym <xref href=&quot;System.Xml.XmlDocument&quot;> </xref>."
  remarks: "Schematy zawarte w <xref:System.Xml.Schema.XmlSchemaSet>obiekt skojarzony z <xref:System.Xml.XmlDocument>obiektu są używane do sprawdzania poprawności podczas <xref:System.Xml.XmlDocument.Validate%2A>metody <xref:System.Xml.XmlDocument>jest wykonywany.</xref:System.Xml.XmlDocument> </xref:System.Xml.XmlDocument.Validate%2A> </xref:System.Xml.XmlDocument> </xref:System.Xml.Schema.XmlSchemaSet>       Gdy <xref:System.Xml.XmlDocument>obiekt został zainicjowany przy użyciu danych XML z <xref:System.Xml.XmlReader>obiektu <xref:System.Xml.Schema.XmlSchemaSet>obiektu są ładowane z <xref:System.Xml.XmlReaderSettings.Schemas%2A>Właściwość <xref:System.Xml.XmlReader>obiektu.</xref:System.Xml.XmlReader> </xref:System.Xml.XmlReaderSettings.Schemas%2A> </xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.XmlReader> </xref:System.Xml.XmlDocument>"
  syntax:
    content: public System.Xml.Schema.XmlSchemaSet Schemas { get; set; }
    return:
      type: System.Xml.Schema.XmlSchemaSet
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> Obiektu zawierającego schematy języka definicji schematu XML (XSD) skojarzony z tym <xref href=&quot;System.Xml.XmlDocument&quot;> </xref>; w przeciwnym razie wartość pustą <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> obiektu."
  overload: System.Xml.XmlDocument.Schemas*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)
  id: Validate(System.Xml.Schema.ValidationEventHandler)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Validate(ValidationEventHandler)
  nameWithType: XmlDocument.Validate(ValidationEventHandler)
  fullName: System.Xml.XmlDocument.Validate(ValidationEventHandler)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Weryfikuje <xref href=&quot;System.Xml.XmlDocument&quot;> </xref> względem schematów języka definicji schematu XML (XSD) zawartych w <xref:System.Xml.XmlDocument.Schemas*>Właściwości.</xref:System.Xml.XmlDocument.Schemas*>"
  remarks: "Metoda weryfikacji sprawdza poprawność danych XML w <xref:System.Xml.XmlDocument>względem schematów zawartych w <xref:System.Xml.XmlDocument.Schemas%2A>Właściwości.</xref:System.Xml.XmlDocument.Schemas%2A> </xref:System.Xml.XmlDocument> Metoda weryfikacji przeprowadza rozszerzeniu typu infoset. W szczególności po sprawdzeniu poprawności schematu wartości domyślne są stosowane wartości tekstowe są konwertowane na atomic wartości zgodnie z potrzebami i informacje o typie jest skojarzony z elementami zweryfikowanych informacji. Wynik jest wcześniej wyrażeniami bez typu drzewa podrzędnego XML w <xref:System.Xml.XmlDocument>zastąpione maszynowy poddrzewa.</xref:System.Xml.XmlDocument>       Poniżej przedstawiono ważne uwagi, które należy wziąć pod uwagę podczas korzystania z metody sprawdzania poprawności.      -Wskazówki dotyczące lokalizacji schema, takich jak `xsi:schemaLocation` lub `xsi:noNamespaceSchemaLocation` są ignorowane.      -Wbudowane schematy są ignorowane.      — Jeśli występują błędy sprawdzania poprawności schematu podczas sprawdzania poprawności <xref:System.Xml.XmlDocument>staje się częściowo zweryfikowane z niektóre węzły z informacjami o poprawny typ, a niektóre bez.</xref:System.Xml.XmlDocument>      -Proces ten obejmuje sprawdzanie ograniczenia unikatowości i odwołania (`xs:ID`, `xs:IDREF`, `xs:key`, `xs:keyref`, i `xs:unique`)."
  example:
  - "The following example illustrates use of the Validate method. The example creates an <xref:System.Xml.XmlDocument> that contains an associated XSD schema using the <xref:System.Xml.XmlReaderSettings> and <xref:System.Xml.XmlReader> objects. The example then uses the <xref:System.Xml.XPath.XPathNavigator> class to incorrectly modify the typed value of an element in the XML document generating a schema validation error.  \n  \n [!code-cs[XPathValidation#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_19_1.cs)]\n [!code-cpp[XPathValidation#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_19_1.cpp)]\n [!code-vb[XPathValidation#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_19_1.vb)]  \n  \n The example takes the `contosoBooks.xml` and `contosoBooks.xsd` files as input.  \n  \n [!code-xml[XPathXMLExamples#2](~/add/codesnippet/xml/m-system.xml.xmldocument_19_2.xml)]  \n  \n [!code-xml[XPathXMLExamples#3](~/add/codesnippet/xml/m-system.xml.xmldocument_19_3.xsd)]"
  syntax:
    content: public void Validate (System.Xml.Schema.ValidationEventHandler validationEventHandler);
    parameters:
    - id: validationEventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: "<xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> Obiekt, który odbiera informacje o schemacie weryfikacji ostrzeżeń i błędów."
  overload: System.Xml.XmlDocument.Validate*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "Wystąpiło zdarzenie sprawdzania poprawności schematu i nie <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> określono obiektu."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)
  id: Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Validate(ValidationEventHandler,XmlNode)
  nameWithType: XmlDocument.Validate(ValidationEventHandler,XmlNode)
  fullName: System.Xml.XmlDocument.Validate(ValidationEventHandler,XmlNode)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Weryfikuje <xref href=&quot;System.Xml.XmlNode&quot;> </xref> obiektu określony względem schematów języka definicji schematu XML (XSD) w <xref:System.Xml.XmlDocument.Schemas*>Właściwości.</xref:System.Xml.XmlDocument.Schemas*>"
  remarks: "Metoda weryfikacji sprawdza poprawność danych XML w <xref:System.Xml.XmlNode>obiektu względem schematów zawartych w <xref:System.Xml.XmlDocument.Schemas%2A>Właściwości.</xref:System.Xml.XmlDocument.Schemas%2A> </xref:System.Xml.XmlNode> Metoda weryfikacji przeprowadza rozszerzeniu typu infoset. W szczególności po sprawdzeniu poprawności schematu wartości domyślne są stosowane wartości tekstowe są konwertowane na atomic wartości zgodnie z potrzebami i informacje o typie jest skojarzony z elementami zweryfikowanych informacji. Wynik jest wcześniej wyrażeniami bez typu drzewa podrzędnego XML w <xref:System.Xml.XmlDocument>zastąpione maszynowy poddrzewa.</xref:System.Xml.XmlDocument>       Poniżej przedstawiono ważne uwagi, które należy wziąć pod uwagę podczas korzystania z metody sprawdzania poprawności.      -Wskazówki dotyczące lokalizacji schema, takich jak `xsi:schemaLocation` lub `xsi:noNamespaceSchemaLocation` są ignorowane.      -Wbudowane schematy są ignorowane.      — Jeśli występują błędy sprawdzania poprawności schematu podczas sprawdzania poprawności <xref:System.Xml.XmlDocument>staje się częściowo zweryfikowane z niektóre węzły z informacjami o poprawny typ, a niektóre bez.</xref:System.Xml.XmlDocument>       Jeśli węzeł do zweryfikowania jest węzłem głównym, proces ten obejmuje sprawdzanie ograniczenia unikatowości i odwołania (`xs:ID`, `xs:IDREF`, `xs:key`, `xs:keyref`, i `xs:unique`); w przeciwnym razie ograniczenia unikatowości i odwołania zostały pominięte."
  example:
  - For an example of the Validate method, see the <xref:System.Xml.XmlDocument.Validate%2A> method.
  syntax:
    content: public void Validate (System.Xml.Schema.ValidationEventHandler validationEventHandler, System.Xml.XmlNode nodeToValidate);
    parameters:
    - id: validationEventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: "<xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> Obiekt, który odbiera informacje o schemacie weryfikacji ostrzeżeń i błędów."
    - id: nodeToValidate
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref> Utworzone na podstawie obiektu <xref href=&quot;System.Xml.XmlDocument&quot;> </xref> do sprawdzania poprawności."
  overload: System.Xml.XmlDocument.Validate*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref> Parametr obiektu nie został utworzony na podstawie <xref href=&quot;System.Xml.XmlDocument&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref> Parametr obiektu nie jest elementem, atrybut, fragment dokumentu lub węzła głównego."
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "Wystąpiło zdarzenie sprawdzania poprawności schematu i nie <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> określono obiektu."
  platform:
  - net462
- uid: System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)
  id: WriteContentTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: WriteContentTo(XmlWriter)
  nameWithType: XmlDocument.WriteContentTo(XmlWriter)
  fullName: System.Xml.XmlDocument.WriteContentTo(XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Zapisuje wszystkie elementy podrzędne elementu <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> węzła do określonego <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  remarks: "Ta metoda jest rozszerzeniem firmy Microsoft do modelu DOM (Document Object). Jest funkcjonalnym odpowiednikiem <xref:System.Xml.XmlDocument.InnerXml%2A>Właściwości.</xref:System.Xml.XmlDocument.InnerXml%2A>       <xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName>Właściwość określa metodę kodowania, która jest zapisywany.</xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName> Jeśli `Encoding` właściwość nie ma wartości `XmlDocument` jest zapisywany bez atrybutu kodowania."
  example:
  - "The following example displays the document onscreen.  \n  \n [!code-cs[Classic WebData XmlDocument.WriteContentTo Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_0_1.cs)]\n [!code-vb[Classic WebData XmlDocument.WriteContentTo Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_0_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.WriteContentTo Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_0_1.cpp)]"
  syntax:
    content: public override void WriteContentTo (System.Xml.XmlWriter xw);
    parameters:
    - id: xw
      type: System.Xml.XmlWriter
      description: "<xref uid=&quot;langword_csharp_XmlWriter&quot; name=&quot;XmlWriter&quot; href=&quot;&quot;> </xref> , Do której ma zostać zapisany."
  overload: System.Xml.XmlDocument.WriteContentTo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)
  id: WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: WriteTo(XmlWriter)
  nameWithType: XmlDocument.WriteTo(XmlWriter)
  fullName: System.Xml.XmlDocument.WriteTo(XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Zapisuje <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> węzła do określonego <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  remarks: "Ta metoda jest rozszerzeniem firmy Microsoft do modelu DOM (Document Object). Jest funkcjonalnym odpowiednikiem <xref:System.Xml.XmlNode.OuterXml%2A>Właściwości.</xref:System.Xml.XmlNode.OuterXml%2A>       <xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName>Właściwość określa metodę kodowania, która jest zapisywany.</xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName> Jeśli `Encoding` właściwość nie ma wartości `XmlDocument` jest zapisywany bez atrybutu kodowania."
  example:
  - "The following example displays the document onscreen.  \n  \n [!code-cpp[Classic WebData XmlDocument.WriteTo Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_6_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.WriteTo Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_6_1.vb)]\n [!code-cs[Classic WebData XmlDocument.WriteTo Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_6_1.cs)]"
  syntax:
    content: public override void WriteTo (System.Xml.XmlWriter w);
    parameters:
    - id: w
      type: System.Xml.XmlWriter
      description: "<xref uid=&quot;langword_csharp_XmlWriter&quot; name=&quot;XmlWriter&quot; href=&quot;&quot;> </xref> , Do której ma zostać zapisany."
  overload: System.Xml.XmlDocument.WriteTo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.XmlResolver
  id: XmlResolver
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: XmlResolver
  nameWithType: XmlDocument.XmlResolver
  fullName: System.Xml.XmlDocument.XmlResolver
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Ustawia <xref href=&quot;System.Xml.XmlResolver&quot;> </xref> do użycia w celu rozpoznawania zasobów zewnętrznych."
  remarks: "`XmlResolver` Można załadować definicji DTD lub rozwiń odwołań do jednostek. Przy użyciu <xref:System.Xml.XmlResolver.Credentials%2A?displayProperty=fullName>Właściwości, można ustawić poświadczeń na `XmlResolver` dostęp do zasobów przechowywanych w zasobie sieciowym bezpieczny.</xref:System.Xml.XmlResolver.Credentials%2A?displayProperty=fullName>      — Jeśli dokument nie został załadowany przy użyciu <xref:System.Xml.XmlReader>(to znaczy, jeśli został załadowany, przy użyciu strumienia, plików i tak dalej) `XmlResolver` na `XmlDocument` jest zawsze używana.</xref:System.Xml.XmlReader>      — Jeśli dokument został załadowany z <xref:System.Xml.XmlTextReader>, program rozpoznawania nazw na `XmlTextReader` jest używany do rozpoznawania odwołań DTD w węźle dokumentu.</xref:System.Xml.XmlTextReader> Program rozpoznawania nazw na `XmlDocument` jest używany do zwiększenia żadnych odwołań do jednostek.      — Jeśli dokument został załadowany z <xref:System.Xml.XmlValidatingReader>, program rozpoznawania nazw na `XmlDocument` nie jest nigdy używane.</xref:System.Xml.XmlValidatingReader>      — Jeśli dokument został załadowany z klasy, która rozszerza `XmlReader` i `XmlReader` nie można rozpoznać jednostki (<xref:System.Xml.XmlReader.CanResolveEntity%2A> zwraca `false`), `XmlResolver` na `XmlDocument` służy do rozpoznawania odwołań w węźle dokumentu i rozwiń żadnych odwołań do jednostek.</xref:System.Xml.XmlReader.CanResolveEntity%2A>      > [!NOTE] > Jeśli `XmlDocument` jest ładowane przy użyciu <xref:System.Xml.XmlReader>które `XmlResolver` ustawioną, `XmlResolver` na `XmlReader` nie jest buforowana przez `XmlDocument` po <xref:System.Xml.XmlDocument.Load%2A>zakończeniu.</xref:System.Xml.XmlDocument.Load%2A> </xref:System.Xml.XmlReader>       Jeśli ta właściwość nie jest ustawiona, poziom zaufania aplikacji w wersji 1.1 środowiska.NET Framework określa zachowanie domyślne.       `Fully trusted code:`Dokument używa domyślnego <xref:System.Xml.XmlUrlResolver>bez poświadczeń użytkownika.</xref:System.Xml.XmlUrlResolver> Jeśli wymagane jest uwierzytelnienie dostępu do zasobu sieciowego, użyj `XmlResolver` właściwości w celu określenia `XmlResolver` niezbędne poświadczenia.       `Semi-trusted code:``XmlResolver` Właściwość jest ustawiona na `null`. Nie można rozpoznać zasobów zewnętrznych.       Aby uzyskać więcej informacji na temat zabezpieczeń i `XmlResolver` właściwości, zobacz [rozpoznawania zasobów zewnętrznych](~/add/includes/ajax-current-ext-md.md).       Ta właściwość jest rozszerzenie Microsoft do modelu DOM (Document Object)."
  example:
  - "The following example loads an XML document which includes a reference to a DTD file. The `XmlResolver` property is used to set the credentials necessary to access the network resource.  \n  \n [!code-cpp[XmlDocument.XmlResolver#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_9_1.cpp)]\n [!code-cs[XmlDocument.XmlResolver#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_9_1.cs)]\n [!code-vb[XmlDocument.XmlResolver#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_9_1.vb)]  \n  \n The example uses the following data files as input.  \n  \n `book5.xml`  \n  \n [!code-xml[XmlDocument.XmlResolver#2](~/add/codesnippet/xml/p-system.xml.xmldocument_9_2.xml)]  \n  \n `books.dtd`  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public virtual System.Xml.XmlResolver XmlResolver { set; }
    return:
      type: System.Xml.XmlResolver
      description: "The <xref uid=&quot;langword_csharp_XmlResolver&quot; name=&quot;XmlResolver&quot; href=&quot;&quot;></xref> to use.       W wersji 1.1 środowiska.NET Framework obiekt wywołujący musi być w pełni zaufany, aby określić <xref uid=&quot;langword_csharp_XmlResolver&quot; name=&quot;XmlResolver&quot; href=&quot;&quot;> </xref>."
  overload: System.Xml.XmlDocument.XmlResolver*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Ta właściwość jest ustawiona na <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> i napotkano zewnętrzna definicja DTD lub jednostki."
  platform:
  - net462
references:
- uid: System.Xml.XmlNode
  isExternal: false
  name: System.Xml.XmlNode
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Xml.XmlException
  isExternal: true
  name: System.Xml.XmlException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.IO.DirectoryNotFoundException
  isExternal: true
  name: System.IO.DirectoryNotFoundException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.NullReferenceException
  isExternal: true
  name: System.NullReferenceException
- uid: System.Xml.Schema.XmlSchemaValidationException
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaValidationException
  nameWithType: XmlSchemaValidationException
  fullName: System.Xml.Schema.XmlSchemaValidationException
- uid: System.Xml.XmlDocument.#ctor
  parent: System.Xml.XmlDocument
  isExternal: false
  name: XmlDocument()
  nameWithType: XmlDocument.XmlDocument()
  fullName: System.Xml.XmlDocument.XmlDocument()
- uid: System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: XmlDocument(XmlImplementation)
  nameWithType: XmlDocument.XmlDocument(XmlImplementation)
  fullName: System.Xml.XmlDocument.XmlDocument(XmlImplementation)
- uid: System.Xml.XmlImplementation
  parent: System.Xml
  isExternal: false
  name: XmlImplementation
  nameWithType: XmlImplementation
  fullName: System.Xml.XmlImplementation
- uid: System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: XmlDocument(XmlNameTable)
  nameWithType: XmlDocument.XmlDocument(XmlNameTable)
  fullName: System.Xml.XmlDocument.XmlDocument(XmlNameTable)
- uid: System.Xml.XmlNameTable
  parent: System.Xml
  isExternal: true
  name: XmlNameTable
  nameWithType: XmlNameTable
  fullName: System.Xml.XmlNameTable
- uid: System.Xml.XmlDocument.BaseURI
  parent: System.Xml.XmlDocument
  isExternal: false
  name: BaseURI
  nameWithType: XmlDocument.BaseURI
  fullName: System.Xml.XmlDocument.BaseURI
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.XmlDocument.CloneNode(System.Boolean)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CloneNode(Boolean)
  nameWithType: XmlDocument.CloneNode(Boolean)
  fullName: System.Xml.XmlDocument.CloneNode(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.XmlDocument.CreateAttribute(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateAttribute(String)
  nameWithType: XmlDocument.CreateAttribute(String)
  fullName: System.Xml.XmlDocument.CreateAttribute(String)
- uid: System.Xml.XmlAttribute
  parent: System.Xml
  isExternal: false
  name: XmlAttribute
  nameWithType: XmlAttribute
  fullName: System.Xml.XmlAttribute
- uid: System.Xml.XmlDocument.CreateAttribute(System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateAttribute(String,String)
  nameWithType: XmlDocument.CreateAttribute(String,String)
  fullName: System.Xml.XmlDocument.CreateAttribute(String,String)
- uid: System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateAttribute(String,String,String)
  nameWithType: XmlDocument.CreateAttribute(String,String,String)
  fullName: System.Xml.XmlDocument.CreateAttribute(String,String,String)
- uid: System.Xml.XmlDocument.CreateCDataSection(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateCDataSection(String)
  nameWithType: XmlDocument.CreateCDataSection(String)
  fullName: System.Xml.XmlDocument.CreateCDataSection(String)
- uid: System.Xml.XmlCDataSection
  parent: System.Xml
  isExternal: false
  name: XmlCDataSection
  nameWithType: XmlCDataSection
  fullName: System.Xml.XmlCDataSection
- uid: System.Xml.XmlDocument.CreateComment(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateComment(String)
  nameWithType: XmlDocument.CreateComment(String)
  fullName: System.Xml.XmlDocument.CreateComment(String)
- uid: System.Xml.XmlComment
  parent: System.Xml
  isExternal: false
  name: XmlComment
  nameWithType: XmlComment
  fullName: System.Xml.XmlComment
- uid: System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateDefaultAttribute(String,String,String)
  nameWithType: XmlDocument.CreateDefaultAttribute(String,String,String)
  fullName: System.Xml.XmlDocument.CreateDefaultAttribute(String,String,String)
- uid: System.Xml.XmlDocument.CreateDocumentFragment
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateDocumentFragment()
  nameWithType: XmlDocument.CreateDocumentFragment()
  fullName: System.Xml.XmlDocument.CreateDocumentFragment()
- uid: System.Xml.XmlDocumentFragment
  parent: System.Xml
  isExternal: false
  name: XmlDocumentFragment
  nameWithType: XmlDocumentFragment
  fullName: System.Xml.XmlDocumentFragment
- uid: System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateDocumentType(String,String,String,String)
  nameWithType: XmlDocument.CreateDocumentType(String,String,String,String)
  fullName: System.Xml.XmlDocument.CreateDocumentType(String,String,String,String)
- uid: System.Xml.XmlDocumentType
  parent: System.Xml
  isExternal: false
  name: XmlDocumentType
  nameWithType: XmlDocumentType
  fullName: System.Xml.XmlDocumentType
- uid: System.Xml.XmlDocument.CreateElement(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateElement(String)
  nameWithType: XmlDocument.CreateElement(String)
  fullName: System.Xml.XmlDocument.CreateElement(String)
- uid: System.Xml.XmlElement
  parent: System.Xml
  isExternal: false
  name: XmlElement
  nameWithType: XmlElement
  fullName: System.Xml.XmlElement
- uid: System.Xml.XmlDocument.CreateElement(System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateElement(String,String)
  nameWithType: XmlDocument.CreateElement(String,String)
  fullName: System.Xml.XmlDocument.CreateElement(String,String)
- uid: System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateElement(String,String,String)
  nameWithType: XmlDocument.CreateElement(String,String,String)
  fullName: System.Xml.XmlDocument.CreateElement(String,String,String)
- uid: System.Xml.XmlDocument.CreateEntityReference(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateEntityReference(String)
  nameWithType: XmlDocument.CreateEntityReference(String)
  fullName: System.Xml.XmlDocument.CreateEntityReference(String)
- uid: System.Xml.XmlEntityReference
  parent: System.Xml
  isExternal: false
  name: XmlEntityReference
  nameWithType: XmlEntityReference
  fullName: System.Xml.XmlEntityReference
- uid: System.Xml.XmlDocument.CreateNavigator
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNavigator()
  nameWithType: XmlDocument.CreateNavigator()
  fullName: System.Xml.XmlDocument.CreateNavigator()
- uid: System.Xml.XPath.XPathNavigator
  parent: System.Xml.XPath
  isExternal: false
  name: XPathNavigator
  nameWithType: XPathNavigator
  fullName: System.Xml.XPath.XPathNavigator
- uid: System.Xml.XmlDocument.CreateNavigator(System.Xml.XmlNode)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNavigator(XmlNode)
  nameWithType: XmlDocument.CreateNavigator(XmlNode)
  fullName: System.Xml.XmlDocument.CreateNavigator(XmlNode)
- uid: System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNode(String,String,String)
  nameWithType: XmlDocument.CreateNode(String,String,String)
  fullName: System.Xml.XmlDocument.CreateNode(String,String,String)
- uid: System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNode(XmlNodeType,String,String)
  nameWithType: XmlDocument.CreateNode(XmlNodeType,String,String)
  fullName: System.Xml.XmlDocument.CreateNode(XmlNodeType,String,String)
- uid: System.Xml.XmlNodeType
  parent: System.Xml
  isExternal: true
  name: XmlNodeType
  nameWithType: XmlNodeType
  fullName: System.Xml.XmlNodeType
- uid: System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNode(XmlNodeType,String,String,String)
  nameWithType: XmlDocument.CreateNode(XmlNodeType,String,String,String)
  fullName: System.Xml.XmlDocument.CreateNode(XmlNodeType,String,String,String)
- uid: System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateProcessingInstruction(String,String)
  nameWithType: XmlDocument.CreateProcessingInstruction(String,String)
  fullName: System.Xml.XmlDocument.CreateProcessingInstruction(String,String)
- uid: System.Xml.XmlProcessingInstruction
  parent: System.Xml
  isExternal: false
  name: XmlProcessingInstruction
  nameWithType: XmlProcessingInstruction
  fullName: System.Xml.XmlProcessingInstruction
- uid: System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateSignificantWhitespace(String)
  nameWithType: XmlDocument.CreateSignificantWhitespace(String)
  fullName: System.Xml.XmlDocument.CreateSignificantWhitespace(String)
- uid: System.Xml.XmlSignificantWhitespace
  parent: System.Xml
  isExternal: false
  name: XmlSignificantWhitespace
  nameWithType: XmlSignificantWhitespace
  fullName: System.Xml.XmlSignificantWhitespace
- uid: System.Xml.XmlDocument.CreateTextNode(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateTextNode(String)
  nameWithType: XmlDocument.CreateTextNode(String)
  fullName: System.Xml.XmlDocument.CreateTextNode(String)
- uid: System.Xml.XmlText
  parent: System.Xml
  isExternal: false
  name: XmlText
  nameWithType: XmlText
  fullName: System.Xml.XmlText
- uid: System.Xml.XmlDocument.CreateWhitespace(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateWhitespace(String)
  nameWithType: XmlDocument.CreateWhitespace(String)
  fullName: System.Xml.XmlDocument.CreateWhitespace(String)
- uid: System.Xml.XmlWhitespace
  parent: System.Xml
  isExternal: false
  name: XmlWhitespace
  nameWithType: XmlWhitespace
  fullName: System.Xml.XmlWhitespace
- uid: System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateXmlDeclaration(String,String,String)
  nameWithType: XmlDocument.CreateXmlDeclaration(String,String,String)
  fullName: System.Xml.XmlDocument.CreateXmlDeclaration(String,String,String)
- uid: System.Xml.XmlDeclaration
  parent: System.Xml
  isExternal: false
  name: XmlDeclaration
  nameWithType: XmlDeclaration
  fullName: System.Xml.XmlDeclaration
- uid: System.Xml.XmlDocument.DocumentElement
  parent: System.Xml.XmlDocument
  isExternal: false
  name: DocumentElement
  nameWithType: XmlDocument.DocumentElement
  fullName: System.Xml.XmlDocument.DocumentElement
- uid: System.Xml.XmlDocument.DocumentType
  parent: System.Xml.XmlDocument
  isExternal: false
  name: DocumentType
  nameWithType: XmlDocument.DocumentType
  fullName: System.Xml.XmlDocument.DocumentType
- uid: System.Xml.XmlDocument.GetElementById(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: GetElementById(String)
  nameWithType: XmlDocument.GetElementById(String)
  fullName: System.Xml.XmlDocument.GetElementById(String)
- uid: System.Xml.XmlDocument.GetElementsByTagName(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: GetElementsByTagName(String)
  nameWithType: XmlDocument.GetElementsByTagName(String)
  fullName: System.Xml.XmlDocument.GetElementsByTagName(String)
- uid: System.Xml.XmlNodeList
  parent: System.Xml
  isExternal: false
  name: XmlNodeList
  nameWithType: XmlNodeList
  fullName: System.Xml.XmlNodeList
- uid: System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: GetElementsByTagName(String,String)
  nameWithType: XmlDocument.GetElementsByTagName(String,String)
  fullName: System.Xml.XmlDocument.GetElementsByTagName(String,String)
- uid: System.Xml.XmlDocument.Implementation
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Implementation
  nameWithType: XmlDocument.Implementation
  fullName: System.Xml.XmlDocument.Implementation
- uid: System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: ImportNode(XmlNode,Boolean)
  nameWithType: XmlDocument.ImportNode(XmlNode,Boolean)
  fullName: System.Xml.XmlDocument.ImportNode(XmlNode,Boolean)
- uid: System.Xml.XmlDocument.InnerText
  parent: System.Xml.XmlDocument
  isExternal: false
  name: InnerText
  nameWithType: XmlDocument.InnerText
  fullName: System.Xml.XmlDocument.InnerText
- uid: System.Xml.XmlDocument.InnerXml
  parent: System.Xml.XmlDocument
  isExternal: false
  name: InnerXml
  nameWithType: XmlDocument.InnerXml
  fullName: System.Xml.XmlDocument.InnerXml
- uid: System.Xml.XmlDocument.IsReadOnly
  parent: System.Xml.XmlDocument
  isExternal: false
  name: IsReadOnly
  nameWithType: XmlDocument.IsReadOnly
  fullName: System.Xml.XmlDocument.IsReadOnly
- uid: System.Xml.XmlDocument.Load(System.IO.Stream)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Load(Stream)
  nameWithType: XmlDocument.Load(Stream)
  fullName: System.Xml.XmlDocument.Load(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Xml.XmlDocument.Load(System.IO.TextReader)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Load(TextReader)
  nameWithType: XmlDocument.Load(TextReader)
  fullName: System.Xml.XmlDocument.Load(TextReader)
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Xml.XmlDocument.Load(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Load(String)
  nameWithType: XmlDocument.Load(String)
  fullName: System.Xml.XmlDocument.Load(String)
- uid: System.Xml.XmlDocument.Load(System.Xml.XmlReader)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Load(XmlReader)
  nameWithType: XmlDocument.Load(XmlReader)
  fullName: System.Xml.XmlDocument.Load(XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml.XmlDocument.LoadXml(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: LoadXml(String)
  nameWithType: XmlDocument.LoadXml(String)
  fullName: System.Xml.XmlDocument.LoadXml(String)
- uid: System.Xml.XmlDocument.LocalName
  parent: System.Xml.XmlDocument
  isExternal: false
  name: LocalName
  nameWithType: XmlDocument.LocalName
  fullName: System.Xml.XmlDocument.LocalName
- uid: System.Xml.XmlDocument.Name
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Name
  nameWithType: XmlDocument.Name
  fullName: System.Xml.XmlDocument.Name
- uid: System.Xml.XmlDocument.NameTable
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NameTable
  nameWithType: XmlDocument.NameTable
  fullName: System.Xml.XmlDocument.NameTable
- uid: System.Xml.XmlDocument.NodeChanged
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeChanged
  nameWithType: XmlDocument.NodeChanged
  fullName: System.Xml.XmlDocument.NodeChanged
- uid: System.Xml.XmlNodeChangedEventHandler
  parent: System.Xml
  isExternal: false
  name: XmlNodeChangedEventHandler
  nameWithType: XmlNodeChangedEventHandler
  fullName: System.Xml.XmlNodeChangedEventHandler
- uid: System.Xml.XmlDocument.NodeChanging
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeChanging
  nameWithType: XmlDocument.NodeChanging
  fullName: System.Xml.XmlDocument.NodeChanging
- uid: System.Xml.XmlDocument.NodeInserted
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeInserted
  nameWithType: XmlDocument.NodeInserted
  fullName: System.Xml.XmlDocument.NodeInserted
- uid: System.Xml.XmlDocument.NodeInserting
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeInserting
  nameWithType: XmlDocument.NodeInserting
  fullName: System.Xml.XmlDocument.NodeInserting
- uid: System.Xml.XmlDocument.NodeRemoved
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeRemoved
  nameWithType: XmlDocument.NodeRemoved
  fullName: System.Xml.XmlDocument.NodeRemoved
- uid: System.Xml.XmlDocument.NodeRemoving
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeRemoving
  nameWithType: XmlDocument.NodeRemoving
  fullName: System.Xml.XmlDocument.NodeRemoving
- uid: System.Xml.XmlDocument.NodeType
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeType
  nameWithType: XmlDocument.NodeType
  fullName: System.Xml.XmlDocument.NodeType
- uid: System.Xml.XmlDocument.OwnerDocument
  parent: System.Xml.XmlDocument
  isExternal: false
  name: OwnerDocument
  nameWithType: XmlDocument.OwnerDocument
  fullName: System.Xml.XmlDocument.OwnerDocument
- uid: System.Xml.XmlDocument
  parent: System.Xml
  isExternal: false
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
- uid: System.Xml.XmlDocument.ParentNode
  parent: System.Xml.XmlDocument
  isExternal: false
  name: ParentNode
  nameWithType: XmlDocument.ParentNode
  fullName: System.Xml.XmlDocument.ParentNode
- uid: System.Xml.XmlDocument.PreserveWhitespace
  parent: System.Xml.XmlDocument
  isExternal: false
  name: PreserveWhitespace
  nameWithType: XmlDocument.PreserveWhitespace
  fullName: System.Xml.XmlDocument.PreserveWhitespace
- uid: System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: ReadNode(XmlReader)
  nameWithType: XmlDocument.ReadNode(XmlReader)
  fullName: System.Xml.XmlDocument.ReadNode(XmlReader)
- uid: System.Xml.XmlDocument.Save(System.IO.Stream)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Save(Stream)
  nameWithType: XmlDocument.Save(Stream)
  fullName: System.Xml.XmlDocument.Save(Stream)
- uid: System.Xml.XmlDocument.Save(System.IO.TextWriter)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Save(TextWriter)
  nameWithType: XmlDocument.Save(TextWriter)
  fullName: System.Xml.XmlDocument.Save(TextWriter)
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Xml.XmlDocument.Save(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Save(String)
  nameWithType: XmlDocument.Save(String)
  fullName: System.Xml.XmlDocument.Save(String)
- uid: System.Xml.XmlDocument.Save(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Save(XmlWriter)
  nameWithType: XmlDocument.Save(XmlWriter)
  fullName: System.Xml.XmlDocument.Save(XmlWriter)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Xml.XmlDocument.SchemaInfo
  parent: System.Xml.XmlDocument
  isExternal: false
  name: SchemaInfo
  nameWithType: XmlDocument.SchemaInfo
  fullName: System.Xml.XmlDocument.SchemaInfo
- uid: System.Xml.Schema.IXmlSchemaInfo
  parent: System.Xml.Schema
  isExternal: false
  name: IXmlSchemaInfo
  nameWithType: IXmlSchemaInfo
  fullName: System.Xml.Schema.IXmlSchemaInfo
- uid: System.Xml.XmlDocument.Schemas
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Schemas
  nameWithType: XmlDocument.Schemas
  fullName: System.Xml.XmlDocument.Schemas
- uid: System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Validate(ValidationEventHandler)
  nameWithType: XmlDocument.Validate(ValidationEventHandler)
  fullName: System.Xml.XmlDocument.Validate(ValidationEventHandler)
- uid: System.Xml.Schema.ValidationEventHandler
  parent: System.Xml.Schema
  isExternal: false
  name: ValidationEventHandler
  nameWithType: ValidationEventHandler
  fullName: System.Xml.Schema.ValidationEventHandler
- uid: System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Validate(ValidationEventHandler,XmlNode)
  nameWithType: XmlDocument.Validate(ValidationEventHandler,XmlNode)
  fullName: System.Xml.XmlDocument.Validate(ValidationEventHandler,XmlNode)
- uid: System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: WriteContentTo(XmlWriter)
  nameWithType: XmlDocument.WriteContentTo(XmlWriter)
  fullName: System.Xml.XmlDocument.WriteContentTo(XmlWriter)
- uid: System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: WriteTo(XmlWriter)
  nameWithType: XmlDocument.WriteTo(XmlWriter)
  fullName: System.Xml.XmlDocument.WriteTo(XmlWriter)
- uid: System.Xml.XmlDocument.XmlResolver
  parent: System.Xml.XmlDocument
  isExternal: false
  name: XmlResolver
  nameWithType: XmlDocument.XmlResolver
  fullName: System.Xml.XmlDocument.XmlResolver
- uid: System.Xml.XmlResolver
  parent: System.Xml
  isExternal: false
  name: XmlResolver
  nameWithType: XmlResolver
  fullName: System.Xml.XmlResolver
- uid: System.Xml.XmlDocument.#ctor*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: XmlDocument
  nameWithType: XmlDocument.XmlDocument
- uid: System.Xml.XmlDocument.BaseURI*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: BaseURI
  nameWithType: XmlDocument.BaseURI
- uid: System.Xml.XmlDocument.CloneNode*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CloneNode
  nameWithType: XmlDocument.CloneNode
- uid: System.Xml.XmlDocument.CreateAttribute*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateAttribute
  nameWithType: XmlDocument.CreateAttribute
- uid: System.Xml.XmlDocument.CreateCDataSection*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateCDataSection
  nameWithType: XmlDocument.CreateCDataSection
- uid: System.Xml.XmlDocument.CreateComment*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateComment
  nameWithType: XmlDocument.CreateComment
- uid: System.Xml.XmlDocument.CreateDefaultAttribute*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateDefaultAttribute
  nameWithType: XmlDocument.CreateDefaultAttribute
- uid: System.Xml.XmlDocument.CreateDocumentFragment*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateDocumentFragment
  nameWithType: XmlDocument.CreateDocumentFragment
- uid: System.Xml.XmlDocument.CreateDocumentType*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateDocumentType
  nameWithType: XmlDocument.CreateDocumentType
- uid: System.Xml.XmlDocument.CreateElement*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateElement
  nameWithType: XmlDocument.CreateElement
- uid: System.Xml.XmlDocument.CreateEntityReference*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateEntityReference
  nameWithType: XmlDocument.CreateEntityReference
- uid: System.Xml.XmlDocument.CreateNavigator*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNavigator
  nameWithType: XmlDocument.CreateNavigator
- uid: System.Xml.XmlDocument.CreateNode*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNode
  nameWithType: XmlDocument.CreateNode
- uid: System.Xml.XmlDocument.CreateProcessingInstruction*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateProcessingInstruction
  nameWithType: XmlDocument.CreateProcessingInstruction
- uid: System.Xml.XmlDocument.CreateSignificantWhitespace*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateSignificantWhitespace
  nameWithType: XmlDocument.CreateSignificantWhitespace
- uid: System.Xml.XmlDocument.CreateTextNode*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateTextNode
  nameWithType: XmlDocument.CreateTextNode
- uid: System.Xml.XmlDocument.CreateWhitespace*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateWhitespace
  nameWithType: XmlDocument.CreateWhitespace
- uid: System.Xml.XmlDocument.CreateXmlDeclaration*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateXmlDeclaration
  nameWithType: XmlDocument.CreateXmlDeclaration
- uid: System.Xml.XmlDocument.DocumentElement*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: DocumentElement
  nameWithType: XmlDocument.DocumentElement
- uid: System.Xml.XmlDocument.DocumentType*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: DocumentType
  nameWithType: XmlDocument.DocumentType
- uid: System.Xml.XmlDocument.GetElementById*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: GetElementById
  nameWithType: XmlDocument.GetElementById
- uid: System.Xml.XmlDocument.GetElementsByTagName*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: GetElementsByTagName
  nameWithType: XmlDocument.GetElementsByTagName
- uid: System.Xml.XmlDocument.Implementation*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Implementation
  nameWithType: XmlDocument.Implementation
- uid: System.Xml.XmlDocument.ImportNode*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: ImportNode
  nameWithType: XmlDocument.ImportNode
- uid: System.Xml.XmlDocument.InnerText*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: InnerText
  nameWithType: XmlDocument.InnerText
- uid: System.Xml.XmlDocument.InnerXml*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: InnerXml
  nameWithType: XmlDocument.InnerXml
- uid: System.Xml.XmlDocument.IsReadOnly*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: IsReadOnly
  nameWithType: XmlDocument.IsReadOnly
- uid: System.Xml.XmlDocument.Load*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Load
  nameWithType: XmlDocument.Load
- uid: System.Xml.XmlDocument.LoadXml*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: LoadXml
  nameWithType: XmlDocument.LoadXml
- uid: System.Xml.XmlDocument.LocalName*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: LocalName
  nameWithType: XmlDocument.LocalName
- uid: System.Xml.XmlDocument.Name*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Name
  nameWithType: XmlDocument.Name
- uid: System.Xml.XmlDocument.NameTable*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NameTable
  nameWithType: XmlDocument.NameTable
- uid: System.Xml.XmlDocument.NodeType*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeType
  nameWithType: XmlDocument.NodeType
- uid: System.Xml.XmlDocument.OwnerDocument*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: OwnerDocument
  nameWithType: XmlDocument.OwnerDocument
- uid: System.Xml.XmlDocument.ParentNode*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: ParentNode
  nameWithType: XmlDocument.ParentNode
- uid: System.Xml.XmlDocument.PreserveWhitespace*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: PreserveWhitespace
  nameWithType: XmlDocument.PreserveWhitespace
- uid: System.Xml.XmlDocument.ReadNode*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: ReadNode
  nameWithType: XmlDocument.ReadNode
- uid: System.Xml.XmlDocument.Save*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Save
  nameWithType: XmlDocument.Save
- uid: System.Xml.XmlDocument.SchemaInfo*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: SchemaInfo
  nameWithType: XmlDocument.SchemaInfo
- uid: System.Xml.XmlDocument.Schemas*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Schemas
  nameWithType: XmlDocument.Schemas
- uid: System.Xml.XmlDocument.Validate*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Validate
  nameWithType: XmlDocument.Validate
- uid: System.Xml.XmlDocument.WriteContentTo*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: WriteContentTo
  nameWithType: XmlDocument.WriteContentTo
- uid: System.Xml.XmlDocument.WriteTo*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: WriteTo
  nameWithType: XmlDocument.WriteTo
- uid: System.Xml.XmlDocument.XmlResolver*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: XmlResolver
  nameWithType: XmlDocument.XmlResolver
