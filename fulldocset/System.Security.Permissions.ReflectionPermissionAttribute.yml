### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.ReflectionPermissionAttribute
  id: ReflectionPermissionAttribute
  children:
  - System.Security.Permissions.ReflectionPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  - System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission
  - System.Security.Permissions.ReflectionPermissionAttribute.Flags
  - System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess
  - System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit
  - System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess
  - System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation
  langs:
  - csharp
  name: ReflectionPermissionAttribute
  nameWithType: ReflectionPermissionAttribute
  fullName: System.Security.Permissions.ReflectionPermissionAttribute
  type: Class
  summary: "Zezwala na akcje zabezpieczeń dla <xref href=&quot;System.Security.Permissions.ReflectionPermission&quot;> </xref> ma zostać zastosowany do kodu przy użyciu zabezpieczeń deklaratywnych."
  remarks: "Zależy od zakresu deklaracji, która jest dozwolona <xref:System.Security.Permissions.SecurityAction>używany.</xref:System.Security.Permissions.SecurityAction>       Informacji o zabezpieczeniach deklaruje atrybutu zabezpieczeń są przechowywane w metadanych elementu docelowego atrybutu i jest dostępny przez system w czasie wykonywania. Atrybuty zabezpieczeń są używane tylko w przypadku zabezpieczenia deklaratywne. Zabezpieczenia imperatywne można użyć w klasie odpowiednie uprawnienia."
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Constructor | System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class ReflectionPermissionAttribute : System.Security.Permissions.CodeAccessSecurityAttribute
  inheritance:
  - System.Attribute
  - System.Security.Permissions.SecurityAttribute
  - System.Security.Permissions.CodeAccessSecurityAttribute
  implements: []
  inheritedMembers:
  - System.Security.Permissions.SecurityAttribute.Action
  - System.Security.Permissions.SecurityAttribute.Unrestricted
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  id: '#ctor(System.Security.Permissions.SecurityAction)'
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  langs:
  - csharp
  name: ReflectionPermissionAttribute(SecurityAction)
  nameWithType: ReflectionPermissionAttribute.ReflectionPermissionAttribute(SecurityAction)
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionPermissionAttribute(SecurityAction)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Security.Permissions.ReflectionPermissionAttribute&quot;> </xref> klasy z określonym <xref href=&quot;System.Security.Permissions.SecurityAction&quot;> </xref>."
  syntax:
    content: public ReflectionPermissionAttribute (System.Security.Permissions.SecurityAction action);
    parameters:
    - id: action
      type: System.Security.Permissions.SecurityAction
      description: "Jeden z <xref href=&quot;System.Security.Permissions.SecurityAction&quot;> </xref> wartości."
  overload: System.Security.Permissions.ReflectionPermissionAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission
  id: CreatePermission
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  langs:
  - csharp
  name: CreatePermission()
  nameWithType: ReflectionPermissionAttribute.CreatePermission()
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Tworzy i zwraca nowy <xref href=&quot;System.Security.Permissions.ReflectionPermission&quot;> </xref>."
  remarks: "Ta metoda powinna można wywołać tylko przez system zabezpieczeń nigdy przez kod aplikacji.       W czasie kompilacji atrybuty przekonwertować deklaracje zabezpieczeń do serializacji formularza w metadanych. Zabezpieczenia deklaracyjne danych w metadanych jest tworzona na podstawie ta metoda zwraca odpowiadającego atrybutowi uprawnień."
  syntax:
    content: public override System.Security.IPermission CreatePermission ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "A <xref href=&quot;System.Security.Permissions.ReflectionPermission&quot;> </xref> , który odpowiada temu atrybutowi."
  overload: System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionAttribute.Flags
  id: Flags
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  langs:
  - csharp
  name: Flags
  nameWithType: ReflectionPermissionAttribute.Flags
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.Flags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Pobiera lub ustawia bieżący dozwolone używa odbicia."
  syntax:
    content: public System.Security.Permissions.ReflectionPermissionFlag Flags { get; set; }
    return:
      type: System.Security.Permissions.ReflectionPermissionFlag
      description: "Co najmniej jednego <xref href=&quot;System.Security.Permissions.ReflectionPermissionFlag&quot;> </xref> wartości łączyć, używając logiczną lub."
  overload: System.Security.Permissions.ReflectionPermissionAttribute.Flags*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Podejmowana jest próba, aby ustawić tę właściwość na nieprawidłową wartość. Zobacz <xref href=&quot;System.Security.Permissions.ReflectionPermissionFlag&quot;> </xref> prawidłowe wartości."
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess
  id: MemberAccess
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  langs:
  - csharp
  name: MemberAccess
  nameWithType: ReflectionPermissionAttribute.MemberAccess
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Pobiera lub ustawia wartość wskazującą, czy jest dozwolone wywołania operacji w elementach członkowskich niepubliczne."
  syntax:
    content: public bool MemberAccess { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli jest dozwolone wywołania operacji w elementach członkowskich niepublicznych; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit
  id: ReflectionEmit
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  langs:
  - csharp
  name: ReflectionEmit
  nameWithType: ReflectionPermissionAttribute.ReflectionEmit
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Pobiera lub ustawia wartość wskazującą, czy używać niektórych funkcji w <xref href=&quot;System.Reflection.Emit&quot;> </xref>, takie jak emitowanie symboli debugowania jest dozwolone."
  remarks: "> [!NOTE]>, Począwszy od [!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)], emitowanie kodu nie wymaga już <xref:System.Security.Permissions.ReflectionPermission>z <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName>flagi.</xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> </xref:System.Security.Permissions.ReflectionPermission> Niektóre funkcje odbicia emisji, takie jak emitowanie symboli debugowania, nadal wymaga <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName>flagi.</xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> (Zobacz [problemy z zabezpieczeniami w odbicia Emituj](~/add/includes/ajax-current-ext-md.md).)   >> Aby używać tej funkcji, należy docelowy aplikacji [!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)] lub nowszym."
  syntax:
    content: public bool ReflectionEmit { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli dozwolone jest użycie funkcji dotyczy; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess
  id: RestrictedMemberAccess
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  langs:
  - csharp
  name: RestrictedMemberAccess
  nameWithType: ReflectionPermissionAttribute.RestrictedMemberAccess
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Pobiera lub ustawia wartość wskazującą, czy jest dozwolone ograniczone wywołanie niepublicznych elementów członkowskich. Ograniczone wywołanie oznacza, że zestaw grant zestawu, który zawiera niepublicznego elementu członkowskiego, który jest wywoływany musi być równa lub podzbiór, grant zbiór wywoływanie zestawu."
  remarks: >-
    > [!NOTE]

    >  This property is introduced in the [!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)]. To use this property, your application should target the [!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)] or later.
  syntax:
    content: public bool RestrictedMemberAccess { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli dozwolone jest ograniczone wywołanie niepublicznych elementów członkowskich; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation
  id: TypeInformation
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  langs:
  - csharp
  name: TypeInformation
  nameWithType: ReflectionPermissionAttribute.TypeInformation
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Pobiera lub ustawia wartość wskazującą, czy jest dozwolone odbicia w elementach członkowskich, które nie są widoczne."
  remarks: "Ta właściwość jest już przestarzałe. Zdarzenie odzwierciedla na metadane elementów członkowskich, które nie są już widoczne wymaga <xref:System.Security.Permissions.ReflectionPermission>.</xref:System.Security.Permissions.ReflectionPermission>"
  syntax:
    content: public bool TypeInformation { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli odbicia w elementach członkowskich, które nie są widoczne jest dozwolony; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Permissions.CodeAccessSecurityAttribute
  isExternal: false
  name: System.Security.Permissions.CodeAccessSecurityAttribute
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Permissions.ReflectionPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: ReflectionPermissionAttribute(SecurityAction)
  nameWithType: ReflectionPermissionAttribute.ReflectionPermissionAttribute(SecurityAction)
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionPermissionAttribute(SecurityAction)
- uid: System.Security.Permissions.SecurityAction
  parent: System.Security.Permissions
  isExternal: false
  name: SecurityAction
  nameWithType: SecurityAction
  fullName: System.Security.Permissions.SecurityAction
- uid: System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: CreatePermission()
  nameWithType: ReflectionPermissionAttribute.CreatePermission()
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.ReflectionPermissionAttribute.Flags
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: Flags
  nameWithType: ReflectionPermissionAttribute.Flags
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.Flags
- uid: System.Security.Permissions.ReflectionPermissionFlag
  parent: System.Security.Permissions
  isExternal: false
  name: ReflectionPermissionFlag
  nameWithType: ReflectionPermissionFlag
  fullName: System.Security.Permissions.ReflectionPermissionFlag
- uid: System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: MemberAccess
  nameWithType: ReflectionPermissionAttribute.MemberAccess
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: ReflectionEmit
  nameWithType: ReflectionPermissionAttribute.ReflectionEmit
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit
- uid: System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: RestrictedMemberAccess
  nameWithType: ReflectionPermissionAttribute.RestrictedMemberAccess
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess
- uid: System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: TypeInformation
  nameWithType: ReflectionPermissionAttribute.TypeInformation
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation
- uid: System.Security.Permissions.ReflectionPermissionAttribute.#ctor*
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: ReflectionPermissionAttribute
  nameWithType: ReflectionPermissionAttribute.ReflectionPermissionAttribute
- uid: System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission*
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: CreatePermission
  nameWithType: ReflectionPermissionAttribute.CreatePermission
- uid: System.Security.Permissions.ReflectionPermissionAttribute.Flags*
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: Flags
  nameWithType: ReflectionPermissionAttribute.Flags
- uid: System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess*
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: MemberAccess
  nameWithType: ReflectionPermissionAttribute.MemberAccess
- uid: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit*
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: ReflectionEmit
  nameWithType: ReflectionPermissionAttribute.ReflectionEmit
- uid: System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess*
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: RestrictedMemberAccess
  nameWithType: ReflectionPermissionAttribute.RestrictedMemberAccess
- uid: System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation*
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: TypeInformation
  nameWithType: ReflectionPermissionAttribute.TypeInformation
