### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint
  id: ConnectionPoint
  children:
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  langs:
  - csharp
  name: ConnectionPoint
  nameWithType: ConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint
  type: Class
  summary: "Służy jako klasa podstawowa dla definiowania połączenia punktu obiektów umożliwiających formantem klienta i dostawcy w połączeniu składników Web Part do udostępniania danych."
  remarks: "Połączenie każdej części sieci Web składa się z dwóch formantów serwera do udostępniania danych: jeden formant jest konsumenta, drugi dostawca. Omówienie niezbędne składniki połączenia części sieci Web, a sam obiekt połączenia, zobacz <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>Przegląd klasy.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Połączenie każdej części sieci Web wymaga punkty połączenia. Dostawcy i kontrola użytkownika musi mieć co najmniej jednego zdefiniowany element ConnectionPoint obiektu (każde z nich można opcjonalnie stosować wiele punktów połączenia) zawierający szczegóły jak formantu można łączyć się inny formant i typu danych, które można go udostępniać. Rzeczywiste połączenia dostawcy ma własny typ obiektu punktu połączenia (pochodzi od klasy podstawowej Element ConnectionPoint), <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>wystąpienia i że użytkownik ma własną obiekt <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>wystąpienia.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       Aby utworzyć punkt połączenia dostawcy, deweloperzy dodać metody wywołania zwrotnego do dostawcy, który zwróci wystąpienia zaimplementowany interfejs z klientem. One należy oznaczyć metody wywołania zwrotnego w kodzie źródłowym z `ConnectionProvider` kodu atrybutu (patrz <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>klasy).</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> Podobnie, aby utworzyć punkt połączenia klienta, deweloperzy musi metody klientowi, który otrzymuje wystąpienie interfejsu i ich należy oznaczyć tej metody z `ConnectionConsumer` atrybutu (patrz <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>klasy).</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>       Deweloperzy tworzenia połączeń na stronie sieci Web, tworzone jako statyczne lub dynamiczne połączenia. Połączenia statyczne są zadeklarowane w znaczniku strony sieci Web. Gdy jest zadeklarowany jako statyczny połączenia, deweloperzy można wyznaczyć punktów połączenia, które są używane dla konsumentów i dostawcy przez przypisywanie wartości do `ProviderConnectionPointID` i `ConsumerConnectionPointID` atrybutów w `<asp:webpartconnection>` tagu elementu. Ta metoda jest szczególnie przydatne, jeśli wiele punktów połączenia zdefiniowanego w kontroli klienta i dostawcy, ponieważ dzięki statyczne połączenie, aby określić które punkty połączenia do użycia na potrzeby połączenia.       Dynamiczne połączenia są tworzone programowo, przez dewelopera kodu lub przez użytkowników za pomocą interfejsu użytkownika (UI) udostępniane przez <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>kontroli.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Można utworzyć połączenia w kodzie, deweloperzy musi pobrać wystąpienia <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>obiektu przez wywołanie metody <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>Metoda <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontroli.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Przed ich można wywołać tej metody, deweloperzy musi mieć odwołania do konsumenta i kontrolki serwera dostawcy i ich obiektami punktu połączenia odpowiednich. Można pobrać odwołań do punktów połączenia dla dostawcy i kontroli konsumenta, pierwsze wywołanie deweloperzy <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>i <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>metody <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontroli.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> Te metody zwracają odpowiednie połączenie punktu obiektów, które z kolei mogą zostać przekazane do metody tworzenia połączeń.       Gdy klienta i dostawcy punktu obiekty połączeń jednocześnie korzystać z tego samego typu interfejsu, są zgodne i utworzenia bezpośredniego połączenia do udostępniania danych. Jeśli nie działają w tym samym typie interfejsu, <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>obiektu musi być używany do tłumaczenia wystąpienie interfejsu od dostawcy do typu, który użytkownik może współpracować z.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       Klasa abstrakcyjna Element ConnectionPoint udostępnia podstawowe szczegóły punktów połączenia, które są udostępniane przez formanty zarówno klienta i dostawcy. Kilka właściwości zawierają szczegółowe informacje. <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>Właściwość wskazuje, czy punkt połączenia mogą uczestniczyć w więcej niż jedno połączenie naraz.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> Domyślnie punkty połączenia dostawcy mogą uczestniczyć w wielu połączeń, a nie punkty połączenia klienta. <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A>Właściwość wskazuje typ serwera kontroli powiązanej z punktu połączenia.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> Należy pamiętać, że nie tylko <xref:System.Web.UI.WebControls.WebParts.WebPart>formanty można tworzyć połączeń; żadnego formantu serwera, czy formant ASP.NET, kontrolkę niestandardową lub kontrolkę użytkownika można włączyć brać udział w połączeniach, jeśli umieszczone w <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>strefy.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>Właściwość zapewnia przyjazną nazwę dla punktu połączenia, które mogą być wyświetlane w interfejsie użytkownika, aby ułatwić użytkownikom tworzących połączenia.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>Właściwość służy jako identyfikator ciągu dla samego obiektu punktu połączenia.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>Właściwość wskazuje rozumie, jakiego rodzaju wystąpienie interfejsu punktu połączenia.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> Określa, czy podany punkt połączenia udostępnia lub wykorzystuje wystąpienie interfejsu jest określany przez czy jest <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>lub <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>obiektu.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       Klasa Element ConnectionPoint ma jedną metodę. <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>Metoda zwraca wartość logiczną wskazującą, czy punkt połączenia jest obecnie mogą brać udział w połączeniach.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>       Klasa Element ConnectionPoint również ma jedno pole publiczne <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> To pole zawiera wartość używana do identyfikacji domyślnego punktu połączenia w połączeniu.      > [!NOTE] > Atrybuty do określenia punktu połączenia metody mają tylko jeden wymagany parametr `displayName`, dzięki czemu można tworzyć domyślny atrybut punktu połączenia bez określania identyfikatora. W takich przypadkach <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>pola dostarcza wartości podstawowej do użycia.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>"
  example:
  - "The following code example demonstrates the creation of a Web Parts connection that includes the required ConnectionPoint objects. Because the ConnectionPoint class is an abstract base class, instances of its child classes--<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>--are the actual objects used to form a connection.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_73_1.ascx)]\n [!code-vb[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_73_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. Its `ProvideIZipCode` method is the callback method that implements the interface's only member. The method simply returns an instance of the interface. Note that the method is marked with a `ConnectionProvider` attribute in its metadata. This is the mechanism for identifying the method as the callback method for the provider's connection point. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_73_2.vb)]\n [!code-cs[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_73_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the `<staticconnections>` element on the page. You can also create the connection programmatically; the code for doing that is contained in the `Button1_Click` method. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The `Button2_Click` method accesses the ConnectionPoint objects for both the provider and the consumer, and writes some of their property values to a label in the page.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_73_3.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_73_3.aspx)]  \n  \n After you load the page in a browser, click the **Connection Point Details** button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the **Display Mode** drop-down control to switch the page into connect mode. On the verbs menu of one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page. Click the **Disconnect** button to terminate the existing connection. Use the **Display Mode** control to return the page to browse mode. Next, click the **Dynamic Connection** button to create a connection programmatically. Click the **Connection Point Details** button again, to indicate details about the two connection point objects."
  syntax:
    content: public abstract class ConnectionPoint
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  id: AllowsMultipleConnections
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: AllowsMultipleConnections
  nameWithType: ConnectionPoint.AllowsMultipleConnections
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Pobiera wartość wskazującą, czy punkt połączenia obsługuje wiele równoczesnych połączeń."
  remarks: "<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>obiekty mają ich AllowsMultipleConnections wartość ustawioną dla właściwości `true` (przez <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>klasy), ponieważ formant części sieci Web, domyślnie umożliwia punkty połączenia dostawcy do połączeń formularza do wielu klientów.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute></xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       Z kolei <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>obiekty mają ustawione na wartość właściwości AllowsMultipleConnections `false` (przez <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>klasy), ponieważ formant części sieci Web, domyślnie umożliwia połączenia klienta punktów, aby nawiązać połączenie z tylko jednego dostawcę naraz.</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       Można zmienić domyślne zachowanie dotyczące wielu połączeń, przypisując różne wartości do <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A?displayProperty=fullName>Właściwości (dla dostawców) lub <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A?displayProperty=fullName>Właściwości (dla użytkowników) w dwóch <xref:System.Attribute>klasy służące do połączeń atrybuty.</xref:System.Attribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A?displayProperty=fullName> </xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A?displayProperty=fullName> Po włączeniu punkty połączenia klienta do nawiązania połączenia wielu dostawców na tym samym czasie kodu musi uwzględniać wynikowy problemów z synchronizacją."
  example:
  - "The following code example demonstrates the use of the AllowsMultipleConnections property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the AllowsMultipleConnections property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1358_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1358_1.aspx)]"
  syntax:
    content: public bool AllowsMultipleConnections { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli punkt połączenia obsługuje wiele połączeń; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  id: ControlType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: ControlType
  nameWithType: ConnectionPoint.ControlType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Pobiera <xref:System.Type>formantu serwera, z którym jest skojarzona punktu połączenia.</xref:System.Type>"
  remarks: "Wartość właściwości ControlType jest często <xref:System.Web.UI.WebControls.WebParts.WebPart>typu.</xref:System.Web.UI.WebControls.WebParts.WebPart> Jednak ponieważ dowolnego typu kontrolki użytkownika lub kontrolki serwera mogą uczestniczyć w połączenia, jeśli została prawidłowo włączona i umieszczone w <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>strefy, właściwość ControlType można przywrócić jedną z innych serwera kontroli rodzaju również.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>       Gdy serwer kontroluje, które nie są <xref:System.Web.UI.WebControls.WebParts.WebPart>formanty są umieszczane w <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>strefy, ich są ujęte w <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>obiektu w czasie wykonywania, mogą stanowić <xref:System.Web.UI.WebControls.WebParts.WebPart>steruje i brać udział w połączeniach.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> Ale w przypadku takich kontroli w połączeniach nie zwraca wartości właściwości ControlType <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>Wpisz; zwraca typ <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>formant podrzędny obiektu, który jest typem formantu serwera lub użytkownika.</xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart>"
  example:
  - "The following code example demonstrates the use of the ControlType property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the ControlType property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_622_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_622_1.aspx)]"
  syntax:
    content: public Type ControlType { get; }
    return:
      type: System.Type
      description: "A <xref:System.Type>reprezentujący typu formantu.</xref:System.Type>"
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  id: DefaultID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: DefaultID
  nameWithType: ConnectionPoint.DefaultID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  type: Field
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Reprezentuje ciąg używany do identyfikowania punktu połączenia domyślne w kolekcji punktów połączenia skojarzony z formantem serwera."
  remarks: "Po utworzeniu punktu połączenia jest możliwe określenie Identyfikatora punktu połączenia w kodzie źródłowym konsumenta lub dostawcy <xref:System.Web.UI.WebControls.WebParts.WebPart>kontrolować za pomocą <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>lub <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>atrybutu.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> </xref:System.Web.UI.WebControls.WebParts.WebPart> Jednak po dodaniu atrybutu do punktu połączenia w kodzie źródłowym `ID` parametr jest opcjonalny. Jeśli identyfikator nie jest określony w atrybucie, DefaultID pole zawiera ciąg, który służy do identyfikowania domyślnego punktu połączenia.       Jeśli wiele punktów połączenia są zdefiniowane w formancie użytkownika lub dostawcy, należy określić identyfikator dla każdego punktu połączenia, aby punkty połączenia można rozróżnić podczas tworzenia połączenia."
  syntax:
    content: public static readonly string DefaultID;
    return:
      type: System.String
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  id: DisplayName
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: DisplayName
  nameWithType: ConnectionPoint.DisplayName
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Pobiera ciąg, który służy jako przyjazną nazwę wyświetlaną reprezentuje punkt połączenia w interfejsie użytkownika (UI)."
  remarks: "Aby utworzyć połączenie części sieci Web, kontrolek dostawcy i klienta dla połączenia każdego określić co najmniej jedno połączenie punkt, metodę, która umożliwia im komunikację i udostępnianie danych. Aby zidentyfikować te metody punktu połączenia, Projektant Określa atrybut na wybrane metody zostaną usunięte. W dostawcy `ConnectionProvider` atrybut jest ustawiony na metodę wywołania zwrotnego wybrany, a w konsumenta, `ConnectionConsumer` atrybut jest ustawiony na metodę, która otrzymuje wystąpienie interfejsu, który zawiera dane od dostawcy. W przypadku obu tych atrybutów jest jeden parametr, który jest zawsze wymagane niezależnie od tego, które przeładowanie jest zadeklarowana, aby utworzyć atrybutu, `displayName` parametru. Deweloper musi przypisać ciąg ma być używany jako przyjazną nazwę wyświetlaną dla punktu połączenia, a ten ciąg staje się wartość właściwości Nazwa wyświetlana.       Wartość właściwości DisplayName jest wyświetlana w Interfejsie użytkownika strony sieci Web, podczas tworzenia połączenia. Na przykład, jeśli <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>formant został dodany do strony, tworzy interfejsu użytkownika dla użytkowników w celu utworzenia połączenia między formantami.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Po użytkownik zmienia stronę w trybie wyświetlania connect i kliknie zlecenie connect <xref:System.Web.UI.WebControls.WebParts.WebPart>kontrolować, połączenie zostanie wyświetlony interfejs użytkownika.</xref:System.Web.UI.WebControls.WebParts.WebPart> Każdej kontrolki, które mogą uczestniczyć w połączeniu znajduje się w interfejsie użytkownika, a obok każdej kontrolki jest kontrolkę listy rozwijanej, która wyświetla przyjaznych nazw jego dostępnych punktów połączenia. Użytkownicy muszą zaznaczyć co najmniej jedno połączenie punkt ustanowić połączenie. Wartości, które znajdują się na liście punktów połączenia są uzyskiwane z Właściwość DisplayName. Jeśli deweloperom tworzenie niestandardowego interfejsu użytkownika dla tworzenia połączeń, Właściwość DisplayName może użyć w podobny sposób jak Podaj przyjazną nazwę, która reprezentuje punktu połączenia."
  syntax:
    content: public string DisplayName { get; }
    return:
      type: System.String
      description: "Ciąg, który zawiera przyjazną nazwę wyświetlaną dla <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionPoint&quot;> </xref> obiektu."
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  id: GetEnabled(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: GetEnabled(Control)
  nameWithType: ConnectionPoint.GetEnabled(Control)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Zwraca wartość wskazującą, czy punkt połączenia mogą brać udział w połączeniach."
  remarks: "Metoda GetEnabled w podstawowym <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>klasy zawsze zwraca `true`, ale klasy pochodne mogą zastąpić metodę, aby zwrócić `true` lub `false` w różnym czasie, na podstawie stanu `control`.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>"
  example:
  - "The following code example demonstrates the use of the GetEnabled method on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the GetEnabled method on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/a42b3e8f-70fc-455c-a13a-_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/a42b3e8f-70fc-455c-a13a-_1.aspx)]"
  syntax:
    content: public virtual bool GetEnabled (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> lub innych formantu serwera, który jest skojarzony z punktu połączenia."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli formant można utworzyć punktu połączenia do udziału w przypadku połączenia; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  id: ID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: ID
  nameWithType: ConnectionPoint.ID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Pobiera ciąg, który zawiera identyfikator punktu połączenia."
  remarks: "Gdy deklaruje dewelopera <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>lub <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>atrybutu dla metody w kodzie źródłowym formantu, aby metody można użyć jako punkt połączenia, nie jest wymagane do deklarowania `ID` parametr dla atrybutu punktu połączenia.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> Tylko wymaganego atrybutu `displayName` parametru. Domyślny identyfikator jest przypisany do punktu połączenia przy użyciu wartości <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>pola.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       Jeśli istnieje tylko jedna metoda w formancie używany jako punkt połączenia, nie trzeba określić identyfikator punktu połączenia. Jeśli istnieje wiele metod określony jako punkty połączenia, należy określić identyfikator dla każdej z nich; w przeciwnym razie zostanie wygenerowany wyjątek. Przypisując identyfikator do każdego punktu połączenia, należy również umożliwić Określ, którego punktu połączenia do użycia podczas zadeklarować połączeń na stronach sieci Web lub utworzyć je w kodzie."
  example:
  - "The following code example demonstrates the use of the ID property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the ID property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1125_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1125_1.aspx)]"
  syntax:
    content: public string ID { get; }
    return:
      type: System.String
      description: "Ciąg, który zawiera identyfikator punktu połączenia."
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  id: InterfaceType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: InterfaceType
  nameWithType: ConnectionPoint.InterfaceType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Pobiera typ interfejsu używanego przez punkt połączenia."
  remarks: "Właściwość InterfaceType wskazuje, jakiego rodzaju interfejsu korzysta z punktu połączenia. Może to ułatwić ustalenie, czy dwa formanty są zgodne i może się komunikować. Jeśli punkt połączenia dostawcy InterfaceType różni się od InterfaceType punkt połączenia klienta, a następnie dwa formanty są niezgodne (co oznacza, że nie można bezpośrednio połączone bez transformatora), a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>obiektu musi być używany do nawiązania połączenia.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>"
  example:
  - "The following code example demonstrates the use of the InterfaceType property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the InterfaceType property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_359_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_359_1.aspx)]"
  syntax:
    content: public Type InterfaceType { get; }
    return:
      type: System.Type
      description: "A <xref:System.Type>, który odpowiada typowi interfejsu dostarczona lub zużyte przez formant.</xref:System.Type>"
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: AllowsMultipleConnections
  nameWithType: ConnectionPoint.AllowsMultipleConnections
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ControlType
  nameWithType: ConnectionPoint.ControlType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: DefaultID
  nameWithType: ConnectionPoint.DefaultID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: DisplayName
  nameWithType: ConnectionPoint.DisplayName
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: GetEnabled(Control)
  nameWithType: ConnectionPoint.GetEnabled(Control)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(Control)
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ID
  nameWithType: ConnectionPoint.ID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: InterfaceType
  nameWithType: ConnectionPoint.InterfaceType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: AllowsMultipleConnections
  nameWithType: ConnectionPoint.AllowsMultipleConnections
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ControlType
  nameWithType: ConnectionPoint.ControlType
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: DisplayName
  nameWithType: ConnectionPoint.DisplayName
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: GetEnabled
  nameWithType: ConnectionPoint.GetEnabled
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ID
  nameWithType: ConnectionPoint.ID
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: InterfaceType
  nameWithType: ConnectionPoint.InterfaceType
