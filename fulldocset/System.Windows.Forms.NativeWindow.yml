### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.NativeWindow
  id: NativeWindow
  children:
  - System.Windows.Forms.NativeWindow.#ctor
  - System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)
  - System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)
  - System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)
  - System.Windows.Forms.NativeWindow.DestroyHandle
  - System.Windows.Forms.NativeWindow.Finalize
  - System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)
  - System.Windows.Forms.NativeWindow.Handle
  - System.Windows.Forms.NativeWindow.OnHandleChange
  - System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)
  - System.Windows.Forms.NativeWindow.ReleaseHandle
  - System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)
  langs:
  - csharp
  name: NativeWindow
  nameWithType: NativeWindow
  fullName: System.Windows.Forms.NativeWindow
  type: Class
  summary: "Niskiego poziomu hermetyzację uchwyt okna i procedurę okna."
  remarks: "Ta klasa automatycznie zarządza Tworzenie klasy okien i rejestracji.       Okno nie jest uprawniony do wyrzucanie elementów bezużytecznych, gdy jest on skojarzony z uchwytu okna. W celu zapewnienia prawidłowego wyrzucanie elementów bezużytecznych, uchwytów musi albo zostać zniszczone ręcznie przy użyciu <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>lub przy użyciu <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> </xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>      > [!NOTE] > <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>Metoda jest wywoływana podczas przetwarzania wiadomości WM_NCDESTROY.</xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> Oznacza to, istnieją przypadki, w których gdy jest konieczne ręczne wywołać <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, ale dobrym rozwiązaniem, które można wykonać operacji jest</xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>       Klasa NativeWindow udostępnia poniższe właściwości i metod do zarządzania uchwytów: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>i <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> </xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> </xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> </xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> </xref:System.Windows.Forms.NativeWindow.Handle%2A>"
  example:
  - "The following code example demonstrates intercepting operating system window messages in a window procedure, and creating a window with a specific operating system window class name. The example creates two classes that inherit from NativeWindow that accomplish this.  \n  \n The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept the `WM_ACTIVATEAPP` window message. The class demonstrates the usage of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the NativeWindow will use. The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> events. When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1``ApplicationActivated` method.  \n  \n The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`. The class demonstrates using the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and overriding the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.  \n  \n [!code-cpp[NativeWindow#1](~/add/codesnippet/cpp/t-system.windows.forms.n_0_1.cpp)]\n [!code-cs[NativeWindow#1](~/add/codesnippet/csharp/t-system.windows.forms.n_0_1.cs)]\n [!code-vb[NativeWindow#1](~/add/codesnippet/visualbasic/t-system.windows.forms.n_0_1.vb)]"
  syntax:
    content: 'public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.Windows.Forms.IWin32Window
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.#ctor
  id: '#ctor'
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: NativeWindow()
  nameWithType: NativeWindow.NativeWindow()
  fullName: System.Windows.Forms.NativeWindow.NativeWindow()
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Inicjuje wystąpienie klasy <xref href=&quot;System.Windows.Forms.NativeWindow&quot;> </xref> klasy."
  remarks: "Jest to domyślny konstruktor NativeWindow dostarczonych przez kompilator. <xref:System.Windows.Forms.NativeWindow>Klasa ma również statycznego konstruktora, który inicjuje programy obsługi wiadomości w całej domenie aplikacji i tabele hash.</xref:System.Windows.Forms.NativeWindow>"
  syntax:
    content: public NativeWindow ();
    parameters: []
  overload: System.Windows.Forms.NativeWindow.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)
  id: AssignHandle(System.IntPtr)
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: AssignHandle(IntPtr)
  nameWithType: NativeWindow.AssignHandle(IntPtr)
  fullName: System.Windows.Forms.NativeWindow.AssignHandle(IntPtr)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Przypisuje dojścia do tego okna."
  remarks: "<xref:System.Windows.Forms.NativeWindow.WndProc%2A>przechwytuje okna komunikatów wysyłanych do `handle` parametru.</xref:System.Windows.Forms.NativeWindow.WndProc%2A> Użyj <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>Aby przywrócić domyślną procedurę okna procedurę okna uchwytu.</xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>       Wywołania metody AssignHandle <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>metody w celu wskazania, że wartość <xref:System.Windows.Forms.NativeWindow.Handle%2A>właściwość zostanie zmieniona.</xref:System.Windows.Forms.NativeWindow.Handle%2A> </xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>      > [!NOTE] > Dojścia do przypisania nie może być w procesie inną aplikację."
  example:
  - "The following code example demonstrates intercepting operating system window messages in a window procedure. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.  \n  \n The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message. The class demonstrates the use of the AssignHandle and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify which window handle the <xref:System.Windows.Forms.NativeWindow> will use. The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> events. When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1``ApplicationActivated` method.  \n  \n This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.  \n  \n [!code-cpp[NativeWindow#2](~/add/codesnippet/cpp/m-system.windows.forms.n_4_1.cpp)]\n [!code-cs[NativeWindow#2](~/add/codesnippet/csharp/m-system.windows.forms.n_4_1.cs)]\n [!code-vb[NativeWindow#2](~/add/codesnippet/visualbasic/m-system.windows.forms.n_4_1.vb)]"
  syntax:
    content: public void AssignHandle (IntPtr handle);
    parameters:
    - id: handle
      type: System.IntPtr
      description: "Dojście do przypisania do tego okna."
  overload: System.Windows.Forms.NativeWindow.AssignHandle*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "To okno ma już dojścia."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Nie można pobrać procedury windows skojarzone okna macierzystego."
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)
  id: CreateHandle(System.Windows.Forms.CreateParams)
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: CreateHandle(CreateParams)
  nameWithType: NativeWindow.CreateHandle(CreateParams)
  fullName: System.Windows.Forms.NativeWindow.CreateHandle(CreateParams)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Tworzy i uchwytu okna z parametrami tworzenia określony."
  remarks: "`cp` Parametr określa wartości, które są przekazywane do natywnej Win32 `CreateWindowEx` metodę w celu utworzenia i uchwytu okna.       Gdy <xref:System.Windows.Forms.CreateParams.ClassName%2A>pole nie jest `null`, dziedziczy uchwytu okna nowo utworzonej z określonej klasy.</xref:System.Windows.Forms.CreateParams.ClassName%2A> Na przykład jeśli <xref:System.Windows.Forms.CreateParams.ClassName%2A>ma ustawioną wartość `BUTTON`, nowo utworzony okna jest oparta na Win32 `BUTTON` klasy okna</xref:System.Windows.Forms.CreateParams.ClassName%2A> <xref:System.Windows.Forms.CreateParams.Param%2A>Właściwość <xref:System.Windows.Forms.CreateParams.ClassName%2A>obiektu musi być `null` lub odwołania do wystąpienia klasy, która została zadeklarowana jako struktura.</xref:System.Windows.Forms.CreateParams.ClassName%2A> </xref:System.Windows.Forms.CreateParams.Param%2A>       Ten kod jest fragment przykład pokazany na <xref:System.Windows.Forms.NativeWindow>Przegląd klasy.</xref:System.Windows.Forms.NativeWindow> Kod nie jest wyświetlana wyłącznie w celu skrócenia. Zobacz <xref:System.Windows.Forms.NativeWindow>listę całego kodu.</xref:System.Windows.Forms.NativeWindow>      > [!NOTE] > Podana nazwa klasy jest zarejestrowany w systemie operacyjnym."
  example:
  - "The following code example demonstrates creating a window with a specific operating system window class name. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.  \n  \n The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`. This creates a Win32 button window. The location and size of the button is set, along with specifying additional window styles. The class demonstrates how to use the CreateHandle method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received. Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.  \n  \n> [!NOTE]\n>  Some control types send their window messages to the window parent instead of the window. See the Windows Platform SDK for more information.  \n  \n [!code-cpp[NativeWindow#3](~/add/codesnippet/cpp/4bc4c996-2177-4901-b43d-_1.cpp)]\n [!code-cs[NativeWindow#3](~/add/codesnippet/csharp/4bc4c996-2177-4901-b43d-_1.cs)]\n [!code-vb[NativeWindow#3](~/add/codesnippet/visualbasic/4bc4c996-2177-4901-b43d-_1.vb)]"
  syntax:
    content: public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);
    parameters:
    - id: cp
      type: System.Windows.Forms.CreateParams
      description: "A <xref href=&quot;System.Windows.Forms.CreateParams&quot;> </xref> , który określa parametry tworzenia dla tego okna."
  overload: System.Windows.Forms.NativeWindow.CreateHandle*
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Podczas próby utworzenia okna natywnego systemu operacyjnego za mało zasobów."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Natywnego interfejsu API Win32 nie może utworzyć określone okno."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Dojście bieżące okno natywnych jest już przypisany; w wyjaśnienie <xref:System.Windows.Forms.NativeWindow.Handle*>właściwość jest nie jest równa <xref:System.IntPtr.Zero>.</xref:System.IntPtr.Zero> </xref:System.Windows.Forms.NativeWindow.Handle*>"
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)
  id: DefWndProc(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: DefWndProc(Message)
  nameWithType: NativeWindow.DefWndProc(Message)
  fullName: System.Windows.Forms.NativeWindow.DefWndProc(Message)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Wywołuje domyślną procedurę okna skojarzone z tego okna."
  remarks: "Zazwyczaj można wywoływać tylko metody DefWndProc są przechwytywaniu komunikatów okien i chcesz domyślną procedurę okna, by obsłużyć komunikat. Nie należy wywoływać DefWndProc do wysyłania komunikatów okien do okna; wywołanie Win32 `SendMessage` zamiast tego działania.       Błąd do wywołania DefWndProc podczas <xref:System.Windows.Forms.NativeWindow.Handle%2A>Właściwości jest równa 0.</xref:System.Windows.Forms.NativeWindow.Handle%2A>"
  syntax:
    content: public void DefWndProc (ref System.Windows.Forms.Message m);
    parameters:
    - id: m
      type: System.Windows.Forms.Message
      description: "Komunikat, który jest obecnie przetwarzane."
  overload: System.Windows.Forms.NativeWindow.DefWndProc*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.DestroyHandle
  id: DestroyHandle
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: DestroyHandle()
  nameWithType: NativeWindow.DestroyHandle()
  fullName: System.Windows.Forms.NativeWindow.DestroyHandle()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Niszczy okno i uchwytu."
  remarks: "Ta metoda niszczy okno skojarzone z <xref:System.Windows.Forms.NativeWindow.Handle%2A>, ustawia <xref:System.Windows.Forms.NativeWindow.Handle%2A>właściwości 0 i wywołania <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>metody w celu odzwierciedlenia zmian.</xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> </xref:System.Windows.Forms.NativeWindow.Handle%2A> </xref:System.Windows.Forms.NativeWindow.Handle%2A> Zazwyczaj można wywołać tylko DestroyHandle po zakończeniu okna macierzystego.      > [!NOTE] > <xref:System.Windows.Forms.NativeWindow>Klasy automatycznie będzie usunięcie skojarzone okna i wersji swoich zasobów w odpowiedzi na wiadomość WM_DESTROY.</xref:System.Windows.Forms.NativeWindow>"
  syntax:
    content: public virtual void DestroyHandle ();
    parameters: []
  overload: System.Windows.Forms.NativeWindow.DestroyHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.Finalize
  id: Finalize
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: Finalize()
  nameWithType: NativeWindow.Finalize()
  fullName: System.Windows.Forms.NativeWindow.Finalize()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Zwalnia zasoby skojarzone z tego okna."
  remarks: "Metody Finalize usuwa klasy pochodnej Win32 skojarzone z bieżącym <xref:System.Windows.Forms.NativeWindow>wystąpienia, zwalnia dojście i zapisuje komunikat WM_CLOSE do okna skojarzone.</xref:System.Windows.Forms.NativeWindow>"
  syntax:
    content: ~NativeWindow ();
    parameters: []
  overload: System.Windows.Forms.NativeWindow.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)
  id: FromHandle(System.IntPtr)
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: FromHandle(IntPtr)
  nameWithType: NativeWindow.FromHandle(IntPtr)
  fullName: System.Windows.Forms.NativeWindow.FromHandle(IntPtr)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Pobiera skojarzone z określonego dojścia okna."
  remarks: "Jeśli zostanie wyświetlony uchwyt z innej metody, ta metoda umożliwia pobieranie skojarzono uchwyt okna. Dojście już musi należeć do żadnego innego <xref:System.Windows.Forms.NativeWindow>w bieżącym procesu; w przeciwnym razie `null` jest zwracana.</xref:System.Windows.Forms.NativeWindow>"
  syntax:
    content: public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);
    parameters:
    - id: handle
      type: System.IntPtr
      description: "Dojście do okna."
    return:
      type: System.Windows.Forms.NativeWindow
      description: "<xref href=&quot;System.Windows.Forms.NativeWindow&quot;> </xref> Skojarzone z określonego dojścia. Ta metoda zwraca <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> gdy dojście nie ma odpowiedniego okna."
  overload: System.Windows.Forms.NativeWindow.FromHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.Handle
  id: Handle
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: Handle
  nameWithType: NativeWindow.Handle
  fullName: System.Windows.Forms.NativeWindow.Handle
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Pobiera dojście dla tego okna."
  remarks: "Użyj tej metody, podczas wywoływania metody interfejsu API systemu Windows, które wymagają uchwyt okna lub kontrolki."
  example:
  - "The following code example demonstrates creating a window with a specific operating system window class name. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this. The example also demonstrates overriding the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to be notified when the Handle changes.  \n  \n The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to BUTTON. This creates a Win32 button window. The location and size of the button is set, along with specifying additional window styles. The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received. Although the example looks for the WM_ACTIVATEAPP message, this could be replaced in a real program with window messages specific to the type created.  \n  \n> [!NOTE]\n>  Some control types send their window messages to the window parent instead of the window. See the Windows Platform SDK for more information.  \n  \n [!code-cpp[NativeWindow#3](~/add/codesnippet/cpp/p-system.windows.forms.n_14_1.cpp)]\n [!code-cs[NativeWindow#3](~/add/codesnippet/csharp/p-system.windows.forms.n_14_1.cs)]\n [!code-vb[NativeWindow#3](~/add/codesnippet/visualbasic/p-system.windows.forms.n_14_1.vb)]"
  syntax:
    content: public IntPtr Handle { get; }
    return:
      type: System.IntPtr
      description: "W przypadku powodzenia <xref:System.IntPtr>reprezentujący dojście do skojarzonego natywnego okna Win32; w przeciwnym razie wartość 0, jeśli dojście nie jest skojarzony z oknem.</xref:System.IntPtr>"
  overload: System.Windows.Forms.NativeWindow.Handle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.OnHandleChange
  id: OnHandleChange
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: OnHandleChange()
  nameWithType: NativeWindow.OnHandleChange()
  fullName: System.Windows.Forms.NativeWindow.OnHandleChange()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Określa metodę powiadomień, która jest wywoływana, gdy uchwyt okna zostanie zmieniona."
  remarks: "Ta metoda jest wywoływana po wartości <xref:System.Windows.Forms.NativeWindow.Handle%2A>właściwość zostanie zmieniona.</xref:System.Windows.Forms.NativeWindow.Handle%2A>"
  example:
  - "The following code example demonstrates creating a window with a specific operating system window class name. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this. The example also demonstrates overriding the OnHandleChange method to be notified when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> changes.  \n  \n The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`. This creates a Win32 button window. The location and size of the button is set, along with specifying additional window styles. The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received. Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.  \n  \n This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.  \n  \n> [!NOTE]\n>  Some control types send their window messages to the window parent instead of the window. See the Windows Platform SDK for more information.  \n  \n [!code-cpp[NativeWindow#3](~/add/codesnippet/cpp/m-system.windows.forms.n_1_1.cpp)]\n [!code-cs[NativeWindow#3](~/add/codesnippet/csharp/m-system.windows.forms.n_1_1.cs)]\n [!code-vb[NativeWindow#3](~/add/codesnippet/visualbasic/m-system.windows.forms.n_1_1.vb)]"
  syntax:
    content: protected virtual void OnHandleChange ();
    parameters: []
  overload: System.Windows.Forms.NativeWindow.OnHandleChange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)
  id: OnThreadException(System.Exception)
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: OnThreadException(Exception)
  nameWithType: NativeWindow.OnThreadException(Exception)
  fullName: System.Windows.Forms.NativeWindow.OnThreadException(Exception)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "W przypadku przesłonięcia w klasie pochodnej, zarządza wątku nieobsługiwany wyjątek."
  remarks: "Zazwyczaj <xref:System.Windows.Forms.Application.OnThreadException%2A>dojść wątku wyjątki.</xref:System.Windows.Forms.Application.OnThreadException%2A>"
  syntax:
    content: protected virtual void OnThreadException (Exception e);
    parameters:
    - id: e
      type: System.Exception
      description: "<xref:System.Exception>Wątku nieobsługiwany wyjątek, który określa.</xref:System.Exception>"
  overload: System.Windows.Forms.NativeWindow.OnThreadException*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.ReleaseHandle
  id: ReleaseHandle
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: ReleaseHandle()
  nameWithType: NativeWindow.ReleaseHandle()
  fullName: System.Windows.Forms.NativeWindow.ReleaseHandle()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Zwalnia dojście skojarzone z tego okna."
  remarks: "Ta metoda nie niszczy uchwytu okna. Zamiast tego ustawia procedurę okna uchwytu domyślną procedurę okna. Ustawia <xref:System.Windows.Forms.NativeWindow.Handle%2A>właściwości 0 i wywołania <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>celu odzwierciedlenia zmian.</xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> </xref:System.Windows.Forms.NativeWindow.Handle%2A>       Okno automatycznie wywołuje tę metodę, gdy odbierze wiadomość natywnego Win32 WM_NCDESTROY, wskazującą, czy system Windows ma zniszczone dojście."
  example:
  - "The following code example demonstrates intercepting operating system window messages in a window procedure. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.  \n  \n The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message. The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and ReleaseHandle methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use. The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> events. When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1``ApplicationActivated` method.  \n  \n This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.  \n  \n [!code-cpp[NativeWindow#2](~/add/codesnippet/cpp/m-system.windows.forms.n_0_1.cpp)]\n [!code-cs[NativeWindow#2](~/add/codesnippet/csharp/m-system.windows.forms.n_0_1.cs)]\n [!code-vb[NativeWindow#2](~/add/codesnippet/visualbasic/m-system.windows.forms.n_0_1.vb)]"
  syntax:
    content: public virtual void ReleaseHandle ();
    parameters: []
  overload: System.Windows.Forms.NativeWindow.ReleaseHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)
  id: WndProc(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: WndProc(Message)
  nameWithType: NativeWindow.WndProc(Message)
  fullName: System.Windows.Forms.NativeWindow.WndProc(Message)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Wywołuje domyślną procedurę okna skojarzone z tego okna."
  remarks: "Ta metoda jest wywoływana podczas wysyłania komunikatów okien do uchwytu okna."
  example:
  - "The following code example demonstrates intercepting operating system window messages in a window procedure. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.  \n  \n The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the WndProc method to intercept the `WM_ACTIVATEAPP` window message. The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use. The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> events. When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1``ApplicationActivated` method.  \n  \n This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.  \n  \n [!code-cpp[NativeWindow#2](~/add/codesnippet/cpp/m-system.windows.forms.n_3_1.cpp)]\n [!code-cs[NativeWindow#2](~/add/codesnippet/csharp/m-system.windows.forms.n_3_1.cs)]\n [!code-vb[NativeWindow#2](~/add/codesnippet/visualbasic/m-system.windows.forms.n_3_1.vb)]"
  syntax:
    content: protected virtual void WndProc (ref System.Windows.Forms.Message m);
    parameters:
    - id: m
      type: System.Windows.Forms.Message
      description: "A <xref href=&quot;System.Windows.Forms.Message&quot;> </xref> skojarzonego z bieżącego komunikatu systemu Windows."
  overload: System.Windows.Forms.NativeWindow.WndProc*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.ComponentModel.Win32Exception
  parent: System.ComponentModel
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.Forms.NativeWindow.#ctor
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: NativeWindow()
  nameWithType: NativeWindow.NativeWindow()
  fullName: System.Windows.Forms.NativeWindow.NativeWindow()
- uid: System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: AssignHandle(IntPtr)
  nameWithType: NativeWindow.AssignHandle(IntPtr)
  fullName: System.Windows.Forms.NativeWindow.AssignHandle(IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: CreateHandle(CreateParams)
  nameWithType: NativeWindow.CreateHandle(CreateParams)
  fullName: System.Windows.Forms.NativeWindow.CreateHandle(CreateParams)
- uid: System.Windows.Forms.CreateParams
  parent: System.Windows.Forms
  isExternal: false
  name: CreateParams
  nameWithType: CreateParams
  fullName: System.Windows.Forms.CreateParams
- uid: System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: DefWndProc(Message)
  nameWithType: NativeWindow.DefWndProc(Message)
  fullName: System.Windows.Forms.NativeWindow.DefWndProc(Message)
- uid: System.Windows.Forms.Message
  parent: System.Windows.Forms
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: System.Windows.Forms.Message
- uid: System.Windows.Forms.NativeWindow.DestroyHandle
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: DestroyHandle()
  nameWithType: NativeWindow.DestroyHandle()
  fullName: System.Windows.Forms.NativeWindow.DestroyHandle()
- uid: System.Windows.Forms.NativeWindow.Finalize
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: Finalize()
  nameWithType: NativeWindow.Finalize()
  fullName: System.Windows.Forms.NativeWindow.Finalize()
- uid: System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: FromHandle(IntPtr)
  nameWithType: NativeWindow.FromHandle(IntPtr)
  fullName: System.Windows.Forms.NativeWindow.FromHandle(IntPtr)
- uid: System.Windows.Forms.NativeWindow
  parent: System.Windows.Forms
  isExternal: false
  name: NativeWindow
  nameWithType: NativeWindow
  fullName: System.Windows.Forms.NativeWindow
- uid: System.Windows.Forms.NativeWindow.Handle
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: Handle
  nameWithType: NativeWindow.Handle
  fullName: System.Windows.Forms.NativeWindow.Handle
- uid: System.Windows.Forms.NativeWindow.OnHandleChange
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: OnHandleChange()
  nameWithType: NativeWindow.OnHandleChange()
  fullName: System.Windows.Forms.NativeWindow.OnHandleChange()
- uid: System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: OnThreadException(Exception)
  nameWithType: NativeWindow.OnThreadException(Exception)
  fullName: System.Windows.Forms.NativeWindow.OnThreadException(Exception)
- uid: System.Windows.Forms.NativeWindow.ReleaseHandle
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: ReleaseHandle()
  nameWithType: NativeWindow.ReleaseHandle()
  fullName: System.Windows.Forms.NativeWindow.ReleaseHandle()
- uid: System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: WndProc(Message)
  nameWithType: NativeWindow.WndProc(Message)
  fullName: System.Windows.Forms.NativeWindow.WndProc(Message)
- uid: System.Windows.Forms.NativeWindow.#ctor*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: NativeWindow
  nameWithType: NativeWindow.NativeWindow
- uid: System.Windows.Forms.NativeWindow.AssignHandle*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: AssignHandle
  nameWithType: NativeWindow.AssignHandle
- uid: System.Windows.Forms.NativeWindow.CreateHandle*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: CreateHandle
  nameWithType: NativeWindow.CreateHandle
- uid: System.Windows.Forms.NativeWindow.DefWndProc*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: DefWndProc
  nameWithType: NativeWindow.DefWndProc
- uid: System.Windows.Forms.NativeWindow.DestroyHandle*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: DestroyHandle
  nameWithType: NativeWindow.DestroyHandle
- uid: System.Windows.Forms.NativeWindow.Finalize*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: Finalize
  nameWithType: NativeWindow.Finalize
- uid: System.Windows.Forms.NativeWindow.FromHandle*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: FromHandle
  nameWithType: NativeWindow.FromHandle
- uid: System.Windows.Forms.NativeWindow.Handle*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: Handle
  nameWithType: NativeWindow.Handle
- uid: System.Windows.Forms.NativeWindow.OnHandleChange*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: OnHandleChange
  nameWithType: NativeWindow.OnHandleChange
- uid: System.Windows.Forms.NativeWindow.OnThreadException*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: OnThreadException
  nameWithType: NativeWindow.OnThreadException
- uid: System.Windows.Forms.NativeWindow.ReleaseHandle*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: ReleaseHandle
  nameWithType: NativeWindow.ReleaseHandle
- uid: System.Windows.Forms.NativeWindow.WndProc*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: WndProc
  nameWithType: NativeWindow.WndProc
