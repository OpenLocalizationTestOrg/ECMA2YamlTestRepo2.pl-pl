### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.ITypedList
  id: ITypedList
  children:
  - System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])
  - System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])
  langs:
  - csharp
  name: ITypedList
  nameWithType: ITypedList
  fullName: System.ComponentModel.ITypedList
  type: Interface
  summary: "Udostępnia funkcje odnajdywania schematu można powiązać listę, której właściwości dostępne dla powiązania różnią się od publicznej właściwości do powiązania obiektu."
  remarks: "Użyj tego interfejsu, jeśli na przykład używasz <xref:System.Data.DataView>obiekt, który reprezentuje `customer` tabeli, chcesz powiązać właściwości `customer` obiekt, który <xref:System.Data.DataView>reprezentuje nie właściwości <xref:System.Data.DataView>.</xref:System.Data.DataView> </xref:System.Data.DataView> </xref:System.Data.DataView>       Ten interfejs nie jest wymagana do obsługi czasu projektowania można powiązać listy.       Powiązanie danych może wystąpić w czasie wykonywania, lub za pomocą projektanta, ale istnieją reguły dla obu. W czasie wykonywania można powiązać z danymi w następujących:- <xref:System.Array>-implementujący z <xref:System.Collections.IList>, o ile ma silnie typizowaną implementujący <xref:System.Collections.IList.Item%2A>Właściwości (oznacza to, <xref:System.Type>ma jakąkolwiek inną <xref:System.Object>).</xref:System.Object> </xref:System.Type> </xref:System.Collections.IList.Item%2A> </xref:System.Collections.IList> </xref:System.Array> Można to zrobić przez domyślną implementację elementu <xref:System.Collections.IList.Item%2A>prywatne.</xref:System.Collections.IList.Item%2A> Jeśli chcesz utworzyć <xref:System.Collections.IList>następujący reguły silnie typizowaną kolekcją, powinien pochodzić od <xref:System.Collections.CollectionBase>.</xref:System.Collections.CollectionBase> </xref:System.Collections.IList>      -Implementujący ITypedList.       W projektancie, można zainicjować powiązania <xref:System.ComponentModel.Component>obiektów, wykonując te same zasady stosowania.</xref:System.ComponentModel.Component>       Aby uzyskać więcej informacji dotyczących powiązania ze źródłem danych zobacz <xref:System.Windows.Forms.Binding?displayProperty=fullName>klasy.</xref:System.Windows.Forms.Binding?displayProperty=fullName>"
  example:
  - "The following code example demonstrates how to implement the ITypedList interface. A generic type named `SortableBindingList` derives from the <xref:System.ComponentModel.BindingList%601> class and implements the ITypedList interface. For a full code listing, see [How to: Implement the ITypedList Interface](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.ComponentModel.ITypedList#1](~/add/codesnippet/csharp/t-system.componentmodel._167_1.cs)]\n [!code-vb[System.ComponentModel.ITypedList#1](~/add/codesnippet/visualbasic/t-system.componentmodel._167_1.vb)]"
  syntax:
    content: public interface ITypedList
  implements: []
  platform:
  - net462
- uid: System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])
  id: GetItemProperties(System.ComponentModel.PropertyDescriptor[])
  parent: System.ComponentModel.ITypedList
  langs:
  - csharp
  name: GetItemProperties(PropertyDescriptor[])
  nameWithType: ITypedList.GetItemProperties(PropertyDescriptor[])
  fullName: System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Zwraca <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> reprezentujący właściwości na każdy element używanych do wiązania danych."
  remarks: "Jeśli `listAccessors` parametr nie jest `null`, zwykle zawiera deskryptora właściwości, która identyfikuje listy kontenerów do pobrania dla obiekt, który implementuje <xref:System.ComponentModel.ITypedList>.</xref:System.ComponentModel.ITypedList> Na przykład <xref:System.Data.DataSet>zawierających dwie tabele `myCustomers` i `myOrders`, przy użyciu relacji między nimi o nazwie `myCustOrders`.</xref:System.Data.DataSet> W przypadku utworzenia <xref:System.Data.DataView>obiekt, aby wyświetlić `myCustomers`, wywołując metodę GetItemProperties z `null` zwraca deskryptorów właściwości dla kolumn w `myCustomers`.</xref:System.Data.DataView> W związku z tym jednym deskryptorów właściwości zwracane jest deskryptor właściwości `myCustOrders`, po prostu jako wywołanie metody GetItemProperties tablicą akcesor listę zawierającą deskryptorów właściwości dla `myCustOrders` zwróci deskryptorów właściwości dla `myOrders`."
  example:
  - "The following code example demonstrates how to implement the GetItemProperties method. For a full code listing, see [How to: Implement the ITypedList Interface](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.ComponentModel.ITypedList#3](~/add/codesnippet/csharp/3b46cd55-3314-419e-a8e7-_1.cs)]\n [!code-vb[System.ComponentModel.ITypedList#3](~/add/codesnippet/visualbasic/3b46cd55-3314-419e-a8e7-_1.vb)]"
  syntax:
    content: public System.ComponentModel.PropertyDescriptorCollection GetItemProperties (System.ComponentModel.PropertyDescriptor[] listAccessors);
    parameters:
    - id: listAccessors
      type: System.ComponentModel.PropertyDescriptor[]
      description: "Tablica <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref> obiektów można znaleźć w kolekcji jako możliwej do wiązania. Może to być <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "<xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> Reprezentujący właściwości na każdy element używanych do wiązania danych."
  overload: System.ComponentModel.ITypedList.GetItemProperties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])
  id: GetListName(System.ComponentModel.PropertyDescriptor[])
  parent: System.ComponentModel.ITypedList
  langs:
  - csharp
  name: GetListName(PropertyDescriptor[])
  nameWithType: ITypedList.GetListName(PropertyDescriptor[])
  fullName: System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Zwraca nazwę listy."
  remarks: "Ta metoda jest używana tylko w ramach projektowania i przestarzałe <xref:System.Windows.Forms.DataGrid>kontroli.</xref:System.Windows.Forms.DataGrid>"
  example:
  - "The following code example demonstrates how to implement the GetListName method. For a full code listing, see [How to: Implement the ITypedList Interface](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.ComponentModel.ITypedList#4](~/add/codesnippet/csharp/a1408425-c386-40d6-a339-_1.cs)]\n [!code-vb[System.ComponentModel.ITypedList#4](~/add/codesnippet/visualbasic/a1408425-c386-40d6-a339-_1.vb)]"
  syntax:
    content: public string GetListName (System.ComponentModel.PropertyDescriptor[] listAccessors);
    parameters:
    - id: listAccessors
      type: System.ComponentModel.PropertyDescriptor[]
      description: "Tablica <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref> obiektów, dla których zwracana jest nazwa listy. Może to być <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.String
      description: "Nazwa listy."
  overload: System.ComponentModel.ITypedList.GetListName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])
  parent: System.ComponentModel.ITypedList
  isExternal: false
  name: GetItemProperties(PropertyDescriptor[])
  nameWithType: ITypedList.GetItemProperties(PropertyDescriptor[])
  fullName: System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[])
- uid: System.ComponentModel.PropertyDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptorCollection
  nameWithType: PropertyDescriptorCollection
  fullName: System.ComponentModel.PropertyDescriptorCollection
- uid: System.ComponentModel.PropertyDescriptor[]
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptor
  nameWithType: PropertyDescriptor
  fullName: System.ComponentModel.PropertyDescriptor[]
  spec.csharp:
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    nameWithType: PropertyDescriptor
    fullName: PropertyDescriptor[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])
  parent: System.ComponentModel.ITypedList
  isExternal: false
  name: GetListName(PropertyDescriptor[])
  nameWithType: ITypedList.GetListName(PropertyDescriptor[])
  fullName: System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.ITypedList.GetItemProperties*
  parent: System.ComponentModel.ITypedList
  isExternal: false
  name: GetItemProperties
  nameWithType: ITypedList.GetItemProperties
- uid: System.ComponentModel.ITypedList.GetListName*
  parent: System.ComponentModel.ITypedList
  isExternal: false
  name: GetListName
  nameWithType: ITypedList.GetListName
