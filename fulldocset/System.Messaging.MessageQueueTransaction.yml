### YamlMime:ManagedReference
items:
- uid: System.Messaging.MessageQueueTransaction
  id: MessageQueueTransaction
  children:
  - System.Messaging.MessageQueueTransaction.#ctor
  - System.Messaging.MessageQueueTransaction.Abort
  - System.Messaging.MessageQueueTransaction.Begin
  - System.Messaging.MessageQueueTransaction.Commit
  - System.Messaging.MessageQueueTransaction.Dispose
  - System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)
  - System.Messaging.MessageQueueTransaction.Finalize
  - System.Messaging.MessageQueueTransaction.Status
  langs:
  - csharp
  name: MessageQueueTransaction
  nameWithType: MessageQueueTransaction
  fullName: System.Messaging.MessageQueueTransaction
  type: Class
  summary: "Udostępnia usługi kolejkowania komunikatów transakcja wewnętrzna."
  remarks: "Aby wysyłać ani odbierać wiadomości w ramach transakcji, umożliwia klasy MessageQueueTransaction utworzenie transakcji i przekaż go do przeciążenia <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName>metody lub <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName>metody pobierającej `transaction` parametru.</xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName> </xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName> Komunikaty wysyłane jako część transakcji należy wysłać do kolejek transakcyjnych. Komunikatów odebranych z kolejek transakcyjnych musi otrzymać przy użyciu określonej transakcji.       Oprócz <xref:System.Messaging.MessageQueue.Receive%2A>metody mogą odbierać komunikaty z określonego identyfikatora lub identyfikatora korelacji określonego.</xref:System.Messaging.MessageQueue.Receive%2A> Zobacz <xref:System.Messaging.MessageQueue.ReceiveById%2A>i <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A>metody, aby uzyskać więcej informacji na temat selektywnego odbierania komunikatów z kolejek transakcyjnych.</xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> </xref:System.Messaging.MessageQueue.ReceiveById%2A>       Komunikaty wysyłane do kolejek transakcyjnych zostaną usunięte, jeśli transakcja została przekazana. Podobnie komunikatów odebranych z kolejek transakcyjnych są zwracane do kolejki, jeśli transakcja zostanie wycofana.       Jeśli wystąpienia MessageQueueTransaction i przekaż go do odpowiednich przeciążenia <xref:System.Messaging.MessageQueue.Send%2A>metody lub <xref:System.Messaging.MessageQueue.Receive%2A>metodę, aby wysłać komunikat do kolejki nietransakcyjnej lub komunikat z kolejki nietransakcyjnej, metoda zgłasza wyjątek, który wskazuje &quot;Nieprawidłowe użycie transakcji.&quot;</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue.Send%2A>       [Visual Basic]       MessageQueueTransaction jest wątkowości typu apartment wiedzieć, tak więc jeśli nazwa stanu apartamentu jest `STA`, transakcji nie można używać w wielu wątków. Visual Basic ustawia stan wątku głównego do `STA`, więc należy zastosować <xref:System.MTAThreadAttribute>w `Main` podprocedury.</xref:System.MTAThreadAttribute> W przeciwnym razie wysyła wiadomości transakcyjne przy użyciu innego wątku zgłasza <xref:System.Messaging.MessageQueueException>wyjątek.</xref:System.Messaging.MessageQueueException> Należy zastosować <xref:System.MTAThreadAttribute>za pomocą następującego fragmentu.</xref:System.MTAThreadAttribute>      ```   <System.MTAThreadAttribute>    public sub Main()   ```      ```vb#      ```"
  syntax:
    content: 'public class MessageQueueTransaction : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.#ctor
  id: '#ctor'
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: MessageQueueTransaction()
  nameWithType: MessageQueueTransaction.MessageQueueTransaction()
  fullName: System.Messaging.MessageQueueTransaction.MessageQueueTransaction()
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Messaging.MessageQueueTransaction&quot;> </xref> klasy."
  remarks: "Ten konstruktor ustawia <xref:System.Messaging.MessageQueueTransaction.Status%2A>właściwości `Initialized`.</xref:System.Messaging.MessageQueueTransaction.Status%2A>"
  syntax:
    content: public MessageQueueTransaction ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Abort
  id: Abort
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Abort()
  nameWithType: MessageQueueTransaction.Abort()
  fullName: System.Messaging.MessageQueueTransaction.Abort()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Przywraca oczekująca transakcja wewnętrzna."
  remarks: "Nie powiodło się zakończenia procesu rozpoczętej w wywołaniu <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</xref:System.Messaging.MessageQueueTransaction.Begin%2A> oznacza przerwania       Zwykle, co sprawia, że wywołanie <xref:System.Messaging.MessageQueueTransaction.Begin%2A>w `Try...Catch` bloku obsługi wyjątków, umieszczanie wywołania <xref:System.Messaging.MessageQueueTransaction.Commit%2A>w `Try` klauzul i wywołanie przerwania w `Catch` klauzuli.</xref:System.Messaging.MessageQueueTransaction.Commit%2A> </xref:System.Messaging.MessageQueueTransaction.Begin%2A>       Przerwij przywraca cała transakcja. Obejmuje to wszystkie wiadomości wysyłane lub odbierane po wywołaniu <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</xref:System.Messaging.MessageQueueTransaction.Begin%2A>"
  syntax:
    content: public void Abort ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Abort*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Transakcja wewnętrzna, które próbujesz wycofać nie została uruchomiona."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "Występuje błąd wewnętrzny usługi kolejkowania komunikatów."
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Begin
  id: Begin
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Begin()
  nameWithType: MessageQueueTransaction.Begin()
  fullName: System.Messaging.MessageQueueTransaction.Begin()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Rozpoczyna nową transakcję wewnętrzną usługi kolejkowania komunikatów."
  remarks: "Rozpocznij znaczniki początku przetwarzania, który będzie zatwierdzenia lub wycofania, w zależności od Powodzenie transakcji. Jeśli wystąpi wyjątek podczas przetwarzania, cała transakcja zostanie wycofana. W tym wszystkie wiadomości wysyłane lub odbierane po wywołaniu Begin.       Zazwyczaj jedną nawiązuje połączenie Begin w `Try...Catch` bloku obsługi wyjątków, umieszczanie wywołania <xref:System.Messaging.MessageQueueTransaction.Commit%2A>w `Try` klauzul i wywołanie <xref:System.Messaging.MessageQueueTransaction.Abort%2A>w `Catch` klauzuli.</xref:System.Messaging.MessageQueueTransaction.Abort%2A> </xref:System.Messaging.MessageQueueTransaction.Commit%2A>"
  syntax:
    content: public void Begin ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Begin*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Transakcja została już uruchomiona."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "Występuje błąd wewnętrzny usługi kolejkowania komunikatów."
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Commit
  id: Commit
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Commit()
  nameWithType: MessageQueueTransaction.Commit()
  fullName: System.Messaging.MessageQueueTransaction.Commit()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Zatwierdza oczekująca transakcja wewnętrzna."
  remarks: "Zatwierdzenie oznacza pomyślne zakończenie przetwarzania rozpoczętej w wywołaniu <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</xref:System.Messaging.MessageQueueTransaction.Begin%2A> Jeśli wystąpi wyjątek między wywołanie <xref:System.Messaging.MessageQueueTransaction.Begin%2A>i wywołanie zatwierdzania, cała transakcja zostanie wycofana.</xref:System.Messaging.MessageQueueTransaction.Begin%2A> Obejmuje to wszystkie wiadomości wysyłane lub odbierane po wywołaniu <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</xref:System.Messaging.MessageQueueTransaction.Begin%2A>       Zwykle, co sprawia, że wywołanie <xref:System.Messaging.MessageQueueTransaction.Begin%2A>w `Try...Catch` bloku obsługi wyjątków, umieszczanie wywołania zatwierdzenia w `Try` klauzul i wywołanie <xref:System.Messaging.MessageQueueTransaction.Abort%2A>w `Catch` klauzuli.</xref:System.Messaging.MessageQueueTransaction.Abort%2A> </xref:System.Messaging.MessageQueueTransaction.Begin%2A>"
  syntax:
    content: public void Commit ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Commit*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Transakcja, który próbujesz przekazać, nie została uruchomiona."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "Występuje błąd wewnętrzny usługi kolejkowania komunikatów."
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Dispose
  id: Dispose
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Dispose()
  nameWithType: MessageQueueTransaction.Dispose()
  fullName: System.Messaging.MessageQueueTransaction.Dispose()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Zwalnia wszelkie zasoby używane przez <xref href=&quot;System.Messaging.MessageQueueTransaction&quot;> </xref>."
  remarks: "Wywołanie metody Dispose umożliwia zasoby używane przez <xref:System.Messaging.MessageQueueTransaction>odbiorczego do innych celów.</xref:System.Messaging.MessageQueueTransaction> Aby uzyskać więcej informacji na temat `Dispose`, zobacz [czyszczenie zasobów niezarządzanych](~/add/includes/ajax-current-ext-md.md).       Wszelkie oczekujące wewnętrzne transakcje są przywracane przez metodę Dispose."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: MessageQueueTransaction.Dispose(Boolean)
  fullName: System.Messaging.MessageQueueTransaction.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Zwalnia zasoby niezarządzane używane przez <xref href=&quot;System.Messaging.MessageQueueTransaction&quot;> </xref> i opcjonalnie zwalnia zasoby zarządzane."
  remarks: "Ta metoda jest wywoływana przez metodę publiczną <xref:System.Messaging.MessageQueueTransaction.Dispose%2A>— Metoda i <xref:System.Object.Finalize%2A>metody.</xref:System.Object.Finalize%2A> </xref:System.Messaging.MessageQueueTransaction.Dispose%2A> `Dispose`wywołuje chronioną metodę `Dispose(Boolean)` metody z `disposing` ustawiono parametr `true`. <xref:System.Object.Finalize%2A>wywołuje `Dispose` z `disposing` ustawioną `false`.</xref:System.Object.Finalize%2A>       Gdy `disposing` parametr jest `true`, ta metoda zwalnia wszystkie zasoby zajmowane przez wszelkie obiekty zarządzane przez to <xref:System.Messaging.MessageQueueTransaction>odwołań.</xref:System.Messaging.MessageQueueTransaction> Ta metoda wywołuje `Dispose` metody każdego odwołuje się do obiektu."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby zwolnić zasoby zarządzane i niezarządzane; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> aby zwolnić tylko zasoby niezarządzane."
  overload: System.Messaging.MessageQueueTransaction.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Finalize
  id: Finalize
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Finalize()
  nameWithType: MessageQueueTransaction.Finalize()
  fullName: System.Messaging.MessageQueueTransaction.Finalize()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Zwalnia zasoby zajmowane przez bieżące wystąpienie."
  remarks: "Ta metoda zastępuje <xref:System.Object.Finalize%2A?displayProperty=fullName>.</xref:System.Object.Finalize%2A?displayProperty=fullName> Kod aplikacji nie powinny wywoływać tej metody; metody Finalize obiektu jest wywoływana automatycznie podczas wyrzucania elementów bezużytecznych, chyba że finalizacji przez moduł garbage collector została wyłączona przez wywołanie do <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName>metody.</xref:System.GC.SuppressFinalize%2A?displayProperty=fullName>       Aby uzyskać więcej informacji, zobacz [metody Finalize i destruktory](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70), [czyszczenie zasobów niezarządzanych](~/add/includes/ajax-current-ext-md.md), i [przesłaniania metody Finalize](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)."
  syntax:
    content: ~MessageQueueTransaction ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Status
  id: Status
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Status
  nameWithType: MessageQueueTransaction.Status
  fullName: System.Messaging.MessageQueueTransaction.Status
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Pobiera stan transakcji."
  remarks: "Gdy wystąpienie klasy <xref:System.Messaging.MessageQueueTransaction>klasy został utworzony, stan jest ustawiony przez konstruktora, aby `Initialized`.</xref:System.Messaging.MessageQueueTransaction> Po wywołaniu <xref:System.Messaging.MessageQueueTransaction.Begin%2A>, ale przed wywołaniem <xref:System.Messaging.MessageQueueTransaction.Commit%2A>lub <xref:System.Messaging.MessageQueueTransaction.Abort%2A>, stan `Pending`.</xref:System.Messaging.MessageQueueTransaction.Abort%2A> </xref:System.Messaging.MessageQueueTransaction.Commit%2A> </xref:System.Messaging.MessageQueueTransaction.Begin%2A>"
  syntax:
    content: public System.Messaging.MessageQueueTransactionStatus Status { get; }
    return:
      type: System.Messaging.MessageQueueTransactionStatus
      description: "Jeden z <xref href=&quot;System.Messaging.MessageQueueTransactionStatus&quot;> </xref> wartości, które wskazuje, czy transakcja został przekazany, zostało przerwane, został zainicjowany, czy jest w stanie oczekiwania."
  overload: System.Messaging.MessageQueueTransaction.Status*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Messaging.MessageQueueException
  parent: System.Messaging
  isExternal: false
  name: MessageQueueException
  nameWithType: MessageQueueException
  fullName: System.Messaging.MessageQueueException
- uid: System.Messaging.MessageQueueTransaction.#ctor
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: MessageQueueTransaction()
  nameWithType: MessageQueueTransaction.MessageQueueTransaction()
  fullName: System.Messaging.MessageQueueTransaction.MessageQueueTransaction()
- uid: System.Messaging.MessageQueueTransaction.Abort
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Abort()
  nameWithType: MessageQueueTransaction.Abort()
  fullName: System.Messaging.MessageQueueTransaction.Abort()
- uid: System.Messaging.MessageQueueTransaction.Begin
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Begin()
  nameWithType: MessageQueueTransaction.Begin()
  fullName: System.Messaging.MessageQueueTransaction.Begin()
- uid: System.Messaging.MessageQueueTransaction.Commit
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Commit()
  nameWithType: MessageQueueTransaction.Commit()
  fullName: System.Messaging.MessageQueueTransaction.Commit()
- uid: System.Messaging.MessageQueueTransaction.Dispose
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Dispose()
  nameWithType: MessageQueueTransaction.Dispose()
  fullName: System.Messaging.MessageQueueTransaction.Dispose()
- uid: System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: MessageQueueTransaction.Dispose(Boolean)
  fullName: System.Messaging.MessageQueueTransaction.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.MessageQueueTransaction.Finalize
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Finalize()
  nameWithType: MessageQueueTransaction.Finalize()
  fullName: System.Messaging.MessageQueueTransaction.Finalize()
- uid: System.Messaging.MessageQueueTransaction.Status
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Status
  nameWithType: MessageQueueTransaction.Status
  fullName: System.Messaging.MessageQueueTransaction.Status
- uid: System.Messaging.MessageQueueTransactionStatus
  parent: System.Messaging
  isExternal: false
  name: MessageQueueTransactionStatus
  nameWithType: MessageQueueTransactionStatus
  fullName: System.Messaging.MessageQueueTransactionStatus
- uid: System.Messaging.MessageQueueTransaction.#ctor*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: MessageQueueTransaction
  nameWithType: MessageQueueTransaction.MessageQueueTransaction
- uid: System.Messaging.MessageQueueTransaction.Abort*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Abort
  nameWithType: MessageQueueTransaction.Abort
- uid: System.Messaging.MessageQueueTransaction.Begin*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Begin
  nameWithType: MessageQueueTransaction.Begin
- uid: System.Messaging.MessageQueueTransaction.Commit*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Commit
  nameWithType: MessageQueueTransaction.Commit
- uid: System.Messaging.MessageQueueTransaction.Dispose*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Dispose
  nameWithType: MessageQueueTransaction.Dispose
- uid: System.Messaging.MessageQueueTransaction.Finalize*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Finalize
  nameWithType: MessageQueueTransaction.Finalize
- uid: System.Messaging.MessageQueueTransaction.Status*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Status
  nameWithType: MessageQueueTransaction.Status
