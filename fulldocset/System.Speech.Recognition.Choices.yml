### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.Choices
  id: Choices
  children:
  - System.Speech.Recognition.Choices.#ctor
  - System.Speech.Recognition.Choices.#ctor(System.Speech.Recognition.GrammarBuilder[])
  - System.Speech.Recognition.Choices.#ctor(System.String[])
  - System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])
  - System.Speech.Recognition.Choices.Add(System.String[])
  - System.Speech.Recognition.Choices.ToGrammarBuilder
  langs:
  - csharp
  name: Choices
  nameWithType: Choices
  fullName: System.Speech.Recognition.Choices
  type: Class
  summary: "Reprezentuje zestaw alternatyw w ograniczeniach gramatyki rozpoznawania mowy."
  remarks: "Obiekt wyborów reprezentuje składnik frazę, która może mieć jeden z kilku wartości. Klasa używana podczas tworzenia gramatyki rozpoznawanie mowy z <xref:System.Speech.Recognition.GrammarBuilder>obiektu.</xref:System.Speech.Recognition.GrammarBuilder>       Na przykład obiekt opcji może reprezentować składnika *colorChoice* frazę &quot;zmienić kolor *colorChoice*&quot;, gdzie dopuszczalne wartości *colorChoice* są &quot;red&quot; lub &quot;zielony&quot; lub &quot;blue&quot;.      > [!NOTE] > Aby użyć obiektu opcji jako opcjonalny składnik frazę, utworzenia obiektu opcji i dodaj go do <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName>obiekt z `minRepeat` i `maxRepeat` odpowiednio ustawiona na 0 i 1.</xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> Mogą być rozpoznawane wyrażeń zawierających składniki opcjonalne, czy składnik opcjonalny jest używany.       Klasa opcji pełni taką samą funkcję jak `one-of` zdefiniowany przez element XML [mowy rozpoznawania gramatyki specyfikacji (SRGS) w wersji 1.0](http://www.w3.org/TR/speech-grammar/) i jest podobny do <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf>klasy w <xref:System.Speech.Recognition.SrgsGrammar>przestrzeni nazw.</xref:System.Speech.Recognition.SrgsGrammar> </xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf>       Aby uzyskać więcej informacji na temat definiowania gramatyki rozpoznawania mowy, zobacz [rozpoznawania mowy](http://msdn.microsoft.com/en-us/6a7dc524-07fc-4862-8d48-8c10dc64b919) i [tworzenie gramatyki GrammarBuilder](http://msdn.microsoft.com/en-us/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)."
  example:
  - "The following example creates a speech recognition grammar for the phrase, \"Set background to *colorChoice*\", where *colorChoice* can be one of the defined colors. The <xref:System.Speech.Recognition.GrammarBuilder> is used to define the constraints for the grammar.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a Choices object that contains a set of alternative colors.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  colorChoice.Add(new string[] {\"cyan\", \"yellow\", \"magenta\"});  \n  \n  // Construct the phrase.  \n  GrammarBuilder builder = new GrammarBuilder(\"Set background to\");  \n  builder.Append(colorChoice);  \n  \n  // Create a grammar for the phrase.  \n  Grammar colorGrammar = new Grammar(builder);  \n  colorGrammar.Name = \"SetBackground\";  \n  \n  return colorGrammar;  \n}  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{_oneOf.DebugSummary}")]

      public class Choices
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.Choices.#ctor
  id: '#ctor'
  parent: System.Speech.Recognition.Choices
  langs:
  - csharp
  name: Choices()
  nameWithType: Choices.Choices()
  fullName: System.Speech.Recognition.Choices.Choices()
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Speech.Recognition.Choices&quot;> </xref> klasę, która zawiera pusty zestaw alternatyw."
  remarks: "Ten konstruktor zwraca nieprawidłowy, pusty zestaw alternatyw. Można dodać przy użyciu dowolnego alternatyw <xref:System.Speech.Recognition.Choices.Add%2A>metody.</xref:System.Speech.Recognition.Choices.Add%2A>"
  example:
  - "The following example uses <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder>objects to create a phrase that can be used to recognize speech input such as \"Call Anne on her cell\" and \"Call James on his work phone\". The example uses implicit casts from <xref:System.Speech.Recognition.Choices> and <xref:System.String> to <xref:System.Speech.Recognition.GrammarBuilder>.  \n  \n```c#  \npublic Grammar CreatePhonePhrase()  \n{  \n  \n  // Create alternatives for female names and add a phrase.  \n  GrammarBuilder females = new Choices(new string[] { \"Anne\", \"Mary\" });  \n  females.Append(\"on her\");  \n  \n  // Create alternatives for male names and add a phrase.  \n  GrammarBuilder males = new Choices(new string[] { \"James\", \"Sam\" });  \n  males.Append(\"on his\");  \n  \n  // Create a Choices object that contains an array of alternative  \n  // GrammarBuilder objects.  \n  Choices people = new Choices();  \n  people.Add(new Choices(new GrammarBuilder[] {females, males}));  \n  \n  // Create a Choices object that contains a set of alternative phone types.  \n  Choices phoneType = new Choices();  \n  phoneType.Add(new string[] { \"cell\", \"home\", \"work\" });  \n  \n  // Construct the phrase.  \n  GrammarBuilder gb = new GrammarBuilder();  \n  gb.Append(\"call\");  \n  gb.Append(people);  \n  gb.Append(phoneType);  \n  gb.Append(new GrammarBuilder(\"phone\"), 0, 1);  \n  \n  return new Grammar(gb);  \n}  \n```"
  syntax:
    content: public Choices ();
    parameters: []
  overload: System.Speech.Recognition.Choices.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.Choices.#ctor(System.Speech.Recognition.GrammarBuilder[])
  id: '#ctor(System.Speech.Recognition.GrammarBuilder[])'
  parent: System.Speech.Recognition.Choices
  langs:
  - csharp
  name: Choices(GrammarBuilder[])
  nameWithType: Choices.Choices(GrammarBuilder[])
  fullName: System.Speech.Recognition.Choices.Choices(GrammarBuilder[])
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Speech.Recognition.Choices&quot;> </xref> klasy z tablicę zawierającą co najmniej jeden <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> obiektów."
  remarks: "Każdy <xref:System.Speech.Recognition.GrammarBuilder>w `alternateChoices` definiuje jedną alternatywna.</xref:System.Speech.Recognition.GrammarBuilder> Jeśli `alternateChoices` jest pusta tablica, konstruktora zwraca pusty zestaw alternatyw. Można dodać przy użyciu dowolnego alternatyw <xref:System.Speech.Recognition.Choices.Add%2A>metody.</xref:System.Speech.Recognition.Choices.Add%2A>       Generuje konstruktora <xref:System.ArgumentNullException>podczas `alternateChoices` jest `null` lub kiedy są elementy tablicy `null`.</xref:System.ArgumentNullException>       Ponieważ <xref:System.Speech.Recognition.GrammarBuilder>klasy zapewnia obsługę niejawnej konwersji wartości <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultValue>, i <xref:System.Speech.Recognition.SemanticResultKey>obiekty do <xref:System.Speech.Recognition.GrammarBuilder>wystąpień, używając poprawnie rzutowania, ten konstruktor można również używać do tworzenia <xref:System.Speech.Recognition.Choices>obiektu z listy dowolnej kombinacji tych obiektów.</xref:System.Speech.Recognition.Choices> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.Choices> </xref:System.Speech.Recognition.GrammarBuilder>"
  example:
  - "The following example uses `Choices` and <xref:System.Speech.Recognition.GrammarBuilder> objects to create a <xref:System.Speech.Recognition.Grammar> for phrases such as, \"Call Anne on her cell\" and \"Call James on his work phone\". The example uses implicit casts from `Choices` and <xref:System.String> to <xref:System.Speech.Recognition.GrammarBuilder>.  \n  \n```c#  \npublic Grammar CreatePhonePhrase()  \n{  \n  \n  // Create alternatives for female names and add a phrase.  \n  GrammarBuilder females = new Choices(new string[] { \"Anne\", \"Mary\" });  \n  females.Append(\"on her\");  \n  \n  // Create alternatives for male names and add a phrase.  \n  GrammarBuilder males = new Choices(new string[] { \"James\", \"Sam\" });  \n  males.Append(\"on his\");  \n  \n  // Create a Choices object that contains an array of alternative  \n  // GrammarBuilder objects.  \n  Choices people = new Choices();  \n  people.Add(new Choices(new GrammarBuilder[] {females, males}));  \n  \n  // Create a Choices object that contains a set of alternative phone types.  \n  Choices phoneType = new Choices();  \n  phoneType.Add(new string[] { \"cell\", \"home\", \"work\" });  \n  \n  // Construct the phrase.  \n  GrammarBuilder gb = new GrammarBuilder();  \n  gb.Append(\"call\");  \n  gb.Append(people);  \n  gb.Append(phoneType);  \n  gb.Append(new GrammarBuilder(\"phone\"), 0, 1);  \n  \n  return new Grammar(gb);  \n}  \n```"
  syntax:
    content: public Choices (System.Speech.Recognition.GrammarBuilder[] alternateChoices);
    parameters:
    - id: alternateChoices
      type: System.Speech.Recognition.GrammarBuilder[]
      description: "Tablica zawierająca zestaw alternatyw."
  overload: System.Speech.Recognition.Choices.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.Choices.#ctor(System.String[])
  id: '#ctor(System.String[])'
  parent: System.Speech.Recognition.Choices
  langs:
  - csharp
  name: Choices(String[])
  nameWithType: Choices.Choices(String[])
  fullName: System.Speech.Recognition.Choices.Choices(String[])
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Speech.Recognition.Choices&quot;> </xref> klasy z tablicę zawierającą co najmniej jeden <xref:System.String>obiektów.</xref:System.String>"
  remarks: "Każdy <xref:System.String>w `phrases` definiuje jedną alternatywna.</xref:System.String> Aparat rozpoznawania mowy umożliwia jeden z elementów w tablicy ciągów pasuje wejście mowy. Jeśli `phrases` jest pusta tablica, konstruktora zwraca pusty zestaw alternatyw. Można dodać przy użyciu dowolnego alternatyw <xref:System.Speech.Recognition.Choices.Add%2A>metody.</xref:System.Speech.Recognition.Choices.Add%2A>       Generuje konstruktora <xref:System.ArgumentNullException>podczas `phrases` jest `null` lub elementy tablicy są `null`.</xref:System.ArgumentNullException> Generuje konstruktora <xref:System.ArgumentException>Jeśli dowolny element w tablicy jest pustym ciągiem (&quot;&quot;).</xref:System.ArgumentException>"
  example:
  - "The following example uses <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects to create a <xref:System.Speech.Recognition.Grammar> for the phrases such as, \"Call Anne on her cell\" and \"Call James on his work phone\". The example uses implicit casts from `Choices` and <xref:System.String> to <xref:System.Speech.Recognition.GrammarBuilder>.  \n  \n```c#  \npublic Grammar CreatePhonePhrase()  \n{  \n  \n  // Create alternatives for female names and add a phrase.  \n  GrammarBuilder females = new Choices(new string[] { \"Anne\", \"Mary\" });  \n  females.Append(\"on her\");  \n  \n  // Create alternatives for male names and add a phrase.  \n  GrammarBuilder males = new Choices(new string[] { \"James\", \"Sam\" });  \n  males.Append(\"on his\");  \n  \n  // Create a Choices object that contains an array of alternative  \n  // GrammarBuilder objects.  \n  Choices people = new Choices();  \n  people.Add(new Choices(new GrammarBuilder[] {females, males}));  \n  \n  // Create a Choices object that contains a set of alternative phone types.  \n  Choices phoneType = new Choices();  \n  phoneType.Add(new string[] { \"cell\", \"home\", \"work\" });  \n  \n  // Construct the phrase.  \n  GrammarBuilder gb = new GrammarBuilder();  \n  gb.Append(\"call\");  \n  gb.Append(people);  \n  gb.Append(phoneType);  \n  gb.Append(new GrammarBuilder(\"phone\"), 0, 1);  \n  \n  return new Grammar(gb);  \n}  \n```"
  syntax:
    content: public Choices (string[] phrases);
    parameters:
    - id: phrases
      type: System.String[]
      description: "Tablica zawierająca zestaw alternatyw."
  overload: System.Speech.Recognition.Choices.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])
  id: Add(System.Speech.Recognition.GrammarBuilder[])
  parent: System.Speech.Recognition.Choices
  langs:
  - csharp
  name: Add(GrammarBuilder[])
  nameWithType: Choices.Add(GrammarBuilder[])
  fullName: System.Speech.Recognition.Choices.Add(GrammarBuilder[])
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Dodaje tablicę zawierającą co najmniej jeden <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> obiekty do zestawu alternatyw."
  remarks: "Because of support for implicit conversion from <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, and <xref:System.Speech.Recognition.SemanticResultValue> objects to <xref:System.Speech.Recognition.GrammarBuilder>, these three classes may be added to a <xref:System.Speech.Recognition.Choices> instance as well.  \n  \n If `alternateChoices` is an empty array, this method does not update the set of alternatives.  \n  \n Applications can use both [Add(String\\[\\])](assetId:///M:System.Speech.Recognition.Choices.Add(System.String[])?qualifyHint=False&autoUpgrade=False) and Add to add alternatives to a <xref:System.Speech.Recognition.Choices> object.  \n  \n This method throws an <xref:System.ArgumentNullException> when `alternateChoices` is `null` or any of the array elements are `null`."
  example:
  - "The following example creates a speech recognition grammar for phrases such as \"Call Anne on her cell\" and \"Call James on his work phone\". The example uses both overloads of the <xref:System.Speech.Recognition.Choices.Add%2A> method to build the grammar.  \n  \n```c#  \npublic Grammar CreatePhonePhrase()  \n{  \n  \n  // Create alternatives for female names and add a phrase.  \n  GrammarBuilder females = new Choices(new string[] { \"Anne\", \"Mary\" });  \n  females.Append(\"on her\");  \n  \n  // Create alternatives for male names and add a phrase.  \n  GrammarBuilder males = new Choices(new string[] { \"James\", \"Sam\" });  \n  males.Append(\"on his\");  \n  \n  // Create a Choices object that contains an array of alternative  \n  // GrammarBuilder objects.  \n  Choices people = new Choices();  \n  people.Add(new Choices(new GrammarBuilder[] {females, males}));  \n  \n  // Create a Choices object that contains a set of alternative phone types.  \n  Choices phoneType = new Choices();  \n  phoneType.Add(new string[] { \"cell\", \"home\", \"work\" });  \n  \n  // Construct the phrase.  \n  GrammarBuilder gb = new GrammarBuilder();  \n  gb.Append(\"call\");  \n  gb.Append(people);  \n  gb.Append(phoneType);  \n  gb.Append(new GrammarBuilder(\"phone\"), 0, 1);  \n  \n  return new Grammar(gb);  \n}  \n```"
  syntax:
    content: public void Add (System.Speech.Recognition.GrammarBuilder[] alternateChoices);
    parameters:
    - id: alternateChoices
      type: System.Speech.Recognition.GrammarBuilder[]
      description: "<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> Obiekty do dodania do tej <xref href=&quot;System.Speech.Recognition.Choices&quot;> </xref> obiektu."
  overload: System.Speech.Recognition.Choices.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.Choices.Add(System.String[])
  id: Add(System.String[])
  parent: System.Speech.Recognition.Choices
  langs:
  - csharp
  name: Add(String[])
  nameWithType: Choices.Add(String[])
  fullName: System.Speech.Recognition.Choices.Add(String[])
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Dodaje tablicę zawierającą co najmniej jeden <xref:System.String>obiekty do zestawu alternatyw.</xref:System.String>"
  remarks: "Applications can use both Add and [Add(GrammarBuilder\\[\\])](assetId:///M:System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])?qualifyHint=False&autoUpgrade=False) to add alternatives to a <xref:System.Speech.Recognition.Choices> object.  \n  \n If `phrases` is an empty array, this method does not update the set of alternates.  \n  \n This method throws an <xref:System.ArgumentNullException> when `phrases` is `null` or any of the array elements are `null`. This method throws an <xref:System.ArgumentException> if any element in the array is the empty string (\"\")."
  example:
  - "The following example creates a speech recognition grammar for phrases similar to \"Call Anne on her cell\" and \"Call James on his work phone\". The example uses both overloads of the <xref:System.Speech.Recognition.Choices.Add%2A> method to build the grammar.  \n  \n```c#  \npublic Grammar CreatePhonePhrase()  \n{  \n  \n  // Create alternatives for female names and add a phrase.  \n  GrammarBuilder females = new Choices(new string[] { \"Anne\", \"Mary\" });  \n  females.Append(\"on her\");  \n  \n  // Create alternatives for male names and add a phrase.  \n  GrammarBuilder males = new Choices(new string[] { \"James\", \"Sam\" });  \n  males.Append(\"on his\");  \n  \n  // Create a Choices object that contains an array of alternative  \n  // GrammarBuilder objects.  \n  Choices people = new Choices();  \n  people.Add(new Choices(new GrammarBuilder[] {females, males}));  \n  \n  // Create a Choices object that contains a set of alternative phone types.  \n  Choices phoneType = new Choices();  \n  phoneType.Add(new string[] { \"cell\", \"home\", \"work\" });  \n  \n  // Construct the phrase.  \n  GrammarBuilder gb = new GrammarBuilder();  \n  gb.Append(\"call\");  \n  gb.Append(people);  \n  gb.Append(phoneType);  \n  gb.Append(new GrammarBuilder(\"phone\"), 0, 1);  \n  \n  return new Grammar(gb);  \n}  \n```"
  syntax:
    content: public void Add (string[] phrases);
    parameters:
    - id: phrases
      type: System.String[]
      description: "Ciągi do dodania do tej <xref href=&quot;System.Speech.Recognition.Choices&quot;> </xref> obiektu."
  overload: System.Speech.Recognition.Choices.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.Choices.ToGrammarBuilder
  id: ToGrammarBuilder
  parent: System.Speech.Recognition.Choices
  langs:
  - csharp
  name: ToGrammarBuilder()
  nameWithType: Choices.ToGrammarBuilder()
  fullName: System.Speech.Recognition.Choices.ToGrammarBuilder()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Zwraca <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> obiektu z tym <xref href=&quot;System.Speech.Recognition.Choices&quot;> </xref> obiektu."
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder>Zwracana przez tę metodę jest równoważna jedną zwrócony przez jedną z następujących.</xref:System.Speech.Recognition.GrammarBuilder>      -Wywoływania <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A>konstruktora z tym obiektem jako parametr.</xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A>      -Przy użyciu jawnych ani niejawnych rzutowanie tego obiektu do <xref:System.Speech.Recognition.GrammarBuilder>.</xref:System.Speech.Recognition.GrammarBuilder>"
  example:
  - "The following example creates a speech recognition grammar for changing the background color.  \n  \n```c#  \n  \nprivate Grammar CreateColorChoice()  \n{  \n  \n  // Create a Choices object that contains a set of alternative colors.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  \n  // Construct the phrase.  \n  GrammarBuilder gb = new GrammarBuilder();  \n  gb.Append(new Choices(new string[] {\"Set\", \"Change\"}));  \n  gb.Append(\"background to\");  \n  gb.Append(colorChoice.ToGrammarBuilder());  \n  \n  Grammar grammar = new Grammar(gb);  \n  grammar.Name = \"modify background color\";  \n  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();
    parameters: []
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "A <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> to odpowiadającego <xref href=&quot;System.Speech.Recognition.Choices&quot;> </xref> obiektu."
  overload: System.Speech.Recognition.Choices.ToGrammarBuilder*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.Choices.#ctor
  parent: System.Speech.Recognition.Choices
  isExternal: false
  name: Choices()
  nameWithType: Choices.Choices()
  fullName: System.Speech.Recognition.Choices.Choices()
- uid: System.Speech.Recognition.Choices.#ctor(System.Speech.Recognition.GrammarBuilder[])
  parent: System.Speech.Recognition.Choices
  isExternal: false
  name: Choices(GrammarBuilder[])
  nameWithType: Choices.Choices(GrammarBuilder[])
  fullName: System.Speech.Recognition.Choices.Choices(GrammarBuilder[])
- uid: System.Speech.Recognition.GrammarBuilder[]
  parent: System.Speech.Recognition
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder[]
  spec.csharp:
  - uid: System.Speech.Recognition.GrammarBuilder
    name: GrammarBuilder
    nameWithType: GrammarBuilder
    fullName: GrammarBuilder[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Speech.Recognition.Choices.#ctor(System.String[])
  parent: System.Speech.Recognition.Choices
  isExternal: false
  name: Choices(String[])
  nameWithType: Choices.Choices(String[])
  fullName: System.Speech.Recognition.Choices.Choices(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])
  parent: System.Speech.Recognition.Choices
  isExternal: false
  name: Add(GrammarBuilder[])
  nameWithType: Choices.Add(GrammarBuilder[])
  fullName: System.Speech.Recognition.Choices.Add(GrammarBuilder[])
- uid: System.Speech.Recognition.Choices.Add(System.String[])
  parent: System.Speech.Recognition.Choices
  isExternal: false
  name: Add(String[])
  nameWithType: Choices.Add(String[])
  fullName: System.Speech.Recognition.Choices.Add(String[])
- uid: System.Speech.Recognition.Choices.ToGrammarBuilder
  parent: System.Speech.Recognition.Choices
  isExternal: false
  name: ToGrammarBuilder()
  nameWithType: Choices.ToGrammarBuilder()
  fullName: System.Speech.Recognition.Choices.ToGrammarBuilder()
- uid: System.Speech.Recognition.GrammarBuilder
  parent: System.Speech.Recognition
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder
- uid: System.Speech.Recognition.Choices.#ctor*
  parent: System.Speech.Recognition.Choices
  isExternal: false
  name: Choices
  nameWithType: Choices.Choices
- uid: System.Speech.Recognition.Choices.Add*
  parent: System.Speech.Recognition.Choices
  isExternal: false
  name: Add
  nameWithType: Choices.Add
- uid: System.Speech.Recognition.Choices.ToGrammarBuilder*
  parent: System.Speech.Recognition.Choices
  isExternal: false
  name: ToGrammarBuilder
  nameWithType: Choices.ToGrammarBuilder
