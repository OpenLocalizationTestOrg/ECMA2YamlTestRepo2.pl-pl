### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.KeyBinding
  id: KeyBinding
  children:
  - System.Windows.Input.KeyBinding.#ctor
  - System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)
  - System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  - System.Windows.Input.KeyBinding.CreateInstanceCore
  - System.Windows.Input.KeyBinding.Gesture
  - System.Windows.Input.KeyBinding.Key
  - System.Windows.Input.KeyBinding.KeyProperty
  - System.Windows.Input.KeyBinding.Modifiers
  - System.Windows.Input.KeyBinding.ModifiersProperty
  langs:
  - csharp
  name: KeyBinding
  nameWithType: KeyBinding
  fullName: System.Windows.Input.KeyBinding
  type: Class
  summary: "Wiąże <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref> do <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> (lub innego <xref:System.Windows.Input.ICommand>implementacji).</xref:System.Windows.Input.ICommand>"
  remarks: "Kojarzy KeyBinding <xref:System.Windows.Input.KeyGesture>z <xref:System.Windows.Input.ICommand>, takich jak <xref:System.Windows.Input.RoutedCommand>.</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.KeyGesture> <xref:System.Windows.Input.RoutedCommand>to implementacja podstawowego <xref:System.Windows.Input.ICommand>interfejs na potrzeby [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] droższe systemu.</xref:System.Windows.Input.ICommand></xref:System.Windows.Input.RoutedCommand>  Zwykle, gdy <xref:System.Windows.Input.KeyGesture>wykonywania polecenia zostanie wywołany, mimo że zachowania polecenia jest dalsze zależeć od czynników specyficzne dla polecenia takie jak <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>wartość.</xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> </xref:System.Windows.Input.KeyGesture>  Aby uzyskać więcej informacji na wydawanie poleceń, zobacz [droższe omówienie](~/add/includes/ajax-current-ext-md.md).       Z wyjątkiem klawiszy funkcyjnych i klucze numerycznej prawidłową <xref:System.Windows.Input.KeyGesture>musi zawierać dokładnie jeden <xref:System.Windows.Input.Key>i jeden lub więcej <xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.Key> </xref:System.Windows.Input.KeyGesture>  Funkcja klucze i klucze numerycznej nie wymagają klawisz modyfikujący aby mogła być prawidłową <xref:System.Windows.Input.KeyGesture>.</xref:System.Windows.Input.KeyGesture> Istnieje możliwość określenia nieprawidłową <xref:System.Windows.Input.KeyGesture>i KeyBinding z nieprawidłową gestu skojarzony, za pośrednictwem [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] lub kodu.</xref:System.Windows.Input.KeyGesture> Na przykład istnieje nie weryfikacji, który uniemożliwia tworzenie i powiązanie <xref:System.Windows.Input.KeyGesture>zawiera tylko klucz niefunkcjonalnego, lub tylko Modyfikatory ale żaden klucz.</xref:System.Windows.Input.KeyGesture> Takie KeyBinding nigdy nie będzie podejmować próby wywołania jego skojarzone polecenie.       Podczas definiowania KeyBinding w [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] istnieją dwa sposoby określania <xref:System.Windows.Input.KeyGesture>.</xref:System.Windows.Input.KeyGesture> Pierwszym sposobem ustanowienia KeyBinding w [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] jest określenie <xref:System.Windows.Input.KeyBinding.Gesture%2A>atrybut elementu KeyBinding, dzięki czemu składni określić kluczy i Modyfikatory jako pojedynczy ciąg, na przykład &quot;CTRL + P&quot;.</xref:System.Windows.Input.KeyBinding.Gesture%2A> Drugim sposobem jest zdefiniowanie <xref:System.Windows.Input.KeyBinding.Key%2A>atrybutu i <xref:System.Windows.Input.KeyBinding.Modifiers%2A>atrybuty elementu KeyBinding.</xref:System.Windows.Input.KeyBinding.Modifiers%2A> </xref:System.Windows.Input.KeyBinding.Key%2A> Obie strony ustawienie <xref:System.Windows.Input.KeyGesture>są równoważne i modyfikować tego samego obiektu źródłowego, ale będzie konflikt, jeśli obie są używane.</xref:System.Windows.Input.KeyGesture>  W przypadku gdy <xref:System.Windows.Input.KeyBinding.Key%2A>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>i <xref:System.Windows.Input.KeyBinding.Gesture%2A>atrybuty są gotowe, atrybut, który jest zdefiniowany ostatnio zostanie użyty dla <xref:System.Windows.Input.KeyGesture>.</xref:System.Windows.Input.KeyGesture> </xref:System.Windows.Input.KeyBinding.Gesture%2A> </xref:System.Windows.Input.KeyBinding.Modifiers%2A> </xref:System.Windows.Input.KeyBinding.Key%2A> Potencjalnie może mieć sytuacji, gdy na przykład <xref:System.Windows.Input.KeyBinding.Key%2A>zestaw ostatnio będzie zastąpić tylko składnik klucza poprzedniego gestu, ale pozostawić Modyfikatory gestu takie same.</xref:System.Windows.Input.KeyBinding.Key%2A> Ogólnie rzecz biorąc, zaleca się używanie tylko <xref:System.Windows.Input.KeyBinding.Gesture%2A>atrybutu z [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]; to uniknąć niejednoznaczności, zapewnia najbardziej prostsze składni i zapewnia najbardziej oczywistym reprezentacja serializacji.</xref:System.Windows.Input.KeyBinding.Gesture%2A>       KeyBinding można zdefiniować określonego obiektu lub na poziomie klasy rejestrując <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A>na <xref:System.Windows.Input.CommandManager>klasy.</xref:System.Windows.Input.CommandManager> </xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> Najbardziej typowy sposób definiowania KeyBinding znajduje się w kontroli szablonu ustawienie <xref:System.Windows.UIElement.InputBindings%2A>Właściwości w [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] przez zadeklarowanie co najmniej jeden <xref:System.Windows.Input.MouseBinding>lub elementy KeyBinding.</xref:System.Windows.Input.MouseBinding> </xref:System.Windows.UIElement.InputBindings%2A>"
  example:
  - "The following example creates a KeyBinding and adds it to the <xref:System.Windows.Input.InputBindingCollection> of the root window.  \n  \n [!code-xml[commandWithHandler#CommandHandlerKeyBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlerkeybinding)]  \n  \n [!code-cs[CommandHandlerProcedural#CommandHandlerKeyBindingCodeBehind](~/add/codesnippet/csharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerkeybindingcodebehind)]\n [!code-vb[CommandHandlerProcedural#CommandHandlerKeyBindingCodeBehind](~/add/codesnippet/visualbasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerkeybindingcodebehind)]"
  syntax:
    content: 'public class KeyBinding : System.Windows.Input.InputBinding'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  - System.Windows.Freezable
  - System.Windows.Input.InputBinding
  implements: []
  inheritedMembers:
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.Freezable.CanFreeze
  - System.Windows.Freezable.Changed
  - System.Windows.Freezable.Clone
  - System.Windows.Freezable.CloneCurrentValue
  - System.Windows.Freezable.CreateInstance
  - System.Windows.Freezable.Freeze
  - System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)
  - System.Windows.Freezable.FreezeCore(System.Boolean)
  - System.Windows.Freezable.GetAsFrozen
  - System.Windows.Freezable.GetCurrentValueAsFrozen
  - System.Windows.Freezable.IsFrozen
  - System.Windows.Freezable.OnChanged
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)
  - System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.Freezable.ReadPreamble
  - System.Windows.Freezable.WritePostscript
  - System.Windows.Freezable.WritePreamble
  - System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)
  - System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)
  - System.Windows.Input.InputBinding.Command
  - System.Windows.Input.InputBinding.CommandParameter
  - System.Windows.Input.InputBinding.CommandParameterProperty
  - System.Windows.Input.InputBinding.CommandProperty
  - System.Windows.Input.InputBinding.CommandTarget
  - System.Windows.Input.InputBinding.CommandTargetProperty
  - System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.#ctor
  id: '#ctor'
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: KeyBinding()
  nameWithType: KeyBinding.KeyBinding()
  fullName: System.Windows.Input.KeyBinding.KeyBinding()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Windows.Input.KeyBinding&quot;> </xref> klasy."
  syntax:
    content: public KeyBinding ();
    parameters: []
  overload: System.Windows.Input.KeyBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)
  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)'
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: KeyBinding(ICommand,KeyGesture)
  nameWithType: KeyBinding.KeyBinding(ICommand,KeyGesture)
  fullName: System.Windows.Input.KeyBinding.KeyBinding(ICommand,KeyGesture)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Windows.Input.KeyBinding&quot;> </xref> przy użyciu określonego <xref:System.Windows.Input.ICommand>i <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>.</xref:System.Windows.Input.ICommand>"
  syntax:
    content: public KeyBinding (System.Windows.Input.ICommand command, System.Windows.Input.KeyGesture gesture);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "Polecenie, aby skojarzyć z `gesture`."
    - id: gesture
      type: System.Windows.Input.KeyGesture
      description: "Kombinacja klawiszy do skojarzenia z `command`."
  overload: System.Windows.Input.KeyBinding.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>command</code>or <code>gesture</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)'
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: KeyBinding(ICommand,Key,ModifierKeys)
  nameWithType: KeyBinding.KeyBinding(ICommand,Key,ModifierKeys)
  fullName: System.Windows.Input.KeyBinding.KeyBinding(ICommand,Key,ModifierKeys)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Windows.Input.KeyBinding&quot;> </xref> przy użyciu określonego <xref:System.Windows.Input.ICommand>i określonego <xref href=&quot;System.Windows.Input.Key&quot;> </xref> i <xref href=&quot;System.Windows.Input.ModifierKeys&quot;> </xref> zostaną poddane konwersji na <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>.</xref:System.Windows.Input.ICommand>"
  syntax:
    content: public KeyBinding (System.Windows.Input.ICommand command, System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "Polecenie do wywołania."
    - id: key
      type: System.Windows.Input.Key
      description: "Klucz, który ma zostać skojarzony z `command`."
    - id: modifiers
      type: System.Windows.Input.ModifierKeys
      description: "Modyfikatory ma być skojarzone z `command`."
  overload: System.Windows.Input.KeyBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.CreateInstanceCore
  id: CreateInstanceCore
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: CreateInstanceCore()
  nameWithType: KeyBinding.CreateInstanceCore()
  fullName: System.Windows.Input.KeyBinding.CreateInstanceCore()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Tworzy wystąpienie <xref href=&quot;System.Windows.Input.KeyBinding&quot;> </xref>."
  syntax:
    content: protected override System.Windows.Freezable CreateInstanceCore ();
    parameters: []
    return:
      type: System.Windows.Freezable
      description: "Nowy obiekt."
  overload: System.Windows.Input.KeyBinding.CreateInstanceCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.Gesture
  id: Gesture
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: Gesture
  nameWithType: KeyBinding.Gesture
  fullName: System.Windows.Input.KeyBinding.Gesture
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Pobiera lub ustawia gestu skojarzony z tym <xref href=&quot;System.Windows.Input.KeyBinding&quot;> </xref>."
  remarks: "Z wyjątkiem klawiszy funkcyjnych i kluczach numerycznej <xref:System.Windows.Input.KeyGesture>musi zawierać <xref:System.Windows.Input.Key>i jeden lub więcej <xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.Key> </xref:System.Windows.Input.KeyGesture>"
  example:
  - "The following example shows how to bind a <xref:System.Windows.Input.KeyGesture> to a <xref:System.Windows.Input.RoutedCommand> using a <xref:System.Windows.Input.KeyBinding> (the markup and code examples specify different keys but are otherwise equivalent).  \n  \n [!code-xml[commandWithHandler#CommandHandlerKeyBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlerkeybinding)]  \n  \n [!code-cs[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithkeyandmodifiers)]"
  syntax:
    content: public override System.Windows.Input.InputGesture Gesture { get; set; }
    return:
      type: System.Windows.Input.InputGesture
      description: "Sekwencja klucza. Wartość domyślna to <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Input.KeyBinding.Gesture*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "wartość <code> gesture </code> jest ustawiany jest <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>."
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.Key
  id: Key
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: Key
  nameWithType: KeyBinding.Key
  fullName: System.Windows.Input.KeyBinding.Key
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Pobiera lub ustawia <xref href=&quot;System.Windows.Input.Key&quot;> </xref> z <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref> skojarzony z tym <xref href=&quot;System.Windows.Input.KeyBinding&quot;> </xref>."
  remarks: "Z wyjątkiem klawiszy funkcyjnych i kluczach numerycznej <xref:System.Windows.Input.KeyGesture>musi zawierać <xref:System.Windows.Input.Key>i jeden lub więcej <xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.Key> </xref:System.Windows.Input.KeyGesture>       Podczas definiowania <xref:System.Windows.Input.KeyBinding>w [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] istnieją dwa sposoby określania <xref:System.Windows.Input.KeyGesture>.</xref:System.Windows.Input.KeyGesture> </xref:System.Windows.Input.KeyBinding> Pierwszym sposobem ustanowienia <xref:System.Windows.Input.KeyBinding>w [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] jest określenie <xref:System.Windows.Input.KeyBinding.Gesture%2A>atrybutu <xref:System.Windows.Input.KeyBinding>element, który umożliwia składni określić kluczy i Modyfikatory jako pojedynczy ciąg, na przykład &quot;CTRL + P&quot;.</xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.KeyBinding.Gesture%2A> </xref:System.Windows.Input.KeyBinding> Drugim sposobem jest określenie atrybutu klucza i <xref:System.Windows.Input.KeyBinding.Modifiers%2A>atrybuty <xref:System.Windows.Input.KeyBinding>elementu.</xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.KeyBinding.Modifiers%2A> Obie strony ustawienie <xref:System.Windows.Input.KeyGesture>są równoważne i modyfikować tego samego obiektu źródłowego, ale będzie konflikt, jeśli obie są używane.</xref:System.Windows.Input.KeyGesture>  W przypadku, gdy klucz, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>i <xref:System.Windows.Input.KeyBinding.Gesture%2A>atrybuty są gotowe, atrybut, który jest zdefiniowany ostatnio zostanie użyty dla <xref:System.Windows.Input.KeyGesture>.</xref:System.Windows.Input.KeyGesture> </xref:System.Windows.Input.KeyBinding.Gesture%2A> </xref:System.Windows.Input.KeyBinding.Modifiers%2A> Program może potencjalnie sytuacji, gdy na przykład zestaw klucza ostatniego zostanie zastąpić tylko składnik klucza poprzedniego gestu, ale Modyfikatory gestu pozostaną bez zmian. Ogólnie rzecz biorąc, zaleca się używanie tylko <xref:System.Windows.Input.KeyBinding.Gesture%2A>atrybutu z [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]; to uniknąć niejednoznaczności, zapewnia najbardziej prostsze składni i zapewnia najbardziej oczywistym reprezentacja serializacji.</xref:System.Windows.Input.KeyBinding.Gesture%2A>"
  syntax:
    content: public System.Windows.Input.Key Key { get; set; }
    return:
      type: System.Windows.Input.Key
      description: "Część klucza <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>. Wartość domyślna to <xref href=&quot;System.Windows.Input.Key&quot;> </xref>."
  overload: System.Windows.Input.KeyBinding.Key*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.KeyProperty
  id: KeyProperty
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: KeyProperty
  nameWithType: KeyBinding.KeyProperty
  fullName: System.Windows.Input.KeyBinding.KeyProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Identyfikuje <xref:System.Windows.Input.KeyBinding.Key*>Właściwości zależności.</xref:System.Windows.Input.KeyBinding.Key*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty KeyProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.Modifiers
  id: Modifiers
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: Modifiers
  nameWithType: KeyBinding.Modifiers
  fullName: System.Windows.Input.KeyBinding.Modifiers
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Pobiera lub ustawia <xref href=&quot;System.Windows.Input.ModifierKeys&quot;> </xref> z <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref> skojarzony z tym <xref href=&quot;System.Windows.Input.KeyBinding&quot;> </xref>."
  remarks: "Z wyjątkiem klawiszy funkcyjnych i kluczach numerycznej <xref:System.Windows.Input.KeyGesture>musi zawierać <xref:System.Windows.Input.Key>i jeden lub więcej <xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.Key> </xref:System.Windows.Input.KeyGesture>       Podczas definiowania <xref:System.Windows.Input.KeyBinding>w [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] istnieją dwa sposoby określania <xref:System.Windows.Input.KeyGesture>.</xref:System.Windows.Input.KeyGesture> </xref:System.Windows.Input.KeyBinding> Pierwszym sposobem ustanowienia <xref:System.Windows.Input.KeyBinding>w [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] jest określenie <xref:System.Windows.Input.KeyBinding.Gesture%2A>atrybutu <xref:System.Windows.Input.KeyBinding>element, który umożliwia składni określić kluczy i Modyfikatory jako pojedynczy ciąg, na przykład &quot;CTRL + P&quot;.</xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.KeyBinding.Gesture%2A> </xref:System.Windows.Input.KeyBinding> Drugim sposobem jest zdefiniowanie <xref:System.Windows.Input.KeyBinding.Key%2A>atrybutu i atrybuty Modyfikatory <xref:System.Windows.Input.KeyBinding>elementu.</xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.KeyBinding.Key%2A> Obie strony ustawienie <xref:System.Windows.Input.KeyGesture>są równoważne i modyfikować tego samego obiektu źródłowego, ale będzie konflikt, jeśli obie są używane.</xref:System.Windows.Input.KeyGesture>  W przypadku gdy <xref:System.Windows.Input.KeyBinding.Key%2A>, Modyfikatory i <xref:System.Windows.Input.KeyBinding.Gesture%2A>atrybuty są ustawione, atrybut, który jest zdefiniowany w ostatniej zostanie użyty dla <xref:System.Windows.Input.KeyGesture>.</xref:System.Windows.Input.KeyGesture> </xref:System.Windows.Input.KeyBinding.Gesture%2A> </xref:System.Windows.Input.KeyBinding.Key%2A> Potencjalnie może mieć sytuacji, gdy na przykład <xref:System.Windows.Input.KeyBinding.Key%2A>zestaw ostatnio będzie zastąpić tylko składnik klucza poprzedniego gestu, ale pozostawić Modyfikatory gestu takie same.</xref:System.Windows.Input.KeyBinding.Key%2A> Ogólnie rzecz biorąc, zaleca się używanie tylko <xref:System.Windows.Input.KeyBinding.Gesture%2A>atrybutu z [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]; to uniknąć niejednoznaczności, zapewnia najbardziej prostsze składni i zapewnia najbardziej oczywistym reprezentacja serializacji.</xref:System.Windows.Input.KeyBinding.Gesture%2A>      <a name=&quot;xamlAttributeUsage_Modifiers&quot;></a>## Użycie atrybutu XAML ```   <object Modifiers=&quot;oneOrMoreModifierKeys&quot;/>      ``` <a name=&quot;xamlValues_Modifiers&quot;> </a> ## wartości XAML *oneOrMoreModifierKeys* klawisze modyfikujące, zdefiniowane przez <xref:System.Windows.Input.ModifierKeys>Wyliczenie rozdzielone znakiem &quot;+&quot;.</xref:System.Windows.Input.ModifierKeys>      "
  syntax:
    content: public System.Windows.Input.ModifierKeys Modifiers { get; set; }
    return:
      type: System.Windows.Input.ModifierKeys
      description: "Klawisze modyfikujące z <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>.  Wartość domyślna to <xref href=&quot;System.Windows.Input.ModifierKeys&quot;> </xref>."
  overload: System.Windows.Input.KeyBinding.Modifiers*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.ModifiersProperty
  id: ModifiersProperty
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: ModifiersProperty
  nameWithType: KeyBinding.ModifiersProperty
  fullName: System.Windows.Input.KeyBinding.ModifiersProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Identyfikuje <xref:System.Windows.Input.KeyBinding.Modifiers*>Właściwości zależności.</xref:System.Windows.Input.KeyBinding.Modifiers*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ModifiersProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.InputBinding
  isExternal: false
  name: System.Windows.Input.InputBinding
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.Input.KeyBinding.#ctor
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: KeyBinding()
  nameWithType: KeyBinding.KeyBinding()
  fullName: System.Windows.Input.KeyBinding.KeyBinding()
- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: KeyBinding(ICommand,KeyGesture)
  nameWithType: KeyBinding.KeyBinding(ICommand,KeyGesture)
  fullName: System.Windows.Input.KeyBinding.KeyBinding(ICommand,KeyGesture)
- uid: System.Windows.Input.ICommand
  parent: System.Windows.Input
  isExternal: true
  name: ICommand
  nameWithType: ICommand
  fullName: System.Windows.Input.ICommand
- uid: System.Windows.Input.KeyGesture
  parent: System.Windows.Input
  isExternal: false
  name: KeyGesture
  nameWithType: KeyGesture
  fullName: System.Windows.Input.KeyGesture
- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: KeyBinding(ICommand,Key,ModifierKeys)
  nameWithType: KeyBinding.KeyBinding(ICommand,Key,ModifierKeys)
  fullName: System.Windows.Input.KeyBinding.KeyBinding(ICommand,Key,ModifierKeys)
- uid: System.Windows.Input.Key
  parent: System.Windows.Input
  isExternal: false
  name: Key
  nameWithType: Key
  fullName: System.Windows.Input.Key
- uid: System.Windows.Input.ModifierKeys
  parent: System.Windows.Input
  isExternal: false
  name: ModifierKeys
  nameWithType: ModifierKeys
  fullName: System.Windows.Input.ModifierKeys
- uid: System.Windows.Input.KeyBinding.CreateInstanceCore
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: CreateInstanceCore()
  nameWithType: KeyBinding.CreateInstanceCore()
  fullName: System.Windows.Input.KeyBinding.CreateInstanceCore()
- uid: System.Windows.Freezable
  parent: System.Windows
  isExternal: false
  name: Freezable
  nameWithType: Freezable
  fullName: System.Windows.Freezable
- uid: System.Windows.Input.KeyBinding.Gesture
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Gesture
  nameWithType: KeyBinding.Gesture
  fullName: System.Windows.Input.KeyBinding.Gesture
- uid: System.Windows.Input.InputGesture
  parent: System.Windows.Input
  isExternal: false
  name: InputGesture
  nameWithType: InputGesture
  fullName: System.Windows.Input.InputGesture
- uid: System.Windows.Input.KeyBinding.Key
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Key
  nameWithType: KeyBinding.Key
  fullName: System.Windows.Input.KeyBinding.Key
- uid: System.Windows.Input.KeyBinding.KeyProperty
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: KeyProperty
  nameWithType: KeyBinding.KeyProperty
  fullName: System.Windows.Input.KeyBinding.KeyProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Input.KeyBinding.Modifiers
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Modifiers
  nameWithType: KeyBinding.Modifiers
  fullName: System.Windows.Input.KeyBinding.Modifiers
- uid: System.Windows.Input.KeyBinding.ModifiersProperty
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: ModifiersProperty
  nameWithType: KeyBinding.ModifiersProperty
  fullName: System.Windows.Input.KeyBinding.ModifiersProperty
- uid: System.Windows.Input.KeyBinding.#ctor*
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: KeyBinding
  nameWithType: KeyBinding.KeyBinding
- uid: System.Windows.Input.KeyBinding.CreateInstanceCore*
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: CreateInstanceCore
  nameWithType: KeyBinding.CreateInstanceCore
- uid: System.Windows.Input.KeyBinding.Gesture*
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Gesture
  nameWithType: KeyBinding.Gesture
- uid: System.Windows.Input.KeyBinding.Key*
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Key
  nameWithType: KeyBinding.Key
- uid: System.Windows.Input.KeyBinding.Modifiers*
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Modifiers
  nameWithType: KeyBinding.Modifiers
