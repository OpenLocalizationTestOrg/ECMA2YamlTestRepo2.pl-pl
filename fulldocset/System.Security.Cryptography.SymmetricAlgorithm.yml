### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.SymmetricAlgorithm
  id: SymmetricAlgorithm
  children:
  - System.Security.Cryptography.SymmetricAlgorithm.#ctor
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.Clear
  - System.Security.Cryptography.SymmetricAlgorithm.Create
  - System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)
  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.SymmetricAlgorithm.Dispose
  - System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
  - System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
  - System.Security.Cryptography.SymmetricAlgorithm.IV
  - System.Security.Cryptography.SymmetricAlgorithm.IVValue
  - System.Security.Cryptography.SymmetricAlgorithm.Key
  - System.Security.Cryptography.SymmetricAlgorithm.KeySize
  - System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.Mode
  - System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  - System.Security.Cryptography.SymmetricAlgorithm.Padding
  - System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  - System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)
  langs:
  - csharp
  name: SymmetricAlgorithm
  nameWithType: SymmetricAlgorithm
  fullName: System.Security.Cryptography.SymmetricAlgorithm
  type: Class
  summary: "Reprezentuje abstrakcyjna klasa podstawowa, w którym wszystkie implementacje symetryczne algorytmy musi dziedziczyć."
  remarks: "Tryb CBC, cipher block chaining (CBC), nazywany użyć klasy, które pochodzi z klasy SymmetricAlgorithm co wymaga klucza (<xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>) i wektor inicjowania (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>) do wykonania kryptograficznych przekształcenia danych.</xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A> </xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>  Aby odszyfrować dane, która została zaszyfrowana przy użyciu jednej z klas SymmetricAlgorithm, należy ustawić <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>Właściwości i <xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>Właściwości na te same wartości, które były używane do szyfrowania.</xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A> </xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>  Dla algorytmu symetrycznego powinna być użyteczna klucz tajny musi być znane tylko do nadawcy i odbiorcy.       <xref:System.Security.Cryptography.RijndaelManaged>, <xref:System.Security.Cryptography.DESCryptoServiceProvider>, <xref:System.Security.Cryptography.RC2CryptoServiceProvider>, i <xref:System.Security.Cryptography.TripleDESCryptoServiceProvider>są implementacje algorytmy symetryczne.</xref:System.Security.Cryptography.TripleDESCryptoServiceProvider> </xref:System.Security.Cryptography.RC2CryptoServiceProvider> </xref:System.Security.Cryptography.DESCryptoServiceProvider></xref:System.Security.Cryptography.RijndaelManaged>       Należy pamiętać, że przy użyciu klasy pochodne nie ma wystarczającej ilości, z punktu widzenia zabezpieczeń, aby wymusić po prostu wyrzucania elementów bezużytecznych, po zakończeniu przy użyciu obiektu. Należy jawnie wywołać <xref:System.Security.Cryptography.SymmetricAlgorithm.Clear%2A>metody dla obiekt do zera się żadnych poufnych danych w obiekcie przed zwolnieniem.</xref:System.Security.Cryptography.SymmetricAlgorithm.Clear%2A> Pamiętaj, że pamięci nie jest zerowa poza zawartość zebranych obiektów, ale po prostu oznacza pamięci dostępnej dla; Ponowna alokacja. W związku z tym dane zawarte w obiekcie zebranych pamięci może nadal znajdować się w pamięci sterty w pamięci nieprzydzielonego. W przypadku obiektów kryptograficznych te dane mogą zawierać poufne informacje, takie jak dane klucza lub blok zwykłego tekstu.       Wszystkie kryptograficznych klas w programie .NET Framework, zawierających poufne dane wdrożenie `Clear` metody. Po wywołaniu `Clear` — metoda spowoduje zastąpienie wszystkich danych poufnych w obiekt zerami, a następnie zwalnia obiekt, dzięki czemu można bezpiecznie bezużytecznych. Gdy obiekt został mają być wyzerowane i opublikowany, powinny wywoływać `Dispose` metody z `disposing` ustawiona `True` zlikwidować wszystkie zarządzane i niezarządzane zasoby skojarzone z obiektem."
  example:
  - "The following code example uses the <xref:System.Security.Cryptography.RijndaelManaged> class with the specified <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> property and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>) to encrypt a file specified by `inName`, and outputs the encrypted result to the file specified by `outName`. The `desKey` and `desIV` parameters to the method are 8-byte arrays. You must have the high encryption pack installed to run this example.  \n  \n [!code-cpp[Classic CryptoStream Example#1](~/add/codesnippet/cpp/t-system.security.crypto_19_1.cpp)]\n [!code-cs[Classic CryptoStream Example#1](~/add/codesnippet/csharp/t-system.security.crypto_19_1.cs)]\n [!code-vb[Classic CryptoStream Example#1](~/add/codesnippet/visualbasic/t-system.security.crypto_19_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class SymmetricAlgorithm : IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: SymmetricAlgorithm()
  nameWithType: SymmetricAlgorithm.SymmetricAlgorithm()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.SymmetricAlgorithm()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Security.Cryptography.SymmetricAlgorithm&quot;> </xref> klasy."
  remarks: "Nie można utworzyć wystąpienia klasy abstrakcyjnej. Kod aplikacji tworzy nowe wystąpienie klasy pochodnej."
  syntax:
    content: protected SymmetricAlgorithm ();
    parameters: []
  overload: System.Security.Cryptography.SymmetricAlgorithm.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Implementacja klasy pochodzące z algorytmu symetrycznego jest nieprawidłowy."
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  id: BlockSize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: BlockSize
  nameWithType: SymmetricAlgorithm.BlockSize
  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Pobiera lub ustawia rozmiar bloku w bitach operacji kryptograficznych."
  remarks: "Rozmiar bloku jest podstawową jednostką danych, które mogą być szyfrowane lub odszyfrować w jednej operacji. Komunikaty dłużej niż rozmiar bloku są obsługiwane jako kolejnych bloków; krótszy niż rozmiar bloku komunikatów musi być wypełniane dodatkowe bity do osiągnięcia rozmiaru bloku. Nieprawidłowy blok rozmiary są określane przez algorytmu symetrycznego używane."
  syntax:
    content: public virtual int BlockSize { get; set; }
    return:
      type: System.Int32
      description: "Rozmiar bloku w bitach."
  overload: System.Security.Cryptography.SymmetricAlgorithm.BlockSize*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Rozmiar bloku jest nieprawidłowy."
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  id: BlockSizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: BlockSizeValue
  nameWithType: SymmetricAlgorithm.BlockSizeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Reprezentuje rozmiar bloku, w bitach operacji kryptograficznych."
  remarks: "Rozmiar bloku jest podstawową jednostką danych, które mogą być szyfrowane lub odszyfrować w jednej operacji. Komunikaty dłużej niż rozmiar bloku są obsługiwane jako kolejnych bloków; krótszy niż rozmiar bloku komunikatów musi być wypełniane dodatkowe bity do osiągnięcia rozmiaru bloku. Nieprawidłowy blok rozmiary są określane przez algorytmu symetrycznego używane.       To pole jest dostępny za pośrednictwem <xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSize%2A>Właściwości.</xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSize%2A>"
  syntax:
    content: protected int BlockSizeValue;
    return:
      type: System.Int32
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Clear
  id: Clear
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Clear()
  nameWithType: SymmetricAlgorithm.Clear()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Zwalnia wszelkie zasoby używane przez <xref href=&quot;System.Security.Cryptography.SymmetricAlgorithm&quot;> </xref> klasy."
  remarks: "Należy pamiętać, że przy użyciu klasy pochodne nie ma wystarczającej ilości, z punktu widzenia zabezpieczeń, aby wymusić po prostu wyrzucania elementów bezużytecznych, po zakończeniu przy użyciu obiektu. Clear — metoda musi jawnie wywołać obiektu na zero się żadnych poufnych danych w obrębie obiektu przed zwolnieniem. Pamiętaj, że pamięci nie jest zerowa poza zawartość zebranych obiektów, ale po prostu oznacza pamięci dostępnej dla; Ponowna alokacja. W związku z tym dane zawarte w obiekcie zebranych pamięci może nadal znajdować się w pamięci sterty w pamięci nieprzydzielonego. W przypadku obiektów kryptograficznych te dane mogą zawierać poufne informacje, takie jak dane klucza lub blok zwykłego tekstu.       Wszystkie kryptograficznych klas w programie .NET Framework, zawierających poufne dane wdrożenie `Clear` metody. Po wywołaniu `Clear` — metoda spowoduje zastąpienie wszystkich danych poufnych w obiekt zerami, a następnie zwalnia obiekt, dzięki czemu można bezpiecznie bezużytecznych. Gdy obiekt został mają być wyzerowane i opublikowany, powinny wywoływać `Dispose` metody z `disposing` ustawiona `True` zlikwidować wszystkie zarządzane i niezarządzane zasoby skojarzone z obiektem."
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.Cryptography.SymmetricAlgorithm.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Create
  id: Create
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Create()
  nameWithType: SymmetricAlgorithm.Create()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Tworzy domyślny obiekt kryptograficzne używane do wykonywania algorytmu symetrycznego."
  remarks: ''
  example:
  - "The following code example uses the <xref:System.Security.Cryptography.RijndaelManaged> class with the specified <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> property and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>) to encrypt a file specified by `inName`, and outputs the encrypted result to the file specified by `outName`. The `desKey` and `desIV` parameters to the method are 8-byte arrays. You must have the high encryption pack installed to run this example.  \n  \n [!code-cpp[Classic CryptoStream Example#1](~/add/codesnippet/cpp/m-system.security.crypto_114_1.cpp)]\n [!code-cs[Classic CryptoStream Example#1](~/add/codesnippet/csharp/m-system.security.crypto_114_1.cs)]\n [!code-vb[Classic CryptoStream Example#1](~/add/codesnippet/visualbasic/m-system.security.crypto_114_1.vb)]"
  syntax:
    content: public static System.Security.Cryptography.SymmetricAlgorithm Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.SymmetricAlgorithm
      description: "Domyślny obiekt kryptograficzne używane do wykonywania algorytmu symetrycznego."
  overload: System.Security.Cryptography.SymmetricAlgorithm.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Create(String)
  nameWithType: SymmetricAlgorithm.Create(String)
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Tworzy określony obiekt kryptograficzne używane do wykonywania algorytmu symetrycznego."
  syntax:
    content: public static System.Security.Cryptography.SymmetricAlgorithm Create (string algName);
    parameters:
    - id: algName
      type: System.String
      description: "Nazwa określonej implementacji <xref href=&quot;System.Security.Cryptography.SymmetricAlgorithm&quot;> </xref> klasy do użycia."
    return:
      type: System.Security.Cryptography.SymmetricAlgorithm
      description: "Obiekt kryptograficzne używane do wykonywania algorytmu symetrycznego."
  overload: System.Security.Cryptography.SymmetricAlgorithm.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
  id: CreateDecryptor
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: CreateDecryptor()
  nameWithType: SymmetricAlgorithm.CreateDecryptor()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Tworzy obiekt deskryptora symetrycznego z bieżącym <> </> *> właściwości i wektora inicjowania (<>*>)."
  remarks: "Ta metoda odszyfrowuje wiadomość zaszyfrowaną utworzone za pomocą <xref:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor%2A>przeciążenia o tej samej sygnaturze.</xref:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor%2A>"
  syntax:
    content: public virtual System.Security.Cryptography.ICryptoTransform CreateDecryptor ();
    parameters: []
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "Obiekt deskryptora symetrycznego."
  overload: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])
  id: CreateDecryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: CreateDecryptor(Byte[],Byte[])
  nameWithType: SymmetricAlgorithm.CreateDecryptor(Byte[],Byte[])
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(Byte[],Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "W przypadku przesłonięcia w klasie pochodnej tworzy obiekt deskryptora symetrycznego z określonym <> </> *> właściwości i wektora inicjowania (<>*>)."
  remarks: "Ta metoda odszyfrowuje wiadomość zaszyfrowaną utworzone za pomocą <xref:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor%2A>przeciążenia z takimi samymi parametrami.</xref:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor%2A>"
  syntax:
    content: public abstract System.Security.Cryptography.ICryptoTransform CreateDecryptor (byte[] rgbKey, byte[] rgbIV);
    parameters:
    - id: rgbKey
      type: System.Byte[]
      description: "Klucz tajny dla algorytmu symetrycznego."
    - id: rgbIV
      type: System.Byte[]
      description: "Wektor inicjowania dla algorytmu symetrycznego."
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "Obiekt deskryptora symetrycznego."
  overload: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
  id: CreateEncryptor
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: CreateEncryptor()
  nameWithType: SymmetricAlgorithm.CreateEncryptor()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Tworzy obiekt symetrycznego modułu szyfrującego z bieżącym <> </> *> właściwości i wektora inicjowania (<>*>)."
  remarks: "Jeśli bieżący <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>właściwość jest `null`, <xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A>— Metoda jest wywoływana w celu utworzenia nowego losowe <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>.</xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> </xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A> </xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> Jeśli bieżący <xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>właściwość jest `null`, <xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV%2A>— Metoda jest wywoływana w celu utworzenia nowego losowe <xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>.</xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A> </xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV%2A> </xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>       Użyj <xref:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor%2A>przeciążenia o tej samej sygnaturze, aby odszyfrować wyniku tej metody.</xref:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor%2A>"
  example:
  - "The following example encrypts a string using the transform object returned from the CreateEncryptor method.  \n  \n [!code-cpp[System.Security.Cryptography.SymmetricAlgorithm#1](~/add/codesnippet/cpp/m-system.security.crypto_124_1.cpp)]\n [!code-cs[System.Security.Cryptography.SymmetricAlgorithm#1](~/add/codesnippet/csharp/m-system.security.crypto_124_1.cs)]\n [!code-vb[System.Security.Cryptography.SymmetricAlgorithm#1](~/add/codesnippet/visualbasic/m-system.security.crypto_124_1.vb)]"
  syntax:
    content: public virtual System.Security.Cryptography.ICryptoTransform CreateEncryptor ();
    parameters: []
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "Obiekt symetrycznego modułu szyfrującego."
  overload: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])
  id: CreateEncryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: CreateEncryptor(Byte[],Byte[])
  nameWithType: SymmetricAlgorithm.CreateEncryptor(Byte[],Byte[])
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(Byte[],Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "W przypadku przesłonięcia w klasie pochodnej tworzy obiekt symetrycznego modułu szyfrującego z określonym <> </> *> właściwości i wektora inicjowania (<>*>)."
  remarks: "Użyj <xref:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor%2A>przeciążenia z takimi samymi parametrami odszyfrować wyniku tej metody.</xref:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor%2A>"
  syntax:
    content: public abstract System.Security.Cryptography.ICryptoTransform CreateEncryptor (byte[] rgbKey, byte[] rgbIV);
    parameters:
    - id: rgbKey
      type: System.Byte[]
      description: "Klucz tajny dla algorytmu symetrycznego."
    - id: rgbIV
      type: System.Byte[]
      description: "Wektor inicjowania dla algorytmu symetrycznego."
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "Obiekt symetrycznego modułu szyfrującego."
  overload: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose
  id: Dispose
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Dispose()
  nameWithType: SymmetricAlgorithm.Dispose()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Zwalnia wszelkie zasoby używane przez bieżące wystąpienie klasy <xref href=&quot;System.Security.Cryptography.SymmetricAlgorithm&quot;> </xref> klasy."
  remarks: "Wywołanie `Dispose` po zakończeniu przy użyciu <xref:System.Security.Cryptography.SymmetricAlgorithm>.</xref:System.Security.Cryptography.SymmetricAlgorithm> `Dispose` Pozostawia metody <xref:System.Security.Cryptography.SymmetricAlgorithm>w stanie uniemożliwiającym jego używanie.</xref:System.Security.Cryptography.SymmetricAlgorithm> Po wywołaniu `Dispose`, konieczne jest zwolnienie wszystkich odwołań do <xref:System.Security.Cryptography.SymmetricAlgorithm>, moduł zbierający elementy bezużyteczne mógł odzyskać pamięć który <xref:System.Security.Cryptography.SymmetricAlgorithm>klasy.</xref:System.Security.Cryptography.SymmetricAlgorithm> </xref:System.Security.Cryptography.SymmetricAlgorithm>       Aby uzyskać więcej informacji, zobacz [czyszczenie zasobów niezarządzanych](~/add/includes/ajax-current-ext-md.md) i [implementacja metody Dispose](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Wywołania zawsze `Dispose` przed zwolnieniem ostatniego odwołania do <xref:System.Security.Cryptography.SymmetricAlgorithm>.</xref:System.Security.Cryptography.SymmetricAlgorithm> W przeciwnym razie używa zasobów nie zostanie zwolniona do wywołania modułu zbierającego elementy bezużyteczne <xref:System.Security.Cryptography.SymmetricAlgorithm>obiektu `Finalize` metody.</xref:System.Security.Cryptography.SymmetricAlgorithm>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Cryptography.SymmetricAlgorithm.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SymmetricAlgorithm.Dispose(Boolean)
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Zwalnia zasoby niezarządzane używane przez <xref href=&quot;System.Security.Cryptography.SymmetricAlgorithm&quot;> </xref> i opcjonalnie zwalnia zasoby zarządzane."
  remarks: "Ta metoda jest wywoływana przez metodę publiczną `Dispose()` — metoda i `Finalize` metody. `Dispose()`wywołuje chronioną metodę `Dispose(Boolean)` metody z `disposing` ustawiono parametr `true`. `Finalize`wywołuje `Dispose` z `disposing` ustawioną `false`.       Gdy `disposing` parametr jest `true`, ta metoda zwalnia wszystkie zasoby zajmowane przez wszelkie obiekty zarządzane przez to <xref:System.Security.Cryptography.SymmetricAlgorithm>odwołań.</xref:System.Security.Cryptography.SymmetricAlgorithm> Ta metoda wywołuje `Dispose()` metody każdego odwołuje się do obiektu."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby zwolnić zasoby zarządzane i niezarządzane; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> aby zwolnić tylko zasoby niezarządzane."
  overload: System.Security.Cryptography.SymmetricAlgorithm.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
  id: FeedbackSize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: FeedbackSize
  nameWithType: SymmetricAlgorithm.FeedbackSize
  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Pobiera lub ustawia rozmiar opinii w bitach operacji kryptograficznych."
  remarks: "Rozmiar danych sprzężenia zwrotnego określa ilość danych, które są przekazywane do kolejnych szyfrowania lub odszyfrowywania operacji. Rozmiar danych sprzężenia zwrotnego nie może być większy niż rozmiar bloku."
  syntax:
    content: public virtual int FeedbackSize { get; set; }
    return:
      type: System.Int32
      description: "Rozmiar danych sprzężenia zwrotnego w bitach."
  overload: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Rozmiar danych sprzężenia zwrotnego jest większy niż rozmiar bloku."
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
  id: FeedbackSizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: FeedbackSizeValue
  nameWithType: SymmetricAlgorithm.FeedbackSizeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Reprezentuje rozmiar danych sprzężenia zwrotnego, w bitach operacji kryptograficznych."
  remarks: "Rozmiar danych sprzężenia zwrotnego określa ilość danych, które są przekazywane do kolejnych szyfrowania lub odszyfrowywania operacji. Rozmiar danych sprzężenia zwrotnego nie może być większy niż rozmiar bloku.       To pole jest dostępny za pośrednictwem <xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize%2A>Właściwości.</xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize%2A>"
  syntax:
    content: protected int FeedbackSizeValue;
    return:
      type: System.Int32
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
  id: GenerateIV
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: GenerateIV()
  nameWithType: SymmetricAlgorithm.GenerateIV()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "W przypadku przesłonięcia w klasie pochodnej generuje wektor inicjowania losowe (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV*>) do użycia dla tego algorytmu.</xref:System.Security.Cryptography.SymmetricAlgorithm.IV*>"
  remarks: "Ogólnie rzecz biorąc, nie istnieje przyczyna do używania tej metody, ponieważ `CreateEncryptor()` lub `CreateEncryptor(null, null)` automatycznie generuje zarówno wektor inicjowania i klucz. Można użyć ponownie wystąpienie elementu algorytmu symetrycznego o wektor inicjowania różnych przy użyciu metody GenerateIV."
  syntax:
    content: public abstract void GenerateIV ();
    parameters: []
  overload: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
  id: GenerateKey
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: GenerateKey()
  nameWithType: SymmetricAlgorithm.GenerateKey()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "W przypadku przesłonięcia w klasie pochodnej generuje klucz losowy (<xref:System.Security.Cryptography.SymmetricAlgorithm.Key*>) do użycia dla tego algorytmu.</xref:System.Security.Cryptography.SymmetricAlgorithm.Key*>"
  remarks: "Ogólnie rzecz biorąc, nie istnieje przyczyna do używania tej metody, ponieważ `CreateEncryptor()` lub `CreateEncryptor(null, null)` automatycznie generuje zarówno wektor inicjowania i klucz. Możesz użyć tej metody GenerateKey ponowne użycie wystąpienia algorytmu symetrycznego za pomocą innego klucza."
  syntax:
    content: public abstract void GenerateKey ();
    parameters: []
  overload: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.IV
  id: IV
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: IV
  nameWithType: SymmetricAlgorithm.IV
  fullName: System.Security.Cryptography.SymmetricAlgorithm.IV
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Pobiera lub ustawia wektor inicjowania (IV) dla algorytmu symetrycznego."
  remarks: "Właściwość IV automatycznie jest ustawiona na nową wartość losową, podczas tworzenia nowego wystąpienia jednego z <xref:System.Security.Cryptography.SymmetricAlgorithm>klas lub ręcznie wywołanie <xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV%2A>metody.</xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV%2A> </xref:System.Security.Cryptography.SymmetricAlgorithm>  Rozmiar właściwości IV musi być taka sama jak <xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSize%2A>Właściwości podzielić przez 8.</xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSize%2A>       Klasy, które pochodzą z <xref:System.Security.Cryptography.SymmetricAlgorithm>klasy użyj trybu CBC, cipher block chaining (CBC), nazywany co wymaga klucza i wektor inicjowania wykonania kryptograficznych przekształcenia danych.</xref:System.Security.Cryptography.SymmetricAlgorithm>  Do odszyfrowywania danych, która została zaszyfrowana przy użyciu jednej z <xref:System.Security.Cryptography.SymmetricAlgorithm>klasy, należy ustawić <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>Właściwości i IV na te same wartości, które były używane do szyfrowania.</xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> </xref:System.Security.Cryptography.SymmetricAlgorithm>       Dla danego klucza tajnego *k*, szyfrowania Prosty blok, który nie używa wektor inicjowania są szyfrowane tego samego bloku wejściowych zwykłego tekstu w tym samym bloku danych wyjściowych tekst zaszyfrowany. Jeśli masz zduplikowanych bloków w postaci zwykłego tekstu strumienia, konieczne będzie zduplikowanych bloków w ramach strumienia tekstu szyfrowania. Jeśli nieautoryzowani użytkownicy niczego wiedzieć o strukturze bloku zwykłego tekstu, może użyć tych informacji odszyfrować bloku tekstu znane szyfrowania i prawdopodobnie odzyskać klucza. Zwalczania ten problem, informacje z poprzedniego bloku jest łączony z procesem szyfrowania kolejnego bloku. W związku z tym różni się dane wyjściowe dwa bloki identyczne zwykłego tekstu. Ponieważ ta metoda używa poprzedniego bloku do szyfrowania kolejnego bloku, wektor inicjowania jest potrzebne do szyfrowania pierwszego bloku danych."
  syntax:
    content: public virtual byte[] IV { get; set; }
    return:
      type: System.Byte[]
      description: "Wektor inicjowania."
  overload: System.Security.Cryptography.SymmetricAlgorithm.IV*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Próbowano ustawić wektor inicjowania <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Próbowano ustawić wektor inicjowania nieprawidłowy rozmiar."
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.IVValue
  id: IVValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: IVValue
  nameWithType: SymmetricAlgorithm.IVValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.IVValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Reprezentuje wektor inicjowania (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV*>) dla algorytmu symetrycznego.</xref:System.Security.Cryptography.SymmetricAlgorithm.IV*>"
  remarks: "To pole jest dostępny za pośrednictwem <xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>Właściwości.</xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>"
  syntax:
    content: protected byte[] IVValue;
    return:
      type: System.Byte[]
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Key
  id: Key
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Key
  nameWithType: SymmetricAlgorithm.Key
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Key
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Pobiera lub ustawia klucz tajny dla algorytmu symetrycznego."
  remarks: "Klucz tajny jest używany do szyfrowania i odszyfrowywania. Dla algorytmu symetrycznego było pomyślne klucz tajny musi być znane tylko do nadawcy i odbiorcy. Prawidłowe rozmiary klucza są określone przez implementację konkretnego algorytmu symetrycznego i znajduje się w <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>Właściwości.</xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>       Jeśli ta właściwość jest `null` gdy jest używany, <xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A>Metoda jest wywoływana w celu utworzenia nowej wartości losowych.</xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A>"
  syntax:
    content: public virtual byte[] Key { get; set; }
    return:
      type: System.Byte[]
      description: "Klucz tajny dla algorytmu symetrycznego."
  overload: System.Security.Cryptography.SymmetricAlgorithm.Key*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Próbowano ustawić klucz <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Rozmiar klucza jest nieprawidłowy."
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySize
  id: KeySize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: KeySize
  nameWithType: SymmetricAlgorithm.KeySize
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Pobiera lub ustawia rozmiar w bitach, używany przez algorytmu symetrycznego klucza tajnego."
  remarks: "Prawidłowe rozmiary klucza są określone przez implementację konkretnego algorytmu symetrycznego i znajduje się w <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>Właściwości.</xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>"
  syntax:
    content: public virtual int KeySize { get; set; }
    return:
      type: System.Int32
      description: "Rozmiar w bitach, używany przez algorytmu symetrycznego klucza tajnego."
  overload: System.Security.Cryptography.SymmetricAlgorithm.KeySize*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Rozmiar klucza jest nieprawidłowy."
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  id: KeySizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: KeySizeValue
  nameWithType: SymmetricAlgorithm.KeySizeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Reprezentuje rozmiar w bitach używane przez algorytmu symetrycznego klucza tajnego."
  remarks: "Prawidłowe rozmiary klucza są określone przez implementację konkretnego algorytmu symetrycznego i znajduje się w <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>Właściwości.</xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>       To pole jest dostępny za pośrednictwem <xref:System.Security.Cryptography.SymmetricAlgorithm.KeySize%2A>Właściwości.</xref:System.Security.Cryptography.SymmetricAlgorithm.KeySize%2A>"
  syntax:
    content: protected int KeySizeValue;
    return:
      type: System.Int32
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  id: KeyValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: KeyValue
  nameWithType: SymmetricAlgorithm.KeyValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Reprezentuje klucz tajny dla algorytmu symetrycznego."
  remarks: "Klucz tajny jest używany do szyfrowania i odszyfrowywania. Dla algorytmu symetrycznego było pomyślne klucz tajny musi być znane tylko do nadawcy i odbiorcy. Prawidłowe rozmiary klucza są określone przez implementację konkretnego algorytmu symetrycznego i znajduje się w <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>Właściwości.</xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>       To pole jest dostępny za pośrednictwem <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>Właściwości.</xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>"
  syntax:
    content: protected byte[] KeyValue;
    return:
      type: System.Byte[]
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  id: LegalBlockSizes
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: LegalBlockSizes
  nameWithType: SymmetricAlgorithm.LegalBlockSizes
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Pobiera rozmiary bloków w bitach, które są obsługiwane przez algorytmu symetrycznego."
  remarks: "Algorytmu symetrycznego obsługuje tylko rozmiary bloków, które pasują do wpisu w tej macierzy."
  example:
  - "The following example shows the value of LegalBlockSizes for the symmetric algorithms.  \n  \n [!code-vb[System.Security.Cryptography.SymmetricAlgorithm.BlockSize#1](~/add/codesnippet/visualbasic/p-system.security.crypto_95_1.vb)]\n [!code-cs[System.Security.Cryptography.SymmetricAlgorithm.BlockSize#1](~/add/codesnippet/csharp/p-system.security.crypto_95_1.cs)]"
  syntax:
    content: public virtual System.Security.Cryptography.KeySizes[] LegalBlockSizes { get; }
    return:
      type: System.Security.Cryptography.KeySizes[]
      description: "Tablica zawiera rozmiary bloków obsługiwaną przez algorytm."
  overload: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  id: LegalBlockSizesValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: LegalBlockSizesValue
  nameWithType: SymmetricAlgorithm.LegalBlockSizesValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Określa rozmiary bloków w bitach, które są obsługiwane przez algorytmu symetrycznego."
  remarks: "Algorytmu symetrycznego obsługuje tylko rozmiary bloków, które pasują do wpisu w tej macierzy.       To pole jest dostępny za pośrednictwem <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes%2A>Właściwości.</xref:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes%2A>"
  syntax:
    content: protected System.Security.Cryptography.KeySizes[] LegalBlockSizesValue;
    return:
      type: System.Security.Cryptography.KeySizes[]
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  id: LegalKeySizes
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: LegalKeySizes
  nameWithType: SymmetricAlgorithm.LegalKeySizes
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Pobiera klucze kryptograficzne w bitach, które są obsługiwane przez algorytmu symetrycznego."
  remarks: "Algorytmu symetrycznego obsługuje tylko klucze kryptograficzne, które pasują do wpisu w tej macierzy."
  example:
  - "The following example shows the value of LegalKeySizes for the symmetric algorithms.  \n  \n [!code-vb[System.Security.Cryptography.SymmetricAlgorithm.BlockSize#1](~/add/codesnippet/visualbasic/p-system.security.crypto_72_1.vb)]\n [!code-cs[System.Security.Cryptography.SymmetricAlgorithm.BlockSize#1](~/add/codesnippet/csharp/p-system.security.crypto_72_1.cs)]"
  syntax:
    content: public virtual System.Security.Cryptography.KeySizes[] LegalKeySizes { get; }
    return:
      type: System.Security.Cryptography.KeySizes[]
      description: "Tablica, która zawiera klucze kryptograficzne obsługiwaną przez algorytm."
  overload: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  id: LegalKeySizesValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: LegalKeySizesValue
  nameWithType: SymmetricAlgorithm.LegalKeySizesValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Określa rozmiary klucza w bitach, które są obsługiwane przez algorytmu symetrycznego."
  remarks: "Algorytmu symetrycznego obsługuje tylko klucze kryptograficzne, które pasują do wpisu w tej macierzy.       To pole jest dostępny za pośrednictwem <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>Właściwości.</xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>"
  syntax:
    content: protected System.Security.Cryptography.KeySizes[] LegalKeySizesValue;
    return:
      type: System.Security.Cryptography.KeySizes[]
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Mode
  id: Mode
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Mode
  nameWithType: SymmetricAlgorithm.Mode
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Mode
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Pobiera lub ustawia tryb operacji algorytmu symetrycznego."
  remarks: "Zobacz <xref:System.Security.Cryptography.CipherMode>Wyliczenie opis określone tryby.</xref:System.Security.Cryptography.CipherMode>"
  syntax:
    content: public virtual System.Security.Cryptography.CipherMode Mode { get; set; }
    return:
      type: System.Security.Cryptography.CipherMode
      description: "Tryb operacji algorytmu symetrycznego. Wartość domyślna to <xref href=&quot;System.Security.Cryptography.CipherMode&quot;> </xref>."
  overload: System.Security.Cryptography.SymmetricAlgorithm.Mode*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Tryb szyfrowania nie jest jednym z <xref href=&quot;System.Security.Cryptography.CipherMode&quot;> </xref> wartości."
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  id: ModeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: ModeValue
  nameWithType: SymmetricAlgorithm.ModeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Reprezentuje tryb szyfrowania używany w algorytmu symetrycznego."
  remarks: "Zobacz <xref:System.Security.Cryptography.CipherMode>Wyliczenie opis określone tryby.</xref:System.Security.Cryptography.CipherMode>       To pole jest dostępny za pośrednictwem <xref:System.Security.Cryptography.SymmetricAlgorithm.Mode%2A>Właściwości.</xref:System.Security.Cryptography.SymmetricAlgorithm.Mode%2A>"
  syntax:
    content: protected System.Security.Cryptography.CipherMode ModeValue;
    return:
      type: System.Security.Cryptography.CipherMode
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Padding
  id: Padding
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Padding
  nameWithType: SymmetricAlgorithm.Padding
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Padding
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Pobiera lub ustawia tryb uzupełniania używane w algorytmu symetrycznego."
  remarks: "Większość wiadomości tekstowe składa się z liczbą bajtów, które wypełnia całkowicie bloków. Często nie ma wystarczającej liczby bajtów do wypełnienia ostatniego bloku. W takim przypadku ciąg uzupełnienie jest dodawany do tekstu. Na przykład jeśli długość bloku jest 64-bitowy, ostatniego bloku zawiera tylko 40 bitów 24 bity uzupełnienia zostaną dodane. Zobacz <xref:System.Security.Cryptography.PaddingMode>Wyliczenie opis określone tryby.</xref:System.Security.Cryptography.PaddingMode>"
  syntax:
    content: public virtual System.Security.Cryptography.PaddingMode Padding { get; set; }
    return:
      type: System.Security.Cryptography.PaddingMode
      description: "Tryb uzupełniania używane w algorytmu symetrycznego. Wartość domyślna to <xref href=&quot;System.Security.Cryptography.PaddingMode&quot;> </xref>."
  overload: System.Security.Cryptography.SymmetricAlgorithm.Padding*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Tryb uzupełniania nie jest jednym z <xref href=&quot;System.Security.Cryptography.PaddingMode&quot;> </xref> wartości."
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  id: PaddingValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: PaddingValue
  nameWithType: SymmetricAlgorithm.PaddingValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Reprezentuje tryb uzupełniania używane w algorytmu symetrycznego."
  remarks: "Większość wiadomości tekstowe składa się z liczbą bajtów, które wypełnia całkowicie bloków. Często nie ma wystarczającej liczby bajtów do wypełnienia ostatniego bloku. W takim przypadku ciąg uzupełnienie jest dodawany do tekstu. Na przykład jeśli długość bloku jest 64-bitowy, ostatniego bloku zawiera tylko 40 bitów 24 bity uzupełnienia zostaną dodane. Zobacz <xref:System.Security.Cryptography.PaddingMode>Wyliczenie opis określone tryby.</xref:System.Security.Cryptography.PaddingMode>       To pole jest dostępny za pośrednictwem <xref:System.Security.Cryptography.SymmetricAlgorithm.Padding%2A>Właściwości.</xref:System.Security.Cryptography.SymmetricAlgorithm.Padding%2A>"
  syntax:
    content: protected System.Security.Cryptography.PaddingMode PaddingValue;
    return:
      type: System.Security.Cryptography.PaddingMode
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)
  id: ValidKeySize(System.Int32)
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: ValidKeySize(Int32)
  nameWithType: SymmetricAlgorithm.ValidKeySize(Int32)
  fullName: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Określa, czy określony rozmiar klucza jest nieprawidłowy dla bieżącego algorytmu."
  syntax:
    content: public bool ValidKeySize (int bitLength);
    parameters:
    - id: bitLength
      type: System.Int32
      description: "Długość w bitach, aby sprawdzić, czy prawidłowy rozmiar klucza."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli określony rozmiar klucza jest nieprawidłowy dla bieżącego algorytmu; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.SymmetricAlgorithm.#ctor
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: SymmetricAlgorithm()
  nameWithType: SymmetricAlgorithm.SymmetricAlgorithm()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.SymmetricAlgorithm()
- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: BlockSize
  nameWithType: SymmetricAlgorithm.BlockSize
  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: BlockSizeValue
  nameWithType: SymmetricAlgorithm.BlockSizeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.Clear
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Clear()
  nameWithType: SymmetricAlgorithm.Clear()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Clear()
- uid: System.Security.Cryptography.SymmetricAlgorithm.Create
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Create()
  nameWithType: SymmetricAlgorithm.Create()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Create()
- uid: System.Security.Cryptography.SymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: SymmetricAlgorithm
  nameWithType: SymmetricAlgorithm
  fullName: System.Security.Cryptography.SymmetricAlgorithm
- uid: System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Create(String)
  nameWithType: SymmetricAlgorithm.Create(String)
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: CreateDecryptor()
  nameWithType: SymmetricAlgorithm.CreateDecryptor()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor()
- uid: System.Security.Cryptography.ICryptoTransform
  parent: System.Security.Cryptography
  isExternal: false
  name: ICryptoTransform
  nameWithType: ICryptoTransform
  fullName: System.Security.Cryptography.ICryptoTransform
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: CreateDecryptor(Byte[],Byte[])
  nameWithType: SymmetricAlgorithm.CreateDecryptor(Byte[],Byte[])
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(Byte[],Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: CreateEncryptor()
  nameWithType: SymmetricAlgorithm.CreateEncryptor()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor()
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: CreateEncryptor(Byte[],Byte[])
  nameWithType: SymmetricAlgorithm.CreateEncryptor(Byte[],Byte[])
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(Byte[],Byte[])
- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Dispose()
  nameWithType: SymmetricAlgorithm.Dispose()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose()
- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SymmetricAlgorithm.Dispose(Boolean)
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: FeedbackSize
  nameWithType: SymmetricAlgorithm.FeedbackSize
  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: FeedbackSizeValue
  nameWithType: SymmetricAlgorithm.FeedbackSizeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: GenerateIV()
  nameWithType: SymmetricAlgorithm.GenerateIV()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV()
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: GenerateKey()
  nameWithType: SymmetricAlgorithm.GenerateKey()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey()
- uid: System.Security.Cryptography.SymmetricAlgorithm.IV
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: IV
  nameWithType: SymmetricAlgorithm.IV
  fullName: System.Security.Cryptography.SymmetricAlgorithm.IV
- uid: System.Security.Cryptography.SymmetricAlgorithm.IVValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: IVValue
  nameWithType: SymmetricAlgorithm.IVValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.IVValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.Key
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Key
  nameWithType: SymmetricAlgorithm.Key
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Key
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: KeySize
  nameWithType: SymmetricAlgorithm.KeySize
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySize
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: KeySizeValue
  nameWithType: SymmetricAlgorithm.KeySizeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: KeyValue
  nameWithType: SymmetricAlgorithm.KeyValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeyValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: LegalBlockSizes
  nameWithType: SymmetricAlgorithm.LegalBlockSizes
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
- uid: System.Security.Cryptography.KeySizes[]
  parent: System.Security.Cryptography
  isExternal: false
  name: KeySizes
  nameWithType: KeySizes
  fullName: System.Security.Cryptography.KeySizes[]
  spec.csharp:
  - uid: System.Security.Cryptography.KeySizes
    name: KeySizes
    nameWithType: KeySizes
    fullName: KeySizes[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: LegalBlockSizesValue
  nameWithType: SymmetricAlgorithm.LegalBlockSizesValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: LegalKeySizes
  nameWithType: SymmetricAlgorithm.LegalKeySizes
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: LegalKeySizesValue
  nameWithType: SymmetricAlgorithm.LegalKeySizesValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.Mode
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Mode
  nameWithType: SymmetricAlgorithm.Mode
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Mode
- uid: System.Security.Cryptography.CipherMode
  parent: System.Security.Cryptography
  isExternal: false
  name: CipherMode
  nameWithType: CipherMode
  fullName: System.Security.Cryptography.CipherMode
- uid: System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: ModeValue
  nameWithType: SymmetricAlgorithm.ModeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.ModeValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.Padding
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Padding
  nameWithType: SymmetricAlgorithm.Padding
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Padding
- uid: System.Security.Cryptography.PaddingMode
  parent: System.Security.Cryptography
  isExternal: false
  name: PaddingMode
  nameWithType: PaddingMode
  fullName: System.Security.Cryptography.PaddingMode
- uid: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: PaddingValue
  nameWithType: SymmetricAlgorithm.PaddingValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: ValidKeySize(Int32)
  nameWithType: SymmetricAlgorithm.ValidKeySize(Int32)
  fullName: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(Int32)
- uid: System.Security.Cryptography.SymmetricAlgorithm.#ctor*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: SymmetricAlgorithm
  nameWithType: SymmetricAlgorithm.SymmetricAlgorithm
- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSize*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: BlockSize
  nameWithType: SymmetricAlgorithm.BlockSize
- uid: System.Security.Cryptography.SymmetricAlgorithm.Clear*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Clear
  nameWithType: SymmetricAlgorithm.Clear
- uid: System.Security.Cryptography.SymmetricAlgorithm.Create*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Create
  nameWithType: SymmetricAlgorithm.Create
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: CreateDecryptor
  nameWithType: SymmetricAlgorithm.CreateDecryptor
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: CreateEncryptor
  nameWithType: SymmetricAlgorithm.CreateEncryptor
- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Dispose
  nameWithType: SymmetricAlgorithm.Dispose
- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: FeedbackSize
  nameWithType: SymmetricAlgorithm.FeedbackSize
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: GenerateIV
  nameWithType: SymmetricAlgorithm.GenerateIV
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: GenerateKey
  nameWithType: SymmetricAlgorithm.GenerateKey
- uid: System.Security.Cryptography.SymmetricAlgorithm.IV*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: IV
  nameWithType: SymmetricAlgorithm.IV
- uid: System.Security.Cryptography.SymmetricAlgorithm.Key*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Key
  nameWithType: SymmetricAlgorithm.Key
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySize*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: KeySize
  nameWithType: SymmetricAlgorithm.KeySize
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: LegalBlockSizes
  nameWithType: SymmetricAlgorithm.LegalBlockSizes
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: LegalKeySizes
  nameWithType: SymmetricAlgorithm.LegalKeySizes
- uid: System.Security.Cryptography.SymmetricAlgorithm.Mode*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Mode
  nameWithType: SymmetricAlgorithm.Mode
- uid: System.Security.Cryptography.SymmetricAlgorithm.Padding*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Padding
  nameWithType: SymmetricAlgorithm.Padding
- uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: ValidKeySize
  nameWithType: SymmetricAlgorithm.ValidKeySize
