### YamlMime:ManagedReference
items:
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  id: TtsEngineSsml
  children:
  - System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)
  - System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  - System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)
  - System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  - System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  langs:
  - csharp
  name: TtsEngineSsml
  nameWithType: TtsEngineSsml
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  type: Class
  summary: "Abstrakcyjna klasa podstawowa do zaimplementowania przez wszystkie aparaty syntezy tekst na mowę."
  remarks: "Do utworzenia aparatu niestandardowego tekstu na mowę, aplikacja zawsze musi implementować klasę pochodzącą od abstrakcyjna klasa podstawowa TtsEngineSsml.       Poprawnie zarejestrowanych implementacja TtsEngineSsml mogą być następnie używane jako `Synthesizer``Voice` przez <xref:System.Speech.Synthesis>aplikacje oparte na przestrzeni nazw.</xref:System.Speech.Synthesis>       Obiektów dziedziczących TtsEngineSsml musi zastępować następujących członków: <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.%23ctor%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A>i <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>.</xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> </xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> </xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A> </xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> </xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.%23ctor%2A>       Najważniejszym elementem członkowskim klasy TtsEngineSsml do zaimplementowania jest <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>metody.</xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>       <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>Metoda jest wywoływana przez parser tekst infrastruktury odbieranie: 1.</xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  Odwołanie do <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>interfejsu, która zapewnia dostęp do systemu usług takich jak nawet usługi kolejkowania wiadomości i zapisywanie wyjścia audio.</xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>      2.  Tablica <xref:System.Speech.Synthesis.TtsEngine.TextFragment>wystąpienia utworzone z mowy syntezy Markup Language (SSML) danych wejściowych.</xref:System.Speech.Synthesis.TtsEngine.TextFragment> Oprócz tekst, który ma być renderowany jako mowy, analiza SSML są przechowywane informacje o wymaganych atrybutów mowy w <xref:System.Speech.Synthesis.TtsEngine.FragmentState>wystąpienie skojarzone z każdym przychodzące <xref:System.Speech.Synthesis.TtsEngine.TextFragment>obiektu.</xref:System.Speech.Synthesis.TtsEngine.TextFragment> </xref:System.Speech.Synthesis.TtsEngine.FragmentState>       Aplikacja syntezatora mowy opcjonalnie mogą wysyłać żądania w formacie określonym produktem wyjściowym zaimplementowanie <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A>wywoływana przez platformę, gdy próbuje Podaj poprawne dane wyjściowe audio.</xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A>       Realizator można też podać pomocy technicznej do zarządzania przez ich implementacji i <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>.</xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A> </xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> definicje zewnętrzne wymowy lub leksykonów,"
  syntax:
    content: public abstract class TtsEngineSsml
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  langs:
  - csharp
  name: TtsEngineSsml(String)
  nameWithType: TtsEngineSsml.TtsEngineSsml(String)
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.TtsEngineSsml(String)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "Tworzy nowe wystąpienie klasy <xref href=&quot;System.Speech.Synthesis.TtsEngine.TtsEngineSsml&quot;> </xref> na podstawie odpowiednich głosu tokenu klucza rejestru."
  remarks: "Calls to this constructor are typically generated by <xref:System.Speech.Synthesis> based applications selecting a `Synthesizer``Voice` to be used by an instance of <xref:System.Speech.Synthesis.SpeechSynthesizer>.  \n  \n A <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> must be register under HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Speech\\Voices\\Tokens."
  syntax:
    content: protected TtsEngineSsml (string registryKey);
    parameters:
    - id: registryKey
      type: System.String
      description: "Pełna nazwa klucza rejestru, Token głosu skojarzone z <xref href=&quot;System.Speech.Synthesis.TtsEngine.TtsEngineSsml&quot;> </xref> implementacji. aparat."
  overload: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  id: AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  langs:
  - csharp
  name: AddLexicon(Uri,String,ITtsEngineSite)
  nameWithType: TtsEngineSsml.AddLexicon(Uri,String,ITtsEngineSite)
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(Uri,String,ITtsEngineSite)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "Dodaje leksykonie do <xref uid=&quot;langword_csharp_Synthesizer&quot; name=&quot;Synthesizer&quot; href=&quot;&quot;> </xref> <xref uid=&quot;langword_csharp_Voice&quot; name=&quot;Voice&quot; href=&quot;&quot;> </xref> zaimplementowana przez bieżące <xref href=&quot;System.Speech.Synthesis.TtsEngine.TtsEngineSsml&quot;> </xref> wystąpienia."
  remarks: "Leksykonie wymowy jest kolekcją słów ani fraz wraz z ich wymowy określona za pomocą alfabetu odpowiednie wymowy.       Ta metoda jest zazwyczaj wywoływana przez infrastrukturę platformy w odpowiedzi na <xref:System.Speech.Synthesis>aplikacje wywoływania AddLexicon i przy użyciu `Synthesizer``Voice` zaimplementowana przez bieżące <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>wystąpienia.</xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> </xref:System.Speech.Synthesis>       Wartość `mediaType` jest zazwyczaj specyfikację MIME zgodnie ze specyfikacją SSML używa MIME dla specyfikacji nośnika."
  example:
  - "The implementation of AddLexicon uses the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interface passed in to load a lexicon from a resource. It then stores a `System.IO.Stream` to the lexicon in a `System.Collections.Generic.Dictionary` instance, indexed by the lexicon URI.  \n  \n```  \npublic static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  \n  \n public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  \n    Stream stream = site.LoadResource(uri, mediaType);  \n    _aLexicons.Add(uri, stream);  \n}  \n  \n public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  \n     Stream stream;  \n     if (_aLexicons.TryGetValue(uri, out stream)) {  \n         stream.Close();  \n         _aLexicons.Remove(uri);  \n     }  \n}  \n  \n```"
  syntax:
    content: public abstract void AddLexicon (Uri uri, string mediaType, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);
    parameters:
    - id: uri
      type: System.Uri
      description: "Poprawne wystąpienie <xref uid=&quot;langword_csharp_System.Uri&quot; name=&quot;System.Uri&quot; href=&quot;&quot;> </xref> wskazującą położenie danych słownika."
    - id: mediaType
      type: System.String
      description: "Ciąg zawierający typ nośnika leksykonie. Typy nośnika są bez uwzględniania wielkości liter."
    - id: site
      type: System.Speech.Synthesis.TtsEngine.ITtsEngineSite
      description: "Odwołanie do <xref href=&quot;System.Speech.Synthesis.TtsEngine.ITtsEngineSite&quot;> </xref> interfejs używany do interakcji z infrastrukturą platformy."
  overload: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)
  id: GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  langs:
  - csharp
  name: GetOutputFormat(SpeakOutputFormat,IntPtr)
  nameWithType: TtsEngineSsml.GetOutputFormat(SpeakOutputFormat,IntPtr)
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(SpeakOutputFormat,IntPtr)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "Zwraca najlepiej dopasowaną wyjścia audio obsługiwane przez synthesize danego aparatu odpowiedzi na żądanie z aparatem Syntezator obsługi formatu określonego w danych wyjściowych."
  remarks: "Struktury używane jako `targetWaveFormat` i zwracany przez metodę powinien być zgodny z `WAVEFORMATEX` dostępnych w ramach SAPI, i powinna zostać przydzielona zwracanej wartości, przy użyciu `CoTaskMemAlloc`.       `struct` Podać funkcja:```   internal struct WaveFormat   {       public Int16 FormatTag;       public Int16 Channels;       public int SamplesPerSec;       public int AvgBytesPerSec;       public Int16 BlockAlign;       public Int16 BitsPerSample;       public Int16 Size;   }   ```"
  example:
  - "The sample implementation below validates selected inputs, using them if they are within tolerances, otherwise using default values.  \n  \n```  \npublic IntPtr GetOutputFormat(SpeakOutputFormat format, IntPtr targetWaveFormat) {  \n    WaveFormat waveFormat = new WaveFormat();  \n    WaveFormat rq=new WaveFormat();  \n    Marshal.PtrToStructure(targetWaveFormat,rq);  \n  \n    waveFormat.AvgBytesPerSec = AvgBytesPerSec Min < rq.AvgBytesPerSec && rq.AvgBytesPerSec < AvgBytesPerSecMax? rq.AvgBytesPerSec : 3200;  \n    waveFormat.BitsPerSample = BitsPerSampleMin < rq.AvgBytesPerSec && rq.BitsPerSample < BitsPerSampleMax ? rq.AvgBytesPerSec : 3200; 16;  \n    waveFormat.BlockAlign = 2;  \n    waveFormat.Channels = 1;  \n    waveFormat.FormatTag = 1;  \n    waveFormat.SamplesPerSec = 16000;  \n    waveFormat.Size = 0;  \n  \n    IntPtr wfx = Marshal.AllocCoTaskMem(Marshal.SizeOf(waveFormat));  \n    Marshal.StructureToPtr(waveFormat, wfx, false);  \n  \n    //Console.WriteLine (\"GetOutputFormat called\");  \n    return wfx;  \n}  \ninternal struct WaveFormat {  \n    public Int16 FormatTag;  \n    public Int16 Channels;  \n    public int SamplesPerSec;  \n    public int AvgBytesPerSec;  \n    public Int16 BlockAlign;  \n    public Int16 BitsPerSample;  \n    public Int16 Size;  \n}  \n```"
  syntax:
    content: public abstract IntPtr GetOutputFormat (System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);
    parameters:
    - id: speakOutputFormat
      type: System.Speech.Synthesis.TtsEngine.SpeakOutputFormat
      description: "Prawidłowymi elementami członkowskimi typu <xref href=&quot;System.Speech.Synthesis.TtsEngine.SpeakOutputFormat&quot;> </xref> Wyliczenie wskazujące typ formatu żądanego wyjścia audio."
    - id: targetWaveFormat
      type: System.IntPtr
      description: "Wskaźnik do <xref uid=&quot;langword_csharp_struct&quot; name=&quot;struct&quot; href=&quot;&quot;> </xref> zawierający ustawienia szczegółów dla typu audio format zażądał `speakOutputFormat` argumentu."
    return:
      type: System.IntPtr
      description: "Zwraca prawidłową <xref uid=&quot;langword_csharp_IntPtr&quot; name=&quot;IntPtr&quot; href=&quot;&quot;> </xref> odwołujących się do wystąpienia <xref uid=&quot;langword_csharp_struct&quot; name=&quot;struct&quot; href=&quot;&quot;> </xref> zawierający szczegółowe informacje o formacie wyjściowym."
  overload: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  id: RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  langs:
  - csharp
  name: RemoveLexicon(Uri,ITtsEngineSite)
  nameWithType: TtsEngineSsml.RemoveLexicon(Uri,ITtsEngineSite)
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(Uri,ITtsEngineSite)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "Usuwa słownika, w obecnie załadowanych przez <xref uid=&quot;langword_csharp_Synthesizer&quot; name=&quot;Synthesizer&quot; href=&quot;&quot;> </xref> <xref uid=&quot;langword_csharp_Voice&quot; name=&quot;Voice&quot; href=&quot;&quot;> </xref> zaimplementowana przez bieżące <xref href=&quot;System.Speech.Synthesis.TtsEngine.TtsEngineSsml&quot;> </xref> wystąpienia."
  remarks: "Leksykonie wymowy jest kolekcją słów ani fraz wraz z ich wymowy określona za pomocą alfabetu odpowiednie wymowy.       Ta metoda jest zazwyczaj wywoływana w odpowiedzi na <xref:System.Speech.Synthesis>aplikacje wywoływania <xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A>i przy użyciu `Synthesizer``Voice` zaimplementowana przez bieżące <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>wystąpienia.</xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> </xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A> </xref:System.Speech.Synthesis>"
  example:
  - "The implementation of RemoveLexicon uses the lexicon URI to query an instance `System.Collections.Generic.Dictionary` for the `System.IO.Stream`, closes the stream and removes the uri referring to the lexicon.  \n  \n```  \npublic static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  \n  \n public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  \n    Stream stream = site.LoadResource(uri, mediaType);  \n    _aLexicons.Add(uri, stream);  \n}  \n  \n public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  \n     Stream stream;  \n     if (_aLexicons.TryGetValue(uri, out stream)) {  \n         stream.Close();  \n         _aLexicons.Remove(uri);  \n     }  \n}  \n```"
  syntax:
    content: public abstract void RemoveLexicon (Uri uri, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);
    parameters:
    - id: uri
      type: System.Uri
      description: "Poprawne wystąpienie <xref uid=&quot;langword_csharp_System.Uri&quot; name=&quot;System.Uri&quot; href=&quot;&quot;> </xref> wskazującą położenie danych słownika."
    - id: site
      type: System.Speech.Synthesis.TtsEngine.ITtsEngineSite
      description: "Odwołanie do <xref href=&quot;System.Speech.Synthesis.TtsEngine.ITtsEngineSite&quot;> </xref> interfejsu przekazany przez infrastrukturę platformy, aby zezwolić na dostęp do zasobów infrastruktury."
  overload: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  id: Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  langs:
  - csharp
  name: Speak(TextFragment[],IntPtr,ITtsEngineSite)
  nameWithType: TtsEngineSsml.Speak(TextFragment[],IntPtr,ITtsEngineSite)
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(TextFragment[],IntPtr,ITtsEngineSite)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "Renderuje określony <xref href=&quot;System.Speech.Synthesis.TtsEngine.TextFragment&quot;> </xref> tablicy w formacie określonym produktem wyjściowym."
  remarks: "Struktury używane jako `waveHeader` i zwracany przez metodę powinien być zgodny z `WAVEFORMATEX` dostępnych w ramach SAPI.       `struct` Podać funkcja:```   internal struct WaveFormat   {       public Int16 FormatTag;       public Int16 Channels;       public int SamplesPerSec;       public int AvgBytesPerSec;       public Int16 BlockAlign;       public Int16 BitsPerSample;       public Int16 Size;   }   ```"
  example:
  - "The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  \n  \n The implementation of Speak  \n  \n1.  Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.  \n  \n2.  If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>, the implementation  \n  \n    -   Translates Americanism to Britishisms in the text to be spoken.  \n  \n    -   If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.  \n  \n3.  A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.  \n  \n```  \nprivate const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  \nprivate readonly char[] spaces = new char[] { ' ', '\\t', '\\r', '\\n' };  \ninternal struct UsVsUk  \n{  \n  internal string UK;  \n  internal string US;  \n}  \n  \noverride public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  \n{  \n  TextFragment [] newFrags=new TextFragment[frags.Length];  \n  \n  for (int i=0;i<frags.Length;i++){  \n    newFrags[i].State=frags[i].State;  \n    //truncate  \n    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  \n                               frags[i].TextLength);  \n    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  \n    newFrags[i].TextOffset = 0;  \n    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  \n      //Us to UK conversion  \n      foreach (UsVsUk term in TransList) {  \n      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  \n      }  \n      //Generate progress meter events if supported  \n      if ((site.EventInterest & WordBoundaryFlag) != 0) {  \n      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  \n  \n      foreach (string s in subs) {  \n        int offset = newFrags[i].TextOffset;  \n        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   \n                (Int16)EventParameterType.Undefined,   \n                 s.Length, new IntPtr(offset));  \n        offset += s.Length;  \n        if (s.Trim().Length > 0) {  \n          SpeechEventInfo[] events = new SpeechEventInfo[1];  \n          events[0] = spEvent;  \n          site.AddEvents(events, 1);  \n        }  \n      }  \n      }  \n    }  \n  }  \n    _baseSynthesize.Speak(newFrags, wfx, site);  \n  \n}  \n```"
  syntax:
    content: public abstract void Speak (System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, IntPtr waveHeader, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);
    parameters:
    - id: fragment
      type: System.Speech.Synthesis.TtsEngine.TextFragment[]
      description: "Tablica <xref href=&quot;System.Speech.Synthesis.TtsEngine.TextFragment&quot;> </xref> wystąpień zawierający tekst, który ma być renderowany w mowy."
    - id: waveHeader
      type: System.IntPtr
      description: "<xref uid=&quot;langword_csharp_IntPtr&quot; name=&quot;IntPtr&quot; href=&quot;&quot;> </xref> Wskazuje struktury zawierające format audio danych wyjściowych."
    - id: site
      type: System.Speech.Synthesis.TtsEngine.ITtsEngineSite
      description: "Odwołanie do <xref href=&quot;System.Speech.Synthesis.TtsEngine.ITtsEngineSite&quot;> </xref> interfejsu przekazany przez infrastrukturę platformy, aby zezwolić na dostęp do zasobów infrastruktury."
  overload: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  isExternal: false
  name: TtsEngineSsml(String)
  nameWithType: TtsEngineSsml.TtsEngineSsml(String)
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.TtsEngineSsml(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  isExternal: false
  name: AddLexicon(Uri,String,ITtsEngineSite)
  nameWithType: TtsEngineSsml.AddLexicon(Uri,String,ITtsEngineSite)
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(Uri,String,ITtsEngineSite)
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Speech.Synthesis.TtsEngine.ITtsEngineSite
  parent: System.Speech.Synthesis.TtsEngine
  isExternal: false
  name: ITtsEngineSite
  nameWithType: ITtsEngineSite
  fullName: System.Speech.Synthesis.TtsEngine.ITtsEngineSite
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  isExternal: false
  name: GetOutputFormat(SpeakOutputFormat,IntPtr)
  nameWithType: TtsEngineSsml.GetOutputFormat(SpeakOutputFormat,IntPtr)
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(SpeakOutputFormat,IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Speech.Synthesis.TtsEngine.SpeakOutputFormat
  parent: System.Speech.Synthesis.TtsEngine
  isExternal: false
  name: SpeakOutputFormat
  nameWithType: SpeakOutputFormat
  fullName: System.Speech.Synthesis.TtsEngine.SpeakOutputFormat
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  isExternal: false
  name: RemoveLexicon(Uri,ITtsEngineSite)
  nameWithType: TtsEngineSsml.RemoveLexicon(Uri,ITtsEngineSite)
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(Uri,ITtsEngineSite)
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  isExternal: false
  name: Speak(TextFragment[],IntPtr,ITtsEngineSite)
  nameWithType: TtsEngineSsml.Speak(TextFragment[],IntPtr,ITtsEngineSite)
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(TextFragment[],IntPtr,ITtsEngineSite)
- uid: System.Speech.Synthesis.TtsEngine.TextFragment[]
  parent: System.Speech.Synthesis.TtsEngine
  isExternal: false
  name: TextFragment
  nameWithType: TextFragment
  fullName: System.Speech.Synthesis.TtsEngine.TextFragment[]
  spec.csharp:
  - uid: System.Speech.Synthesis.TtsEngine.TextFragment
    name: TextFragment
    nameWithType: TextFragment
    fullName: TextFragment[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor*
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  isExternal: false
  name: TtsEngineSsml
  nameWithType: TtsEngineSsml.TtsEngineSsml
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon*
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  isExternal: false
  name: AddLexicon
  nameWithType: TtsEngineSsml.AddLexicon
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat*
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  isExternal: false
  name: GetOutputFormat
  nameWithType: TtsEngineSsml.GetOutputFormat
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon*
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  isExternal: false
  name: RemoveLexicon
  nameWithType: TtsEngineSsml.RemoveLexicon
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak*
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  isExternal: false
  name: Speak
  nameWithType: TtsEngineSsml.Speak
