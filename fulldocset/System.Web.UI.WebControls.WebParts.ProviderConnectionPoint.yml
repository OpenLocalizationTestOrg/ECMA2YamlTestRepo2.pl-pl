### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  id: ProviderConnectionPoint
  children:
  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)
  langs:
  - csharp
  name: ProviderConnectionPoint
  nameWithType: ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  type: Class
  summary: "Definiuje obiekt punktu połączenia, który umożliwia formantu serwera pełnią funkcję dostawcy do utworzenia połączenia z konsumenta."
  remarks: "W związku z każdej części sieci Web między dwoma kontrolki serwera każda kontrolka musi mieć (między innymi wymagania) skojarzona z połączeniem obiektu punktu, który umożliwia nawiązywania połączenia z innymi formantu i zapewnij albo wykorzystują dane, w zależności od tego, czy formant jest wyznaczony jako dostawcy lub odbiorcy dla połączenia. A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>obiekt ogólnie zawiera szczegóły dotyczące sposobu formantu mogą łączyć się inny formant i typu danych, można go udostępniać.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> W przypadku formantu pełnią funkcję dostawcy usług w przypadku połączenia punktu połączenia musi być obiektem ProviderConnectionPoint. Szczegółowe informacje dotyczące połączeń części sieci Web i punkty połączenia Zobacz tematy wymienione w poniższej sekcji Zobacz też.       Aby utworzyć obiekt ProviderConnectionPoint, wymagane są kilka kroków: 1.  Tworzenie interfejsu. Gdy dostawca udostępnia dane z konsumenta, robi to pierwsze wystąpienie interfejsu i zwracanie tego wystąpienia z klientem.      2.  Zaimplementuj interfejs u dostawcy. A <xref:System.Web.UI.WebControls.WebParts.WebPart>lub inny formant serwera (dowolnego typu kontrolki serwera w <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>strefy można użyć) który będzie stanowić dostawca musi implementować interfejs utworzonego w pierwszym kroku.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart>      3.  Określ metodę wywołania zwrotnego. Metoda w dostawcy muszą być określone jako metoda wywołania zwrotnego można ustanowić połączenia. Ta metoda zwraca wystąpienie klasy zaimplementowany interfejs z klientem. Podejście części sieci Web do identyfikacji Metoda wywołania zwrotnego w dostawcy jest dodanie `ConnectionProvider` atrybutu metadanych (zdefiniowane przez <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>klasy) do metody, która zwraca wystąpienie interfejsu.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> Po dodaniu atrybutu tylko wymaganego parametru jest wyświetlana nazwa do użycia na potrzeby punkt połączenia dostawcy. Parametry opcjonalne można również dodać, takich jak identyfikator punktu połączenia.       Po formantu ma został przystosowany do działania jako dostawcę, formantu może uczestniczyć w połączeniach (przy założeniu, że formant konsumenta podobnie wyposażone i dostępna). Aby utworzyć połączenie statycznych, deklaratywne w znaczniku strony sieci Web, deweloperzy mogą używać `<asp:webpartconnection>` elementu. Jeśli `ConnectionProvider` atrybutu w kodzie źródłowym dostawcy, który identyfikuje metodę wywołania zwrotnego Określa identyfikator punktu połączenia, a następnie ta wartość musi być przypisany do `ProviderConnectionPointID` atrybutu w `<asp:webpartconnection>` elementu na stronie. Jedną z przyczyn że deweloper może określić identyfikator punkt połączenia dostawcy jest, jeśli istnieje wiele punktów połączenia w formancie dostawcy. Jeśli nie określono Identyfikatora punktu połączenia dostawcy w formancie dostawcy, nie ma wartość do przypisania do `ProviderConnectionPointID` atrybutu na stronie albo, ponieważ połączenie zostanie utworzony przy użyciu wartości domyślnej uzyskane z <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>pola.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       Można utworzyć połączenia w kodzie, deweloperzy należy utworzyć nowy obiekt ProviderConnectionPoint przez wywołanie metody <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>— Metoda i przekazanie do niego identyfikator formantu dostawcy, wraz z Identyfikatora lub indeks obiektu ProviderConnectionPoint zdefiniowanych w formancie dostawcy.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> Zwrócony obiekt ProviderConnectionPoint, wraz z odwołaniem do sterowania dostawcy, odwołanie do formantu użytkownika, a odpowiadające mu <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>obiektów, wyświetlane są wszystkie przekazany do <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>metody, aby utworzyć nową <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>obiektu.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       Mimo że deweloperzy mogą używać punktów połączenia dostawcy podczas ustanawiania połączenia deklaratywnie lub programowo, również interakcji użytkowników z dostawcy punkty połączenia do ustanawiania połączeń za pośrednictwem interfejsu użytkownika (UI). Jeśli deweloperzy zadeklarować <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>kontrolki na stronie sieci Web zapewnia czasu wykonywania interfejsu użytkownika dla użytkowników w celu utworzenia połączenia.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Jeśli użytkownik wybierze kontroli klienta jako punktu wyjścia do nawiązywania połączenia, klikając jej połączyć zlecenie (one również wybrać dostawcę; nie ma żadnej różnicy w wynikowej połączenia), w Interfejsie użytkownika zostanie wyświetlona kontrolkę listy rozwijanej o nazwie wyświetlanej punkt połączenia dostawcy dostępne (lub punktów, jeśli istnieje wiele migawek). Użytkownicy muszą wybrać punkt połączenia dostawcy, aby utworzyć połączenie.       Obiekt ProviderConnectionPoint kojarzy bezpośrednio za pomocą formantu określonego dostawcy i przechowuje szczegółowe informacje o połączeniu we właściwościach, który dziedziczy z podstawowego <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>klasy.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Na przykład w dziedziczonego <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>Właściwości, typ interfejsu zwrócony przez dostawcę śledzi punkt połączenia dostawcy.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> Jeśli typ interfejsu dostawcy i klienta w ramach połączenia, które działać z tym samym, formanty są zgodne i nadaje się do tworzenia bezpośrednie połączenie. Jeśli dostawcy i klienta nie może działać z tego samego typu interfejsu, są niezgodne i musi być <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>obiektu tłumaczenie punkt połączenia dostawcy <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>wartość do typu, który użytkownik może współpracować z.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Inną ważną właściwość dziedziczona jest <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>właściwość, która zapewnia przyjazna nazwa wyświetlana w Interfejsie użytkownika dla użytkowników wybrać połączenie z dostawcą punktu podczas tworzenia połączenia.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> Nazwa wyświetlana jest wymaganego parametru, gdy deweloperzy dodają `ConnectionProvider` atrybut do metody wywołania zwrotnego w formancie dostawcy. Dziedziczonego <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>Właściwość przydaje się również, jak wspomniano powyżej, ponieważ zawiera unikatowy identyfikator dla punktu połączenia dostawcy w przypadku, gdy dostawca ma wiele punktów połączenia.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> Dostawca może mieć wiele obiektów ProviderConnectionPoint zdefiniowane w nim, a w tym przypadku podczas dodawania deweloperzy `ConnectionProvider` atrybut do metody, należy określić wartość Identyfikatora odróżnienie każdego punktu połączenia. Jest jednym innych istotnych Dziedziczona właściwość <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>właściwość, która wskazuje, czy punkt połączenia dostawcy mogą jednocześnie połączyć się z wielu klientów.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> Wartość tej właściwości jest `true` domyślnie dla dostawcy punkty połączenia (natomiast domyślnie `false` dla konsumentów punkty połączenia).       Klasy ProviderConnectionPoint dodaje kilka metod unikatowy członkom dziedziczy z <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>klasy.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>Metoda pobiera wystąpienie interfejsu, który zwróci Metoda wywołania zwrotnego dla konsumentów.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>Metoda pobiera dodatkowe interfejsy, które są częścią istniejącego połączenia, ale są nie interfejsy używane do nawiązania połączenia.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>"
  example:
  - "The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a provider connection point.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_356_1.ascx)]\n [!code-vb[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_356_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. Its `ProvideIZipCode` method is the callback method that implements the interface's only member. The method simply returns an instance of the interface. Note that the method is marked with a `ConnectionProvider` attribute in its metadata. This is the mechanism for identifying the method as the callback method for the provider's connection point. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_356_2.vb)]\n [!code-cs[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_356_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the `<staticconnections>` element on the page. This demonstrates one way of creating a connection--note the `ProviderConnectionPointID` attribute in the `<asp:webpartconnection>` element. You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method. In this case, a ProviderConnectionPoint object is created and then passed to a method that creates the actual connection. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_356_3.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_356_3.aspx)]  \n  \n After you load the page in a browser, click the **Connection Point Details** button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the **Display Mode** drop-down control to switch the page into connect mode. On the verbs menu of the **ZIP Code Consumer**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page. This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier. Click the **Disconnect** button to terminate the existing static connection. Click the **Create a Connection to a Provider** link. The UI now displays a drop-down control that lists the provider connection point display name. Select the connection point in the drop-down list, and then click **Connect** to complete the connection. Next, click **Disconnect** again. Then, click the **Dynamic Connection** button to create a connection programmatically. Use the **Display Mode** control to return the page to browse mode. Click the **Connection Point Details** button again, to once more indicate details about the provider connection point object.  \n  \n The example has demonstrated establishing a connection and using a provider connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a ProviderConnectionPoint object; and a connection created by a user through the connection UI."
  syntax:
    content: 'public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint'
  inheritance:
  - System.Object
  - System.Web.UI.WebControls.WebParts.ConnectionPoint
  implements: []
  inheritedMembers:
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  id: '#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)'
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  langs:
  - csharp
  name: ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&quot;> </xref> klasy."
  remarks: "Konstruktor ProviderConnectionPoint <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>klasy po prostu wywołuje konstruktora podstawowego, przekazywanie do niego różnych parametrów i inicjowania klasy podstawowej.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       Konstruktor klasy podstawowej sprawdza liczbę parametrów dla punktu połączenia i może zgłosić kilkoma wyjątkami. Listę możliwych wyjątków zobacz sekcję wyjątków.       Możesz wywołać konstruktor ProviderConnectionPoint można utworzyć wystąpienia <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>klasy.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Jednak w przypadku należy po prostu ustanawiania połączenia i nie rozszerzania klasy, należy wywołać <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>metody do zwrócenia z istniejącym obiektem z punktu połączenia z dostawcą.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>"
  example:
  - "The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class to create a custom provider connection point.  \n  \n The code example has three parts:  \n  \n-   A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.  \n  \n-   A Web page that hosts the controls in a static connection.  \n  \n-   An explanation of how to run the example code.  \n  \n The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class, named `TableProviderConnectionPoint`. Note that the constructor of the `TableProviderConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section. Also note that in the `TableProviderWebPart` class, the `GetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionProvider` attribute declares the custom `TableProviderConnectionPoint` as a parameter. This demonstrates how to create a custom provider connection point and then associate it with a provider control. This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/add/codesnippet/csharp/4405c9d3-e4fd-4235-883f-_1.cs)]  \n  \n The second part of the code example is the Web page that hosts the custom controls in a static Web Parts connection. At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls. The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/add/codesnippet/csharp/4405c9d3-e4fd-4235-883f-_2.aspx)]  \n  \n Load the page in a browser. The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page."
  syntax:
    content: public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);
    parameters:
    - id: callbackMethod
      type: System.Reflection.MethodInfo
      description: "Metoda w formancie dostawcy, który zwraca wystąpienie interfejsu dla konsumentów, aby nawiązać połączenie."
    - id: interfaceType
      type: System.Type
      description: "<xref:System.Type>Interfejsu, który dostawca służy do odbiorców.</xref:System.Type>"
    - id: controlType
      type: System.Type
      description: "<xref:System.Type>Formantu dostawca, z którym skojarzony jest punkt połączenia dostawcy.</xref:System.Type>"
    - id: displayName
      type: System.String
      description: "Przyjazną nazwę wyświetlaną dla wyświetlany w interfejsie użytkownika (UI) połączenia punkt połączenia dostawcy."
    - id: id
      type: System.String
      description: "Unikatowy identyfikator punkt połączenia dostawcy."
    - id: allowsMultipleConnections
      type: System.Boolean
      description: "Wartość logiczna wskazująca, czy punkt połączenia dostawcy mogą mieć wiele równoczesnych połączeń z konsumentów."
  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>callbackMethod</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>interfaceType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>controlType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>displayName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string (\"\")."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>controlType </code>nie jest taki sam typ jak kontrola dostawcy (lub nieprawidłową klasę pochodzić od niego)."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)
  id: GetObject(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  langs:
  - csharp
  name: GetObject(Control)
  nameWithType: ProviderConnectionPoint.GetObject(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Wywołuje metodę wywołania zwrotnego w formancie dostawcy, który pobiera wystąpienie interfejsu, aby powrócić do odbiorców."
  remarks: "Ta metoda zwraca obiekt spod kontroli dostawcy, który jest wystąpieniem interfejs używany do ustanawiania połączenia. Typ obiektu będzie typ zaimplementowanego interfejsu. Na przykład dwa interfejsy, które są wdrażane dla połączeń w zestawie formantu części sieci Web są <xref:System.Web.UI.WebControls.WebParts.IWebPartField>i <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>.</xref:System.Web.UI.WebControls.WebParts.IWebPartRow> </xref:System.Web.UI.WebControls.WebParts.IWebPartField> Gdy wywoływana jest Metoda GetObject <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>obiektu, jeśli dostawca skojarzone implementuje jednej z tych interfejsów, zwrócony obiekt będzie tego samego typu.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       GetObject — metoda jest wywoływana przez <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>obiektów po uaktywnieniu połączeń.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Jest to krytycznym kroku, który faktycznie inicjuje połączenie i rozpocznie się proces, który umożliwia dwóch formantów udostępniania danych.       Formant użytkownika w przypadku połączenia musi mieć możliwość pracy tego samego typu interfejsu, ponieważ dostawca. Jeśli nie, kontrolki są niezgodne i <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>obiektu musi być używany do nawiązania połączenia.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>"
  syntax:
    content: public virtual object GetObject (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Formant pełnią funkcję dostawcy usług w związku z części sieci Web."
    return:
      type: System.Object
      description: "<xref:System.Object>To wystąpienie interfejsu dostawcy zwraca klientom nawiązanie połączenia.</xref:System.Object>"
  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>control</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)
  id: GetSecondaryInterfaces(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  langs:
  - csharp
  name: GetSecondaryInterfaces(Control)
  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Pobiera opcjonalne zbiór interfejsów pomocniczych, które mogą być obsługiwane przez punkt połączenia dostawcy."
  remarks: "Obiekt punktu połączenia dostawcy zawsze ma domyślnego interfejsu, który jest używany do ustanawiania połączenia z konsumentów. Wystąpienie interfejsu domyślnego są pobierane przez wywołanie metody <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>Metoda <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>obiektu.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>       Jednak niektóre formanty dostawcy wdroży wiele interfejsów, aby zapewnić klientom w ramach połączenia. Te interfejsy, które nie są domyślnie używane do nawiązania połączenia, są nazywane interfejsów pomocniczych. Metoda GetSecondaryInterfaces udostępnia sposób zwrócenia kolekcję odwołań do interfejsów pomocniczych, podobnie jak <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>Metoda zwraca odwołanie do interfejsu domyślnego.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>"
  syntax:
    content: public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Formant pełnią funkcję dostawcy usług w związku z części sieci Web."
    return:
      type: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&quot;> </xref> z dodatkowych interfejsów dostarczanych przez formant pełnią funkcję dostawcy usług."
  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.ConnectionPoint
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetObject(Control)
  nameWithType: ProviderConnectionPoint.GetObject(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(Control)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetSecondaryInterfaces(Control)
  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(Control)
- uid: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConnectionInterfaceCollection
  nameWithType: ConnectionInterfaceCollection
  fullName: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor*
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject*
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetObject
  nameWithType: ProviderConnectionPoint.GetObject
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces*
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetSecondaryInterfaces
  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces
