### YamlMime:ManagedReference
items:
- uid: System.Windows.EventManager
  id: EventManager
  children:
  - System.Windows.EventManager.GetRoutedEvents
  - System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)
  - System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  - System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)
  langs:
  - csharp
  name: EventManager
  nameWithType: EventManager
  fullName: System.Windows.EventManager
  type: Class
  summary: "Udostępnia metody narzędziowe związane ze zdarzeniami, które Zarejestruj kierowane zdarzenia dla klasy właścicieli i dodać obsługę klas."
  remarks: "Ta klasa jest najczęściej używana do rejestrowania nowych kierowanego zdarzenia z <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A>       Drugi najczęściej [!INCLUDE[TLA2#tla_api](~/add/includes/tla2sharptla-api-md.md)] <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A> jest użycie Ta metoda umożliwia obsługę klasy kierowanego zdarzenia w klasie lub dołączone zdarzenie. Aby uzyskać więcej informacji, zobacz [oznaczenie kierowane zdarzenia jako Handled i obsługa klasy](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example show how to use this class to register a new routed event as a class member, along with the routed event \"wrapper\" technique of overriding the add and remove implementations for a [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] event.  \n  \n [!code-cs[DPCustom#EventManagerClass](~/add/codesnippet/csharp/DPCustom/default.xaml.cs#eventmanagerclass)]\n [!code-vb[DPCustom#EventManagerClass](~/add/codesnippet/visualbasic/dpcustom/default.xaml.vb#eventmanagerclass)]"
  syntax:
    content: public static class EventManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.EventManager.GetRoutedEvents
  id: GetRoutedEvents
  parent: System.Windows.EventManager
  langs:
  - csharp
  name: GetRoutedEvents()
  nameWithType: EventManager.GetRoutedEvents()
  fullName: System.Windows.EventManager.GetRoutedEvents()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Zwraca identyfikatory kierowane zdarzenia, które zostały zarejestrowane w systemie zdarzeń."
  remarks: "Więcej <xref:System.Windows.RoutedEvent>obiektów, które mogą być rejestrowane później.</xref:System.Windows.RoutedEvent> Ta metoda pobiera migawkę i kolekcji kierowane zdarzenia jest zapisywalny przez cały okres istnienia aplikacji. Kolekcja zwracana może być dość duży. Nawet po prostu zliczania zdarzeń, które są częścią [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)], liczba kolekcji jest w setki wysoki."
  syntax:
    content: public static System.Windows.RoutedEvent[] GetRoutedEvents ();
    parameters: []
    return:
      type: System.Windows.RoutedEvent[]
      description: "Tablica typu <xref href=&quot;System.Windows.RoutedEvent&quot;> </xref> zawierający zarejestrowanych obiektów."
  overload: System.Windows.EventManager.GetRoutedEvents*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)
  id: GetRoutedEventsForOwner(System.Type)
  parent: System.Windows.EventManager
  langs:
  - csharp
  name: GetRoutedEventsForOwner(Type)
  nameWithType: EventManager.GetRoutedEventsForOwner(Type)
  fullName: System.Windows.EventManager.GetRoutedEventsForOwner(Type)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Znajduje wszystkie identyfikatory kierowanego zdarzenia dla zdarzeń, które są zarejestrowane w usłudze typ podanego właściciela."
  syntax:
    content: public static System.Windows.RoutedEvent[] GetRoutedEventsForOwner (Type ownerType);
    parameters:
    - id: ownerType
      type: System.Type
      description: "Typ ma się rozpocząć wyszukiwanie z. Klasy podstawowe są uwzględnione w wyszukiwaniu."
    return:
      type: System.Windows.RoutedEvent[]
      description: "Tablica zgodnych identyfikatorów kierowanego zdarzenia, gdy wszystkie dopasowania zostanie odnaleziony; w przeciwnym razie <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.EventManager.GetRoutedEventsForOwner*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)
  id: RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.EventManager
  langs:
  - csharp
  name: RegisterClassHandler(Type,RoutedEvent,Delegate)
  nameWithType: EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate)
  fullName: System.Windows.EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Rejestruje obsługi klasy dla konkretnego kierowanego zdarzenia."
  remarks: "Obsługa klasy to funkcja, która jest dostępna dla kierowane zdarzenia, w tym dołączone zdarzenia, które są wykonywane z kierowanego zdarzenia kopii. Klasy obsługi przypomina obsługi statyczne, czy istnieje dla wszystkich wystąpień klasy. Ponieważ program obsługi jest statyczna, nie można zmienić właściwości wystąpienia bezpośrednio z programu obsługi klasy, ale można uzyskać dostępu do wystąpienia za pomocą `sender` parametru i/lub dane zdarzenia.       Klasy obsługi są wywoływane przed wystąpieniem obsługi. Można zaimplementować obsługi klasy, która ma oznaczenie zdarzenie, ponieważ obsługiwane zachowanie. W związku z tym wystąpienie obsługi dla zdarzenia obsługiwane klasy nie są wywoływane, chyba że obsługi wystąpienia zarejestrować specjalnie z myślą o obsłużone zdarzenia.       Duża liczba [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] zdarzenia base element udostępniają klasy obsługi metodach wirtualnych. Zastępowanie tych metod w klasach, które dziedziczą z klasy podstawowej, można zaimplementować klasy obsługi bez wywoływania RegisterClassHandler w konstruktorach statycznych. Te metody obsługi klasy zwykle istnieją zdarzenia wejściowe i mają nazwy zaczynające &quot;On&quot; i kończyć się nazwa zdarzenia jest klasa obsługiwane.       Aby uzyskać więcej informacji na temat klasy obsługi zobacz [oznaczenie kierowane zdarzenia jako Handled i obsługa klasy](~/add/includes/ajax-current-ext-md.md).       Za pomocą tego podpisu, obsługę klas zostanie zarejestrowany można wywołać tylko w odpowiedzi na zdarzenia nieobsługiwany. Można również zarejestrować obsługę klas można wywołać, nawet jeśli argumenty zdarzeń są oznaczone jako obsługiwany, za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>podpisu, z `handledEventsToo` ustawioną `true`.</xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>"
  example:
  - "The following example adds a handler for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>, calling RegisterClassHandler.  \n  \n [!code-vb[ClassHandling#StaticAndRegisterClassHandler](~/add/codesnippet/visualbasic/ClassHandling.sdksamplelibrary/class1.vb#staticandregisterclasshandler)]\n [!code-cs[ClassHandling#StaticAndRegisterClassHandler](~/add/codesnippet/csharp/ClassHandling/SDKSampleLibrary/class1.cs#staticandregisterclasshandler)]"
  syntax:
    content: public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler);
    parameters:
    - id: classType
      type: System.Type
      description: "Typ klasy, która jest deklarowanie klasy obsługi."
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "Identyfikator zdarzenia w celu obsługi kierowanego zdarzenia."
    - id: handler
      type: System.Delegate
      description: "Odwołanie do implementacji klasy obsługi."
  overload: System.Windows.EventManager.RegisterClassHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  id: RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  parent: System.Windows.EventManager
  langs:
  - csharp
  name: RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)
  nameWithType: EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)
  fullName: System.Windows.EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Rejestruje obsługi klasy dla określonego zdarzenia routingiem, z możliwością obsługi zdarzeń, w którym dane zdarzeń jest oznaczona jako obsługiwane."
  remarks: "Obsługa klasy to funkcja, która jest dostępna dla kierowane zdarzenia, w tym dołączone zdarzenia, które są wykonywane z kierowanego zdarzenia kopii. Klasy obsługi przypomina obsługi statyczne, czy istnieje dla wszystkich wystąpień klasy. Ponieważ program obsługi jest statyczna, nie można zmienić właściwości wystąpienia bezpośrednio z programu obsługi klasy, ale można uzyskać dostępu do wystąpienia za pomocą `sender` parametru i/lub dane zdarzenia.       Klasy obsługi są wywoływane przed wystąpieniem obsługi. Można zaimplementować obsługi klasy, która ma oznaczenie zdarzenie, ponieważ obsługiwane zachowanie. W związku z tym wystąpienie obsługi dla zdarzenia obsługiwane klasy nie są wywoływane, chyba że obsługi wystąpienia zarejestrować specjalnie z myślą o obsłużone zdarzenia.       Duża liczba [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] zdarzenia base element udostępniają klasy obsługi metodach wirtualnych. Zastępowanie tych metod w klasach, które dziedziczą z klasy podstawowej, można zaimplementować klasy obsługi bez wywoływania elementu <xref:System.Windows.EventManager.RegisterClassHandler%2A>w konstruktorach statycznych.</xref:System.Windows.EventManager.RegisterClassHandler%2A> Te metody obsługi klasy zwykle istnieją zdarzenia wejściowe i mają nazwy zaczynające &quot;On&quot; i kończyć się nazwa zdarzenia jest klasa obsługiwane.       Aby uzyskać więcej informacji na temat klasy obsługi zobacz [oznaczenie kierowane zdarzenia jako Handled i obsługa klasy](~/add/includes/ajax-current-ext-md.md).       Za pomocą tego podpisu, obsługę klas można zarejestrować do wywołania po obsłużone zdarzenia, ustawiając `handledEventsToo` ustawioną `true`. Ogólnie rzecz biorąc należy to zrobić tylko, jeśli wystąpi problem znane obsługi, który chcesz obejść, takich jak system wejściowy obsługi zdarzeń za pomocą klawiatury lub myszy."
  syntax:
    content: public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);
    parameters:
    - id: classType
      type: System.Type
      description: "Typ klasy, która jest deklarowanie klasy obsługi."
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "Identyfikator zdarzenia w celu obsługi kierowanego zdarzenia."
    - id: handler
      type: System.Delegate
      description: "Odwołanie do implementacji klasy obsługi."
    - id: handledEventsToo
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Wywołaj obsługę tej klasy, nawet jeśli została oznaczona jako argumenty kierowanego zdarzenia przetwarzanych; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> zachowania domyślnego zachowania nie wywołuje program obsługi na wszystkie zdarzenia oznaczone obsługiwane."
  overload: System.Windows.EventManager.RegisterClassHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)
  id: RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)
  parent: System.Windows.EventManager
  langs:
  - csharp
  name: RegisterRoutedEvent(String,RoutingStrategy,Type,Type)
  nameWithType: EventManager.RegisterRoutedEvent(String,RoutingStrategy,Type,Type)
  fullName: System.Windows.EventManager.RegisterRoutedEvent(String,RoutingStrategy,Type,Type)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Rejestruje nowy kierowanego zdarzenia z [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] zdarzeń systemu."
  remarks: "Zwracana wartość ta metoda umożliwia utworzenie deklaracja statycznej unikatowego <xref:System.Windows.RoutedEvent>pole identyfikatora.</xref:System.Windows.RoutedEvent> W tym polu powinny być przechowywane w ramach typu właściciela.       Brak znaczną liczbę konwencje, a najlepsze rozwiązania związane z jak kierowane zdarzenia powinna być o nazwie, zarejestrowane oraz widoczne w klasie. Aby uzyskać więcej informacji, zobacz [kierowane Przegląd zdarzeń](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static System.Windows.RoutedEvent RegisterRoutedEvent (string name, System.Windows.RoutingStrategy routingStrategy, Type handlerType, Type ownerType);
    parameters:
    - id: name
      type: System.String
      description: "Nazwa kierowanego zdarzenia. Nazwa musi być unikatowa w obrębie typu właściciela i nie może być <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> lub ciąg pusty."
    - id: routingStrategy
      type: System.Windows.RoutingStrategy
      description: "Strategii routingu zdarzenia jako wartość wyliczenia."
    - id: handlerType
      type: System.Type
      description: "Typem obsługi zdarzeń. To musi być typem obiektu delegowanego i nie może być <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: ownerType
      type: System.Type
      description: "Typ klasy właściciela kierowanego zdarzenia. Nie może to być <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Windows.RoutedEvent
      description: "Identyfikator nowo zarejestrowanych kierowanego zdarzenia. Ten obiekt identyfikator może być teraz przechowywane jako pola statycznego w klasie, a następnie użyć jako parametru dla metod, które załączyć obsługi zdarzenia. Identyfikator kierowanego zdarzenia służy także do innego systemu zdarzeń [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]."
  overload: System.Windows.EventManager.RegisterRoutedEvent*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.EventManager.GetRoutedEvents
  parent: System.Windows.EventManager
  isExternal: false
  name: GetRoutedEvents()
  nameWithType: EventManager.GetRoutedEvents()
  fullName: System.Windows.EventManager.GetRoutedEvents()
- uid: System.Windows.RoutedEvent[]
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent[]
  spec.csharp:
  - uid: System.Windows.RoutedEvent
    name: RoutedEvent
    nameWithType: RoutedEvent
    fullName: RoutedEvent[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)
  parent: System.Windows.EventManager
  isExternal: false
  name: GetRoutedEventsForOwner(Type)
  nameWithType: EventManager.GetRoutedEventsForOwner(Type)
  fullName: System.Windows.EventManager.GetRoutedEventsForOwner(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.EventManager
  isExternal: false
  name: RegisterClassHandler(Type,RoutedEvent,Delegate)
  nameWithType: EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate)
  fullName: System.Windows.EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate)
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  parent: System.Windows.EventManager
  isExternal: false
  name: RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)
  nameWithType: EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)
  fullName: System.Windows.EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)
  parent: System.Windows.EventManager
  isExternal: false
  name: RegisterRoutedEvent(String,RoutingStrategy,Type,Type)
  nameWithType: EventManager.RegisterRoutedEvent(String,RoutingStrategy,Type,Type)
  fullName: System.Windows.EventManager.RegisterRoutedEvent(String,RoutingStrategy,Type,Type)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.RoutingStrategy
  parent: System.Windows
  isExternal: false
  name: RoutingStrategy
  nameWithType: RoutingStrategy
  fullName: System.Windows.RoutingStrategy
- uid: System.Windows.EventManager.GetRoutedEvents*
  parent: System.Windows.EventManager
  isExternal: false
  name: GetRoutedEvents
  nameWithType: EventManager.GetRoutedEvents
- uid: System.Windows.EventManager.GetRoutedEventsForOwner*
  parent: System.Windows.EventManager
  isExternal: false
  name: GetRoutedEventsForOwner
  nameWithType: EventManager.GetRoutedEventsForOwner
- uid: System.Windows.EventManager.RegisterClassHandler*
  parent: System.Windows.EventManager
  isExternal: false
  name: RegisterClassHandler
  nameWithType: EventManager.RegisterClassHandler
- uid: System.Windows.EventManager.RegisterRoutedEvent*
  parent: System.Windows.EventManager
  isExternal: false
  name: RegisterRoutedEvent
  nameWithType: EventManager.RegisterRoutedEvent
