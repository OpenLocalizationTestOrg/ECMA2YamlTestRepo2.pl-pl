### YamlMime:ManagedReference
items:
- uid: System.Windows.Markup.XamlReader
  id: XamlReader
  children:
  - System.Windows.Markup.XamlReader.#ctor
  - System.Windows.Markup.XamlReader.CancelAsync
  - System.Windows.Markup.XamlReader.GetWpfSchemaContext
  - System.Windows.Markup.XamlReader.Load(System.IO.Stream)
  - System.Windows.Markup.XamlReader.Load(System.Xaml.XamlReader)
  - System.Windows.Markup.XamlReader.Load(System.Xml.XmlReader)
  - System.Windows.Markup.XamlReader.Load(System.IO.Stream,System.Windows.Markup.ParserContext)
  - System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)
  - System.Windows.Markup.XamlReader.LoadAsync(System.Xml.XmlReader)
  - System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext)
  - System.Windows.Markup.XamlReader.LoadCompleted
  - System.Windows.Markup.XamlReader.Parse(System.String)
  - System.Windows.Markup.XamlReader.Parse(System.String,System.Windows.Markup.ParserContext)
  langs:
  - csharp
  name: XamlReader
  nameWithType: XamlReader
  fullName: System.Windows.Markup.XamlReader
  type: Class
  summary: "Odczytuje dane wejściowe XAML i tworzy wykres obiektu przy użyciu czytnika XAML domyślne WPF i skojarzone moduł zapisywania obiektów języka XAML."
  remarks: "Synchroniczne <xref:System.Windows.Markup.XamlReader.Load%2A>metody są statyczne, ale asynchroniczną <xref:System.Windows.Markup.XamlReader.LoadAsync%2A>metod nie są statyczne i wymagają wystąpienia klasy XamlReader do użycia.</xref:System.Windows.Markup.XamlReader.LoadAsync%2A> </xref:System.Windows.Markup.XamlReader.Load%2A>       Dane wyjściowe `Load` metody jest pojedynczy obiekt reprezentuje obiekt główny drzewa utworzony obiekt lub obiekt Wykres. Wykresów obiektów, które są tworzone przez XamlReader zazwyczaj są dodawane do istniejącego drzewa obiektów w aplikacji WPF w czasie wykonywania. W przeciwnym razie nowy wykres obiektu jest traktowany jako odłączona na potrzeby modelu aplikacji WPF. To oznacza, że nie jest renderowana i nie może dotyczyć używanych użyciu dowolną z metod drzewa obiektów jako drzewa obiektów głównych aplikacji WPF (na przykład interfejsy API <xref:System.Windows.FrameworkElement.FindName%2A>, <xref:System.Windows.LogicalTreeHelper>, <xref:System.Windows.Media.VisualTreeHelper>).</xref:System.Windows.Media.VisualTreeHelper> </xref:System.Windows.LogicalTreeHelper> </xref:System.Windows.FrameworkElement.FindName%2A> Aby uzyskać więcej informacji dotyczących obiektu drzewa pojęć, zobacz [drzewa WPF](~/add/includes/ajax-current-ext-md.md).       XamlReader obsługuje następujące scenariusze podstawowego:- **klonowanie/obiekt fabryki**: bez dodatkowych mechanizmów typu odwołania zasadniczo nie może być uwzględniany w więcej niż jedną pozycję w drzewie obiektu WPF. (Dodatkowe mechanizmy, które oferują obsługę udostępniania lub ponownie użyj na platformie WPF przykłady obiektów, które są oparte na <xref:System.Windows.Freezable>, lub obsługę często możliwe do udostępnienia obiektów, takich jak <xref:System.Windows.Media.Brush>który jest określany jako element <xref:System.Windows.ResourceDictionary>.)</xref:System.Windows.ResourceDictionary> </xref:System.Windows.Media.Brush> </xref:System.Windows.Freezable> Jest jednym ze sposobów sklonować obiektu, który jest już w drzewie obiektów do serializacji obiektu przy użyciu <xref:System.Windows.Markup.XamlWriter.Save%2A?displayProperty=fullName>.</xref:System.Windows.Markup.XamlWriter.Save%2A?displayProperty=fullName> Następnie możesz użyć serializacji ciągu jako dane wejściowe do wywołania <xref:System.Windows.Markup.XamlReader.Load%2A>, za pomocą strumienia lub <xref:System.Xml.XmlReader>jako pośrednik.</xref:System.Xml.XmlReader> </xref:System.Windows.Markup.XamlReader.Load%2A>      - **Konstruowanie obiektów w oparciu o informacje w czasie**: często są inne sposoby ma wejścia późne powiązania lub dostarczone przez użytkownika zmiany stanu istniejących obiektów. Na przykład można używać tej samej wartości można ustawić więcej niż jedną właściwość lub użyj wiązania z danymi. Ale jeśli scenariusz, w którym nawet typ obiektu do utworzenia jest tylko możliwa do ustalenia w czasie wykonywania, lub z interakcji z użytkownikiem, następnie utworzenie takiego obiektu przez utworzenie ciąg w celu <xref:System.Windows.Markup.XamlReader.Load%2A>dane wejściowe są często technika przydatne.</xref:System.Windows.Markup.XamlReader.Load%2A>      - **Przy użyciu technik, istniejącego zasobu**: <xref:System.IO.Stream>typu jest często używane w innych platform lub technologii przesyłania danych ani obiektów poza granicami aplikacji lub w sytuacjach podobne.</xref:System.IO.Stream> Następnie można użyć <xref:System.IO.Stream>technik w celu przechowywania lub uzyskać danych w formacie XAML, który ostatecznie zostanie użyty do utworzenia obiektu w ramach aplikacji.</xref:System.IO.Stream>      - **Stałej dokumentów:** aplikacja może załadować dokumenty XPS lokalnego lub pobrany do włączenia do drzewa obiektów w aplikacji WPF i interfejsu użytkownika.      > [!NOTE] > Czasami w tej dokumentacji opisano wykres obiektu, w przeciwieństwie do drzewa obiektów. Relacji nadrzędny podrzędny ograniczeniami nie zawsze istnieje w relacje między obiektami czas wykonywania aplikacji WPF, więc wykres obiektu jest powszechnie stosowane terminologii. Jednak ponieważ WPF obejmuje również conceptualization innego drzewa dwóch interfejsów API (<xref:System.Windows.LogicalTreeHelper>, <xref:System.Windows.Media.VisualTreeHelper>) metaphor drzewa nadal mają zastosowanie odpowiednio najczęściej rzeczywistych na platformie WPF.</xref:System.Windows.Media.VisualTreeHelper> </xref:System.Windows.LogicalTreeHelper> Z perspektywy języka XAML, wykres obiektu jest często najlepszym sposobem zastanowić, tworzenia obiektów poza XAML, ponieważ sam języka XAML nie musi określać metody pomocnika klasy działania, które ponownie relacji do struktury drzewa.      ## Zabezpieczenia dostępu kodu, utracić XAML i XamlReader XAML jest język bezpośrednio reprezentuje podczas tworzenia wystąpienia obiektu i wykonywanie. Elementy utworzone w języku XAML więc samym możliwość interakcji z zasobami systemu (na przykład sieci dostępu do pliku systemu We/Wy) jako równoważne, generowany jest kod.       [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]obsługuje [!INCLUDE[TLA2#tla_net](~/add/includes/tla2sharptla-net-md.md)] strukturę zabezpieczeń [!INCLUDE[TLA#tla_cas](~/add/includes/tlasharptla-cas-md.md)]. Oznacza to, że [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] zawartości w strefie internet ma ograniczone uprawnienia wykonywania. &quot;Luźno XAML&quot; (strony XAML Nieskompilowane interpretowana w czasie ładowania przez Podgląd XAML) i [!INCLUDE[TLA#tla_xbap](~/add/includes/tlasharptla-xbap-md.md)] są zazwyczaj uruchamiane w tej strefie internet i ten sam zestaw uprawnień.  Jednak XAML załadowany w pełni zaufany aplikacji ma takie same prawa dostępu do zasobów systemowych, jak hostingu aplikacji. Aby uzyskać więcej informacji, zobacz [WPF częściowego zaufania zabezpieczeń](~/add/includes/ajax-current-ext-md.md).       Wpływ tych instrukcji na XamlReader jest czy projektu aplikacji musi podjęcie decyzji o zaufaniu XAML się, że chcesz załadować. Ładowania XAML, który nie jest zaufany, należy rozważyć zaimplementowanie własne technika sandboxing jak załadować wynikowego wykresu obiektu.       XamlReader również może być wywoływany przez kod częściowego zaufania. W takim przypadku strefy zabezpieczeń Internet jest stosowane do zabezpieczenia dostępu kodu. Jeśli w XAML załadować jest nieprawidłowy w strefie Internet, jest zwracany wyjątek analizy XAML. W obszarze XBAP i innych przypadków, które są częściowej relacji zaufania na poziomie platformy, w którym XamlReader jest częścią wykonywania, możesz uzyskać takie samo zachowanie wyjątek jako z wywołania jawne częściowej relacji zaufania.      ## WPF XAML, XAML czytników/autorzy i przechowywanie wersji języka XAML [!INCLUDE[xaml2009](~/add/includes/xaml2009-md.md)] obejmuje funkcje języka, takich jak i. Można użyć sygnatur `Load` lub `Parse` można załadować pliku XAML, który używa tych funkcji. Jednak te funkcje językowe nie są obsługiwane dla języka XAML, który musi być kompilacji znaczników (takich jak XAML dla **strony** akcji w aplikacji WPF lub dowolnego języka XAML, która obejmuje zadania kompilacji znaczników w akcji kompilacji kompilacji).       Typy WPF i technologii WPF ogólnie obsługuje pojęcia, które opierają się na dostęp do wewnętrzne WPF. Na przykład jak WPF implementuje właściwości zależności zależy od wewnętrznego techniki wydajne członka typu wyszukiwania. Dostęp do tych wewnętrzne jest włączana przez XAML, odczytywanie i zapisywanie interfejsów API dostarczonych w <xref:System.Windows.Markup.XamlWriter>i XamlReader z <xref:System.Windows.Markup>przestrzeni nazw i zestawu PresentationFramework.</xref:System.Windows.Markup> </xref:System.Windows.Markup.XamlWriter> Jednak niższego poziomu czytników XAML i autorzy XAML z zestawu System.Xaml (na podstawie klasy <xref:System.Xaml.XamlReader?displayProperty=fullName>, <xref:System.Xaml.XamlWriter?displayProperty=fullName>) nie mają dostępu do ustawienia wewnętrzne WPF.</xref:System.Xaml.XamlWriter?displayProperty=fullName> </xref:System.Xaml.XamlReader?displayProperty=fullName> Nie ma żadnych zależności z System.Xaml do dowolnego zestawu specyficzne dla WPF. Bez dostępu do ustawienia wewnętrzne WPF czytników System.Xaml i autorzy poprawnie nie można załadować lub Zapisz WPF wszystkie typy lub typy oparte na typach WPF. W szczególności czytników System.Xaml i autorzy nie rozumie pojęcia, takie jak właściwości zależności WPF kopii Magazyn właściwości ani wszystkie szczegółowe informacje o używaniu WPF style, słownikach zasobów i szablony. W związku z tym jest opcja upewnij: — Jeśli czy ładowanie typów WPF i/lub są przy użyciu kodu XAML w formie BAML w dowolny sposób, czytników PresentationFramework XAML i zapisywania XAML.      — Jeśli nie używają żadnych typów WPF lub BAML formę XAML i nie używasz innej określonych technologii firmy czytnik XAML lub wykonania modułu zapisującego XAML przyczyn, które są specyficzne dla tej struktury, skorzystaj z czytników System.Xaml XAML i zapisywania XAML.      ## System.Xaml kopii implementacja .NET 4 XamlReader jest powierzchnię interfejsu API można wywołać dla analizatora WPF XAML poziomie struktury. Tej samej podstawowej analizatora składni języka XAML oraz wykonuje środowiska wykonawczego języka XAML, ładowanie i analizowania aplikacji WPF przeznaczonych [!INCLUDE[net_v30_short](~/add/includes/net-v30-short-md.md)] i [!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)].       Jeśli aplikacja jest przeznaczona dla [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)], zewnętrznego interfejsu API jest taki sam, ale części wdrożenia są tworzone [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)] ogólne implementacji XAML w zestawie System.Xaml, co zwiększa wiele aspektów technicznych i raportowania analiza kodu XAML. Celem [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)] niekoniecznie powoduje tym System.Xaml jako odwołanie i szczegóły implementacji, takie jak wyjątki zgłoszone mogą pochodzić z System.Xaml zdefiniowanych typów.      <a name=&quot;xamlTextUsage_XamlReader&quot;></a>## Użycie tekstu języka XAML"
  example:
  - "The following example converts a <xref:System.Windows.Controls.Button> into a string using the <xref:System.Windows.Markup.XamlWriter> class.  The string is then loaded back into a <xref:System.Windows.Controls.Button> using the static <xref:System.Windows.Markup.XamlReader.Load%2A> method on the XamlReader class.  \n  \n [!code-cs[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/add/codesnippet/csharp/XamlReaderWriterSnippets/Window1.xaml.cs#xamlreaderloadxmlreader)]\n [!code-vb[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/add/codesnippet/visualbasic/xamlreaderwritersnippets/window1.xaml.vb#xamlreaderloadxmlreader)]"
  syntax:
    content: public class XamlReader
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.#ctor
  id: '#ctor'
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: XamlReader()
  nameWithType: XamlReader.XamlReader()
  fullName: System.Windows.Markup.XamlReader.XamlReader()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Windows.Markup.XamlReader&quot;> </xref> klasy."
  syntax:
    content: public XamlReader ();
    parameters: []
  overload: System.Windows.Markup.XamlReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.CancelAsync
  id: CancelAsync
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: CancelAsync()
  nameWithType: XamlReader.CancelAsync()
  fullName: System.Windows.Markup.XamlReader.CancelAsync()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "Przerywa bieżącej operacji asynchronicznych obciążenia, jeśli istnieje oczekująca operacja asynchronicznego obciążenia."
  remarks: "CancelAsync jest operacją asynchroniczną; w związku z tym niektóre ładowania może wystąpić, zanim operacja została przerwana."
  syntax:
    content: public void CancelAsync ();
    parameters: []
  overload: System.Windows.Markup.XamlReader.CancelAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.GetWpfSchemaContext
  id: GetWpfSchemaContext
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: GetWpfSchemaContext()
  nameWithType: XamlReader.GetWpfSchemaContext()
  fullName: System.Windows.Markup.XamlReader.GetWpfSchemaContext()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "Zwraca <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> obiekt, który reprezentuje ustawienia kontekst schematu WPF dla <xref href=&quot;System.Windows.Markup.XamlReader&quot;> </xref>."
  syntax:
    content: public static System.Xaml.XamlSchemaContext GetWpfSchemaContext ();
    parameters: []
    return:
      type: System.Xaml.XamlSchemaContext
      description: "A <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> obiekt, który reprezentuje ustawienia kontekst schematu WPF dla <xref href=&quot;System.Windows.Markup.XamlReader&quot;> </xref>."
  overload: System.Windows.Markup.XamlReader.GetWpfSchemaContext*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.Load(System.IO.Stream)
  id: Load(System.IO.Stream)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: Load(Stream)
  nameWithType: XamlReader.Load(Stream)
  fullName: System.Windows.Markup.XamlReader.Load(Stream)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "Odczytuje dane wejściowe XAML w określonym <xref:System.IO.Stream>i zwraca <xref:System.Object>oznacza to katalog główny drzewa odpowiednich obiektów.</xref:System.Object> </xref:System.IO.Stream>"
  remarks: ''
  example:
  - "The following example saves a <xref:System.Windows.Controls.Button> into a <xref:System.IO.MemoryStream> using the <xref:System.Windows.Markup.XamlWriter> class. The stream is then loaded back into a <xref:System.Windows.Controls.Button> using the static <xref:System.Windows.Markup.XamlReader.Load%2A> method on the <xref:System.Windows.Markup.XamlReader> class.  \n  \n [!code-cs[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/add/codesnippet/csharp/XamlReaderWriterSnippets/Window1.xaml.cs#xamlreaderloadxmlreader)]\n [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/add/codesnippet/visualbasic/xamlreaderwritersnippets/window1.xaml.vb#xamlreaderloadxmlreader)]"
  syntax:
    content: public static object Load (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Kod XAML, aby załadować w formie strumienia."
    return:
      type: System.Object
      description: "Obiekt w katalogu głównym drzewa utworzony obiekt."
  overload: System.Windows.Markup.XamlReader.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.Load(System.Xaml.XamlReader)
  id: Load(System.Xaml.XamlReader)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: Load(XamlReader)
  nameWithType: XamlReader.Load(XamlReader)
  fullName: System.Windows.Markup.XamlReader.Load(XamlReader)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "Odczytuje dane wejściowe XAML za pomocą podanego <xref href=&quot;System.Xaml.XamlReader&quot;> </xref> i zwraca obiekt, który jest elementem głównym drzewa odpowiednich obiektów."
  remarks: "Wejściowy <xref:System.Xaml.XamlReader>może być <xref:System.Windows.Baml2006.Baml2006Reader>.</xref:System.Windows.Baml2006.Baml2006Reader> </xref:System.Xaml.XamlReader> Jest to, jak załadować BAML w czasie wykonywania, lub do lokalizacji narzędzia celów."
  syntax:
    content: public static object Load (System.Xaml.XamlReader reader);
    parameters:
    - id: reader
      type: System.Xaml.XamlReader
      description: "A <xref href=&quot;System.Xaml.XamlReader&quot;></xref> object. Oczekuje się można zainicjować przy użyciu wejściowych XAML."
    return:
      type: System.Object
      description: "Obiekt, który jest elementem głównym drzewa utworzony obiekt."
  overload: System.Windows.Markup.XamlReader.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.Load(System.Xml.XmlReader)
  id: Load(System.Xml.XmlReader)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: Load(XmlReader)
  nameWithType: XamlReader.Load(XmlReader)
  fullName: System.Windows.Markup.XamlReader.Load(XmlReader)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "Odczytuje dane wejściowe XAML w określonym <xref:System.Xml.XmlReader>i zwraca obiekt, który jest elementem głównym drzewa odpowiednich obiektów.</xref:System.Xml.XmlReader>"
  remarks: ''
  example:
  - "The following example converts a <xref:System.Windows.Controls.Button> into a string using the <xref:System.Windows.Markup.XamlWriter> class.  The string is then loaded back into a <xref:System.Windows.Controls.Button> using the static <xref:System.Windows.Markup.XamlReader.Load%2A> method on the <xref:System.Windows.Markup.XamlReader> class.  \n  \n [!code-cs[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/add/codesnippet/csharp/XamlReaderWriterSnippets/Window1.xaml.cs#xamlreaderloadxmlreader)]\n [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/add/codesnippet/visualbasic/xamlreaderwritersnippets/window1.xaml.vb#xamlreaderloadxmlreader)]"
  syntax:
    content: public static object Load (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>Który został już załadowany XAML danych wejściowych do załadowania w postaci XML.</xref:System.Xml.XmlReader>"
    return:
      type: System.Object
      description: "Obiekt, który jest elementem głównym drzewa utworzony obiekt."
  overload: System.Windows.Markup.XamlReader.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.Load(System.IO.Stream,System.Windows.Markup.ParserContext)
  id: Load(System.IO.Stream,System.Windows.Markup.ParserContext)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: Load(Stream,ParserContext)
  nameWithType: XamlReader.Load(Stream,ParserContext)
  fullName: System.Windows.Markup.XamlReader.Load(Stream,ParserContext)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "Odczytuje dane wejściowe XAML w określonym <xref:System.IO.Stream>i zwraca obiekt, który jest elementem głównym drzewa odpowiednich obiektów.</xref:System.IO.Stream>"
  syntax:
    content: public static object Load (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Strumień, który zawiera XAML danych wejściowych do załadowania."
    - id: parserContext
      type: System.Windows.Markup.ParserContext
      description: "Informacje o kontekście używane przez analizator."
    return:
      type: System.Object
      description: "Obiekt, który jest elementem głównym drzewa utworzony obiekt."
  overload: System.Windows.Markup.XamlReader.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>parserContext</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)
  id: LoadAsync(System.IO.Stream)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: LoadAsync(Stream)
  nameWithType: XamlReader.LoadAsync(Stream)
  fullName: System.Windows.Markup.XamlReader.LoadAsync(Stream)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "Odczytuje dane wejściowe XAML w określonym <xref:System.IO.Stream>i Zwraca pierwiastek drzewie odpowiednich obiektów.</xref:System.IO.Stream>"
  remarks: "Operacja asynchroniczna obciążenia XAML początkowo zwróci obiekt, który jest wyłącznie do obiektu głównego. Asynchronicznie następnie analizowanie zawartości XAML nadal i wszystkie jego obiekty podrzędne są wypełnione w katalogu głównym. Dzięki temu nie trzeba typowe WPF XAML przetwarzania zachowania i jego interakcji z WPF koncepcji okres istnienia obiektu. Interakcja typowe (z systemem innym niż — async) wszystkie właściwości obiektu w tym wszystkie kolekcje podrzędne są wypełnione przed zwracanie elementu i raportowania go jako załadowane. To zachowanie jest równa metodologia dołu do góry tworzenia drzewa przypadku ostatni obiekt na udostępnienie obiektu głównego.       Zazwyczaj miejsce w aplikacji WPF drzewa obiektów przypisywanej zwrócony obiekt, z wiedzy, które zawartości może nadal być wypełnianie i może spowodować aktualizacje przyrostowe układu, jeśli cała zawartość jest udostępniany jako część interfejsu użytkownika. Z tego powodu jest typowy do izolowania lub wirtualizację wszelkie obiekty asynchronicznie załadować z pliku XAML, a na potrzeby powiadomienia, kiedy stan aplikacji lub specyficzne dla aplikacji logiki <xref:System.Windows.Markup.XamlReader.LoadCompleted>jest obsługiwany.</xref:System.Windows.Markup.XamlReader.LoadCompleted>       Aby LoadAsync asynchronicznie, załadować dane wejściowe XAML elementu głównego w kodzie XAML danych wejściowych musi zawierać atrybut i wartość `x:SynchronousMode=&quot;Async&quot;`. Wartość jest traktowany jako wielkość liter. Jeśli główny wejściowych XAML nie zawiera `x:SynchronousMode=&quot;Async&quot;`, nie wyjątku i wywołanie jest przetwarzany jako synchroniczne obciążenia (zobacz <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%29>).</xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%29>       Tylko jedna operacja asynchroniczne ładowanie każdego wystąpienia <xref:System.Windows.Markup.XamlReader>klasy można wykonać w czasie.</xref:System.Windows.Markup.XamlReader>  Jeśli nastąpiła więcej niż jedną operację asynchroniczną, w tym samym wystąpieniu <xref:System.Windows.Markup.XamlReader>klasy <xref:System.InvalidOperationException>jest generowany.</xref:System.InvalidOperationException> </xref:System.Windows.Markup.XamlReader>"
  syntax:
    content: public object LoadAsync (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Strumień XAML zawierającego dane wejściowe obciążenia."
    return:
      type: System.Object
      description: "Obiekt, który jest elementem głównym drzewa utworzony obiekt."
  overload: System.Windows.Markup.XamlReader.LoadAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Wiele operacji obciążenia oczekujących jednocześnie takie same <xref href=&quot;System.Windows.Markup.XamlReader&quot;> </xref>."
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.LoadAsync(System.Xml.XmlReader)
  id: LoadAsync(System.Xml.XmlReader)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: LoadAsync(XmlReader)
  nameWithType: XamlReader.LoadAsync(XmlReader)
  fullName: System.Windows.Markup.XamlReader.LoadAsync(XmlReader)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "Odczytuje dane wejściowe XAML w określonym <xref:System.Xml.XmlReader>i Zwraca pierwiastek drzewie odpowiednich obiektów.</xref:System.Xml.XmlReader>"
  remarks: "Operacja asynchroniczna obciążenia XAML początkowo zwróci obiekt, który jest wyłącznie do obiektu głównego. Asynchronicznie następnie analizowanie zawartości XAML nadal i wszystkie jego obiekty podrzędne są wypełnione w katalogu głównym. Dzięki temu nie trzeba typowe WPF XAML przetwarzania zachowania i jego interakcji z WPF koncepcji okres istnienia obiektu. Interakcja typowe (z systemem innym niż — async) wszystkie właściwości obiektu w tym wszystkie kolekcje podrzędne są wypełnione przed zwracanie elementu i raportowania go jako załadowane. To zachowanie jest równa metodologia dołu do góry tworzenia drzewa przypadku ostatni obiekt na udostępnienie obiektu głównego.       Zazwyczaj przypisywanej zwrócony obiekt z LoadAsync miejsce w drzewie obiekt aplikacji, z wiedzy, które zawartości może nadal być wypełnianie i może powodować aktualizacje przyrostowe układu, jeśli cała zawartość jest udostępniany jako część interfejsu użytkownika. Z tego powodu jest typowy do izolowania lub wirtualizację wszelkie obiekty asynchronicznie załadować z pliku XAML, a na potrzeby powiadomienia, kiedy stan aplikacji lub specyficzne dla aplikacji logiki <xref:System.Windows.Markup.XamlReader.LoadCompleted>jest obsługiwany.</xref:System.Windows.Markup.XamlReader.LoadCompleted>       Aby LoadAsync załadować XAML wejściowych asynchronicznie, element główny w kodzie XAML musi zawierać atrybut i wartość `x:SynchronousMode=&quot;Async&quot;`. Wartość jest traktowany jako wielkość liter. Jeśli główny znaczników XAML nie zawiera `x:SynchronousMode=&quot;Async&quot;`, nie wyjątku i wywołanie zamiast tego jest przetwarzany jako synchroniczne obciążenia (zobacz <xref:System.Windows.Markup.XamlReader.Load%28System.Xml.XmlReader%29>).</xref:System.Windows.Markup.XamlReader.Load%28System.Xml.XmlReader%29>       Tylko jedna operacja asynchroniczne ładowanie każdego wystąpienia <xref:System.Windows.Markup.XamlReader>klasy można wykonać w czasie.</xref:System.Windows.Markup.XamlReader>  Jeśli nastąpiła więcej niż jedną operację asynchroniczną, w tym samym wystąpieniu <xref:System.Windows.Markup.XamlReader>klasy <xref:System.InvalidOperationException>jest generowany.</xref:System.InvalidOperationException> </xref:System.Windows.Markup.XamlReader>"
  syntax:
    content: public object LoadAsync (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Istniejące <xref:System.Xml.XmlReader>który został już załadowany odczytu danych wejściowych XAML.</xref:System.Xml.XmlReader>"
    return:
      type: System.Object
      description: "Korzeń drzewa utworzony obiekt."
  overload: System.Windows.Markup.XamlReader.LoadAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Wiele operacji obciążenia są wykonywane równocześnie takie same <xref href=&quot;System.Windows.Markup.XamlReader&quot;> </xref>."
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext)
  id: LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: LoadAsync(Stream,ParserContext)
  nameWithType: XamlReader.LoadAsync(Stream,ParserContext)
  fullName: System.Windows.Markup.XamlReader.LoadAsync(Stream,ParserContext)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "Odczytuje dane wejściowe XAML w określonym <xref:System.IO.Stream>i Zwraca pierwiastek drzewie odpowiednich obiektów.</xref:System.IO.Stream>"
  remarks: "Operacja asynchroniczna obciążenia XAML początkowo zwróci obiekt, który jest wyłącznie do obiektu głównego. Asynchronicznie następnie analizowanie zawartości XAML nadal i wszystkie jego obiekty podrzędne są wypełnione w katalogu głównym. Dzięki temu nie trzeba typowe WPF XAML przetwarzania zachowania i jego interakcji z WPF koncepcji okres istnienia obiektu. Interakcja typowe (z systemem innym niż — async) wszystkie właściwości obiektu w tym wszystkie kolekcje podrzędne są wypełnione przed zwracanie elementu i raportowania go jako załadowane. To zachowanie jest równa metodologia dołu do góry tworzenia drzewa przypadku ostatni obiekt na udostępnienie obiektu głównego.       Zazwyczaj przypisywanej zwrócony obiekt miejsce w drzewie obiekt aplikacji, z wiedzy, które zawartości może nadal być wypełnianie i może powodować aktualizacje przyrostowe układu, jeśli cała zawartość jest udostępniany jako część interfejsu użytkownika. Z tego powodu jest typowy do izolowania lub wirtualizację wszelkie obiekty asynchronicznie załadować z pliku XAML, a na potrzeby powiadomienia, kiedy stan aplikacji lub specyficzne dla aplikacji logiki <xref:System.Windows.Markup.XamlReader.LoadCompleted>jest obsługiwany.</xref:System.Windows.Markup.XamlReader.LoadCompleted>       Aby LoadAsync asynchronicznie załadować znaczników, element główny w kodzie XAML musi zawierać atrybut i wartość `x:SynchronousMode=&quot;Async&quot;`. Wartość jest traktowany jako wielkość liter. Jeśli główny znaczników XAML nie zawiera `x:SynchronousMode=&quot;Async&quot;`, nie wyjątku i wywołanie jest przetwarzany jako synchroniczne obciążenia (zobacz <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29>).</xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29>       Tylko jedna operacja asynchroniczne ładowanie każdego wystąpienia <xref:System.Windows.Markup.XamlReader>klasy można wykonać w czasie.</xref:System.Windows.Markup.XamlReader>  Jeśli nastąpiła więcej niż jedną operację asynchroniczną, w tym samym wystąpieniu <xref:System.Windows.Markup.XamlReader>klasy <xref:System.InvalidOperationException>jest generowany.</xref:System.InvalidOperationException> </xref:System.Windows.Markup.XamlReader>"
  syntax:
    content: public object LoadAsync (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Strumień XAML zawierającego dane wejściowe obciążenia."
    - id: parserContext
      type: System.Windows.Markup.ParserContext
      description: "Informacje o kontekście używane przez analizator."
    return:
      type: System.Object
      description: "Korzeń drzewa utworzony obiekt."
  overload: System.Windows.Markup.XamlReader.LoadAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Wiele operacji obciążenia są wykonywane równocześnie takie same <xref href=&quot;System.Windows.Markup.XamlReader&quot;> </xref>."
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.LoadCompleted
  id: LoadCompleted
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: LoadCompleted
  nameWithType: XamlReader.LoadCompleted
  fullName: System.Windows.Markup.XamlReader.LoadCompleted
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "Występuje po zakończeniu operacji asynchronicznej obciążenia."
  remarks: "LoadCompleted również jest wywoływane, gdy przerwanie operacji asynchronicznych obciążenia."
  syntax:
    content: public event System.ComponentModel.AsyncCompletedEventHandler LoadCompleted;
    return:
      type: System.ComponentModel.AsyncCompletedEventHandler
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.Parse(System.String)
  id: Parse(System.String)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: Parse(String)
  nameWithType: XamlReader.Parse(String)
  fullName: System.Windows.Markup.XamlReader.Parse(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "Odczytuje dane wejściowe XAML w parametrach określony tekst i zwraca obiekt odpowiadający w katalogu głównym określonej znaczników."
  remarks: "Implementacja wywołuje <xref:System.Windows.Markup.XamlReader.Load%2A>wewnętrznie po tworzenia strumienia z ciągu.</xref:System.Windows.Markup.XamlReader.Load%2A> Zobacz <xref:System.Windows.Markup.XamlReader.Load%2A>Aby uzyskać dodatkowe informacje, takie jak możliwych wyjątków.</xref:System.Windows.Markup.XamlReader.Load%2A>"
  syntax:
    content: public static object Parse (string xamlText);
    parameters:
    - id: xamlText
      type: System.String
      description: "Dane wejściowe XAML jako jeden ciąg tekstowy."
    return:
      type: System.Object
      description: "Korzeń drzewa utworzony obiekt."
  overload: System.Windows.Markup.XamlReader.Parse*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.Parse(System.String,System.Windows.Markup.ParserContext)
  id: Parse(System.String,System.Windows.Markup.ParserContext)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: Parse(String,ParserContext)
  nameWithType: XamlReader.Parse(String,ParserContext)
  fullName: System.Windows.Markup.XamlReader.Parse(String,ParserContext)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "Odczytuje kod znaczników XAML w ciągu określonego tekstu (przy użyciu określonej <xref href=&quot;System.Windows.Markup.ParserContext&quot;> </xref>) i zwraca obiekt, który odpowiada w katalogu głównym określonej znaczników."
  remarks: "Implementacja wywołuje <xref:System.Windows.Markup.XamlReader.Load%2A>wewnętrznie po tworzenia strumienia z ciągu.</xref:System.Windows.Markup.XamlReader.Load%2A> Zobacz <xref:System.Windows.Markup.XamlReader.Load%2A>Aby uzyskać dodatkowe informacje, takie jak możliwych wyjątków.</xref:System.Windows.Markup.XamlReader.Load%2A>"
  syntax:
    content: public static object Parse (string xamlText, System.Windows.Markup.ParserContext parserContext);
    parameters:
    - id: xamlText
      type: System.String
      description: "Dane wejściowe XAML jako jeden ciąg tekstowy."
    - id: parserContext
      type: System.Windows.Markup.ParserContext
      description: "Informacje o kontekście używane przez analizator."
    return:
      type: System.Object
      description: "Korzeń drzewa utworzony obiekt."
  overload: System.Windows.Markup.XamlReader.Parse*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.Markup.XamlReader.#ctor
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: XamlReader()
  nameWithType: XamlReader.XamlReader()
  fullName: System.Windows.Markup.XamlReader.XamlReader()
- uid: System.Windows.Markup.XamlReader.CancelAsync
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: CancelAsync()
  nameWithType: XamlReader.CancelAsync()
  fullName: System.Windows.Markup.XamlReader.CancelAsync()
- uid: System.Windows.Markup.XamlReader.GetWpfSchemaContext
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: GetWpfSchemaContext()
  nameWithType: XamlReader.GetWpfSchemaContext()
  fullName: System.Windows.Markup.XamlReader.GetWpfSchemaContext()
- uid: System.Xaml.XamlSchemaContext
  parent: System.Xaml
  isExternal: false
  name: XamlSchemaContext
  nameWithType: XamlSchemaContext
  fullName: System.Xaml.XamlSchemaContext
- uid: System.Windows.Markup.XamlReader.Load(System.IO.Stream)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Load(Stream)
  nameWithType: XamlReader.Load(Stream)
  fullName: System.Windows.Markup.XamlReader.Load(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Windows.Markup.XamlReader.Load(System.Xaml.XamlReader)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Load(XamlReader)
  nameWithType: XamlReader.Load(XamlReader)
  fullName: System.Windows.Markup.XamlReader.Load(XamlReader)
- uid: System.Xaml.XamlReader
  parent: System.Xaml
  isExternal: false
  name: XamlReader
  nameWithType: XamlReader
  fullName: System.Xaml.XamlReader
- uid: System.Windows.Markup.XamlReader.Load(System.Xml.XmlReader)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Load(XmlReader)
  nameWithType: XamlReader.Load(XmlReader)
  fullName: System.Windows.Markup.XamlReader.Load(XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Windows.Markup.XamlReader.Load(System.IO.Stream,System.Windows.Markup.ParserContext)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Load(Stream,ParserContext)
  nameWithType: XamlReader.Load(Stream,ParserContext)
  fullName: System.Windows.Markup.XamlReader.Load(Stream,ParserContext)
- uid: System.Windows.Markup.ParserContext
  parent: System.Windows.Markup
  isExternal: false
  name: ParserContext
  nameWithType: ParserContext
  fullName: System.Windows.Markup.ParserContext
- uid: System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: LoadAsync(Stream)
  nameWithType: XamlReader.LoadAsync(Stream)
  fullName: System.Windows.Markup.XamlReader.LoadAsync(Stream)
- uid: System.Windows.Markup.XamlReader.LoadAsync(System.Xml.XmlReader)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: LoadAsync(XmlReader)
  nameWithType: XamlReader.LoadAsync(XmlReader)
  fullName: System.Windows.Markup.XamlReader.LoadAsync(XmlReader)
- uid: System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: LoadAsync(Stream,ParserContext)
  nameWithType: XamlReader.LoadAsync(Stream,ParserContext)
  fullName: System.Windows.Markup.XamlReader.LoadAsync(Stream,ParserContext)
- uid: System.Windows.Markup.XamlReader.LoadCompleted
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: LoadCompleted
  nameWithType: XamlReader.LoadCompleted
  fullName: System.Windows.Markup.XamlReader.LoadCompleted
- uid: System.ComponentModel.AsyncCompletedEventHandler
  parent: System.ComponentModel
  isExternal: true
  name: AsyncCompletedEventHandler
  nameWithType: AsyncCompletedEventHandler
  fullName: System.ComponentModel.AsyncCompletedEventHandler
- uid: System.Windows.Markup.XamlReader.Parse(System.String)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Parse(String)
  nameWithType: XamlReader.Parse(String)
  fullName: System.Windows.Markup.XamlReader.Parse(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Markup.XamlReader.Parse(System.String,System.Windows.Markup.ParserContext)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Parse(String,ParserContext)
  nameWithType: XamlReader.Parse(String,ParserContext)
  fullName: System.Windows.Markup.XamlReader.Parse(String,ParserContext)
- uid: System.Windows.Markup.XamlReader.#ctor*
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: XamlReader
  nameWithType: XamlReader.XamlReader
- uid: System.Windows.Markup.XamlReader.CancelAsync*
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: CancelAsync
  nameWithType: XamlReader.CancelAsync
- uid: System.Windows.Markup.XamlReader.GetWpfSchemaContext*
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: GetWpfSchemaContext
  nameWithType: XamlReader.GetWpfSchemaContext
- uid: System.Windows.Markup.XamlReader.Load*
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Load
  nameWithType: XamlReader.Load
- uid: System.Windows.Markup.XamlReader.LoadAsync*
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: LoadAsync
  nameWithType: XamlReader.LoadAsync
- uid: System.Windows.Markup.XamlReader.Parse*
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Parse
  nameWithType: XamlReader.Parse
