### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Tokens.SecurityToken
  id: SecurityToken
  children:
  - System.IdentityModel.Tokens.SecurityToken.#ctor
  - System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause``1
  - System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause``1
  - System.IdentityModel.Tokens.SecurityToken.Id
  - System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  - System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  - System.IdentityModel.Tokens.SecurityToken.SecurityKeys
  - System.IdentityModel.Tokens.SecurityToken.ValidFrom
  - System.IdentityModel.Tokens.SecurityToken.ValidTo
  langs:
  - csharp
  name: SecurityToken
  nameWithType: SecurityToken
  fullName: System.IdentityModel.Tokens.SecurityToken
  type: Class
  summary: "Reprezentuje klasę podstawową używaną do zaimplementowania wszystkich tokenów zabezpieczających."
  remarks: "Użyj tokenu zabezpieczającego udostępniające poświadczenia uwierzytelniania lub do ochrony wiadomości.       Tokenu zabezpieczającego można używać do udostępniające poświadczenia uwierzytelniania, materiał kluczy kryptograficznych, lub, w przypadku tokenu zabezpieczającego wydanego przez usługę tokenu zabezpieczającego (STS), zbiór oświadczenia dotyczące tematu. Wszystkie tokeny zabezpieczające pochodzi od klasy obiektu SecurityToken.       Począwszy od platformy .NET 4.5, Windows Identity Foundation (WIF) zostało pełni zintegrowane programu .NET Framework i klasy udostępnianych przez WIF są preferowaną metodą programu obsługi tokenów zabezpieczających w kodzie. W WIF tokeny zabezpieczające są serializacji i deserializacji do i z ich XML reprezentacja i są weryfikowane przy użyciu klasy pochodzące od <xref:System.IdentityModel.Tokens.SecurityTokenHandler>klasy podstawowej</xref:System.IdentityModel.Tokens.SecurityTokenHandler> Sprawdzanie poprawności tokenu obejmuje nie tylko zapewnia, że token jest prawidłowy, ale również zwracanie <xref:System.Security.Claims.ClaimsIdentity>wystąpienia z tokenu, który może być używana w podejmowaniu decyzji dotyczących uwierzytelniania i autoryzacji.</xref:System.Security.Claims.ClaimsIdentity> <xref:System.Security.Claims.ClaimsIdentity>Jest tworzony przez implementację programu obsługi tokenów <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>metody z oświadczeń zawartych w tokenie jako również od oświadczenia, które są wewnętrzne do tokenu typu samej siebie.</xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> </xref:System.Security.Claims.ClaimsIdentity>       WIF jest dostarczany z obsługą następujące typy tokenów zabezpieczających:- <xref:System.IdentityModel.Tokens.Saml2SecurityToken>: reprezentuje token zabezpieczający, który jest oparty na potwierdzenia języka SAML 2.0.</xref:System.IdentityModel.Tokens.Saml2SecurityToken> Ten typ tokenu jest zwykle wystawiony przez usługę tokenu zabezpieczającego w odpowiedzi WS-Trust lub WS-Federation zabezpieczeń żądania tokenu (RST).      - <xref:System.IdentityModel.Tokens.SamlSecurityToken>: Reprezentuje token zabezpieczający, który jest oparty na potwierdzenia 1.1 SAML.</xref:System.IdentityModel.Tokens.SamlSecurityToken> Ten typ tokenu jest zwykle wystawiony przez usługę tokenu zabezpieczającego w odpowiedzi WS-Trust lub WS-Federation zabezpieczeń żądania tokenu (RST).      - <xref:System.IdentityModel.Tokens.KerberosRequestorSecurityToken>i <xref:System.IdentityModel.Tokens.KerberosReceiverSecurityToken>: reprezentuje token zabezpieczający, który jest oparty na bilet Kerberos, który jest odebranych lub wysłanych wiadomości SOAP - <xref:System.IdentityModel.Tokens.RsaSecurityToken>: reprezentuje token zabezpieczający, który jest oparty na klucz, który jest tworzony przy użyciu algorytmu RSA.</xref:System.IdentityModel.Tokens.RsaSecurityToken> </xref:System.IdentityModel.Tokens.KerberosReceiverSecurityToken> </xref:System.IdentityModel.Tokens.KerberosRequestorSecurityToken>      - <xref:System.IdentityModel.Tokens.SessionSecurityToken>: Reprezentuje token zabezpieczający, który zawiera informacje o sesji.</xref:System.IdentityModel.Tokens.SessionSecurityToken>      - <xref:System.IdentityModel.Tokens.UserNameSecurityToken>: Reprezentuje tokenu zabezpieczającego, który jest oparty na nazwę użytkownika i hasło.</xref:System.IdentityModel.Tokens.UserNameSecurityToken>      - <xref:System.IdentityModel.Tokens.WindowsSecurityToken>: Reprezentuje token zabezpieczający, który jest oparty na tożsamość konta domeny lub użytkownika systemu Windows.</xref:System.IdentityModel.Tokens.WindowsSecurityToken>      - <xref:System.IdentityModel.Tokens.X509SecurityToken>: Reprezentuje token zabezpieczający, który jest oparty na certyfikat X.509.</xref:System.IdentityModel.Tokens.X509SecurityToken>      - <xref:System.IdentityModel.Tokens.X509WindowsSecurityToken>: Reprezentuje token zabezpieczający, który jest oparty na certyfikat X.509, który jest zamapowany na użytkownika domeny systemu Windows lub komputera lokalnego konta użytkownika.</xref:System.IdentityModel.Tokens.X509WindowsSecurityToken>       Dwie inne zabezpieczeń tokenu klasy <xref:System.IdentityModel.Tokens.GenericXmlSecurityToken>i <xref:System.IdentityModel.Tokens.EncryptedSecurityToken>, może służyć do obsługi ogólnych przypadków.</xref:System.IdentityModel.Tokens.EncryptedSecurityToken> </xref:System.IdentityModel.Tokens.GenericXmlSecurityToken>       Ogólnie wymowy tokeny zabezpieczające dzielą się na trzy główne kategorie:-materiału klucza tokeny przenoszenia lub odwołać kryptograficznych. Na przykład <xref:System.IdentityModel.Tokens.RsaSecurityToken>i <xref:System.IdentityModel.Tokens.X509SecurityToken>typy są często używane w tym celu.</xref:System.IdentityModel.Tokens.X509SecurityToken> </xref:System.IdentityModel.Tokens.RsaSecurityToken>      -Tokeny reprezentujących poświadczenia dla użytkowników, którzy już uwierzytelniony. Na przykład <xref:System.IdentityModel.Tokens.UserNameSecurityToken>, <xref:System.IdentityModel.Tokens.WindowsSecurityToken>, a w przypadku użytkownik uwierzytelniony przy użyciu certyfikatu, <xref:System.IdentityModel.Tokens.X509SecurityToken>typów.</xref:System.IdentityModel.Tokens.X509SecurityToken> </xref:System.IdentityModel.Tokens.WindowsSecurityToken> </xref:System.IdentityModel.Tokens.UserNameSecurityToken>      -Tokenów wystawionych przez usługę tokenu zabezpieczającego (STS) w odpowiedzi na żądania tokenu zabezpieczeń, za pomocą protokołu WS-Trust lub protokołu WS-Federation. Zwykle są one zwracane w `wst:RequestSecurityTokenResponse` XML fragment. <xref:System.IdentityModel.Tokens.Saml2SecurityToken>i <xref:System.IdentityModel.Tokens.SamlSecurityToken>typy są najczęściej używane do reprezentowania tych tokenów.</xref:System.IdentityModel.Tokens.SamlSecurityToken> </xref:System.IdentityModel.Tokens.Saml2SecurityToken>       Specjalny typ tokenu <xref:System.IdentityModel.Tokens.SessionSecurityToken>, zawiera informacje potrzebne do odtworzenia podmiot zabezpieczeń, korzystając z sesji w scenariuszach aktywnych lub pasywnych.</xref:System.IdentityModel.Tokens.SessionSecurityToken>       Dodawanie funkcji do istniejących typów tokenu może pochodzić od określonego typu i jego skojarzony program obsługi tokenów do obsługi nowych elementów, które dodajesz do tokenu. Aby dodać obsługę nowych typów tokenów, może pochodzi bezpośrednio z klasy obiektu SecurityToken. Gdy to zrobisz, zostanie również należy utworzyć klasę programu obsługi tokenów przez tworzenia klasy pochodnej z <xref:System.IdentityModel.Tokens.SecurityTokenHandler>klasy.</xref:System.IdentityModel.Tokens.SecurityTokenHandler> W zależności od tego, jaki ma być używany token konieczne może być tworzenie niestandardowego programu rozpoznawania nazw tokenów przy wyprowadzanie z <xref:System.IdentityModel.Tokens.IssuerTokenResolver>klas oraz co najmniej jeden typ klauzuli identyfikatora klucza niestandardowego przez tworzenia klasy pochodnej z <xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>klasy.</xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause> </xref:System.IdentityModel.Tokens.IssuerTokenResolver>"
  example:
  - "The code examples that are used in the SecurityToken topics are taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). It includes an implementation of a `SimpleWebToken` class and a `SimpleWebTokenHandler` class, as well as other classes that support SWT tokens. For information about this sample and other samples available for WIF and about where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md). The following code shows the implementation of the `SimpleWebToken` class. This class extends SecurityToken.  \n  \n [!code-cs[WifCustomTokenST#1](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtokenconstants.cs#1)]  \n[!code-cs[WifCustomTokenST#2](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#2)]"
  syntax:
    content: public abstract class SecurityToken
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.#ctor
  id: '#ctor'
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: SecurityToken()
  nameWithType: SecurityToken.SecurityToken()
  fullName: System.IdentityModel.Tokens.SecurityToken.SecurityToken()
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Wywoływane przez konstruktorów w klasach pochodnych zainicjować <xref href=&quot;System.IdentityModel.Tokens.SecurityToken&quot;> </xref> klasy."
  syntax:
    content: protected SecurityToken ();
    parameters: []
  overload: System.IdentityModel.Tokens.SecurityToken.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause``1
  id: CanCreateKeyIdentifierClause``1
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: CanCreateKeyIdentifierClause()
  nameWithType: SecurityToken.CanCreateKeyIdentifierClause()
  fullName: System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  syntax:
    content: 'public virtual bool CanCreateKeyIdentifierClause<T> () where T : System.IdentityModel.Tokens.SecurityKeyIdentifierClause;'
    parameters: []
    return:
      type: System.Boolean
      description: "Do dodania."
  overload: System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause<T>*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause``1
  id: CreateKeyIdentifierClause``1
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: CreateKeyIdentifierClause()
  nameWithType: SecurityToken.CreateKeyIdentifierClause()
  fullName: System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  syntax:
    content: 'public virtual T CreateKeyIdentifierClause<T> () where T : System.IdentityModel.Tokens.SecurityKeyIdentifierClause;'
    parameters: []
    return:
      type: T
      description: "Do dodania."
  overload: System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause<T>*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.Id
  id: Id
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: Id
  nameWithType: SecurityToken.Id
  fullName: System.IdentityModel.Tokens.SecurityToken.Id
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Pobiera unikatowy identyfikator tokenu zabezpieczającego."
  remarks: "Zazwyczaj podczas serializacji tokenu zabezpieczającego w formacie XML, `Id` atrybutu dla tokenu zabezpieczeń jest ustawiony na wartość właściwości identyfikator."
  example:
  - "The code examples that are used in the <xref:System.IdentityModel.Tokens.SecurityToken> topics are taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). It includes an implementation of a `SimpleWebToken` class and a `SimpleWebTokenHandler` class, as well as other classes that support SWT tokens. For information about this sample and other samples available for WIF and about where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md). The following code shows the override of the Id property.  \n  \n [!code-cs[WifCustomTokenST#1](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtokenconstants.cs#1)]  \n[!code-cs[WifCustomTokenST#3](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#3)]  \n[!code-cs[WifCustomTokenST#4](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#4)]"
  syntax:
    content: public abstract string Id { get; }
    return:
      type: System.String
      description: "Unikatowy identyfikator tokenu zabezpieczającego."
  overload: System.IdentityModel.Tokens.SecurityToken.Id*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  id: MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: MatchesKeyIdentifierClause(SecurityKeyIdentifierClause)
  nameWithType: SecurityToken.MatchesKeyIdentifierClause(SecurityKeyIdentifierClause)
  fullName: System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(SecurityKeyIdentifierClause)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Zwraca wartość wskazującą, czy identyfikator klucza dla tego wystąpienia można rozwiązać do określonego identyfikatora klucza."
  remarks: "Domyślna implementacja obsługuje klauzul identyfikatora klucza typu<xref:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause></xref:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause>"
  syntax:
    content: public virtual bool MatchesKeyIdentifierClause (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause);
    parameters:
    - id: keyIdentifierClause
      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
      description: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifierClause&quot;> </xref> do porównania z tym wystąpieniem."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli <code> keyIdentifierClause </code> jest <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifierClause&quot;> </xref> i ma ten sam Unikatowy identyfikator jako <xref:System.IdentityModel.Tokens.SecurityToken.Id*>właściwość; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.IdentityModel.Tokens.SecurityToken.Id*>"
  overload: System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  id: ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: ResolveKeyIdentifierClause(SecurityKeyIdentifierClause)
  nameWithType: SecurityToken.ResolveKeyIdentifierClause(SecurityKeyIdentifierClause)
  fullName: System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(SecurityKeyIdentifierClause)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Pobiera klucz dla klauzuli określonego identyfikatora klucza."
  remarks: "Wywołania metody ResolveKeyIdentifierClause <xref:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause%2A>określenie, czy klauzula określonego identyfikatora klucza jest taka sama, jak to wystąpienie.</xref:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause%2A>       Domyślna implementacja zwraca pierwszy element <xref:System.IdentityModel.Tokens.SecurityToken.SecurityKeys%2A>kolekcji, jeśli kolekcja nie jest pusty i <xref:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause%2A>zwraca `true`; w przeciwnym razie zwraca `null`.</xref:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause%2A> </xref:System.IdentityModel.Tokens.SecurityToken.SecurityKeys%2A>"
  syntax:
    content: public virtual System.IdentityModel.Tokens.SecurityKey ResolveKeyIdentifierClause (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause);
    parameters:
    - id: keyIdentifierClause
      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
      description: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifierClause&quot;> </xref> uzyskać klucz."
    return:
      type: System.IdentityModel.Tokens.SecurityKey
      description: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityKey&quot;> </xref> reprezentujący klucza."
  overload: System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.SecurityKeys
  id: SecurityKeys
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: SecurityKeys
  nameWithType: SecurityToken.SecurityKeys
  fullName: System.IdentityModel.Tokens.SecurityToken.SecurityKeys
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Pobiera klucze kryptograficzne skojarzone z tokenu zabezpieczającego."
  remarks: "Użyj <xref:System.IdentityModel.Tokens.SamlSecurityToken.SecurityKeys%2A>Właściwość umożliwiająca ustawienie kluczy kryptograficznych ten token zabezpieczający chronić tokeny lub komunikatu protokołu SOAP.</xref:System.IdentityModel.Tokens.SamlSecurityToken.SecurityKeys%2A> Klucze można używać między innymi do cyfrowego podpisywania lub szyfrowania tokenów lub wiadomości SOAP."
  example:
  - "The code examples that are used in the <xref:System.IdentityModel.Tokens.SecurityToken> topics are taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). It includes an implementation of a `SimpleWebToken` class and a `SimpleWebTokenHandler` class, as well as other classes that support SWT tokens. For information about this sample and other samples available for WIF and about where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md). The following code shows the override of the SecurityKeys property.  \n  \n [!code-cs[WifCustomTokenST#1](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtokenconstants.cs#1)]  \n[!code-cs[WifCustomTokenST#3](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#3)]  \n[!code-cs[WifCustomTokenST#5](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#5)]"
  syntax:
    content: public abstract System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Tokens.SecurityKey> SecurityKeys { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Tokens.SecurityKey}
      description: "A &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; typu <xref href=&quot;System.IdentityModel.Tokens.SecurityKey&quot;> </xref> zawierający zestaw kluczy skojarzone z tokenu zabezpieczającego."
  overload: System.IdentityModel.Tokens.SecurityToken.SecurityKeys*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.ValidFrom
  id: ValidFrom
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: ValidFrom
  nameWithType: SecurityToken.ValidFrom
  fullName: System.IdentityModel.Tokens.SecurityToken.ValidFrom
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Pobiera pierwszy moment w czasie, w którym ten token zabezpieczający jest nieprawidłowy."
  remarks: "Użyj ValidFrom i <xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A>Właściwości, aby ustalić okres czasu, w którym <xref:System.IdentityModel.Tokens.SecurityToken>token jest prawidłowy.</xref:System.IdentityModel.Tokens.SecurityToken> </xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A> ValidFrom i <xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A>Właściwości reprezentują czasie imię i nazwisko w czasie, w której token zabezpieczający jest nieprawidłowy, odpowiednio.</xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A>"
  example:
  - "The code examples that are used in the <xref:System.IdentityModel.Tokens.SecurityToken> topics are taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). It includes an implementation of a `SimpleWebToken` class and a `SimpleWebTokenHandler` class, as well as other classes that support SWT tokens. For information about this sample and other samples available for WIF and about where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md). The following code shows the override of the ValidFrom property.  \n  \n [!code-cs[WifCustomTokenST#1](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtokenconstants.cs#1)]  \n[!code-cs[WifCustomTokenST#3](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#3)]  \n[!code-cs[WifCustomTokenST#6](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#6)]  \n[!code-cs[WifCustomTokenST#8](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#8)]"
  syntax:
    content: public abstract DateTime ValidFrom { get; }
    return:
      type: System.DateTime
      description: "A <xref:System.DateTime>reprezentujący moment w czasie, w którym ten token zabezpieczający najpierw jest prawidłowy.</xref:System.DateTime>"
  overload: System.IdentityModel.Tokens.SecurityToken.ValidFrom*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.ValidTo
  id: ValidTo
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: ValidTo
  nameWithType: SecurityToken.ValidTo
  fullName: System.IdentityModel.Tokens.SecurityToken.ValidTo
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Pobiera ostatnią błyskawiczne w czasie, w którym ten token zabezpieczający jest nieprawidłowy."
  remarks: "Użyj <xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A>i ValidTo właściwości, aby ustalić okres czasu, w którym <xref:System.IdentityModel.Tokens.SecurityToken>token jest prawidłowy.</xref:System.IdentityModel.Tokens.SecurityToken> </xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A> <xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A>i właściwości ValidTo reprezentują czasie imię i nazwisko w czasie, w której token zabezpieczający jest nieprawidłowy, odpowiednio.</xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A>"
  example:
  - "The code examples that are used in the <xref:System.IdentityModel.Tokens.SecurityToken> topics are taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). It includes an implementation of a `SimpleWebToken` class and a `SimpleWebTokenHandler` class, as well as other classes that support SWT tokens. For information about this sample and other samples available for WIF and about where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md). The following code shows the override of the ValidTo property.  \n  \n [!code-cs[WifCustomTokenST#1](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtokenconstants.cs#1)]  \n[!code-cs[WifCustomTokenST#3](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#3)]  \n[!code-cs[WifCustomTokenST#7](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#7)]  \n[!code-cs[WifCustomTokenST#8](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#8)]"
  syntax:
    content: public abstract DateTime ValidTo { get; }
    return:
      type: System.DateTime
      description: "A <xref:System.DateTime>reprezentujący ostatnią błyskawiczne w czasie, w którym ten token zabezpieczający jest nieprawidłowy.</xref:System.DateTime>"
  overload: System.IdentityModel.Tokens.SecurityToken.ValidTo*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.IdentityModel.Tokens.SecurityToken.#ctor
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: SecurityToken()
  nameWithType: SecurityToken.SecurityToken()
  fullName: System.IdentityModel.Tokens.SecurityToken.SecurityToken()
- uid: System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause``1
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: CanCreateKeyIdentifierClause()
  nameWithType: SecurityToken.CanCreateKeyIdentifierClause()
  fullName: System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause``1
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: CreateKeyIdentifierClause()
  nameWithType: SecurityToken.CreateKeyIdentifierClause()
  fullName: System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause()
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.IdentityModel.Tokens.SecurityToken.Id
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: Id
  nameWithType: SecurityToken.Id
  fullName: System.IdentityModel.Tokens.SecurityToken.Id
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: MatchesKeyIdentifierClause(SecurityKeyIdentifierClause)
  nameWithType: SecurityToken.MatchesKeyIdentifierClause(SecurityKeyIdentifierClause)
  fullName: System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(SecurityKeyIdentifierClause)
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityKeyIdentifierClause
  nameWithType: SecurityKeyIdentifierClause
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
- uid: System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: ResolveKeyIdentifierClause(SecurityKeyIdentifierClause)
  nameWithType: SecurityToken.ResolveKeyIdentifierClause(SecurityKeyIdentifierClause)
  fullName: System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(SecurityKeyIdentifierClause)
- uid: System.IdentityModel.Tokens.SecurityKey
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityKey
  nameWithType: SecurityKey
  fullName: System.IdentityModel.Tokens.SecurityKey
- uid: System.IdentityModel.Tokens.SecurityToken.SecurityKeys
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: SecurityKeys
  nameWithType: SecurityToken.SecurityKeys
  fullName: System.IdentityModel.Tokens.SecurityToken.SecurityKeys
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Tokens.SecurityKey}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<SecurityKey>
  nameWithType: ReadOnlyCollection<SecurityKey>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Tokens.SecurityKey>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.IdentityModel.Tokens.SecurityKey>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.Tokens.SecurityKey
    name: SecurityKey
    nameWithType: SecurityKey
    fullName: SecurityKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Tokens.SecurityToken.ValidFrom
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: ValidFrom
  nameWithType: SecurityToken.ValidFrom
  fullName: System.IdentityModel.Tokens.SecurityToken.ValidFrom
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.IdentityModel.Tokens.SecurityToken.ValidTo
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: ValidTo
  nameWithType: SecurityToken.ValidTo
  fullName: System.IdentityModel.Tokens.SecurityToken.ValidTo
- uid: System.IdentityModel.Tokens.SecurityToken.#ctor*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: SecurityToken
  nameWithType: SecurityToken.SecurityToken
- uid: System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause<T>*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: CanCreateKeyIdentifierClause<T>
  nameWithType: SecurityToken.CanCreateKeyIdentifierClause<T>
- uid: System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause<T>*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: CreateKeyIdentifierClause<T>
  nameWithType: SecurityToken.CreateKeyIdentifierClause<T>
- uid: System.IdentityModel.Tokens.SecurityToken.Id*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: Id
  nameWithType: SecurityToken.Id
- uid: System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: MatchesKeyIdentifierClause
  nameWithType: SecurityToken.MatchesKeyIdentifierClause
- uid: System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: ResolveKeyIdentifierClause
  nameWithType: SecurityToken.ResolveKeyIdentifierClause
- uid: System.IdentityModel.Tokens.SecurityToken.SecurityKeys*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: SecurityKeys
  nameWithType: SecurityToken.SecurityKeys
- uid: System.IdentityModel.Tokens.SecurityToken.ValidFrom*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: ValidFrom
  nameWithType: SecurityToken.ValidFrom
- uid: System.IdentityModel.Tokens.SecurityToken.ValidTo*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: ValidTo
  nameWithType: SecurityToken.ValidTo
