### YamlMime:ManagedReference
items:
- uid: System.Xml.IFragmentCapableXmlDictionaryWriter
  id: IFragmentCapableXmlDictionaryWriter
  children:
  - System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment
  - System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment
  - System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment(System.IO.Stream,System.Boolean)
  - System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  name: IFragmentCapableXmlDictionaryWriter
  nameWithType: IFragmentCapableXmlDictionaryWriter
  fullName: System.Xml.IFragmentCapableXmlDictionaryWriter
  type: Interface
  summary: "Zawiera właściwości i metod, że w przypadku implementowane przez <xref:System.Xml.XmlDictionaryWriter>, pozwala na przetwarzanie fragmenty XML.</xref:System.Xml.XmlDictionaryWriter>"
  remarks: "Ta klasa definiuje właściwości i metody związane z możliwości <xref:System.Xml.XmlDictionaryWriter>przekierowania strumień innego niż strumień został on utworzony za część dane wyjściowe (&quot;fragment&quot;) i bezpośrednio wstawiania fragment przechwycone przez przekierowywanie do głównego strumienia tego samego modułu zapisującego w późniejszym czasie.</xref:System.Xml.XmlDictionaryWriter>"
  syntax:
    content: public interface IFragmentCapableXmlDictionaryWriter
  implements: []
  platform:
  - net462
- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment
  id: CanFragment
  parent: System.Xml.IFragmentCapableXmlDictionaryWriter
  langs:
  - csharp
  name: CanFragment
  nameWithType: IFragmentCapableXmlDictionaryWriter.CanFragment
  fullName: System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment
  type: Property
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Xml
  summary: "Pobiera wartość wskazującą, czy to <xref:System.Xml.XmlDictionaryWriter>może przetwarzać fragmenty XML.</xref:System.Xml.XmlDictionaryWriter>"
  remarks: "Zwraca t`r`fragmenty ue, jeśli moduł zapisujący, który implementuje ten interfejs może generować i akceptować XML."
  syntax:
    content: public bool CanFragment { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli ta <xref:System.Xml.XmlDictionaryWriter>może przetwarzać fragmenty XML; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Xml.XmlDictionaryWriter>"
  overload: System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment
  id: EndFragment
  parent: System.Xml.IFragmentCapableXmlDictionaryWriter
  langs:
  - csharp
  name: EndFragment()
  nameWithType: IFragmentCapableXmlDictionaryWriter.EndFragment()
  fullName: System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment()
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Xml
  summary: "Kończy przetwarzanie XML fragment."
  remarks: "Zatrzymuje przekierowywanie danych wyjściowych do strumienia dostarczone przez dopasowanie `StartFragment` wywołania. Po tym wywołaniu XML zapisywania danych wyjściowych przechodzi do strumienia pierwotnie używana przez moduł zapisujący przed `StartFragment` wywołania."
  syntax:
    content: public void EndFragment ();
    parameters: []
  overload: System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment(System.IO.Stream,System.Boolean)
  id: StartFragment(System.IO.Stream,System.Boolean)
  parent: System.Xml.IFragmentCapableXmlDictionaryWriter
  langs:
  - csharp
  name: StartFragment(Stream,Boolean)
  nameWithType: IFragmentCapableXmlDictionaryWriter.StartFragment(Stream,Boolean)
  fullName: System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment(Stream,Boolean)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Xml
  summary: "Rozpoczyna przetwarzanie XML fragment."
  remarks: "Tymczasowo uruchamiany przekierowywanie do strumienia dostarczonego do zapisywania danych wyjściowych XML `EndFragment` jest wywoływana. Jeśli `generateSelfContainedTextFragment` jest `true`, a następnie XML przekierowane dane wyjściowe jest zawsze tekstu XML i jest niezależna pod względem jego kontekstem przestrzeni nazw. `StartFragment`Nie można zagnieździć wywołań ()."
  syntax:
    content: public void StartFragment (System.IO.Stream stream, bool generateSelfContainedTextFragment);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Strumień do zapisu."
    - id: generateSelfContainedTextFragment
      type: System.Boolean
      description: "Jeśli <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, wszystkie przestrzenie nazw zadeklarowana poza fragment jest zadeklarowany ponownie, jeśli używany wewnątrz; Jeśli <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> przestrzenie nazw nie został zadeklarowany ponownie."
  overload: System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(System.Byte[],System.Int32,System.Int32)
  id: WriteFragment(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.IFragmentCapableXmlDictionaryWriter
  langs:
  - csharp
  name: WriteFragment(Byte[],Int32,Int32)
  nameWithType: IFragmentCapableXmlDictionaryWriter.WriteFragment(Byte[],Int32,Int32)
  fullName: System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Xml
  summary: "Zapisuje fragmentu XML do źródłowego strumienia modułu zapisującego."
  remarks: "Zapisuje fragmentu przechwycone między `StartFragment` i `EndFragment` i wywołania do obiektu XmlDictionaryWriter głównego strumienia. Fragment zapisywane `count` bajtów, począwszy od indeksu `offset` z podane `buffer`. Zachowanie jest niezdefiniowana, jeśli podany fragmentu nie została przechwycona, przy użyciu tego wystąpienia składnika zapisywania."
  example:
  - "```  \nMemoryStream stream = new MemoryStream();  \nMemoryStream fragmentStream = new MemoryStream();  \nXmlDictionaryWriter writer = XmlDictionaryWriter.CreateTextWriter(stream);  \nIXmlFragmentCapableXmlDictionaryWriter fragmentWriter = writer as IXmlFragmentCapableXmlDictionaryWriter;  \nif (fragmentWriter == null || !fragmentWriter.CanFragment)  \n{  \nConsole.WriteLine(\"This writer doesn't support fragments\");  \nreturn;  \n}  \nwriter.WriteStartElement(\"Root\");  \nfragmentWriter.StartFragment(fragmentStream, false);  \nwriter.WriteStartElement(\"Body\");  \nwriter.WriteString(\"This is my body\");  \nwriter.WriteEndElement();  \nfragmentWriter.EndFragment();  \nwriter.WriteStartElement(\"CharsInTheBody\");  \nwriter.WriteValue(fragmentStream.Length);  \nwriter.WriteEndElement();  \nfragmentWriter.WriteFragment(fragmentStream.GetBuffer(), 0, (int)fragmentStream.Length);  \nwriter.WriteEndElement(); // Root  \n```"
  syntax:
    content: public void WriteFragment (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "Bufor do zapisu."
    - id: offset
      type: System.Int32
      description: "Położenie początkowe, w którym można zapisać `buffer`."
    - id: count
      type: System.Int32
      description: "Liczba bajtów do zapisania `buffer`."
  overload: System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment
  parent: System.Xml.IFragmentCapableXmlDictionaryWriter
  isExternal: false
  name: CanFragment
  nameWithType: IFragmentCapableXmlDictionaryWriter.CanFragment
  fullName: System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment
  parent: System.Xml.IFragmentCapableXmlDictionaryWriter
  isExternal: false
  name: EndFragment()
  nameWithType: IFragmentCapableXmlDictionaryWriter.EndFragment()
  fullName: System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment()
- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment(System.IO.Stream,System.Boolean)
  parent: System.Xml.IFragmentCapableXmlDictionaryWriter
  isExternal: false
  name: StartFragment(Stream,Boolean)
  nameWithType: IFragmentCapableXmlDictionaryWriter.StartFragment(Stream,Boolean)
  fullName: System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment(Stream,Boolean)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.IFragmentCapableXmlDictionaryWriter
  isExternal: false
  name: WriteFragment(Byte[],Int32,Int32)
  nameWithType: IFragmentCapableXmlDictionaryWriter.WriteFragment(Byte[],Int32,Int32)
  fullName: System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(Byte[],Int32,Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment*
  parent: System.Xml.IFragmentCapableXmlDictionaryWriter
  isExternal: false
  name: CanFragment
  nameWithType: IFragmentCapableXmlDictionaryWriter.CanFragment
- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment*
  parent: System.Xml.IFragmentCapableXmlDictionaryWriter
  isExternal: false
  name: EndFragment
  nameWithType: IFragmentCapableXmlDictionaryWriter.EndFragment
- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment*
  parent: System.Xml.IFragmentCapableXmlDictionaryWriter
  isExternal: false
  name: StartFragment
  nameWithType: IFragmentCapableXmlDictionaryWriter.StartFragment
- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment*
  parent: System.Xml.IFragmentCapableXmlDictionaryWriter
  isExternal: false
  name: WriteFragment
  nameWithType: IFragmentCapableXmlDictionaryWriter.WriteFragment
