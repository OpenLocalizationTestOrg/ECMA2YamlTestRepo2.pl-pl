### YamlMime:ManagedReference
items:
- uid: System.Net.ServicePointManager
  id: ServicePointManager
  children:
  - System.Net.ServicePointManager.CertificatePolicy
  - System.Net.ServicePointManager.CheckCertificateRevocationList
  - System.Net.ServicePointManager.DefaultConnectionLimit
  - System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  - System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  - System.Net.ServicePointManager.DnsRefreshTimeout
  - System.Net.ServicePointManager.EnableDnsRoundRobin
  - System.Net.ServicePointManager.EncryptionPolicy
  - System.Net.ServicePointManager.Expect100Continue
  - System.Net.ServicePointManager.FindServicePoint(System.Uri)
  - System.Net.ServicePointManager.FindServicePoint(System.String,System.Net.IWebProxy)
  - System.Net.ServicePointManager.FindServicePoint(System.Uri,System.Net.IWebProxy)
  - System.Net.ServicePointManager.MaxServicePointIdleTime
  - System.Net.ServicePointManager.MaxServicePoints
  - System.Net.ServicePointManager.ReusePort
  - System.Net.ServicePointManager.SecurityProtocol
  - System.Net.ServicePointManager.ServerCertificateValidationCallback
  - System.Net.ServicePointManager.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  - System.Net.ServicePointManager.UseNagleAlgorithm
  langs:
  - csharp
  name: ServicePointManager
  nameWithType: ServicePointManager
  fullName: System.Net.ServicePointManager
  type: Class
  summary: "Zarządza Kolekcja <xref href=&quot;System.Net.ServicePoint&quot;> </xref> obiektów."
  remarks: "Element ServicePointManager jest Klasa statyczna używany do tworzenia, obsługi i usunąć wystąpienia <xref:System.Net.ServicePoint>klasy.</xref:System.Net.ServicePoint>       Gdy aplikacja żąda połączenia do zasobu internetowego identyfikator URI (Uniform Resource) za pośrednictwem obiektu Element ServicePointManager, zwraca element ServicePointManager <xref:System.Net.ServicePoint>obiekt, który zawiera informacje o połączeniu dla hosta i identyfikowanej przez URI schematu.</xref:System.Net.ServicePoint> Jeśli istnieje <xref:System.Net.ServicePoint>obiekt do hosta i schematu obiektu Element ServicePointManager zwracanych istniejące <xref:System.Net.ServicePoint>obiektu; w przeciwnym razie tworzy nowy obiekt ServicePointManager — <xref:System.Net.ServicePoint>obiektu.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint>       .NET Framework 4.6 obejmuje nowa funkcja zabezpieczeń, która blokuje niezabezpieczonych szyfrowania i tworzenia skrótów algorytmów dla połączenia. Aplikacji przy użyciu protokołu TLS/SSL za pośrednictwem interfejsów API, takich jak HttpClient, HttpWebRequest, FTPClient, SmtpClient, SslStream, itp. oraz przeznaczonych dla platformy .NET Framework 4.6 uzyskać bardziej bezpiecznych zachowanie domyślne.       Deweloperzy mogą chcesz zrezygnować z tego zachowania, aby zapewnić współdziałanie z ich istniejących SSL3 usług protokołu TLS lub z usługi szyfrowania RC4. [W tym artykule](https://support.microsoft.com/kb/3069494) wyjaśniono, jak zmodyfikować kod, tak aby nowe zachowanie jest wyłączona."
  example:
  - "The following code example creates a <xref:System.Net.ServicePoint> object for connections to the URI www.contoso.com.  \n  \n [!code-cs[Classic ServicePoint Example#1](~/add/codesnippet/csharp/t-system.net.servicepoin_1.cs)]\n [!code-cpp[Classic ServicePoint Example#1](~/add/codesnippet/cpp/t-system.net.servicepoin_1.cpp)]\n [!code-vb[Classic ServicePoint Example#1](~/add/codesnippet/visualbasic/t-system.net.servicepoin_1.vb)]"
  syntax:
    content: public class ServicePointManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.CertificatePolicy
  id: CertificatePolicy
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: CertificatePolicy
  nameWithType: ServicePointManager.CertificatePolicy
  fullName: System.Net.ServicePointManager.CertificatePolicy
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Pobiera lub ustawia zasady dotyczące certyfikatów serwera."
  remarks: "Jeśli ustawiono właściwość CertificatePolicy <xref:System.Net.ICertificatePolicy>obiektu interfejsu <xref:System.Net.ServicePointManager>obiekt używa zdefiniowane w tym wystąpieniu zamiast domyślnych zasad certyfikatów Zasady certyfikatu.</xref:System.Net.ServicePointManager> </xref:System.Net.ICertificatePolicy>       Domyślne zasady certyfikatów umożliwia prawidłowe certyfikaty i prawidłowe certyfikaty, które wygasły."
  example:
  - "The following code example shows how to catch a certificate policy exception for a custom certificate policy. It assumes that the certificate policy object has been defined, that the Uniform Resource Identifier (URI) for the Web resource is contained in the variable `myUri`, and that there is a method named `ProcessResponse` that performs the work of the application.  \n  \n [!code-cpp[Classic ServicePointManager.CertificatePolicy Example#1](~/add/codesnippet/cpp/p-system.net.servicepoin_14_1.cpp)]\n [!code-cs[Classic ServicePointManager.CertificatePolicy Example#1](~/add/codesnippet/csharp/p-system.net.servicepoin_14_1.cs)]\n [!code-vb[Classic ServicePointManager.CertificatePolicy Example#1](~/add/codesnippet/visualbasic/p-system.net.servicepoin_14_1.vb)]"
  syntax:
    content: public static System.Net.ICertificatePolicy CertificatePolicy { get; set; }
    return:
      type: System.Net.ICertificatePolicy
      description: "Obiekt, który implementuje <xref href=&quot;System.Net.ICertificatePolicy&quot;> </xref> interfejsu."
  overload: System.Net.ServicePointManager.CertificatePolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.CheckCertificateRevocationList
  id: CheckCertificateRevocationList
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: CheckCertificateRevocationList
  nameWithType: ServicePointManager.CheckCertificateRevocationList
  fullName: System.Net.ServicePointManager.CheckCertificateRevocationList
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Pobiera lub ustawia <xref:System.Boolean>wartość, która wskazuje, czy certyfikat jest sprawdzany względem listy odwołania certyfikatów urzędu.</xref:System.Boolean>"
  remarks: "Gdy jest CheckCertificateRevocationList `true`, certyfikat jest sprawdzany względem listy odwołania certyfikatów urzędu jako część procesu weryfikacji certyfikatu. Jego wartość domyślna to `false`."
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_13_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_13_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_13_1.cs)]"
  syntax:
    content: public static bool CheckCertificateRevocationList { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli lista odwołania certyfikatów jest sprawdzana; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.ServicePointManager.CheckCertificateRevocationList*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.DefaultConnectionLimit
  id: DefaultConnectionLimit
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DefaultConnectionLimit
  nameWithType: ServicePointManager.DefaultConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultConnectionLimit
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Pobiera lub ustawia maksymalną liczbę równoczesnych połączeń dozwolona przez <xref href=&quot;System.Net.ServicePoint&quot;> </xref> obiektu."
  remarks: "Właściwość DefaultConnectionLimit ustawia domyślną maksymalną liczbę równoczesnych połączeń <xref:System.Net.ServicePointManager>obiektu przypisuje <xref:System.Net.ServicePoint.ConnectionLimit%2A>właściwości podczas tworzenia <xref:System.Net.ServicePoint>obiektów.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint.ConnectionLimit%2A> </xref:System.Net.ServicePointManager>       Zmiana właściwości DefaultConnectionLimit nie ma wpływu na istniejące <xref:System.Net.ServicePoint>obiekty; wpływa tylko na <xref:System.Net.ServicePoint>obiektów, które są inicjowane po zmianie.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint> Jeśli wartość tej właściwości nie została ustawiona, bezpośrednio lub za pomocą konfiguracji, domyślnie przyjmowana jest wartość stała <xref:System.Net.ServicePointManager.DefaultPersistentConnectionLimit>.</xref:System.Net.ServicePointManager.DefaultPersistentConnectionLimit>      > [!NOTE] > Wszystkich zmian właściwości DefaultConnectionLimit dotyczy połączeń zarówno HTTP 1.0 i HTTP 1.1. Nie jest możliwa oddzielnie limit połączeń dla protokołów HTTP 1.0 i HTTP 1.1. Gdy jest używana w środowisku serwera (ASP.NET) DefaultConnectionLimit, wartością domyślną będzie większa liczba połączeń, które wynosi 10."
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_8_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_8_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_8_1.cs)]"
  syntax:
    content: public static int DefaultConnectionLimit { get; set; }
    return:
      type: System.Int32
      description: "Maksymalna liczba równoczesnych połączeń dozwolona przez <xref href=&quot;System.Net.ServicePoint&quot;> </xref> obiektu. Wartość domyślna to 2. Gdy aplikacja jest uruchomiona jako hosta platformy ASP.NET, nie jest możliwe do zmiany wartości tej właściwości przy użyciu pliku konfiguracji, jeśli ustawiono właściwość autokonfiguracji sieci <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>. Jednak można zmienić wartość programowo, jeśli właściwość autokonfiguracji sieci ma <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>. Wartość z preferowanych raz, podczas ładowania elementu AppDomain."
  overload: System.Net.ServicePointManager.DefaultConnectionLimit*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "DefaultConnectionLimit jest mniejsza lub równa 0."
  platform:
  - net462
- uid: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  id: DefaultNonPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DefaultNonPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultNonPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  type: Field
  assemblies:
  - System
  namespace: System.Net
  summary: "Domyślna liczba dozwolonych na trwałe połączeń (4) <xref href=&quot;System.Net.ServicePoint&quot;> </xref> obiekt połączony HTTP/1.0 lub nowszego serwera. To pole jest stałą, ale nie jest już używany w .NET Framework 2.0."
  syntax:
    content: public const int DefaultNonPersistentConnectionLimit = 4;
    return:
      type: System.Int32
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  id: DefaultPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DefaultPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  type: Field
  assemblies:
  - System
  namespace: System.Net
  summary: "Domyślna liczba połączeń trwałych (2) dozwolone na <xref href=&quot;System.Net.ServicePoint&quot;> </xref> obiekt połączony z protokołu HTTP/1.1 lub nowszego serwera. To pole jest stałe i służy do inicjowania <> </> *> właściwości Jeśli wartość <> </> *> nie ustawiono właściwości bezpośrednio lub za pośrednictwem konfiguracji."
  remarks: ''
  example:
  - "The following code example sets the <xref:System.Net.ServicePointManager.DefaultConnectionLimit%2A> property using this field.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/f-system.net.servicepoin_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/f-system.net.servicepoin_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/f-system.net.servicepoin_1.cs)]"
  syntax:
    content: public const int DefaultPersistentConnectionLimit = 2;
    return:
      type: System.Int32
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.DnsRefreshTimeout
  id: DnsRefreshTimeout
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DnsRefreshTimeout
  nameWithType: ServicePointManager.DnsRefreshTimeout
  fullName: System.Net.ServicePointManager.DnsRefreshTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Pobiera lub ustawia wartość wskazującą, jak długo domeny Name Service (DNS) rozwiązania jest uważany za ważny."
  remarks: ''
  example:
  - "The following code example sets this property.  \n  \n [!code-vb[System.Net.ServicePointWhidbey#1](~/add/codesnippet/visualbasic/p-system.net.servicepoin_21_1.vb)]\n [!code-cpp[System.Net.ServicePointWhidbey#1](~/add/codesnippet/cpp/p-system.net.servicepoin_21_1.cpp)]\n [!code-cs[System.Net.ServicePointWhidbey#1](~/add/codesnippet/csharp/p-system.net.servicepoin_21_1.cs)]"
  syntax:
    content: public static int DnsRefreshTimeout { get; set; }
    return:
      type: System.Int32
      description: "Wartość limitu czasu w milisekundach. Wartość -1 wskazuje nieskończony limit czasu. Wartość domyślna to 120 000 milisekund (dwie minuty)."
  overload: System.Net.ServicePointManager.DnsRefreshTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.EnableDnsRoundRobin
  id: EnableDnsRoundRobin
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: EnableDnsRoundRobin
  nameWithType: ServicePointManager.EnableDnsRoundRobin
  fullName: System.Net.ServicePointManager.EnableDnsRoundRobin
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Pobiera lub ustawia wartość wskazującą, czy rozdzielczość usługi nazw domen (DNS, Domain Name System) obraca się między odpowiednie adresy Internet Protocol (IP)."
  remarks: "Gdy więcej niż jeden adres IP jest skojarzony z nazwą hosta, rozpoznawanie nazw DNS zwykle zwraca tylko pierwszy adres IP. Jeśli ta właściwość jest ustawiona na `true`, następnie kolejne rozwiązania DNS może mieć wszystkich dostępnych adresów IP dla określonego hosta. Ta opcja jest przydatna, gdy używane przez usługę DNS jako mechanizm między serwerów lub klastrów serwerów z równoważeniem obciążenia."
  example:
  - "The following code example sets this property.  \n  \n [!code-vb[System.Net.ServicePointWhidbey#1](~/add/codesnippet/visualbasic/p-system.net.servicepoin_17_1.vb)]\n [!code-cpp[System.Net.ServicePointWhidbey#1](~/add/codesnippet/cpp/p-system.net.servicepoin_17_1.cpp)]\n [!code-cs[System.Net.ServicePointWhidbey#1](~/add/codesnippet/csharp/p-system.net.servicepoin_17_1.cs)]"
  syntax:
    content: public static bool EnableDnsRoundRobin { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>Jeśli rozpoznawania DNS zawsze zwraca pierwszy adres IP dla określonego hosta; w przeciwnym razie <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>. Wartość domyślna to <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.ServicePointManager.EnableDnsRoundRobin*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.EncryptionPolicy
  id: EncryptionPolicy
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: EncryptionPolicy
  nameWithType: ServicePointManager.EncryptionPolicy
  fullName: System.Net.ServicePointManager.EncryptionPolicy
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Pobiera <xref href=&quot;System.Net.Security.EncryptionPolicy&quot;> </xref> tego <xref href=&quot;System.Net.ServicePointManager&quot;> </xref> wystąpienia."
  remarks: "Jeśli wartość nie jest określona w pliku konfiguracji, właściwość EncryptionPolicy domyślnie <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>.</xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> To jest stosowany do sesji SSL/TLS na tym <xref:System.Net.ServicePointManager>wystąpienia.</xref:System.Net.ServicePointManager>       Korzystanie z szyfrowania Null jest wymagane, gdy zasady szyfrowania jest ustawione na <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>.</xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>"
  syntax:
    content: public static System.Net.Security.EncryptionPolicy EncryptionPolicy { get; }
    return:
      type: System.Net.Security.EncryptionPolicy
      description: "Zasady szyfrowania, które mają być używane dla tego <xref href=&quot;System.Net.ServicePointManager&quot;> </xref> wystąpienia."
  overload: System.Net.ServicePointManager.EncryptionPolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.Expect100Continue
  id: Expect100Continue
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: Expect100Continue
  nameWithType: ServicePointManager.Expect100Continue
  fullName: System.Net.ServicePointManager.Expect100Continue
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Pobiera lub ustawia <xref:System.Boolean>wartość, która określa, czy 100-kontynuować zachowanie jest używany.</xref:System.Boolean>"
  remarks: "Jeśli ta właściwość jest równa `true`, 100-kontynuować zachowanie jest używany. Klient żąda używające `PUT` i `POST` metody spowoduje dodanie nagłówka oczekiwania na żądanie, jeśli właściwość Expect100Continue jest `true` i <xref:System.Net.HttpWebRequest.ContentLength%2A>Właściwości jest większa od zera lub <xref:System.Net.HttpWebRequest.SendChunked%2A>właściwość ma wartość true.</xref:System.Net.HttpWebRequest.SendChunked%2A> </xref:System.Net.HttpWebRequest.ContentLength%2A> Klient będzie oczekiwać 100-kontynuować odpowiedzi od serwera, aby wskazać, że klient ma wysłać zostać przesłane dane. Mechanizm ten umożliwia klientom unikać wysyłania dużych ilości danych za pośrednictwem sieci, gdy serwer od nagłówków żądań zamierza odrzucić żądanie.       Załóżmy na przykład, właściwość Expect100Continue jest `false`. Po wysłaniu żądania do serwera zawiera dane. Jeśli po odczytaniu nagłówków żądań, serwer wymaga uwierzytelnienia, a wysłanie odpowiedzi 401, klient musi ponownie dane z nagłówkami właściwe uwierzytelnienie.       Jeśli ta właściwość jest `true`, nagłówki żądania są wysyłane do serwera. Jeśli serwer nie zaakceptował żądania, wysyła 100-kontynuować odpowiedzi sygnalizowania, że mogą być przesyłane dane. Jeśli tak jak w poprzednim przykładzie serwer wymaga uwierzytelnienia, wysyłania odpowiedzi 401 i klienta nie ma niepotrzebnie przekazywane dane.       Zmiana wartości tej właściwości nie wpływa na istniejące <xref:System.Net.ServicePoint>obiektów.</xref:System.Net.ServicePoint> Tylko nowych <xref:System.Net.ServicePoint>dotyczą obiektów utworzonych po zmianie.</xref:System.Net.ServicePoint>       100-kontynuować zachowanie nie jest używana do żądania HTTP 1.0, nawet jeśli ta właściwość jest ustawiona na `true`.       Expect 100-kontynuować zachowanie szczegółowo opisano w sekcji IETF RFC 2616 10.1.1."
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_12_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_12_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_12_1.cs)]"
  syntax:
    content: public static bool Expect100Continue { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby włączyć 100-kontynuować działanie. Wartość domyślna to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.ServicePointManager.Expect100Continue*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri)
  id: FindServicePoint(System.Uri)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: FindServicePoint(Uri)
  nameWithType: ServicePointManager.FindServicePoint(Uri)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Umożliwia znalezienie istniejące <xref href=&quot;System.Net.ServicePoint&quot;> </xref> obiektu lub tworzy nowy <xref href=&quot;System.Net.ServicePoint&quot;> </xref> obiekt do zarządzania komunikacją z określonym <xref:System.Uri>obiektu.</xref:System.Uri>"
  remarks: "Zwraca metodę FindServicePoint <xref:System.Net.ServicePoint>obiekt skojarzony z określonej nazwy hosta w Internecie.</xref:System.Net.ServicePoint> Jeśli nie <xref:System.Net.ServicePoint>obiekt istnieje dla tego hosta <xref:System.Net.ServicePointManager>tworzy obiekt.</xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint>"
  syntax:
    content: public static System.Net.ServicePoint FindServicePoint (Uri address);
    parameters:
    - id: address
      type: System.Uri
      description: "<xref:System.Uri>Obiektu zasobu internetowego, można skontaktować się z.</xref:System.Uri>"
    return:
      type: System.Net.ServicePoint
      description: "<xref href=&quot;System.Net.ServicePoint&quot;> </xref> Obiekt, który zarządza komunikacji dla żądania."
  overload: System.Net.ServicePointManager.FindServicePoint*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>address</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Maksymalna liczba <xref href=&quot;System.Net.ServicePoint&quot;> </xref> obiektów zdefiniowanych w <xref:System.Net.ServicePointManager.MaxServicePoints*>został osiągnięty.</xref:System.Net.ServicePointManager.MaxServicePoints*>"
  platform:
  - net462
- uid: System.Net.ServicePointManager.FindServicePoint(System.String,System.Net.IWebProxy)
  id: FindServicePoint(System.String,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: FindServicePoint(String,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(String,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(String,IWebProxy)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Umożliwia znalezienie istniejące <xref href=&quot;System.Net.ServicePoint&quot;> </xref> obiektu lub tworzy nowy <xref href=&quot;System.Net.ServicePoint&quot;> </xref> obiekt do zarządzania komunikacją z określonego identyfikatora URI (Uniform Resource)."
  remarks: "<xref:System.Net.ServicePointManager.FindServicePoint%2A>Metoda zwraca <xref:System.Net.ServicePoint>obiekt skojarzony z określonej nazwy hosta w Internecie.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager.FindServicePoint%2A> Jeśli nie <xref:System.Net.ServicePoint>obiekt istnieje dla tego hosta <xref:System.Net.ServicePointManager>tworzy obiekt.</xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint>"
  example:
  - "The following code example demonstrates calling this method to access a <xref:System.Net.ServicePoint> object.  \n  \n [!code-cpp[System.Net.ServicePoint#7](~/add/codesnippet/cpp/2fec5056-1106-4a0b-b9b3-_1.cpp)]\n [!code-vb[System.Net.ServicePoint#7](~/add/codesnippet/visualbasic/2fec5056-1106-4a0b-b9b3-_1.vb)]\n [!code-cs[System.Net.ServicePoint#7](~/add/codesnippet/csharp/2fec5056-1106-4a0b-b9b3-_1.cs)]"
  syntax:
    content: public static System.Net.ServicePoint FindServicePoint (string uriString, System.Net.IWebProxy proxy);
    parameters:
    - id: uriString
      type: System.String
      description: "Identyfikator URI zasobu internetowego, kontakt."
    - id: proxy
      type: System.Net.IWebProxy
      description: "Dane serwera proxy dla tego żądania."
    return:
      type: System.Net.ServicePoint
      description: "<xref href=&quot;System.Net.ServicePoint&quot;> </xref> Obiekt, który zarządza komunikacji dla żądania."
  overload: System.Net.ServicePointManager.FindServicePoint*
  exceptions:
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "Identyfikator URI określony w <code> uriString </code> jest nieprawidłowy."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Maksymalna liczba <xref href=&quot;System.Net.ServicePoint&quot;> </xref> obiektów zdefiniowanych w <xref:System.Net.ServicePointManager.MaxServicePoints*>został osiągnięty.</xref:System.Net.ServicePointManager.MaxServicePoints*>"
  platform:
  - net462
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri,System.Net.IWebProxy)
  id: FindServicePoint(System.Uri,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: FindServicePoint(Uri,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(Uri,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri,IWebProxy)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Umożliwia znalezienie istniejące <xref href=&quot;System.Net.ServicePoint&quot;> </xref> obiektu lub tworzy nowy <xref href=&quot;System.Net.ServicePoint&quot;> </xref> obiekt do zarządzania komunikacją z określonym <xref:System.Uri>obiektu.</xref:System.Uri>"
  remarks: "<xref:System.Net.ServicePointManager.FindServicePoint%2A>Metoda zwraca <xref:System.Net.ServicePoint>obiekt skojarzony z określonej nazwy hosta w Internecie.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager.FindServicePoint%2A> Jeśli nie <xref:System.Net.ServicePoint>obiekt istnieje dla tego hosta <xref:System.Net.ServicePointManager>tworzy obiekt.</xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint>"
  syntax:
    content: public static System.Net.ServicePoint FindServicePoint (Uri address, System.Net.IWebProxy proxy);
    parameters:
    - id: address
      type: System.Uri
      description: "A <xref:System.Uri>obiekt, który zawiera adres zasobu internetowego, można skontaktować się z.</xref:System.Uri>"
    - id: proxy
      type: System.Net.IWebProxy
      description: "Dane serwera proxy dla tego żądania."
    return:
      type: System.Net.ServicePoint
      description: "<xref href=&quot;System.Net.ServicePoint&quot;> </xref> Obiekt, który zarządza komunikacji dla żądania."
  overload: System.Net.ServicePointManager.FindServicePoint*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>address</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Maksymalna liczba <xref href=&quot;System.Net.ServicePoint&quot;> </xref> obiektów zdefiniowanych w <xref:System.Net.ServicePointManager.MaxServicePoints*>został osiągnięty.</xref:System.Net.ServicePointManager.MaxServicePoints*>"
  platform:
  - net462
- uid: System.Net.ServicePointManager.MaxServicePointIdleTime
  id: MaxServicePointIdleTime
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: MaxServicePointIdleTime
  nameWithType: ServicePointManager.MaxServicePointIdleTime
  fullName: System.Net.ServicePointManager.MaxServicePointIdleTime
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Pobiera lub ustawia maksymalny czas bezczynności <xref href=&quot;System.Net.ServicePoint&quot;> </xref> obiektu."
  remarks: "Właściwość MaxServicePointIdleTime Ustawia maksymalny czas bezczynności <xref:System.Net.ServicePointManager>obiektu przypisuje <xref:System.Net.ServicePoint.MaxIdleTime%2A>właściwości podczas tworzenia <xref:System.Net.ServicePoint>obiektów.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint.MaxIdleTime%2A> </xref:System.Net.ServicePointManager> Zmiana wartości tej wpływa na tylko <xref:System.Net.ServicePoint>obiektów, które są inicjowane po zmianie wartości.</xref:System.Net.ServicePoint>       Po <xref:System.Net.ServicePoint>obiekt był bezczynny przez czas określony w <xref:System.Net.ServicePoint.MaxIdleTime%2A>, jest uprawniona do wyrzucanie elementów bezużytecznych.</xref:System.Net.ServicePoint.MaxIdleTime%2A> </xref:System.Net.ServicePoint> A <xref:System.Net.ServicePoint>obiekt jest w stanie bezczynności listy połączeń powiązanych z <xref:System.Net.ServicePoint>obiekt jest pusty.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint>"
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#8](~/add/codesnippet/cpp/p-system.net.servicepoin_5_1.cpp)]\n [!code-vb[System.Net.ServicePoint#8](~/add/codesnippet/visualbasic/p-system.net.servicepoin_5_1.vb)]\n [!code-cs[System.Net.ServicePoint#8](~/add/codesnippet/csharp/p-system.net.servicepoin_5_1.cs)]"
  syntax:
    content: public static int MaxServicePointIdleTime { get; set; }
    return:
      type: System.Int32
      description: "Maksymalny czas bezczynności (w milisekundach), z <xref href=&quot;System.Net.ServicePoint&quot;> </xref> obiektu. Wartość domyślna to 100 000 milisekund (100 sekund)."
  overload: System.Net.ServicePointManager.MaxServicePointIdleTime*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "MaxServicePointIdleTime jest mniejsza niż &lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt; lub większa niż &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Net.ServicePointManager.MaxServicePoints
  id: MaxServicePoints
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: MaxServicePoints
  nameWithType: ServicePointManager.MaxServicePoints
  fullName: System.Net.ServicePointManager.MaxServicePoints
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Pobiera lub ustawia maksymalną liczbę <xref href=&quot;System.Net.ServicePoint&quot;> </xref> obiektów, aby zachować w dowolnym momencie."
  remarks: "Gdy zmniejszyć właściwości MaxServicePoints poniżej numer <xref:System.Net.ServicePoint>obiektów istniejących, w obecnie <xref:System.Net.ServicePointManager>usuwa <xref:System.Net.ServicePoint>obiektów w czasie bezczynności najdłuższy.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint> Jeśli liczba <xref:System.Net.ServicePoint>obiekty o aktywnych połączeń jest większa niż wartość MaxServicePoints, <xref:System.Net.ServicePointManager>obiekt usuwa <xref:System.Net.ServicePoint>obiekty staną się one bezczynności.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint>"
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#8](~/add/codesnippet/cpp/p-system.net.servicepoin_10_1.cpp)]\n [!code-vb[System.Net.ServicePoint#8](~/add/codesnippet/visualbasic/p-system.net.servicepoin_10_1.vb)]\n [!code-cs[System.Net.ServicePoint#8](~/add/codesnippet/csharp/p-system.net.servicepoin_10_1.cs)]"
  syntax:
    content: public static int MaxServicePoints { get; set; }
    return:
      type: System.Int32
      description: "Maksymalna liczba <xref href=&quot;System.Net.ServicePoint&quot;> </xref> obiekty do zachowania. Wartość domyślna to 0, co oznacza, że nie ma żadnego limitu liczby <xref href=&quot;System.Net.ServicePoint&quot;> </xref> obiektów."
  overload: System.Net.ServicePointManager.MaxServicePoints*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "MaxServicePoints jest mniejsza niż 0 lub większą niż &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Net.ServicePointManager.ReusePort
  id: ReusePort
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: ReusePort
  nameWithType: ServicePointManager.ReusePort
  fullName: System.Net.ServicePointManager.ReusePort
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Ustawienie wartości właściwości <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> powoduje, że wszystkie połączenia TCP wychodzące z HttpWebRequest, aby użyć opcji gniazda natywnego SO_REUSE_UNICASTPORT w gnieździe. Powoduje to podstawowy portów wychodzących do udostępnienia. Jest to przydatne w scenariuszach, w których są wykonane dużej liczby połączeń wychodzących w krótkim czasie i ryzyka aplikacji kończy się wolne porty."
  remarks: "Wartość domyślna to `false`."
  syntax:
    content: public static bool ReusePort { get; set; }
    return:
      type: System.Boolean
      description: "Zwraca <xref:System.Boolean>.</xref:System.Boolean>"
  overload: System.Net.ServicePointManager.ReusePort*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.SecurityProtocol
  id: SecurityProtocol
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: SecurityProtocol
  nameWithType: ServicePointManager.SecurityProtocol
  fullName: System.Net.ServicePointManager.SecurityProtocol
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Pobiera lub ustawia protokół zabezpieczeń używane przez <xref href=&quot;System.Net.ServicePoint&quot;> </xref> obiekty zarządzane przez <xref href=&quot;System.Net.ServicePointManager&quot;> </xref> obiektu."
  remarks: "Ta właściwość wybiera wersji protokołu Secure Sockets Layer (SSL) lub zabezpieczeń TLS (Transport Layer) do użycia na potrzeby nowych połączeń, które należy używać schematu Secure Hypertext Transfer Protocol (HTTPS) istniejące połączenia nie są zmieniane.       Należy pamiętać, że ma wartości domyślnej jest wyświetlany dla tej właściwości w celu. Zmienia stale pozioma zabezpieczeń i domyślnie protokołów i poziomów ochrony są zmieniane w czasie, aby uniknąć znane słabe strony algorytmu. Wartości domyślne będą się różnić w zależności od konfiguracji poszczególnych maszyn i na jakie oprogramowanie jest zainstalowane, na którym zostały zastosowane poprawki.       Kod powinien nigdy niejawnie zależy od przy użyciu poziomu ochrony określonej, ani przy założeniu, że poziom zabezpieczeń jest używany domyślnie. Jeśli aplikacja zależy od stosowania poziom zabezpieczeń, należy jawnie określić tego poziomu, a następnie sprawdź upewnij się, że faktycznie jest używany w ustanowionym połączeniu. Co więcej należy tak zaprojektować za niezawodny zmiany, do których protokoły są obsługiwane w wypadku swój kod, tak często zmian z wyprzedzeniem mały, aby ograniczyć zagrożenia pojawiające się.       .NET Framework 4.6 obejmuje nowa funkcja zabezpieczeń, która blokuje niezabezpieczonych szyfrowania i tworzenia skrótów algorytmów dla połączenia. Aplikacji przy użyciu protokołu TLS/SSL za pośrednictwem interfejsów API, takich jak HttpClient, HttpWebRequest, FTPClient, SmtpClient, SslStream, itp. oraz przeznaczonych dla platformy .NET Framework 4.6 uzyskać bardziej bezpiecznych zachowanie domyślne.       Deweloperzy mogą chcesz zrezygnować z tego zachowania, aby zapewnić współdziałanie z ich istniejących SSL3 usług protokołu TLS lub z usługi szyfrowania RC4. [W tym artykule](https://support.microsoft.com/kb/3069494) wyjaśniono, jak zmodyfikować kod, tak aby nowe zachowanie jest wyłączona."
  syntax:
    content: public static System.Net.SecurityProtocolType SecurityProtocol { get; set; }
    return:
      type: System.Net.SecurityProtocolType
      description: "Jedna z wartości zdefiniowanych w <xref href=&quot;System.Net.SecurityProtocolType&quot;> </xref> wyliczenia."
  overload: System.Net.ServicePointManager.SecurityProtocol*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Podana wartość do ustawienia właściwości nie jest prawidłową <xref href=&quot;System.Net.SecurityProtocolType&quot;> </xref> wartości wyliczenia."
  platform:
  - net462
- uid: System.Net.ServicePointManager.ServerCertificateValidationCallback
  id: ServerCertificateValidationCallback
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: ServerCertificateValidationCallback
  nameWithType: ServicePointManager.ServerCertificateValidationCallback
  fullName: System.Net.ServicePointManager.ServerCertificateValidationCallback
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Pobiera lub ustawia wywołanie zwrotne do weryfikacji certyfikatu serwera."
  remarks: "Aplikację można ustawić właściwości ServerCertificateValidationCallback metodę weryfikacji niestandardowej przez klienta certyfikatu serwera. Podczas wykonywania niestandardowego sprawdzania poprawności, `sender` parametr przekazany do <xref:System.Net.Security.RemoteCertificateValidationCallback>może być nazwą hosta ciąg lub obiekt pochodną <xref:System.Net.WebRequest>(<xref:System.Net.HttpWebRequest>, na przykład) w zależności od <xref:System.Net.ServicePointManager.CertificatePolicy%2A>Właściwości.</xref:System.Net.ServicePointManager.CertificatePolicy%2A> </xref:System.Net.HttpWebRequest> </xref:System.Net.WebRequest> </xref:System.Net.Security.RemoteCertificateValidationCallback>       Podczas walidacji niestandardowej nie jest używany, nazwa certyfikatu jest porównywany z nazwą hosta używany do utworzenia żądania. Na przykład jeśli <xref:System.Net.WebRequest.Create%28System.String%29>został przekazany parametr &quot;https://www.contoso.com/default.hmtl&quot; domyślne zachowanie jest dla klienta w celu sprawdzenia certyfikatu www.contoso.com.</xref:System.Net.WebRequest.Create%28System.String%29>"
  syntax:
    content: public static System.Net.Security.RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; set; }
    return:
      type: System.Net.Security.RemoteCertificateValidationCallback
      description: "A <xref href=&quot;System.Net.Security.RemoteCertificateValidationCallback&quot;></xref>. Wartość domyślna to <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.ServicePointManager.ServerCertificateValidationCallback*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  id: SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: SetTcpKeepAlive(Boolean,Int32,Int32)
  nameWithType: ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
  fullName: System.Net.ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Włącza lub wyłącza opcję podtrzymania połączenia TCP."
  remarks: "Aplikacja może zażądać dostawcy TCP/IP korzystanie z pakietów podtrzymania połączenia TCP. Wartość domyślna to, że korzystanie z pakietów podtrzymania połączenia TCP jest wyłączone.       Domyślne ustawienia gniazda TCP jest zainicjowany limitu czasu zestawy keep-alive 2 godziny i keep-alive interwał na 1 sekundę. `keepAliveTime` Parametr określa limit czasu w milisekundach, bez żadnych działań, dopóki wysłaniu pierwszego pakietu keep-alive. `keepAliveInterval` Parametr określa interwał w milisekundach między podczas kolejnych keep-alive pakiety są wysyłane w przypadku nieodebrania bez potwierdzenia. Liczba keep-alive sond nie można zmienić i jest ustawiony na 10.       Jeśli połączenie TCP zostało przerwane w wyniku utrzymywania aktywności <xref:System.Net.Sockets.SocketError>z <xref:System.Net.Sockets.SocketError>jest zwracana do żadnych wywołań w toku w gnieździe, i kolejnych wywołań zakończy się niepowodzeniem z <xref:System.Net.Sockets.SocketError> <xref:System.Net.Sockets.SocketError>.</xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketError>"
  syntax:
    content: public static void SetTcpKeepAlive (bool enabled, int keepAliveTime, int keepAliveInterval);
    parameters:
    - id: enabled
      type: System.Boolean
      description: "Jeśli wartość true, a następnie keep-alive opcji TCP za pośrednictwem połączenia TCP zostanie włączona przy użyciu określonego `keepAliveTime` i `keepAliveInterval` wartości.       Jeśli ma wartość false, a następnie opcję keep-alive TCP jest wyłączone, a pozostałe parametry są ignorowane.       Wartość domyślna to false."
    - id: keepAliveTime
      type: System.Int32
      description: "Określa limit czasu w milisekundach, bez żadnych działań, dopóki wysłaniu pierwszego pakietu keep-alive.       Wartość musi być większa niż 0.  Jeśli została przekazana wartość mniejszą niż lub równa zero <xref:System.ArgumentOutOfRangeException>jest generowany.</xref:System.ArgumentOutOfRangeException>"
    - id: keepAliveInterval
      type: System.Int32
      description: "Określa interwał w milisekundach między kolejnymi keep-alive pakiety są wysyłane w przypadku nieodebrania bez potwierdzenia.       Wartość musi być większa niż 0.  Jeśli została przekazana wartość mniejszą niż lub równa zero <xref:System.ArgumentOutOfRangeException>jest generowany.</xref:System.ArgumentOutOfRangeException>"
  overload: System.Net.ServicePointManager.SetTcpKeepAlive*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Wartość określona dla <code> keepAliveTime </code> lub <code> keepAliveInterval </code> parametr jest mniejsza niż lub równa 0."
  platform:
  - net462
- uid: System.Net.ServicePointManager.UseNagleAlgorithm
  id: UseNagleAlgorithm
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: UseNagleAlgorithm
  nameWithType: ServicePointManager.UseNagleAlgorithm
  fullName: System.Net.ServicePointManager.UseNagleAlgorithm
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Określa, czy przez punkty usługi zarządzane przez ten jest używany algorytm Nagle&quot;a <xref href=&quot;System.Net.ServicePointManager&quot;> </xref> obiektu."
  remarks: "Aby zmniejszyć ruch sieciowy przez buforowanie małych pakietów danych i przesyła je jako pojedynczy pakiet jest używany algorytm Nagle&quot;a. Ten proces jest również nazywany &quot;nagling&quot;; jest powszechnie używane ponieważ redukuje liczbę pakietów wysłanych i zmniejsza narzut na pakiet.       Zmiana wartości tej właściwości nie wpływa na istniejące <xref:System.Net.ServicePoint>obiektów.</xref:System.Net.ServicePoint> Dotyczy tylko nowe usługi punkty utworzony po zmianie.       Algorytm Nagle&quot;a szczegółowo opisano w IETF RFC 896."
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_20_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_20_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_20_1.cs)]"
  syntax:
    content: public static bool UseNagleAlgorithm { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby używać algorytmu Nagle&quot;a; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Wartość domyślna to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.ServicePointManager.UseNagleAlgorithm*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.UriFormatException
  isExternal: true
  name: System.UriFormatException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Net.ServicePointManager.CertificatePolicy
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CertificatePolicy
  nameWithType: ServicePointManager.CertificatePolicy
  fullName: System.Net.ServicePointManager.CertificatePolicy
- uid: System.Net.ICertificatePolicy
  parent: System.Net
  isExternal: false
  name: ICertificatePolicy
  nameWithType: ICertificatePolicy
  fullName: System.Net.ICertificatePolicy
- uid: System.Net.ServicePointManager.CheckCertificateRevocationList
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CheckCertificateRevocationList
  nameWithType: ServicePointManager.CheckCertificateRevocationList
  fullName: System.Net.ServicePointManager.CheckCertificateRevocationList
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.ServicePointManager.DefaultConnectionLimit
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultConnectionLimit
  nameWithType: ServicePointManager.DefaultConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultConnectionLimit
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultNonPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultNonPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
- uid: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
- uid: System.Net.ServicePointManager.DnsRefreshTimeout
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DnsRefreshTimeout
  nameWithType: ServicePointManager.DnsRefreshTimeout
  fullName: System.Net.ServicePointManager.DnsRefreshTimeout
- uid: System.Net.ServicePointManager.EnableDnsRoundRobin
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EnableDnsRoundRobin
  nameWithType: ServicePointManager.EnableDnsRoundRobin
  fullName: System.Net.ServicePointManager.EnableDnsRoundRobin
- uid: System.Net.ServicePointManager.EncryptionPolicy
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EncryptionPolicy
  nameWithType: ServicePointManager.EncryptionPolicy
  fullName: System.Net.ServicePointManager.EncryptionPolicy
- uid: System.Net.Security.EncryptionPolicy
  parent: System.Net.Security
  isExternal: false
  name: EncryptionPolicy
  nameWithType: EncryptionPolicy
  fullName: System.Net.Security.EncryptionPolicy
- uid: System.Net.ServicePointManager.Expect100Continue
  parent: System.Net.ServicePointManager
  isExternal: false
  name: Expect100Continue
  nameWithType: ServicePointManager.Expect100Continue
  fullName: System.Net.ServicePointManager.Expect100Continue
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint(Uri)
  nameWithType: ServicePointManager.FindServicePoint(Uri)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri)
- uid: System.Net.ServicePoint
  parent: System.Net
  isExternal: false
  name: ServicePoint
  nameWithType: ServicePoint
  fullName: System.Net.ServicePoint
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Net.ServicePointManager.FindServicePoint(System.String,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint(String,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(String,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(String,IWebProxy)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.IWebProxy
  parent: System.Net
  isExternal: true
  name: IWebProxy
  nameWithType: IWebProxy
  fullName: System.Net.IWebProxy
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint(Uri,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(Uri,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri,IWebProxy)
- uid: System.Net.ServicePointManager.MaxServicePointIdleTime
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePointIdleTime
  nameWithType: ServicePointManager.MaxServicePointIdleTime
  fullName: System.Net.ServicePointManager.MaxServicePointIdleTime
- uid: System.Net.ServicePointManager.MaxServicePoints
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePoints
  nameWithType: ServicePointManager.MaxServicePoints
  fullName: System.Net.ServicePointManager.MaxServicePoints
- uid: System.Net.ServicePointManager.ReusePort
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ReusePort
  nameWithType: ServicePointManager.ReusePort
  fullName: System.Net.ServicePointManager.ReusePort
- uid: System.Net.ServicePointManager.SecurityProtocol
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SecurityProtocol
  nameWithType: ServicePointManager.SecurityProtocol
  fullName: System.Net.ServicePointManager.SecurityProtocol
- uid: System.Net.SecurityProtocolType
  parent: System.Net
  isExternal: false
  name: SecurityProtocolType
  nameWithType: SecurityProtocolType
  fullName: System.Net.SecurityProtocolType
- uid: System.Net.ServicePointManager.ServerCertificateValidationCallback
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ServerCertificateValidationCallback
  nameWithType: ServicePointManager.ServerCertificateValidationCallback
  fullName: System.Net.ServicePointManager.ServerCertificateValidationCallback
- uid: System.Net.Security.RemoteCertificateValidationCallback
  parent: System.Net.Security
  isExternal: false
  name: RemoteCertificateValidationCallback
  nameWithType: RemoteCertificateValidationCallback
  fullName: System.Net.Security.RemoteCertificateValidationCallback
- uid: System.Net.ServicePointManager.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SetTcpKeepAlive(Boolean,Int32,Int32)
  nameWithType: ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
  fullName: System.Net.ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
- uid: System.Net.ServicePointManager.UseNagleAlgorithm
  parent: System.Net.ServicePointManager
  isExternal: false
  name: UseNagleAlgorithm
  nameWithType: ServicePointManager.UseNagleAlgorithm
  fullName: System.Net.ServicePointManager.UseNagleAlgorithm
- uid: System.Net.ServicePointManager.CertificatePolicy*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CertificatePolicy
  nameWithType: ServicePointManager.CertificatePolicy
- uid: System.Net.ServicePointManager.CheckCertificateRevocationList*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CheckCertificateRevocationList
  nameWithType: ServicePointManager.CheckCertificateRevocationList
- uid: System.Net.ServicePointManager.DefaultConnectionLimit*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultConnectionLimit
  nameWithType: ServicePointManager.DefaultConnectionLimit
- uid: System.Net.ServicePointManager.DnsRefreshTimeout*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DnsRefreshTimeout
  nameWithType: ServicePointManager.DnsRefreshTimeout
- uid: System.Net.ServicePointManager.EnableDnsRoundRobin*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EnableDnsRoundRobin
  nameWithType: ServicePointManager.EnableDnsRoundRobin
- uid: System.Net.ServicePointManager.EncryptionPolicy*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EncryptionPolicy
  nameWithType: ServicePointManager.EncryptionPolicy
- uid: System.Net.ServicePointManager.Expect100Continue*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: Expect100Continue
  nameWithType: ServicePointManager.Expect100Continue
- uid: System.Net.ServicePointManager.FindServicePoint*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint
  nameWithType: ServicePointManager.FindServicePoint
- uid: System.Net.ServicePointManager.MaxServicePointIdleTime*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePointIdleTime
  nameWithType: ServicePointManager.MaxServicePointIdleTime
- uid: System.Net.ServicePointManager.MaxServicePoints*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePoints
  nameWithType: ServicePointManager.MaxServicePoints
- uid: System.Net.ServicePointManager.ReusePort*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ReusePort
  nameWithType: ServicePointManager.ReusePort
- uid: System.Net.ServicePointManager.SecurityProtocol*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SecurityProtocol
  nameWithType: ServicePointManager.SecurityProtocol
- uid: System.Net.ServicePointManager.ServerCertificateValidationCallback*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ServerCertificateValidationCallback
  nameWithType: ServicePointManager.ServerCertificateValidationCallback
- uid: System.Net.ServicePointManager.SetTcpKeepAlive*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SetTcpKeepAlive
  nameWithType: ServicePointManager.SetTcpKeepAlive
- uid: System.Net.ServicePointManager.UseNagleAlgorithm*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: UseNagleAlgorithm
  nameWithType: ServicePointManager.UseNagleAlgorithm
