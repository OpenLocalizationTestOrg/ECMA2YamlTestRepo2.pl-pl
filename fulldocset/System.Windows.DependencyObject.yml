### YamlMime:ManagedReference
items:
- uid: System.Windows.DependencyObject
  id: DependencyObject
  children:
  - System.Windows.DependencyObject.#ctor
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  langs:
  - csharp
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
  type: Class
  summary: "Reprezentuje obiekt, który uczestniczy w systemie właściwości zależności."
  remarks: "Umożliwia klasy DependencyObject [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] właściwości usług systemowych na jej wielu klas pochodnych.       Podstawową funkcją systemu właściwość jest do obliczenia wartości właściwości oraz zapewnienie systemu powiadomień o wartości, które zostały zmienione. Inna klasa klucza, który uczestniczy w systemie właściwości jest <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty> <xref:System.Windows.DependencyProperty>Umożliwia rejestrację właściwości zależności w systemie właściwości i zawiera identyfikator i informacje o każdej właściwości zależności DependencyObject jako klasa podstawowa umożliwia obiektów do użycia właściwości zależności.</xref:System.Windows.DependencyProperty>       Usługi DependencyObject i właściwości są następujące:-właściwości zależności hosting pomocy technicznej. Zarejestruj właściwości zależności w wywołaniu <xref:System.Windows.DependencyProperty.Register%2A>metody i przechowywanie wartości zwracanej metody jako publiczne pola statycznego w klasie użytkownika.</xref:System.Windows.DependencyProperty.Register%2A>      -Dołączona właściwość hosting pomocy technicznej. Dołączona właściwość możesz zarejestrować w wywołaniu <xref:System.Windows.DependencyProperty.RegisterAttached%2A>metody i przechowywanie wartości zwracanej przez metodę jako publiczne statyczne pole tylko do odczytu w Twojej klasy.</xref:System.Windows.DependencyProperty.RegisterAttached%2A> (Istnieją również wymagania dodatkowy element członkowski; należy pamiętać, że jest to [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] konkretnej implementacji w przypadku dołączonych właściwości. Aby uzyskać więcej informacji, zobacz [dołączony Przegląd właściwości](~/add/includes/ajax-current-ext-md.md).) Twoje dołączonej właściwości można następnie ustawić na dowolnej klasy, która pochodzi z obiektu DependencyObject.      -Get, ustaw i wyczyść metody narzędziowe do wartości wszystkich właściwości zależności, które istnieją na obiekt DependencyObject.      -Metadanych, wymuszone wartość pomocy technicznej, właściwość zmienić powiadomień i wywołania zwrotne zastąpienia dla właściwości zależności lub dołączone właściwości. Ponadto klasy DependencyObject ułatwia na właściciela metadane właściwości dla właściwości zależności.      -Wspólną klasę podstawową dla klas pochodnych <xref:System.Windows.ContentElement>, <xref:System.Windows.Freezable>, lub <xref:System.Windows.Media.Visual>.</xref:System.Windows.Media.Visual> </xref:System.Windows.Freezable> </xref:System.Windows.ContentElement> (<xref:System.Windows.UIElement>, inny base element klasa, ma hierarchii klasy, która obejmuje <xref:System.Windows.Media.Visual>.)</xref:System.Windows.Media.Visual> </xref:System.Windows.UIElement>"
  example:
  - "The following example derives from DependencyObject to create a new abstract class. The class then registers an attached property and includes support members for that attached property.  \n  \n [!code-cs[WPFAquariumSln#DOMain](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#domain)]\n [!code-vb[WPFAquariumSln#DOMain](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#domain)]"
  syntax:
    content: >-
      [System.ComponentModel.TypeDescriptionProvider(typeof(MS.Internal.ComponentModel.DependencyObjectProvider))]

      [System.Windows.Markup.NameScopeProperty("NameScope", typeof(System.Windows.NameScope))]

      public class DependencyObject : System.Windows.Threading.DispatcherObject
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  implements: []
  inheritedMembers:
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.DependencyObject.#ctor
  id: '#ctor'
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: DependencyObject()
  nameWithType: DependencyObject.DependencyObject()
  fullName: System.Windows.DependencyObject.DependencyObject()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Windows.DependencyObject&quot;> </xref> klasy."
  syntax:
    content: public DependencyObject ();
    parameters: []
  overload: System.Windows.DependencyObject.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  id: ClearValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: ClearValue(DependencyProperty)
  nameWithType: DependencyObject.ClearValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ClearValue(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Czyści lokalnego wartości właściwości. Właściwość do wyczyszczenia jest określona przez <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> identyfikator."
  remarks: "Wyczyszczenie wartości właściwości przez wywołanie metody ClearValue niekoniecznie daje właściwości zależności domyślną wartość, która została określona w metadanych właściwości zależności. Czyszczenie właściwości tylko wyraźnie czyści niezależnie od wartości lokalnej zostały zastosowane. Aby uzyskać więcej informacji, zobacz [pierwszeństwo wartość właściwości zależności](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example iterates all properties that have local values set on an object, then calls ClearValue to clear the values of each such property.  \n  \n [!code-cs[DPClearValue#IterateLocalValuesAndClear](~/add/codesnippet/csharp/DPClearValue/default.xaml.cs#iteratelocalvaluesandclear)]\n [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/add/codesnippet/visualbasic/DPClearValue/default.xaml.vb#iteratelocalvaluesandclear)]"
  syntax:
    content: public void ClearValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Właściwości zależności, aby wyczyścić, identyfikowane przez <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> obiektu odwołania."
  overload: System.Windows.DependencyObject.ClearValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Nastąpiła próba wywołania ClearValue w zapieczętowanym <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  platform:
  - net462
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  id: ClearValue(System.Windows.DependencyPropertyKey)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: ClearValue(DependencyPropertyKey)
  nameWithType: DependencyObject.ClearValue(DependencyPropertyKey)
  fullName: System.Windows.DependencyObject.ClearValue(DependencyPropertyKey)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Usuwa lokalną wartość właściwości tylko do odczytu. Właściwość do wyczyszczenia jest określona przez <xref href=&quot;System.Windows.DependencyPropertyKey&quot;> </xref>."
  remarks: "A <xref:System.Windows.DependencyPropertyKey>identyfikuje właściwość tylko do odczytu zależności dla właściwości systemu operacji.</xref:System.Windows.DependencyPropertyKey> Klasy, które definiują właściwości tylko do odczytu zależności nie powinny ujawniać tego klucza publicznego. Klucz publicznie ujawnionych zapewni ścieżki kodu publicznego, który zanegowane znak tylko do odczytu właściwości, jeśli metod, takich jak <xref:System.Windows.DependencyObject.ClearValue%2A>lub <xref:System.Windows.DependencyObject.SetValue%2A>może zostać wywołana poza klasę lub odwołanie do klucza zestawu.</xref:System.Windows.DependencyObject.SetValue%2A> </xref:System.Windows.DependencyObject.ClearValue%2A>       Wyczyszczenie wartości właściwości przez wywołanie metody ClearValue niekoniecznie daje właściwości zależności domyślną wartość, która została określona w metadanych właściwości zależności. Wyczyszczenie wartości tylko w szczególności czyści niezależnie od wartości lokalnej zostały zastosowane. Aby uzyskać więcej informacji, zobacz [pierwszeństwo wartość właściwości zależności](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void ClearValue (System.Windows.DependencyPropertyKey key);
    parameters:
    - id: key
      type: System.Windows.DependencyPropertyKey
      description: "Klucz dla właściwości zależności do wyczyszczenia."
  overload: System.Windows.DependencyObject.ClearValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Nastąpiła próba wywołania <xref:System.Windows.DependencyObject.ClearValue*>w zapieczętowanym <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>.</xref:System.Windows.DependencyObject.ClearValue*>"
  platform:
  - net462
- uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  id: CoerceValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: CoerceValue(DependencyProperty)
  nameWithType: DependencyObject.CoerceValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.CoerceValue(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Przekształca wynik dane wartości właściwości określonej zależności. Jest to osiągane przez wywoływanie żadnego <xref href=&quot;System.Windows.CoerceValueCallback&quot;> </xref> funkcji określonej w metadanych właściwości dla właściwości zależności, ponieważ znajduje się na wywołujący <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  remarks: "Oprócz jawnie wywoływany przez element CoerceValue, wywoływania <xref:System.Windows.CoerceValueCallback>Zależność właściwości jest również wywoływana wewnętrznie zawsze, gdy wartość właściwości zależności jest ponownie oceniane przez [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] właściwości systemu.</xref:System.Windows.CoerceValueCallback>       Po wywołaniu metody element CoerceValue są ostatecznie wywoływanie wywołania zwrotnego wartość coerce dla określonej właściwości. Zwykle będzie wywołać element CoerceValue tylko wtedy, gdy wiesz, czy istnieje wartość coerce wywołania zwrotnego i jeśli znasz kryteria metodę wywołania zwrotnego dla wymuszenia.       Najbardziej typowym scenariuszem wywoływania element CoerceValue mieści się obsługa klasy lub wywołań zwrotnych zmiany właściwości powiązanych właściwości, które wpływają na wartości w sposób zależnych. Aby uzyskać więcej informacji, zobacz [wywołania zwrotne właściwości zależności i sprawdzania poprawności](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example calls CoerceValue within a <xref:System.Windows.PropertyChangedCallback> implementation that is used as the <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> for a different dependency properties on the same class. This is a common pattern for introducing true value dependencies between dependency properties.  \n  \n [!code-cs[DPCallbackOverride#OnPCCurrent](~/add/codesnippet/csharp/DPCallbackOverride/SDKSampleLibrary/class1.cs#onpccurrent)]\n [!code-vb[DPCallbackOverride#OnPCCurrent](~/add/codesnippet/visualbasic/DPCallbackOverride.sdksamplelibrary/class1.vb#onpccurrent)]"
  syntax:
    content: public void CoerceValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Identyfikator właściwości zależności, aby wymusić."
  overload: System.Windows.DependencyObject.CoerceValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Określony <code> dp </code> lub jego wartość były nieprawidłowe lub nie istnieją."
  platform:
  - net462
- uid: System.Windows.DependencyObject.DependencyObjectType
  id: DependencyObjectType
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: DependencyObjectType
  nameWithType: DependencyObject.DependencyObjectType
  fullName: System.Windows.DependencyObject.DependencyObjectType
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Pobiera <xref href=&quot;System.Windows.DependencyObjectType&quot;> </xref> który opakowuje [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] typu tego wystąpienia."
  remarks: "Ta właściwość jest przydatna, jeśli obiekt jest zwracany z metody ma typ wartości zwracanej <xref:System.Windows.DependencyObject>i chcesz przeprowadzić właściwości określonych operacji w systemie go w zależności od jego typu.</xref:System.Windows.DependencyObject> Na przykład jest bardziej wydajne, aby wywołać <xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29>przy użyciu <xref:System.Windows.DependencyObjectType>zamiast [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] typu.</xref:System.Windows.DependencyObjectType> </xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29> <xref:System.Windows.DependencyObjectType>Umożliwia szybsze wyszukiwanie.</xref:System.Windows.DependencyObjectType>"
  example:
  - "In the following pseudocode example, `MySubClass` anticipates that additional derived classes might change the default value of the `MyCustom` dependency property. The class implements a default constructor that can determine the actual derived class by taking advantage of polymorphism on the <xref:System.Windows.DependencyObjectType> value whenever that constructor is used as a derived class instantiator.  \n  \n `public DOClass() : base()`  \n  \n `{`  \n  \n `__customPropertyCache = (CustomDP)`  \n  \n `CustomDPProperty.GetMetadata(DependencyObjectType).DefaultValue;`  \n  \n `}`"
  syntax:
    content: public System.Windows.DependencyObjectType DependencyObjectType { get; }
    return:
      type: System.Windows.DependencyObjectType
      description: "A <xref href=&quot;System.Windows.DependencyObjectType&quot;> </xref> który opakowuje [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] typu tego wystąpienia."
  overload: System.Windows.DependencyObject.DependencyObjectType*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: DependencyObject.Equals(Object)
  fullName: System.Windows.DependencyObject.Equals(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Określa, czy podany <xref href=&quot;System.Windows.DependencyObject&quot;> </xref> jest odpowiednikiem bieżącego <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  remarks: "Ta implementacja jest tylko równości odwołań, a nie próbuje ocenić równości wartości zawartych w niej właściwości."
  syntax:
    content: public override sealed bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "<xref href=&quot;System.Windows.DependencyObject&quot;> </xref> Do porównania z bieżącym wystąpieniem."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli dwa wystąpienia są takie same; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.DependencyObject.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.GetHashCode
  id: GetHashCode
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: DependencyObject.GetHashCode()
  fullName: System.Windows.DependencyObject.GetHashCode()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Pobiera wartość skrótu dla tego <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  syntax:
    content: public override sealed int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Całkowita 32-bitowa wartość skrótu."
  overload: System.Windows.DependencyObject.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.GetLocalValueEnumerator
  id: GetLocalValueEnumerator
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: GetLocalValueEnumerator()
  nameWithType: DependencyObject.GetLocalValueEnumerator()
  fullName: System.Windows.DependencyObject.GetLocalValueEnumerator()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Tworzy specjalne modułu wyliczającego określania właściwości zależności, które ustawiono lokalnie wartości na tym <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  remarks: "A *wartości lokalnej* jest dowolną wartością właściwości zależności, która została ustawiona przez <xref:System.Windows.DependencyObject.SetValue%2A>, w przeciwieństwie do innych aspektów dla właściwości.</xref:System.Windows.DependencyObject.SetValue%2A>       <xref:System.Windows.LocalValueEnumerator>Została utworzona przez wywołanie GetLocalValueEnumerator może służyć do wyliczenia właściwości, które mają lokalnie ustawiony wartość na <xref:System.Windows.DependencyObject>wystąpienia.</xref:System.Windows.DependencyObject> </xref:System.Windows.LocalValueEnumerator> Każdej z tych właściwości jest reprezentowany przez moduł wyliczający <xref:System.Windows.LocalValueEntry>obiektu, który ma właściwości, które odwołują się do konkretnych <xref:System.Windows.DependencyProperty>i jej wartości.</xref:System.Windows.DependencyProperty> </xref:System.Windows.LocalValueEntry> Ta technika wyliczania za pośrednictwem lokalnie ustawiony wartości może służyć do optymalizacji lub innych obsługi wartości lokalnej, takich jak do określenia wartości właściwości z <xref:System.Windows.DependencyObject>zmieniłby, jeśli zostały one wyczyszczone.</xref:System.Windows.DependencyObject>      > [!IMPORTANT] > Zwróconego <xref:System.Windows.LocalValueEnumerator>może zawierać <xref:System.Windows.LocalValueEntry>rekordów dla właściwości zależności, które są tylko do odczytu lub właściwości zależności, których wartości są obliczane przez system właściwości.</xref:System.Windows.LocalValueEntry> </xref:System.Windows.LocalValueEnumerator> Na przykład element visual framework, który ma ustaloną szerokość za pośrednictwem układu będzie zgłaszać wartości lokalnej dla <xref:System.Windows.FrameworkElement.ActualWidth%2A>.</xref:System.Windows.FrameworkElement.ActualWidth%2A> Aby zresetować je w przypadku uzyskiwania wartości lokalnej, sprawdź <xref:System.Windows.DependencyProperty.ReadOnly%2A>wartość na podstawie identyfikatora właściwości każdego <xref:System.Windows.LocalValueEntry>do sprawdzenia, czy <xref:System.Windows.DependencyProperty>zagrożona nie jest tylko do odczytu.</xref:System.Windows.DependencyProperty> </xref:System.Windows.LocalValueEntry> </xref:System.Windows.DependencyProperty.ReadOnly%2A>"
  example:
  - "The following example iterates all properties that have local values set on an object, then calls <xref:System.Windows.DependencyObject.ClearValue%2A> to clear the values of each such property.  \n  \n [!code-cs[DPClearValue#IterateLocalValuesAndClear](~/add/codesnippet/csharp/DPClearValue/default.xaml.cs#iteratelocalvaluesandclear)]\n [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/add/codesnippet/visualbasic/DPClearValue/default.xaml.vb#iteratelocalvaluesandclear)]"
  syntax:
    content: public System.Windows.LocalValueEnumerator GetLocalValueEnumerator ();
    parameters: []
    return:
      type: System.Windows.LocalValueEnumerator
      description: "Moduł wyliczający specjalne wartości lokalnej."
  overload: System.Windows.DependencyObject.GetLocalValueEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  id: GetValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: GetValue(DependencyProperty)
  nameWithType: DependencyObject.GetValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.GetValue(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Zwraca bieżącą wartość skuteczne właściwości zależności dla tego wystąpienia obiektu <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  remarks: "*Wartość efektywna* jest wartością zwracaną przez system właściwości do każdego obiektu wywołującego, który żąda wartość właściwości. Wartość efektywna jest wynikiem systemu właściwość o ocenie wszystkich możliwych danych wejściowych uczestniczących w pierwszeństwo wartość właściwości systemu. Dotyczy to również koercja i animacji. Aby uzyskać więcej informacji, zobacz [pierwszeństwo wartość właściwości zależności](~/add/includes/ajax-current-ext-md.md).       Ta metoda zwróci nigdy nie <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty> <xref:System.Windows.DependencyProperty>Jest wartością wartownik systemu właściwości, który jest używany w różnych formach wewnętrznie i czasami również dostępne za pośrednictwem wywołania zwrotne koercja.</xref:System.Windows.DependencyProperty>       Jeśli nie masz pewności, co powinna być typu właściwości, można zbadać identyfikatora właściwości zależności żądanych, aby ustalić, czy jest określony więcej <xref:System.Windows.DependencyProperty.PropertyType%2A>której można przekonwertować wartości zwracanej.</xref:System.Windows.DependencyProperty.PropertyType%2A>"
  syntax:
    content: public object GetValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "<xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> Identyfikator można pobrać wartości właściwości."
    return:
      type: System.Object
      description: "Zwraca bieżącą wartość skuteczne."
  overload: System.Windows.DependencyObject.GetValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Określony <code> dp </code> lub jego wartość jest nieprawidłowy lub określony <code> dp </code> nie istnieje."
  platform:
  - net462
- uid: System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  id: InvalidateProperty(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: InvalidateProperty(DependencyProperty)
  nameWithType: DependencyObject.InvalidateProperty(DependencyProperty)
  fullName: System.Windows.DependencyObject.InvalidateProperty(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Ponownie oblicza wartość efektywna dla właściwości zależności określony"
  remarks: "Podczas wywoływania InvalidateProperty, wszystkie skojarzone i stosowane <xref:System.Windows.CoerceValueCallback>lub <xref:System.Windows.PropertyChangedCallback>Funkcje zarejestrowany dla tej właściwości zależności mogą wywołać.</xref:System.Windows.PropertyChangedCallback> </xref:System.Windows.CoerceValueCallback>       Wywoływania InvalidateProperty dla właściwości, która ma lokalnego wartością ustawioną nie odniesie żadnego skutku, ponieważ wartość lokalnego mają pierwszeństwo przed innych danych wejściowych do systemu z właściwości, z wyjątkiem animacji. Jednak można wywołać <xref:System.Windows.DependencyObject.ClearValue%2A>, następnie wywołaj InvalidateProperty.</xref:System.Windows.DependencyObject.ClearValue%2A> Aby uzyskać więcej informacji, zobacz [pierwszeństwo wartość właściwości zależności](~/add/includes/ajax-current-ext-md.md).       Wywołania InvalidateProperty nie jest mieć zastosowania w różnych scenariuszach właściwości zależności. Jeśli właściwość zależności staje się unieważnionych z powodu zmiany wartości w jednym ze składników, system właściwości unieważnia i ponownie automatycznie sprawdza właściwości zależności. Jednak nadal istnieją pewne odpowiednie scenariusze, w których InvalidateProperty jest użyteczny. W szczególności można użyć InvalidateProperty wewnątrz coerce wywołania zwrotnego dla właściwości zależności różnych zmiany wartości lub właściwości. Umożliwia także InvalidateProperty Aby wymusić ponowną ocenę powiązanie względem źródła danych, który nie jest w stanie do zaimplementowania zalecanej <xref:System.ComponentModel.INotifyPropertyChanged>mechanizm powiadomień (możliwe, że jeśli korzystanie z klas danych, która nie może dziedziczyć po lub gdy dane są statycznego elementu członkowskiego).</xref:System.ComponentModel.INotifyPropertyChanged>"
  example:
  - "The following example calls InvalidateProperty on a custom property, whenever properties that are involved in the invalidated property's calculations change. This is an alternative technique to calling the <xref:System.Windows.DependencyObject.CoerceValue%2A> method, because invalidating the property will also call any registered <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>.  \n  \n [!code-cs[PropertySystemEsoterics#InvalidateProperty](~/add/codesnippet/csharp/PropertySystemEsoterics/SDKSampleLibrary/class1.cs#invalidateproperty)]\n [!code-vb[PropertySystemEsoterics#InvalidateProperty](~/add/codesnippet/visualbasic/PropertySystemEsoterics.sdksamplelibrary/class1.vb#invalidateproperty)]"
  syntax:
    content: public void InvalidateProperty (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "<xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> Identyfikator właściwości unieważnić."
  overload: System.Windows.DependencyObject.InvalidateProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.IsSealed
  id: IsSealed
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: IsSealed
  nameWithType: DependencyObject.IsSealed
  fullName: System.Windows.DependencyObject.IsSealed
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Pobiera wartość wskazującą, czy to wystąpienie jest obecnie zapieczętowane (tylko do odczytu)."
  remarks: "Ta wartość jest ustawiana wewnętrznie."
  syntax:
    content: public bool IsSealed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli to wystąpienie jest zapieczętowany; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.DependencyObject.IsSealed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: OnPropertyChanged(DependencyPropertyChangedEventArgs)
  nameWithType: DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Wywoływane, gdy wartość efektywna dowolnej właściwości zależności na tym <xref href=&quot;System.Windows.DependencyObject&quot;> </xref> została zaktualizowana. Właściwości określonych zależności, które zmienić jest zgłaszana w danych zdarzenia."
  remarks: "Ta metoda nie ma zazwyczaj wykrycia zmiany indywidualne właściwości lub wykonać invalidations właściwości na poszczególnych przypadków. OnPropertyChanged zamiast tego jest przeznaczony dla modyfikacje wzorca unieważniania ogólne, jeśli znane jest niektórych informacji o klasyfikacjach szeroki właściwości. Na przykład zmiany w <xref:System.Windows.Freezable>może być zmiany w typach wartości <xref:System.Windows.Freezable>, lub może nie zawierać właściwości, której zmiany są w innych <xref:System.Windows.Freezable>odwołań.</xref:System.Windows.Freezable> </xref:System.Windows.Freezable> </xref:System.Windows.Freezable> <xref:System.Windows.Freezable>Zastąpienie implementacja OnPropertyChanged używa wewnętrzny informacji do ustalenia, czy właściwości mają właściwości i udostępnia logikę odpowiedniej klasy podstawowej dla obu przypadkach.</xref:System.Windows.Freezable>       OnPropertyChanged jest potencjalnie wywołana wiele razy w okresie istnienia obiektu. W związku z tym można osiągnąć lepszą wydajność systemu ogólne właściwości, jeśli Zastępowanie metadanych określone właściwości, a następnie dołącz <xref:System.Windows.CoerceValueCallback>lub <xref:System.Windows.PropertyChangedCallback>funkcje dla poszczególnych właściwości.</xref:System.Windows.PropertyChangedCallback> </xref:System.Windows.CoerceValueCallback> Jednak czy użyć tej metody, jeśli <xref:System.Windows.DependencyObject>obejmuje znaczących właściwości zależności powiązanych wartości, lub jeśli zawiera logikę, takich jak zachowanie renderowania, który musi zostać uruchomiony ponownie dla kilku powiązanych przypadków właściwość invalidations.</xref:System.Windows.DependencyObject>"
  syntax:
    content: protected virtual void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "Dane zdarzenia, który będzie zawierać identyfikator właściwości zależności zainteresowań, metadane właściwości dla typu i starej i nowej wartości."
  overload: System.Windows.DependencyObject.OnPropertyChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  id: ReadLocalValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: ReadLocalValue(DependencyProperty)
  nameWithType: DependencyObject.ReadLocalValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ReadLocalValue(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Zwraca wartość lokalnego właściwości zależności, jeśli istnieje."
  remarks: "Należy używać <xref:System.Windows.DependencyObject.GetValue%2A>najbardziej typowych operacji &quot;get&quot; dla właściwości zależności.</xref:System.Windows.DependencyObject.GetValue%2A> ReadLocalValue nie zwraca wartość efektywna dla różnych okolicznościach w której wartość nie została lokalnie ustawiona.       Wartości, które są ustawiane przez style, kompozycje i szablony, wartością domyślną z metadanych lub dziedziczenie wartość właściwości nie są uważane można wartości lokalnej. Jednak powiązania i inne wyrażenia są uważane wartości lokalnego po zostały ocenione.       Jeśli ustawiono nie wartości lokalnej, ta metoda zwraca <xref:System.Windows.DependencyProperty.UnsetValue>.</xref:System.Windows.DependencyProperty.UnsetValue>       Jeśli zwrócona wartość jest inny niż <xref:System.Windows.DependencyProperty.UnsetValue>, możesz zbadać metadane właściwości żądanego zależności, aby ustalić, czy jest więcej określonego typu, który można przekonwertować na wartość zwracaną.</xref:System.Windows.DependencyProperty.UnsetValue>"
  syntax:
    content: public object ReadLocalValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "<xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> Identyfikator można pobrać wartości właściwości."
    return:
      type: System.Object
      description: "Zwraca wartość lokalnego lub zwraca wartość wskaźnikowe <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> przypadku nie wartości lokalnego."
  overload: System.Windows.DependencyObject.ReadLocalValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  id: SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: SetCurrentValue(DependencyProperty,Object)
  nameWithType: DependencyObject.SetCurrentValue(DependencyProperty,Object)
  fullName: System.Windows.DependencyObject.SetCurrentValue(DependencyProperty,Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Ustawia wartości właściwości zależności zmieniając wartość źródła."
  remarks: "Ta metoda jest używana przez składnik programowo ustawia wartości jednego z jego własnej właściwości bez konieczności wyłączania aplikacji użyj zadeklarowane właściwości. Metoda SetCurrentValue zmienia wartość właściwości, ale istniejące wyzwalacze, powiązania danych i style będą nadal działać."
  syntax:
    content: public void SetCurrentValue (System.Windows.DependencyProperty dp, object value);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Identyfikator właściwości zależności do ustawienia."
    - id: value
      type: System.Object
      description: "Nowa wartość lokalnego."
  overload: System.Windows.DependencyObject.SetCurrentValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Podjęto próbę modyfikacji właściwości zależności tylko do odczytu lub właściwość zapieczętowane <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>value</code>nie ma poprawnego typu jest zarejestrowany dla <code>dp</code> właściwości."
  platform:
  - net462
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  id: SetValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: SetValue(DependencyProperty,Object)
  nameWithType: DependencyObject.SetValue(DependencyProperty,Object)
  fullName: System.Windows.DependencyObject.SetValue(DependencyProperty,Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Ustawia wartość lokalnego właściwości zależności, określony przez jego identyfikatora właściwości zależności."
  remarks: "Jeśli podany typ niezgodny z typem, który jest zadeklarowana dla właściwości zależności, ponieważ pierwotnie został zarejestrowany, jest zwracany wyjątek. `value` Zawsze należy podawać parametru jako odpowiedniego typu.       Potencjalnie wpływało warunków wyjątków <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A>wywołania zwrotnego, która istnieje na podstawie identyfikatora właściwości zależności ustawiania właściwości zależności.</xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> W przeciwnym razie wartość podana może awarii ogólnych warunków Sprawdzanie typu (np. przekazywanie ciąg, gdy typ macierzysty jest o podwójnej precyzji)."
  syntax:
    content: public void SetValue (System.Windows.DependencyProperty dp, object value);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Identyfikator właściwości zależności do ustawienia."
    - id: value
      type: System.Object
      description: "Nowa wartość lokalnego."
  overload: System.Windows.DependencyObject.SetValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Podjęto próbę modyfikacji właściwości zależności tylko do odczytu lub właściwość zapieczętowane <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>value</code>nie ma poprawnego typu jest zarejestrowany dla <code>dp</code> właściwości."
  platform:
  - net462
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  id: SetValue(System.Windows.DependencyPropertyKey,System.Object)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: SetValue(DependencyPropertyKey,Object)
  nameWithType: DependencyObject.SetValue(DependencyPropertyKey,Object)
  fullName: System.Windows.DependencyObject.SetValue(DependencyPropertyKey,Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Ustawia wartość lokalnego właściwości zależności tylko do odczytu, określona przez <xref href=&quot;System.Windows.DependencyPropertyKey&quot;> </xref> identyfikatora właściwości zależności."
  remarks: "Ta sygnatura jest zazwyczaj używana w przypadku ustawienia wartości dla właściwości tylko do odczytu zależności, które są zdefiniowane przez użytkownika klas niestandardowych. Ogólnie rzecz biorąc SetValue jest wywoływane tylko z typ zarejestrowanych tej właściwości zależności, która implementuje wewnętrzny logiki, która zawiera wartości określone dla właściwości zależności. Aby uzyskać więcej informacji, zobacz [tylko do odczytu właściwości zależności](~/add/includes/ajax-current-ext-md.md).       Jeśli podany typ niezgodny z typem, który jest zadeklarowana dla właściwości zależności, ponieważ pierwotnie został zarejestrowany, jest zwracany wyjątek. `value` Zawsze należy podawać parametru jako odpowiedniego typu. Potencjalnie wpływało warunków wyjątków <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A>wywołania zwrotnego, która istnieje na podstawie identyfikatora właściwości zależności ustawiania właściwości zależności.</xref:System.Windows.DependencyProperty.ValidateValueCallback%2A>"
  example:
  - "The following example defines a read-only dependency property, along with a `public static readonly` <xref:System.Windows.DependencyProperty> that provides necessary read-only exposure to property consumers, and the get accessor for the [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] wrapper.  \n  \n [!code-cs[WPFAquariumSln#RODP](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#rodp)]\n [!code-vb[WPFAquariumSln#RODP](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#rodp)]"
  syntax:
    content: public void SetValue (System.Windows.DependencyPropertyKey key, object value);
    parameters:
    - id: key
      type: System.Windows.DependencyPropertyKey
      description: "<xref href=&quot;System.Windows.DependencyPropertyKey&quot;> </xref> Identyfikator właściwości do ustawienia."
    - id: value
      type: System.Object
      description: "Nowa wartość lokalnego."
  overload: System.Windows.DependencyObject.SetValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  id: ShouldSerializeProperty(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: ShouldSerializeProperty(DependencyProperty)
  nameWithType: DependencyObject.ShouldSerializeProperty(DependencyProperty)
  fullName: System.Windows.DependencyObject.ShouldSerializeProperty(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Zwraca wartość wskazującą, czy procesy serializacji powinny serializacji wartości dla właściwości zależności podana."
  remarks: "Domyślna implementacja zwraca `true` we wszystkich przypadkach, w których właściwość zależności miał wartość lokalnego w <xref:System.Windows.DependencyObject>.</xref:System.Windows.DependencyObject>"
  syntax:
    content: protected virtual bool ShouldSerializeProperty (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Identyfikator właściwości zależności, które powinny być serializowane."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli właściwość zależności, która jest dostarczana powinny być serializowane wartości; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.DependencyObject.ShouldSerializeProperty*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: System.Windows.Threading.DispatcherObject
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.DependencyObject.#ctor
  parent: System.Windows.DependencyObject
  isExternal: false
  name: DependencyObject()
  nameWithType: DependencyObject.DependencyObject()
  fullName: System.Windows.DependencyObject.DependencyObject()
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ClearValue(DependencyProperty)
  nameWithType: DependencyObject.ClearValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ClearValue(DependencyProperty)
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ClearValue(DependencyPropertyKey)
  nameWithType: DependencyObject.ClearValue(DependencyPropertyKey)
  fullName: System.Windows.DependencyObject.ClearValue(DependencyPropertyKey)
- uid: System.Windows.DependencyPropertyKey
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyKey
  nameWithType: DependencyPropertyKey
  fullName: System.Windows.DependencyPropertyKey
- uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: CoerceValue(DependencyProperty)
  nameWithType: DependencyObject.CoerceValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.CoerceValue(DependencyProperty)
- uid: System.Windows.DependencyObject.DependencyObjectType
  parent: System.Windows.DependencyObject
  isExternal: false
  name: DependencyObjectType
  nameWithType: DependencyObject.DependencyObjectType
  fullName: System.Windows.DependencyObject.DependencyObjectType
- uid: System.Windows.DependencyObjectType
  parent: System.Windows
  isExternal: false
  name: DependencyObjectType
  nameWithType: DependencyObjectType
  fullName: System.Windows.DependencyObjectType
- uid: System.Windows.DependencyObject.Equals(System.Object)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: Equals(Object)
  nameWithType: DependencyObject.Equals(Object)
  fullName: System.Windows.DependencyObject.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.DependencyObject.GetHashCode
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetHashCode()
  nameWithType: DependencyObject.GetHashCode()
  fullName: System.Windows.DependencyObject.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.DependencyObject.GetLocalValueEnumerator
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetLocalValueEnumerator()
  nameWithType: DependencyObject.GetLocalValueEnumerator()
  fullName: System.Windows.DependencyObject.GetLocalValueEnumerator()
- uid: System.Windows.LocalValueEnumerator
  parent: System.Windows
  isExternal: false
  name: LocalValueEnumerator
  nameWithType: LocalValueEnumerator
  fullName: System.Windows.LocalValueEnumerator
- uid: System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetValue(DependencyProperty)
  nameWithType: DependencyObject.GetValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.GetValue(DependencyProperty)
- uid: System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: InvalidateProperty(DependencyProperty)
  nameWithType: DependencyObject.InvalidateProperty(DependencyProperty)
  fullName: System.Windows.DependencyObject.InvalidateProperty(DependencyProperty)
- uid: System.Windows.DependencyObject.IsSealed
  parent: System.Windows.DependencyObject
  isExternal: false
  name: IsSealed
  nameWithType: DependencyObject.IsSealed
  fullName: System.Windows.DependencyObject.IsSealed
- uid: System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: OnPropertyChanged(DependencyPropertyChangedEventArgs)
  nameWithType: DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.DependencyPropertyChangedEventArgs
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyChangedEventArgs
  nameWithType: DependencyPropertyChangedEventArgs
  fullName: System.Windows.DependencyPropertyChangedEventArgs
- uid: System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ReadLocalValue(DependencyProperty)
  nameWithType: DependencyObject.ReadLocalValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ReadLocalValue(DependencyProperty)
- uid: System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetCurrentValue(DependencyProperty,Object)
  nameWithType: DependencyObject.SetCurrentValue(DependencyProperty,Object)
  fullName: System.Windows.DependencyObject.SetCurrentValue(DependencyProperty,Object)
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetValue(DependencyProperty,Object)
  nameWithType: DependencyObject.SetValue(DependencyProperty,Object)
  fullName: System.Windows.DependencyObject.SetValue(DependencyProperty,Object)
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetValue(DependencyPropertyKey,Object)
  nameWithType: DependencyObject.SetValue(DependencyPropertyKey,Object)
  fullName: System.Windows.DependencyObject.SetValue(DependencyPropertyKey,Object)
- uid: System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ShouldSerializeProperty(DependencyProperty)
  nameWithType: DependencyObject.ShouldSerializeProperty(DependencyProperty)
  fullName: System.Windows.DependencyObject.ShouldSerializeProperty(DependencyProperty)
- uid: System.Windows.DependencyObject.#ctor*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject.DependencyObject
- uid: System.Windows.DependencyObject.ClearValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ClearValue
  nameWithType: DependencyObject.ClearValue
- uid: System.Windows.DependencyObject.CoerceValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: CoerceValue
  nameWithType: DependencyObject.CoerceValue
- uid: System.Windows.DependencyObject.DependencyObjectType*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: DependencyObjectType
  nameWithType: DependencyObject.DependencyObjectType
- uid: System.Windows.DependencyObject.Equals*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: Equals
  nameWithType: DependencyObject.Equals
- uid: System.Windows.DependencyObject.GetHashCode*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetHashCode
  nameWithType: DependencyObject.GetHashCode
- uid: System.Windows.DependencyObject.GetLocalValueEnumerator*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetLocalValueEnumerator
  nameWithType: DependencyObject.GetLocalValueEnumerator
- uid: System.Windows.DependencyObject.GetValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetValue
  nameWithType: DependencyObject.GetValue
- uid: System.Windows.DependencyObject.InvalidateProperty*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: InvalidateProperty
  nameWithType: DependencyObject.InvalidateProperty
- uid: System.Windows.DependencyObject.IsSealed*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: IsSealed
  nameWithType: DependencyObject.IsSealed
- uid: System.Windows.DependencyObject.OnPropertyChanged*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: OnPropertyChanged
  nameWithType: DependencyObject.OnPropertyChanged
- uid: System.Windows.DependencyObject.ReadLocalValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ReadLocalValue
  nameWithType: DependencyObject.ReadLocalValue
- uid: System.Windows.DependencyObject.SetCurrentValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetCurrentValue
  nameWithType: DependencyObject.SetCurrentValue
- uid: System.Windows.DependencyObject.SetValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetValue
  nameWithType: DependencyObject.SetValue
- uid: System.Windows.DependencyObject.ShouldSerializeProperty*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ShouldSerializeProperty
  nameWithType: DependencyObject.ShouldSerializeProperty
