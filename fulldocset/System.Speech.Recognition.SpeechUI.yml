### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.SpeechUI
  id: SpeechUI
  children:
  - System.Speech.Recognition.SpeechUI.SendTextFeedback(System.Speech.Recognition.RecognitionResult,System.String,System.Boolean)
  langs:
  - csharp
  name: SpeechUI
  nameWithType: SpeechUI
  fullName: System.Speech.Recognition.SpeechUI
  type: Class
  summary: "Udostępnia tekstu oraz informacje o stanie dla operacji rozpoznawania będzie wyświetlana w interfejsie użytkownika platformy mowy."
  remarks: "Elementy członkowskie klasy SpeechUI można wskazać dokładne opinii dla użytkownika końcowego za pośrednictwem interfejsu użytkownika rozpoznawania mowy. Aplikacja może zwrócić dowolnego tekstu i powodzeń/niepowodzeń informacji za pomocą tej klasy."
  example:
  - "The following example is a handler for the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event. This event is used by a <xref:System.Speech.Recognition.Grammar> that is designed to handle password input in the form \"My password is …\".  \n  \n If a password is not present, or not valid, <xref:System.Speech.Recognition.SpeechUI.SendTextFeedback%2A> sends error information to the Speech platform user interface.  \n  \n```  \n  \ngrammar.SpeechRecognized +=   \ndelegate(object sender, SpeechRecognizedEventArgs eventArgs)   \n{  \n  SemanticValue semantics = eventArgs.Result.Semantics;  \n  RecognitionResult result=eventArgs.Result;  \n  \n  if (!semantics.ContainsKey(\"Password\"))   \n  {  \n    SpeechUI.SendTextFeedback(eventArgs.Result, \"No Password Provided\", false);  \n  }  \n  else   \n  {  \n    RecognizedAudio pwdAudio = result.GetAudioForWordRange(  \n                  result.Words[3],  \n                  result.Words[result.Words.Count - 1]);  \n    MemoryStream pwdMemoryStream = new MemoryStream();  \n    pwdAudio.WriteToAudioStream(pwdMemoryStream);  \n    if (!IsValidPwd(pwdMemoryStream))   \n    {  \n      string badPwd = System.IO.Path.GetTempPath() +   \n              \"BadPwd\" + (new Random()).Next().ToString() + \".wav\";  \n      FileStream waveStream = new FileStream(badPwd, FileMode.Create);  \n      pwdAudio.WriteToWaveStream(waveStream);  \n      waveStream.Flush();  \n      waveStream.Close();  \n      SpeechUI.SendTextFeedback(eventArgs.Result, \"Invalid Password\", false);  \n    }  \n  }  \n};  \n```"
  syntax:
    content: public class SpeechUI
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechUI.SendTextFeedback(System.Speech.Recognition.RecognitionResult,System.String,System.Boolean)
  id: SendTextFeedback(System.Speech.Recognition.RecognitionResult,System.String,System.Boolean)
  parent: System.Speech.Recognition.SpeechUI
  langs:
  - csharp
  name: SendTextFeedback(RecognitionResult,String,Boolean)
  nameWithType: SpeechUI.SendTextFeedback(RecognitionResult,String,Boolean)
  fullName: System.Speech.Recognition.SpeechUI.SendTextFeedback(RecognitionResult,String,Boolean)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Wysyła stanu i opisu interfejsu użytkownika platformy mowy o stanie operacji rozpoznawania."
  remarks: "SendTextFeedback można wskazać, że operacja rozpoznawania nie spełniają pewne kryteria, nawet wtedy, gdy dane wejściowe został rozpoznany.       Przykładem jest weryfikacja informacji kodu zabezpieczeń, których danych wejściowych pełni został rozpoznany, ale informacje weryfikacji jest nieprawidłowa."
  example:
  - "The following example is a handler for a <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event. This event is used by a <xref:System.Speech.Recognition.Grammar> that is designed to handle password input of the form, \"My password is …\".  \n  \n If a password is not present, or not valid, **SendTextFeedback** is used to send error information to the Speech platform user interface.  \n  \n```  \n  \ngrammar.SpeechRecognized +=  \ndelegate(object sender, SpeechRecognizedEventArgs eventArgs)   \n{  \n  SemanticValue semantics = eventArgs.Result.Semantics;  \n  RecognitionResult result=eventArgs.Result;  \n  \n  if (!semantics.ContainsKey(\"Password\"))   \n  {  \n    SpeechUI.SendTextFeedback(eventArgs.Result, \"No Password Provided\", false);  \n  }  \n  else  \n  {  \n    RecognizedAudio pwdAudio = result.GetAudioForWordRange(  \n              result.Words[3],  \n              result.Words[result.Words.Count - 1]);  \n    MemoryStream pwdMemoryStream = new MemoryStream();  \n    pwdAudio.WriteToAudioStream(pwdMemoryStream);  \n    if (!IsValidPwd(pwdMemoryStream))   \n    {  \n      string badPwd = System.IO.Path.GetTempPath() + \"BadPwd\" +   \n               (new Random()).Next().ToString() + \".wav\";  \n      FileStream waveStream = new FileStream(badPwd, FileMode.Create);  \n      pwdAudio.WriteToWaveStream(waveStream);  \n      waveStream.Flush();  \n      waveStream.Close();  \n      SpeechUI.SendTextFeedback(eventArgs.Result, \"Invalid Password\", false);  \n    }  \n  }  \n};  \n```"
  syntax:
    content: public static bool SendTextFeedback (System.Speech.Recognition.RecognitionResult result, string feedback, bool isSuccessfulAction);
    parameters:
    - id: result
      type: System.Speech.Recognition.RecognitionResult
      description: "Prawidłowy <xref href=&quot;System.Speech.Recognition.RecognitionResult&quot;> </xref> wystąpienia."
    - id: feedback
      type: System.String
      description: "A <xref:System.String>zawierające komentarz dotyczący operacji rozpoznawania wytworzonego <xref href=&quot;System.Speech.Recognition.RecognitionResult&quot;> </xref> `result`.</xref:System.String>"
    - id: isSuccessfulAction
      type: System.Boolean
      description: "A <xref uid=&quot;langword_csharp_bool&quot; name=&quot;bool&quot; href=&quot;&quot;> </xref> wskazującą, czy aplikacja uznane za operacji rozpoznawania sukcesu."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli dane przekazane do metody (<code>Feedback</code>, i <code> isSuccessfulAction </code>) został pomyślnie udostępnione do interfejsu użytkownika platformy mowy i <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> Jeśli działanie nie powiodło się."
  overload: System.Speech.Recognition.SpeechUI.SendTextFeedback*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.SpeechUI.SendTextFeedback(System.Speech.Recognition.RecognitionResult,System.String,System.Boolean)
  parent: System.Speech.Recognition.SpeechUI
  isExternal: false
  name: SendTextFeedback(RecognitionResult,String,Boolean)
  nameWithType: SpeechUI.SendTextFeedback(RecognitionResult,String,Boolean)
  fullName: System.Speech.Recognition.SpeechUI.SendTextFeedback(RecognitionResult,String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Speech.Recognition.RecognitionResult
  parent: System.Speech.Recognition
  isExternal: false
  name: RecognitionResult
  nameWithType: RecognitionResult
  fullName: System.Speech.Recognition.RecognitionResult
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Recognition.SpeechUI.SendTextFeedback*
  parent: System.Speech.Recognition.SpeechUI
  isExternal: false
  name: SendTextFeedback
  nameWithType: SpeechUI.SendTextFeedback
