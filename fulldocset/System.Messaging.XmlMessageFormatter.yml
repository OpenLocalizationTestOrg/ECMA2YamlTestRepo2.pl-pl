### YamlMime:ManagedReference
items:
- uid: System.Messaging.XmlMessageFormatter
  id: XmlMessageFormatter
  children:
  - System.Messaging.XmlMessageFormatter.#ctor
  - System.Messaging.XmlMessageFormatter.#ctor(System.String[])
  - System.Messaging.XmlMessageFormatter.#ctor(System.Type[])
  - System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)
  - System.Messaging.XmlMessageFormatter.Clone
  - System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)
  - System.Messaging.XmlMessageFormatter.TargetTypeNames
  - System.Messaging.XmlMessageFormatter.TargetTypes
  - System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)
  langs:
  - csharp
  name: XmlMessageFormatter
  nameWithType: XmlMessageFormatter
  fullName: System.Messaging.XmlMessageFormatter
  type: Class
  summary: "Serializuje i deserializuje obiekty do lub z treści wiadomości, w formacie XML na podstawie definicji schematu XSD."
  remarks: "XmlMessageFormatter jest domyślny element formatujący który wystąpienia <xref:System.Messaging.MessageQueue>używa do serializacji komunikatów zapisywanych w kolejce.</xref:System.Messaging.MessageQueue> Podczas tworzenia wystąpienia <xref:System.Messaging.MessageQueue>, wystąpienie XmlMessageFormatter jest tworzony i skojarzone z <xref:System.Messaging.MessageQueue>.</xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueue> Możesz określić inny element formatujący, tworząc go w kodzie i przypisywania go do <xref:System.Messaging.MessageQueue.Formatter%2A>Właściwości programu <xref:System.Messaging.MessageQueue>.</xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueue.Formatter%2A>       Wystąpienie XmlMessageFormatter domyślne kolejki może służyć do zapisu w kolejce, ale nie można użyć do odczytu z kolejki, dopóki nie zostanie ustawiony <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>lub <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>Właściwości na element formatujący.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> Można ustawić jedną lub obie te wartości na domyślne wystąpienie elementu formatującego lub Utwórz nowe wystąpienie elementu formatującego i ustaw wartości automatycznie, przekazując je jako argumenty do odpowiedniej <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>konstruktora.</xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>       Podczas określania <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>zamiast <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>, istnienia typu zaznaczono w czasie kompilacji, a nie czas odczytu, zmniejszając prawdopodobieństwo błędu.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>wymaga każdy wpis, aby być w pełni kwalifikowana, określając jej nazwę zestawu.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Co więcej podczas pracy z wieloma wersjami jednoczesnych, numer wersji musi również dołączony do również nazwę typu docelowego.       <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>i <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Program formatujący uzyskuje właściwości, jakie schematów, aby podjąć próbę dopasowania, gdy podczas deserializacji komunikatu.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Dzięki temu program formatujący interpretować treść komunikatu.       Wystąpienie serializacji w treści wiadomości musi być zgodne z jednym ze schematów reprezentowane w tablicy typu. Podczas odczytu komunikatów przy użyciu <xref:System.Messaging.MessageQueue.Receive%2A>metody, metoda tworzy obiekt typu, który odpowiada schematu zidentyfikowane i odczytuje treść komunikatu do niego</xref:System.Messaging.MessageQueue.Receive%2A>       Tylko jeden z dwóch właściwości musi być ustawiona podczas czytania z kolejki, ale można ustawić jednocześnie. Zestaw typów jest połączony zestaw z dwóch właściwości. Decyzja o którym właściwość do użycia jest specyficzne dla aplikacji. Jeśli treść wiadomości zawiera typ, którego schemat nie pasuje do żadnego z typów w tablicy dla każdej właściwości, zostanie wygenerowany wyjątek podczas odczytywania wiadomości.       XmlMessageFormatter jest kluczowym składnikiem wiadomości luźno powiązanych opartych na języku XML. Używa narzędzia XSD.exe XML format jest używany do generowania schematu XML, na przykład przy użyciu narzędzia do serializacji klasą używaną przez aplikację. Klasa musi mieć konstruktora domyślnego.       Format jest używany ponownie w procesu narzędzie generuje klasę na podstawie schematu można dystrybuować do opisywania klasy danych. Korzystanie z narzędzia i schematu XML, który generuje pozwala uniknąć redistributing.dll pliki, zawsze skompiluj klasy po zmianie implementacji klasy. Tak długo, jak schemat nie zmienia się po stronie klienta lub serwerze, inne zmiany po obu stronach nie wpływają na drugi."
  example:
  - "The following code example includes three pieces of code: a server component, an order class, and client code. The order class can be used by the XSD.exe utility to generate schema that the server recognizes within incoming messages. The schema is an XML formatted file that describes the \"shape\" of the class. This schema can then be used on the client side to generate a client-specific order class that shares the same schema as the server class.  \n  \n The following code example represents a server component that receives orders through a message queue. The body of the message should be an order object whose schema matches the Order.cs class below. The server process or application deserializes the order.  \n  \n [!code-vb[Classic XmlMessageFormatter Example#1](~/add/codesnippet/visualbasic/t-system.messaging.xmlme_1.vb)]\n [!code-cpp[Classic XmlMessageFormatter Example#1](~/add/codesnippet/cpp/t-system.messaging.xmlme_1.cpp)]\n [!code-cs[Classic XmlMessageFormatter Example#1](~/add/codesnippet/csharp/t-system.messaging.xmlme_1.cs)]  \n  \n The following code example represents the order class that provides a schema for the order objects that the application on the server receives and deserializes.  \n  \n [!code-vb[Classic XmlMessageFormatter Example#2](~/add/codesnippet/visualbasic/t-system.messaging.xmlme_2.vb)]\n [!code-cs[Classic XmlMessageFormatter Example#2](~/add/codesnippet/csharp/t-system.messaging.xmlme_2.cs)]\n [!code-cpp[Classic XmlMessageFormatter Example#2](~/add/codesnippet/cpp/t-system.messaging.xmlme_2.cpp)]  \n  \n Any client application that interacts with the application on the server must send messages to the server by serializing information in a locally defined order class into the message body. The locally defined order class must have the same schema as the server-defined order class into which the application on the server will attempt to deserialize the message body. The XSD.exe utility lets the manager of the application on the server create and distribute the schema the client must use to serialize messages going to the server.  \n  \n When the manager of the client application receives the schema for the order class, the XSD.exe utility is used again to generate a client-specific order class from the schema. It is this class that is used in the client code example below, not the server's order class (the XSD.exe utility causes the schema-generated class to have the same name as the original class). This new order class is used to serialize the order into the message body.  \n  \n The following code example is the client-side processing, used to serialize an order and send the information associated with the order to a queue. The code associates Item, Quantity, and Address information with elements of the schema that were generated for the Order.cs class by the XSD.exe utility. An order is sent to the Orders queue on the local computer.  \n  \n [!code-vb[Classic XmlMessageFormatter Example#3](~/add/codesnippet/visualbasic/t-system.messaging.xmlme_3.vb)]\n [!code-cpp[Classic XmlMessageFormatter Example#3](~/add/codesnippet/cpp/t-system.messaging.xmlme_3.cpp)]\n [!code-cs[Classic XmlMessageFormatter Example#3](~/add/codesnippet/csharp/t-system.messaging.xmlme_3.cs)]  \n  \n After the schema is generated from the order class on the server, you can modify the class. Unless the schema changes, you do not need to redistribute the schema. After you have distributed the schema and generated a client-side order class, that client class can also be modified independently of the server's order class, as long as the schema itself is not modified. The two classes have become loosely coupled."
  syntax:
    content: 'public class XmlMessageFormatter : ICloneable, System.Messaging.IMessageFormatter'
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  - System.Messaging.IMessageFormatter
  inheritedMembers: []
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.#ctor
  id: '#ctor'
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: XmlMessageFormatter()
  nameWithType: XmlMessageFormatter.XmlMessageFormatter()
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter()
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> klasy bez docelowego typy zestawu."
  remarks: "Tego przeciążenia konstruktora jest najczęściej używana podczas zapisywania w kolejce, jak typy elementów docelowych nie są wymagane podczas zapisywania.       Aby odczytać wiadomość z kolejki przy użyciu wystąpienia <xref:System.Messaging.XmlMessageFormatter>utworzony za pomocą tego konstruktora, należy ustawić <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>lub <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Właściwości będzie wówczas traktował program formatujący, jakie typy aby podjąć próbę deserializacji.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> </xref:System.Messaging.XmlMessageFormatter>       Podczas tworzenia nowego <xref:System.Messaging.MessageQueue>, domyślny <xref:System.Messaging.XmlMessageFormatter>jest tworzone wystąpienie, bez zestaw typów obiektów docelowych.</xref:System.Messaging.XmlMessageFormatter> </xref:System.Messaging.MessageQueue> Podobnie jak w przypadku elementu formatującego utworzone za pomocą tego konstruktora musi ustawić typy elementów docelowych dla tego wystąpienia programu formatującego, jeśli czytania z kolejki."
  syntax:
    content: public XmlMessageFormatter ();
    parameters: []
  overload: System.Messaging.XmlMessageFormatter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.#ctor(System.String[])
  id: '#ctor(System.String[])'
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: XmlMessageFormatter(String[])
  nameWithType: XmlMessageFormatter.XmlMessageFormatter(String[])
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter(String[])
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> klasy ustawienie typy elementów docelowych przekazany jako tablica wartości typu string (FQDN)."
  remarks: "Konstruktorów z parametrami typu docelowego najczęściej używanych podczas czytania z kolejki. Podczas zapisywania, nie jest konieczne określić typy elementów docelowych.       To przeciążenie metody <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>Ustawia konstruktora <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>Właściwości tablicy wartości przekazane za pośrednictwem `targetTypeNames` parametru.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> </xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> Ta właściwość umożliwia ustawienie <xref:System.Messaging.MessageQueue>za pomocą tej <xref:System.Messaging.XmlMessageFormatter>wystąpienie do czytania wiadomości zawiera obiekty z danego typu.</xref:System.Messaging.XmlMessageFormatter> </xref:System.Messaging.MessageQueue>       Zarówno <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>i <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Program formatujący uzyskuje właściwości, jakie schematów, aby podjąć próbę dopasowania, gdy podczas deserializacji komunikatu.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Dzięki temu program formatujący interpretować treść komunikatu.       Wystąpienie serializacji w treści wiadomości musi być zgodne z jednym ze schematów reprezentowane w tablicy typu. Podczas odczytu komunikatów przy użyciu <xref:System.Messaging.MessageQueue.Receive%2A>metody, metoda tworzy obiekt typu, który odpowiada schematu zidentyfikowane i odczytuje treść komunikatu do niego</xref:System.Messaging.MessageQueue.Receive%2A>       Tylko jeden z dwóch właściwości musi być ustawiona podczas czytania z kolejki, ale można ustawić jednocześnie. Zestaw typów jest połączony zestaw z dwóch właściwości. Wybór rodzaju, należy użyć jest specyficzne dla aplikacji. Jeśli treść wiadomości zawiera typ, którego schemat nie pasuje do żadnego z typów w tablicy dla każdej właściwości, zostanie wygenerowany wyjątek w czasie odczytu."
  example:
  - >-
    [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/m-system.messaging.xmlme_1.cpp)]
     [!code-cs[Message.Body#1](~/add/codesnippet/csharp/m-system.messaging.xmlme_1.cs)]
     [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/m-system.messaging.xmlme_1.vb)]
  syntax:
    content: public XmlMessageFormatter (string[] targetTypeNames);
    parameters:
    - id: targetTypeNames
      type: System.String[]
      description: "Tablica typu <xref:System.String>, który określa zestaw możliwych typów, które będą deserializowane przez program formatujący z dostarczonej wiadomości.</xref:System.String> Te wartości muszą być w pełni kwalifikowana, na przykład &quot;MyNamespace.MyOrders, MyOrdersAssemblyName&quot;."
  overload: System.Messaging.XmlMessageFormatter.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>targetTypeNames</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.#ctor(System.Type[])
  id: '#ctor(System.Type[])'
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: XmlMessageFormatter(Type[])
  nameWithType: XmlMessageFormatter.XmlMessageFormatter(Type[])
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter(Type[])
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> klasy ustawienie typy elementów docelowych przekazany jako tablicę typów obiektów."
  remarks: "Konstruktorów z parametrami typu docelowego najczęściej używanych podczas czytania z kolejki. Podczas zapisywania, nie jest konieczne określić typy elementów docelowych.       To przeciążenie metody <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>Ustawia konstruktora <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Właściwości tablicy wartości przekazane za pośrednictwem `targetTypes` parametru.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> Ta właściwość umożliwia ustawienie <xref:System.Messaging.MessageQueue>za pomocą tej <xref:System.Messaging.XmlMessageFormatter>wystąpienie do czytania wiadomości zawierające obiekty danych typów.</xref:System.Messaging.XmlMessageFormatter> </xref:System.Messaging.MessageQueue>       Zarówno <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>i <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Program formatujący uzyskuje właściwości, jakie schematów, aby podjąć próbę dopasowania, gdy podczas deserializacji komunikatu.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Dzięki temu program formatujący interpretować treść komunikatu.       Wystąpienie serializacji w treści wiadomości musi być zgodne z jednym ze schematów reprezentowane w tablicy typu. Podczas odczytu komunikatów przy użyciu <xref:System.Messaging.MessageQueue.Receive%2A>metody, metoda tworzy obiekt typu, który odpowiada schematu zidentyfikowane i odczytuje treść komunikatu do niego</xref:System.Messaging.MessageQueue.Receive%2A>       Tylko jeden z dwóch właściwości musi być ustawiona podczas czytania z kolejki, ale można ustawić jednocześnie. Zestaw typów jest połączony zestaw z dwóch właściwości. Wybór rodzaju, należy użyć jest specyficzne dla aplikacji. Jeśli treść wiadomości zawiera typ, którego schemat nie pasuje do żadnego z typów w tablicy dla każdej właściwości, zostanie wygenerowany wyjątek w czasie odczytu.       Podczas określania <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>zamiast <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>, istnienia typu zaznaczono w czasie kompilacji, a nie czas odczytu, zmniejszając prawdopodobieństwo błędu.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>wymaga każdy wpis, aby być w pełni kwalifikowana, określając jej nazwę zestawu.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Co więcej podczas pracy z wieloma wersjami jednoczesnych, numer wersji musi również dołączony do również nazwę typu docelowego.       Korzystając z <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>, można dodać każdego obiektu (na przykład `MyClass`) do listy w sposób dowodzą następujący kod C#.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>      ```   TargetTypes = new Type[]{typeof(MyClass)}   ```"
  syntax:
    content: public XmlMessageFormatter (Type[] targetTypes);
    parameters:
    - id: targetTypes
      type: System.Type[]
      description: "Tablica typu <xref:System.Type>, który określa zestaw możliwych typów, które będą deserializowane przez program formatujący z dostarczonej wiadomości.</xref:System.Type>"
  overload: System.Messaging.XmlMessageFormatter.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>targetTypes</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)
  id: CanRead(System.Messaging.Message)
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: CanRead(Message)
  nameWithType: XmlMessageFormatter.CanRead(Message)
  fullName: System.Messaging.XmlMessageFormatter.CanRead(Message)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Określa, czy element formatujący może wykonywać deserializację komunikatu."
  remarks: "Program formatujący wywołanego właściwość CanRead próbuje sprawdzić, czy zawartość wiadomości są coś, co może wykonywać deserializację. Program formatujący tylko może wykonywać deserializację komunikatu, jeśli typ w treści wiadomości ma ten sam schemat jako jeden z typów w tablicy reprezentowany przez <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>i <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Właściwości.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Właściwość CanRead zwraca `false` w następujących dwóch sytuacji: — komunikat nie został sformatowany przy użyciu <xref:System.Messaging.XmlMessageFormatter>.</xref:System.Messaging.XmlMessageFormatter>      -Schematu treść komunikatu nie jest wymienionych w albo <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>lub <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Właściwości.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>       <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>i <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Właściwości program formatujący uzyskuje jakie typy obiektów musi być w stanie do deserializacji.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Jeśli dowolny typ brakuje listy jeszcze znajduje się w komunikacie, właściwość CanRead zwraca `false`."
  syntax:
    content: public bool CanRead (System.Messaging.Message message);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "<xref href=&quot;System.Messaging.Message&quot;> </xref> Do zbadania."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli element formatujący XML może wykonywać deserializację message; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.XmlMessageFormatter.CanRead*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Ani <> </> *> ani <> </> *> właściwość została ustawiona."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>message</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.Clone
  id: Clone
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: Clone()
  nameWithType: XmlMessageFormatter.Clone()
  fullName: System.Messaging.XmlMessageFormatter.Clone()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Tworzy wystąpienie <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> klasy odczytu/zapisu, którego właściwości (zestawy typy elementów docelowych) są takie same jak bieżące <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> wystąpienia."
  remarks: "Ta metoda tworzy kopię elementu formatującego i inicjuje wszystkie właściwości z wartościami <xref:System.Messaging.XmlMessageFormatter>obiektu.</xref:System.Messaging.XmlMessageFormatter>"
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "Obiekt, którego właściwości są identyczne z to <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> wystąpienia, ale których metadanych nie określa się do wystąpienia klasy elementu formatującego."
  overload: System.Messaging.XmlMessageFormatter.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)
  id: Read(System.Messaging.Message)
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: Read(Message)
  nameWithType: XmlMessageFormatter.Read(Message)
  fullName: System.Messaging.XmlMessageFormatter.Read(Message)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Odczytuje zawartość z podanym komunikatem i tworzy obiekt, który zawiera komunikat zdeserializowany."
  remarks: "Zarówno <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>i <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Program formatujący uzyskuje właściwości, jakie schematów, aby podjąć próbę dopasowania, gdy podczas deserializacji komunikatu.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Jeden z tych właściwości musi być ustawiony przed można przeprowadzić deserializacji komunikatu.       Wystąpienie serializacji w treści wiadomości musi być zgodne z jednym ze schematów reprezentowane w tablicy typu. Podczas odczytu komunikatów przy użyciu <xref:System.Messaging.MessageQueue.Receive%2A>metody, metoda tworzy obiekt typu, który odpowiada schematu zidentyfikowane i odczytuje treść komunikatu do niego</xref:System.Messaging.MessageQueue.Receive%2A>       Aby można było zapisać do kolejki nie masz typy elementów docelowych."
  syntax:
    content: public object Read (System.Messaging.Message message);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "<xref href=&quot;System.Messaging.Message&quot;> </xref>, W formacie XML, do deserializacji."
    return:
      type: System.Object
      description: "Zdeserializowana komunikat."
  overload: System.Messaging.XmlMessageFormatter.Read*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Ani <> </> *> ani <> </> *> właściwość została ustawiona.       - lub - wystąpienie serializacji w treści wiadomości nie jest zgodne ze wszystkimi schematów reprezentowany przez typy w <> </> *> i <> </> *> właściwości."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>message</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.TargetTypeNames
  id: TargetTypeNames
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: TargetTypeNames
  nameWithType: XmlMessageFormatter.TargetTypeNames
  fullName: System.Messaging.XmlMessageFormatter.TargetTypeNames
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Określa zestaw możliwych typów, które będą deserializowane przez program formatujący z dostarczonej wiadomości."
  remarks: "Zarówno TargetTypeNames i <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Program formatujący uzyskuje właściwości, jakie schematów, aby podjąć próbę dopasowania, gdy podczas deserializacji komunikatu.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> Dzięki temu program formatujący interpretować treść komunikatu.       Wystąpienie serializacji w treści wiadomości musi być zgodne z jednym ze schematów reprezentowane w tablicy typu. Podczas odczytu komunikatów przy użyciu <xref:System.Messaging.MessageQueue.Receive%2A>metody, metoda tworzy obiekt typu, który odpowiada schematu zidentyfikowane i odczytuje treść komunikatu do niego</xref:System.Messaging.MessageQueue.Receive%2A>       Tylko jeden z dwóch właściwości musi być ustawiona podczas czytania z kolejki, ale można ustawić jednocześnie. Zestaw typów jest połączony zestaw z dwóch właściwości. Decyzja o którym właściwość do użycia jest specyficzne dla aplikacji. Jeśli treść wiadomości zawiera typ, którego schemat nie pasuje do żadnego z typów w tablicy dla każdej właściwości, zostanie wygenerowany wyjątek podczas odczytywania wiadomości.       TargetTypeNames wymaga każdy wpis, aby być w pełni kwalifikowana, określając jej nazwę zestawu. Co więcej podczas pracy z wieloma wersjami jednoczesnych, numer wersji musi również dołączony do również nazwę typu docelowego.       Typy elementów docelowych to tylko wymagane podczas czytania z kolejki. TargetTypeNames i <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Właściwości nie muszą należeć do zapisu w kolejce.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>"
  syntax:
    content: public string[] TargetTypeNames { get; set; }
    return:
      type: System.String[]
      description: "Tablica typu <xref:System.String>, który określa typów obiektów do deserializacji z treści komunikatu podczas odczytywania wiadomości.</xref:System.String>"
  overload: System.Messaging.XmlMessageFormatter.TargetTypeNames*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Właściwość TargetTypeNames jest <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.TargetTypes
  id: TargetTypes
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: TargetTypes
  nameWithType: XmlMessageFormatter.TargetTypes
  fullName: System.Messaging.XmlMessageFormatter.TargetTypes
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Określa zestaw możliwych typów, które będą deserializowane przez program formatujący z dostarczonej wiadomości."
  remarks: "Zarówno <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>i program formatujący uzyskuje właściwości TargetTypes, jakie schematów, aby podjąć próbę dopasowania, gdy podczas deserializacji komunikatu.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Dzięki temu program formatujący interpretować treść komunikatu.       Wystąpienie serializacji w treści wiadomości musi być zgodne z jednym ze schematów reprezentowane w tablicy typu. Podczas odczytu komunikatów przy użyciu <xref:System.Messaging.MessageQueue.Receive%2A>metody, metoda tworzy obiekt typu, który odpowiada schematu zidentyfikowane i odczytuje treść komunikatu do niego</xref:System.Messaging.MessageQueue.Receive%2A>       Tylko jeden z dwóch właściwości musi być ustawiona podczas czytania z kolejki, ale można ustawić jednocześnie. Zestaw typów jest połączony zestaw z dwóch właściwości. Decyzja o którym właściwość do użycia jest specyficzne dla aplikacji. Jeśli treść wiadomości zawiera typ, którego schemat nie pasuje do żadnego z typów w tablicy dla każdej właściwości, zostanie wygenerowany wyjątek podczas odczytywania wiadomości.       Typy elementów docelowych to tylko wymagane podczas czytania z kolejki. <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>i właściwości TargetTypes nie muszą należeć do zapisu w kolejce.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>       Przy określaniu TargetTypes zamiast <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>, istnienia typu zaznaczono w czasie kompilacji, a nie czas odczytu, zmniejszając prawdopodobieństwo błędu.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>       Korzystając z TargetTypes, można dodać każdego obiektu (na przykład `MyClass`) do listy w sposób przedstawiona w kodzie C# `TargetTypes = new Type[]{typeof(MyClass), typeof (MyOtherClass)};`."
  example:
  - "The following code example sends and receives a message that contains an order to and from a queue.  \n  \n [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/p-system.messaging.xmlme_1.cpp)]\n [!code-cs[Message.Body#1](~/add/codesnippet/csharp/p-system.messaging.xmlme_1.cs)]\n [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/p-system.messaging.xmlme_1.vb)]"
  syntax:
    content: public Type[] TargetTypes { get; set; }
    return:
      type: System.Type[]
      description: "Tablica typu <xref:System.Type>, który określa typów obiektów do deserializacji z treści komunikatu podczas odczytywania wiadomości.</xref:System.Type>"
  overload: System.Messaging.XmlMessageFormatter.TargetTypes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Właściwość TargetTypes jest <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)
  id: Write(System.Messaging.Message,System.Object)
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: Write(Message,Object)
  nameWithType: XmlMessageFormatter.Write(Message,Object)
  fullName: System.Messaging.XmlMessageFormatter.Write(Message,Object)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Serializuje obiektu na treść komunikatu."
  remarks: "Typy elementów docelowych nie musi być określony do zapisu do kolejki, ponieważ muszą one być podczas odczytu. <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>Lub <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>właściwość jest używana przez program formatujący tylko wtedy, gdy podczas deserializacji komunikatu.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>       <xref:System.Messaging.XmlMessageFormatter>Sprawia, że użycie <xref:System.Xml.Serialization.XmlSerializer>klasy, która definiuje, jakie można serializować.</xref:System.Xml.Serialization.XmlSerializer> </xref:System.Messaging.XmlMessageFormatter> Tylko publiczne pola i właściwości publiczne może być Zserializowany. Struktury, struktury z tablicami i tablice struktur są wszystkie serializacji, pod warunkiem, nie używaj styl zakodowany przy użyciu protokołu SOAP."
  syntax:
    content: public void Write (System.Messaging.Message message, object obj);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "<xref href=&quot;System.Messaging.Message&quot;> </xref> Których <xref:System.Messaging.Message.Body*>Właściwości będzie zawierać Zserializowany obiekt.</xref:System.Messaging.Message.Body*>"
    - id: obj
      type: System.Object
      description: "<xref:System.Object>Do serializacji w treści wiadomości.</xref:System.Object>"
  overload: System.Messaging.XmlMessageFormatter.Write*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>message</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The <code>obj</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Messaging.XmlMessageFormatter.#ctor
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: XmlMessageFormatter()
  nameWithType: XmlMessageFormatter.XmlMessageFormatter()
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter()
- uid: System.Messaging.XmlMessageFormatter.#ctor(System.String[])
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: XmlMessageFormatter(String[])
  nameWithType: XmlMessageFormatter.XmlMessageFormatter(String[])
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Messaging.XmlMessageFormatter.#ctor(System.Type[])
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: XmlMessageFormatter(Type[])
  nameWithType: XmlMessageFormatter.XmlMessageFormatter(Type[])
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter(Type[])
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: CanRead(Message)
  nameWithType: XmlMessageFormatter.CanRead(Message)
  fullName: System.Messaging.XmlMessageFormatter.CanRead(Message)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.Message
  parent: System.Messaging
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: System.Messaging.Message
- uid: System.Messaging.XmlMessageFormatter.Clone
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Clone()
  nameWithType: XmlMessageFormatter.Clone()
  fullName: System.Messaging.XmlMessageFormatter.Clone()
- uid: System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Read(Message)
  nameWithType: XmlMessageFormatter.Read(Message)
  fullName: System.Messaging.XmlMessageFormatter.Read(Message)
- uid: System.Messaging.XmlMessageFormatter.TargetTypeNames
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: TargetTypeNames
  nameWithType: XmlMessageFormatter.TargetTypeNames
  fullName: System.Messaging.XmlMessageFormatter.TargetTypeNames
- uid: System.Messaging.XmlMessageFormatter.TargetTypes
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: TargetTypes
  nameWithType: XmlMessageFormatter.TargetTypes
  fullName: System.Messaging.XmlMessageFormatter.TargetTypes
- uid: System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Write(Message,Object)
  nameWithType: XmlMessageFormatter.Write(Message,Object)
  fullName: System.Messaging.XmlMessageFormatter.Write(Message,Object)
- uid: System.Messaging.XmlMessageFormatter.#ctor*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: XmlMessageFormatter
  nameWithType: XmlMessageFormatter.XmlMessageFormatter
- uid: System.Messaging.XmlMessageFormatter.CanRead*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: CanRead
  nameWithType: XmlMessageFormatter.CanRead
- uid: System.Messaging.XmlMessageFormatter.Clone*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Clone
  nameWithType: XmlMessageFormatter.Clone
- uid: System.Messaging.XmlMessageFormatter.Read*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Read
  nameWithType: XmlMessageFormatter.Read
- uid: System.Messaging.XmlMessageFormatter.TargetTypeNames*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: TargetTypeNames
  nameWithType: XmlMessageFormatter.TargetTypeNames
- uid: System.Messaging.XmlMessageFormatter.TargetTypes*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: TargetTypes
  nameWithType: XmlMessageFormatter.TargetTypes
- uid: System.Messaging.XmlMessageFormatter.Write*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Write
  nameWithType: XmlMessageFormatter.Write
