### YamlMime:ManagedReference
items:
- uid: System.Net.Http.HttpClient
  id: HttpClient
  children:
  - System.Net.Http.HttpClient.#ctor
  - System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)
  - System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)
  - System.Net.Http.HttpClient.BaseAddress
  - System.Net.Http.HttpClient.CancelPendingRequests
  - System.Net.Http.HttpClient.DefaultRequestHeaders
  - System.Net.Http.HttpClient.DeleteAsync(System.String)
  - System.Net.Http.HttpClient.DeleteAsync(System.Uri)
  - System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.Dispose(System.Boolean)
  - System.Net.Http.HttpClient.GetAsync(System.String)
  - System.Net.Http.HttpClient.GetAsync(System.Uri)
  - System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)
  - System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)
  - System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.GetByteArrayAsync(System.String)
  - System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)
  - System.Net.Http.HttpClient.GetStreamAsync(System.String)
  - System.Net.Http.HttpClient.GetStreamAsync(System.Uri)
  - System.Net.Http.HttpClient.GetStringAsync(System.String)
  - System.Net.Http.HttpClient.GetStringAsync(System.Uri)
  - System.Net.Http.HttpClient.MaxResponseContentBufferSize
  - System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)
  - System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)
  - System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)
  - System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)
  - System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)
  - System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)
  - System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.Timeout
  langs:
  - csharp
  name: HttpClient
  nameWithType: HttpClient
  fullName: System.Net.Http.HttpClient
  type: Class
  summary: "Udostępnia klasę podstawową do wysyłania żądań HTTP i odbierania odpowiedzi HTTP z zasobu identyfikowanego przez identyfikator URI."
  remarks: "Wystąpienie klasy HttpClient działa jako sesji do wysyłania żądań HTTP. Wystąpienie HttpClient jest kolekcją ustawienia stosowane do wszystkich żądań wykonywanych przez to wystąpienie. Ponadto każde wystąpienie HttpClient używa własnego puli połączeń, izolowanie żądań z żądań wykonywanych przez inne wystąpienia HttpClient.       HttpClient działa również jako klasę podstawową dla bardziej konkretnych klientów HTTP. Przykładem może być FacebookHttpClient, zapewniając dodatkowe metody specyficzne dla usługi sieci web usługi Facebook (metoda GetFriends, na przykład).       Domyślnie <xref:System.Net.HttpWebRequest>będzie służyć do wysyłania żądań do serwera.</xref:System.Net.HttpWebRequest> To zachowanie można modyfikować, określając inny kanał w jednym z przeciążeń konstruktora biorąc <xref:System.Net.Http.HttpMessageHandler>wystąpienia jako parametr.</xref:System.Net.Http.HttpMessageHandler> Jeśli są wymagane, funkcji, takich jak uwierzytelnianie czy buforowanie <xref:System.Net.Http.WebRequestHandler>może być używane do konfigurowania ustawień i będzie można instancji być przekazany do konstruktora.</xref:System.Net.Http.WebRequestHandler> Zwrócony obsługi mogą być przekazywane do jednego z przeciążeń konstruktora biorąc <xref:System.Net.Http.HttpMessageHandler>parametru.</xref:System.Net.Http.HttpMessageHandler>       Jeśli aplikacji za pomocą HttpClient i klas pokrewnych w <xref:System.Net.Http>przestrzeni nazw zamierza pobrać dużych ilości danych (50 MB lub więcej), a następnie aplikacja powinna strumienia te pliki do pobrania i nie używać domyślnego buforowania.</xref:System.Net.Http> Jeśli używane jest domyślne buforowanie użycie pamięci klienta otrzyma bardzo duży, może spowodować znacznie zmniejszyć wydajność.       Wielowątkowość są następujące metody: 1.  <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A>2.</xref:System.Net.Http.HttpClient.CancelPendingRequests%2A>  <xref:System.Net.Http.HttpClient.DeleteAsync%2A>3.</xref:System.Net.Http.HttpClient.DeleteAsync%2A>  <xref:System.Net.Http.HttpClient.GetAsync%2A>4.</xref:System.Net.Http.HttpClient.GetAsync%2A>  <xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A>5.</xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A>  <xref:System.Net.Http.HttpClient.GetStreamAsync%2A>6.</xref:System.Net.Http.HttpClient.GetStreamAsync%2A>  <xref:System.Net.Http.HttpClient.GetStringAsync%2A>7.</xref:System.Net.Http.HttpClient.GetStringAsync%2A>  <xref:System.Net.Http.HttpClient.PostAsync%2A>8.</xref:System.Net.Http.HttpClient.PostAsync%2A>  <xref:System.Net.Http.HttpClient.PutAsync%2A>9.</xref:System.Net.Http.HttpClient.PutAsync%2A> <xref:System.Net.Http.HttpClient.SendAsync%2A>HttpClient jest przeznaczony do użycia raz i ponownego użycia w całym cyklu życia aplikacji.</xref:System.Net.Http.HttpClient.SendAsync%2A> Utworzenie wystąpienia klasy HttpClient dla każdego żądania wyczerpie liczbę gniazd, które są dostępne pod dużym obciążeniem. Spowoduje to socketexception — błędy. Poniżej przedstawiono przykład poprawnie za pomocą elementu HttpClient.      ```c#   public class GoodController : ApiController   {       // OK       private static readonly HttpClient HttpClient;          static GoodController()       {           HttpClient = new HttpClient();       }   }      ```"
  example:
  - '[!code-cs[System.Net.Http.HttpClient#1](~/add/codesnippet/csharp/t-system.net.http.httpcl_1_1.cs)]'
  syntax:
    content: 'public class HttpClient : System.Net.Http.HttpMessageInvoker'
  inheritance:
  - System.Object
  - System.Net.Http.HttpMessageInvoker
  implements: []
  inheritedMembers:
  - System.Net.Http.HttpMessageInvoker.Dispose
  platform:
  - net462
- uid: System.Net.Http.HttpClient.#ctor
  id: '#ctor'
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: HttpClient()
  nameWithType: HttpClient.HttpClient()
  fullName: System.Net.Http.HttpClient.HttpClient()
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Net.Http.HttpClient&quot;> </xref> klasy."
  syntax:
    content: public HttpClient ();
    parameters: []
  overload: System.Net.Http.HttpClient.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)
  id: '#ctor(System.Net.Http.HttpMessageHandler)'
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: HttpClient(HttpMessageHandler)
  nameWithType: HttpClient.HttpClient(HttpMessageHandler)
  fullName: System.Net.Http.HttpClient.HttpClient(HttpMessageHandler)
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Net.Http.HttpClient&quot;> </xref> klasy z określonym programem obsługi."
  remarks: "Jeśli `null` określono `handler` parametru <xref:System.Net.Http.WebRequestHandler>jest używany jako program obsługi transportu.</xref:System.Net.Http.WebRequestHandler>"
  syntax:
    content: public HttpClient (System.Net.Http.HttpMessageHandler handler);
    parameters:
    - id: handler
      type: System.Net.Http.HttpMessageHandler
      description: "Stos programu obsługi HTTP używany do wysyłania żądań."
  overload: System.Net.Http.HttpClient.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)
  id: '#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)'
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: HttpClient(HttpMessageHandler,Boolean)
  nameWithType: HttpClient.HttpClient(HttpMessageHandler,Boolean)
  fullName: System.Net.Http.HttpClient.HttpClient(HttpMessageHandler,Boolean)
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Net.Http.HttpClient&quot;> </xref> klasy z określonym programem obsługi."
  syntax:
    content: public HttpClient (System.Net.Http.HttpMessageHandler handler, bool disposeHandler);
    parameters:
    - id: handler
      type: System.Net.Http.HttpMessageHandler
      description: "<xref href=&quot;System.Net.Http.HttpMessageHandler&quot;> </xref> Odpowiedzialna za przetwarzanie komunikatów odpowiedzi HTTP."
    - id: disposeHandler
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli wewnętrznym programem obsługi powinny być usuwane przez metody Dispose(), <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> Jeśli zamierzasz użyć ponownie wewnętrznym programem obsługi."
  overload: System.Net.Http.HttpClient.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpClient.BaseAddress
  id: BaseAddress
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: BaseAddress
  nameWithType: HttpClient.BaseAddress
  fullName: System.Net.Http.HttpClient.BaseAddress
  type: Property
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Pobiera lub ustawia adres podstawowy z zasobów identyfikator URI (Uniform) zasobu internetowego używanego podczas wysyłania żądań."
  remarks: "Podczas wysyłania <xref:System.Net.Http.HttpRequestMessage>z względnym identyfikatorem Uri komunikat identyfikator Uri zostanie dodany do właściwość BaseAddress, aby utworzyć bezwzględnym identyfikatorem Uri.</xref:System.Net.Http.HttpRequestMessage>"
  syntax:
    content: public Uri BaseAddress { get; set; }
    return:
      type: System.Uri
      description: "Adres podstawowy z zasobów identyfikator URI (Uniform) zasobu internetowego używanego podczas wysyłania żądań."
  overload: System.Net.Http.HttpClient.BaseAddress*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpClient.CancelPendingRequests
  id: CancelPendingRequests
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: CancelPendingRequests()
  nameWithType: HttpClient.CancelPendingRequests()
  fullName: System.Net.Http.HttpClient.CancelPendingRequests()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Anuluje wszystkie oczekujące żądania dla tego wystąpienia."
  remarks: "Po wywołaniu tej metody <xref:System.Net.Http.HttpClient>wystąpienie może być nadal używane do wykonywania dodatkowych żądań.</xref:System.Net.Http.HttpClient>"
  syntax:
    content: public void CancelPendingRequests ();
    parameters: []
  overload: System.Net.Http.HttpClient.CancelPendingRequests*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpClient.DefaultRequestHeaders
  id: DefaultRequestHeaders
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: DefaultRequestHeaders
  nameWithType: HttpClient.DefaultRequestHeaders
  fullName: System.Net.Http.HttpClient.DefaultRequestHeaders
  type: Property
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Pobiera nagłówki, które mają być wysyłane z każdym żądaniem."
  remarks: "Nagłówki, ustaw dla tej właściwości nie musi ponownie ustawić na komunikaty żądania."
  syntax:
    content: public System.Net.Http.Headers.HttpRequestHeaders DefaultRequestHeaders { get; }
    return:
      type: System.Net.Http.Headers.HttpRequestHeaders
      description: "Nagłówki, które mają być wysyłane z każdym żądaniem."
  overload: System.Net.Http.HttpClient.DefaultRequestHeaders*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpClient.DeleteAsync(System.String)
  id: DeleteAsync(System.String)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: DeleteAsync(String)
  nameWithType: HttpClient.DeleteAsync(String)
  fullName: System.Net.Http.HttpClient.DeleteAsync(String)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wyślij żądanie usunięcia do określonego identyfikatora Uri jako operację asynchroniczną."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócona <xref:System.Threading.Tasks.Task%601>obiektu ukończy po całej odpowiedzi (w tym zawartości) jest do odczytu.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> DeleteAsync (string requestUri);
    parameters:
    - id: requestUri
      type: System.String
      description: "Identyfikator Uri żądania jest wysyłane."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.HttpClient.DeleteAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Komunikat żądania została już wysłana przez <xref href=&quot;System.Net.Http.HttpClient&quot;> </xref> wystąpienia."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "Żądanie nie powiodło się z powodu podstawowego problemu, takich jak łączność z siecią, błąd DNS, weryfikacji certyfikatu serwera lub limit czasu."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.DeleteAsync(System.Uri)
  id: DeleteAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: DeleteAsync(Uri)
  nameWithType: HttpClient.DeleteAsync(Uri)
  fullName: System.Net.Http.HttpClient.DeleteAsync(Uri)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wyślij żądanie usunięcia do określonego identyfikatora Uri jako operację asynchroniczną."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócona <xref:System.Threading.Tasks.Task%601>obiektu ukończy po całej odpowiedzi (w tym zawartości) jest do odczytu.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> DeleteAsync (Uri requestUri);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "Identyfikator Uri żądania jest wysyłane."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.HttpClient.DeleteAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Komunikat żądania została już wysłana przez <xref href=&quot;System.Net.Http.HttpClient&quot;> </xref> wystąpienia."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "Żądanie nie powiodło się z powodu podstawowego problemu, takich jak łączność z siecią, błąd DNS, weryfikacji certyfikatu serwera lub limit czasu."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)
  id: DeleteAsync(System.String,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: DeleteAsync(String,CancellationToken)
  nameWithType: HttpClient.DeleteAsync(String,CancellationToken)
  fullName: System.Net.Http.HttpClient.DeleteAsync(String,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wyślij żądanie usunięcia do określonego identyfikatora Uri z tokenem anulowania jako operację asynchroniczną."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócona <xref:System.Threading.Tasks.Task%601>obiektu ukończy po całej odpowiedzi (w tym zawartości) jest do odczytu.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> DeleteAsync (string requestUri, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: requestUri
      type: System.String
      description: "Identyfikator Uri żądania jest wysyłane."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Token anulowania, używany przez inne obiekty lub wątki w celu odebrania powiadomienia o anulowaniu."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.HttpClient.DeleteAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Komunikat żądania została już wysłana przez <xref href=&quot;System.Net.Http.HttpClient&quot;> </xref> wystąpienia."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "Żądanie nie powiodło się z powodu podstawowego problemu, takich jak łączność z siecią, błąd DNS, weryfikacji certyfikatu serwera lub limit czasu."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)
  id: DeleteAsync(System.Uri,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: DeleteAsync(Uri,CancellationToken)
  nameWithType: HttpClient.DeleteAsync(Uri,CancellationToken)
  fullName: System.Net.Http.HttpClient.DeleteAsync(Uri,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wyślij żądanie usunięcia do określonego identyfikatora Uri z tokenem anulowania jako operację asynchroniczną."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócona <xref:System.Threading.Tasks.Task%601>obiektu ukończy po całej odpowiedzi (w tym zawartości) jest do odczytu.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> DeleteAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "Identyfikator Uri żądania jest wysyłane."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Token anulowania, używany przez inne obiekty lub wątki w celu odebrania powiadomienia o anulowaniu."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.HttpClient.DeleteAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Komunikat żądania została już wysłana przez <xref href=&quot;System.Net.Http.HttpClient&quot;> </xref> wystąpienia."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "Żądanie nie powiodło się z powodu podstawowego problemu, takich jak łączność z siecią, błąd DNS, weryfikacji certyfikatu serwera lub limit czasu."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HttpClient.Dispose(Boolean)
  fullName: System.Net.Http.HttpClient.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Zwalnia zasoby niezarządzane używane przez <xref href=&quot;System.Net.Http.HttpClient&quot;> </xref> i opcjonalnie usuwa zarządzane zasoby."
  remarks: "Ta metoda jest wywoływana przez metodę publiczną `Dispose()` — metoda i <xref:System.Object.Finalize%2A>metody.</xref:System.Object.Finalize%2A> `Dispose()`wywołuje chronioną metodę `Dispose(Boolean)` metody z `disposing` ustawiono parametr `true`. <xref:System.Object.Finalize%2A>wywołuje `Dispose` z `disposing` ustawioną `false`.</xref:System.Object.Finalize%2A>       Gdy `disposing` parametr jest `true`, ta metoda zwalnia wszystkie zasoby zajmowane przez wszelkie obiekty zarządzane przez to <xref:System.Net.Http.HttpClient>odwołań.</xref:System.Net.Http.HttpClient> Ta metoda wywołuje `Dispose()` metody każdego odwołuje się do obiektu.       Gdy ta metoda jest wywoływana, <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A>Metoda jest wywoływana wszystkie oczekujące żądania przerwania.</xref:System.Net.Http.HttpClient.CancelPendingRequests%2A>"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby zwolnić zasoby zarządzane i niezarządzane; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> powoduje zwolnienie tylko niezarządzane zasoby."
  overload: System.Net.Http.HttpClient.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetAsync(System.String)
  id: GetAsync(System.String)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetAsync(String)
  nameWithType: HttpClient.GetAsync(String)
  fullName: System.Net.Http.HttpClient.GetAsync(String)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wyślij żądanie GET do określonego identyfikatora Uri jako operację asynchroniczną."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócona <xref:System.Threading.Tasks.Task%601>obiektu ukończy po całej odpowiedzi (w tym zawartości) jest do odczytu.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (string requestUri);
    parameters:
    - id: requestUri
      type: System.String
      description: "Identyfikator Uri żądania jest wysyłane."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.HttpClient.GetAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "Żądanie nie powiodło się z powodu podstawowego problemu, takich jak łączność z siecią, błąd DNS, weryfikacji certyfikatu serwera lub limit czasu."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri)
  id: GetAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetAsync(Uri)
  nameWithType: HttpClient.GetAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetAsync(Uri)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wyślij żądanie GET do określonego identyfikatora Uri jako operację asynchroniczną."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócona <xref:System.Threading.Tasks.Task%601>obiektu ukończy po całej odpowiedzi (w tym zawartości) jest do odczytu.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (Uri requestUri);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "Identyfikator Uri żądania jest wysyłane."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.HttpClient.GetAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "Żądanie nie powiodło się z powodu podstawowego problemu, takich jak łączność z siecią, błąd DNS, weryfikacji certyfikatu serwera lub limit czasu."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)
  id: GetAsync(System.String,System.Net.Http.HttpCompletionOption)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetAsync(String,HttpCompletionOption)
  nameWithType: HttpClient.GetAsync(String,HttpCompletionOption)
  fullName: System.Net.Http.HttpClient.GetAsync(String,HttpCompletionOption)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wyślij żądanie GET do określonego identyfikatora Uri z opcją zakończenia HTTP jako operację asynchroniczną."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócona <xref:System.Threading.Tasks.Task%601>obiekt zostanie ukończona, na podstawie `completionOption` parametru po części lub całej odpowiedzi (w tym zawartości) jest do odczytu.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (string requestUri, System.Net.Http.HttpCompletionOption completionOption);
    parameters:
    - id: requestUri
      type: System.String
      description: "Identyfikator Uri żądania jest wysyłane."
    - id: completionOption
      type: System.Net.Http.HttpCompletionOption
      description: "Wartość opcji ukończenia HTTP, która wskazuje, po operacji należy traktować jako zakończone."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.HttpClient.GetAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "Żądanie nie powiodło się z powodu podstawowego problemu, takich jak łączność z siecią, błąd DNS, weryfikacji certyfikatu serwera lub limit czasu."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)
  id: GetAsync(System.String,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetAsync(String,CancellationToken)
  nameWithType: HttpClient.GetAsync(String,CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(String,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wyślij żądanie GET do określonego identyfikatora Uri z tokenem anulowania jako operację asynchroniczną."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócona <xref:System.Threading.Tasks.Task%601>obiektu ukończy po całej odpowiedzi (w tym zawartości) jest do odczytu.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (string requestUri, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: requestUri
      type: System.String
      description: "Identyfikator Uri żądania jest wysyłane."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Token anulowania, używany przez inne obiekty lub wątki w celu odebrania powiadomienia o anulowaniu."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.HttpClient.GetAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "Żądanie nie powiodło się z powodu podstawowego problemu, takich jak łączność z siecią, błąd DNS, weryfikacji certyfikatu serwera lub limit czasu."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)
  id: GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetAsync(Uri,HttpCompletionOption)
  nameWithType: HttpClient.GetAsync(Uri,HttpCompletionOption)
  fullName: System.Net.Http.HttpClient.GetAsync(Uri,HttpCompletionOption)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wyślij żądanie GET do określonego identyfikatora Uri z opcją zakończenia HTTP jako operację asynchroniczną."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócona <xref:System.Threading.Tasks.Task%601>obiekt zostanie ukończona, na podstawie `completionOption` parametru po części lub całej odpowiedzi (w tym zawartości) jest do odczytu.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (Uri requestUri, System.Net.Http.HttpCompletionOption completionOption);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "Identyfikator Uri żądania jest wysyłane."
    - id: completionOption
      type: System.Net.Http.HttpCompletionOption
      description: "Wartość opcji ukończenia HTTP, która wskazuje, po operacji należy traktować jako zakończone."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.HttpClient.GetAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "Żądanie nie powiodło się z powodu podstawowego problemu, takich jak łączność z siecią, błąd DNS, weryfikacji certyfikatu serwera lub limit czasu."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)
  id: GetAsync(System.Uri,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetAsync(Uri,CancellationToken)
  nameWithType: HttpClient.GetAsync(Uri,CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(Uri,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wyślij żądanie GET do określonego identyfikatora Uri z tokenem anulowania jako operację asynchroniczną."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócona <xref:System.Threading.Tasks.Task%601>obiektu ukończy po całej odpowiedzi (w tym zawartości) jest do odczytu.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "Identyfikator Uri żądania jest wysyłane."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Token anulowania, używany przez inne obiekty lub wątki w celu odebrania powiadomienia o anulowaniu."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.HttpClient.GetAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "Żądanie nie powiodło się z powodu podstawowego problemu, takich jak łączność z siecią, błąd DNS, weryfikacji certyfikatu serwera lub limit czasu."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  id: GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetAsync(String,HttpCompletionOption,CancellationToken)
  nameWithType: HttpClient.GetAsync(String,HttpCompletionOption,CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(String,HttpCompletionOption,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wyślij żądanie GET do określonego identyfikatora Uri z opcją zakończenia HTTP i token anulowania jako operację asynchroniczną."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócona <xref:System.Threading.Tasks.Task%601>obiekt zostanie ukończona, na podstawie `completionOption` parametru po części lub całej odpowiedzi (w tym zawartości) jest do odczytu.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (string requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: requestUri
      type: System.String
      description: "Identyfikator Uri żądania jest wysyłane."
    - id: completionOption
      type: System.Net.Http.HttpCompletionOption
      description: "Wartość opcji ukończenia HTTP, która wskazuje, po operacji należy traktować jako zakończone."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Token anulowania, używany przez inne obiekty lub wątki w celu odebrania powiadomienia o anulowaniu."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.HttpClient.GetAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "Żądanie nie powiodło się z powodu podstawowego problemu, takich jak łączność z siecią, błąd DNS, weryfikacji certyfikatu serwera lub limit czasu."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  id: GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetAsync(Uri,HttpCompletionOption,CancellationToken)
  nameWithType: HttpClient.GetAsync(Uri,HttpCompletionOption,CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(Uri,HttpCompletionOption,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wyślij żądanie GET do określonego identyfikatora Uri z opcją zakończenia HTTP i token anulowania jako operację asynchroniczną."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócona <xref:System.Threading.Tasks.Task%601>obiekt zostanie ukończona, na podstawie `completionOption` parametru po części lub całej odpowiedzi (w tym zawartości) jest do odczytu.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (Uri requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "Identyfikator Uri żądania jest wysyłane."
    - id: completionOption
      type: System.Net.Http.HttpCompletionOption
      description: "Wartość opcji ukończenia HTTP, która wskazuje, po operacji należy traktować jako zakończone."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Token anulowania, używany przez inne obiekty lub wątki w celu odebrania powiadomienia o anulowaniu."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.HttpClient.GetAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "Żądanie nie powiodło się z powodu podstawowego problemu, takich jak łączność z siecią, błąd DNS, weryfikacji certyfikatu serwera lub limit czasu."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetByteArrayAsync(System.String)
  id: GetByteArrayAsync(System.String)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetByteArrayAsync(String)
  nameWithType: HttpClient.GetByteArrayAsync(String)
  fullName: System.Net.Http.HttpClient.GetByteArrayAsync(String)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wyślij żądanie GET do określonego identyfikatora Uri i zwracać treść odpowiedzi jako tablicę bajtów w operacji asynchronicznej."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócona <xref:System.Threading.Tasks.Task%601>obiektu ukończy po jest do odczytu treści odpowiedzi całego.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<byte[]> GetByteArrayAsync (string requestUri);
    parameters:
    - id: requestUri
      type: System.String
      description: "Identyfikator Uri żądania jest wysyłane."
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.HttpClient.GetByteArrayAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "Żądanie nie powiodło się z powodu podstawowego problemu, takich jak łączność z siecią, błąd DNS, weryfikacji certyfikatu serwera lub limit czasu."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)
  id: GetByteArrayAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetByteArrayAsync(Uri)
  nameWithType: HttpClient.GetByteArrayAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetByteArrayAsync(Uri)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wyślij żądanie GET do określonego identyfikatora Uri i zwracać treść odpowiedzi jako tablicę bajtów w operacji asynchronicznej."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócona <xref:System.Threading.Tasks.Task%601>obiektu ukończy po jest do odczytu treści odpowiedzi całego.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<byte[]> GetByteArrayAsync (Uri requestUri);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "Identyfikator Uri żądania jest wysyłane."
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.HttpClient.GetByteArrayAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "Żądanie nie powiodło się z powodu podstawowego problemu, takich jak łączność z siecią, błąd DNS, weryfikacji certyfikatu serwera lub limit czasu."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetStreamAsync(System.String)
  id: GetStreamAsync(System.String)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetStreamAsync(String)
  nameWithType: HttpClient.GetStreamAsync(String)
  fullName: System.Net.Http.HttpClient.GetStreamAsync(String)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wyślij żądanie GET do określonego identyfikatora Uri i zwróć treść odpowiedzi jako strumień w operacji asynchronicznej."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócona <xref:System.Threading.Tasks.Task%601>obiektu ukończy po jest do odczytu treści odpowiedzi całego.</xref:System.Threading.Tasks.Task%601> Ta metoda nie zapewnia buforowania strumienia."
  syntax:
    content: public System.Threading.Tasks.Task<System.IO.Stream> GetStreamAsync (string requestUri);
    parameters:
    - id: requestUri
      type: System.String
      description: "Identyfikator Uri żądania jest wysyłane."
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.HttpClient.GetStreamAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "Żądanie nie powiodło się z powodu podstawowego problemu, takich jak łączność z siecią, błąd DNS, weryfikacji certyfikatu serwera lub limit czasu."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetStreamAsync(System.Uri)
  id: GetStreamAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetStreamAsync(Uri)
  nameWithType: HttpClient.GetStreamAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetStreamAsync(Uri)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wyślij żądanie GET do określonego identyfikatora Uri i zwróć treść odpowiedzi jako strumień w operacji asynchronicznej."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócona <xref:System.Threading.Tasks.Task%601>obiektu ukończy po jest do odczytu treści odpowiedzi całego.</xref:System.Threading.Tasks.Task%601> Ta metoda nie zapewnia buforowania strumienia."
  syntax:
    content: public System.Threading.Tasks.Task<System.IO.Stream> GetStreamAsync (Uri requestUri);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "Identyfikator Uri żądania jest wysyłane."
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.HttpClient.GetStreamAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "Żądanie nie powiodło się z powodu podstawowego problemu, takich jak łączność z siecią, błąd DNS, weryfikacji certyfikatu serwera lub limit czasu."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetStringAsync(System.String)
  id: GetStringAsync(System.String)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetStringAsync(String)
  nameWithType: HttpClient.GetStringAsync(String)
  fullName: System.Net.Http.HttpClient.GetStringAsync(String)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wyślij żądanie GET do określonego identyfikatora Uri i zwróć treść odpowiedzi jako ciąg w operacji asynchronicznej."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócona <xref:System.Threading.Tasks.Task%601>obiektu ukończy po jest do odczytu treści odpowiedzi całego.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<string> GetStringAsync (string requestUri);
    parameters:
    - id: requestUri
      type: System.String
      description: "Identyfikator Uri żądania jest wysyłane."
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.HttpClient.GetStringAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "Żądanie nie powiodło się z powodu podstawowego problemu, takich jak łączność z siecią, błąd DNS, weryfikacji certyfikatu serwera lub limit czasu."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetStringAsync(System.Uri)
  id: GetStringAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetStringAsync(Uri)
  nameWithType: HttpClient.GetStringAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetStringAsync(Uri)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wyślij żądanie GET do określonego identyfikatora Uri i zwróć treść odpowiedzi jako ciąg w operacji asynchronicznej."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócona <xref:System.Threading.Tasks.Task%601>obiektu ukończy po jest do odczytu treści odpowiedzi całego.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<string> GetStringAsync (Uri requestUri);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "Identyfikator Uri żądania jest wysyłane."
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.HttpClient.GetStringAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "Żądanie nie powiodło się z powodu podstawowego problemu, takich jak łączność z siecią, błąd DNS, weryfikacji certyfikatu serwera lub limit czasu."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.MaxResponseContentBufferSize
  id: MaxResponseContentBufferSize
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: MaxResponseContentBufferSize
  nameWithType: HttpClient.MaxResponseContentBufferSize
  fullName: System.Net.Http.HttpClient.MaxResponseContentBufferSize
  type: Property
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Pobiera lub ustawia maksymalną liczbę bajtów do zbuforowania podczas odczytywania zawartości odpowiedzi."
  remarks: "Aplikację można ustawić właściwości MaxResponseContentBufferSize niższa wartość limit rozmiaru odpowiedzi do zbuforowania podczas odczytywania odpowiedzi. Jeśli rozmiar zawartości odpowiedzi jest większa niż wartość właściwości MaxResponseContentBufferSize, jest zwracany wyjątek."
  syntax:
    content: public long MaxResponseContentBufferSize { get; set; }
    return:
      type: System.Int64
      description: "Maksymalna liczba bajtów do zbuforowania podczas odczytywania zawartości odpowiedzi. Wartość domyślna dla tej właściwości to 2 gigabajty."
  overload: System.Net.Http.HttpClient.MaxResponseContentBufferSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Określony rozmiar jest mniejszy niż lub równy zero."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Operacja została już uruchomiona w bieżącym wystąpieniu."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Bieżące wystąpienie zostało usunięte."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)
  id: PostAsync(System.String,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: PostAsync(String,HttpContent)
  nameWithType: HttpClient.PostAsync(String,HttpContent)
  fullName: System.Net.Http.HttpClient.PostAsync(String,HttpContent)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wyślij żądanie POST na określony identyfikator URI jako operację asynchroniczną."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócona <xref:System.Threading.Tasks.Task%601>obiektu ukończy po całej odpowiedzi (w tym zawartości) jest do odczytu.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsync (string requestUri, System.Net.Http.HttpContent content);
    parameters:
    - id: requestUri
      type: System.String
      description: "Identyfikator Uri żądania jest wysyłane."
    - id: content
      type: System.Net.Http.HttpContent
      description: "Zawartość żądania HTTP wysyłane do serwera."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.HttpClient.PostAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "Żądanie nie powiodło się z powodu podstawowego problemu, takich jak łączność z siecią, błąd DNS, weryfikacji certyfikatu serwera lub limit czasu."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)
  id: PostAsync(System.Uri,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: PostAsync(Uri,HttpContent)
  nameWithType: HttpClient.PostAsync(Uri,HttpContent)
  fullName: System.Net.Http.HttpClient.PostAsync(Uri,HttpContent)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wyślij żądanie POST na określony identyfikator URI jako operację asynchroniczną."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócona <xref:System.Threading.Tasks.Task%601>obiektu ukończy po całej odpowiedzi (w tym zawartości) jest do odczytu.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsync (Uri requestUri, System.Net.Http.HttpContent content);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "Identyfikator Uri żądania jest wysyłane."
    - id: content
      type: System.Net.Http.HttpContent
      description: "Zawartość żądania HTTP wysyłane do serwera."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.HttpClient.PostAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "Żądanie nie powiodło się z powodu podstawowego problemu, takich jak łączność z siecią, błąd DNS, weryfikacji certyfikatu serwera lub limit czasu."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  id: PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: PostAsync(String,HttpContent,CancellationToken)
  nameWithType: HttpClient.PostAsync(String,HttpContent,CancellationToken)
  fullName: System.Net.Http.HttpClient.PostAsync(String,HttpContent,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wysłanie żądania POST do tokena anulowania jako operację asynchroniczną."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócona <xref:System.Threading.Tasks.Task%601>obiektu ukończy po całej odpowiedzi (w tym zawartości) jest do odczytu.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: requestUri
      type: System.String
      description: "Identyfikator Uri żądania jest wysyłane."
    - id: content
      type: System.Net.Http.HttpContent
      description: "Zawartość żądania HTTP wysyłane do serwera."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Token anulowania, używany przez inne obiekty lub wątki w celu odebrania powiadomienia o anulowaniu."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.HttpClient.PostAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "Żądanie nie powiodło się z powodu podstawowego problemu, takich jak łączność z siecią, błąd DNS, weryfikacji certyfikatu serwera lub limit czasu."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  id: PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: PostAsync(Uri,HttpContent,CancellationToken)
  nameWithType: HttpClient.PostAsync(Uri,HttpContent,CancellationToken)
  fullName: System.Net.Http.HttpClient.PostAsync(Uri,HttpContent,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wysłanie żądania POST do tokena anulowania jako operację asynchroniczną."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócona <xref:System.Threading.Tasks.Task%601>obiektu ukończy po całej odpowiedzi (w tym zawartości) jest do odczytu.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "Identyfikator Uri żądania jest wysyłane."
    - id: content
      type: System.Net.Http.HttpContent
      description: "Zawartość żądania HTTP wysyłane do serwera."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Token anulowania, używany przez inne obiekty lub wątki w celu odebrania powiadomienia o anulowaniu."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.HttpClient.PostAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "Żądanie nie powiodło się z powodu podstawowego problemu, takich jak łączność z siecią, błąd DNS, weryfikacji certyfikatu serwera lub limit czasu."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)
  id: PutAsync(System.String,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: PutAsync(String,HttpContent)
  nameWithType: HttpClient.PutAsync(String,HttpContent)
  fullName: System.Net.Http.HttpClient.PutAsync(String,HttpContent)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wyślij żądanie PUT do określonego identyfikatora Uri jako operację asynchroniczną."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócona <xref:System.Threading.Tasks.Task%601>obiektu ukończy po całej odpowiedzi (w tym zawartości) jest do odczytu.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsync (string requestUri, System.Net.Http.HttpContent content);
    parameters:
    - id: requestUri
      type: System.String
      description: "Identyfikator Uri żądania jest wysyłane."
    - id: content
      type: System.Net.Http.HttpContent
      description: "Zawartość żądania HTTP wysyłane do serwera."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.HttpClient.PutAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "Żądanie nie powiodło się z powodu podstawowego problemu, takich jak łączność z siecią, błąd DNS, weryfikacji certyfikatu serwera lub limit czasu."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)
  id: PutAsync(System.Uri,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: PutAsync(Uri,HttpContent)
  nameWithType: HttpClient.PutAsync(Uri,HttpContent)
  fullName: System.Net.Http.HttpClient.PutAsync(Uri,HttpContent)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wyślij żądanie PUT do określonego identyfikatora Uri jako operację asynchroniczną."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócona <xref:System.Threading.Tasks.Task%601>obiektu ukończy po całej odpowiedzi (w tym zawartości) jest do odczytu.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsync (Uri requestUri, System.Net.Http.HttpContent content);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "Identyfikator Uri żądania jest wysyłane."
    - id: content
      type: System.Net.Http.HttpContent
      description: "Zawartość żądania HTTP wysyłane do serwera."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.HttpClient.PutAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "Żądanie nie powiodło się z powodu podstawowego problemu, takich jak łączność z siecią, błąd DNS, weryfikacji certyfikatu serwera lub limit czasu."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  id: PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: PutAsync(String,HttpContent,CancellationToken)
  nameWithType: HttpClient.PutAsync(String,HttpContent,CancellationToken)
  fullName: System.Net.Http.HttpClient.PutAsync(String,HttpContent,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wyślij żądanie PUT z tokenem anulowania jako operację asynchroniczną."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócona <xref:System.Threading.Tasks.Task%601>obiektu ukończy po całej odpowiedzi (w tym zawartości) jest do odczytu.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: requestUri
      type: System.String
      description: "Identyfikator Uri żądania jest wysyłane."
    - id: content
      type: System.Net.Http.HttpContent
      description: "Zawartość żądania HTTP wysyłane do serwera."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Token anulowania, używany przez inne obiekty lub wątki w celu odebrania powiadomienia o anulowaniu."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.HttpClient.PutAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "Żądanie nie powiodło się z powodu podstawowego problemu, takich jak łączność z siecią, błąd DNS, weryfikacji certyfikatu serwera lub limit czasu."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  id: PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: PutAsync(Uri,HttpContent,CancellationToken)
  nameWithType: HttpClient.PutAsync(Uri,HttpContent,CancellationToken)
  fullName: System.Net.Http.HttpClient.PutAsync(Uri,HttpContent,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wyślij żądanie PUT z tokenem anulowania jako operację asynchroniczną."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócona <xref:System.Threading.Tasks.Task%601>obiektu ukończy po całej odpowiedzi (w tym zawartości) jest do odczytu.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "Identyfikator Uri żądania jest wysyłane."
    - id: content
      type: System.Net.Http.HttpContent
      description: "Zawartość żądania HTTP wysyłane do serwera."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Token anulowania, używany przez inne obiekty lub wątki w celu odebrania powiadomienia o anulowaniu."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.HttpClient.PutAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "Żądanie nie powiodło się z powodu podstawowego problemu, takich jak łączność z siecią, błąd DNS, weryfikacji certyfikatu serwera lub limit czasu."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)
  id: SendAsync(System.Net.Http.HttpRequestMessage)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: SendAsync(HttpRequestMessage)
  nameWithType: HttpClient.SendAsync(HttpRequestMessage)
  fullName: System.Net.Http.HttpClient.SendAsync(HttpRequestMessage)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wyślij żądanie HTTP jako operację asynchroniczną."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócona <xref:System.Threading.Tasks.Task%601>obiektu ukończy po całej odpowiedzi, w tym do zawartości jest do odczytu.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request);
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "Komunikat żądania HTTP do wysłania."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.HttpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>request</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Komunikat żądania została już wysłana przez <xref href=&quot;System.Net.Http.HttpClient&quot;> </xref> wystąpienia."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "Żądanie nie powiodło się z powodu podstawowego problemu, takich jak łączność z siecią, błąd DNS, weryfikacji certyfikatu serwera lub limit czasu."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: SendAsync(HttpRequestMessage,HttpCompletionOption)
  nameWithType: HttpClient.SendAsync(HttpRequestMessage,HttpCompletionOption)
  fullName: System.Net.Http.HttpClient.SendAsync(HttpRequestMessage,HttpCompletionOption)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wyślij żądanie HTTP jako operację asynchroniczną."
  remarks: "Ta operacja nie powoduje blokowania. W zależności od wartości `completionOption` parametr, zwracana <xref:System.Threading.Tasks.Task%601>obiektu zakończy się natychmiast odpowiedzi jest dostępna lub całej odpowiedzi, w tym do zawartości jest do odczytu.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption);
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "Komunikat żądania HTTP do wysłania."
    - id: completionOption
      type: System.Net.Http.HttpCompletionOption
      description: "Operacja powinna po zakończeniu (jak odpowiedzi jest dostępna lub po odczytaniu całej odpowiedzi zawartości)."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.HttpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>request</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Komunikat żądania została już wysłana przez <xref href=&quot;System.Net.Http.HttpClient&quot;> </xref> wystąpienia."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "Żądanie nie powiodło się z powodu podstawowego problemu, takich jak łączność z siecią, błąd DNS, weryfikacji certyfikatu serwera lub limit czasu."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: HttpClient.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.HttpClient.SendAsync(HttpRequestMessage,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wyślij żądanie HTTP jako operację asynchroniczną."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócona <xref:System.Threading.Tasks.Task%601>obiektu ukończy po całej odpowiedzi, w tym do zawartości jest do odczytu.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public override System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "Komunikat żądania HTTP do wysłania."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Token anulowania do anulowania operacji."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.HttpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>request</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Komunikat żądania została już wysłana przez <xref href=&quot;System.Net.Http.HttpClient&quot;> </xref> wystąpienia."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "Żądanie nie powiodło się z powodu podstawowego problemu, takich jak łączność z siecią, błąd DNS, weryfikacji certyfikatu serwera lub limit czasu."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: SendAsync(HttpRequestMessage,HttpCompletionOption,CancellationToken)
  nameWithType: HttpClient.SendAsync(HttpRequestMessage,HttpCompletionOption,CancellationToken)
  fullName: System.Net.Http.HttpClient.SendAsync(HttpRequestMessage,HttpCompletionOption,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wyślij żądanie HTTP jako operację asynchroniczną."
  remarks: "Ta operacja nie powoduje blokowania. W zależności od wartości `completionOption` parametr, zwracana <xref:System.Threading.Tasks.Task%601>obiektu zakończy się natychmiast odpowiedzi jest dostępna lub całej odpowiedzi, w tym do zawartości jest do odczytu.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "Komunikat żądania HTTP do wysłania."
    - id: completionOption
      type: System.Net.Http.HttpCompletionOption
      description: "Operacja powinna po zakończeniu (jak odpowiedzi jest dostępna lub po odczytaniu całej odpowiedzi zawartości)."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Token anulowania do anulowania operacji."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.HttpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>request</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Komunikat żądania została już wysłana przez <xref href=&quot;System.Net.Http.HttpClient&quot;> </xref> wystąpienia."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "Żądanie nie powiodło się z powodu podstawowego problemu, takich jak łączność z siecią, błąd DNS, weryfikacji certyfikatu serwera lub limit czasu."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.Timeout
  id: Timeout
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: Timeout
  nameWithType: HttpClient.Timeout
  fullName: System.Net.Http.HttpClient.Timeout
  type: Property
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Pobiera lub ustawia zakres czasu oczekiwania zanim upłynie limit czasu żądania."
  remarks: "Wartość domyślna to 100 000 milisekund (100 sekund).       Aby skonfigurować nieskończonego limitu czasu, należy ustawić wartość właściwości <xref:System.Threading.Timeout.InfiniteTimeSpan>.</xref:System.Threading.Timeout.InfiniteTimeSpan>       Zapytanie systemu nazw domen (DNS, Domain Name System) może potrwać do 15 sekund do zwrócenia lub upłynął limit czasu. Jeśli żądanie zawiera nazwę hosta, która wymaga rozpoznawania i można ustawić limitu czasu na wartość mniej niż 15 sekund, może to zająć 15 sekund lub więcej przed <xref:System.Net.WebException>jest generowany, aby wskazać limitu czasu na żądanie.</xref:System.Net.WebException>       Tym samym limitu czasu zostaną zastosowane dla wszystkich żądań za pomocą tej <xref:System.Net.Http.HttpClient>wystąpienia.</xref:System.Net.Http.HttpClient>  Można również ustawić inny limitów czasu dla poszczególnych żądań przy użyciu <xref:System.Threading.CancellationTokenSource>dla zadania.</xref:System.Threading.CancellationTokenSource> Należy pamiętać, że tylko krótszą przekroczeń dwóch będą stosowane."
  syntax:
    content: public TimeSpan Timeout { get; set; }
    return:
      type: System.TimeSpan
      description: "Zakres czasu oczekiwania przed żądania upłynie limit czasu."
  overload: System.Net.Http.HttpClient.Timeout*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Określony limit czasu jest mniejsza lub równa zero, a nie <xref:System.Threading.Timeout.InfiniteTimeSpan>.</xref:System.Threading.Timeout.InfiniteTimeSpan>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Operacja została już uruchomiona w bieżącym wystąpieniu."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Bieżące wystąpienie zostało usunięte."
  platform:
  - net462
references:
- uid: System.Net.Http.HttpMessageInvoker
  isExternal: false
  name: System.Net.Http.HttpMessageInvoker
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Net.Http.HttpRequestException
  parent: System.Net.Http
  isExternal: false
  name: HttpRequestException
  nameWithType: HttpRequestException
  fullName: System.Net.Http.HttpRequestException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.Net.Http.HttpClient.#ctor
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: HttpClient()
  nameWithType: HttpClient.HttpClient()
  fullName: System.Net.Http.HttpClient.HttpClient()
- uid: System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: HttpClient(HttpMessageHandler)
  nameWithType: HttpClient.HttpClient(HttpMessageHandler)
  fullName: System.Net.Http.HttpClient.HttpClient(HttpMessageHandler)
- uid: System.Net.Http.HttpMessageHandler
  parent: System.Net.Http
  isExternal: false
  name: HttpMessageHandler
  nameWithType: HttpMessageHandler
  fullName: System.Net.Http.HttpMessageHandler
- uid: System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: HttpClient(HttpMessageHandler,Boolean)
  nameWithType: HttpClient.HttpClient(HttpMessageHandler,Boolean)
  fullName: System.Net.Http.HttpClient.HttpClient(HttpMessageHandler,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Http.HttpClient.BaseAddress
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: BaseAddress
  nameWithType: HttpClient.BaseAddress
  fullName: System.Net.Http.HttpClient.BaseAddress
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Net.Http.HttpClient.CancelPendingRequests
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: CancelPendingRequests()
  nameWithType: HttpClient.CancelPendingRequests()
  fullName: System.Net.Http.HttpClient.CancelPendingRequests()
- uid: System.Net.Http.HttpClient.DefaultRequestHeaders
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: DefaultRequestHeaders
  nameWithType: HttpClient.DefaultRequestHeaders
  fullName: System.Net.Http.HttpClient.DefaultRequestHeaders
- uid: System.Net.Http.Headers.HttpRequestHeaders
  parent: System.Net.Http.Headers
  isExternal: false
  name: HttpRequestHeaders
  nameWithType: HttpRequestHeaders
  fullName: System.Net.Http.Headers.HttpRequestHeaders
- uid: System.Net.Http.HttpClient.DeleteAsync(System.String)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: DeleteAsync(String)
  nameWithType: HttpClient.DeleteAsync(String)
  fullName: System.Net.Http.HttpClient.DeleteAsync(String)
- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<HttpResponseMessage>
  nameWithType: Task<HttpResponseMessage>
  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.Http.HttpResponseMessage>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: HttpResponseMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.Http.HttpClient.DeleteAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: DeleteAsync(Uri)
  nameWithType: HttpClient.DeleteAsync(Uri)
  fullName: System.Net.Http.HttpClient.DeleteAsync(Uri)
- uid: System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: DeleteAsync(String,CancellationToken)
  nameWithType: HttpClient.DeleteAsync(String,CancellationToken)
  fullName: System.Net.Http.HttpClient.DeleteAsync(String,CancellationToken)
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: DeleteAsync(Uri,CancellationToken)
  nameWithType: HttpClient.DeleteAsync(Uri,CancellationToken)
  fullName: System.Net.Http.HttpClient.DeleteAsync(Uri,CancellationToken)
- uid: System.Net.Http.HttpClient.Dispose(System.Boolean)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HttpClient.Dispose(Boolean)
  fullName: System.Net.Http.HttpClient.Dispose(Boolean)
- uid: System.Net.Http.HttpClient.GetAsync(System.String)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetAsync(String)
  nameWithType: HttpClient.GetAsync(String)
  fullName: System.Net.Http.HttpClient.GetAsync(String)
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetAsync(Uri)
  nameWithType: HttpClient.GetAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetAsync(Uri)
- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetAsync(String,HttpCompletionOption)
  nameWithType: HttpClient.GetAsync(String,HttpCompletionOption)
  fullName: System.Net.Http.HttpClient.GetAsync(String,HttpCompletionOption)
- uid: System.Net.Http.HttpCompletionOption
  parent: System.Net.Http
  isExternal: false
  name: HttpCompletionOption
  nameWithType: HttpCompletionOption
  fullName: System.Net.Http.HttpCompletionOption
- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetAsync(String,CancellationToken)
  nameWithType: HttpClient.GetAsync(String,CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(String,CancellationToken)
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetAsync(Uri,HttpCompletionOption)
  nameWithType: HttpClient.GetAsync(Uri,HttpCompletionOption)
  fullName: System.Net.Http.HttpClient.GetAsync(Uri,HttpCompletionOption)
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetAsync(Uri,CancellationToken)
  nameWithType: HttpClient.GetAsync(Uri,CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(Uri,CancellationToken)
- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetAsync(String,HttpCompletionOption,CancellationToken)
  nameWithType: HttpClient.GetAsync(String,HttpCompletionOption,CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(String,HttpCompletionOption,CancellationToken)
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetAsync(Uri,HttpCompletionOption,CancellationToken)
  nameWithType: HttpClient.GetAsync(Uri,HttpCompletionOption,CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(Uri,HttpCompletionOption,CancellationToken)
- uid: System.Net.Http.HttpClient.GetByteArrayAsync(System.String)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetByteArrayAsync(String)
  nameWithType: HttpClient.GetByteArrayAsync(String)
  fullName: System.Net.Http.HttpClient.GetByteArrayAsync(String)
- uid: System.Threading.Tasks.Task{System.Byte[]}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Byte>
  nameWithType: Task<Byte>
  fullName: System.Threading.Tasks.Task<System.Byte[]>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Byte[]>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetByteArrayAsync(Uri)
  nameWithType: HttpClient.GetByteArrayAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetByteArrayAsync(Uri)
- uid: System.Net.Http.HttpClient.GetStreamAsync(System.String)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetStreamAsync(String)
  nameWithType: HttpClient.GetStreamAsync(String)
  fullName: System.Net.Http.HttpClient.GetStreamAsync(String)
- uid: System.Threading.Tasks.Task{System.IO.Stream}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Stream>
  nameWithType: Task<Stream>
  fullName: System.Threading.Tasks.Task<System.IO.Stream>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.IO.Stream>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: Stream
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpClient.GetStreamAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetStreamAsync(Uri)
  nameWithType: HttpClient.GetStreamAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetStreamAsync(Uri)
- uid: System.Net.Http.HttpClient.GetStringAsync(System.String)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetStringAsync(String)
  nameWithType: HttpClient.GetStringAsync(String)
  fullName: System.Net.Http.HttpClient.GetStringAsync(String)
- uid: System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpClient.GetStringAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetStringAsync(Uri)
  nameWithType: HttpClient.GetStringAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetStringAsync(Uri)
- uid: System.Net.Http.HttpClient.MaxResponseContentBufferSize
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: MaxResponseContentBufferSize
  nameWithType: HttpClient.MaxResponseContentBufferSize
  fullName: System.Net.Http.HttpClient.MaxResponseContentBufferSize
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: PostAsync(String,HttpContent)
  nameWithType: HttpClient.PostAsync(String,HttpContent)
  fullName: System.Net.Http.HttpClient.PostAsync(String,HttpContent)
- uid: System.Net.Http.HttpContent
  parent: System.Net.Http
  isExternal: false
  name: HttpContent
  nameWithType: HttpContent
  fullName: System.Net.Http.HttpContent
- uid: System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: PostAsync(Uri,HttpContent)
  nameWithType: HttpClient.PostAsync(Uri,HttpContent)
  fullName: System.Net.Http.HttpClient.PostAsync(Uri,HttpContent)
- uid: System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: PostAsync(String,HttpContent,CancellationToken)
  nameWithType: HttpClient.PostAsync(String,HttpContent,CancellationToken)
  fullName: System.Net.Http.HttpClient.PostAsync(String,HttpContent,CancellationToken)
- uid: System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: PostAsync(Uri,HttpContent,CancellationToken)
  nameWithType: HttpClient.PostAsync(Uri,HttpContent,CancellationToken)
  fullName: System.Net.Http.HttpClient.PostAsync(Uri,HttpContent,CancellationToken)
- uid: System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: PutAsync(String,HttpContent)
  nameWithType: HttpClient.PutAsync(String,HttpContent)
  fullName: System.Net.Http.HttpClient.PutAsync(String,HttpContent)
- uid: System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: PutAsync(Uri,HttpContent)
  nameWithType: HttpClient.PutAsync(Uri,HttpContent)
  fullName: System.Net.Http.HttpClient.PutAsync(Uri,HttpContent)
- uid: System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: PutAsync(String,HttpContent,CancellationToken)
  nameWithType: HttpClient.PutAsync(String,HttpContent,CancellationToken)
  fullName: System.Net.Http.HttpClient.PutAsync(String,HttpContent,CancellationToken)
- uid: System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: PutAsync(Uri,HttpContent,CancellationToken)
  nameWithType: HttpClient.PutAsync(Uri,HttpContent,CancellationToken)
  fullName: System.Net.Http.HttpClient.PutAsync(Uri,HttpContent,CancellationToken)
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: SendAsync(HttpRequestMessage)
  nameWithType: HttpClient.SendAsync(HttpRequestMessage)
  fullName: System.Net.Http.HttpClient.SendAsync(HttpRequestMessage)
- uid: System.Net.Http.HttpRequestMessage
  parent: System.Net.Http
  isExternal: false
  name: HttpRequestMessage
  nameWithType: HttpRequestMessage
  fullName: System.Net.Http.HttpRequestMessage
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: SendAsync(HttpRequestMessage,HttpCompletionOption)
  nameWithType: HttpClient.SendAsync(HttpRequestMessage,HttpCompletionOption)
  fullName: System.Net.Http.HttpClient.SendAsync(HttpRequestMessage,HttpCompletionOption)
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: HttpClient.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.HttpClient.SendAsync(HttpRequestMessage,CancellationToken)
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: SendAsync(HttpRequestMessage,HttpCompletionOption,CancellationToken)
  nameWithType: HttpClient.SendAsync(HttpRequestMessage,HttpCompletionOption,CancellationToken)
  fullName: System.Net.Http.HttpClient.SendAsync(HttpRequestMessage,HttpCompletionOption,CancellationToken)
- uid: System.Net.Http.HttpClient.Timeout
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: Timeout
  nameWithType: HttpClient.Timeout
  fullName: System.Net.Http.HttpClient.Timeout
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Net.Http.HttpClient.#ctor*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: HttpClient
  nameWithType: HttpClient.HttpClient
- uid: System.Net.Http.HttpClient.BaseAddress*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: BaseAddress
  nameWithType: HttpClient.BaseAddress
- uid: System.Net.Http.HttpClient.CancelPendingRequests*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: CancelPendingRequests
  nameWithType: HttpClient.CancelPendingRequests
- uid: System.Net.Http.HttpClient.DefaultRequestHeaders*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: DefaultRequestHeaders
  nameWithType: HttpClient.DefaultRequestHeaders
- uid: System.Net.Http.HttpClient.DeleteAsync*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: DeleteAsync
  nameWithType: HttpClient.DeleteAsync
- uid: System.Net.Http.HttpClient.Dispose*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: Dispose
  nameWithType: HttpClient.Dispose
- uid: System.Net.Http.HttpClient.GetAsync*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetAsync
  nameWithType: HttpClient.GetAsync
- uid: System.Net.Http.HttpClient.GetByteArrayAsync*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetByteArrayAsync
  nameWithType: HttpClient.GetByteArrayAsync
- uid: System.Net.Http.HttpClient.GetStreamAsync*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetStreamAsync
  nameWithType: HttpClient.GetStreamAsync
- uid: System.Net.Http.HttpClient.GetStringAsync*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetStringAsync
  nameWithType: HttpClient.GetStringAsync
- uid: System.Net.Http.HttpClient.MaxResponseContentBufferSize*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: MaxResponseContentBufferSize
  nameWithType: HttpClient.MaxResponseContentBufferSize
- uid: System.Net.Http.HttpClient.PostAsync*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: PostAsync
  nameWithType: HttpClient.PostAsync
- uid: System.Net.Http.HttpClient.PutAsync*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: PutAsync
  nameWithType: HttpClient.PutAsync
- uid: System.Net.Http.HttpClient.SendAsync*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: SendAsync
  nameWithType: HttpClient.SendAsync
- uid: System.Net.Http.HttpClient.Timeout*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: Timeout
  nameWithType: HttpClient.Timeout
