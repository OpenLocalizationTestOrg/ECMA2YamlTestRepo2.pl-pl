### YamlMime:ManagedReference
items:
- uid: System.Messaging.AccessControlList
  id: AccessControlList
  children:
  - System.Messaging.AccessControlList.#ctor
  - System.Messaging.AccessControlList.Add(System.Messaging.AccessControlEntry)
  - System.Messaging.AccessControlList.Contains(System.Messaging.AccessControlEntry)
  - System.Messaging.AccessControlList.CopyTo(System.Messaging.AccessControlEntry[],System.Int32)
  - System.Messaging.AccessControlList.IndexOf(System.Messaging.AccessControlEntry)
  - System.Messaging.AccessControlList.Insert(System.Int32,System.Messaging.AccessControlEntry)
  - System.Messaging.AccessControlList.Remove(System.Messaging.AccessControlEntry)
  langs:
  - csharp
  name: AccessControlList
  nameWithType: AccessControlList
  fullName: System.Messaging.AccessControlList
  type: Class
  summary: "Zawiera listę wpisów kontroli dostępu, określając praw dostępu dla jednego lub więcej stron zaufanych."
  remarks: "Aby określić wiele stron zaufanych, a prawa do dodawania przy użyciu jednego wywołania podczas ustawiania uprawnień dostępu, należy użyć klasy AccessControlList. Listy kontroli dostępu należy utworzyć przez dodanie wpisu kontroli dostępu dla każdego zarządca i kombinacji praw dostępu.       AccessControlList identyfikuje stron zaufanych, które ma być dozwolony lub odmówiono dostępu do obiektu zabezpieczanego. Gdy proces podejmie próbę uzyskania dostępu do obiektu zabezpieczanego, system sprawdza wpisów kontroli dostępu w obiektu listy kontroli dostępu do określenia, czy udzielić dostępu do niego. Jeśli obiekt nie ma listy kontroli dostępu, system daje pełny dostęp do wszystkich składników. Jeśli lista kontroli dostępu do obiektu nie ma żadnych wpisów, systemu nie zezwala na wszystkie próby dostępu do tego obiektu.       System sprawdza wpisów kontroli dostępu w sekwencji, aż do odnalezienia co najmniej jednego, umożliwiająca wszystkie prawa dostępu do żądanego lub żadnych praw dostępu do żądanego odmowa dostępu.       System sprawdza, czy każdy <xref:System.Messaging.AccessControlEntry>w sekwencji, dopóki nie wystąpi jedno z następujących zdarzeń: — odmowa dostępu <xref:System.Messaging.AccessControlEntry>wyraźnie zabrania żadnych praw żądany dostęp do jednej z stron zaufanych, wymienione w wątku tokenu dostępu.</xref:System.Messaging.AccessControlEntry> </xref:System.Messaging.AccessControlEntry>      -Co najmniej jeden dostępu dozwolone <xref:System.Messaging.AccessControlEntry>elementów dla stron zaufanych, jawnie wymieniony w tokenie dostępu wątku przyznać prawa dostępu do żądanego.</xref:System.Messaging.AccessControlEntry>      -Wszystkie <xref:System.Messaging.AccessControlEntry>elementy zostały sprawdzone i jest nadal co najmniej jeden żądanego prawo dostępu, który nie został jawnie zezwolił, w takim przypadku niejawnie odmowa dostępu.</xref:System.Messaging.AccessControlEntry>"
  syntax:
    content: 'public class AccessControlList : System.Collections.CollectionBase'
  inheritance:
  - System.Object
  - System.Collections.CollectionBase
  implements: []
  inheritedMembers:
  - System.Collections.CollectionBase.Capacity
  - System.Collections.CollectionBase.Clear
  - System.Collections.CollectionBase.Count
  - System.Collections.CollectionBase.GetEnumerator
  - System.Collections.CollectionBase.InnerList
  - System.Collections.CollectionBase.List
  - System.Collections.CollectionBase.OnClear
  - System.Collections.CollectionBase.OnClearComplete
  - System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
  - System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)
  - System.Collections.CollectionBase.OnValidate(System.Object)
  - System.Collections.CollectionBase.RemoveAt(System.Int32)
  - System.Collections.CollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized
  - System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot
  - System.Collections.CollectionBase.System#Collections#IList#Add(System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#Contains(System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#IsFixedSize
  - System.Collections.CollectionBase.System#Collections#IList#IsReadOnly
  - System.Collections.CollectionBase.System#Collections#IList#Item(System.Int32)
  - System.Collections.CollectionBase.System#Collections#IList#Remove(System.Object)
  platform:
  - net462
- uid: System.Messaging.AccessControlList.#ctor
  id: '#ctor'
  parent: System.Messaging.AccessControlList
  langs:
  - csharp
  name: AccessControlList()
  nameWithType: AccessControlList.AccessControlList()
  fullName: System.Messaging.AccessControlList.AccessControlList()
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Messaging.AccessControlList&quot;> </xref> klasy."
  syntax:
    content: public AccessControlList ();
    parameters: []
  overload: System.Messaging.AccessControlList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.AccessControlList.Add(System.Messaging.AccessControlEntry)
  id: Add(System.Messaging.AccessControlEntry)
  parent: System.Messaging.AccessControlList
  langs:
  - csharp
  name: Add(AccessControlEntry)
  nameWithType: AccessControlList.Add(AccessControlEntry)
  fullName: System.Messaging.AccessControlList.Add(AccessControlEntry)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Dołącza wpisu kontroli dostępu do listy kontroli dostępu."
  syntax:
    content: public int Add (System.Messaging.AccessControlEntry entry);
    parameters:
    - id: entry
      type: System.Messaging.AccessControlEntry
      description: "A <xref href=&quot;System.Messaging.AccessControlEntry&quot;> </xref> do dołączenia do końca listy kontroli dostępu."
    return:
      type: System.Int32
      description: "Pozycja, do którego dodano nowego wpisu kontroli dostępu."
  overload: System.Messaging.AccessControlList.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>entry</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.AccessControlList.Contains(System.Messaging.AccessControlEntry)
  id: Contains(System.Messaging.AccessControlEntry)
  parent: System.Messaging.AccessControlList
  langs:
  - csharp
  name: Contains(AccessControlEntry)
  nameWithType: AccessControlList.Contains(AccessControlEntry)
  fullName: System.Messaging.AccessControlList.Contains(AccessControlEntry)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Określa, czy listy kontroli dostępu zawiera określonego wpisu kontroli dostępu."
  syntax:
    content: public bool Contains (System.Messaging.AccessControlEntry entry);
    parameters:
    - id: entry
      type: System.Messaging.AccessControlEntry
      description: "<xref href=&quot;System.Messaging.AccessControlEntry&quot;> </xref> Można znaleźć na liście kontroli dostępu."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>w przypadku znalezienia wpisu kontroli dostępu w liście kontroli dostępu; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.AccessControlList.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.AccessControlList.CopyTo(System.Messaging.AccessControlEntry[],System.Int32)
  id: CopyTo(System.Messaging.AccessControlEntry[],System.Int32)
  parent: System.Messaging.AccessControlList
  langs:
  - csharp
  name: CopyTo(AccessControlEntry[],Int32)
  nameWithType: AccessControlList.CopyTo(AccessControlEntry[],Int32)
  fullName: System.Messaging.AccessControlList.CopyTo(AccessControlEntry[],Int32)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Kopie listy kontroli dostępu w całej z tablicą jednowymiarową zgodne dostępu kontrolować wpisów, zaczynając od określonego indeksu tablicy docelowej."
  syntax:
    content: public void CopyTo (System.Messaging.AccessControlEntry[] array, int index);
    parameters:
    - id: array
      type: System.Messaging.AccessControlEntry[]
      description: "Tablica typu <xref href=&quot;System.Messaging.AccessControlEntry&quot;> </xref> , do którego zostaną skopiowane pozycji listy kontroli dostępu. Tablica musi mieć indeksowania liczony od zera."
    - id: index
      type: System.Int32
      description: "Indeks w tablicy, od którego należy zacząć Kopiowanie wpisów listy kontroli dostępu."
  overload: System.Messaging.AccessControlList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>array</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code> index </code> Parametru jest mniejszy od zera."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> index </code> Parametr jest większa niż lub równa długości <code> array </code> parametru.       Liczba elementów na liście kontroli dostępu do źródła jest większa niż dostępne miejsce od - lub - <code> index </code> do końca tablicy docelowej wpisów kontroli dostępu."
  platform:
  - net462
- uid: System.Messaging.AccessControlList.IndexOf(System.Messaging.AccessControlEntry)
  id: IndexOf(System.Messaging.AccessControlEntry)
  parent: System.Messaging.AccessControlList
  langs:
  - csharp
  name: IndexOf(AccessControlEntry)
  nameWithType: AccessControlList.IndexOf(AccessControlEntry)
  fullName: System.Messaging.AccessControlList.IndexOf(AccessControlEntry)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Określa indeks określonego wpisu kontroli dostępu na liście kontroli dostępu."
  syntax:
    content: public int IndexOf (System.Messaging.AccessControlEntry entry);
    parameters:
    - id: entry
      type: System.Messaging.AccessControlEntry
      description: "<xref href=&quot;System.Messaging.AccessControlEntry&quot;> </xref> Można znaleźć na liście kontroli dostępu."
    return:
      type: System.Int32
      description: "Indeks wpisu, jeśli został odnaleziony na liście; w przeciwnym razie wartość -1"
  overload: System.Messaging.AccessControlList.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.AccessControlList.Insert(System.Int32,System.Messaging.AccessControlEntry)
  id: Insert(System.Int32,System.Messaging.AccessControlEntry)
  parent: System.Messaging.AccessControlList
  langs:
  - csharp
  name: Insert(Int32,AccessControlEntry)
  nameWithType: AccessControlList.Insert(Int32,AccessControlEntry)
  fullName: System.Messaging.AccessControlList.Insert(Int32,AccessControlEntry)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Wstawia wpisu kontroli dostępu do listy kontroli dostępu w określonej pozycji."
  remarks: "Jeśli `index` parametru jest równa liczbie elementów na liście kontroli dostępu, a następnie wpis jest dołączany na końcu. W przeciwnym razie wpisy od punktu wstawiania Przenieś w dół pomieścić nowy element na liście."
  syntax:
    content: public void Insert (int index, System.Messaging.AccessControlEntry entry);
    parameters:
    - id: index
      type: System.Int32
      description: "Liczony od zera indeks, w którym powinien zostać wstawiony wpisu kontroli dostępu."
    - id: entry
      type: System.Messaging.AccessControlEntry
      description: "A <xref href=&quot;System.Messaging.AccessControlEntry&quot;> </xref> do wstawienia do listy kontroli dostępu."
  overload: System.Messaging.AccessControlList.Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code> index </code> Parametr nie jest prawidłowym indeksem w tej listy kontroli dostępu."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>entry</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.AccessControlList.Remove(System.Messaging.AccessControlEntry)
  id: Remove(System.Messaging.AccessControlEntry)
  parent: System.Messaging.AccessControlList
  langs:
  - csharp
  name: Remove(AccessControlEntry)
  nameWithType: AccessControlList.Remove(AccessControlEntry)
  fullName: System.Messaging.AccessControlList.Remove(AccessControlEntry)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Usuwa pierwsze wystąpienie określonego wpisu kontroli dostępu z listy kontroli dostępu."
  remarks: "Wpisy kontroli dostępu, które należy wykonać usunięty element Przenieś w górę zajmować vacated miejscu."
  syntax:
    content: public void Remove (System.Messaging.AccessControlEntry entry);
    parameters:
    - id: entry
      type: System.Messaging.AccessControlEntry
      description: "<xref href=&quot;System.Messaging.AccessControlEntry&quot;> </xref> Do usunięcia z listy kontroli dostępu."
  overload: System.Messaging.AccessControlList.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>entry</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.CollectionBase
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Messaging.AccessControlList.#ctor
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: AccessControlList()
  nameWithType: AccessControlList.AccessControlList()
  fullName: System.Messaging.AccessControlList.AccessControlList()
- uid: System.Messaging.AccessControlList.Add(System.Messaging.AccessControlEntry)
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: Add(AccessControlEntry)
  nameWithType: AccessControlList.Add(AccessControlEntry)
  fullName: System.Messaging.AccessControlList.Add(AccessControlEntry)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Messaging.AccessControlEntry
  parent: System.Messaging
  isExternal: false
  name: AccessControlEntry
  nameWithType: AccessControlEntry
  fullName: System.Messaging.AccessControlEntry
- uid: System.Messaging.AccessControlList.Contains(System.Messaging.AccessControlEntry)
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: Contains(AccessControlEntry)
  nameWithType: AccessControlList.Contains(AccessControlEntry)
  fullName: System.Messaging.AccessControlList.Contains(AccessControlEntry)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.AccessControlList.CopyTo(System.Messaging.AccessControlEntry[],System.Int32)
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: CopyTo(AccessControlEntry[],Int32)
  nameWithType: AccessControlList.CopyTo(AccessControlEntry[],Int32)
  fullName: System.Messaging.AccessControlList.CopyTo(AccessControlEntry[],Int32)
- uid: System.Messaging.AccessControlEntry[]
  parent: System.Messaging
  isExternal: false
  name: AccessControlEntry
  nameWithType: AccessControlEntry
  fullName: System.Messaging.AccessControlEntry[]
  spec.csharp:
  - uid: System.Messaging.AccessControlEntry
    name: AccessControlEntry
    nameWithType: AccessControlEntry
    fullName: AccessControlEntry[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Messaging.AccessControlList.IndexOf(System.Messaging.AccessControlEntry)
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: IndexOf(AccessControlEntry)
  nameWithType: AccessControlList.IndexOf(AccessControlEntry)
  fullName: System.Messaging.AccessControlList.IndexOf(AccessControlEntry)
- uid: System.Messaging.AccessControlList.Insert(System.Int32,System.Messaging.AccessControlEntry)
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: Insert(Int32,AccessControlEntry)
  nameWithType: AccessControlList.Insert(Int32,AccessControlEntry)
  fullName: System.Messaging.AccessControlList.Insert(Int32,AccessControlEntry)
- uid: System.Messaging.AccessControlList.Remove(System.Messaging.AccessControlEntry)
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: Remove(AccessControlEntry)
  nameWithType: AccessControlList.Remove(AccessControlEntry)
  fullName: System.Messaging.AccessControlList.Remove(AccessControlEntry)
- uid: System.Messaging.AccessControlList.#ctor*
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: AccessControlList
  nameWithType: AccessControlList.AccessControlList
- uid: System.Messaging.AccessControlList.Add*
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: Add
  nameWithType: AccessControlList.Add
- uid: System.Messaging.AccessControlList.Contains*
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: Contains
  nameWithType: AccessControlList.Contains
- uid: System.Messaging.AccessControlList.CopyTo*
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: CopyTo
  nameWithType: AccessControlList.CopyTo
- uid: System.Messaging.AccessControlList.IndexOf*
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: IndexOf
  nameWithType: AccessControlList.IndexOf
- uid: System.Messaging.AccessControlList.Insert*
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: Insert
  nameWithType: AccessControlList.Insert
- uid: System.Messaging.AccessControlList.Remove*
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: Remove
  nameWithType: AccessControlList.Remove
