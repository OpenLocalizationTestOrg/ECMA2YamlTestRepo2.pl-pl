### YamlMime:ManagedReference
items:
- uid: System.Web.ApplicationServices.AuthenticationService
  id: AuthenticationService
  children:
  - System.Web.ApplicationServices.AuthenticationService.#ctor
  - System.Web.ApplicationServices.AuthenticationService.Authenticating
  - System.Web.ApplicationServices.AuthenticationService.CreatingCookie
  - System.Web.ApplicationServices.AuthenticationService.IsLoggedIn
  - System.Web.ApplicationServices.AuthenticationService.Login(System.String,System.String,System.String,System.Boolean)
  - System.Web.ApplicationServices.AuthenticationService.Logout
  - System.Web.ApplicationServices.AuthenticationService.ValidateUser(System.String,System.String,System.String)
  langs:
  - csharp
  name: AuthenticationService
  nameWithType: AuthenticationService
  fullName: System.Web.ApplicationServices.AuthenticationService
  type: Class
  summary: "Zapewnia dostęp do uwierzytelniania formularzy ASP.NET jako usługę sieci Web."
  remarks: "Obiekt AuthenticationService umożliwia uwierzytelnianie użytkowników za pośrednictwem [!INCLUDE[vsindigo](~/add/includes/vsindigo-md.md)] usługi. Usługa uwierzytelniania usługi WCF można użyć podczas musi uwierzytelniać użytkowników za pomocą członkostwa programu ASP.NET z aplikacji, która jest poza aplikacją sieci Web, która przechowuje poświadczenia użytkownika. Aplikacja musi mieć możliwość wysyłania i korzystać z wiadomości w formacie protokołu SOAP. Za pomocą klasy AuthenticationService możesz zalogować użytkowników, użytkownicy, sprawdzanie poprawności poświadczeń, sprawdź stan uwierzytelniania, dostosować uwierzytelniania i wartość pliku cookie uwierzytelniania.       Klasa AuthenticationService zawiera cztery metody, których należy dostęp tylko za pośrednictwem usługi WCF: <xref:System.Web.ApplicationServices.AuthenticationService.IsLoggedIn%2A>, <xref:System.Web.ApplicationServices.AuthenticationService.Login%2A>, <xref:System.Web.ApplicationServices.AuthenticationService.Logout%2A>, i <xref:System.Web.ApplicationServices.AuthenticationService.ValidateUser%2A>metody.</xref:System.Web.ApplicationServices.AuthenticationService.ValidateUser%2A> </xref:System.Web.ApplicationServices.AuthenticationService.Logout%2A> </xref:System.Web.ApplicationServices.AuthenticationService.Login%2A> </xref:System.Web.ApplicationServices.AuthenticationService.IsLoggedIn%2A> Aby wywołać tych metod, włącz usługę uwierzytelniania na serwerze sieci Web, a następnie połącz aplikację klienta WCF zgodnego z usługą sieci Web. Aby uzyskać informacje o sposobie konfigurowania usługi uwierzytelniania, zobacz [jak: Włącz usługę WCF uwierzytelniania](~/add/includes/ajax-current-ext-md.md).       Aby użytkownicy logują się, Przekaż poświadczeń użytkownika do <xref:System.Web.ApplicationServices.AuthenticationService.Login%2A>metody.</xref:System.Web.ApplicationServices.AuthenticationService.Login%2A> Jeśli poświadczenia są prawidłowe, klasa AuthenticationService tworzy plik cookie uwierzytelniania. Jeśli nie wygasł pliku cookie uwierzytelniania, wiadomo, że poświadczenia użytkownika zostały uwierzytelnione i nie trzeba ponownie zweryfikować poświadczeń. (Bez plików cookie uwierzytelniania nie jest dostępny za pośrednictwem klasy AuthenticationService).       AuthenticationService może wiązać się z dwóch zdarzeń: <xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>i <xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>.</xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie> </xref:System.Web.ApplicationServices.AuthenticationService.Authenticating> <xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>Zdarzenie wystąpi, gdy trwa sprawdzanie poprawności poświadczeń użytkownika.</xref:System.Web.ApplicationServices.AuthenticationService.Authenticating> Tworzenie procedury obsługi zdarzeń dla <xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>zdarzeń, aby dostosować poprawności poświadczeń użytkownika.</xref:System.Web.ApplicationServices.AuthenticationService.Authenticating> <xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>Zdarzenie wystąpi, gdy plik cookie uwierzytelniania jest ustawiany po sprawdzeniu poprawności poświadczeń użytkownika.</xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie> Tworzenie procedury obsługi zdarzeń dla <xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>zdarzeń, aby dostosować plik cookie uwierzytelniania.</xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>       <xref:System.Web.ApplicationServices.AuthenticationService.ValidateUser%2A>Metoda sprawdza poświadczeń użytkownika do uwierzytelniania, ale nie zwraca bilet uwierzytelnienia.</xref:System.Web.ApplicationServices.AuthenticationService.ValidateUser%2A> Użyj <xref:System.Web.ApplicationServices.AuthenticationService.ValidateUser%2A>po zalogowaniu się użytkownika wcześniej i musisz sprawdzić, czy poświadczenia są nadal ważne w chwili rozpoczęcia nowej sesji aplikacji.</xref:System.Web.ApplicationServices.AuthenticationService.ValidateUser%2A>       Na przykład przy użyciu usługi WCF uwierzytelniania z aplikacji konsoli, zobacz [wskazówki: Korzystanie z usługi aplikacji ASP.NET](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: >-
      [System.ServiceModel.Activation.AspNetCompatibilityRequirements(RequirementsMode=System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode.Required)]

      [System.ServiceModel.ServiceBehavior(ConcurrencyMode=System.ServiceModel.ConcurrencyMode.Multiple, InstanceContextMode=System.ServiceModel.InstanceContextMode.Single, Namespace="http://asp.net/ApplicationServices/v200")]

      [System.ServiceModel.ServiceContract(Namespace="http://asp.net/ApplicationServices/v200")]

      public class AuthenticationService
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.ApplicationServices.AuthenticationService.#ctor
  id: '#ctor'
  parent: System.Web.ApplicationServices.AuthenticationService
  langs:
  - csharp
  name: AuthenticationService()
  nameWithType: AuthenticationService.AuthenticationService()
  fullName: System.Web.ApplicationServices.AuthenticationService.AuthenticationService()
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ApplicationServices
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Web.ApplicationServices.AuthenticationService&quot;> </xref> klasy."
  syntax:
    content: public AuthenticationService ();
    parameters: []
  overload: System.Web.ApplicationServices.AuthenticationService.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.ApplicationServices.AuthenticationService.Authenticating
  id: Authenticating
  parent: System.Web.ApplicationServices.AuthenticationService
  langs:
  - csharp
  name: Authenticating
  nameWithType: AuthenticationService.Authenticating
  fullName: System.Web.ApplicationServices.AuthenticationService.Authenticating
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ApplicationServices
  summary: "Występuje, gdy trwa sprawdzanie poprawności poświadczeń użytkownika."
  remarks: "Authenticating zdarzenie jest wywoływane, gdy trwa sprawdzanie poprawności poświadczeń użytkownika. Utwórz program obsługi zdarzeń dla zdarzenia Authenticating dostosować poprawności poświadczeń użytkownika."
  example:
  - "The following example shows how to bind an event handler for the Authenticating event in the `Application_Start` method of the Global.asax file.  \n  \n [!code-cs[System.Web.Security.LoginService_MultipleCredentials#1](~/add/codesnippet/csharp/e-system.web.application_0_1.asax)]\n [!code-vb[System.Web.Security.LoginService_MultipleCredentials#1](~/add/codesnippet/visualbasic/e-system.web.application_0_1.asax)]  \n  \n The following example shows an event handler for the Authenticating event in the Global.asax file. The event handler reads two authentication values from the <xref:System.Web.ApplicationServices.AuthenticatingEventArgs.CustomCredential%2A> property and passes them together with the user name and password to a custom authentication class named `StudentAuthentication`.  \n  \n [!code-cs[System.Web.Security.LoginService_MultipleCredentials#2](~/add/codesnippet/csharp/e-system.web.application_0_2.asax)]\n [!code-vb[System.Web.Security.LoginService_MultipleCredentials#2](~/add/codesnippet/visualbasic/e-system.web.application_0_2.asax)]"
  syntax:
    content: public static event EventHandler<System.Web.ApplicationServices.AuthenticatingEventArgs> Authenticating;
    return:
      type: System.EventHandler{System.Web.ApplicationServices.AuthenticatingEventArgs}
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Web.ApplicationServices.AuthenticationService.CreatingCookie
  id: CreatingCookie
  parent: System.Web.ApplicationServices.AuthenticationService
  langs:
  - csharp
  name: CreatingCookie
  nameWithType: AuthenticationService.CreatingCookie
  fullName: System.Web.ApplicationServices.AuthenticationService.CreatingCookie
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ApplicationServices
  summary: "Występuje, gdy ustawiono pliku cookie uwierzytelniania."
  remarks: "CreatingCookie zdarzenie jest wywoływane, gdy plik cookie uwierzytelniania jest ustawiany po sprawdzeniu poprawności poświadczeń użytkownika. Utwórz program obsługi zdarzeń dla zdarzenia CreatingCookie dostosować plik cookie uwierzytelniania."
  example:
  - "The following example shows how to bind an event handler to the CreatingCookie event in the `Application_Start` method of the Global.asax file.  \n  \n [!code-cs[System.Web.Security.LoginService.CreatingCookieEventArgs#1](~/add/codesnippet/csharp/e-system.web.application_1_1.asax)]\n [!code-vb[System.Web.Security.LoginService.CreatingCookieEventArgs#1](~/add/codesnippet/visualbasic/e-system.web.application_1_1.asax)]  \n  \n The following example shows an event handler for the CreatingCookie event in the Global.asax file. The event handler customizes the authentication cookie by adding the value in the <xref:System.Web.ApplicationServices.CreatingCookieEventArgs.CustomCredential%2A> property to the <xref:System.Web.Security.FormsAuthenticationTicket.UserData%2A> property. Store the <xref:System.Web.ApplicationServices.CreatingCookieEventArgs.CustomCredential%2A> property in a cookie only if you know that the data in the property is not sensitive. Malicious users can access the values in the cookie.  \n  \n [!code-cs[System.Web.Security.LoginService.CreatingCookieEventArgs#2](~/add/codesnippet/csharp/e-system.web.application_1_2.asax)]\n [!code-vb[System.Web.Security.LoginService.CreatingCookieEventArgs#2](~/add/codesnippet/visualbasic/e-system.web.application_1_2.asax)]"
  syntax:
    content: public static event EventHandler<System.Web.ApplicationServices.CreatingCookieEventArgs> CreatingCookie;
    return:
      type: System.EventHandler{System.Web.ApplicationServices.CreatingCookieEventArgs}
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Web.ApplicationServices.AuthenticationService.IsLoggedIn
  id: IsLoggedIn
  parent: System.Web.ApplicationServices.AuthenticationService
  langs:
  - csharp
  name: IsLoggedIn()
  nameWithType: AuthenticationService.IsLoggedIn()
  fullName: System.Web.ApplicationServices.AuthenticationService.IsLoggedIn()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ApplicationServices
  summary: "Określa, czy bieżący użytkownik jest uwierzytelniony."
  remarks: "Metoda IsLoggedIn sprawdza, czy bieżący użytkownik jest uwierzytelniany przez sprawdzanie <xref:System.Security.Principal.IIdentity.IsAuthenticated%2A>.property.</xref:System.Security.Principal.IIdentity.IsAuthenticated%2A>      > [!NOTE] > Nie należy wywoływać metody IsLoggedIn z kodu, który jest wykonywany na serwerze sieci Web. Należy wywołać metodę IsLoggedIn tylko jako część usługi WCF."
  syntax:
    content: public bool IsLoggedIn ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli użytkownik został uwierzytelniony; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.ApplicationServices.AuthenticationService.IsLoggedIn*
  exceptions: []
  platform:
  - net462
- uid: System.Web.ApplicationServices.AuthenticationService.Login(System.String,System.String,System.String,System.Boolean)
  id: Login(System.String,System.String,System.String,System.Boolean)
  parent: System.Web.ApplicationServices.AuthenticationService
  langs:
  - csharp
  name: Login(String,String,String,Boolean)
  nameWithType: AuthenticationService.Login(String,String,String,Boolean)
  fullName: System.Web.ApplicationServices.AuthenticationService.Login(String,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ApplicationServices
  summary: "Sprawdza użytkownika poświadczeń i tworzy bilet uwierzytelnienia (plik cookie), jeśli poświadczenia są prawidłowe."
  remarks: "Metoda logowania weryfikuje poświadczenia użytkownika za pośrednictwem dostawcy członkostwa. Można użyć domyślnego dostawcy członkostwa lub określić dostawcę członkostwa niestandardowych w czasie wykonywania. <xref:System.Web.ApplicationServices.AuthenticationService>Klasy przekazuje `userName` i `password` do dostawcy członkostwa <xref:System.Web.Security.MembershipProvider.ValidateUser%2A>metody, ale nie zostały spełnione `customCredential`.</xref:System.Web.Security.MembershipProvider.ValidateUser%2A> </xref:System.Web.ApplicationServices.AuthenticationService> Jeśli <xref:System.Web.Security.MembershipProvider.ValidateUser%2A>zwraca `true`, <xref:System.Web.ApplicationServices.AuthenticationService>tworzy bilet uwierzytelnienia jako plik cookie.</xref:System.Web.ApplicationServices.AuthenticationService> </xref:System.Web.Security.MembershipProvider.ValidateUser%2A> Ustaw `isPersistent` parametr `true` można utworzyć biletu uwierzytelniania trwającą poza bieżącą sesją.      > [!NOTE] > Zawsze używana usługa uwierzytelniania wraz z zabezpieczeń SSL (przy użyciu protokołu HTTPS SSL) do ochrony danych poufnych.       Wywołuje metodę logowania <xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>zdarzeń i <xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>zdarzeń.</xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie> </xref:System.Web.ApplicationServices.AuthenticationService.Authenticating> Tworzenie procedury obsługi zdarzeń dla <xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>dostosować uwierzytelniania, takie jak sprawdzanie wartości w `customCredential` lub Sprawdzanie poprawności poświadczeń za pośrednictwem dostawcy członkostwa z systemem innym niż domyślny.</xref:System.Web.ApplicationServices.AuthenticationService.Authenticating> Wartości w `customCredential` nie są weryfikowane przez domyślnego dostawcy członkostwa. Aby dostosować plik cookie uwierzytelniania, należy utworzyć programu obsługi zdarzeń dla <xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>.</xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>      > [!NOTE] > Nie należy wywoływać metody logowania z kodu, który jest wykonywany na serwerze sieci Web. Należy wywołać metodę logowania tylko jako część usługi WCF. Aby uzyskać więcej informacji, zobacz [Uwierzytelnianie ASP.NET](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool Login (string username, string password, string customCredential, bool isPersistent);
    parameters:
    - id: username
      type: System.String
      description: "Nazwa użytkownika, który ma zostać zweryfikowana."
    - id: password
      type: System.String
      description: "Hasło dla określonego użytkownika."
    - id: customCredential
      type: System.String
      description: "Wartość lub wartości do sprawdzania poprawności oprócz `userName` i `password`, jeśli istnieje."
    - id: isPersistent
      type: System.Boolean
      description: "Wartość, która wskazuje, czy bilet uwierzytelnienia pozostaje ważny między sesjami."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli poświadczenia użytkownika są prawidłowe; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.ApplicationServices.AuthenticationService.Login*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>userName</code>or <code>password</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.ApplicationServices.AuthenticationService.Logout
  id: Logout
  parent: System.Web.ApplicationServices.AuthenticationService
  langs:
  - csharp
  name: Logout()
  nameWithType: AuthenticationService.Logout()
  fullName: System.Web.ApplicationServices.AuthenticationService.Logout()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ApplicationServices
  summary: "Czyści biletu uwierzytelniania (plik cookie) w przeglądarce."
  remarks: "Metoda wylogowania usuwa plik cookie uwierzytelniania z kolekcji plików cookie w przeglądarce. Użytkownik musi ponownie zalogować się do uwierzytelnienia.       <xref:System.Web.ApplicationServices.AuthenticationService>Klasa nie przechowuje informacji na serwerze dotyczących uwierzytelniania, które zostały wyczyszczone biletów.</xref:System.Web.ApplicationServices.AuthenticationService>      > [!NOTE] > Nie należy wywoływać metody wylogowania z kodu, który jest wykonywany na serwerze sieci Web. Należy wywołać metodę wylogowania tylko jako część usługi WCF. Aby uzyskać więcej informacji, zobacz [Uwierzytelnianie ASP.NET](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void Logout ();
    parameters: []
  overload: System.Web.ApplicationServices.AuthenticationService.Logout*
  exceptions: []
  platform:
  - net462
- uid: System.Web.ApplicationServices.AuthenticationService.ValidateUser(System.String,System.String,System.String)
  id: ValidateUser(System.String,System.String,System.String)
  parent: System.Web.ApplicationServices.AuthenticationService
  langs:
  - csharp
  name: ValidateUser(String,String,String)
  nameWithType: AuthenticationService.ValidateUser(String,String,String)
  fullName: System.Web.ApplicationServices.AuthenticationService.ValidateUser(String,String,String)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ApplicationServices
  summary: "Uwierzytelnianie poświadczeń użytkownika bez wystawienia biletu uwierzytelniania."
  remarks: "Metoda funkcja ValidateUser uwierzytelnianie poświadczeń użytkownika, ale nie określa pliku cookie uwierzytelniania. Bez pliku cookie uwierzytelniania użytkownika nie będą rejestrowane nawet, jeśli poświadczenia są prawidłowe.       Jeśli musisz sprawdzić, czy poświadczenia użytkownika są prawidłowe, bez otrzymania pliku cookie uwierzytelniania, należy użyć metody funkcja ValidateUser. Na przykład zrobić to jeśli plik cookie uwierzytelniania jest już zapisana w aplikacji klienta, ale chcesz sprawdzić, czy poświadczenia użytkownika są nadal ważne przy uruchamianiu nowej sesji.       Wywołuje metodę TheValidateUser <xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>zdarzenia, ale nie zgłaszał <xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>zdarzeń.</xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie> </xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>      > [!NOTE] > Nie należy wywoływać metody funkcja ValidateUser z kodu, który jest wykonywany na serwerze sieci Web. Należy wywołać metodę funkcja ValidateUser tylko jako część usługi WCF. Aby uzyskać więcej informacji, zobacz [Uwierzytelnianie ASP.NET](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool ValidateUser (string username, string password, string customCredential);
    parameters:
    - id: username
      type: System.String
      description: "Nazwa użytkownika, który ma zostać zweryfikowana."
    - id: password
      type: System.String
      description: "Hasło dla określonego użytkownika."
    - id: customCredential
      type: System.String
      description: "Wartość lub wartości do sprawdzania poprawności oprócz `userName` i `password`, jeśli istnieje."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli poświadczenia użytkownika są prawidłowe; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.ApplicationServices.AuthenticationService.ValidateUser*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>userName</code>or <code>password</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Web.ApplicationServices.AuthenticationService.#ctor
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: AuthenticationService()
  nameWithType: AuthenticationService.AuthenticationService()
  fullName: System.Web.ApplicationServices.AuthenticationService.AuthenticationService()
- uid: System.Web.ApplicationServices.AuthenticationService.Authenticating
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: Authenticating
  nameWithType: AuthenticationService.Authenticating
  fullName: System.Web.ApplicationServices.AuthenticationService.Authenticating
- uid: System.EventHandler{System.Web.ApplicationServices.AuthenticatingEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<AuthenticatingEventArgs>
  nameWithType: EventHandler<AuthenticatingEventArgs>
  fullName: System.EventHandler<System.Web.ApplicationServices.AuthenticatingEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.ApplicationServices.AuthenticatingEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.ApplicationServices.AuthenticatingEventArgs
    name: AuthenticatingEventArgs
    nameWithType: AuthenticatingEventArgs
    fullName: AuthenticatingEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.ApplicationServices.AuthenticationService.CreatingCookie
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: CreatingCookie
  nameWithType: AuthenticationService.CreatingCookie
  fullName: System.Web.ApplicationServices.AuthenticationService.CreatingCookie
- uid: System.EventHandler{System.Web.ApplicationServices.CreatingCookieEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<CreatingCookieEventArgs>
  nameWithType: EventHandler<CreatingCookieEventArgs>
  fullName: System.EventHandler<System.Web.ApplicationServices.CreatingCookieEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.ApplicationServices.CreatingCookieEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.ApplicationServices.CreatingCookieEventArgs
    name: CreatingCookieEventArgs
    nameWithType: CreatingCookieEventArgs
    fullName: CreatingCookieEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.ApplicationServices.AuthenticationService.IsLoggedIn
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: IsLoggedIn()
  nameWithType: AuthenticationService.IsLoggedIn()
  fullName: System.Web.ApplicationServices.AuthenticationService.IsLoggedIn()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.ApplicationServices.AuthenticationService.Login(System.String,System.String,System.String,System.Boolean)
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: Login(String,String,String,Boolean)
  nameWithType: AuthenticationService.Login(String,String,String,Boolean)
  fullName: System.Web.ApplicationServices.AuthenticationService.Login(String,String,String,Boolean)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.ApplicationServices.AuthenticationService.Logout
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: Logout()
  nameWithType: AuthenticationService.Logout()
  fullName: System.Web.ApplicationServices.AuthenticationService.Logout()
- uid: System.Web.ApplicationServices.AuthenticationService.ValidateUser(System.String,System.String,System.String)
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: ValidateUser(String,String,String)
  nameWithType: AuthenticationService.ValidateUser(String,String,String)
  fullName: System.Web.ApplicationServices.AuthenticationService.ValidateUser(String,String,String)
- uid: System.Web.ApplicationServices.AuthenticationService.#ctor*
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: AuthenticationService
  nameWithType: AuthenticationService.AuthenticationService
- uid: System.Web.ApplicationServices.AuthenticationService.IsLoggedIn*
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: IsLoggedIn
  nameWithType: AuthenticationService.IsLoggedIn
- uid: System.Web.ApplicationServices.AuthenticationService.Login*
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: Login
  nameWithType: AuthenticationService.Login
- uid: System.Web.ApplicationServices.AuthenticationService.Logout*
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: Logout
  nameWithType: AuthenticationService.Logout
- uid: System.Web.ApplicationServices.AuthenticationService.ValidateUser*
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: ValidateUser
  nameWithType: AuthenticationService.ValidateUser
