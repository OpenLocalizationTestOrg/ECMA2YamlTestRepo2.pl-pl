### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.IInstanceProvider
  id: IInstanceProvider
  children:
  - System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)
  - System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)
  - System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)
  langs:
  - csharp
  name: IInstanceProvider
  nameWithType: IInstanceProvider
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider
  type: Interface
  summary: "Deklaruje metody, które zapewniają usługi obiektu lub Odtwórz obiekt usługi dla [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] usługi."
  remarks: "Implementować interfejs IInstanceProvider do kontrolowania tworzenie i odzyskiwanie obiektów usługi, gdy dla jednego żądanych lub usunięte przez <xref:System.ServiceModel.InstanceContext>obiektu.</xref:System.ServiceModel.InstanceContext>       Po zaimplementowaniu interfejsu IInstanceProvider należy przypisać do niestandardowego wystąpienia obiektu dostawcy <xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A>Właściwości przy użyciu zachowania punktu końcowego ( <xref:System.ServiceModel.Description.IEndpointBehavior>obiektu) lub zachowanie kontraktu ( <xref:System.ServiceModel.Description.IContractBehavior>obiektu).</xref:System.ServiceModel.Description.IContractBehavior> </xref:System.ServiceModel.Description.IEndpointBehavior> </xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A>       Jeśli mechanizm wstawiania jest zachowanie punktu końcowego można też wdrożyć <xref:System.ServiceModel.Configuration.BehaviorExtensionElement>obiekt, który można wstawić niestandardowe zachowanie przy użyciu pliku konfiguracji.</xref:System.ServiceModel.Configuration.BehaviorExtensionElement> Jeśli mechanizm wstawiania jest zachowanie kontraktu, można wstawić zachowanie programowo przed otwierającym hosta usługi lub można zaimplementować atrybutu niestandardowego. (Na przykład podejście zachowanie kontraktu Zobacz przykład).       IInstanceProvider ma dwie metody <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>i <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>.</xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> </xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> Te metody są zwykle implementowany do tworzenia obiektów usługi za pomocą konstruktora domyślnego z systemem innym niż, albo do zainicjowania lub usunięcia stanu, niektóre powiązane z okresu istnienia obiektu. Buforowanie obiektu usługi jest przykład funkcji IInstanceProvider niestandardowych.       Zazwyczaj <xref:System.ServiceModel.InstanceContext>wywołuje <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>podczas <xref:System.ServiceModel.InstanceContext>utworzenia i wywołuje <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>metody podczas <xref:System.ServiceModel.InstanceContext>jest zamknięty.</xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> </xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> </xref:System.ServiceModel.InstanceContext>       Istnieją dwa sposoby spowodować <xref:System.ServiceModel.InstanceContext>obiektu do zwolnienia obiektu usługi przed <xref:System.ServiceModel.InstanceContext>jest zamknięty.</xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.InstanceContext> Pierwsza metoda jest skonfigurowanie <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A>lub <xref:System.ServiceModel.ReleaseInstanceMode> <xref:System.ServiceModel.ReleaseInstanceMode>.</xref:System.ServiceModel.ReleaseInstanceMode> </xref:System.ServiceModel.ReleaseInstanceMode> </xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> Drugi sposób polega na wywołanie <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A>metody.</xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> Jeśli zostanie to zrobione, <xref:System.ServiceModel.InstanceContext>wywołania <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>metody dla dostawcy wystąpienia dyspozytora.</xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> </xref:System.ServiceModel.InstanceContext> Jeśli nowy komunikat po wydaniu wystąpienie [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] tworzy nowe wystąpienie za pomocą <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>metody.</xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>      > [!NOTE] > Jeśli <xref:System.ServiceModel.InstanceContextMode>Usługa jest <xref:System.ServiceModel.InstanceContextMode>, system nie mogą wywoływać <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>metod nawet wtedy, gdy użytkownik nie dostarczył obiektu dobrze znanej usługi, chyba że użytkownik bezpośrednio wywołuje <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A>, a następnie wywołania <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>.</xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A> </xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> </xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> lub</xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> </xref:System.ServiceModel.InstanceContextMode> </xref:System.ServiceModel.InstanceContextMode>"
  example:
  - "The following code example shows how to implement IInstanceProvider that provides \"singleton\" behavior; it always returns the same service instance and does not recycle it.  \n  \n [!code-cs[IContractBehavior#1](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#1)]\n [!code-vb[IContractBehavior#1](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#1)]  \n  \n The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider. It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.  \n  \n [!code-cs[IContractBehavior#2](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#2)]\n [!code-vb[IContractBehavior#2](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#2)]"
  syntax:
    content: public interface IInstanceProvider
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)
  id: GetInstance(System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  langs:
  - csharp
  name: GetInstance(InstanceContext)
  nameWithType: IInstanceProvider.GetInstance(InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Zwraca obiekt usługi na podstawie określonego <xref:System.ServiceModel.InstanceContext>obiektu.</xref:System.ServiceModel.InstanceContext>"
  remarks: "Użyj metody GetInstance sterowania usługą dokładne obiekt, który [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] usługa odbiera podczas próby utworzenia nowego."
  example:
  - "The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides \"singleton\" behavior; it always returns the same service instance and does not recycle it.  \n  \n [!code-cs[IContractBehavior#1](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#1)]\n [!code-vb[IContractBehavior#1](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#1)]  \n  \n The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider. It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.  \n  \n [!code-cs[IContractBehavior#2](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#2)]\n [!code-vb[IContractBehavior#2](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#2)]"
  syntax:
    content: public object GetInstance (System.ServiceModel.InstanceContext instanceContext);
    parameters:
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "Bieżący <xref:System.ServiceModel.InstanceContext>obiektu.</xref:System.ServiceModel.InstanceContext>"
    return:
      type: System.Object
      description: "Obiekt usługi zdefiniowane przez użytkownika."
  overload: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)
  id: GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  langs:
  - csharp
  name: GetInstance(InstanceContext,Message)
  nameWithType: IInstanceProvider.GetInstance(InstanceContext,Message)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext,Message)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Zwraca obiekt usługi na podstawie określonego <xref:System.ServiceModel.InstanceContext>obiektu.</xref:System.ServiceModel.InstanceContext>"
  remarks: "Użyj metody GetInstance sterowania usługą dokładne obiekt, który [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] usługa odbiera podczas próby utworzenia nowego."
  example:
  - "The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides \"singleton\" behavior; it always returns the same service instance and does not recycle it.  \n  \n [!code-cs[IContractBehavior#1](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#1)]\n [!code-vb[IContractBehavior#1](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#1)]  \n  \n The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider. It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.  \n  \n [!code-cs[IContractBehavior#2](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#2)]\n [!code-vb[IContractBehavior#2](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#2)]"
  syntax:
    content: public object GetInstance (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message);
    parameters:
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "Bieżący <xref:System.ServiceModel.InstanceContext>obiektu.</xref:System.ServiceModel.InstanceContext>"
    - id: message
      type: System.ServiceModel.Channels.Message
      description: "Komunikat, który powoduje utworzenie obiektu usługi."
    return:
      type: System.Object
      description: "Obiekt usługi."
  overload: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)
  id: ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  langs:
  - csharp
  name: ReleaseInstance(InstanceContext,Object)
  nameWithType: IInstanceProvider.ReleaseInstance(InstanceContext,Object)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(InstanceContext,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Wywoływane, gdy <xref:System.ServiceModel.InstanceContext>obiekt jest obiektem usługi odtwarzana.</xref:System.ServiceModel.InstanceContext>"
  remarks: "Metoda ReleaseInstance do wykonania niektórych zasobów niestandardowych usuwania lub inne dostosowania odtwarzania, gdy usługa jest odtwarzana obiekt usługi."
  syntax:
    content: public void ReleaseInstance (System.ServiceModel.InstanceContext instanceContext, object instance);
    parameters:
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "Kontekst wystąpienia usługi."
    - id: instance
      type: System.Object
      description: "Obiekt usługi do odtwarzania."
  overload: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: GetInstance(InstanceContext)
  nameWithType: IInstanceProvider.GetInstance(InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ServiceModel.InstanceContext
  parent: System.ServiceModel
  isExternal: true
  name: InstanceContext
  nameWithType: InstanceContext
  fullName: System.ServiceModel.InstanceContext
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: GetInstance(InstanceContext,Message)
  nameWithType: IInstanceProvider.GetInstance(InstanceContext,Message)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext,Message)
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: ReleaseInstance(InstanceContext,Object)
  nameWithType: IInstanceProvider.ReleaseInstance(InstanceContext,Object)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(InstanceContext,Object)
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance*
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: GetInstance
  nameWithType: IInstanceProvider.GetInstance
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance*
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: ReleaseInstance
  nameWithType: IInstanceProvider.ReleaseInstance
