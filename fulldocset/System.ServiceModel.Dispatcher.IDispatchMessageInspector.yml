### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  id: IDispatchMessageInspector
  children:
  - System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)
  - System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)
  langs:
  - csharp
  name: IDispatchMessageInspector
  nameWithType: IDispatchMessageInspector
  fullName: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  type: Interface
  summary: "Definiuje metody umożliwiające niestandardowych inspekcji lub zmiana wiadomości przychodzących i wychodzących aplikacji w aplikacji usługi."
  remarks: "Implementuje IDispatchMessageInspector aby inspekcja lub modyfikowanie komunikatów przychodzących lub wychodzących aplikacji albo przed wysyłania komunikatu żądania operacji lub przed zwróceniem komunikatu odpowiedzi na obiekt wywołujący. Istnieje wiele scenariuszy, które wymagają przechwycenia wiadomości przed wywołaniem operacji, dla której jest przeznaczony. Można na przykład logowania przychodzących komunikatów aplikacji lub wykonywać niektórych funkcji oparciu nagłówek komunikatu.       Zazwyczaj inspektorzy komunikatów są wstawiane przez zachowanie usługi (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName>), zachowanie punktu końcowego (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName>), lub zachowanie kontraktu (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName>).</xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName> Zachowanie następnie dodaje inspektora komunikat <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName>kolekcji.</xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName> Aby uzyskać więcej informacji na temat rozszerzania środowiska uruchomieniowego za pomocą zachowań, zobacz [rozszerzanie elementu ServiceHost i warstwy modelu usług](~/add/includes/ajax-current-ext-md.md).      - <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A>Metoda umożliwia niestandardowe zachowanie po otrzymaniu komunikatu, ale przed wysłaniem go do zamierzonego operacji.</xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A>      - <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A>Metoda umożliwia zachowanie niestandardowych po powrocie z operacji, ale przed wysłaniem odpowiedzi.</xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A>      > [!NOTE] > IDispatchMessageInspector obiektów zawsze są nazywane w tym samym punkcie podczas wysyłania wiadomości, niezależnie od tego, czy operacja jest jednokierunkowa lub żądanie odpowiedź."
  example:
  - "The following code example shows a basic IDispatchMessageInspector that writes a string to the console when it is invoked.  \n  \n [!code-vb[Interceptors#7](~/add/codesnippet/visualbasic/interceptors.client/interceptors.vb#7)]\n [!code-cs[Interceptors#7](~/add/codesnippet/csharp/interceptors.client/interceptors.cs#7)]  \n  \n The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`IDispatchMessageInspector to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName> collection.  \n  \n [!code-vb[Interceptors#8](~/add/codesnippet/visualbasic/interceptors.client/insertingbehaviors.vb#8)]\n [!code-cs[Interceptors#8](~/add/codesnippet/csharp/interceptors.client/insertingbehaviors.cs#8)]  \n  \n The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`IDispatchMessageInspector.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public interface IDispatchMessageInspector
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)
  id: AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  langs:
  - csharp
  name: AfterReceiveRequest(Message,IClientChannel,InstanceContext)
  nameWithType: IDispatchMessageInspector.AfterReceiveRequest(Message,IClientChannel,InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(Message,IClientChannel,InstanceContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Wywołuje się po wiadomości przychodzącej zostały odebrane, ale przed wysłaniem wiadomości jest wysyłane do zamierzonego operacji."
  remarks: "Metoda AfterReceiveRequest do inspekcja lub modyfikowanie komunikat przychodzący kanału klientów zapewnianej i bieżącego wystąpienia usługi. Zwracana wartość może być dowolny obiekt, który ma zostać użyty na potrzeby korelacji; jest zwracany jako `correlationState` parametru w <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A>metody.</xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A>      > [!IMPORTANT] > Nie można użyć treści wiadomości, chyba że buforu cały komunikat i Utwórz kopię. Jeśli to zrobisz, musisz wprowadzić dwie kopie wiadomości: jeden do zbadania i innych zastąpić `request` parametru."
  example:
  - "The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.  \n  \n [!code-vb[Interceptors#7](~/add/codesnippet/visualbasic/interceptors.client/interceptors.vb#7)]\n [!code-cs[Interceptors#7](~/add/codesnippet/csharp/interceptors.client/interceptors.cs#7)]  \n  \n The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName> collection.  \n  \n [!code-vb[Interceptors#8](~/add/codesnippet/visualbasic/interceptors.client/insertingbehaviors.vb#8)]\n [!code-cs[Interceptors#8](~/add/codesnippet/csharp/interceptors.client/insertingbehaviors.cs#8)]  \n  \n The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public object AfterReceiveRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel, System.ServiceModel.InstanceContext instanceContext);
    parameters:
    - id: request
      type: System.ServiceModel.Channels.Message
      description: "Komunikat żądania."
    - id: channel
      type: System.ServiceModel.IClientChannel
      description: "Kanał przychodzący."
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "Bieżące wystąpienie usługi."
    return:
      type: System.Object
      description: "Obiekt używany do skorelowania stanu. Ten obiekt został przekazany w <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply*>metody.</xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply*>"
  overload: System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)
  id: BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)
  parent: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  langs:
  - csharp
  name: BeforeSendReply(Message,Object)
  nameWithType: IDispatchMessageInspector.BeforeSendReply(Message,Object)
  fullName: System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(Message,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Metoda wywoływana po operacji zwrócił, ale przed odpowiedź jest wysyłana wiadomość."
  remarks: "Metoda BeforeSendReply umożliwia wykonanie akcji niestandardowych przed ich wysłaniem zwróconego komunikatu. `correlationState` Jest obiekt zwrócony od <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A>metody, których można użyć do wykonania korelacji między wywołaniami ruchu przychodzącego i wychodzącego do obsługi sieci zachowanie.</xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A>"
  example:
  - "The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.  \n  \n [!code-vb[Interceptors#7](~/add/codesnippet/visualbasic/interceptors.client/interceptors.vb#7)]\n [!code-cs[Interceptors#7](~/add/codesnippet/csharp/interceptors.client/interceptors.cs#7)]  \n  \n The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName> collection.  \n  \n [!code-vb[Interceptors#8](~/add/codesnippet/visualbasic/interceptors.client/insertingbehaviors.vb#8)]\n [!code-cs[Interceptors#8](~/add/codesnippet/csharp/interceptors.client/insertingbehaviors.cs#8)]  \n  \n The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public void BeforeSendReply (ref System.ServiceModel.Channels.Message reply, object correlationState);
    parameters:
    - id: reply
      type: System.ServiceModel.Channels.Message
      description: "Komunikat odpowiedzi. Ta wartość ma wartość null, jeśli operacja jest jednym ze sposobów."
    - id: correlationState
      type: System.Object
      description: "Zwróciła obiekt korelacji <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest*>metody.</xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest*>"
  overload: System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  isExternal: false
  name: AfterReceiveRequest(Message,IClientChannel,InstanceContext)
  nameWithType: IDispatchMessageInspector.AfterReceiveRequest(Message,IClientChannel,InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(Message,IClientChannel,InstanceContext)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.IClientChannel
  parent: System.ServiceModel
  isExternal: true
  name: IClientChannel
  nameWithType: IClientChannel
  fullName: System.ServiceModel.IClientChannel
- uid: System.ServiceModel.InstanceContext
  parent: System.ServiceModel
  isExternal: true
  name: InstanceContext
  nameWithType: InstanceContext
  fullName: System.ServiceModel.InstanceContext
- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)
  parent: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  isExternal: false
  name: BeforeSendReply(Message,Object)
  nameWithType: IDispatchMessageInspector.BeforeSendReply(Message,Object)
  fullName: System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(Message,Object)
- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest*
  parent: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  isExternal: false
  name: AfterReceiveRequest
  nameWithType: IDispatchMessageInspector.AfterReceiveRequest
- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply*
  parent: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  isExternal: false
  name: BeforeSendReply
  nameWithType: IDispatchMessageInspector.BeforeSendReply
