### YamlMime:ManagedReference
items:
- uid: System.Data.IDataAdapter
  id: IDataAdapter
  children:
  - System.Data.IDataAdapter.Fill(System.Data.DataSet)
  - System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  - System.Data.IDataAdapter.GetFillParameters
  - System.Data.IDataAdapter.MissingMappingAction
  - System.Data.IDataAdapter.MissingSchemaAction
  - System.Data.IDataAdapter.TableMappings
  - System.Data.IDataAdapter.Update(System.Data.DataSet)
  langs:
  - csharp
  name: IDataAdapter
  nameWithType: IDataAdapter
  fullName: System.Data.IDataAdapter
  type: Interface
  summary: "Umożliwia obiekt, aby zaimplementować element DataAdapter i reprezentuje zestaw metod i działania związane z właściwości mapowania, które są używane do wypełnienia i aktualizowania <xref href=&quot;System.Data.DataSet&quot;> </xref> i zaktualizować źródła danych.       <xref href=&quot;System.Data.IDbDataAdapter&quot;></xref>wystąpienia są dla źródeł danych, które są (lub podobne) relacyjnych baz danych za pomocą polecenia tekstowych (takich jak [!INCLUDE[tsql](~/add/includes/tsql-md.md)]), podczas gdy wystąpień IDataAdapter można można użyć dowolnego typu źródła danych."
  remarks: "Interfejs IDataAdapter umożliwia dziedziczące klasy do zaimplementowania klasy element DataAdapter, który reprezentuje mostek między źródłem danych a <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Aby uzyskać więcej informacji na temat klas element DataAdapter, zobacz [wypełnianie zestawu danych z element DataAdapter](~/add/includes/ajax-current-ext-md.md).       Aplikacja nie tworzy wystąpienie interfejsu IDataAdapter bezpośrednio, ale implementuje wystąpienia klasy, która dziedziczy IDataAdapter.       Klasy, które dziedziczą IDataAdapter musi implementować dziedziczone elementy członkowskie i zwykle określają dodatkowe elementy członkowskie Dodawanie funkcji specyficznych dla dostawcy. Na przykład definiuje interfejs IDataAdapter <xref:System.Data.IDataAdapter.Fill%2A>metody pobierającej <xref:System.Data.DataSet>jako parametr.</xref:System.Data.DataSet> </xref:System.Data.IDataAdapter.Fill%2A> Z kolei <xref:System.Data.OleDb.OleDbDataAdapter>klasa dziedziczy <xref:System.Data.Common.DbDataAdapter.Fill%2A>— Metoda i definiuje również dwie dodatkowe przeciążeń <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>metody prowadzące obiektu zestawu rekordów ADO jako parametr.</xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.OleDb.OleDbDataAdapter>"
  example:
  - "The following example uses the derived classes, <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlDataAdapter>, and <xref:System.Data.SqlClient.SqlConnection>, to select records from a database. The filled <xref:System.Data.DataSet> is then returned. To do this, the method is passed an initialized <xref:System.Data.DataSet>, a connection string, and a query string that is a Transact-SQL SELECT statement.  \n  \n [!code-vb[Classic WebData SqlDataAdapter Example#1](~/add/codesnippet/visualbasic/t-system.data.idataadapter_1.vb)]\n [!code-cs[Classic WebData SqlDataAdapter Example#1](~/add/codesnippet/csharp/t-system.data.idataadapter_1.cs)]"
  syntax:
    content: public interface IDataAdapter
  implements: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.Fill(System.Data.DataSet)
  id: Fill(System.Data.DataSet)
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: Fill(DataSet)
  nameWithType: IDataAdapter.Fill(DataSet)
  fullName: System.Data.IDataAdapter.Fill(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Dodaje lub aktualizuje wierszy w <xref href=&quot;System.Data.DataSet&quot;> </xref> do odpowiadają źródła danych przy użyciu <xref href=&quot;System.Data.DataSet&quot;> </xref> nazwy i tworzy <xref href=&quot;System.Data.DataTable&quot;> </xref> o nazwie &quot;Tabela&quot;."
  remarks: "Wypełnienie pobiera wierszy ze źródła danych przy użyciu instrukcji SELECT określonego przez skojarzony <xref:System.Data.IDbDataAdapter.SelectCommand%2A>Właściwości.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> Obiekt połączenia skojarzony z instrukcją SELECT musi być prawidłowy, ale nie musi być otwarty. Jeśli połączenie jest zamknięte przed wywołaniem Fill, jest otwarta do pobierania danych, następnie zamknięte. Jeśli połączenie jest otwarte przed wywołaniem Fill, pozostaje otwarty.       Operacja Fill następnie dodaje wiersze do miejsca docelowego <xref:System.Data.DataTable>obiekty w <xref:System.Data.DataSet>, tworzenie <xref:System.Data.DataTable>obiekty, jeśli nie już istnieją.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> Podczas tworzenia <xref:System.Data.DataTable>obiekty, operacja Fill zazwyczaj tworzy tylko kolumny Nazwa metadanych.</xref:System.Data.DataTable> Jednak jeśli <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>właściwość jest ustawiona na `AddWithKey`, również są tworzone odpowiednie klucze podstawowe i ograniczeń.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       Jeśli `SelectCommand` zwraca wyniki OUTER JOIN `DataAdapter` nie ustawia <xref:System.Data.DataTable.PrimaryKey%2A>wartości wynikowej <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> Zdefiniuj jawnie klucz podstawowy, aby upewnić się, że zduplikowane wiersze są rozpoznawane poprawnie. Aby uzyskać więcej informacji, zobacz [Definiowanie kluczy podstawowych](~/add/includes/ajax-current-ext-md.md).       Jeśli <xref:System.Data.IDataAdapter>napotka zduplikowane kolumny podczas wypełniania <xref:System.Data.DataTable>, generuje nazw dla kolejnych kolumn, za pomocą wzorca &quot;nazwakolumny1&quot;, &quot;nazwakolumny2&quot;, &quot;columnname3&quot; i tak dalej.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> Jeśli dane przychodzące zawiera kolumny bez nazwy, są umieszczane <xref:System.Data.DataSet>zgodnie ze wzorcem &quot;Kolumna1&quot;, &quot;Column2&quot; i tak dalej.</xref:System.Data.DataSet> Jeśli wiele zestawów wyników są dodawane do <xref:System.Data.DataSet>, każdy zestaw wyników jest umieszczany w osobnej tabeli.</xref:System.Data.DataSet> Zestawy wyników dodatkowe są nazywane przez dołączenie wartości całkowitych na wartości do nazwy określonej tabeli (na przykład &quot;Tabela&quot;, &quot;Tabela1&quot;, &quot;Tabela2&quot; i tak dalej). Aplikacje powinny ostrożność przy użyciu nazwy kolumn i tabel, aby upewnić się, że nie występują konflikty z tych wzorców nazewnictwa.       Po instrukcji SELECT, która jest używana do wypełniania <xref:System.Data.DataSet>zwraca wiele wyników, takich jak partii instrukcji SQL, jeśli jeden z wyników zawiera błąd, wszystkie kolejne wyniki są pominięty i nie zostały dodane do <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>       Możesz użyć metody Fill wiele razy w tym samym <xref:System.Data.DataTable>.</xref:System.Data.DataTable> Jeśli klucz podstawowy istnieje, przychodzących wierszy są scalane z pasujących wierszy, które już istnieją. Jeśli klucz podstawowy istnieje, przychodzących wierszy są dołączane do <xref:System.Data.DataTable>.</xref:System.Data.DataTable>      > [!NOTE] > Podczas przetwarzania wsadowego instrukcji SQL, które zwracają wiele wartości, implementacja wypełnienia i <xref:System.Data.IDataAdapter.FillSchema%2A>dostawcy danych .NET Framework pobiera informacje o schemacie dla pierwszego wyniku.</xref:System.Data.IDataAdapter.FillSchema%2A>"
  syntax:
    content: public int Fill (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;> </xref> umożliwia wypełnienie rekordów i w razie potrzeby schematu."
    return:
      type: System.Int32
      description: "Liczba wierszy pomyślnie dodane do lub odświeżenia w <xref href=&quot;System.Data.DataSet&quot;> </xref>. Nie zawiera wierszy objętych instrukcji, które niezwracanie wierszy."
  overload: System.Data.IDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType)
  nameWithType: IDataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.IDataAdapter.FillSchema(DataSet,SchemaType)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Dodaje <xref href=&quot;System.Data.DataTable&quot;> </xref> o nazwie &quot;Tabela&quot; do określonego <xref href=&quot;System.Data.DataSet&quot;> </xref> i konfiguruje schemat do dopasowania w źródle danych, na podstawie której określony <xref href=&quot;System.Data.SchemaType&quot;> </xref>."
  remarks: "Metoda FillSchema pobiera schemat ze źródła danych przy użyciu <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> Obiekt połączenia skojarzony z <xref:System.Data.IDbDataAdapter.SelectCommand%2A>musi być prawidłowy, ale nie musi być otwarty.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> Jeśli połączenie jest zamknięte przed wywołaniem FillSchema, jest otwarta do pobierania danych, następnie zamknięte. Jeśli połączenie jest otwarte przed wywołaniem FillSchema, pozostaje otwarty.       Operacja FillSchema dodaje <xref:System.Data.DataTable>do miejsca docelowego <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> Następnie dodaje kolumny <xref:System.Data.DataColumnCollection>z <xref:System.Data.DataTable>i konfiguruje następujące opcje <xref:System.Data.DataColumn>Właściwości, jeśli istnieją w źródle danych:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> Należy ustawić <xref:System.Data.DataColumn.AutoIncrementStep%2A>i <xref:System.Data.DataColumn.AutoIncrementSeed%2A>oddzielnie.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A>Konfiguruje również FillSchema <xref:System.Data.DataTable.PrimaryKey%2A>i <xref:System.Data.DataTable.Constraints%2A>Właściwości zgodnie z następującymi zasadami: - Jeśli jeden lub więcej kolumn klucza podstawowego są zwracane przez <xref:System.Data.IDbDataAdapter.SelectCommand%2A>są używane jako kolumny klucza podstawowego dla <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      — Jeśli nie kolumn klucza podstawowego są zwracane, ale są unikatowe kolumny, unikatowe kolumny są używane jako klucz podstawowy, jeśli wszystkie unikatowe kolumny mają wartości null. Jeśli dowolnej kolumny dopuszczają wartości null, <xref:System.Data.UniqueConstraint>jest dodawany do <xref:System.Data.ConstraintCollection>, ale <xref:System.Data.DataTable.PrimaryKey%2A>nie ustawiono właściwości.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      — Jeśli zarówno kolumn klucza podstawowego, jak i unikatowe kolumny są zwracane, kolumny klucza podstawowego są używane jako kolumny klucza podstawowego dla <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Należy pamiętać, że klucze podstawowe i ograniczenia unique są dodawane do <xref:System.Data.ConstraintCollection>zgodnie z poprzednich zasad, ale także inne ograniczenia typów nie są dodawane.</xref:System.Data.ConstraintCollection>       Jeśli klastrowany unikatowy indeks jest zdefiniowany w kolumnie lub kolumny w tabeli programu SQL Server i ograniczenia klucza podstawowego została zdefiniowana osobny zestaw kolumn, będzie zwracana nazwy kolumn w indeksu klastrowanego. Aby zwrócić nazwę lub nazwy kolumn klucza podstawowego, należy użyć wskazówki zapytania z instrukcji SELECT, która określa nazwę indeksu klucza podstawowego. Aby uzyskać więcej informacji na temat określania wskazówki zapytania, zobacz [wskazówki zapytania (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Jeśli <xref:System.Data.IDataAdapter>napotka zduplikowane kolumny podczas wypełniania <xref:System.Data.DataTable>, generuje nazw dla kolejnych kolumn, za pomocą wzorca &quot;nazwakolumny1&quot;, &quot;nazwakolumny2&quot;, &quot;columnname3&quot; i tak dalej.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> Jeśli dane przychodzące zawiera kolumny bez nazwy, są umieszczane <xref:System.Data.DataSet>zgodnie ze wzorcem &quot;Kolumna1&quot;, &quot;Column2&quot; i tak dalej.</xref:System.Data.DataSet> Jeśli wiele zestawów wyników są dodawane do <xref:System.Data.DataSet>, każdy zestaw wyników jest umieszczany w osobnej tabeli.</xref:System.Data.DataSet> Zestawy wyników dodatkowe są nazywane przez dołączenie wartości całkowitych na wartości do nazwy określonej tabeli (na przykład &quot;Tabela&quot;, &quot;Tabela1&quot;, &quot;Tabela2&quot; i tak dalej). Aplikacje powinny ostrożność przy użyciu nazwy kolumn i tabel, aby upewnić się, że nie występują konflikty z tych wzorców nazewnictwa.       Operacja FillSchema nie zwraca żadnych wierszy. Użyj <xref:System.Data.IDataAdapter.Fill%2A>metody dodawania wierszy do <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter.Fill%2A>"
  syntax:
    content: public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "<xref href=&quot;System.Data.DataSet&quot;> </xref> Do wypełnienia ze schematem ze źródła danych."
    - id: schemaType
      type: System.Data.SchemaType
      description: "Jeden z <xref href=&quot;System.Data.SchemaType&quot;> </xref> wartości."
    return:
      type: System.Data.DataTable[]
      description: "Tablica <xref href=&quot;System.Data.DataTable&quot;> </xref> obiektów, które zawierają informacje o schemacie zwracane ze źródła danych."
  overload: System.Data.IDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.GetFillParameters
  id: GetFillParameters
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: GetFillParameters()
  nameWithType: IDataAdapter.GetFillParameters()
  fullName: System.Data.IDataAdapter.GetFillParameters()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera parametry ustawione przez użytkownika podczas wykonywania instrukcji SQL SELECT."
  remarks: "```  \nprivate static void GetParameters(String connectiongString) {  \n           using (SqlConnection conn = new SqlConnection(connectiongString)) {  \n              String queryString = \"Select [CourseID],[Title],[Credits] from [MySchool].[dbo].[Course] where [Year]=@Year and [Credits]>=@Credits\";   \n              SqlParameter year = new SqlParameter(\"@Year\", 2012);   \n              SqlParameter credits = new SqlParameter(\"@Credits\", SqlDbType.Int, 4, \"Credits\");   \n              credits.Value = 4; SqlCommand command = new SqlCommand(queryString, conn);   \n              command.Parameters.Add(year);   \n              command.Parameters.Add(credits);   \n              IDbDataAdapter mySchool = new SqlDataAdapter(command);   \n              IDataParameter[] parameters = mySchool.GetFillParameters();  \n              Console.WriteLine(\"{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}\", \"ParameterName\", \"SourceColumn\", \"Direction\", \"DbType\", \"Value\");   \n              foreach (IDataParameter parameter in parameters) {   \n                 Console.WriteLine(\"{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}\", parameter.ParameterName, parameter.SourceColumn, parameter.Direction, parameter.DbType, parameter.Value);   \n              }  \n           }  \n        }  \n```"
  syntax:
    content: public System.Data.IDataParameter[] GetFillParameters ();
    parameters: []
    return:
      type: System.Data.IDataParameter[]
      description: "Tablica <xref href=&quot;System.Data.IDataParameter&quot;> </xref> obiektów, które zawiera parametry ustawiony przez użytkownika."
  overload: System.Data.IDataAdapter.GetFillParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.MissingMappingAction
  id: MissingMappingAction
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: MissingMappingAction
  nameWithType: IDataAdapter.MissingMappingAction
  fullName: System.Data.IDataAdapter.MissingMappingAction
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Wskazuje lub określa, czy źródło Niemapowane tabele lub kolumny są przekazywane z ich nazwy źródła celu filtrowane lub Zgłoś błąd."
  remarks: "<xref:System.Data.IDataAdapter.TableMappings%2A>Właściwość zapewnia wzorca mapowanie między zwróconych rekordów i <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.IDataAdapter.TableMappings%2A>"
  syntax:
    content: public System.Data.MissingMappingAction MissingMappingAction { get; set; }
    return:
      type: System.Data.MissingMappingAction
      description: "Jeden z <xref href=&quot;System.Data.MissingMappingAction&quot;> </xref> wartości. Wartość domyślna to <xref uid=&quot;langword_csharp_Passthrough&quot; name=&quot;Passthrough&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.IDataAdapter.MissingMappingAction*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Podana wartość nie jest jednym z <xref href=&quot;System.Data.MissingMappingAction&quot;> </xref> wartości."
  platform:
  - net462
- uid: System.Data.IDataAdapter.MissingSchemaAction
  id: MissingSchemaAction
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: MissingSchemaAction
  nameWithType: IDataAdapter.MissingSchemaAction
  fullName: System.Data.IDataAdapter.MissingSchemaAction
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Wskazuje lub określa, czy Brak źródła tabel, kolumn i ich relacji zostaną dodane do schematu zestawu danych, ignorowanie, lub spowodować wystąpienie błędu wygenerowany."
  syntax:
    content: public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }
    return:
      type: System.Data.MissingSchemaAction
      description: "Jeden z <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref> wartości. Wartość domyślna to <xref uid=&quot;langword_csharp_Add&quot; name=&quot;Add&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.IDataAdapter.MissingSchemaAction*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Podana wartość nie jest jednym z <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref> wartości."
  platform:
  - net462
- uid: System.Data.IDataAdapter.TableMappings
  id: TableMappings
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: TableMappings
  nameWithType: IDataAdapter.TableMappings
  fullName: System.Data.IDataAdapter.TableMappings
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Wskazuje, jak tabela źródłowa jest zamapowana do tabeli dataset."
  remarks: "<xref:System.Data.IDataAdapter>Używa tylko mapowania dla tabeli źródłowej o nazwie &quot;Tabela&quot;.</xref:System.Data.IDataAdapter> Wszystkie wybierz instrukcje INSERT, DELETE i UPDATE zwracający dane musi to zrobić przy użyciu nazw kolumn spójne. Zwrócony w rekordach nazwy kolumn muszą być unikatowe, w przeciwnym razie kolumny o takich samych nazwach zastępowania poprzednie dane. Na <xref:System.Data.IDataAdapter.Update%2A>, tylko tabeli zamapowane do tabeli źródłowej o nazwie &quot;Tabeli&quot; będzie mieć jego zmiany uzgodnione.</xref:System.Data.IDataAdapter.Update%2A>"
  syntax:
    content: public System.Data.ITableMappingCollection TableMappings { get; }
    return:
      type: System.Data.ITableMappingCollection
      description: "Kolekcja, która zapewnia wzorca mapowanie między zwróconych rekordów i <xref href=&quot;System.Data.DataSet&quot;> </xref>. Wartość domyślna to pustej kolekcji."
  overload: System.Data.IDataAdapter.TableMappings*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.Update(System.Data.DataSet)
  id: Update(System.Data.DataSet)
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: Update(DataSet)
  nameWithType: IDataAdapter.Update(DataSet)
  fullName: System.Data.IDataAdapter.Update(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Wywołuje odpowiednie instrukcje INSERT, UPDATE lub DELETE dla każdego wstawienia, aktualizacji lub usunięcia wiersza w określonej <xref href=&quot;System.Data.DataSet&quot;> </xref> z <xref href=&quot;System.Data.DataTable&quot;> </xref> o nazwie &quot;Tabela&quot;."
  remarks: "Gdy aplikacja wywołuje metody aktualizacji <xref:System.Data.IDataAdapter>sprawdza <xref:System.Data.DataRow.RowState%2A>właściwości oraz wykonuje wymaganych instrukcji INSERT, UPDATE lub DELETE wielokrotnie powtarzane dla każdego wiersza, na podstawie kolejności indeksów skonfigurowane w <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.IDataAdapter> Na przykład aktualizacji może wykonać instrukcji DELETE, a następnie instrukcji INSERT, a następnie inne instrukcji DELETE, ze względu na kolejność wierszy w <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Należy pamiętać, że oświadczenia te nie są wykonywane jako przetwarzania wsadowego; Każdy wiersz jest aktualizowana pojedynczo. Aplikacja może wywołać <xref:System.Data.DataSet.GetChanges%2A>metodę, jeśli musi sterowania sekwencją typów instrukcji (na przykład wstawia przed aktualizacji).</xref:System.Data.DataSet.GetChanges%2A> Aby uzyskać więcej informacji, zobacz [aktualizowanie źródła danych z obiektów DataAdapter](~/add/includes/ajax-current-ext-md.md).       Jeśli nie zostały określone instrukcji INSERT, UPDATE lub DELETE, <xref:System.Data.Common.DataAdapter.Update%2A>Metoda generuje wyjątek.</xref:System.Data.Common.DataAdapter.Update%2A> Można jednak utworzyć <xref:System.Data.SqlClient.SqlCommandBuilder>lub <xref:System.Data.OleDb.OleDbCommandBuilder>obiekt, aby automatycznie wygenerować instrukcji SQL aktualizacje pojedynczej tabeli, jeśli ustawisz `SelectCommand` właściwości dostawcy danych .NET Framework.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Następnie żadnych dodatkowych instrukcji SQL, które nie zostały ustawione są generowane przez CommandBuilder. Tę logikę generowania wymaga informacji o kolumnie klucza znajdować się w <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Aby uzyskać więcej informacji, zobacz [generowania poleceń CommandBuilders](~/add/includes/ajax-current-ext-md.md).       <xref:System.Data.Common.DataAdapter.Update%2A>Metoda pobiera wiersze z tabeli umieszczone w pierwszym mapowania przed wykonaniem operacji aktualizacji.</xref:System.Data.Common.DataAdapter.Update%2A> <xref:System.Data.Common.DataAdapter.Update%2A>Następnie aktualizuje wiersza przy użyciu wartości <xref:System.Data.IDbCommand.UpdatedRowSource%2A>Właściwości.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DataAdapter.Update%2A> Dodatkowe wiersze zwracane są ignorowane.       Po załadowaniu danych do <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>zdarzenia, dzięki czemu użytkownik do sprawdzenia uzgodniony <xref:System.Data.DataSet>wiersza i wszystkie dane wyjściowe Parametry zwracane przez polecenie.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> Po wierszu aktualizacji pomyślnie, zmiany w tym wierszu są akceptowane.       Podczas korzystania z aktualizacji, kolejność wykonywania jest następująca: 1.  Wartości w <xref:System.Data.DataRow>zostaną przeniesione do wartości parametrów.</xref:System.Data.DataRow>      2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>Zdarzenie jest wywoływane.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  Wykonuje polecenia.      4.  Jeśli polecenie ma ustawioną wartość `FirstReturnedRecord`, a następnie pierwszy zwrócony wynik jest umieszczany w <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  W przypadku parametrów wyjściowych są umieszczane w <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>Zdarzenie jest wywoływane.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>jest wywoływana.</xref:System.Data.DataRow.AcceptChanges%2A>       Każde polecenie skojarzone z <xref:System.Data.IDataAdapter>zwykle ma kolekcję parametrów skojarzonych z nim.</xref:System.Data.IDataAdapter> Parametry są zamapowane do bieżącego wiersza za pośrednictwem `SourceColumn` i `SourceVersion` właściwości dostawcy danych .NET Framework `Parameter` klasy. `SourceColumn`odwołuje się do <xref:System.Data.DataTable>kolumny który <xref:System.Data.IDataAdapter>odwołania do uzyskania wartości parametrów dla bieżącego wiersza.</xref:System.Data.IDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`odwołuje się do nazwy kolumny Niemapowane przed mapowań tabeli zostały zastosowane. Jeśli `SourceColumn` odwołuje się do nieistniejącej kolumny akcję wykonywaną zależy od jednego z następujących <xref:System.Data.MissingMappingAction>wartości.</xref:System.Data.MissingMappingAction>      | Wartość wyliczenia | Działania podjęte |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Korzystać z nazwy kolumny źródła i nazwy tabeli w <xref:System.Data.DataSet>nie jest obecny. |   | `MissingMappingAction.Ignore`| A <xref:System.SystemException>jest generowany.</xref:System.SystemException> </xref:System.Data.DataSet> Podczas mapowania są jawnie ustawiona, brakuje mapowania w dla parametru wejściowego jest zazwyczaj spowodowane błędem. |   | `MissingMappingAction.Error`| Generowany jest <xref:System.SystemException>. |       `SourceColumn` Właściwości są również używane do mapowania wartości dla danych wyjściowych lub parametry wejścia/wyjścia z powrotem do `DataSet`.</xref:System.SystemException> Wyjątek jest generowany, gdy odwołuje się do nieistniejącej kolumny.       `SourceVersion` Właściwości dostawcy danych .NET Framework `Parameter` klasy określa, czy użyć `Original`, `Current`, lub `Proposed` wersja wartości kolumny. Ta funkcja jest często używany do uwzględnienia oryginalnych wartości w klauzuli WHERE instrukcji UPDATE, aby wyszukać naruszeń optymistycznej współbieżności.      > [!NOTE] > Jeśli wystąpi błąd podczas aktualizowania wiersza, jest zgłaszany wyjątek i wykonywania aktualizacji nie jest już obsługiwana. Aby kontynuować operację aktualizacji bez generowania wyjątków, gdy wystąpi błąd, ustaw <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>właściwości `true` przed wywołaniem <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> Mogą również odpowiadać błędów na podstawie na wiersz, w ramach `RowUpdated` zdarzeń element DataAdapter. Aby kontynuować operację aktualizacji bez generowania wyjątku `RowUpdated` zdarzeń, ustaw <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>Właściwość <xref:System.Data.Common.RowUpdatedEventArgs>do <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to <xref:System.Data.Common.DataAdapter.Update%2A> the data source. This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.  \n  \n [!code-cs[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/add/codesnippet/csharp/m-system.data.idataadapt_1.cs)]\n [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/add/codesnippet/visualbasic/m-system.data.idataadapt_1.vb)]"
  syntax:
    content: public int Update (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "<xref href=&quot;System.Data.DataSet&quot;> </xref> Używana do aktualizowania źródła danych."
    return:
      type: System.Int32
      description: "Liczba pomyślnie zaktualizowanych z <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.IDataAdapter.Update*
  exceptions:
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Próba wykonania instrukcji INSERT, UPDATE lub DELETE spowodowała zero zmodyfikowanych rekordów."
  platform:
  - net462
references:
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.DBConcurrencyException
  parent: System.Data
  isExternal: false
  name: DBConcurrencyException
  nameWithType: DBConcurrencyException
  fullName: System.Data.DBConcurrencyException
- uid: System.Data.IDataAdapter.Fill(System.Data.DataSet)
  parent: System.Data.IDataAdapter
  isExternal: false
  name: Fill(DataSet)
  nameWithType: IDataAdapter.Fill(DataSet)
  fullName: System.Data.IDataAdapter.Fill(DataSet)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.IDataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType)
  nameWithType: IDataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.IDataAdapter.FillSchema(DataSet,SchemaType)
- uid: System.Data.DataTable[]
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable[]
  spec.csharp:
  - uid: System.Data.DataTable
    name: DataTable
    nameWithType: DataTable
    fullName: DataTable[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.SchemaType
  parent: System.Data
  isExternal: false
  name: SchemaType
  nameWithType: SchemaType
  fullName: System.Data.SchemaType
- uid: System.Data.IDataAdapter.GetFillParameters
  parent: System.Data.IDataAdapter
  isExternal: false
  name: GetFillParameters()
  nameWithType: IDataAdapter.GetFillParameters()
  fullName: System.Data.IDataAdapter.GetFillParameters()
- uid: System.Data.IDataParameter[]
  parent: System.Data
  isExternal: false
  name: IDataParameter
  nameWithType: IDataParameter
  fullName: System.Data.IDataParameter[]
  spec.csharp:
  - uid: System.Data.IDataParameter
    name: IDataParameter
    nameWithType: IDataParameter
    fullName: IDataParameter[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.IDataAdapter.MissingMappingAction
  parent: System.Data.IDataAdapter
  isExternal: false
  name: MissingMappingAction
  nameWithType: IDataAdapter.MissingMappingAction
  fullName: System.Data.IDataAdapter.MissingMappingAction
- uid: System.Data.MissingMappingAction
  parent: System.Data
  isExternal: false
  name: MissingMappingAction
  nameWithType: MissingMappingAction
  fullName: System.Data.MissingMappingAction
- uid: System.Data.IDataAdapter.MissingSchemaAction
  parent: System.Data.IDataAdapter
  isExternal: false
  name: MissingSchemaAction
  nameWithType: IDataAdapter.MissingSchemaAction
  fullName: System.Data.IDataAdapter.MissingSchemaAction
- uid: System.Data.MissingSchemaAction
  parent: System.Data
  isExternal: false
  name: MissingSchemaAction
  nameWithType: MissingSchemaAction
  fullName: System.Data.MissingSchemaAction
- uid: System.Data.IDataAdapter.TableMappings
  parent: System.Data.IDataAdapter
  isExternal: false
  name: TableMappings
  nameWithType: IDataAdapter.TableMappings
  fullName: System.Data.IDataAdapter.TableMappings
- uid: System.Data.ITableMappingCollection
  parent: System.Data
  isExternal: false
  name: ITableMappingCollection
  nameWithType: ITableMappingCollection
  fullName: System.Data.ITableMappingCollection
- uid: System.Data.IDataAdapter.Update(System.Data.DataSet)
  parent: System.Data.IDataAdapter
  isExternal: false
  name: Update(DataSet)
  nameWithType: IDataAdapter.Update(DataSet)
  fullName: System.Data.IDataAdapter.Update(DataSet)
- uid: System.Data.IDataAdapter.Fill*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: Fill
  nameWithType: IDataAdapter.Fill
- uid: System.Data.IDataAdapter.FillSchema*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: FillSchema
  nameWithType: IDataAdapter.FillSchema
- uid: System.Data.IDataAdapter.GetFillParameters*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: GetFillParameters
  nameWithType: IDataAdapter.GetFillParameters
- uid: System.Data.IDataAdapter.MissingMappingAction*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: MissingMappingAction
  nameWithType: IDataAdapter.MissingMappingAction
- uid: System.Data.IDataAdapter.MissingSchemaAction*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: MissingSchemaAction
  nameWithType: IDataAdapter.MissingSchemaAction
- uid: System.Data.IDataAdapter.TableMappings*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: TableMappings
  nameWithType: IDataAdapter.TableMappings
- uid: System.Data.IDataAdapter.Update*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: Update
  nameWithType: IDataAdapter.Update
