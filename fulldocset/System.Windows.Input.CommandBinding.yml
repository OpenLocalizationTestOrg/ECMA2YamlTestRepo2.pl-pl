### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.CommandBinding
  id: CommandBinding
  children:
  - System.Windows.Input.CommandBinding.#ctor
  - System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)
  - System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)
  - System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)
  - System.Windows.Input.CommandBinding.CanExecute
  - System.Windows.Input.CommandBinding.Command
  - System.Windows.Input.CommandBinding.Executed
  - System.Windows.Input.CommandBinding.PreviewCanExecute
  - System.Windows.Input.CommandBinding.PreviewExecuted
  langs:
  - csharp
  name: CommandBinding
  nameWithType: CommandBinding
  fullName: System.Windows.Input.CommandBinding
  type: Class
  summary: "Wiąże <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> do obsługi zdarzeń, które implementują polecenia."
  remarks: "Polecenie z kojarzy elementem CommandBinding <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> i <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> zdarzenia, które implementuje i ustalić stan polecenia.</xref:System.Windows.Input.CommandBinding.CanExecute> </xref:System.Windows.Input.CommandBinding.PreviewCanExecute> </xref:System.Windows.Input.CommandBinding.Executed> </xref:System.Windows.Input.CommandBinding.PreviewExecuted>       Gdy <xref:System.Windows.Input.RoutedCommand.Execute%2A>lub <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>Metoda <xref:System.Windows.Input.RoutedCommand>jest wywoływana <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> lub <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> zdarzenia są generowane w elemencie docelowym polecenia.</xref:System.Windows.Input.CommandBinding.CanExecute> </xref:System.Windows.Input.CommandBinding.PreviewCanExecute> </xref:System.Windows.Input.CommandBinding.Executed> </xref:System.Windows.Input.CommandBinding.PreviewExecuted> </xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.RoutedCommand.CanExecute%2A> </xref:System.Windows.Input.RoutedCommand.Execute%2A>  Jeśli element docelowy polecenia CommandBinding polecenia, są nazywane odpowiednie programy obsługi.  Jeśli element docelowy polecenia nie ma CommandBinding polecenia, zdarzenia są kierowane za pośrednictwem elementu drzewa, dopóki nie zostanie znaleziony element, który jest elementem CommandBinding.       Elementem CommandBinding ma ograniczone korzystanie z <xref:System.Windows.Input.ICommand>czyli nie<xref:System.Windows.Input.RoutedCommand>.</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.ICommand>  Jest to spowodowane elementem CommandBinding wiąże polecenie <xref:System.Windows.Input.ExecutedRoutedEventHandler>i <xref:System.Windows.Input.CanExecuteRoutedEventHandler>który słuchać <xref:System.Windows.Input.CommandManager.Executed>i <xref:System.Windows.Input.CommandManager.CanExecute>zdarzenia, które są rozsyłane wywoływane, gdy <xref:System.Windows.Input.RoutedCommand.Execute%2A>i <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>metody <xref:System.Windows.Input.RoutedCommand>są nazywane.</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.RoutedCommand.CanExecute%2A> </xref:System.Windows.Input.RoutedCommand.Execute%2A> </xref:System.Windows.Input.CommandManager.CanExecute> </xref:System.Windows.Input.CommandManager.Executed> </xref:System.Windows.Input.CanExecuteRoutedEventHandler> </xref:System.Windows.Input.ExecutedRoutedEventHandler>"
  syntax:
    content: public class CommandBinding
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.#ctor
  id: '#ctor'
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CommandBinding()
  nameWithType: CommandBinding.CommandBinding()
  fullName: System.Windows.Input.CommandBinding.CommandBinding()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> klasy."
  syntax:
    content: public CommandBinding ();
    parameters: []
  overload: System.Windows.Input.CommandBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)
  id: '#ctor(System.Windows.Input.ICommand)'
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CommandBinding(ICommand)
  nameWithType: CommandBinding.CommandBinding(ICommand)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> przy użyciu określonego <xref:System.Windows.Input.ICommand>.</xref:System.Windows.Input.ICommand>"
  syntax:
    content: public CommandBinding (System.Windows.Input.ICommand command);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "Polecenie, aby utworzyć nowy <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> na."
  overload: System.Windows.Input.CommandBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)
  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)'
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CommandBinding(ICommand,ExecutedRoutedEventHandler)
  nameWithType: CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> przy użyciu określonego <xref:System.Windows.Input.ICommand>i określonego <xref href=&quot;System.Windows.Input.CommandBinding.Executed&quot;> </xref> obsługi zdarzeń.</xref:System.Windows.Input.ICommand>"
  syntax:
    content: public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "Polecenie, aby utworzyć nowy <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> na."
    - id: executed
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: "Program obsługi dla <xref href=&quot;System.Windows.Input.CommandBinding.Executed&quot;> </xref> zdarzeń na nowym <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref>."
  overload: System.Windows.Input.CommandBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)
  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)'
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
  nameWithType: CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> przy użyciu określonego <xref:System.Windows.Input.ICommand>i określonego <xref href=&quot;System.Windows.Input.CommandBinding.Executed&quot;> </xref> i <xref href=&quot;System.Windows.Input.CommandBinding.CanExecute&quot;> </xref> procedury obsługi zdarzeń.</xref:System.Windows.Input.ICommand>"
  syntax:
    content: public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed, System.Windows.Input.CanExecuteRoutedEventHandler canExecute);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "Polecenie, aby utworzyć nowy <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> na."
    - id: executed
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: "Program obsługi dla <xref href=&quot;System.Windows.Input.CommandBinding.Executed&quot;> </xref> zdarzeń na nowym <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref>."
    - id: canExecute
      type: System.Windows.Input.CanExecuteRoutedEventHandler
      description: "Program obsługi dla <xref href=&quot;System.Windows.Input.CommandBinding.CanExecute&quot;> </xref> zdarzeń na nowym <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref>."
  overload: System.Windows.Input.CommandBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.CanExecute
  id: CanExecute
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CanExecute
  nameWithType: CommandBinding.CanExecute
  fullName: System.Windows.Input.CommandBinding.CanExecute
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Występuje, gdy polecenie skojarzone z tym <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> inicjuje sprawdzenie w celu określenia, czy polecenie może być wykonywane w elemencie docelowym polecenia."
  remarks: "Gdy <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>Metoda <xref:System.Windows.Input.RoutedCommand>jest wywoływana <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>zdarzenie jest zgłaszane w elemencie docelowym polecenia.</xref:System.Windows.Input.CommandBinding.PreviewCanExecute> </xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.RoutedCommand.CanExecute%2A>  Jeśli zdarzenie nie jest obsługiwane, CanExecute zdarzenie jest wywoływane.  Jeśli element docelowy polecenia ma <xref:System.Windows.Input.CommandBinding>polecenia, w tym obsługi CanExecute <xref:System.Windows.Input.CommandBinding>jest wywoływana.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding>  Jeśli nie ma element docelowy polecenia <xref:System.Windows.Input.CommandBinding>polecenia, dymki zdarzeń CanExecute w górę drzewa element wyszukiwanie element, który ma <xref:System.Windows.Input.CommandBinding>skojarzonego z poleceniem.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding>      <a name=&quot;routedEventInfo_CanExecute&quot;></a>## Przesyłane informacje o zdarzeniach |||   |-|-|   | Pole identyfikatora | <xref:System.Windows.Input.CommandManager.CanExecuteEvent>|   | Strategii routingu | Propagacji |   | Delegat | <xref:System.Windows.Input.CanExecuteRoutedEventHandler>|      Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>.</xref:System.Windows.Input.CommandBinding.PreviewCanExecute> </xref:System.Windows.Input.CanExecuteRoutedEventHandler> </xref:System.Windows.Input.CommandManager.CanExecuteEvent>"
  example:
  - "The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.  \n  \n [!code-xml[commandwithhandler#CommandHandlerCommandBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlercommandbinding)]  \n  \n [!code-cs[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/csharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerbindinginit)]\n [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/visualbasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerbindinginit)]  \n  \n The following shows the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.  \n  \n [!code-cs[commandwithhandler#CommandHandlerCanExecuteHandler](~/add/codesnippet/csharp/commandWithHandler/Window1.xaml.cs#commandhandlercanexecutehandler)]\n [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/add/codesnippet/visualbasic/commandWithHandler/Window1.xaml.vb#commandhandlercanexecutehandler)]"
  syntax:
    content: public event System.Windows.Input.CanExecuteRoutedEventHandler CanExecute;
    return:
      type: System.Windows.Input.CanExecuteRoutedEventHandler
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.Command
  id: Command
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: Command
  nameWithType: CommandBinding.Command
  fullName: System.Windows.Input.CommandBinding.Command
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Pobiera lub ustawia <xref:System.Windows.Input.ICommand>skojarzony z tym <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref>.</xref:System.Windows.Input.ICommand>"
  remarks: ''
  example:
  - "The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.  \n  \n [!code-xml[commandWithHandler#CommandHandlerCommandBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlercommandbinding)]  \n  \n [!code-cs[commandhandlerprocedural#CommandHandlerBindingInit](~/add/codesnippet/csharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerbindinginit)]\n [!code-vb[commandhandlerprocedural#CommandHandlerBindingInit](~/add/codesnippet/visualbasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerbindinginit)]  \n  \n The following shows the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.  \n  \n [!code-cs[commandWithHandler#CommandHandlerCanExecuteHandler](~/add/codesnippet/csharp/commandWithHandler/Window1.xaml.cs#commandhandlercanexecutehandler)]\n [!code-vb[commandWithHandler#CommandHandlerCanExecuteHandler](~/add/codesnippet/visualbasic/commandWithHandler/Window1.xaml.vb#commandhandlercanexecutehandler)]  \n  \n The following shows the <xref:System.Windows.Input.ExecutedRoutedEventHandler> which creates a <xref:System.Windows.MessageBox> when the command is executed.  \n  \n [!code-cs[commandWithHandler#CommandHandlerExecutedHandler](~/add/codesnippet/csharp/commandWithHandler/Window1.xaml.cs#commandhandlerexecutedhandler)]\n [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/add/codesnippet/visualbasic/commandWithHandler/Window1.xaml.vb#commandhandlerexecutedhandler)]"
  syntax:
    content: public System.Windows.Input.ICommand Command { get; set; }
    return:
      type: System.Windows.Input.ICommand
      description: "Polecenie skojarzone z tym powiązaniem."
  overload: System.Windows.Input.CommandBinding.Command*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.Executed
  id: Executed
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: Executed
  nameWithType: CommandBinding.Executed
  fullName: System.Windows.Input.CommandBinding.Executed
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Występuje, gdy polecenie skojarzone z tym <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> wykonuje."
  remarks: "Gdy <xref:System.Windows.Input.RoutedCommand>wykonuje, uruchamia <xref:System.Windows.Input.CommandBinding.PreviewExecuted>zdarzeń w elemencie docelowym polecenia.</xref:System.Windows.Input.CommandBinding.PreviewExecuted> </xref:System.Windows.Input.RoutedCommand>  Jeśli <xref:System.Windows.Input.CommandBinding.PreviewExecuted>zdarzenie nie jest obsługiwane, EXECUTE zdarzenie jest zgłaszane w elemencie docelowym polecenia.</xref:System.Windows.Input.CommandBinding.PreviewExecuted>  Jeśli element docelowy polecenia ma <xref:System.Windows.Input.CommandBinding>dla danego polecenia, program obsługi EXECUTE tego <xref:System.Windows.Input.CommandBinding>jest wywoływana.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding>  Jeśli nie ma element docelowy polecenia <xref:System.Windows.Input.CommandBinding>tego określonego polecenia zdarzenia EXECUTE propaguje górę drzewa element wyszukiwanie element, który ma <xref:System.Windows.Input.CommandBinding>skojarzonego z poleceniem.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding>  Jeśli <xref:System.Windows.Input.CommandBinding>nie zostanie znaleziony, polecenie nie jest obsługiwana.</xref:System.Windows.Input.CommandBinding>      <a name=&quot;routedEventInfo_Executed&quot;></a>## Przesyłane informacje o zdarzeniach |||   |-|-|   | Pole identyfikatora | <xref:System.Windows.Input.CommandManager.ExecutedEvent>|   | Strategii routingu | Propagacji |   | Delegat | <xref:System.Windows.Input.ExecutedRoutedEventHandler>|      Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.Input.CommandBinding.PreviewExecuted>.</xref:System.Windows.Input.CommandBinding.PreviewExecuted> </xref:System.Windows.Input.ExecutedRoutedEventHandler> </xref:System.Windows.Input.CommandManager.ExecutedEvent>"
  example:
  - "The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.  \n  \n [!code-xml[commandwithhandler#CommandHandlerCommandBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlercommandbinding)]  \n  \n [!code-cs[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/csharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerbindinginit)]\n [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/visualbasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerbindinginit)]  \n  \n The following shows the <xref:System.Windows.Input.ExecutedRoutedEventHandler> which creates a <xref:System.Windows.MessageBox> when the command is executed.  \n  \n [!code-cs[commandWithHandler#CommandHandlerExecutedHandler](~/add/codesnippet/csharp/commandWithHandler/Window1.xaml.cs#commandhandlerexecutedhandler)]\n [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/add/codesnippet/visualbasic/commandWithHandler/Window1.xaml.vb#commandhandlerexecutedhandler)]"
  syntax:
    content: public event System.Windows.Input.ExecutedRoutedEventHandler Executed;
    return:
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.PreviewCanExecute
  id: PreviewCanExecute
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: PreviewCanExecute
  nameWithType: CommandBinding.PreviewCanExecute
  fullName: System.Windows.Input.CommandBinding.PreviewCanExecute
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Występuje, gdy polecenie skojarzone z tym <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> inicjuje sprawdzenie w celu określenia, czy polecenie może być wykonywane w bieżącym elemencie docelowym polecenia."
  remarks: "Gdy <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>Metoda <xref:System.Windows.Input.RoutedCommand>jest nazywany PreviewCanExecute zdarzenie jest zgłaszane w elemencie docelowym polecenia, jeśli element docelowy polecenia ma <xref:System.Windows.Input.CommandBinding>dla polecenia.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.RoutedCommand.CanExecute%2A> Następnie przy użyciu <xref:System.Windows.Input.CommandBinding.CanExecute>obsługę, która <xref:System.Windows.Input.CommandBinding>jest wywoływana.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding.CanExecute>  Jeśli nie ma element docelowy polecenia <xref:System.Windows.Input.CommandBinding>polecenia, <xref:System.Windows.Input.CommandBinding.CanExecute>dymki zdarzeń w górę drzewa element wyszukiwanie element, który ma <xref:System.Windows.Input.CommandBinding>skojarzonego z poleceniem.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding.CanExecute> </xref:System.Windows.Input.CommandBinding>  Jeśli zdarzenie nie jest obsługiwane, <xref:System.Windows.Input.CommandBinding.CanExecute>zdarzenie jest wywoływane.</xref:System.Windows.Input.CommandBinding.CanExecute>      <a name=&quot;routedEventInfo_PreviewCanExecute&quot;></a>## Przesyłane informacje o zdarzeniach |||   |-|-|   | Pole identyfikatora | <xref:System.Windows.Input.CommandManager.PreviewCanExecuteEvent>|   | Strategii routingu | Tunelowanie |   | Delegat | <xref:System.Windows.Input.CanExecuteRoutedEventHandler>|      Odpowiednie zdarzenie propagacji jest <xref:System.Windows.Input.CommandBinding.CanExecute>.</xref:System.Windows.Input.CommandBinding.CanExecute> </xref:System.Windows.Input.CanExecuteRoutedEventHandler> </xref:System.Windows.Input.CommandManager.PreviewCanExecuteEvent>"
  syntax:
    content: public event System.Windows.Input.CanExecuteRoutedEventHandler PreviewCanExecute;
    return:
      type: System.Windows.Input.CanExecuteRoutedEventHandler
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.PreviewExecuted
  id: PreviewExecuted
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: PreviewExecuted
  nameWithType: CommandBinding.PreviewExecuted
  fullName: System.Windows.Input.CommandBinding.PreviewExecuted
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Występuje, gdy polecenie skojarzone z tym <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> wykonuje."
  remarks: "Gdy <xref:System.Windows.Input.RoutedCommand>wykonuje, zgłasza zdarzenie PreviewExecuted w elemencie docelowym polecenia.</xref:System.Windows.Input.RoutedCommand>  Jeśli element docelowy polecenia ma <xref:System.Windows.Input.CommandBinding>polecenia PreviewExecuted obsługę, która <xref:System.Windows.Input.CommandBinding>jest wywoływana.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding>  Jeśli nie ma element docelowy polecenia <xref:System.Windows.Input.CommandBinding>polecenia PreviewExecuted tuneli zdarzenia w dół drzewa element wyszukiwanie element, który ma <xref:System.Windows.Input.CommandBinding>skojarzonego z poleceniem.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding>  Jeśli zdarzenie preview nie jest obsługiwane, <xref:System.Windows.Input.CommandBinding.Executed>zdarzenie jest wywoływane na elemencie docelowym polecenia.</xref:System.Windows.Input.CommandBinding.Executed>      <a name=&quot;routedEventInfo_PreviewExecuted&quot;></a>## Przesyłane informacje o zdarzeniach |||   |-|-|   | Pole identyfikatora | <xref:System.Windows.Input.CommandManager.PreviewExecutedEvent>|   | Strategii routingu | Tunelowanie |   | Delegat | <xref:System.Windows.Input.ExecutedRoutedEventHandler>|      Odpowiednie zdarzenie propagacji jest <xref:System.Windows.Input.CommandBinding.Executed>.</xref:System.Windows.Input.CommandBinding.Executed> </xref:System.Windows.Input.ExecutedRoutedEventHandler> </xref:System.Windows.Input.CommandManager.PreviewExecutedEvent>"
  syntax:
    content: public event System.Windows.Input.ExecutedRoutedEventHandler PreviewExecuted;
    return:
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.Input.CommandBinding.#ctor
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding()
  nameWithType: CommandBinding.CommandBinding()
  fullName: System.Windows.Input.CommandBinding.CommandBinding()
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding(ICommand)
  nameWithType: CommandBinding.CommandBinding(ICommand)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand)
- uid: System.Windows.Input.ICommand
  parent: System.Windows.Input
  isExternal: true
  name: ICommand
  nameWithType: ICommand
  fullName: System.Windows.Input.ICommand
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding(ICommand,ExecutedRoutedEventHandler)
  nameWithType: CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler)
- uid: System.Windows.Input.ExecutedRoutedEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: ExecutedRoutedEventHandler
  nameWithType: ExecutedRoutedEventHandler
  fullName: System.Windows.Input.ExecutedRoutedEventHandler
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
  nameWithType: CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
- uid: System.Windows.Input.CanExecuteRoutedEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: CanExecuteRoutedEventHandler
  nameWithType: CanExecuteRoutedEventHandler
  fullName: System.Windows.Input.CanExecuteRoutedEventHandler
- uid: System.Windows.Input.CommandBinding.CanExecute
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CanExecute
  nameWithType: CommandBinding.CanExecute
  fullName: System.Windows.Input.CommandBinding.CanExecute
- uid: System.Windows.Input.CommandBinding.Command
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: Command
  nameWithType: CommandBinding.Command
  fullName: System.Windows.Input.CommandBinding.Command
- uid: System.Windows.Input.CommandBinding.Executed
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: Executed
  nameWithType: CommandBinding.Executed
  fullName: System.Windows.Input.CommandBinding.Executed
- uid: System.Windows.Input.CommandBinding.PreviewCanExecute
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: PreviewCanExecute
  nameWithType: CommandBinding.PreviewCanExecute
  fullName: System.Windows.Input.CommandBinding.PreviewCanExecute
- uid: System.Windows.Input.CommandBinding.PreviewExecuted
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: PreviewExecuted
  nameWithType: CommandBinding.PreviewExecuted
  fullName: System.Windows.Input.CommandBinding.PreviewExecuted
- uid: System.Windows.Input.CommandBinding.#ctor*
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding
  nameWithType: CommandBinding.CommandBinding
- uid: System.Windows.Input.CommandBinding.Command*
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: Command
  nameWithType: CommandBinding.Command
