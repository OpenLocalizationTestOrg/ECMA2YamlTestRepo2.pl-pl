### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.SendKeys
  id: SendKeys
  children:
  - System.Windows.Forms.SendKeys.Flush
  - System.Windows.Forms.SendKeys.Send(System.String)
  - System.Windows.Forms.SendKeys.SendWait(System.String)
  langs:
  - csharp
  name: SendKeys
  nameWithType: SendKeys
  fullName: System.Windows.Forms.SendKeys
  type: Class
  summary: "Udostępnia metody wysyłania naciśnięcia klawiszy do aplikacji."
  remarks: "Użyj SendKeys Wyślij naciśnięcia klawiszy i klawiszy kombinacje do aktywnej aplikacji. Nie można utworzyć wystąpienia tej klasy. Aby wysłać naciśnięcia klawiszy do klasy i natychmiast kontynuować procedurę programu, użyj <xref:System.Windows.Forms.SendKeys.Send%2A>.</xref:System.Windows.Forms.SendKeys.Send%2A> Zaczekać, aż wszystkie procesy uruchomione przez naciśnięcie klawisza, użyj <xref:System.Windows.Forms.SendKeys.SendWait%2A>.</xref:System.Windows.Forms.SendKeys.SendWait%2A>       Każdy klucz jest reprezentowana przez co najmniej jeden znak. Aby określić znak pojedynczego klawiatury, użyj sam znak. Na przykład aby przedstawić litera A, przekazać w ciągu &quot;A&quot; do metody. Aby przedstawić więcej niż jednego znaku, Dołącz każdy dodatkowego znak do poprzedzającym go. Do reprezentowania litery A, B i C, ustaw wartość parametru &quot;ABC&quot;.       Znak plus (+), daszek (^), znaku procentu (%), tyldy (~) i nawiasów () mają specjalne znaczenie do SendKeys. Aby określić jedną z tych znaków, należy ująć ją w nawiasach klamrowych ({}). Na przykład aby określić znak plus, użyj &quot;{+}&quot;. Aby określić znaki nawias klamrowy, użyj &quot;{{}&quot; i &quot;{}}&quot;. Nawiasy kwadratowe ([]) mają nie specjalne znaczenie SendKeys, ale należy umieścić je w nawiasach klamrowych. W innych aplikacjach nawiasy mają specjalne znaczenie, które mogą być istotne, jeśli występuje dynamiczną wymianę danych (DDE).      > [!CAUTION] > Jeśli aplikacja jest przeznaczona do użycia międzynarodowych z różnymi klawiatury, użycie <xref:System.Windows.Forms.SendKeys.Send%2A>może spowodować nieprzewidywalne skutki i należy unikać.</xref:System.Windows.Forms.SendKeys.Send%2A>       Aby określić znaki, które nie są wyświetlane po naciśnięciu klawisza, takich jak ENTER lub TAB i kluczy, które reprezentują akcje zamiast znaków, należy użyć kody w poniższej tabeli.      | Klucz | Kod |   |---------|----------|   | BACKSPACE | {Polecenie BACKSPACE}, {BS} lub {BKSP} |   | PODZIEL | {PODZIEL} |   | WŁĄCZONY KLAWISZ CAPS LOCK | {CAPSLOCK} |   | DEL lub usuń | {USUNĄĆ} lub {DEL} |   | STRZAŁKA W DÓŁ | {W DÓŁ} |   | KOŃCOWY | {ZAKOŃCZENIA} |   | WPROWADŹ | {Wprowadź} lub ~ |   | ESC | {ESC} |   | POMOC | {POMOCY} |   | STRONA GŁÓWNA | {HOME} |   | Dodatki lub Wstaw | {WSTAWIĆ} lub {INS} |   | STRZAŁKA W LEWO | {LEFT} |   | NUM LOCK | {NUMLOCK} |   | STRONĘ W DÓŁ | {PGDN} |   | STRONA W GÓRĘ | {PGUP} |   | PRINT SCREEN | {MIEĆ ETYKIETĘ PRTSC} (zastrzeżone do użytku w przyszłości) |   | STRZAŁKA W PRAWO | {PRAWO} |   | BLOKADY PRZEWIJANIA | {SCROLL LOCK} |   | KARTA | {KARTA} |   | STRZAŁKA W GÓRĘ | {MAKSYMALNIE} |   | F1 | {F1} |   | F2 | {F2} |   | F3 | {F3} |   | F4 | {F4} |   | F5 | {F5} |   | F6 | {F6} |   | F7 | {F7} |   | F8 | {F8} |   | F9 | {F9} |   | F10 | {F10} |   | F11 | {F11} |   | F12 | {F12} |   | F13 | {F13} |   | F14 | {F14} |   | KLAWISZ F15 | {KLAWISZ F15} |   | F16 | {F16} |   | Dodaj klawiatury numerycznej | {DODAĆ} |   | Odejmowanie klawiatury numerycznej | {ODJĄĆ} |   | Mnożenie klawiatury numerycznej | {MNOŻENIA} |   | Dzielenie klawiatury numerycznej | {DZIELENIA} |       Aby określić klucze w połączeniu z dowolną kombinację SHIFT, CTRL i ALT — klawisze, należy poprzedzić kod klucza z co najmniej jeden z następujących kodów.      | Klucz | Kod |   |---------|----------|   | SHIFT | + |   | CTRL | ^ |   | ALT | % |       Aby określić, że dowolną kombinację SHIFT, CTRL i ALT powinien być przechowywany w dół naciśniętym innych kluczy, należy umieścić kod dla tych kluczy w nawiasach. Na przykład, aby określić, aby przytrzymaj naciśnięty klawisz E i C naciśnięty klawisz SHIFT, użyj &quot;+ (WE)&quot;. Aby określić, przytrzymując klawisz SHIFT jest wciśnięty E C bez zmiany, a następnie użyj &quot;+ WE&quot;.       Aby określić identycznych klucze, formularz {klucza number}. Możesz umieścić odstęp między klucza i numeru. Na przykład {lewej 42} oznacza, naciśnij klawisz Strzałka w lewo razy 42; {h 10} oznacza naciśnij H 10 razy.      > [!NOTE] >, Ponieważ nie istnieje metoda zarządzanych do aktywowania innej aplikacji, możesz użyć tej klasy w bieżącej aplikacji lub używanie metod natywnych systemu Windows, takiej jak `FindWindow` i `SetForegroundWindow`, aby wymusić fokus na inne aplikacje.      > [!NOTE] > Klasy SendKeys została zaktualizowana dla środowiska .NET Framework 3.0 umożliwić jej użycie w aplikacji działających w systemie Windows Vista. Zwiększone zabezpieczenia systemu Windows Vista (nazywanych Kontrola konta użytkownika lub UAC) zapobiega poprzedniej implementacji działać zgodnie z oczekiwaniami.   >> Klasa SendKeys jest podatna na problemy dotyczące synchronizacji, które miały niektórzy deweloperzy obejścia. Zaktualizowane wdrożenia są nadal podatne na problemy dotyczące synchronizacji, ale jest nieco większą i mogą wymagać zmian do rozwiązania. Klasa SendKeys próbuje użyć poprzedniej implementacji najpierw, a w przypadku niepowodzenia korzysta z nowej implementacji. W związku z tym klasy SendKeys może zachowywać się inaczej w różnych systemach operacyjnych. Ponadto po klasie SendKeys korzysta z nowej implementacji <xref:System.Windows.Forms.SendKeys.SendWait%2A>— Metoda nie będzie oczekiwał na komunikaty do przetwarzania, gdy są one wysyłane do innego procesu.</xref:System.Windows.Forms.SendKeys.SendWait%2A>   >> Jeśli aplikacja opiera się na spójne zachowanie niezależnie od systemu operacyjnego, możesz wymusić klasę SendKeys, aby korzystać z nowej implementacji, dodając następujące ustawienie aplikacji w pliku app.config.   >> `<appSettings>` >> `<add key=&quot;SendKeys&quot; value=&quot;SendInput&quot;/>` >> `</appSettings>` >> Aby wymusić klasy SendKeys do użycia w poprzedniej implementacji, należy użyć wartości `&quot;JournalHook&quot;` zamiast tego."
  example:
  - "The following code example demonstrates how to use the <xref:System.Windows.Forms.SendKeys.Send%2A> method. To run the example, paste the following code in a form called Form1 containing a button called Button1. Ensure the click events are associated with their event-handling methods in this example. The button control's <xref:System.Windows.Forms.Control.TabIndex%2A> property should be set to 0. When the example is running, double-click the form to trigger the button's click event.  \n  \n [!code-cs[System.Windows.Forms.SendKeys#1](~/add/codesnippet/csharp/t-system.windows.forms.s_16_1.cs)]\n [!code-cpp[System.Windows.Forms.SendKeys#1](~/add/codesnippet/cpp/t-system.windows.forms.s_16_1.cpp)]\n [!code-vb[System.Windows.Forms.SendKeys#1](~/add/codesnippet/visualbasic/t-system.windows.forms.s_16_1.vb)]"
  syntax:
    content: public class SendKeys
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Forms.SendKeys.Flush
  id: Flush
  parent: System.Windows.Forms.SendKeys
  langs:
  - csharp
  name: Flush()
  nameWithType: SendKeys.Flush()
  fullName: System.Windows.Forms.SendKeys.Flush()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Przetwarza wszystkie komunikaty systemu Windows w kolejce wiadomości."
  remarks: "Użyj opróżniania oczekiwania dla aplikacji, aby przetworzyć naciśnięć klawiszy i inne komunikaty systemu operacyjnego, które znajdują się w kolejce wiadomości. Jest to odpowiednik wywołania <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=fullName>dopóki istnieją więcej kluczy do przetworzenia.</xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=fullName>      > [!NOTE] >, Ponieważ nie istnieje metoda zarządzanych do aktywowania innej aplikacji, możesz użyć tej klasy w bieżącej aplikacji lub używanie metod natywnych systemu Windows, takiej jak `FindWindow` i `SetForegroundWindow`, aby wymusić fokus na inne aplikacje."
  syntax:
    content: public static void Flush ();
    parameters: []
  overload: System.Windows.Forms.SendKeys.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.SendKeys.Send(System.String)
  id: Send(System.String)
  parent: System.Windows.Forms.SendKeys
  langs:
  - csharp
  name: Send(String)
  nameWithType: SendKeys.Send(String)
  fullName: System.Windows.Forms.SendKeys.Send(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Wysyła naciśnięcia klawiszy do aktywnej aplikacji."
  remarks: "Każdy klucz jest reprezentowana przez co najmniej jeden znak. Aby określić znak pojedynczego klawiatury, użyj sam znak. Na przykład aby przedstawić litera A, przekazać w ciągu &quot;A&quot; do metody. Aby przedstawić więcej niż jednego znaku, Dołącz każdy dodatkowego znak do poprzedzającym go. Do reprezentowania litery A, B i C, ustaw wartość parametru &quot;ABC&quot;.       Znak plus (+), daszek (^), znaku procentu (%), tyldy (~) i nawiasów () mają specjalne znaczenie do <xref:System.Windows.Forms.SendKeys>.</xref:System.Windows.Forms.SendKeys> Aby określić jedną z tych znaków, należy ująć ją w nawiasach klamrowych ({}). Na przykład aby określić znak plus, użyj &quot;{+}&quot;. Aby określić znaki nawias klamrowy, użyj &quot;{{}&quot; i &quot;{}}&quot;. Nawiasy kwadratowe mają nie specjalne znaczenie <xref:System.Windows.Forms.SendKeys>, ale należy umieścić je w nawiasach klamrowych.</xref:System.Windows.Forms.SendKeys> W innych aplikacjach nawiasy mają specjalne znaczenie, które mogą być istotne, jeśli występuje dynamiczną wymianę danych (DDE).      > [!CAUTION] > Jeśli aplikacja jest przeznaczony do użytku międzynarodowego z różnymi klawiatury, Wyślij może spowodować nieprzewidywalne skutki i należy unikać.       Aby określić znaki, które nie są wyświetlane po naciśnięciu klawisza, takich jak ENTER lub TAB i kluczy, które reprezentują akcje zamiast znaków, należy użyć kody w poniższej tabeli.      | Klucz | Kod |   |---------|----------|   | BACKSPACE | {Polecenie BACKSPACE}, {BS} lub {BKSP} |   | PODZIEL | {PODZIEL} |   | WŁĄCZONY KLAWISZ CAPS LOCK | {CAPSLOCK} |   | DEL lub usuń | {USUNĄĆ} lub {DEL} |   | STRZAŁKA W DÓŁ | {W DÓŁ} |   | KOŃCOWY | {ZAKOŃCZENIA} |   | WPROWADŹ | {Wprowadź} lub ~ |   | ESC | {ESC} |   | POMOC | {POMOCY} |   | STRONA GŁÓWNA | {HOME} |   | Dodatki lub Wstaw | {WSTAWIĆ} lub {INS} |   | STRZAŁKA W LEWO | {LEFT} |   | NUM LOCK | {NUMLOCK} |   | STRONĘ W DÓŁ | {PGDN} |   | STRONA W GÓRĘ | {PGUP} |   | PRINT SCREEN | {MIEĆ ETYKIETĘ PRTSC} (zastrzeżone do użytku w przyszłości) |   | STRZAŁKA W PRAWO | {PRAWO} |   | BLOKADY PRZEWIJANIA | {SCROLL LOCK} |   | KARTA | {KARTA} |   | STRZAŁKA W GÓRĘ | {MAKSYMALNIE} |   | F1 | {F1} |   | F2 | {F2} |   | F3 | {F3} |   | F4 | {F4} |   | F5 | {F5} |   | F6 | {F6} |   | F7 | {F7} |   | F8 | {F8} |   | F9 | {F9} |   | F10 | {F10} |   | F11 | {F11} |   | F12 | {F12} |   | F13 | {F13} |   | F14 | {F14} |   | KLAWISZ F15 | {KLAWISZ F15} |   | F16 | {F16} |   | Dodaj klawiatury numerycznej | {DODAĆ} |   | Odejmowanie klawiatury numerycznej | {ODJĄĆ} |   | Mnożenie klawiatury numerycznej | {MNOŻENIA} |   | Dzielenie klawiatury numerycznej | {DZIELENIA} |       Aby określić klucze w połączeniu z dowolną kombinację SHIFT, CTRL i ALT — klawisze, należy poprzedzić kod klucza z co najmniej jeden z następujących kodów.      | Klucz | Kod |   |---------|----------|   | SHIFT | + |   | CTRL | ^ |   | ALT | % |       Aby określić, że dowolną kombinację SHIFT, CTRL i ALT powinien być przechowywany w dół naciśniętym innych kluczy, należy umieścić kod dla tych kluczy w nawiasach. Na przykład, aby określić, aby przytrzymaj naciśnięty klawisz E i C naciśnięty klawisz SHIFT, użyj &quot;+ (WE)&quot;. Aby określić, przytrzymując klawisz SHIFT jest wciśnięty E C bez zmiany, a następnie użyj &quot;+ WE&quot;.       Aby określić identycznych klucze, formularz {klucza number}. Możesz umieścić odstęp między klucza i numeru. Na przykład {lewej 42} oznacza, naciśnij klawisz Strzałka w lewo razy 42; {h 10} oznacza naciśnij H 10 razy.      > [!NOTE] >, Ponieważ nie istnieje metoda zarządzanych do aktywowania innej aplikacji, możesz użyć tej klasy w bieżącej aplikacji lub używanie metod natywnych systemu Windows, takiej jak `FindWindow` i `SetForegroundWindow`, aby wymusić fokus na inne aplikacje.      > [!NOTE] > <xref:System.Windows.Forms.SendKeys>Klasy została zaktualizowana dla środowiska .NET Framework 3.0 umożliwić jej użycie w aplikacji działających w systemie Windows Vista.</xref:System.Windows.Forms.SendKeys> Zwiększone zabezpieczenia systemu Windows Vista (nazywanych Kontrola konta użytkownika lub UAC) zapobiega poprzedniej implementacji działać zgodnie z oczekiwaniami.   >> <xref:System.Windows.Forms.SendKeys>Klasy są podatne na problemy dotyczące synchronizacji, które miały niektórzy deweloperzy obejścia.</xref:System.Windows.Forms.SendKeys> Zaktualizowane wdrożenia są nadal podatne na problemy dotyczące synchronizacji, ale jest nieco większą i mogą wymagać zmian do rozwiązania. <xref:System.Windows.Forms.SendKeys>Klasa próbuje użyć poprzedniej implementacji najpierw, a w przypadku niepowodzenia korzysta z nowej implementacji.</xref:System.Windows.Forms.SendKeys> W związku z tym <xref:System.Windows.Forms.SendKeys>klasy może zachowywać się inaczej w różnych systemach operacyjnych.</xref:System.Windows.Forms.SendKeys> Ponadto, kiedy <xref:System.Windows.Forms.SendKeys>Klasa korzysta z nowej implementacji <xref:System.Windows.Forms.SendKeys.SendWait%2A>— Metoda nie będzie oczekiwał na komunikaty do przetwarzania, gdy są one wysyłane do innego procesu.</xref:System.Windows.Forms.SendKeys.SendWait%2A> </xref:System.Windows.Forms.SendKeys>   >> Jeśli aplikacja opiera się na spójne zachowanie niezależnie od systemu operacyjnego, można wymusić <xref:System.Windows.Forms.SendKeys>klasę, aby korzystać z nowej implementacji, dodając następujące ustawienie aplikacji w pliku app.config.</xref:System.Windows.Forms.SendKeys>   >> `<appSettings>` >> `<add key=&quot;SendKeys&quot; value=&quot;SendInput&quot;/>` >> `</appSettings>` >> Wymusić <xref:System.Windows.Forms.SendKeys>klasy do poprzedniej implementacji, należy użyć wartości `&quot;JournalHook&quot;` zamiast.</xref:System.Windows.Forms.SendKeys>"
  example:
  - "The following code example demonstrates how to use the Send method.To run the example, paste the following code in a form called Form1 containing a button called Button1. Ensure the click events are associated with their event-handling methods in this example. The button control's <xref:System.Windows.Forms.Control.TabIndex%2A> property should be set to 0. When the example is running, double-click the form to trigger the button's click event.  \n  \n [!code-cs[System.Windows.Forms.SendKeys#1](~/add/codesnippet/csharp/m-system.windows.forms.s_9_1.cs)]\n [!code-cpp[System.Windows.Forms.SendKeys#1](~/add/codesnippet/cpp/m-system.windows.forms.s_9_1.cpp)]\n [!code-vb[System.Windows.Forms.SendKeys#1](~/add/codesnippet/visualbasic/m-system.windows.forms.s_9_1.vb)]"
  syntax:
    content: public static void Send (string keys);
    parameters:
    - id: keys
      type: System.String
      description: "Ciąg naciśnięcia klawiszy do wysłania."
  overload: System.Windows.Forms.SendKeys.Send*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Wyślij naciśnięcia klawiszy do aktywnej aplikacji nie istnieje."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keys</code>reprezentuje prawidłową naciśnięcia klawiszy"
  platform:
  - net462
- uid: System.Windows.Forms.SendKeys.SendWait(System.String)
  id: SendWait(System.String)
  parent: System.Windows.Forms.SendKeys
  langs:
  - csharp
  name: SendWait(String)
  nameWithType: SendKeys.SendWait(String)
  fullName: System.Windows.Forms.SendKeys.SendWait(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Wysyła podany klucze do aktywnej aplikacji, a następnie czeka na komunikaty do przetwarzania."
  remarks: "Umożliwia SendWait wysłany naciśnięcia klawiszy lub kombinacji klawiszy do aplikacji i poczekaj, aż komunikatów naciśnięcia klawiszy do przetworzenia. Ta metoda służy do wysyłania naciśnięcia klawiszy do aplikacji i poczekaj, aż wszystkie procesy, które są uruchamiane przez naciśnięcia klawiszy do wypełnienia. Może to być istotne, jeśli inna aplikacja musi zakończyć się przed kontynuowaniem aplikacji.      > [!NOTE] >, Ponieważ nie istnieje metoda zarządzanych do aktywowania innej aplikacji, możesz użyć tej klasy w bieżącej aplikacji lub używanie metod natywnych systemu Windows, takiej jak `FindWindow` i `SetForegroundWindow`, aby wymusić fokus na inne aplikacje.      > [!NOTE] > <xref:System.Windows.Forms.SendKeys>Klasy została zaktualizowana dla środowiska .NET Framework 3.0 umożliwić jej użycie w aplikacji działających w systemie Windows Vista.</xref:System.Windows.Forms.SendKeys> Zwiększone zabezpieczenia systemu Windows Vista (nazywanych Kontrola konta użytkownika lub UAC) zapobiega poprzedniej implementacji działać zgodnie z oczekiwaniami.   >> <xref:System.Windows.Forms.SendKeys>Klasy są podatne na problemy dotyczące synchronizacji, które miały niektórzy deweloperzy obejścia.</xref:System.Windows.Forms.SendKeys> Zaktualizowane wdrożenia są nadal podatne na problemy dotyczące synchronizacji, ale jest nieco większą i mogą wymagać zmian do rozwiązania. <xref:System.Windows.Forms.SendKeys>Klasa próbuje użyć poprzedniej implementacji najpierw, a w przypadku niepowodzenia korzysta z nowej implementacji.</xref:System.Windows.Forms.SendKeys> W związku z tym <xref:System.Windows.Forms.SendKeys>klasy może zachowywać się inaczej w różnych systemach operacyjnych.</xref:System.Windows.Forms.SendKeys> Ponadto, kiedy <xref:System.Windows.Forms.SendKeys>Klasa korzysta z nowej implementacji, metoda SendWait nie będzie oczekiwał na komunikaty do przetwarzania, gdy są one wysyłane do innego procesu.</xref:System.Windows.Forms.SendKeys>   >> Jeśli aplikacja opiera się na spójne zachowanie niezależnie od systemu operacyjnego, można wymusić <xref:System.Windows.Forms.SendKeys>klasę, aby korzystać z nowej implementacji, dodając następujące ustawienie aplikacji w pliku app.config.</xref:System.Windows.Forms.SendKeys>   >> `<appSettings>` >> `<add key=&quot;SendKeys&quot; value=&quot;SendInput&quot;/>` >> `</appSettings>` >> Wymusić <xref:System.Windows.Forms.SendKeys>klasy do poprzedniej implementacji, należy użyć wartości `&quot;JournalHook&quot;` zamiast.</xref:System.Windows.Forms.SendKeys>"
  syntax:
    content: public static void SendWait (string keys);
    parameters:
    - id: keys
      type: System.String
      description: "Ciąg naciśnięcia klawiszy do wysłania."
  overload: System.Windows.Forms.SendKeys.SendWait*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.Forms.SendKeys.Flush
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Flush()
  nameWithType: SendKeys.Flush()
  fullName: System.Windows.Forms.SendKeys.Flush()
- uid: System.Windows.Forms.SendKeys.Send(System.String)
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Send(String)
  nameWithType: SendKeys.Send(String)
  fullName: System.Windows.Forms.SendKeys.Send(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Forms.SendKeys.SendWait(System.String)
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: SendWait(String)
  nameWithType: SendKeys.SendWait(String)
  fullName: System.Windows.Forms.SendKeys.SendWait(String)
- uid: System.Windows.Forms.SendKeys.Flush*
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Flush
  nameWithType: SendKeys.Flush
- uid: System.Windows.Forms.SendKeys.Send*
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Send
  nameWithType: SendKeys.Send
- uid: System.Windows.Forms.SendKeys.SendWait*
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: SendWait
  nameWithType: SendKeys.SendWait
