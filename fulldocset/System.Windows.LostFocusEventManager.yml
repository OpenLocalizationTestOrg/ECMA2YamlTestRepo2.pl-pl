### YamlMime:ManagedReference
items:
- uid: System.Windows.LostFocusEventManager
  id: LostFocusEventManager
  children:
  - System.Windows.LostFocusEventManager.AddHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.RoutedEventArgs})
  - System.Windows.LostFocusEventManager.AddListener(System.Windows.DependencyObject,System.Windows.IWeakEventListener)
  - System.Windows.LostFocusEventManager.NewListenerList
  - System.Windows.LostFocusEventManager.RemoveHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.RoutedEventArgs})
  - System.Windows.LostFocusEventManager.RemoveListener(System.Windows.DependencyObject,System.Windows.IWeakEventListener)
  - System.Windows.LostFocusEventManager.StartListening(System.Object)
  - System.Windows.LostFocusEventManager.StopListening(System.Object)
  langs:
  - csharp
  name: LostFocusEventManager
  nameWithType: LostFocusEventManager
  fullName: System.Windows.LostFocusEventManager
  type: Class
  summary: "Udostępnia <xref href=&quot;System.Windows.WeakEventManager&quot;> </xref> implementacji, dzięki czemu można dołączyć odbiorników dla za pomocą wzorca &quot;odbiornik słabe zdarzeń&quot; <xref href=&quot;System.Windows.UIElement.LostFocus&quot;> </xref> lub <xref href=&quot;System.Windows.ContentElement.LostFocus&quot;> </xref> zdarzenia."
  remarks: "Aby mogła być odbiorników w tym wzorcu, obiektów odbiornika musi implementować <xref:System.Windows.IWeakEventListener>.</xref:System.Windows.IWeakEventListener> Nie musisz wdrożyć <xref:System.Windows.IWeakEventListener>dla klasy, który jest źródłem zdarzeń.</xref:System.Windows.IWeakEventListener>       [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]Powiązanie danych używa to <xref:System.Windows.WeakEventManager>Tak, aby dołączyć odbiorników dla wewnętrznych klas, które zaktualizować powiązań z <xref:System.Windows.UIElement.LostFocus?displayProperty=fullName>lub <xref:System.Windows.ContentElement.LostFocus?displayProperty=fullName>zdarzenia dla obiekt, który jest elementem docelowym powiązania.</xref:System.Windows.ContentElement.LostFocus?displayProperty=fullName> </xref:System.Windows.UIElement.LostFocus?displayProperty=fullName> </xref:System.Windows.WeakEventManager> Obejmuje to obsługę powiadomień dla <xref:System.Windows.Data.UpdateSourceTrigger>trybu wiązania z danymi, bez tworzenia silnych odwołuje się do celów powiązania danych.</xref:System.Windows.Data.UpdateSourceTrigger>"
  syntax:
    content: 'public class LostFocusEventManager : System.Windows.WeakEventManager'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.WeakEventManager
  implements: []
  inheritedMembers:
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  - System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)
  - System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)
  - System.Windows.WeakEventManager.GetCurrentManager(System.Type)
  - System.Windows.WeakEventManager.Item(System.Object)
  - System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)
  - System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)
  - System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)
  - System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)
  - System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)
  - System.Windows.WeakEventManager.ReadLock
  - System.Windows.WeakEventManager.Remove(System.Object)
  - System.Windows.WeakEventManager.ScheduleCleanup
  - System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)
  - System.Windows.WeakEventManager.WriteLock
  platform:
  - net462
- uid: System.Windows.LostFocusEventManager.AddHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.RoutedEventArgs})
  id: AddHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.RoutedEventArgs})
  parent: System.Windows.LostFocusEventManager
  langs:
  - csharp
  name: AddHandler(DependencyObject,EventHandler<RoutedEventArgs>)
  nameWithType: LostFocusEventManager.AddHandler(DependencyObject,EventHandler<RoutedEventArgs>)
  fullName: System.Windows.LostFocusEventManager.AddHandler(DependencyObject,EventHandler<RoutedEventArgs>)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Dodaje obsługi określonego zdarzenia, który jest wywoływany, gdy określonego źródła, podnosi <xref href=&quot;System.Windows.UIElement.LostFocus&quot;> </xref> lub <xref href=&quot;System.Windows.ContentElement.LostFocus&quot;> </xref> zdarzeń."
  remarks: "Ta metoda służy do określania obsługi zdarzenia, który ma być używany do subskrybowania <xref:System.Windows.UIElement.LostFocus?displayProperty=fullName>lub <xref:System.Windows.ContentElement.LostFocus?displayProperty=fullName>zdarzeń.</xref:System.Windows.ContentElement.LostFocus?displayProperty=fullName> </xref:System.Windows.UIElement.LostFocus?displayProperty=fullName>  Gdy ta metoda obiektu odbiornika nie muszą implementować <xref:System.Windows.IWeakEventListener>interfejsu.</xref:System.Windows.IWeakEventListener>"
  syntax:
    content: public static void AddHandler (System.Windows.DependencyObject source, EventHandler<System.Windows.RoutedEventArgs> handler);
    parameters:
    - id: source
      type: System.Windows.DependencyObject
      description: "Źródłowego obiektu, który generuje <xref href=&quot;System.Windows.UIElement.LostFocus&quot;> </xref> lub <xref href=&quot;System.Windows.ContentElement.LostFocus&quot;> </xref> zdarzeń."
    - id: handler
      type: System.EventHandler{System.Windows.RoutedEventArgs}
      description: "Delegat, który obsługuje <xref href=&quot;System.Windows.UIElement.LostFocus&quot;> </xref> lub <xref href=&quot;System.Windows.ContentElement.LostFocus&quot;> </xref> zdarzeń."
  overload: System.Windows.LostFocusEventManager.AddHandler*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>handler</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.LostFocusEventManager.AddListener(System.Windows.DependencyObject,System.Windows.IWeakEventListener)
  id: AddListener(System.Windows.DependencyObject,System.Windows.IWeakEventListener)
  parent: System.Windows.LostFocusEventManager
  langs:
  - csharp
  name: AddListener(DependencyObject,IWeakEventListener)
  nameWithType: LostFocusEventManager.AddListener(DependencyObject,IWeakEventListener)
  fullName: System.Windows.LostFocusEventManager.AddListener(DependencyObject,IWeakEventListener)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Dodaje podany odbiornika do listy odbiorników dla podanego źródła."
  syntax:
    content: public static void AddListener (System.Windows.DependencyObject source, System.Windows.IWeakEventListener listener);
    parameters:
    - id: source
      type: System.Windows.DependencyObject
      description: "Obiekt ze zdarzeniem."
    - id: listener
      type: System.Windows.IWeakEventListener
      description: "Obiekt do dodania jako odbiornik."
  overload: System.Windows.LostFocusEventManager.AddListener*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LostFocusEventManager.NewListenerList
  id: NewListenerList
  parent: System.Windows.LostFocusEventManager
  langs:
  - csharp
  name: NewListenerList()
  nameWithType: LostFocusEventManager.NewListenerList()
  fullName: System.Windows.LostFocusEventManager.NewListenerList()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Zwraca nowy obiekt, który zawiera odbiorników do <xref href=&quot;System.Windows.UIElement.LostFocus&quot;> </xref> lub <xref href=&quot;System.Windows.ContentElement.LostFocus&quot;> </xref> zdarzeń."
  syntax:
    content: protected override System.Windows.WeakEventManager.ListenerList NewListenerList ();
    parameters: []
    return:
      type: System.Windows.WeakEventManager.ListenerList
      description: "Nowy obiekt, który zawiera odbiorników do <xref href=&quot;System.Windows.UIElement.LostFocus&quot;> </xref> lub <xref href=&quot;System.Windows.ContentElement.LostFocus&quot;> </xref> zdarzeń."
  overload: System.Windows.LostFocusEventManager.NewListenerList*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LostFocusEventManager.RemoveHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.RoutedEventArgs})
  id: RemoveHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.RoutedEventArgs})
  parent: System.Windows.LostFocusEventManager
  langs:
  - csharp
  name: RemoveHandler(DependencyObject,EventHandler<RoutedEventArgs>)
  nameWithType: LostFocusEventManager.RemoveHandler(DependencyObject,EventHandler<RoutedEventArgs>)
  fullName: System.Windows.LostFocusEventManager.RemoveHandler(DependencyObject,EventHandler<RoutedEventArgs>)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Usuwa obsługi określonego zdarzenia pochodzących z określonego źródła."
  syntax:
    content: public static void RemoveHandler (System.Windows.DependencyObject source, EventHandler<System.Windows.RoutedEventArgs> handler);
    parameters:
    - id: source
      type: System.Windows.DependencyObject
      description: "Źródłowego obiektu, który generuje <xref href=&quot;System.Windows.UIElement.LostFocus&quot;> </xref> lub <xref href=&quot;System.Windows.ContentElement.LostFocus&quot;> </xref> zdarzeń."
    - id: handler
      type: System.EventHandler{System.Windows.RoutedEventArgs}
      description: "Delegat, który obsługuje <xref href=&quot;System.Windows.UIElement.LostFocus&quot;> </xref> lub <xref href=&quot;System.Windows.ContentElement.LostFocus&quot;> </xref> zdarzeń."
  overload: System.Windows.LostFocusEventManager.RemoveHandler*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>handler</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.LostFocusEventManager.RemoveListener(System.Windows.DependencyObject,System.Windows.IWeakEventListener)
  id: RemoveListener(System.Windows.DependencyObject,System.Windows.IWeakEventListener)
  parent: System.Windows.LostFocusEventManager
  langs:
  - csharp
  name: RemoveListener(DependencyObject,IWeakEventListener)
  nameWithType: LostFocusEventManager.RemoveListener(DependencyObject,IWeakEventListener)
  fullName: System.Windows.LostFocusEventManager.RemoveListener(DependencyObject,IWeakEventListener)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Usuwa określony odbiornik z listy odbiorników dla podanego źródła."
  syntax:
    content: public static void RemoveListener (System.Windows.DependencyObject source, System.Windows.IWeakEventListener listener);
    parameters:
    - id: source
      type: System.Windows.DependencyObject
      description: "Aby usunąć odbiornik z obiektu."
    - id: listener
      type: System.Windows.IWeakEventListener
      description: "Odbiornik do usunięcia."
  overload: System.Windows.LostFocusEventManager.RemoveListener*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LostFocusEventManager.StartListening(System.Object)
  id: StartListening(System.Object)
  parent: System.Windows.LostFocusEventManager
  langs:
  - csharp
  name: StartListening(Object)
  nameWithType: LostFocusEventManager.StartListening(Object)
  fullName: System.Windows.LostFocusEventManager.StartListening(Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Rozpoczyna nasłuchiwanie <xref href=&quot;System.Windows.UIElement.LostFocus&quot;> </xref> zdarzenia dla danego źródła dołączenie obsługi Wewnętrzna klasa do tego źródła."
  remarks: "Podane źródło jest sprawdzany pod kątem typ, aby sprawdzić, czy jest <xref:System.Windows.UIElement>lub <xref:System.Windows.ContentElement>, a następnie dodaje obsługę klasy odpowiedniego zdarzenia do tego źródła.</xref:System.Windows.ContentElement> </xref:System.Windows.UIElement>"
  syntax:
    content: protected override void StartListening (object source);
    parameters:
    - id: source
      type: System.Object
      description: "Obiekt, na którym należy rozpocząć nasłuchiwania dla odpowiednich <xref href=&quot;System.Windows.UIElement.LostFocus&quot;> </xref> zdarzeń."
  overload: System.Windows.LostFocusEventManager.StartListening*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LostFocusEventManager.StopListening(System.Object)
  id: StopListening(System.Object)
  parent: System.Windows.LostFocusEventManager
  langs:
  - csharp
  name: StopListening(Object)
  nameWithType: LostFocusEventManager.StopListening(Object)
  fullName: System.Windows.LostFocusEventManager.StopListening(Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Zatrzymuje nasłuchiwanie <xref href=&quot;System.Windows.UIElement.LostFocus&quot;> </xref> zdarzenia dla danego źródła."
  syntax:
    content: protected override void StopListening (object source);
    parameters:
    - id: source
      type: System.Object
      description: "Obiekt źródłowy, na której należy zakończyć nasłuchiwanie <xref href=&quot;System.Windows.UIElement.LostFocus&quot;> </xref>."
  overload: System.Windows.LostFocusEventManager.StopListening*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.WeakEventManager
  isExternal: false
  name: System.Windows.WeakEventManager
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.LostFocusEventManager.AddHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.RoutedEventArgs})
  parent: System.Windows.LostFocusEventManager
  isExternal: false
  name: AddHandler(DependencyObject,EventHandler<RoutedEventArgs>)
  nameWithType: LostFocusEventManager.AddHandler(DependencyObject,EventHandler<RoutedEventArgs>)
  fullName: System.Windows.LostFocusEventManager.AddHandler(DependencyObject,EventHandler<RoutedEventArgs>)
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.EventHandler{System.Windows.RoutedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<RoutedEventArgs>
  nameWithType: EventHandler<RoutedEventArgs>
  fullName: System.EventHandler<System.Windows.RoutedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.RoutedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.RoutedEventArgs
    name: RoutedEventArgs
    nameWithType: RoutedEventArgs
    fullName: RoutedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.LostFocusEventManager.AddListener(System.Windows.DependencyObject,System.Windows.IWeakEventListener)
  parent: System.Windows.LostFocusEventManager
  isExternal: false
  name: AddListener(DependencyObject,IWeakEventListener)
  nameWithType: LostFocusEventManager.AddListener(DependencyObject,IWeakEventListener)
  fullName: System.Windows.LostFocusEventManager.AddListener(DependencyObject,IWeakEventListener)
- uid: System.Windows.IWeakEventListener
  parent: System.Windows
  isExternal: false
  name: IWeakEventListener
  nameWithType: IWeakEventListener
  fullName: System.Windows.IWeakEventListener
- uid: System.Windows.LostFocusEventManager.NewListenerList
  parent: System.Windows.LostFocusEventManager
  isExternal: false
  name: NewListenerList()
  nameWithType: LostFocusEventManager.NewListenerList()
  fullName: System.Windows.LostFocusEventManager.NewListenerList()
- uid: System.Windows.WeakEventManager.ListenerList
  parent: System.Windows
  isExternal: false
  name: WeakEventManager+ListenerList
  nameWithType: WeakEventManager+ListenerList
  fullName: System.Windows.WeakEventManager+ListenerList
- uid: System.Windows.LostFocusEventManager.RemoveHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.RoutedEventArgs})
  parent: System.Windows.LostFocusEventManager
  isExternal: false
  name: RemoveHandler(DependencyObject,EventHandler<RoutedEventArgs>)
  nameWithType: LostFocusEventManager.RemoveHandler(DependencyObject,EventHandler<RoutedEventArgs>)
  fullName: System.Windows.LostFocusEventManager.RemoveHandler(DependencyObject,EventHandler<RoutedEventArgs>)
- uid: System.Windows.LostFocusEventManager.RemoveListener(System.Windows.DependencyObject,System.Windows.IWeakEventListener)
  parent: System.Windows.LostFocusEventManager
  isExternal: false
  name: RemoveListener(DependencyObject,IWeakEventListener)
  nameWithType: LostFocusEventManager.RemoveListener(DependencyObject,IWeakEventListener)
  fullName: System.Windows.LostFocusEventManager.RemoveListener(DependencyObject,IWeakEventListener)
- uid: System.Windows.LostFocusEventManager.StartListening(System.Object)
  parent: System.Windows.LostFocusEventManager
  isExternal: false
  name: StartListening(Object)
  nameWithType: LostFocusEventManager.StartListening(Object)
  fullName: System.Windows.LostFocusEventManager.StartListening(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.LostFocusEventManager.StopListening(System.Object)
  parent: System.Windows.LostFocusEventManager
  isExternal: false
  name: StopListening(Object)
  nameWithType: LostFocusEventManager.StopListening(Object)
  fullName: System.Windows.LostFocusEventManager.StopListening(Object)
- uid: System.Windows.LostFocusEventManager.AddHandler*
  parent: System.Windows.LostFocusEventManager
  isExternal: false
  name: AddHandler
  nameWithType: LostFocusEventManager.AddHandler
- uid: System.Windows.LostFocusEventManager.AddListener*
  parent: System.Windows.LostFocusEventManager
  isExternal: false
  name: AddListener
  nameWithType: LostFocusEventManager.AddListener
- uid: System.Windows.LostFocusEventManager.NewListenerList*
  parent: System.Windows.LostFocusEventManager
  isExternal: false
  name: NewListenerList
  nameWithType: LostFocusEventManager.NewListenerList
- uid: System.Windows.LostFocusEventManager.RemoveHandler*
  parent: System.Windows.LostFocusEventManager
  isExternal: false
  name: RemoveHandler
  nameWithType: LostFocusEventManager.RemoveHandler
- uid: System.Windows.LostFocusEventManager.RemoveListener*
  parent: System.Windows.LostFocusEventManager
  isExternal: false
  name: RemoveListener
  nameWithType: LostFocusEventManager.RemoveListener
- uid: System.Windows.LostFocusEventManager.StartListening*
  parent: System.Windows.LostFocusEventManager
  isExternal: false
  name: StartListening
  nameWithType: LostFocusEventManager.StartListening
- uid: System.Windows.LostFocusEventManager.StopListening*
  parent: System.Windows.LostFocusEventManager
  isExternal: false
  name: StopListening
  nameWithType: LostFocusEventManager.StopListening
