### YamlMime:ManagedReference
items:
- uid: Microsoft.JScript.IDebugVsaScriptCodeItem
  id: IDebugVsaScriptCodeItem
  children:
  - Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate
  - Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)
  langs:
  - csharp
  name: IDebugVsaScriptCodeItem
  nameWithType: IDebugVsaScriptCodeItem
  fullName: Microsoft.JScript.IDebugVsaScriptCodeItem
  type: Interface
  summary: "Definiuje metody obliczać wyrażeń i analizowanie ciągów. Ten interfejs jest zwykle implementowany przez obiekt, który reprezentuje blok kodu i jest zwykle nazywany przez debuger. Ten interfejs zapewnia dodatkowe funkcje, które są wymagane przez hosta IActiveScript."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      [System.Runtime.InteropServices.Guid("6DFE759A-CB8B-4ca0-A973-1D04E0BF0B53")]

      public interface IDebugVsaScriptCodeItem
  implements: []
  platform:
  - net462
- uid: Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate
  id: Evaluate
  parent: Microsoft.JScript.IDebugVsaScriptCodeItem
  langs:
  - csharp
  name: Evaluate()
  nameWithType: IDebugVsaScriptCodeItem.Evaluate()
  fullName: Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate()
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "Po zaimplementowaniu w klasie, ocenia bloku, wyrażenia lub instrukcji reprezentowany przez element kodu i zwraca wartość. Jest to zwykle przez debuger, który należy ocenić wyrażenia (okno czujki, na przykład). Wyrażeń wartość jest wynikiem wyrażenia. Bloków i instrukcje wynikowe wyrażenie jest ostatniego wyrażenie obliczane przez blok lub instrukcji."
  remarks: "Należy pamiętać, że metoda Evaluate funkcjonalnie identyczne <xref:Microsoft.JScript.IVsaScriptCodeItem.Execute%2A>metody.</xref:Microsoft.JScript.IVsaScriptCodeItem.Execute%2A> Tylko atrybuty kierowania różnią się. Ta wersja interfejsu umożliwia niezarządzane debuger można uzyskać wartość zwracana jako `IUnknown` wskaźnika zamiast `VARIANT`."
  syntax:
    content: public object Evaluate ();
    parameters: []
    return:
      type: System.Object
      description: "Zwraca wartość reprezentującą obliczania instrukcji, wyrażenia lub bloku."
  overload: Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)
  id: ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)
  parent: Microsoft.JScript.IDebugVsaScriptCodeItem
  langs:
  - csharp
  name: ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)
  nameWithType: IDebugVsaScriptCodeItem.ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)
  fullName: Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: 'Po zaimplementowaniu w klasie, analizuje parametry i zwraca informacje przeanalizowany w poziomie. Ta metoda jest zazwyczaj wywoływana przez debuger, które należy przeanalizować informacji na temat punktu przerwania reprezentowany jako <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref>. Debuger może być punkt przerwania wpisana przez użytkownika w postaci *functionname argumenty ILoffset*. Parametry nazwane punkt przerwania może mieć format złożonych, na przykład `F.B(C.D[], int, arg : double ) : C.Abc + 123.` listy parametrów jest opcjonalny, ponieważ jest przesunięciu IL.'
  syntax:
    content: public bool ParseNamedBreakPoint (string input, out string functionName, out int nargs, out string arguments, out string returnType, out ulong offset);
    parameters:
    - id: input
      type: System.String
      description: "Poprawnie sformułowany o nazwie ciąg punktu przerwania funkcji, opcjonalny argument listy i opcjonalnie przesunięciu IL."
    - id: functionName
      type: System.String
      description: "Parametr wyjściowy zwraca nazwę funkcji analizowane poza ciąg wejściowy lub ciąg pusty ciąg wejściowy nie jest poprawnie sformułowany."
    - id: nargs
      type: System.Int32
      description: "Parametr wyjściowy zwracając liczbę argumentów w liście argumentów opcjonalnych. Zwraca zero, jeśli nie ma żadnej listy argumentów lub jeśli nie jest poprawnie sformułowany ciąg."
    - id: arguments
      type: System.String
      description: "Parametr wyjściowy zwracając rozdzieloną spacjami listę nazw typów wszystkie argumenty w listy argumentów lub pusty ciąg, jeśli brak listy argumentów lub ciąg wejściowy nie został dobrze uformowany."
    - id: returnType
      type: System.String
      description: "Parametr wyjściowy zwraca ciąg zawierający typ zwracany funkcji o nazwie w danych wejściowych, lub pusty ciąg, jeśli brak zwracany typ lub ciąg wejściowy został nieprawidłowo sformułowany."
    - id: offset
      type: System.UInt64
      description: "Niepodpisane długich liczb całkowitych nadanie przesunięciu IL od ciąg wejściowy lub zero, jeśli nie było żadnych przesunięciu IL lub ciąg nie został dobrze uformowany."
    return:
      type: System.Boolean
      description: "Zwraca <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> Jeśli Nazwany punkt przerwania jest pomyślnie przeanalizowano, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> inaczej."
  overload: Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint*
  exceptions: []
  platform:
  - net462
references:
- uid: Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate
  parent: Microsoft.JScript.IDebugVsaScriptCodeItem
  isExternal: false
  name: Evaluate()
  nameWithType: IDebugVsaScriptCodeItem.Evaluate()
  fullName: Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)
  parent: Microsoft.JScript.IDebugVsaScriptCodeItem
  isExternal: false
  name: ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)
  nameWithType: IDebugVsaScriptCodeItem.ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)
  fullName: Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate*
  parent: Microsoft.JScript.IDebugVsaScriptCodeItem
  isExternal: false
  name: Evaluate
  nameWithType: IDebugVsaScriptCodeItem.Evaluate
- uid: Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint*
  parent: Microsoft.JScript.IDebugVsaScriptCodeItem
  isExternal: false
  name: ParseNamedBreakPoint
  nameWithType: IDebugVsaScriptCodeItem.ParseNamedBreakPoint
