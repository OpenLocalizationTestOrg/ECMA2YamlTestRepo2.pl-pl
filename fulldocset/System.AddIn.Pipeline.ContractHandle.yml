### YamlMime:ManagedReference
items:
- uid: System.AddIn.Pipeline.ContractHandle
  id: ContractHandle
  children:
  - System.AddIn.Pipeline.ContractHandle.#ctor(System.AddIn.Contract.IContract)
  - System.AddIn.Pipeline.ContractHandle.AppDomainOwner(System.AppDomain)
  - System.AddIn.Pipeline.ContractHandle.Contract
  - System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)
  - System.AddIn.Pipeline.ContractHandle.Dispose
  - System.AddIn.Pipeline.ContractHandle.Dispose(System.Boolean)
  - System.AddIn.Pipeline.ContractHandle.Finalize
  langs:
  - csharp
  name: ContractHandle
  nameWithType: ContractHandle
  fullName: System.AddIn.Pipeline.ContractHandle
  type: Class
  summary: "Udostępnia metody, które zarządzają okresem istnienia dodatku."
  remarks: "Ponieważ model dodatku zapewnia możliwość przez dodatki do komunikacji między domenami aplikacji oraz między procesami, nie może zależeć moduł zbierający elementy bezużyteczne, aby je odzyskać. Ta klasa udostępnia zliczanie mechanizm dodatku, uzyskując tokenu okresu istnienia, do jego kontraktu.       Podczas konstruowania obiektu ContractHandle, wywołuje <xref:System.AddIn.Pipeline.ContractBase.AcquireLifetimeToken%2A>metody dla kontraktu, który jest przekazywany do konstruktora.</xref:System.AddIn.Pipeline.ContractBase.AcquireLifetimeToken%2A> Gdy usunięty lub sfinalizowany obiektu ContractHandle wywołuje <xref:System.AddIn.Pipeline.ContractBase.RevokeLifetimeToken%2A>Metoda kontrakt, co spowoduje usunięcie jej wstrzymywania kontraktu.</xref:System.AddIn.Pipeline.ContractBase.RevokeLifetimeToken%2A>       Karty implementuje kontrakt. Klasa ContractHandle jest przeznaczony do użycia w karty kontraktu do widoku, aby pomóc deweloperom potoku zarządzać okresem istnienia kontraktu, który dostosowuje się jest. Zazwyczaj wystąpienia tej klasy jest tworzone podczas konstruowania klasy karty i jest przechowywany w polu wystąpienia karty. Po klasie karty zbierane odzyskiwanie, obiekt ContractHandle również zostaną zebrane i obiektu ContractHandle będzie odwoływał tokenu okresu istnienia kontraktu.       Zaleca się, że karty widoku do kontraktu dziedziczą z <xref:System.AddIn.Pipeline.ContractBase>klasy.</xref:System.AddIn.Pipeline.ContractBase> Domyślna implementacja można następnie użyć dla członków <xref:System.AddIn.Contract.IContract>, co oznacza, że należy wdrożyć tylko do elementów członkowskich z określonym kontraktem.</xref:System.AddIn.Contract.IContract>"
  example:
  - "The following example shows how to set the lifetime token handle in a contract-to-view adapter on the add-in side of a pipeline.  \n  \n [!code-vb[AddinP2HostSideAdapters#2](~/add/codesnippet/visualbasic/Calc2HostSideAdapter/Calc2ContractToViewHostSideAdapter.vb#2)]\n [!code-cs[AddinP2HostSideAdapters#2](~/add/codesnippet/csharp/Calc2HostSideAdapter/Calc2ContractToViewHostSideAdapter.cs#2)]"
  syntax:
    content: 'public class ContractHandle : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.AddIn.Pipeline.ContractHandle.#ctor(System.AddIn.Contract.IContract)
  id: '#ctor(System.AddIn.Contract.IContract)'
  parent: System.AddIn.Pipeline.ContractHandle
  langs:
  - csharp
  name: ContractHandle(IContract)
  nameWithType: ContractHandle.ContractHandle(IContract)
  fullName: System.AddIn.Pipeline.ContractHandle.ContractHandle(IContract)
  type: Constructor
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.AddIn.Pipeline.ContractHandle&quot;> </xref> klasy."
  syntax:
    content: public ContractHandle (System.AddIn.Contract.IContract contract);
    parameters:
    - id: contract
      type: System.AddIn.Contract.IContract
      description: "Kontrakt do użycia w potoku."
  overload: System.AddIn.Pipeline.ContractHandle.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>contract</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.AddIn.Pipeline.ContractHandle.AppDomainOwner(System.AppDomain)
  id: AppDomainOwner(System.AppDomain)
  parent: System.AddIn.Pipeline.ContractHandle
  langs:
  - csharp
  name: AppDomainOwner(AppDomain)
  nameWithType: ContractHandle.AppDomainOwner(AppDomain)
  fullName: System.AddIn.Pipeline.ContractHandle.AppDomainOwner(AppDomain)
  type: Method
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: "Pobiera wystąpienie serwerowe w Dodaj karty, podczas tworzenia domeny aplikacji."
  remarks: "Dodaj w stronie karty sieciowe są wpisywane jako <xref:System.AddIn.Contract.IContract>.</xref:System.AddIn.Contract.IContract>       Jeśli wcześniej utworzono domeny aplikacji przez użytkownika, nie ma żadnych właściciela."
  syntax:
    content: public static System.AddIn.Contract.IContract AppDomainOwner (AppDomain domain);
    parameters:
    - id: domain
      type: System.AppDomain
      description: "Domena aplikacji do sprawdzenia."
    return:
      type: System.AddIn.Contract.IContract
      description: "<xref href=&quot;System.AddIn.Contract.IContract&quot;> </xref> Obiekt, który reprezentuje właściciela domeny aplikacji."
  overload: System.AddIn.Pipeline.ContractHandle.AppDomainOwner*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>domain</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.AddIn.Pipeline.ContractHandle.Contract
  id: Contract
  parent: System.AddIn.Pipeline.ContractHandle
  langs:
  - csharp
  name: Contract
  nameWithType: ContractHandle.Contract
  fullName: System.AddIn.Pipeline.ContractHandle.Contract
  type: Property
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: "Pobiera kontraktu używane przez potok."
  syntax:
    content: public System.AddIn.Contract.IContract Contract { get; }
    return:
      type: System.AddIn.Contract.IContract
      description: "Kontrakt, która jest pochodną <xref href=&quot;System.AddIn.Contract.IContract&quot;> </xref>."
  overload: System.AddIn.Pipeline.ContractHandle.Contract*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)
  id: ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)
  parent: System.AddIn.Pipeline.ContractHandle
  langs:
  - csharp
  name: ContractOwnsAppDomain(IContract,AppDomain)
  nameWithType: ContractHandle.ContractOwnsAppDomain(IContract,AppDomain)
  fullName: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(IContract,AppDomain)
  type: Method
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: "Określa, czy kontrakt określony jest należących do domeny aplikacji."
  syntax:
    content: public static bool ContractOwnsAppDomain (System.AddIn.Contract.IContract contract, AppDomain domain);
    parameters:
    - id: contract
      type: System.AddIn.Contract.IContract
      description: "Kontrakt do sprawdzenia."
    - id: domain
      type: System.AppDomain
      description: "Domena aplikacji do sprawdzenia."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>gdy kontrakt jest właścicielem domeny aplikacji; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>contract</code>or <code>domain</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.AddIn.Pipeline.ContractHandle.Dispose
  id: Dispose
  parent: System.AddIn.Pipeline.ContractHandle
  langs:
  - csharp
  name: Dispose()
  nameWithType: ContractHandle.Dispose()
  fullName: System.AddIn.Pipeline.ContractHandle.Dispose()
  type: Method
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: "Wycofanie tokenu okresu istnienia w kontrakcie, niezależnie od danych wejściowych."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.AddIn.Pipeline.ContractHandle.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Pipeline.ContractHandle.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.AddIn.Pipeline.ContractHandle
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ContractHandle.Dispose(Boolean)
  fullName: System.AddIn.Pipeline.ContractHandle.Dispose(Boolean)
  type: Method
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: "Wycofanie tokenu okresu istnienia kontraktu niezależnie od danych wejściowych i opcjonalnie zwalnia zasoby zarządzane."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby zwolnić zasoby zarządzane i niezarządzane; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> aby zwolnić tylko zasoby niezarządzane."
  overload: System.AddIn.Pipeline.ContractHandle.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Pipeline.ContractHandle.Finalize
  id: Finalize
  parent: System.AddIn.Pipeline.ContractHandle
  langs:
  - csharp
  name: Finalize()
  nameWithType: ContractHandle.Finalize()
  fullName: System.AddIn.Pipeline.ContractHandle.Finalize()
  type: Method
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: "Zwalnia zasoby skojarzone z <xref href=&quot;System.AddIn.Pipeline.ContractHandle&quot;> </xref> wystąpienia."
  remarks: "Ta metoda zastępuje <xref:System.Object.Finalize%2A?displayProperty=fullName>.</xref:System.Object.Finalize%2A?displayProperty=fullName> Kod aplikacji nie powinny wywoływać tej metody; metody Finalize obiektu jest wywoływana automatycznie podczas wyrzucania elementów bezużytecznych, chyba że finalizacji przez moduł garbage collector została wyłączona przez wywołanie do <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName>metody.</xref:System.GC.SuppressFinalize%2A?displayProperty=fullName>       Po wywołaniu przez moduł garbage collector, ta metoda wywołuje <xref:System.AddIn.Pipeline.ContractHandle.Dispose%28System.Boolean%29>metody.</xref:System.AddIn.Pipeline.ContractHandle.Dispose%28System.Boolean%29>"
  syntax:
    content: ~ContractHandle ();
    parameters: []
  overload: System.AddIn.Pipeline.ContractHandle.Finalize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.AddIn.Pipeline.ContractHandle.#ctor(System.AddIn.Contract.IContract)
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: ContractHandle(IContract)
  nameWithType: ContractHandle.ContractHandle(IContract)
  fullName: System.AddIn.Pipeline.ContractHandle.ContractHandle(IContract)
- uid: System.AddIn.Contract.IContract
  parent: System.AddIn.Contract
  isExternal: false
  name: IContract
  nameWithType: IContract
  fullName: System.AddIn.Contract.IContract
- uid: System.AddIn.Pipeline.ContractHandle.AppDomainOwner(System.AppDomain)
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: AppDomainOwner(AppDomain)
  nameWithType: ContractHandle.AppDomainOwner(AppDomain)
  fullName: System.AddIn.Pipeline.ContractHandle.AppDomainOwner(AppDomain)
- uid: System.AppDomain
  parent: System
  isExternal: false
  name: AppDomain
  nameWithType: AppDomain
  fullName: System.AppDomain
- uid: System.AddIn.Pipeline.ContractHandle.Contract
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: Contract
  nameWithType: ContractHandle.Contract
  fullName: System.AddIn.Pipeline.ContractHandle.Contract
- uid: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: ContractOwnsAppDomain(IContract,AppDomain)
  nameWithType: ContractHandle.ContractOwnsAppDomain(IContract,AppDomain)
  fullName: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(IContract,AppDomain)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.AddIn.Pipeline.ContractHandle.Dispose
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: Dispose()
  nameWithType: ContractHandle.Dispose()
  fullName: System.AddIn.Pipeline.ContractHandle.Dispose()
- uid: System.AddIn.Pipeline.ContractHandle.Dispose(System.Boolean)
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ContractHandle.Dispose(Boolean)
  fullName: System.AddIn.Pipeline.ContractHandle.Dispose(Boolean)
- uid: System.AddIn.Pipeline.ContractHandle.Finalize
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: Finalize()
  nameWithType: ContractHandle.Finalize()
  fullName: System.AddIn.Pipeline.ContractHandle.Finalize()
- uid: System.AddIn.Pipeline.ContractHandle.#ctor*
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: ContractHandle
  nameWithType: ContractHandle.ContractHandle
- uid: System.AddIn.Pipeline.ContractHandle.AppDomainOwner*
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: AppDomainOwner
  nameWithType: ContractHandle.AppDomainOwner
- uid: System.AddIn.Pipeline.ContractHandle.Contract*
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: Contract
  nameWithType: ContractHandle.Contract
- uid: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain*
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: ContractOwnsAppDomain
  nameWithType: ContractHandle.ContractOwnsAppDomain
- uid: System.AddIn.Pipeline.ContractHandle.Dispose*
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: Dispose
  nameWithType: ContractHandle.Dispose
- uid: System.AddIn.Pipeline.ContractHandle.Finalize*
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: Finalize
  nameWithType: ContractHandle.Finalize
