### YamlMime:ManagedReference
items:
- uid: System.Transactions.DependentTransaction
  id: DependentTransaction
  children:
  - System.Transactions.DependentTransaction.Complete
  langs:
  - csharp
  name: DependentTransaction
  nameWithType: DependentTransaction
  fullName: System.Transactions.DependentTransaction
  type: Class
  summary: "W tym artykule opisano Sklonowanie transakcji, zapewniając gwarancji, że nie można zatwierdzić transakcji, dopóki aplikacja zawiera rest dotyczące pracy w transakcji. Ta klasa nie może być dziedziczona."
  remarks: "DependentTransaction jest klonem <xref:System.Transactions.Transaction>utworzone za pomocą obiektu <xref:System.Transactions.Transaction.DependentClone%2A>metody.</xref:System.Transactions.Transaction.DependentClone%2A> </xref:System.Transactions.Transaction>  Jedynym celem jest umożliwienie aplikacji do trybu rest i gwarantuje, że transakcja nie można zatwierdzić podczas pracy jest nadal w transakcji (na przykład na wątku roboczego).       Podczas pracy w ramach transakcji sklonowany finally jest gotowy do można zatwierdzić, mogą informować twórca przy użyciu transakcji <xref:System.Transactions.DependentTransaction.Complete%2A>metody.</xref:System.Transactions.DependentTransaction.Complete%2A> W związku z tym można zachować spójność i poprawność danych.       <xref:System.Transactions.DependentCloneOption>Wyliczenia służy do określania zachowania w zatwierdzeniu.</xref:System.Transactions.DependentCloneOption>  Ten formant zachowanie umożliwia aplikacji się zatrzymać, a także zapewnia obsługę współbieżności. Aby uzyskać więcej informacji o sposobie użycia tego wyliczenia, zobacz [Zarządzanie współbieżności z DependentTransaction](http://msdn.microsoft.com/en-us/bdad8468-2a90-4b81-8375-278067120cab)."
  example:
  - "The following example shows you how to create a dependent transaction.  \n  \n [!code-vb[Tx_DependentTx#1](~/add/codesnippet/visualbasic/t-system.transactions.de_0_1.vb)]\n [!code-cs[Tx_DependentTx#1](~/add/codesnippet/csharp/t-system.transactions.de_0_1.cs)]"
  syntax:
    content: 'public sealed class DependentTransaction : System.Transactions.Transaction'
  inheritance:
  - System.Object
  - System.Transactions.Transaction
  implements: []
  inheritedMembers:
  - System.Transactions.Transaction.Clone
  - System.Transactions.Transaction.Current
  - System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)
  - System.Transactions.Transaction.Dispose
  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)
  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.Equals(System.Object)
  - System.Transactions.Transaction.GetHashCode
  - System.Transactions.Transaction.GetPromotedToken
  - System.Transactions.Transaction.IsolationLevel
  - System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)
  - System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)
  - System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.PromoterType
  - System.Transactions.Transaction.Rollback
  - System.Transactions.Transaction.Rollback(System.Exception)
  - System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  - System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Transactions.Transaction.TransactionCompleted
  - System.Transactions.Transaction.TransactionInformation
  platform:
  - net462
- uid: System.Transactions.DependentTransaction.Complete
  id: Complete
  parent: System.Transactions.DependentTransaction
  langs:
  - csharp
  name: Complete()
  nameWithType: DependentTransaction.Complete()
  fullName: System.Transactions.DependentTransaction.Complete()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Próbuje ukończyć transakcji zależnych."
  remarks: "Tę metodę można wywołać, gdy chce informują twórca transakcji o zakończeniu pracy można można zatwierdzić transakcji, jeśli element nadrzędny jest również gotowe klon zależny.       Po wywołaniu tego wywołania nie powinny podejmować żadnych dodatkowych działań dla transakcji, lub jest zgłaszany wyjątek.       Jeśli domena aplikacji ulegnie awarii po ta metoda jest wywoływana przed zakończeniem transakcja może przerwać transakcji.       **Uwaga** tę metodę należy wywoływać tylko raz, okres istnienia transakcji zależnych."
  syntax:
    content: public void Complete ();
    parameters: []
  overload: System.Transactions.DependentTransaction.Complete*
  exceptions:
  - type: System.Transactions.TransactionException
    commentId: T:System.Transactions.TransactionException
    description: "Każda próba dla dodatkowych działań dla transakcji po ta metoda jest wywoływana. Obejmują one, takich jak wywoływanie metod <> </> *>, <> </> *>, <> </> *>, <> </> *>, ani żadnych operacji serializacji dla transakcji."
  platform:
  - net462
references:
- uid: System.Transactions.Transaction
  isExternal: false
  name: System.Transactions.Transaction
- uid: System.Transactions.TransactionException
  parent: System.Transactions
  isExternal: false
  name: TransactionException
  nameWithType: TransactionException
  fullName: System.Transactions.TransactionException
- uid: System.Transactions.DependentTransaction.Complete
  parent: System.Transactions.DependentTransaction
  isExternal: false
  name: Complete()
  nameWithType: DependentTransaction.Complete()
  fullName: System.Transactions.DependentTransaction.Complete()
- uid: System.Transactions.DependentTransaction.Complete*
  parent: System.Transactions.DependentTransaction
  isExternal: false
  name: Complete
  nameWithType: DependentTransaction.Complete
