### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Strings
  id: Strings
  children:
  - Microsoft.VisualBasic.Strings.Asc(System.Char)
  - Microsoft.VisualBasic.Strings.Asc(System.String)
  - Microsoft.VisualBasic.Strings.AscW(System.Char)
  - Microsoft.VisualBasic.Strings.AscW(System.String)
  - Microsoft.VisualBasic.Strings.Chr(System.Int32)
  - Microsoft.VisualBasic.Strings.ChrW(System.Int32)
  - Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Format(System.Object,System.String)
  - Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  - Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  - Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  - Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  - Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)
  - Microsoft.VisualBasic.Strings.Join(System.String[],System.String)
  - Microsoft.VisualBasic.Strings.LCase(System.Char)
  - Microsoft.VisualBasic.Strings.LCase(System.String)
  - Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.Len(System.Boolean)
  - Microsoft.VisualBasic.Strings.Len(System.Byte)
  - Microsoft.VisualBasic.Strings.Len(System.Char)
  - Microsoft.VisualBasic.Strings.Len(System.DateTime)
  - Microsoft.VisualBasic.Strings.Len(System.Decimal)
  - Microsoft.VisualBasic.Strings.Len(System.Double)
  - Microsoft.VisualBasic.Strings.Len(System.Int16)
  - Microsoft.VisualBasic.Strings.Len(System.Int32)
  - Microsoft.VisualBasic.Strings.Len(System.Int64)
  - Microsoft.VisualBasic.Strings.Len(System.Object)
  - Microsoft.VisualBasic.Strings.Len(System.SByte)
  - Microsoft.VisualBasic.Strings.Len(System.Single)
  - Microsoft.VisualBasic.Strings.Len(System.String)
  - Microsoft.VisualBasic.Strings.Len(System.UInt16)
  - Microsoft.VisualBasic.Strings.Len(System.UInt32)
  - Microsoft.VisualBasic.Strings.Len(System.UInt64)
  - Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.LTrim(System.String)
  - Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)
  - Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.RTrim(System.String)
  - Microsoft.VisualBasic.Strings.Space(System.Int32)
  - Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  - Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)
  - Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)
  - Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)
  - Microsoft.VisualBasic.Strings.StrReverse(System.String)
  - Microsoft.VisualBasic.Strings.Trim(System.String)
  - Microsoft.VisualBasic.Strings.UCase(System.Char)
  - Microsoft.VisualBasic.Strings.UCase(System.String)
  langs:
  - csharp
  name: Strings
  nameWithType: Strings
  fullName: Microsoft.VisualBasic.Strings
  type: Class
  summary: "<xref uid=&quot;langword_csharp_Strings&quot; name=&quot;Strings&quot; href=&quot;&quot;> </xref> Moduł zawiera procedury używany do wykonywania operacji na ciągach."
  remarks: "Ten moduł obsługuje słów kluczowych języka Visual Basic i elementy członkowskie biblioteki wykonawczej, które manipulowania ciągami."
  example:
  - "The following example demonstrates how to split a string at its spaces.  \n  \n [!code-vb[VbVbalrStrings#13](~/add/codesnippet/visualbasic/t-microsoft.visualbasic._6_1.vb)]"
  syntax:
    content: >-
      [Microsoft.VisualBasic.CompilerServices.StandardModule]

      public sealed class Strings
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Asc(System.Char)
  id: Asc(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Asc(Char)
  nameWithType: Strings.Asc(Char)
  fullName: Microsoft.VisualBasic.Strings.Asc(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> wartość reprezentującą kod znaku odpowiadający znakowi."
  remarks: "`Asc`Zwraca *punktem kodu*, lub kod znaku, wprowadzany znak. Może to być od 0 do 255 znaków jednobajtowych (SBCS) zestaw wartości i -32768 do 32767 znaków dwubajtowych (DBCS) zestawu wartości.       `AscW`Zwraca punkt kodu Unicode dla znak wejściowy. Może to być 0 do 65535. Zwrócona wartość jest niezależne od kultury i kod ustawień strony dla bieżącego wątku.      > [!NOTE] > `AscB` Funkcja wcześniejszych wersji programu Visual Basic zwraca kod znaku, a nie typu byte. Jest on używany głównie do konwertowania ciągów znaków dwubajtowych (DBCS) aplikacji. Wszystkie ciągi Visual Basic 2005 są w formacie Unicode, i `AscB` nie jest już obsługiwana."
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._55_1.vb)]"
  syntax:
    content: public static int Asc (char String);
    parameters:
    - id: String
      type: System.Char
      description: "Wymagany. Wszystkie prawidłowe <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> lub <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> wyrażenia. Jeśli `String` jest <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> wyrażenie, pierwszego znaku ciągu jest używane dla danych wejściowych. Jeśli `String` jest <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> lub nie zawiera znaków, <xref:System.ArgumentException>występuje błąd.</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "Zwraca <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> wartość reprezentującą kod znaku odpowiadający znakowi."
  overload: Microsoft.VisualBasic.Strings.Asc*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Asc(System.String)
  id: Asc(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Asc(String)
  nameWithType: Strings.Asc(String)
  fullName: Microsoft.VisualBasic.Strings.Asc(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> wartość reprezentującą kod znaku odpowiadający znakowi."
  remarks: "`Asc`Zwraca *punktem kodu*, lub kod znaku, wprowadzany znak. Może to być od 0 do 255 znaków jednobajtowych (SBCS) zestaw wartości i -32768 do 32767 znaków dwubajtowych (DBCS) zestawu wartości.       `AscW`Zwraca punkt kodu Unicode dla znak wejściowy. Może to być 0 do 65535. Zwrócona wartość jest niezależne od kultury i kod ustawień strony dla bieżącego wątku.      > [!NOTE] > `AscB` Funkcja wcześniejszych wersji programu Visual Basic zwraca kod znaku, a nie typu byte. Jest on używany głównie do konwertowania ciągów znaków dwubajtowych (DBCS) aplikacji. Wszystkie ciągi Visual Basic 2005 są w formacie Unicode, i `AscB` nie jest już obsługiwana."
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._249_1.vb)]"
  syntax:
    content: public static int Asc (string String);
    parameters:
    - id: String
      type: System.String
      description: "Wymagany. Wszystkie prawidłowe <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> lub <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> wyrażenia. Jeśli `String` jest <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> wyrażenie, pierwszego znaku ciągu jest używane dla danych wejściowych. Jeśli `String` jest <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> lub nie zawiera znaków, <xref:System.ArgumentException>występuje błąd.</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "Zwraca <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> wartość reprezentującą kod znaku odpowiadający znakowi."
  overload: Microsoft.VisualBasic.Strings.Asc*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.AscW(System.Char)
  id: AscW(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: AscW(Char)
  nameWithType: Strings.AscW(Char)
  fullName: Microsoft.VisualBasic.Strings.AscW(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> wartość reprezentującą kod znaku odpowiadający znakowi."
  remarks: "`Asc`Zwraca *punktem kodu*, lub kod znaku, wprowadzany znak. Może to być od 0 do 255 znaków jednobajtowych (SBCS) zestaw wartości i -32768 do 32767 znaków dwubajtowych (DBCS) zestawu wartości.       `AscW`Zwraca punkt kodu Unicode dla znak wejściowy. Może to być 0 do 65535. Zwrócona wartość jest niezależne od kultury i kod ustawień strony dla bieżącego wątku.      > [!NOTE] > `AscB` Funkcja wcześniejszych wersji programu Visual Basic zwraca kod znaku, a nie typu byte. Jest on używany głównie do konwertowania ciągów znaków dwubajtowych (DBCS) aplikacji. Wszystkie ciągi Visual Basic 2005 są w formacie Unicode, i `AscB` nie jest już obsługiwana."
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._18_1.vb)]"
  syntax:
    content: public static int AscW (char String);
    parameters:
    - id: String
      type: System.Char
      description: "Wymagany. Wszystkie prawidłowe <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> lub <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> wyrażenia. Jeśli `String` jest <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> wyrażenie, pierwszego znaku ciągu jest używane dla danych wejściowych. Jeśli `String` jest <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> lub nie zawiera znaków, <xref:System.ArgumentException>występuje błąd.</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "Zwraca <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> wartość reprezentującą kod znaku odpowiadający znakowi."
  overload: Microsoft.VisualBasic.Strings.AscW*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.AscW(System.String)
  id: AscW(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: AscW(String)
  nameWithType: Strings.AscW(String)
  fullName: Microsoft.VisualBasic.Strings.AscW(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> wartość reprezentującą kod znaku odpowiadający znakowi."
  remarks: "`Asc`Zwraca *punktem kodu*, lub kod znaku, wprowadzany znak. Może to być od 0 do 255 znaków jednobajtowych (SBCS) zestaw wartości i -32768 do 32767 znaków dwubajtowych (DBCS) zestawu wartości.       `AscW`Zwraca punkt kodu Unicode dla znak wejściowy. Może to być 0 do 65535. Zwrócona wartość jest niezależne od kultury i kod ustawień strony dla bieżącego wątku.      > [!NOTE] > `AscB` Funkcja wcześniejszych wersji programu Visual Basic zwraca kod znaku, a nie typu byte. Jest on używany głównie do konwertowania ciągów znaków dwubajtowych (DBCS) aplikacji. Wszystkie ciągi Visual Basic 2005 są w formacie Unicode, i `AscB` nie jest już obsługiwana."
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._205_1.vb)]"
  syntax:
    content: public static int AscW (string String);
    parameters:
    - id: String
      type: System.String
      description: "Wymagany. Wszystkie prawidłowe <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> lub <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> wyrażenia. Jeśli `String` jest <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> wyrażenie, pierwszego znaku ciągu jest używane dla danych wejściowych. Jeśli `String` jest <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> lub nie zawiera znaków, <xref:System.ArgumentException>występuje błąd.</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "Zwraca <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> wartość reprezentującą kod znaku odpowiadający znakowi."
  overload: Microsoft.VisualBasic.Strings.AscW*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Chr(System.Int32)
  id: Chr(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Chr(Int32)
  nameWithType: Strings.Chr(Int32)
  fullName: Microsoft.VisualBasic.Strings.Chr(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca znak skojarzony z podanym kodem znaku."
  remarks: "Zaakceptowane asymetrycznego zakresu `CharCode` kompensuje magazynu różnice między `Short` i `Integer`. Na przykład jest-29183 `Short` , ale jest +36353 `Integer`. Ułatwia to również zgodność z Visual Basic 6.0.       `Chr`używa <xref:System.Text.Encoding>klasy w <xref:System.Text?displayProperty=fullName>(DBCS) Ustaw przestrzeni nazw, aby określić, czy bieżący wątek używa zestaw znaków jednobajtowych (SBCS) lub znaków dwubajtowych.</xref:System.Text?displayProperty=fullName> </xref:System.Text.Encoding> Następnie przyjmuje `CharCode` jako kod punktów w odpowiednim zestawie. Może on zawierać cyfry od 0 do 255 znaków SBCS i -32768 do 65535 znaków zestawów znaków Dwubajtowych.       Zwracana wartość zależy od strony kodowej dla bieżącego wątku, który jest zawarty w <xref:System.Globalization.TextInfo.ANSICodePage%2A>właściwości <xref:System.Globalization.TextInfo>klasy w <xref:System.Globalization>przestrzeni nazw.</xref:System.Globalization> </xref:System.Globalization.TextInfo> </xref:System.Globalization.TextInfo.ANSICodePage%2A> Możesz uzyskać <xref:System.Globalization.TextInfo.ANSICodePage%2A>określając `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.</xref:System.Globalization.TextInfo.ANSICodePage%2A>       `ChrW`Trwa `CharCode` jako Unicode punktem kodu. Zakres jest niezależne od kultury i kod ustawień strony dla bieżącego wątku. Wartości od -32768 do-1 są traktowane identycznie do wartości w zakresie +32768 za pośrednictwem +65535.       Cyfry z przedziału od 0 do 31 są takie same jak standardowe niedrukowalne kodów ASCII. Na przykład `Chr(10)` zwraca znak wysuwu wiersza.      > [!NOTE] > `ChrB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca pojedynczy bajt. Jest on używany głównie do konwertowania ciągów znaków dwubajtowych (DBCS) aplikacji. Wszystkie ciągi w Visual Basic i .NET Framework są w formacie Unicode, i `ChrB` nie jest już obsługiwana."
  example:
  - "The following example uses the `Chr` function to return the character associated with the specified character code.  \n  \n [!code-vb[VbVbalrStrings#7](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._105_1.vb)]"
  syntax:
    content: public static char Chr (int CharCode);
    parameters:
    - id: CharCode
      type: System.Int32
      description: "Wymagany. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> Reprezentujący wyrażenie `code point`, lub kodu, znaku."
    return:
      type: System.Char
      description: "Zwraca znak skojarzony z podanym kodem znaku."
  overload: Microsoft.VisualBasic.Strings.Chr*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>CharCode</code>&lt; 0 or &gt; 255 for <xref uid=&quot;langword_csharp_Chr&quot; name=&quot;Chr&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.ChrW(System.Int32)
  id: ChrW(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: ChrW(Int32)
  nameWithType: Strings.ChrW(Int32)
  fullName: Microsoft.VisualBasic.Strings.ChrW(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca znak skojarzony z podanym kodem znaku."
  remarks: "Zaakceptowane asymetrycznego zakresu `CharCode` kompensuje magazynu różnice między `Short` i `Integer`. Na przykład jest-29183 `Short` , ale jest +36353 `Integer`. Ułatwia to również zgodność z Visual Basic 6.0.       `Chr`używa <xref:System.Text.Encoding>klasy w <xref:System.Text?displayProperty=fullName>(DBCS) Ustaw przestrzeni nazw, aby określić, czy bieżący wątek używa zestaw znaków jednobajtowych (SBCS) lub znaków dwubajtowych.</xref:System.Text?displayProperty=fullName> </xref:System.Text.Encoding> Następnie przyjmuje `CharCode` jako kod punktów w odpowiednim zestawie. Może on zawierać cyfry od 0 do 255 znaków SBCS i -32768 do 65535 znaków zestawów znaków Dwubajtowych.       Zwracana wartość zależy od strony kodowej dla bieżącego wątku, który jest zawarty w <xref:System.Globalization.TextInfo.ANSICodePage%2A>właściwości <xref:System.Globalization.TextInfo>klasy w <xref:System.Globalization>przestrzeni nazw.</xref:System.Globalization> </xref:System.Globalization.TextInfo> </xref:System.Globalization.TextInfo.ANSICodePage%2A> Możesz uzyskać <xref:System.Globalization.TextInfo.ANSICodePage%2A>określając `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.</xref:System.Globalization.TextInfo.ANSICodePage%2A>       `ChrW`Trwa `CharCode` jako Unicode punktem kodu. Zakres jest niezależne od kultury i kod ustawień strony dla bieżącego wątku. Wartości od -32768 do-1 są traktowane identycznie do wartości w zakresie +32768 za pośrednictwem +65535.       Cyfry z przedziału od 0 do 31 są takie same jak standardowe niedrukowalne kodów ASCII. Na przykład `Chr(10)` zwraca znak wysuwu wiersza.      > [!NOTE] > `ChrB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca pojedynczy bajt. Jest on używany głównie do konwertowania ciągów znaków dwubajtowych (DBCS) aplikacji. Wszystkie ciągi w Visual Basic i .NET Framework są w formacie Unicode, i `ChrB` nie jest już obsługiwana."
  example:
  - "The following example uses the `Chr` function to return the character associated with the specified character code.  \n  \n [!code-vb[VbVbalrStrings#7](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._45_1.vb)]"
  syntax:
    content: public static char ChrW (int CharCode);
    parameters:
    - id: CharCode
      type: System.Int32
      description: "Wymagany. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> Reprezentujący wyrażenie `code point`, lub kodu, znaku."
    return:
      type: System.Char
      description: "Zwraca znak skojarzony z podanym kodem znaku."
  overload: Microsoft.VisualBasic.Strings.ChrW*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>CharCode</code>&lt; -32768 or &gt; 65535 for <xref uid=&quot;langword_csharp_ChrW&quot; name=&quot;ChrW&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  id: Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Filter(Object[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(Object[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(Object[],String,Boolean,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca tablicę wartości nieujemnych zawierającą podzbiór <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> tablicy oparciu o określone kryteria filtru."
  remarks: "Jeśli nie dopasowania `Match` znajdują się w obrębie `Source`, `Filter` funkcja zwraca pustą tablicę. Jeśli wystąpi błąd `Source` ma ustawioną wartość `Nothing` lub nie jest tablicą jednowymiarową.       Tablica zwrócona przez `Filter` funkcja zawiera tylko za mało elementów zawiera Liczba pasujących elementów.       `Compare` Argument może mieć następujące wartości.      |||   |-|-|   | Stałe | Opis elementu |   | `CompareMethod.Binary`| Przeprowadza porównanie binarne |   | `CompareMethod.Text`| Przeprowadza porównanie tekstowe |"
  example:
  - "This example demonstrates the use of the `Filter` function.  \n  \n [!code-vb[VbVbalrStrings#24](~/add/codesnippet/visualbasic/bfb6d7a4-ec2d-49ca-96ad-_1.vb)]"
  syntax:
    content: public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Source
      type: System.Object[]
      description: "Wymagany. Jednowymiarowa tablica ciągów do wyszukania."
    - id: Match
      type: System.String
      description: "Wymagany. Ciąg do wyszukania."
    - id: Include
      type: System.Boolean
      description: "Opcjonalny. <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>Wartość wskazująca, czy mają być zwracane podciągów Dołącz lub Wyklucz `Match`. Jeśli `Include` jest <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref> funkcja zwraca podzbiór tablicy, która zawiera `Match` jako podciąg. Jeśli `Include` jest <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref> funkcja zwraca podzbiór tablicy, która nie zawiera `Match` jako podciąg."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Opcjonalny. Wartość liczbowa określająca sposób porównywania ciągów. Wartości można znaleźć w temacie &quot;Ustawienia&quot;."
    return:
      type: System.String[]
      description: "Zwraca tablicę wartości nieujemnych zawierającą podzbiór <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> tablicy oparciu o określone kryteria filtru."
  overload: Microsoft.VisualBasic.Strings.Filter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Source</code>jest <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> lub nie jest tablicą jednowymiarową."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  id: Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Filter(String[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(String[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(String[],String,Boolean,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca tablicę wartości nieujemnych zawierającą podzbiór <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> tablicy oparciu o określone kryteria filtru."
  remarks: "Jeśli nie dopasowania `Match` znajdują się w obrębie `Source`, `Filter` funkcja zwraca pustą tablicę. Jeśli wystąpi błąd `Source` ma ustawioną wartość `Nothing` lub nie jest tablicą jednowymiarową.       Tablica zwrócona przez `Filter` funkcja zawiera tylko za mało elementów zawiera Liczba pasujących elementów.       `Compare` Argument może mieć następujące wartości.      |||   |-|-|   | Stałe | Opis elementu |   | `CompareMethod.Binary`| Przeprowadza porównanie binarne |   | `CompareMethod.Text`| Przeprowadza porównanie tekstowe |"
  example:
  - "This example demonstrates the use of the `Filter` function.  \n  \n [!code-vb[VbVbalrStrings#24](~/add/codesnippet/visualbasic/a4b278ef-f791-4808-8a23-_1.vb)]"
  syntax:
    content: public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Source
      type: System.String[]
      description: "Wymagany. Jednowymiarowa tablica ciągów do wyszukania."
    - id: Match
      type: System.String
      description: "Wymagany. Ciąg do wyszukania."
    - id: Include
      type: System.Boolean
      description: "Opcjonalny. <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>Wartość wskazująca, czy mają być zwracane podciągów Dołącz lub Wyklucz `Match`. Jeśli `Include` jest <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref> funkcja zwraca podzbiór tablicy, która zawiera `Match` jako podciąg. Jeśli `Include` jest <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref> funkcja zwraca podzbiór tablicy, która nie zawiera `Match` jako podciąg."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Opcjonalny. Wartość liczbowa określająca sposób porównywania ciągów. Wartości można znaleźć w temacie &quot;Ustawienia&quot;."
    return:
      type: System.String[]
      description: "Zwraca tablicę wartości nieujemnych zawierającą podzbiór <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> tablicy oparciu o określone kryteria filtru."
  overload: Microsoft.VisualBasic.Strings.Filter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Source</code>jest <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> lub nie jest tablicą jednowymiarową."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Format(System.Object,System.String)
  id: Format(System.Object,System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Format(Object,String)
  nameWithType: Strings.Format(Object,String)
  fullName: Microsoft.VisualBasic.Strings.Format(Object,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca ciąg sformatowany zgodnie z instrukcjami zawartymi w formacie <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> wyrażenia."
  remarks: "The <xref:System.String.Format%2A?displayProperty=fullName> method also provides similar functionality.  \n  \n If you are formatting a nonlocalized numeric string, you should use a user-defined numeric format to ensure that you get the look you want.  \n  \n If you try to format a number without specifying `Style`, the `Format` function provides functionality similar to the `Str` function, although it is internationally aware. However, positive numbers formatted as strings using the `Format` function don't include a leading space reserved for the sign of the value; those converted using the `Str` function retain the leading space.  \n  \n## Different Formats for Different Numeric Values  \n A user-defined format expression for numbers can have from one to three sections separated by semicolons. If the `Style` argument of the `Format` function contains one of the predefined numeric formats, only one section is allowed.  \n  \n|||  \n|-|-|  \n|If you use|This is the result|  \n|One section only|The format expression applies to all values.|  \n|Two sections|The first section applies to positive values and zeros; the second applies to negative values.|  \n|Three sections|The first section applies to positive values, the second applies to negative values, and the third applies to zeros.|  \n  \n The following example has two sections: the first defines the format for positive values and zeros; the second section defines the format for negative values. Since the `Style` argument of the `Format` function takes a string, it is enclosed by quotation marks.  \n  \n [!code-vb[VbVbalrStrings#18](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._134_1.vb)]  \n  \n If you include semicolons with nothing between them, the missing section is printed using the format of the positive value. For example, the following format displays positive and negative values using the format in the first section and displays `Zero` if the value is zero.  \n  \n [!code-vb[VbVbalrStrings#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._134_2.vb)]  \n  \n## Predefined Numeric Formats  \n The following table identifies the predefined numeric format names. These may be used by name as the `Style` argument for the `Format` function:  \n  \n|||  \n|-|-|  \n|Format name|Description|  \n|`General Number`, `G`, or `g`|Displays number with no thousand separator.<br /><br /> For example, `Format(&H3FA, \"g\")` returns `1018`.|  \n|`Currency`, `C`, or `c`|Displays number with thousand separator, if appropriate; displays two digits to the right of the decimal separator. Output is based on system locale settings.<br /><br /> For example, `Format(1234567, \"c\")` returns `$1,234,567.00`.|  \n|`Fixed`, `F`, or `f`|Displays at least one digit to the left and two digits to the right of the decimal separator.<br /><br /> For example, `Format(1234567, \"f\")` returns `1234567.00`.|  \n|`Standard`, `N`, or `n`|Displays number with thousand separator, at least one digit to the left and two digits to the right of the decimal separator.<br /><br /> For example, `Format(1234567, \"n\")` returns `1,234,567.00`.|  \n|`Percent`|Displays number multiplied by 100 with a percent sign (%) appended immediately to the right; always displays two digits to the right of the decimal separator.<br /><br /> For example, `Format(0.4744, \"Percent\")` returns `47.44%`.|  \n|`P`, or `p`|Displays number with thousandths separator multiplied by 100 with a percent sign (%) appended to the right and separated by a single space; always displays two digits to the right of the decimal separator.<br /><br /> For example, `Format(0.80345, \"p\")` returns `80.35 %`.|  \n|`Scientific`|Uses standard scientific notation, providing two significant digits.<br /><br /> For example, `Format(1234567, \"Scientific\")` returns `1.23E+06`.|  \n|`E`, or `e`|Uses standard scientific notation, providing six significant digits.<br /><br /> For example, `Format(1234567, \"e\")` returns `1.234567e+006`.|  \n|`D`, or `d`|Displays number as a string that contains the value of the number in Decimal (base 10) format. This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.<br /><br /> For example, `Format(&H7F, \"d\")` returns `127`.|  \n|`X`, or `x`|Displays number as a string that contains the value of the number in Hexadecimal (base 16) format. This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.<br /><br /> For example, `Format(127, \"x\")` returns `7f`.|  \n|`Yes/No`|Displays `No` if number is 0; otherwise, displays `Yes`.<br /><br /> For example, `Format(0, \"Yes/No\")` returns `No`.|  \n|`True/False`|Displays `False` if number is 0; otherwise, displays `True`.<br /><br /> For example, `Format(1, \"True/False\")` returns `True`.|  \n|`On/Off`|Displays `Off` if number is 0; otherwise, displays `On`.<br /><br /> For example, `Format(1, \"On/Off\")` returns `On`.|  \n  \n### Smart Device Developer Notes  \n The `Yes/No`, `True/False`, and `On/Off` formats are not supported.  \n  \n## User-Defined Numeric Formats  \n The following table identifies characters you can use to create user-defined number formats. These may be used to build the `Style` argument for the `Format` function:  \n  \n|||  \n|-|-|  \n|Character|Description|  \n|None|Displays the number with no formatting.|  \n|(`0`)|Digit placeholder. Displays a digit or a zero. If the expression has a digit in the position where the zero appears in the format string, display it; otherwise, displays a zero in that position.<br /><br /> If the number has fewer digits than there are zeros (on either side of the decimal) in the format expression, displays leading or trailing zeros. If the number has more digits to the right of the decimal separator than there are zeros to the right of the decimal separator in the format expression, rounds the number to as many decimal places as there are zeros. If the number has more digits to the left of the decimal separator than there are zeros to the left of the decimal separator in the format expression, displays the extra digits without modification.|  \n|(`#`)|Digit placeholder. Displays a digit or nothing. If the expression has a digit in the position where the `#` character appears in the format string, displays it; otherwise, displays nothing in that position.<br /><br /> This symbol works like the `0` digit placeholder, except that leading and trailing zeros aren't displayed if the number has fewer digits than there are `#` characters on either side of the decimal separator in the format expression.|  \n|(`.`)|Decimal placeholder. The decimal placeholder determines how many digits are displayed to the left and right of the decimal separator. If the format expression contains only `#` characters to the left of this symbol; numbers smaller than 1 begin with a decimal separator. To display a leading zero displayed with fractional numbers, use zero as the first digit placeholder to the left of the decimal separator. In some locales, a comma is used as the decimal separator. The actual character used as a decimal placeholder in the formatted output depends on the number format recognized by your system. Thus, you should use the period as the decimal placeholder in your formats even if you are in a locale that uses a comma as a decimal placeholder. The formatted string will appear in the format correct for the locale.|  \n|(`%`)|Percent placeholder. Multiplies the expression by 100. The percent character (`%`) is inserted in the position where it appears in the format string.|  \n|(`,`)|Thousand separator. The thousand separator separates thousands from hundreds within a number that has four or more places to the left of the decimal separator. Standard use of the thousand separator is specified if the format contains a thousand separator surrounded by digit placeholders (`0` or `#`).<br /><br /> A thousand separator immediately to the left of the decimal separator (whether or not a decimal is specified) or as the rightmost character in the string means \"scale the number by dividing it by 1,000, rounding as needed.\" Numbers smaller than 1,000 but greater or equal to 500 are displayed as `1`, and numbers smaller than 500 are displayed as `0`. Two adjacent thousand separators in this position scale by a factor of 1 million, and an additional factor of 1,000 for each additional separator.<br /><br /> Multiple separators in any position other than immediately to the left of the decimal separator or the rightmost position in the string are treated simply as specifying the use of a thousand separator. In some locales, a period is used as a thousand separator. The actual character used as the thousand separator in the formatted output depends on the Number Format recognized by your system. Thus, you should use the comma as the thousand separator in your formats even if you are in a locale that uses a period as a thousand separator. The formatted string will appear in the format correct for the locale.<br /><br /> For example, consider the three following format strings:<br /><br /> -   `\"#,0.\"`, which uses the thousands separator to format the number 100 million as the string \"100,000,000\".<br />-   `\"#0,.\"`, which uses scaling by a factor of one thousand to format the number 100 million as the string \"100000\".<br />-   `\"#,0,.\"`, which uses the thousands separator and scaling by one thousand to format the number 100 million as the string \"100,000\".|  \n|(`:`)|Time separator. In some locales, other characters may be used to represent the time separator. The time separator separates hours, minutes, and seconds when time values are formatted. The actual character used as the time separator in formatted output is determined by your system settings.|  \n|(`/`)|Date separator. In some locales, other characters may be used to represent the date separator. The date separator separates the day, month, and year when date values are formatted. The actual character used as the date separator in formatted output is determined by your system settings.|  \n|(`E-``E+``e-``e+`)|Scientific format. If the format expression contains at least one digit placeholder (`0` or `#`) to the left of `E-`, `E+`, `e-`, or `e+`, the number is displayed in scientific format and `E` or `e` is inserted between the number and its exponent. The number of digit placeholders to the left determines the number of digits in the exponent. Use `E-` or `e-` to place a minus sign next to negative exponents. Use `E+` or `e+` to place a minus sign next to negative exponents and a plus sign next to positive exponents. You must also include digit placeholders to the right of this symbol to get correct formatting.|  \n|`-` `+` `$` ( )|Literal characters. These characters are displayed exactly as typed in the format string. To display a character other than one of those listed, precede it with a backslash (`\\`) or enclose it in double quotation marks (\" \").|  \n|(`\\`)|Displays the next character in the format string. To display a character that has special meaning as a literal character, precede it with a backslash (`\\`). The backslash itself isn't displayed. Using a backslash is the same as enclosing the next character in double quotation marks. To display a backslash, use two backslashes (`\\\\`).<br /><br /> Examples of characters that can't be displayed as literal characters are the date-formatting and time-formatting characters (`a`, `c`, `d`, `h`, `m`, `n`, `p`, `q`, `s`, `t`, `w`, `y`, `/`, and `:`), the numeric-formatting characters (`#`, `0`, `%`, `E`, `e`, comma, and period), and the string-formatting characters (`@`, `&`, `<`, `>`, and `!`).|  \n|(`\"``ABC``\"`)|Displays the string inside the double quotation marks (\" \"). To include a string in the style argument from within code, you must use `Chr(34)` to enclose the text (`34` is the character code for a quotation mark (\")).|  \n  \n### Legacy Code Example  \n The following table contains some sample format expressions for numbers. (These examples all assume that your system's locale setting is English-U.S.) The first column contains the format strings for the `Style` argument of the `Format` function; the other columns contain the resulting output if the formatted data has the value given in the column headings.  \n  \n|||||  \n|-|-|-|-|  \n|Format (`Style`)|\"5\" formatted as|\"-5\" formatted as|\"0.5\" formatted as|  \n|`Zero-length string (\"\")`|`5`|`-5`|`0.5`|  \n|`0`|`5`|`-5`|`1`|  \n|`0.00`|`5.00`|`-5.00`|`0.50`|  \n|`#,##0`|`5`|`-5`|`1`|  \n|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  \n|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  \n|`0%`|`500%`|`-500%`|`50%`|  \n|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  \n|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  \n|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  \n  \n## Predefined Date/Time Formats  \n The following table identifies the predefined date and time format names. These may be used by name as the style argument for the `Format` function:  \n  \n|||  \n|-|-|  \n|Format Name|Description|  \n|`General Date`, or `G`|Displays a date and/or time. For example, `3/12/2008 11:07:31 AM`. Date display is determined by your application's current culture value.|  \n|`Long Date`, `Medium Date`, or `D`|Displays a date according to your current culture's long date format. For example, `Wednesday, March 12, 2008`.|  \n|`Short Date`, or `d`|Displays a date using your current culture's short date format. For example, `3/12/2008`.<br /><br /> The `d` character displays the day in a user-defined date format.|  \n|`Long Time`, `Medium Time`, or `T`|Displays a time using your current culture's long time format; typically includes hours, minutes, seconds. For example, `11:07:31 AM`.|  \n|`Short Time` or `t`|Displays a time using your current culture's short time format. For example, `11:07 AM`.<br /><br /> The `t` character displays `AM` or `PM` values for locales that use a 12-hour clock in a user-defined time format.|  \n|`f`|Displays the long date and short time according to your current culture's format. For example, `Wednesday, March 12, 2008 11:07 AM`.|  \n|`F`|Displays the long date and long time according to your current culture's format. For example, `Wednesday, March 12, 2008 11:07:31 AM`.|  \n|`g`|Displays the short date and short time according to your current culture's format. For example, `3/12/2008 11:07 AM`.|  \n|`M`, `m`|Displays the month and the day of a date. For example, `March 12`.<br /><br /> The `M` character displays the month in a user-defined date format. The `m` character displays the minutes in a user-defined time format.|  \n|`R`, `r`|Formats the date according to the <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> property. For example, `Wed, 12 Mar 2008 11:07:31 GMT`. The formatted date does not adjust the value of the date and time. You must adjust the Date/Time value to GMT before calling the `Format` function.|  \n|`s`|Formats the date and time as a sortable index. For example, `2008-03-12T11:07:31`.<br /><br /> The `s` character displays the seconds in a user-defined time format.|  \n|`u`|Formats the date and time as a GMT sortable index. For example, `2008-03-12 11:07:31Z`.|  \n|`U`|Formats the date and time with the long date and long time as GMT. For example, `Wednesday, March 12, 2008 6:07:31 PM`.|  \n|`Y`, `y`|Formats the date as the year and month. For example, `March, 2008`.<br /><br /> The `Y` and `y` characters display the year in a user-defined date format.|  \n  \n For more information about the application's current culture information, see [How Culture Affects Strings in Visual Basic](~/add/includes/ajax-current-ext-md.md).  \n  \n## User-Defined Date/Time Formats  \n The following table shows characters you can use to create user-defined date/time formats. Unlike in earlier versions of [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)], these format characters are case-sensitive.  \n  \n|||  \n|-|-|  \n|Character|Description|  \n|(`:`)|Time separator. In some locales, other characters may be used to represent the time separator. The time separator separates hours, minutes, and seconds when time values are formatted. The actual character that is used as the time separator in formatted output is determined by your application's current culture value.|  \n|(`/`)|Date separator. In some locales, other characters may be used to represent the date separator. The date separator separates the day, month, and year when date values are formatted. The actual character that is used as the date separator in formatted output is determined by your application's current culture.|  \n|(`%`)|Used to indicate that the following character should be read as a single-letter format without regard to any trailing letters. Also used to indicate that a single-letter format is read as a user-defined format. See what follows for additional details.|  \n|`d`|Displays the day as a number without a leading zero (for example, `1`). Use `%d` if this is the only character in your user-defined numeric format.|  \n|`dd`|Displays the day as a number with a leading zero (for example, `01`).|  \n|`ddd`|Displays the day as an abbreviation (for example, `Sun`).|  \n|`dddd`|Displays the day as a full name (for example, `Sunday`).|  \n|`M`|Displays the month as a number without a leading zero (for example, January is represented as `1`). Use `%M` if this is the only character in your user-defined numeric format.|  \n|`MM`|Displays the month as a number with a leading zero (for example, `01/12/01`).|  \n|`MMM`|Displays the month as an abbreviation (for example, `Jan`).|  \n|`MMMM`|Displays the month as a full month name (for example, `January`).|  \n|`gg`|Displays the period/era string (for example, `A.D.`).|  \n|`h`|Displays the hour as a number without leading zeros using the 12-hour clock (for example, `1:15:15 PM`). Use `%h` if this is the only character in your user-defined numeric format.|  \n|`hh`|Displays the hour as a number with leading zeros using the 12-hour clock (for example, `01:15:15 PM`).|  \n|`H`|Displays the hour as a number without leading zeros using the 24-hour clock (for example, `1:15:15`). Use `%H` if this is the only character in your user-defined numeric format.|  \n|`HH`|Displays the hour as a number with leading zeros using the 24-hour clock (for example, `01:15:15`).|  \n|`m`|Displays the minute as a number without leading zeros (for example, `12:1:15`). Use `%m` if this is the only character in your user-defined numeric format.|  \n|`mm`|Displays the minute as a number with leading zeros (for example, `12:01:15`).|  \n|`s`|Displays the second as a number without leading zeros (for example, `12:15:5`). Use `%s` if this is the only character in your user-defined numeric format.|  \n|`ss`|Displays the second as a number with leading zeros (for example, `12:15:05`).|  \n|`f`|Displays fractions of seconds. For example `ff` displays hundredths of seconds, whereas `ffff` displays ten-thousandths of seconds. You may use up to seven `f` symbols in your user-defined format. Use `%f` if this is the only character in your user-defined numeric format.|  \n|`t`|Uses the 12-hour clock and displays an uppercase `A` for any hour before noon; displays an uppercase `P` for any hour between noon and 11:59 P.M. Use `%t` if this is the only character in your user-defined numeric format.|  \n|`tt`|For locales that use a 12-hour clock, displays an uppercase `AM` with any hour before noon; displays an uppercase `PM` with any hour between noon and 11:59 P.M.<br /><br /> For locales that use a 24-hour clock, displays nothing.|  \n|`y`|Displays the year number (0-9) without leading zeros. Use `%y` if this is the only character in your user-defined numeric format.|  \n|`yy`|Displays the year in two-digit numeric format with a leading zero, if applicable.|  \n|`yyy`|Displays the year in four-digit numeric format.|  \n|`yyyy`|Displays the year in four-digit numeric format.|  \n|`z`|Displays the timezone offset without a leading zero (for example, `-8`). Use `%z` if this is the only character in your user-defined numeric format.|  \n|`zz`|Displays the timezone offset with a leading zero (for example, `-08`)|  \n|`zzz`|Displays the full timezone offset (for example, `-08:00`)|  \n  \n### Legacy Code Example  \n The following are examples of user-defined date and time formats for `December 7, 1958, 8:50 PM, 35 seconds`:  \n  \n|||  \n|-|-|  \n|Format|Displays|  \n|`M/d/yy`|`12/7/58`|  \n|`d-MMM`|`7-Dec`|  \n|`d-MMMM-yy`|`7-December-58`|  \n|`d MMMM`|`7 December`|  \n|`MMMM yy`|`December 58`|  \n|`hh:mm tt`|`08:50 PM`|  \n|`h:mm:ss t`|`8:50:35 P`|  \n|`H:mm`|`20:50`|  \n|`H:mm:ss`|`20:50:35`|  \n|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  \n  \n### Smart Device Developer Notes  \n The minimum time resolution for a device is determined by the manufacturer of the device. If the time resolution for the device is coarse enough, the `f` format character returns 0 when run on that device."
  example:
  - "This example shows various uses of the `Format` function to format values using both `String` formats and user-defined formats. For the date separator (`/`), time separator (`:`), and the AM/PM indicators (`t` and `tt`), the actual formatted output displayed by your system depends on the locale settings the code is using. When times and dates are displayed in the development environment, the short time format and short date format of the code locale are used.  \n  \n> [!NOTE]\n>  For locales that use a 24-hour clock, the AM/PM indicators (`t` and `tt`) display nothing.  \n  \n [!code-vb[VbVbalrStrings#27](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._134_3.vb)]"
  syntax:
    content: public static string Format (object Expression, string Style = "");
    parameters:
    - id: Expression
      type: System.Object
      description: "Wymagany. Dowolne prawidłowe wyrażenie."
    - id: Style
      type: System.String
      description: "Opcjonalny. Nieprawidłowy format nazwanych lub zdefiniowanej przez użytkownika <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> wyrażenia."
    return:
      type: System.String
      description: "Zwraca ciąg sformatowany zgodnie z instrukcjami zawartymi w formacie <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> wyrażenia."
  overload: Microsoft.VisualBasic.Strings.Format*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  id: FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatCurrency(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca wyrażenie sformatowane jako wartość walutowa używająca symbolu waluty zdefiniowanego w Panelu sterowania systemu."
  remarks: "Gdy jeden lub więcej argumentów opcjonalnych zostaną pominięte, pasujących wartości ustawienia regionalne tego komputera są używane zamiast tego.       Pozycja symbolu waluty względem wartości walutowej zależy od ustawień regionalnych systemu.      > [!NOTE] > Wszystkie informacje o ustawieniach pochodzi z ustawieniami regionalnymi aplikacji. Domyślnie, który będzie ustawieniami regionalnymi w Panelu sterowania. Jednak może zostać zmieniona programowo przy użyciu programu .NET Framework, z wyjątkiem zerem, która pochodzi z `Number` kartę.       `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, I `GroupDigits` argumenty przyjmować następujące wartości wyliczenia trzy stany.      |||   |-|-|   | Wartość | Opis elementu |   | `TriState.True`| Wartość true |   | `TriState.False`| FALSE |   | `TriState.UseDefault`| Ustawienia regionalne tego komputera |"
  example:
  - "The following example illustrates the use of the `FormatCurrency` function.  \n  \n [!code-vb[VbVbalrStrings#32](~/add/codesnippet/visualbasic/c6b3af93-c0fc-4dd7-8b87-_1.vb)]"
  syntax:
    content: public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);
    parameters:
    - id: Expression
      type: System.Object
      description: "Wymagany. Wyrażenie, które ma być sformatowany."
    - id: NumDigitsAfterDecimal
      type: System.Int32
      description: "Opcjonalny. Wartość liczbowa wskazujący, ile miejsca są wyświetlane z prawej strony dziesiętnego. Wartość domyślna to&1;, co wskazuje, że używane są ustawienia regionalne tego komputera."
    - id: IncludeLeadingDigit
      type: Microsoft.VisualBasic.TriState
      description: "Opcjonalny. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>Wyliczenie wskazującą, czy jest wyświetlana zerem ułamkowa. Wartości można znaleźć w temacie &quot;Uwagi&quot;."
    - id: UseParensForNegativeNumbers
      type: Microsoft.VisualBasic.TriState
      description: "Opcjonalny. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>wyliczenie, która wskazuje, czy należy umieścić wartości ujemnych wewnątrz nawiasów. Wartości można znaleźć w temacie &quot;Uwagi&quot;."
    - id: GroupDigits
      type: Microsoft.VisualBasic.TriState
      description: "Opcjonalny. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>wyliczenie, która wskazuje, czy numery są grupowane przy użyciu określonego w ustawieniach regionalnych komputera ogranicznik grupy. Wartości można znaleźć w temacie &quot;Uwagi&quot;."
    return:
      type: System.String
      description: "Zwraca wyrażenie sformatowane jako wartość walutowa używająca symbolu waluty zdefiniowanego w Panelu sterowania systemu."
  overload: Microsoft.VisualBasic.Strings.FormatCurrency*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Liczba cyfr po punkcie dziesiętnym jest większa niż 99."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Typ nie jest liczbą."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  id: FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatDateTime(DateTime,DateFormat)
  nameWithType: Strings.FormatDateTime(DateTime,DateFormat)
  fullName: Microsoft.VisualBasic.Strings.FormatDateTime(DateTime,DateFormat)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca ciąg reprezentujący wartość daty/godziny."
  remarks: "`Date` — Typ danych zawsze zawiera informacje zarówno datę i godzinę. W celu konwersji typu, Visual Basic uwzględnia 1/1/1 (1 stycznia roku, 1) być neutralne wartość daty i 00:00:00 (północ) jako neutralny wartość po raz. Po sformatowaniu `Date` wartość jako ciąg daty i godziny `FormatDateTime` nie ma wartości neutralne w ciągu wynikowym. Na przykład, jeśli Konwertuj #1/1/0001 9:30:&#00; na ciąg, wynik jest &quot;9:30:00 AM&quot;; informacje o dacie zostało pominięte. Jednak informacje o dacie jest nadal znajdują się w oryginalnym `Date` wartości i może zostać przywrócona z funkcji takich jak `DatePart`.      > [!NOTE] > W przypadku przekazania `Expression` argument jako `String` literału, `FormatDateTime` zinterpretuje ją zgodnie z <xref:System.Globalization.CultureInfo.CurrentCulture%2A>ustawienie aplikacji.</xref:System.Globalization.CultureInfo.CurrentCulture%2A> Jednak w przypadku przekazania go jako `Date` literału, użyj formatu #mm/dd/rrrr # ponieważ `FormatDateTime` zawsze będą interpretowane przez `Date` literału zgodnie z kulturą języka angielskiego (US). Jest to konieczne, ponieważ, jeśli aplikacja jest opracowany i zakodowane przy użyciu `Date` literały z jednego kultury, ale następnie jest wykonywane na platformie z inną kulturę, `Date` literały może być analizowana niepoprawnie.       `NamedFormat` Argument ma następujące ustawienia.      |||   |-|-|   | Stałe | Opis elementu |   | `DateFormat.GeneralDate`| Wyświetla datę i/lub godzinę. Część daty są wyświetlane jako daty krótkiej. W przypadku część czasu, wyświetl ją jako dużo czasu. Jeśli jest obecny, Wyświetl obie części. |   | `DateFormat.LongDate`| Wyświetla datę w formacie daty długiej określonego w ustawieniach regionalnych komputera. |   | `DateFormat.ShortDate`| Wyświetla datę w formacie daty krótkiej określonego w ustawieniach regionalnych komputera. |   | `DateFormat.LongTime`| Godzinę w formacie czasu określonego w ustawieniach regionalnych komputera. |   | `DateFormat.ShortTime`| Godzinę w formacie 24-godzinnym (gg: mm). |"
  example:
  - "This example demonstrates the use of the `FormatDateTime` function.  \n  \n [!code-vb[VbVbalrStrings#3](~/add/codesnippet/visualbasic/12ae27ca-4a0f-4ea2-855e-_1.vb)]"
  syntax:
    content: public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);
    parameters:
    - id: Expression
      type: System.DateTime
      description: "Wymagany. <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>wyrażenie, które ma być sformatowany."
    - id: NamedFormat
      type: Microsoft.VisualBasic.DateFormat
      description: "Opcjonalny. Liczbowa wartość, która wskazuje format daty i godziny używany. Pominięcie <xref uid=&quot;langword_csharp_DateFormat.GeneralDate&quot; name=&quot;DateFormat.GeneralDate&quot; href=&quot;&quot;> </xref> jest używany."
    return:
      type: System.String
      description: "Zwraca ciąg reprezentujący wartość daty/godziny."
  overload: Microsoft.VisualBasic.Strings.FormatDateTime*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>NamedFormat</code>ustawienie jest nieprawidłowe."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  id: FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatNumber(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca wyrażenie sformatowane jako liczby."
  remarks: "Gdy jeden lub więcej argumentów opcjonalnych zostały pominięte wartości pominiętych argumentów są dostarczane przez ustawienia regionalne.      > [!NOTE] > Wszystkie informacje o ustawieniach pochodzi z ustawieniami regionalnymi aplikacji. Domyślnie, który będzie ustawieniami regionalnymi w Panelu sterowania. Jednak może zostać zmieniona programowo przy użyciu programu .NET Framework.       `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, I `GroupDigits` argumenty mają następujące ustawienia.      |||   |-|-|   | Stałe | Opis elementu |   | `TriState.True`| Wartość true |   | `TriState.False`| FALSE |   | `TriState.UseDefault`| Ustawienia regionalne tego komputera |"
  example:
  - "This example demonstrates the `FormatNumber` function.  \n  \n [!code-vb[VbVbalrStrings#15](~/add/codesnippet/visualbasic/4c7d3c11-69f8-405b-a033-_1.vb)]"
  syntax:
    content: public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);
    parameters:
    - id: Expression
      type: System.Object
      description: "Wymagany. Wyrażenie, które ma być sformatowany."
    - id: NumDigitsAfterDecimal
      type: System.Int32
      description: "Opcjonalny. Wartość liczbowa wskazujący, ile miejsca są wyświetlane z prawej strony dziesiętnego. Wartość domyślna to&1;, co wskazuje, że używane są ustawienia regionalne tego komputera."
    - id: IncludeLeadingDigit
      type: Microsoft.VisualBasic.TriState
      description: "Opcjonalny. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>Stała, która wskazuje, czy cyfry 0 nie będą wyświetlane wartości ułamkowych. Wartości można znaleźć w temacie &quot;Ustawienia&quot;."
    - id: UseParensForNegativeNumbers
      type: Microsoft.VisualBasic.TriState
      description: "Opcjonalny. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>Stała, która wskazuje, czy można umieścić wartości ujemnych wewnątrz nawiasów. Wartości można znaleźć w temacie &quot;Ustawienia&quot;."
    - id: GroupDigits
      type: Microsoft.VisualBasic.TriState
      description: "Opcjonalny. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>Stała, która wskazuje, czy numery są grupowane przy użyciu określonego w ustawieniach regionalnych ogranicznik grupy. Wartości można znaleźć w temacie &quot;Ustawienia&quot;."
    return:
      type: System.String
      description: "Zwraca wyrażenie sformatowane jako liczby."
  overload: Microsoft.VisualBasic.Strings.FormatNumber*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Typ nie jest liczbą."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  id: FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatPercent(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca wyrażenie sformatowane jako wartość procentowa (tzn. pomnożona przez 100) znakiem %."
  remarks: "Jeśli jeden lub więcej argumentów opcjonalnych zostaną pominięte, wartości pominiętych argumentów są dostarczane przez ustawienia regionalne.      > [!NOTE] > Wszystkie informacje o ustawieniach pochodzi z ustawieniami regionalnymi aplikacji. Domyślnie, który będzie ustawieniami regionalnymi w Panelu sterowania. Jednak może zostać zmieniona programowo przy użyciu programu .NET Framework.       `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, I `GroupDigits` argumenty mają następujące ustawienia.      |||   |-|-|   | Stałe | Opis elementu |   | `TriState.True`| Wartość true |   | `TriState.False`| FALSE |   | `TriState.Default`| Ustawienia regionalne tego komputera |"
  example:
  - "This example illustrates the use of the `FormatPercent` function.  \n  \n [!code-vb[VbVbalrStrings#28](~/add/codesnippet/visualbasic/699b6dbf-5eeb-4a3e-a4b1-_1.vb)]"
  syntax:
    content: public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);
    parameters:
    - id: Expression
      type: System.Object
      description: "Wymagany. Wyrażenie, które ma być sformatowany."
    - id: NumDigitsAfterDecimal
      type: System.Int32
      description: "Opcjonalny. Wartość liczbowa wskazująca liczbę miejsc po prawej stronie dziesiętnego są wyświetlane. Wartość domyślna to&1;, co wskazuje, że ustawienia regionalne są używane."
    - id: IncludeLeadingDigit
      type: Microsoft.VisualBasic.TriState
      description: "Opcjonalny. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>Stała, wskazującą, czy zerem przedstawia ułamkowa. Wartości można znaleźć w temacie &quot;Ustawienia&quot;."
    - id: UseParensForNegativeNumbers
      type: Microsoft.VisualBasic.TriState
      description: "Opcjonalny. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>Stała, która wskazuje, czy należy umieścić wartości ujemnych wewnątrz nawiasów. Wartości można znaleźć w temacie &quot;Ustawienia&quot;."
    - id: GroupDigits
      type: Microsoft.VisualBasic.TriState
      description: "Opcjonalny. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>Stała, która wskazuje, czy numery są grupowane przy użyciu określonego w ustawieniach regionalnych ogranicznik grupy. Wartości można znaleźć w temacie &quot;Ustawienia&quot;."
    return:
      type: System.String
      description: "Zwraca wyrażenie sformatowane jako wartość procentowa (tzn. pomnożona przez 100) znakiem %."
  overload: Microsoft.VisualBasic.Strings.FormatPercent*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Typ nie jest liczbą."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)
  id: GetChar(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: GetChar(String,Int32)
  nameWithType: Strings.GetChar(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.GetChar(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> wartość reprezentującą znak ze wskazanego miejsca w podanym ciągu."
  remarks: "Jeśli `Index` jest mniejszy niż 1 lub większą niż indeksu po ostatnim znaku `str`, `ArgumentException` jest generowany."
  example:
  - "This example shows how to use the `GetChar` function to return a character from a specified index in a `String`.  \n  \n [!code-vb[VbVbalrStrings#23](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._0_1.vb)]"
  syntax:
    content: public static char GetChar (string str, int Index);
    parameters:
    - id: str
      type: System.String
      description: "Wymagany. Wszystkie prawidłowe <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> wyrażenia."
    - id: Index
      type: System.Int32
      description: "Wymagany. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>wyrażenie. Indeks (w oparciu o&1;) po znaku `str` ma zostać zwrócona."
    return:
      type: System.Char
      description: "<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>wartość reprezentującą znak ze wskazanego miejsca w podanym ciągu."
  overload: Microsoft.VisualBasic.Strings.GetChar*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>str</code>jest <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <code>Index</code> &lt; 1, lub <code>Index</code> jest większa niż indeksu ostatni znak <code>str</code>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  id: InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: InStr(String,String,CompareMethod)
  nameWithType: Strings.InStr(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(String,String,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca liczbę całkowitą określającą początkowe położenie pierwszego wystąpienia jednego ciągu w innym."
  remarks: "Zazwyczaj `InStr` funkcja jest używana podczas analizowania ciągów.      > [!NOTE] > `InStrB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów, a nie w pozycji znaku. Jest on używany głównie do konwertowania ciągów znaków dwubajtowych (DBCS) aplikacji. Wszystkie ciągi Visual Basic 2005 są w formacie Unicode, i `InStrB` nie jest już obsługiwana.       `Compare` Ustawienia argumentu są: |||   |-|-|-|   | Stałe | Wartość | Opis elementu |   | `Binary`|0| Przeprowadza porównanie binarne |   | `Text`|1| Przeprowadza porównanie tekstu |"
  example:
  - "This example uses the `InStr` function to return the position of the first occurrence of one string within another.  \n  \n [!code-vb[VbVbalrStrings#8](~/add/codesnippet/visualbasic/f1b47808-d5f4-408b-b1fc-_1.vb)]"
  syntax:
    content: public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: String1
      type: System.String
      description: "Wymagany. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>wyrażenie jest przeszukiwany."
    - id: String2
      type: System.String
      description: "Wymagany. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>szukane wyrażenie."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Opcjonalny. Określa typ porównania ciągów. Jeśli `Compare` zostanie pominięty, <xref uid=&quot;langword_csharp_Option Compare&quot; name=&quot;Option Compare&quot; href=&quot;&quot;> </xref> ustawienie określa typ porównania."
    return:
      type: System.Int32
      description: "<table><tbody><tr><td> Jeśli       </td><td> InStr zwraca       </td></tr><tr><td>           <code>String1</code>ma zerową długość lub<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> 0       </td></tr><tr><td>           <code>String2</code>ma zerową długość lub<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> Pozycja początkowa wyszukiwania, która domyślnie Określa pierwszą pozycję znaku.       </td></tr><tr><td>           <code>String2</code>Nie znaleziono       </td><td> 0       </td></tr><tr><td>           <code>String2</code>zostanie znaleziony w<code>String1</code></td><td> Położenie, w którym rozpoczyna się niezgodne       </td></tr><tr><td></td><td></td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.InStr*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  id: InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: InStr(Int32,String,String,CompareMethod)
  nameWithType: Strings.InStr(Int32,String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(Int32,String,String,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca liczbę całkowitą określającą początkowe położenie pierwszego wystąpienia jednego ciągu w innym."
  remarks: "Zazwyczaj `InStr` funkcja jest używana podczas analizowania ciągów.      > [!NOTE] > `InStrB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów, a nie w pozycji znaku. Jest on używany głównie do konwertowania ciągów znaków dwubajtowych (DBCS) aplikacji. Wszystkie ciągi Visual Basic 2005 są w formacie Unicode, i `InStrB` nie jest już obsługiwana.       `Compare` Ustawienia argumentu są: |||   |-|-|-|   | Stałe | Wartość | Opis elementu |   | `Binary`|0| Przeprowadza porównanie binarne |   | `Text`|1| Przeprowadza porównanie tekstu |"
  example:
  - "This example uses the `InStr` function to return the position of the first occurrence of one string within another.  \n  \n [!code-vb[VbVbalrStrings#8](~/add/codesnippet/visualbasic/087e182b-78be-4d9a-be91-_1.vb)]"
  syntax:
    content: public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Start
      type: System.Int32
      description: "Opcjonalny. Wyrażenie liczbowe, która ustawia pozycję początkową każdego wyszukiwania. Pominięcie wyszukiwanie rozpoczyna się od pozycji pierwszego znaku. Indeks początkowy jest oparte na 1."
    - id: String1
      type: System.String
      description: "Wymagany. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>wyrażenie jest przeszukiwany."
    - id: String2
      type: System.String
      description: "Wymagany. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>szukane wyrażenie."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Opcjonalny. Określa typ porównania ciągów. Jeśli `Compare` zostanie pominięty, <xref uid=&quot;langword_csharp_Option Compare&quot; name=&quot;Option Compare&quot; href=&quot;&quot;> </xref> ustawienie określa typ porównania."
    return:
      type: System.Int32
      description: "<table><tbody><tr><td> Jeśli       </td><td> InStr zwraca       </td></tr><tr><td>           <code>String1</code>ma zerową długość lub<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> 0       </td></tr><tr><td>           <code>String2</code>ma zerową długość lub<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td>           <code>start</code>         </td></tr><tr><td>           <code>String2</code>Nie znaleziono       </td><td> 0       </td></tr><tr><td>           <code>String2</code>zostanie znaleziony w<code>String1</code></td><td> Położenie, w którym rozpoczyna się niezgodne       </td></tr><tr><td>           <code>Start</code>&gt; długość<code>String1</code></td><td> 0       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.InStr*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code> &lt; 1."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  id: InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: InStrRev(String,String,Int32,CompareMethod)
  nameWithType: Strings.InStrRev(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStrRev(String,String,Int32,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca pozycję pierwszego wystąpienia jednego ciągu w innym, licząc od prawego końca ciągu."
  remarks: "Należy pamiętać, że składnia `InStrRev` funkcja nie jest taka sama składnia `InStr` funkcji.       `Compare` Argument może mieć następujące wartości.      |||   |-|-|   | Stałe | Opis elementu |   | `Binary`| Przeprowadza porównanie binarne. |   | `Text`| Przeprowadza porównanie tekstowe. |"
  example:
  - "This example demonstrates the use of the `InStrRev` function.  \n  \n [!code-vb[VbVbalrStrings#26](~/add/codesnippet/visualbasic/ee8ba742-f981-4eca-b754-_1.vb)]"
  syntax:
    content: public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: StringCheck
      type: System.String
      description: "Wymagany. Przeszukiwany wyrażenia ciągu."
    - id: StringMatch
      type: System.String
      description: "Wymagany. Wyszukane wyrażenia ciągu."
    - id: Start
      type: System.Int32
      description: "Opcjonalny. Wyrażenie liczbowe, ustawienie pozycja początkowa jedynki każdego wyszukiwania, zaczynając od lewego końca ciągu. Jeśli `Start` zostanie pominięty, zostanie użyta -1, co oznacza wyszukiwanie rozpoczyna się od ostatniej pozycji znaku. Wyszukiwanie następnie rozpoczynające się od prawej do lewej."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Opcjonalny. Wartość liczbowa wskazujący rodzaj porównywania podczas podciągów. Pominięcie odbywa się porównanie binarne. Wartości można znaleźć w temacie Ustawienia."
    return:
      type: System.Int32
      description: "<table><tbody><tr><td> Jeśli       </td><td> Zwraca InStrRev       </td></tr><tr><td>           <code>StringCheck</code>jest o zerowej długości       </td><td> 0       </td></tr><tr><td>           <code>StringMatch</code>jest o zerowej długości       </td><td>           <code>Start</code>         </td></tr><tr><td>           <code>StringMatch</code>Nie znaleziono       </td><td> 0       </td></tr><tr><td>           <code>StringMatch</code>zostanie znaleziony w<code>StringCheck</code></td><td> Pozycja jaką pierwszego dopasowania zostanie znaleziony, począwszy od prawego końca ciągu.       </td></tr><tr><td>           <code>Start</code>jest większa niż długość<code>StringMatch</code></td><td> 0       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.InStrRev*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>= 0 or <code>Start</code> &lt; -1."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)
  id: Join(System.Object[],System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Join(Object[],String)
  nameWithType: Strings.Join(Object[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(Object[],String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca ciąg powstały z połączenia kilku podciągów zawartych w tablicy."
  remarks: "Występuje parzystość między `Join` i `Split` funkcji. `Join` Funkcja pobiera tablicę ciągów i dołącza je za pomocą ciągu ogranicznik, aby zwrócić pojedynczy ciąg. `Split` Funkcji ciąg znaków i oddziela go na ogranicznik, aby zwracało tablicę ciągów. Jednak klucza różnicą jest to, że `Join` można ciągów z dowolnego ciągu ogranicznik `Split` tylko rozdzielić ciągów za pomocą pojedynczy znak ogranicznika."
  example:
  - "The following example demonstrates how to use the `Join` function to create a list from several strings.  \n  \n [!code-vb[VbVbalrStrings#10](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._160_1.vb)]"
  syntax:
    content: public static string Join (object[] SourceArray, string Delimiter = " ");
    parameters:
    - id: SourceArray
      type: System.Object[]
      description: "Wymagany. Jednowymiarowa tablica zawierająca podciągi ma zostać umieszczony."
    - id: Delimiter
      type: System.String
      description: "Opcjonalny. Dowolny ciąg używany do rozdzielania podciągów w zwracany ciąg. Pominięcie znak spacji (&quot;&quot;) jest używany. Jeśli `Delimiter` jest ciągiem o zerowej długości (&quot;&quot;) lub <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, wszystkie elementy na liście są połączone z ogranicznikami nie."
    return:
      type: System.String
      description: "Zwraca ciąg powstały z połączenia kilku podciągów zawartych w tablicy."
  overload: Microsoft.VisualBasic.Strings.Join*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>SourceArray</code>nie jest jedną wymiarów."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Join(System.String[],System.String)
  id: Join(System.String[],System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Join(String[],String)
  nameWithType: Strings.Join(String[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(String[],String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca ciąg powstały z połączenia kilku podciągów zawartych w tablicy."
  remarks: "Występuje parzystość między `Join` i `Split` funkcji. `Join` Funkcja pobiera tablicę ciągów i dołącza je za pomocą ciągu ogranicznik, aby zwrócić pojedynczy ciąg. `Split` Funkcji ciąg znaków i oddziela go na ogranicznik, aby zwracało tablicę ciągów. Jednak klucza różnicą jest to, że `Join` można ciągów z dowolnego ciągu ogranicznik `Split` tylko rozdzielić ciągów za pomocą pojedynczy znak ogranicznika."
  example:
  - "The following example demonstrates how to use the `Join` function to create a list from several strings.  \n  \n [!code-vb[VbVbalrStrings#10](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._124_1.vb)]"
  syntax:
    content: public static string Join (string[] SourceArray, string Delimiter = " ");
    parameters:
    - id: SourceArray
      type: System.String[]
      description: "Wymagany. Jednowymiarowa tablica zawierająca podciągi ma zostać umieszczony."
    - id: Delimiter
      type: System.String
      description: "Opcjonalny. Dowolny ciąg używany do rozdzielania podciągów w zwracany ciąg. Pominięcie znak spacji (&quot;&quot;) jest używany. Jeśli `Delimiter` jest ciągiem o zerowej długości (&quot;&quot;) lub <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, wszystkie elementy na liście są połączone z ogranicznikami nie."
    return:
      type: System.String
      description: "Zwraca ciąg powstały z połączenia kilku podciągów zawartych w tablicy."
  overload: Microsoft.VisualBasic.Strings.Join*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>SourceArray</code>nie jest jedną wymiarów."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LCase(System.Char)
  id: LCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LCase(Char)
  nameWithType: Strings.LCase(Char)
  fullName: Microsoft.VisualBasic.Strings.LCase(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca ciąg lub znak przekonwertowany na małe litery."
  remarks: "Wyłącznie z wielkich liter są konwertowane na małe litery; wszystkie znaki niebędące znaki i małe litery pozostają niezmienione.       Ta funkcja używa informacji o kulturze aplikacji podczas manipulacji ciąg, tak aby zmiany wielkości liter są odpowiednie dla ustawień regionalnych, w którym aplikacja jest używana.      > [!IMPORTANT] > Jeśli aplikacji podejmowania decyzji w procesie zabezpieczeń na podstawie wyniku porównania lub operacji w przypadku zmiany, a następnie należy użyć operacji <xref:System.String.Compare%2A?displayProperty=fullName>— Metoda i przekazać <xref:System.StringComparison>lub <xref:System.StringComparison>dla `comparisonType` argument.</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> Aby uzyskać więcej informacji, zobacz [jak kultury wpływa na ciągi w Visual Basic](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This example uses the `LCase` function to return a lowercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#12](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._236_1.vb)]"
  syntax:
    content: public static char LCase (char Value);
    parameters:
    - id: Value
      type: System.Char
      description: "Wymagany. Wszystkie prawidłowe <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> lub <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> wyrażenia."
    return:
      type: System.Char
      description: "Zwraca ciąg lub znak przekonwertowany na małe litery."
  overload: Microsoft.VisualBasic.Strings.LCase*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LCase(System.String)
  id: LCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LCase(String)
  nameWithType: Strings.LCase(String)
  fullName: Microsoft.VisualBasic.Strings.LCase(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca ciąg lub znak przekonwertowany na małe litery."
  remarks: "Wyłącznie z wielkich liter są konwertowane na małe litery; wszystkie znaki niebędące znaki i małe litery pozostają niezmienione.       Ta funkcja używa informacji o kulturze aplikacji podczas manipulacji ciąg, tak aby zmiany wielkości liter są odpowiednie dla ustawień regionalnych, w którym aplikacja jest używana.      > [!IMPORTANT] > Jeśli aplikacji podejmowania decyzji w procesie zabezpieczeń na podstawie wyniku porównania lub operacji w przypadku zmiany, a następnie należy użyć operacji <xref:System.String.Compare%2A?displayProperty=fullName>— Metoda i przekazać <xref:System.StringComparison>lub <xref:System.StringComparison>dla `comparisonType` argument.</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> Aby uzyskać więcej informacji, zobacz [jak kultury wpływa na ciągi w Visual Basic](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This example uses the `LCase` function to return a lowercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#12](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._214_1.vb)]"
  syntax:
    content: public static string LCase (string Value);
    parameters:
    - id: Value
      type: System.String
      description: "Wymagany. Wszystkie prawidłowe <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> lub <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> wyrażenia."
    return:
      type: System.String
      description: "Zwraca ciąg lub znak przekonwertowany na małe litery."
  overload: Microsoft.VisualBasic.Strings.LCase*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)
  id: Left(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Left(String,Int32)
  nameWithType: Strings.Left(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Left(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca ciąg zawierający określoną liczbę znaków od lewego końca ciągu."
  remarks: "Aby określić liczbę znaków w `str`, użyj `Len` funkcji. Jeśli używana w aplikacji formularzy systemu Windows lub klasy, która ma `Left` właściwości, użytkownik musi pełnej kwalifikacji funkcji z `Microsoft.VisualBasic.Left`.      > [!NOTE] > `LeftB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca ciąg w bajtach zamiast znaków. Jest on używany głównie do konwertowania ciągów znaków dwubajtowych (DBCS) aplikacji. Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LeftB` nie jest już obsługiwana."
  example:
  - "This example demonstrates the use of the `Left` function to return a substring of a given `String`. In a class that has a `Left` property, it may be necessary to fully qualify the `Left` function.  \n  \n [!code-vb[VbVbalrStrings#20](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._139_1.vb)]"
  syntax:
    content: public static string Left (string str, int Length);
    parameters:
    - id: str
      type: System.String
      description: "Wymagany. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>wyrażenie, z którego są zwracane po lewej stronie znaków."
    - id: Length
      type: System.Int32
      description: "Wymagany. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>wyrażenie. Wyrażenie liczbowe wskazujący, ile znaków ma być zwracanych. Jeśli jest to 0, ciąg o zerowej długości (&quot;&quot;) jest zwracany. Jeśli większa lub równa liczbie znaków `str`, zostanie zwrócony cały ciąg."
    return:
      type: System.String
      description: "Zwraca ciąg zawierający określoną liczbę znaków od lewego końca ciągu."
  overload: Microsoft.VisualBasic.Strings.Left*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Boolean)
  id: Len(System.Boolean)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Boolean)
  nameWithType: Strings.Len(Boolean)
  fullName: Microsoft.VisualBasic.Strings.Len(Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  remarks: "Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.       `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.      > [!NOTE] > `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.      > [!NOTE] > `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Jest on używany głównie do konwertowania ciągów znaków dwubajtowych (DBCS) aplikacji. Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.      ## Uwagi dla deweloperów urządzeń inteligentnych `Len` funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._155_1.vb)]"
  syntax:
    content: public static int Len (bool Expression);
    parameters:
    - id: Expression
      type: System.Boolean
      description: "Wszystkie prawidłowe <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nazwę wyrażenia lub zmiennej. Jeśli `Expression` jest typu <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funkcja zwraca rozmiar będą zapisywane do pliku przez <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funkcji."
    return:
      type: System.Int32
      description: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Byte)
  id: Len(System.Byte)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Byte)
  nameWithType: Strings.Len(Byte)
  fullName: Microsoft.VisualBasic.Strings.Len(Byte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  remarks: "Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.       `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.      > [!NOTE] > `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.      > [!NOTE] > `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Jest on używany głównie do konwertowania ciągów znaków dwubajtowych (DBCS) aplikacji. Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.      ## Uwagi dla deweloperów urządzeń inteligentnych `Len` funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._157_1.vb)]"
  syntax:
    content: public static int Len (byte Expression);
    parameters:
    - id: Expression
      type: System.Byte
      description: "Wszystkie prawidłowe <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nazwę wyrażenia lub zmiennej. Jeśli `Expression` jest typu <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funkcja zwraca rozmiar będą zapisywane do pliku przez <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funkcji."
    return:
      type: System.Int32
      description: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Char)
  id: Len(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Char)
  nameWithType: Strings.Len(Char)
  fullName: Microsoft.VisualBasic.Strings.Len(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  remarks: "Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.       `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.      > [!NOTE] > `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.      > [!NOTE] > `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Jest on używany głównie do konwertowania ciągów znaków dwubajtowych (DBCS) aplikacji. Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.      ## Uwagi dla deweloperów urządzeń inteligentnych `Len` funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._159_1.vb)]"
  syntax:
    content: public static int Len (char Expression);
    parameters:
    - id: Expression
      type: System.Char
      description: "Wszystkie prawidłowe <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nazwę wyrażenia lub zmiennej. Jeśli `Expression` jest typu <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funkcja zwraca rozmiar będą zapisywane do pliku przez <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funkcji."
    return:
      type: System.Int32
      description: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.DateTime)
  id: Len(System.DateTime)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(DateTime)
  nameWithType: Strings.Len(DateTime)
  fullName: Microsoft.VisualBasic.Strings.Len(DateTime)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  remarks: "Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.       `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.      > [!NOTE] > `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.      > [!NOTE] > `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Jest on używany głównie do konwertowania ciągów znaków dwubajtowych (DBCS) aplikacji. Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.      ## Uwagi dla deweloperów urządzeń inteligentnych `Len` funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._5_1.vb)]"
  syntax:
    content: public static int Len (DateTime Expression);
    parameters:
    - id: Expression
      type: System.DateTime
      description: "Wszystkie prawidłowe <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nazwę wyrażenia lub zmiennej. Jeśli `Expression` jest typu <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funkcja zwraca rozmiar będą zapisywane do pliku przez <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funkcji."
    return:
      type: System.Int32
      description: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Decimal)
  id: Len(System.Decimal)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Decimal)
  nameWithType: Strings.Len(Decimal)
  fullName: Microsoft.VisualBasic.Strings.Len(Decimal)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  remarks: "Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.       `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.      > [!NOTE] > `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.      > [!NOTE] > `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Jest on używany głównie do konwertowania ciągów znaków dwubajtowych (DBCS) aplikacji. Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.      ## Uwagi dla deweloperów urządzeń inteligentnych `Len` funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._30_1.vb)]"
  syntax:
    content: public static int Len (decimal Expression);
    parameters:
    - id: Expression
      type: System.Decimal
      description: "Wszystkie prawidłowe <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nazwę wyrażenia lub zmiennej. Jeśli `Expression` jest typu <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funkcja zwraca rozmiar będą zapisywane do pliku przez <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funkcji."
    return:
      type: System.Int32
      description: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Double)
  id: Len(System.Double)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Double)
  nameWithType: Strings.Len(Double)
  fullName: Microsoft.VisualBasic.Strings.Len(Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  remarks: "Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.       `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.      > [!NOTE] > `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.      > [!NOTE] > `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Jest on używany głównie do konwertowania ciągów znaków dwubajtowych (DBCS) aplikacji. Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.      ## Uwagi dla deweloperów urządzeń inteligentnych `Len` funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._173_1.vb)]"
  syntax:
    content: public static int Len (double Expression);
    parameters:
    - id: Expression
      type: System.Double
      description: "Wszystkie prawidłowe <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nazwę wyrażenia lub zmiennej. Jeśli `Expression` jest typu <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funkcja zwraca rozmiar będą zapisywane do pliku przez <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funkcji."
    return:
      type: System.Int32
      description: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Int16)
  id: Len(System.Int16)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Int16)
  nameWithType: Strings.Len(Int16)
  fullName: Microsoft.VisualBasic.Strings.Len(Int16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  remarks: "Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.       `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.      > [!NOTE] > `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.      > [!NOTE] > `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Jest on używany głównie do konwertowania ciągów znaków dwubajtowych (DBCS) aplikacji. Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.      ## Uwagi dla deweloperów urządzeń inteligentnych `Len` funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._198_1.vb)]"
  syntax:
    content: public static int Len (short Expression);
    parameters:
    - id: Expression
      type: System.Int16
      description: "Wszystkie prawidłowe <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nazwę wyrażenia lub zmiennej. Jeśli `Expression` jest typu <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funkcja zwraca rozmiar będą zapisywane do pliku przez <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funkcji."
    return:
      type: System.Int32
      description: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Int32)
  id: Len(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Int32)
  nameWithType: Strings.Len(Int32)
  fullName: Microsoft.VisualBasic.Strings.Len(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  remarks: "Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.       `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.      > [!NOTE] > `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.      > [!NOTE] > `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Jest on używany głównie do konwertowania ciągów znaków dwubajtowych (DBCS) aplikacji. Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.      ## Uwagi dla deweloperów urządzeń inteligentnych `Len` funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._99_1.vb)]"
  syntax:
    content: public static int Len (int Expression);
    parameters:
    - id: Expression
      type: System.Int32
      description: "Wszystkie prawidłowe <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nazwę wyrażenia lub zmiennej. Jeśli `Expression` jest typu <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funkcja zwraca rozmiar będą zapisywane do pliku przez <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funkcji."
    return:
      type: System.Int32
      description: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Int64)
  id: Len(System.Int64)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Int64)
  nameWithType: Strings.Len(Int64)
  fullName: Microsoft.VisualBasic.Strings.Len(Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  remarks: "Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.       `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.      > [!NOTE] > `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.      > [!NOTE] > `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Jest on używany głównie do konwertowania ciągów znaków dwubajtowych (DBCS) aplikacji. Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.      ## Uwagi dla deweloperów urządzeń inteligentnych `Len` funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._162_1.vb)]"
  syntax:
    content: public static int Len (long Expression);
    parameters:
    - id: Expression
      type: System.Int64
      description: "Wszystkie prawidłowe <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nazwę wyrażenia lub zmiennej. Jeśli `Expression` jest typu <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funkcja zwraca rozmiar będą zapisywane do pliku przez <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funkcji."
    return:
      type: System.Int32
      description: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Object)
  id: Len(System.Object)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Object)
  nameWithType: Strings.Len(Object)
  fullName: Microsoft.VisualBasic.Strings.Len(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  remarks: "Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.       `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.      > [!NOTE] > `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.      > [!NOTE] > `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Jest on używany głównie do konwertowania ciągów znaków dwubajtowych (DBCS) aplikacji. Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.      ## Uwagi dla deweloperów urządzeń inteligentnych `Len` funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._193_1.vb)]"
  syntax:
    content: public static int Len (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "Wszystkie prawidłowe <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nazwę wyrażenia lub zmiennej. Jeśli `Expression` jest typu <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funkcja zwraca rozmiar będą zapisywane do pliku przez <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funkcji."
    return:
      type: System.Int32
      description: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.SByte)
  id: Len(System.SByte)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(SByte)
  nameWithType: Strings.Len(SByte)
  fullName: Microsoft.VisualBasic.Strings.Len(SByte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  remarks: "Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.       `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.      > [!NOTE] > `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.      > [!NOTE] > `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Jest on używany głównie do konwertowania ciągów znaków dwubajtowych (DBCS) aplikacji. Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.      ## Uwagi dla deweloperów urządzeń inteligentnych `Len` funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._171_1.vb)]"
  syntax:
    content: public static int Len (sbyte Expression);
    parameters:
    - id: Expression
      type: System.SByte
      description: "Wszystkie prawidłowe <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nazwę wyrażenia lub zmiennej. Jeśli `Expression` jest typu <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funkcja zwraca rozmiar będą zapisywane do pliku przez <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funkcji."
    return:
      type: System.Int32
      description: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Single)
  id: Len(System.Single)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Single)
  nameWithType: Strings.Len(Single)
  fullName: Microsoft.VisualBasic.Strings.Len(Single)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  remarks: "Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.       `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.      > [!NOTE] > `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.      > [!NOTE] > `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Jest on używany głównie do konwertowania ciągów znaków dwubajtowych (DBCS) aplikacji. Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.      ## Uwagi dla deweloperów urządzeń inteligentnych `Len` funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._21_1.vb)]"
  syntax:
    content: public static int Len (float Expression);
    parameters:
    - id: Expression
      type: System.Single
      description: "Wszystkie prawidłowe <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nazwę wyrażenia lub zmiennej. Jeśli `Expression` jest typu <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funkcja zwraca rozmiar będą zapisywane do pliku przez <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funkcji."
    return:
      type: System.Int32
      description: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.String)
  id: Len(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(String)
  nameWithType: Strings.Len(String)
  fullName: Microsoft.VisualBasic.Strings.Len(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  remarks: "Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.       `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.      > [!NOTE] > `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.      > [!NOTE] > `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Jest on używany głównie do konwertowania ciągów znaków dwubajtowych (DBCS) aplikacji. Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.      ## Uwagi dla deweloperów urządzeń inteligentnych `Len` funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._72_1.vb)]"
  syntax:
    content: public static int Len (string Expression);
    parameters:
    - id: Expression
      type: System.String
      description: "Wszystkie prawidłowe <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nazwę wyrażenia lub zmiennej. Jeśli `Expression` jest typu <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funkcja zwraca rozmiar będą zapisywane do pliku przez <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funkcji."
    return:
      type: System.Int32
      description: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt16)
  id: Len(System.UInt16)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(UInt16)
  nameWithType: Strings.Len(UInt16)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  remarks: "Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.       `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.      > [!NOTE] > `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.      > [!NOTE] > `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Jest on używany głównie do konwertowania ciągów znaków dwubajtowych (DBCS) aplikacji. Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.      ## Uwagi dla deweloperów urządzeń inteligentnych `Len` funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._211_1.vb)]"
  syntax:
    content: public static int Len (ushort Expression);
    parameters:
    - id: Expression
      type: System.UInt16
      description: "Wszystkie prawidłowe <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nazwę wyrażenia lub zmiennej. Jeśli `Expression` jest typu <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funkcja zwraca rozmiar będą zapisywane do pliku przez <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funkcji."
    return:
      type: System.Int32
      description: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt32)
  id: Len(System.UInt32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(UInt32)
  nameWithType: Strings.Len(UInt32)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  remarks: "Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.       `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.      > [!NOTE] > `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.      > [!NOTE] > `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Jest on używany głównie do konwertowania ciągów znaków dwubajtowych (DBCS) aplikacji. Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.      ## Uwagi dla deweloperów urządzeń inteligentnych `Len` funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._150_1.vb)]"
  syntax:
    content: public static int Len (uint Expression);
    parameters:
    - id: Expression
      type: System.UInt32
      description: "Wszystkie prawidłowe <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nazwę wyrażenia lub zmiennej. Jeśli `Expression` jest typu <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funkcja zwraca rozmiar będą zapisywane do pliku przez <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funkcji."
    return:
      type: System.Int32
      description: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt64)
  id: Len(System.UInt64)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(UInt64)
  nameWithType: Strings.Len(UInt64)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  remarks: "Typy zdefiniowane przez użytkownika i `Object` zmiennych, `Len` funkcja zwraca rozmiar będą zapisywane do pliku przez `FilePut` funkcji. Jeśli `Object` zawiera `String`, zwróci długość ciągu. Jeśli `Object` zawiera innego typu, jak będą zapisywane do pliku przez zwróci rozmiar obiektu `FilePut` funkcji.       `VBFixedString` Atrybut można stosować do pól ciągów w obiektach, aby wskazać rozmiar ciągu w bajtach, gdy zapisywane na dysku. `Len` Używa `VBFixedString` atrybut, jeśli jest dostępny, podczas określania rozmiaru `Object` zmiennych.      > [!NOTE] > `Len` Funkcja może nie być możliwe ustalenie rzeczywistą liczbę bajtów pamięci masowej wymagane w przypadku użycia z ciągów o zmiennej długości w typy danych zdefiniowane przez użytkownika.      > [!NOTE] > `LenB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca liczbę bajtów w ciąg zamiast znaków. Jest on używany głównie do konwertowania ciągów znaków dwubajtowych (DBCS) aplikacji. Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `LenB` nie jest już obsługiwana.      ## Uwagi dla deweloperów urządzeń inteligentnych `Len` funkcja akceptuje tylko `String` i `Object` zmienne jako parametry. Jeśli `Object` zawiera `String`, zwróci długość `String`. Jeśli parametr ma wartość NULL `Object` odwołanie, funkcja zwraca wartość zero. Jeśli `Object` zawiera innego typu, jest zgłaszany wyjątek."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._37_1.vb)]"
  syntax:
    content: public static int Len (ulong Expression);
    parameters:
    - id: Expression
      type: System.UInt64
      description: "Wszystkie prawidłowe <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nazwę wyrażenia lub zmiennej. Jeśli `Expression` jest typu <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funkcja zwraca rozmiar będą zapisywane do pliku przez <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funkcji."
    return:
      type: System.Int32
      description: "Zwraca wartość całkowitą reprezentującą liczbę znaków w ciągu lub nominalnego liczbę bajtów wymaganą do zapisania zmiennej."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)
  id: LSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LSet(String,Int32)
  nameWithType: Strings.LSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.LSet(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca ciąg wyrównany do lewej zawierający podany ciąg skorygowany do zadanej długości."
  remarks: "Jeśli określony ciąg jest dłuższy niż określony czas, zwrócony ciąg jest obcinana do określonej długości. Jeśli określonego ciągu jest mniejszy niż określony czas, spacje są dodawane do prawego końca zwracany ciąg do utworzenia odpowiednich długości."
  example:
  - "This example demonstrates the use of the `LSet` function.  \n  \n [!code-vb[VbVbalrStrings#11](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._168_1.vb)]"
  syntax:
    content: public static string LSet (string Source, int Length);
    parameters:
    - id: Source
      type: System.String
      description: "Wymagany. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>wyrażenie. Nazwa zmiennej ciągu."
    - id: Length
      type: System.Int32
      description: "Wymagany. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>wyrażenie. Długość ciągu zwróconego."
    return:
      type: System.String
      description: "Zwraca ciąg wyrównany do lewej zawierający podany ciąg skorygowany do zadanej długości."
  overload: Microsoft.VisualBasic.Strings.LSet*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LTrim(System.String)
  id: LTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LTrim(String)
  nameWithType: Strings.LTrim(String)
  fullName: Microsoft.VisualBasic.Strings.LTrim(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca ciąg zawierający kopię podanego ciągu bez spacji początkowych (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), nie spacji końcowych (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), lub nie początkowe lub końcowe spacje (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  remarks: "`LTrim`, `RTrim`, I `Trim` funkcji Usuń spacje z końców ciągów."
  example:
  - "This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable. It uses the `Trim` function to strip both types of spaces.  \n  \n [!code-vb[VbVbalrStrings#25](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._110_1.vb)]"
  syntax:
    content: public static string LTrim (string str);
    parameters:
    - id: str
      type: System.String
      description: "Wymagany. Wszystkie prawidłowe <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> wyrażenia."
    return:
      type: System.String
      description: "Zwraca ciąg zawierający kopię podanego ciągu bez spacji początkowych (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), nie spacji końcowych (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), lub nie początkowe lub końcowe spacje (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  overload: Microsoft.VisualBasic.Strings.LTrim*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)
  id: Mid(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Mid(String,Int32)
  nameWithType: Strings.Mid(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca ciąg zawierający znaki, zaczynając od określonej pozycji w ciągu."
  remarks: "Aby określić liczbę znaków w `str`, użyj `Len` funkcji.       Visual Basic ma `Mid` funkcji i `Mid` instrukcji. Te elementy jednocześnie działać na określoną liczbę znaków w ciągu, ale `Mid` funkcja zwraca znaków podczas `Mid` instrukcji zastępuje znaki. Aby uzyskać więcej informacji, zobacz [Mid — instrukcja](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > `MidB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca ciąg w bajtach zamiast znaków. Jest on używany głównie do konwertowania ciągów znaków dwubajtowych (DBCS) aplikacji. Wszystkie ciągi Visual Basic są w formacie Unicode, i `MidB` nie jest już obsługiwana."
  example:
  - "The last line in this example uses this overload of the `Mid` function to return the fifth and subsequent characters from a string.  \n  \n [!code-vb[VbVbalrStrings#17](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._67_1.vb)]"
  syntax:
    content: public static string Mid (string str, int Start);
    parameters:
    - id: str
      type: System.String
      description: "Wymagany. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>wyrażenie, z którego są zwracane znaki."
    - id: Start
      type: System.Int32
      description: "Wymagany. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>wyrażenie. Położenie początkowe zwracanych znaków. Jeśli `Start` jest większa niż liczba znaków w `str`, <xref uid=&quot;langword_csharp_Mid&quot; name=&quot;Mid&quot; href=&quot;&quot;> </xref> funkcja zwraca ciąg o zerowej długości (&quot;&quot;). `Start`to jeden."
    return:
      type: System.String
      description: "Ciąg, który zawiera wszystkie znaki, zaczynając od określonej pozycji w ciągu."
  overload: Microsoft.VisualBasic.Strings.Mid*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>&lt;= 0 or <code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)
  id: Mid(System.String,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Mid(String,Int32,Int32)
  nameWithType: Strings.Mid(String,Int32,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca ciąg zawierający określoną liczbę znaków od określonej pozycji w ciągu."
  remarks: "Aby określić liczbę znaków w `str`, użyj `Len` funkcji.       Visual Basic ma `Mid` funkcji i `Mid` instrukcji. Te elementy jednocześnie działać na określoną liczbę znaków w ciągu, ale `Mid` funkcja zwraca znaków podczas `Mid` instrukcji zastępuje znaki. Aby uzyskać więcej informacji, zobacz [Mid — instrukcja](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > `MidB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca ciąg w bajtach zamiast znaków. Jest on używany głównie do konwertowania ciągów znaków dwubajtowych (DBCS) aplikacji. Wszystkie ciągi Visual Basic są w formacie Unicode, i `MidB` nie jest już obsługiwana."
  example:
  - "The first two `Mid` functions in this example return the specified number of characters from a string, starting from the given positions. (The last function illustrates the <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> overload and only specifies the starting point for the string extraction.)  \n  \n [!code-vb[VbVbalrStrings#17](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._33_1.vb)]"
  syntax:
    content: public static string Mid (string str, int Start, int Length);
    parameters:
    - id: str
      type: System.String
      description: "Wymagany. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>wyrażenie, z którego są zwracane znaki."
    - id: Start
      type: System.Int32
      description: "Wymagany. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>wyrażenie. Położenie początkowe zwracanych znaków. Jeśli `Start` jest większa niż liczba znaków w `str`, <xref uid=&quot;langword_csharp_Mid&quot; name=&quot;Mid&quot; href=&quot;&quot;> </xref> funkcja zwraca ciąg o zerowej długości (&quot;&quot;). `Start`jeden opiera się."
    - id: Length
      type: System.Int32
      description: "Opcjonalny. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>wyrażenie. Liczba znaków do zwrócenia. Pominięcie lub, jeśli jest dostępnych mniej niż `Length` znaków w tekście (w tym znak na pozycji `Start`), zwracane są wszystkie znaki od pozycji początkowej na końcu ciągu."
    return:
      type: System.String
      description: "Ciąg, który składa się z określoną liczbę znaków, zaczynając od określonej pozycji w ciągu."
  overload: Microsoft.VisualBasic.Strings.Mid*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>&lt;= 0 or <code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  id: Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Replace(String,String,String,Int32,Int32,CompareMethod)
  nameWithType: Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca wartość typu ciąg, w której określony podciąg został zamieniony na inny podciąg określoną liczbę razy."
  remarks: "Wartość zwracana `Replace` funkcji jest ciągiem, który rozpoczyna się od pozycji określony przez `Start` i kończy się na końcu `Expression` ciąg z podstawień wprowadzone określone przez `Find` i `Replace` wartości.       `Compare` Argument może mieć następujące wartości.      |||   |-|-|   | Stałe | Opis elementu |   | `Binary`| Przeprowadza porównanie binarne |   | `Text`| Przeprowadza porównanie tekstowe |"
  example:
  - "This example demonstrates the `Replace` function.  \n  \n```vb#  \nDim TestString As String = \"Shopping List\"  \n' Returns \"Shipping List\".  \nDim aString As String = Replace(TestString, \"o\", \"i\")  \n```"
  syntax:
    content: public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Expression
      type: System.String
      description: "Wymagany. Ciąg zawierający podciąg, aby zastąpić wyrażenia."
    - id: Find
      type: System.String
      description: "Wymagany. Poszukiwany podciąg."
    - id: Replacement
      type: System.String
      description: "Wymagany. Zastąpienie podciąg."
    - id: Start
      type: System.Int32
      description: "Opcjonalny. Umieść w `Expression` zaczynającym się ciąg używany do zastąpienia. Wartość zwracana <xref uid=&quot;langword_csharp_Replace&quot; name=&quot;Replace&quot; href=&quot;&quot;> </xref> jest ciągiem, który rozpoczyna się od `Start`, z odpowiednie zmiany. Jeśli pominięta, przyjmowana jest wartość 1."
    - id: Count
      type: System.Int32
      description: "Opcjonalny. Liczba zamian podciągów do wykonania. W przypadku pominięcia będzie używana wartość domyślna to&1;, co oznacza &quot;wykonanie wszystkich możliwych zamian&quot;."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Opcjonalny. Wartość liczbowa wskazujący rodzaj porównywania podczas podciągów. Wartości można znaleźć w temacie Ustawienia."
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_Replace&quot; name=&quot;Replace&quot; href=&quot;&quot;></xref>zwraca następujące wartości.       <table><tbody><tr><td> Jeśli       </td><td> Zwraca Zamień       </td></tr><tr><td><code>Find</code>jest pusty lub<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> Kopię<code>Expression</code></td></tr><tr><td><code>Replace</code>jest o zerowej długości       </td><td> Kopię <code> Expression </code> z nie wystąpień<code>Find</code></td></tr><tr><td><code>Expression</code>jest pusty lub <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, lub <code> Start </code> jest większa niż długość<code>Expression</code></td><td><xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td></tr><tr><td><code>Count</code>wynosi 0       </td><td> Kopię<code>Expression</code></td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.Replace*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Count</code>&lt; -1 or <code>Start</code> &lt;= 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)
  id: Right(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Right(String,Int32)
  nameWithType: Strings.Right(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Right(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca ciąg zawierający określoną liczbę znaków od prawego końca ciągu."
  remarks: "Aby określić liczbę znaków w `str`, użyj `Len` funkcji. Jeśli używana w formularzu systemu Windows lub klasy, która ma `Right` właściwości, użytkownik musi pełnej kwalifikacji funkcji z `Microsoft.VisualBasic.Strings.Right`.      > [!NOTE] > `RightB` Funkcja we wcześniejszych wersjach programu Visual Basic zwraca ciąg znaków, a nie w bajtach. Jest on używany głównie do konwertowania ciągów znaków dwubajtowych (DBCS) aplikacji. Wszystkie bieżące ciągi Visual Basic są w formacie Unicode, i `RightB` nie jest już obsługiwana."
  example:
  - "This example demonstrates the use of the `Right` function to return a substring of a given `String`. In a class that has a `Right` property, it may be necessary to fully qualify the `Right` function.  \n  \n [!code-vb[VbVbalrStrings#21](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._221_1.vb)]"
  syntax:
    content: public static string Right (string str, int Length);
    parameters:
    - id: str
      type: System.String
      description: "Wymagany. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>wyrażenie, z którego są zwracane po prawej stronie znaków."
    - id: Length
      type: System.Int32
      description: "Wymagany. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. Wyrażenie liczbowe wskazujący, ile znaków ma być zwracanych. Jeśli jest to 0, ciąg o zerowej długości (&quot;&quot;) jest zwracany. Jeśli większa lub równa liczbie znaków `str`, zostanie zwrócony cały ciąg."
    return:
      type: System.String
      description: "Zwraca ciąg zawierający określoną liczbę znaków od prawego końca ciągu."
  overload: Microsoft.VisualBasic.Strings.Right*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)
  id: RSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: RSet(String,Int32)
  nameWithType: Strings.RSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.RSet(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca ciąg wyrównany do prawej zawierający podany ciąg skorygowany do zadanej długości."
  remarks: "Jeśli `Source` jest dłuższa niż `Length`, `RSet` umieszcza tylko po lewej stronie znaków, maksymalnie do długości `Source`, w zwracanym ciągu. Jeśli określonego ciągu jest mniejszy niż określony czas, spacje są dodawane do lewego końca ciągu do utworzenia odpowiednich długości. Jeśli określony ciąg jest dłuższy niż określony czas, jest obcinana do zadanej długości."
  example:
  - "This example demonstrates the use of the `RSet` function.  \n  \n [!code-vb[VbVbalrStrings#9](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._218_1.vb)]"
  syntax:
    content: public static string RSet (string Source, int Length);
    parameters:
    - id: Source
      type: System.String
      description: "Wymagany. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>wyrażenie. Nazwa zmiennej ciągu."
    - id: Length
      type: System.Int32
      description: "Wymagany. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>wyrażenie. Długość ciągu zwróconego."
    return:
      type: System.String
      description: "Zwraca ciąg wyrównany do prawej zawierający podany ciąg skorygowany do zadanej długości."
  overload: Microsoft.VisualBasic.Strings.RSet*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.RTrim(System.String)
  id: RTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: RTrim(String)
  nameWithType: Strings.RTrim(String)
  fullName: Microsoft.VisualBasic.Strings.RTrim(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca ciąg zawierający kopię podanego ciągu bez spacji początkowych (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), nie spacji końcowych (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), lub nie początkowe lub końcowe spacje (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  remarks: "`LTrim`, `RTrim`, I `Trim` funkcji Usuń spacje z końców ciągów."
  example:
  - "This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable. It uses the `Trim` function to strip both types of spaces.  \n  \n [!code-vb[VbVbalrStrings#25](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._143_1.vb)]"
  syntax:
    content: public static string RTrim (string str);
    parameters:
    - id: str
      type: System.String
      description: "Wymagany. Wszystkie prawidłowe <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> wyrażenia."
    return:
      type: System.String
      description: "Zwraca ciąg zawierający kopię podanego ciągu bez spacji początkowych (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), nie spacji końcowych (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), lub nie początkowe lub końcowe spacje (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  overload: Microsoft.VisualBasic.Strings.RTrim*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Space(System.Int32)
  id: Space(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Space(Int32)
  nameWithType: Strings.Space(Int32)
  fullName: Microsoft.VisualBasic.Strings.Space(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca ciąg zawierający podaną liczbę spacji."
  remarks: "`Space` Funkcja jest przydatna do formatowania danych wyjściowych i czyszczenia danych w ciągi o stałej długości."
  example:
  - "This example uses the `Space` function to return a string consisting of a specified number of spaces.  \n  \n [!code-vb[VbVbalrStrings#2](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._154_1.vb)]"
  syntax:
    content: public static string Space (int Number);
    parameters:
    - id: Number
      type: System.Int32
      description: "Wymagany. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>wyrażenie. Liczba spacji, w ciągu."
    return:
      type: System.String
      description: "Zwraca ciąg zawierający podaną liczbę spacji."
  overload: Microsoft.VisualBasic.Strings.Space*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  id: Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Split(String,String,Int32,CompareMethod)
  nameWithType: Strings.Split(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Split(String,String,Int32,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca nieujemną jednowymiarową tablicę zawierającą podaną liczbę podciągów."
  remarks: "Domyślnie lub gdy `Limit` równa -1, `Split` funkcja dzieli ciąg wejściowy przy każdym wystąpieniu ogranicznika ciągu i zwraca podciągów w tablicy. Podczas `Limit` parametru jest większa od zera, `Split` funkcja dzieli ciąg przy pierwszym `Limit`wystąpienia ogranicznik,-1 i zwraca tablicę z wynikowy podciągów. Na przykład `Split(&quot;a:b:c&quot;, &quot;:&quot;)` zwraca tablicę `{&quot;a&quot;, &quot;b&quot;, &quot;c&quot;}`, podczas gdy `Split(&quot;a:b:c&quot;, &quot;:&quot;, 2)` zwraca tablicę `{&quot;a&quot;, &quot;b:c&quot;}`.       Gdy `Split` funkcja napotka dwa ograniczniki w wierszu lub ogranicznik na początku lub na końcu ciągu, interpretuje je jako otaczającego ciąg pusty (&quot;&quot;). Na przykład `Split(&quot;xx&quot;, &quot;x&quot;)` zwraca tablicę zawierającą trzy puste ciągi: jeden znajdujące początku ciąg i pierwszy &quot;x&quot;, co znajdujące dwa &quot;ciągi x&quot;, a drugi znajdujące ostatniego &quot;x&quot; i na końcu ciągu.       Ta tabela pokazuje, jak opcjonalny `Delimiter`, `Limit`, i `Compare` parametrów można zmienić zachowanie `Split` funkcji.      |||   |-|-|   | Podziel wywołania | Wartość zwracana |   | `Split(&quot;42, 12, 19&quot;)`| {&quot;42,&quot;, &quot;12&quot;, &quot;19&quot;} |   | `Split(&quot;42, 12, 19&quot;, &quot;, &quot;)`| {&quot;42&quot;, &quot;12&quot;, &quot;19&quot;} |   | `Split(&quot;42, 12, 19&quot;, &quot;, &quot;, 2)`| {&quot;42&quot;, &quot;12, 19&quot;} |   | `Split(&quot;192.168.0.1&quot;, &quot;.&quot;)`| {&quot;192&quot;, &quot;168&quot;, &quot;0&quot;, &quot;1&quot;} |   | `Split(&quot;Alice and Bob&quot;, &quot; AND &quot;)`| {&quot;Alicja i Robert&quot;} |   | `Split(&quot;Alice and Bob&quot;, &quot; AND &quot;, ,CompareMethod.Text)`| {&quot;Alicja&quot;, &quot;Bob&quot;} |   | `Split(&quot;someone@example.com&quot;, &quot;@&quot;,1)`| {&quot;someone@example.com&quot;}|   | `Split(&quot;someone@example.com&quot;, &quot;@&quot;,2)`| {&quot;ktoś&quot;, &quot;example.com&quot;}|       `Compare` Argument może mieć następujące wartości.      ||||   |-|-|-|   | Stałe | Opis elementu | Wartość |   | `CompareMethod.Binary`| Przeprowadza porównanie binarne |&0; |   | `CompareMethod.Text`| Przeprowadza porównanie tekstowe |&1; |"
  example:
  - "The following example demonstrates how to split a string at its spaces.  \n  \n [!code-vb[VbVbalrStrings#13](~/add/codesnippet/visualbasic/6fd442c5-62bb-40f5-92c0-_1.vb)]  \n  \n The following example demonstrates how to split strings with multiple delimiters in a row and filter out the empty strings.  \n  \n [!code-vb[VbVbalrStrings#14](~/add/codesnippet/visualbasic/6fd442c5-62bb-40f5-92c0-_2.vb)]"
  syntax:
    content: public static string[] Split (string Expression, string Delimiter = " ", int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Expression
      type: System.String
      description: "Wymagany. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>wyrażenie zawierające podciągi i ograniczniki."
    - id: Delimiter
      type: System.String
      description: "Opcjonalny. Dowolny pojedynczy znak używany do identyfikowania limity podciąg. Jeśli `Delimiter` zostanie pominięty, znak spacji (&quot;&quot;) jest zakłada się, że ogranicznikiem."
    - id: Limit
      type: System.Int32
      description: "Opcjonalny. Maksymalna liczba podciągów, w których można podzielić ciąg wejściowy. Wartość domyślna -1, wskazuje, czy ciąg wejściowy powinny być podzielone przy każdym wystąpieniu `Delimiter` ciągu."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Opcjonalny. Wartość liczbowa wskazujący porównywania podczas podciągów. Wartości można znaleźć w temacie &quot;Ustawienia&quot;."
    return:
      type: System.String[]
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>Tablica. Jeśli <code> Expression </code> jest ciągiem o zerowej długości (&quot;&quot;), <xref uid=&quot;langword_csharp_Split&quot; name=&quot;Split&quot; href=&quot;&quot;> </xref> zwraca tablicę pojedynczego elementu zawierającą ciąg o zerowej długości. Jeśli <code> Delimiter </code> jest ciągiem o zerowej długości lub jeśli on nie występować w dowolnym miejscu na w <code> Expression </code>, <xref uid=&quot;langword_csharp_Split&quot; name=&quot;Split&quot; href=&quot;&quot;> </xref> zwraca tablicę pojedynczego elementu zawierającego pełny <code> Expression </code> ciągu."
  overload: Microsoft.VisualBasic.Strings.Split*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  id: StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrComp(String,String,CompareMethod)
  nameWithType: Strings.StrComp(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.StrComp(String,String,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca wartość -1, 0 lub 1, na podstawie wyniku porównania ciągów."
  remarks: "Ciągi są porównywane przez wartości alfanumeryczne sortowania, począwszy od pierwszego znaku. Aby uzyskać więcej informacji na temat binarne porównania i porównania tekstową i kolejność sortowania, zobacz [instrukcji porównanie opcji](~/add/includes/ajax-current-ext-md.md).       `Compare` Ustawienia argumentu są: |||   |-|-|   | Stałe | Opis elementu |   | `Binary`| Przeprowadza porównanie binarne, w oparciu o porządek sortowania, pochodzi z wewnętrznego reprezentacje binarne znaków. |   | `Text`| Przeprowadza porównanie tekstu, na podstawie kolejności sortowania bez uwzględniania wielkości liter tekstu, określony przez dany system `LocaleID` wartość. |"
  example:
  - "This example uses the `StrComp` function to return the results of a string comparison.  \n  \n [!code-vb[VbVbalrStrings#22](~/add/codesnippet/visualbasic/40cb6ac0-98a9-4acc-9cbf-_1.vb)]"
  syntax:
    content: public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: String1
      type: System.String
      description: "Wymagany. Wszystkie prawidłowe <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> wyrażenia."
    - id: String2
      type: System.String
      description: "Wymagany. Wszystkie prawidłowe <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> wyrażenia."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Opcjonalny. Określa typ porównania ciągów. Jeśli `Compare` zostanie pominięty, <xref uid=&quot;langword_csharp_Option Compare&quot; name=&quot;Option Compare&quot; href=&quot;&quot;> </xref> ustawienie określa typ porównania."
    return:
      type: System.Int32
      description: "<xref uid=&quot;langword_csharp_StrComp&quot; name=&quot;StrComp&quot; href=&quot;&quot;> </xref> Funkcja ma następujące wartości zwracanych.       <table><tbody><tr><td> Jeśli       </td><td> Zwraca StrComp       </td></tr><tr><td><code>String1</code>Sortuje wyprzedzenia<code>String2</code></td><td> -1       </td></tr><tr><td><code>String1</code>jest równa<code>String2</code></td><td> 0       </td></tr><tr><td><code>String1</code>Sortuje po<code>String2</code></td><td> 1       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.StrComp*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Compare</code>wartość jest nieprawidłowa."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  id: StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrConv(String,VbStrConv,Int32)
  nameWithType: Strings.StrConv(String,VbStrConv,Int32)
  fullName: Microsoft.VisualBasic.Strings.StrConv(String,VbStrConv,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca ciąg przekonwertowany WE wskazany."
  remarks: "Stałe `VbStrConv.Wide`, `VbStrConv.Narrow`, `VbStrConv.SimplifiedChinese`, `VbStrConv.TraditionalChinese`, `VbStrConv.Katakana`, i `VbStrConv.Hiragana` może powodować błędy środowiska wykonawczego stosowania ustawień regionalnych, których nie mają zastosowania, ale nie zawsze: stałe `VbStrConv.Katakana` i `VbStrConv.Hiragana` może być używany w systemie nie japoński z zainstalowany pakiet języka japońskiego. Ponadto używać stałych `VbStrConv.Wide` i `VbStrConv.Narrow` jest obsługiwana w każdym systemie o wschodnioazjatyckich język zainstalowany.       Ta funkcja używa informacji o kulturze aplikacji podczas manipulacji ciąg, tak aby zmiany wielkości liter są odpowiednie dla ustawień regionalnych, w którym aplikacja jest używana.      > [!IMPORTANT] > Jeśli aplikacji podejmowania decyzji w procesie zabezpieczeń na podstawie wyniku porównania lub operacji w przypadku zmiany, a następnie należy użyć operacji <xref:System.String.Compare%2A?displayProperty=fullName>— Metoda i przekazać <xref:System.StringComparison>lub <xref:System.StringComparison>dla `comparisonType` argument.</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> Aby uzyskać więcej informacji, zobacz [jak kultury wpływa na ciągi w Visual Basic](~/add/includes/ajax-current-ext-md.md).       `Conversion` Ustawienia argumentu są: |||   |-|-|   | Element członkowski wyliczenia | Opis elementu |   | `VbStrConv.None`| Brak konwersji wykonuje |   | `VbStrConv.LinguisticCasing`| Stosuje się reguły językowe wielkości liter, a nie systemu plików (ustawienie domyślne). Prawidłowe `VbStrConv.UpperCase` i `VbStrConv.LowerCase` tylko. |   | `VbStrConv.UpperCase`| Konwertuje ciąg na wielkie litery. |   | `VbStrConv.LowerCase`| Konwertuje ciąg na małe litery. |   | `VbStrConv.ProperCase`| Zamienia pierwszą literę każdego wyrazu w ciągu na wielkie litery. |   | `VbStrConv.Wide` <sup>*</sup>| Konwertuje wąskie znaków (połówkowej szerokości) w ciągu znaków całej (pełnej szerokości). |   | `VbStrConv.Narrow` <sup>*</sup>| Konwertuje znaki całej (pełnej szerokości) w ciągu, aby zawęzić zakres znaków (połówkowej szerokości). |   | `VbStrConv.Katakana` <sup>**</sup>| Konwertuje znaki Hiragana w ciągu znakami Katakana. |   | `VbStrConv.Hiragana` <sup>**</sup>| Konwertuje znaki Katakana w ciągu na znaki Hiragana. |   | `VbStrConv.SimplifiedChinese` <sup>*</sup>| Konwertuje znaki języka chińskiego tradycyjnego języka chińskiego uproszczonego. |   | `VbStrConv.TraditionalChinese` <sup>*</sup>| Konwertuje znaki w języku chińskim uproszczonym chińskim tradycyjnym. |       <sup> * </sup> Dotyczy azjatyckie ustawień regionalnych.       <sup>**</sup>Dotyczy tylko Japonii.      > [!NOTE] > Te stałe są określone w .NET Framework środowisko uruchomieniowe języka wspólnego. W związku z tym użyciem dowolnego miejsca w kodzie zamiast wartości rzeczywistych. Większość można łączyć (na przykład `UpperCase + Wide`), z wyjątkiem przypadków, gdy są one wykluczają się wzajemnie (na przykład `VbStrConv.Wide + VbStrConv.Narrow`).       Poniżej przedstawiono separatorach wyrazów prawidłowe dla odpowiednich wielkości liter: Null (`Chr$(0)`), tabulator poziomy (`Chr$(9)`), wiersz źródła danych (`Chr$(10)`), tabulator pionowy (`Chr$(11)`), Nowa strona (`Chr$(12)`), znaków powrotu karetki (`Chr$(13)`), miejsca (zestaw znaków jednobajtowych) (`Chr$(32)`). Rzeczywista wartość z parzystością, co może być pełny lub pełnej szerokości, jest zależna od kraju/regionu, dla kultury wschodnioazjatyckim."
  example:
  - "This example converts text into all lowercase letters.  \n  \n [!code-vb[VbVbalrStrings#6](~/add/codesnippet/visualbasic/834dd6b9-b57e-4455-8085-_1.vb)]"
  syntax:
    content: public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);
    parameters:
    - id: str
      type: System.String
      description: "Wymagany. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>wyrażenie, które ma zostać przekonwertowany."
    - id: Conversion
      type: Microsoft.VisualBasic.VbStrConv
      description: "Wymagany. <xref href=&quot;Microsoft.VisualBasic.VbStrConv&quot;></xref>element członkowski. Wartość wyliczenia określenie typu konwersji do wykonania."
    - id: LocaleID
      type: System.Int32
      description: "Opcjonalny. <xref uid=&quot;langword_csharp_LocaleID&quot; name=&quot;LocaleID&quot; href=&quot;&quot;> </xref> Wartość, jeśli jest inny niż system <xref uid=&quot;langword_csharp_LocaleID&quot; name=&quot;LocaleID&quot; href=&quot;&quot;> </xref> wartości. (System <xref uid=&quot;langword_csharp_LocaleID&quot; name=&quot;LocaleID&quot; href=&quot;&quot;> </xref> wartość jest wartością domyślną.)"
    return:
      type: System.String
      description: "Zwraca ciąg przekonwertowany WE wskazany."
  overload: Microsoft.VisualBasic.Strings.StrConv*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Nieobsługiwany <code> LocaleID </code>, <code> Conversion </code> &lt; 0 lub &gt; 2048 lub nieobsługiwany konwersji dla określonych ustawień regionalnych."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)
  id: StrDup(System.Int32,System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrDup(Int32,Char)
  nameWithType: Strings.StrDup(Int32,Char)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca ciąg lub obiekt zawierający podany znak powtórzony określoną liczbę razy."
  remarks: "Ta funkcja zwraca `String` składają się z powtarzające się znaki. Znak, który stanowi ciąg to pierwszy znak w `Character` jest zduplikowany argument, a `Number` liczbę razy."
  example:
  - "This example uses the `StrDup` function to return a string of duplicated characters.  \n  \n [!code-vb[VbVbalrStrings#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._197_1.vb)]"
  syntax:
    content: public static string StrDup (int Number, char Character);
    parameters:
    - id: Number
      type: System.Int32
      description: "Wymagany. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>wyrażenie. Długość ciągu ma zostać zwrócona."
    - id: Character
      type: System.Char
      description: "Wymagany. Any valid <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref> expression. Pierwszy znak wyrażenie, które będą używane. Jeśli znak jest typu <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, musi zawierać element <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> lub <xref uid=&quot;langword_csharp_String &quot; name=&quot;String &quot; href=&quot;&quot;> </xref>wartości."
    return:
      type: System.String
      description: "Zwraca ciąg lub obiekt zawierający podany znak powtórzony określoną liczbę razy."
  overload: Microsoft.VisualBasic.Strings.StrDup*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>jest mniejsza niż 0 lub <code>Character</code> typ jest nieprawidłowy."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Character</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)
  id: StrDup(System.Int32,System.Object)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrDup(Int32,Object)
  nameWithType: Strings.StrDup(Int32,Object)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca ciąg lub obiekt zawierający podany znak powtórzony określoną liczbę razy."
  remarks: "Ta funkcja zwraca `String` składają się z powtarzające się znaki. Znak, który stanowi ciąg to pierwszy znak w `Character` jest zduplikowany argument, a `Number` liczbę razy."
  example:
  - "This example uses the `StrDup` function to return a string of duplicated characters.  \n  \n [!code-vb[VbVbalrStrings#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._63_1.vb)]"
  syntax:
    content: public static object StrDup (int Number, object Character);
    parameters:
    - id: Number
      type: System.Int32
      description: "Wymagany. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>wyrażenie. Długość ciągu ma zostać zwrócona."
    - id: Character
      type: System.Object
      description: "Wymagany. Any valid <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref> expression. Pierwszy znak wyrażenie, które będą używane. Jeśli znak jest typu <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, musi zawierać element <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> lub <xref uid=&quot;langword_csharp_String &quot; name=&quot;String &quot; href=&quot;&quot;> </xref>wartości."
    return:
      type: System.Object
      description: "Zwraca ciąg lub obiekt zawierający podany znak powtórzony określoną liczbę razy."
  overload: Microsoft.VisualBasic.Strings.StrDup*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>jest mniejsza niż 0 lub <code>Character</code> typ jest nieprawidłowy."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Character</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)
  id: StrDup(System.Int32,System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrDup(Int32,String)
  nameWithType: Strings.StrDup(Int32,String)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca ciąg lub obiekt zawierający podany znak powtórzony określoną liczbę razy."
  remarks: "Ta funkcja zwraca `String` składają się z powtarzające się znaki. Znak, który stanowi ciąg to pierwszy znak w `Character` jest zduplikowany argument, a `Number` liczbę razy."
  example:
  - "This example uses the `StrDup` function to return a string of duplicated characters.  \n  \n [!code-vb[VbVbalrStrings#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._148_1.vb)]"
  syntax:
    content: public static string StrDup (int Number, string Character);
    parameters:
    - id: Number
      type: System.Int32
      description: "Wymagany. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>wyrażenie. Długość ciągu ma zostać zwrócona."
    - id: Character
      type: System.String
      description: "Wymagany. Any valid <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref> expression. Pierwszy znak wyrażenie, które będą używane. Jeśli znak jest typu <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, musi zawierać element <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> lub <xref uid=&quot;langword_csharp_String &quot; name=&quot;String &quot; href=&quot;&quot;> </xref>wartości."
    return:
      type: System.String
      description: "Zwraca ciąg lub obiekt zawierający podany znak powtórzony określoną liczbę razy."
  overload: Microsoft.VisualBasic.Strings.StrDup*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>jest mniejsza niż 0 lub <code>Character</code> typ jest nieprawidłowy."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Character</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrReverse(System.String)
  id: StrReverse(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrReverse(String)
  nameWithType: Strings.StrReverse(String)
  fullName: Microsoft.VisualBasic.Strings.StrReverse(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca wartość typu ciąg, w którym została odwrócona kolejność znaków określonego ciągu."
  remarks: "`StrReverse` Funkcja zwraca ciąg, który zawiera te same znaki jako `Expression`, w przeciwnym kolejności."
  example:
  - '[!code-vb[VbVbalrStrings#29](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._7_1.vb)]'
  syntax:
    content: public static string StrReverse (string Expression);
    parameters:
    - id: Expression
      type: System.String
      description: "Wymagany. Wyrażenia ciągu, którego znaki mają zostać wycofane. Jeśli `Expression` jest ciągiem o zerowej długości (&quot;&quot;), zostanie zwrócony ciąg o zerowej długości."
    return:
      type: System.String
      description: "Zwraca wartość typu ciąg, w którym została odwrócona kolejność znaków określonego ciągu."
  overload: Microsoft.VisualBasic.Strings.StrReverse*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Trim(System.String)
  id: Trim(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Trim(String)
  nameWithType: Strings.Trim(String)
  fullName: Microsoft.VisualBasic.Strings.Trim(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca ciąg zawierający kopię podanego ciągu bez spacji początkowych (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), nie spacji końcowych (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), lub nie początkowe lub końcowe spacje (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  remarks: "`LTrim`, `RTrim`, I `Trim` funkcji Usuń spacje z końców ciągów."
  example:
  - "This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable. It uses the `Trim` function to strip both types of spaces.  \n  \n [!code-vb[VbVbalrStrings#25](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._87_1.vb)]"
  syntax:
    content: public static string Trim (string str);
    parameters:
    - id: str
      type: System.String
      description: "Wymagany. Wszystkie prawidłowe <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> wyrażenia."
    return:
      type: System.String
      description: "Zwraca ciąg zawierający kopię podanego ciągu bez spacji początkowych (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), nie spacji końcowych (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), lub nie początkowe lub końcowe spacje (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  overload: Microsoft.VisualBasic.Strings.Trim*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.UCase(System.Char)
  id: UCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: UCase(Char)
  nameWithType: Strings.UCase(Char)
  fullName: Microsoft.VisualBasic.Strings.UCase(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca ciąg lub znak odpowiadający wybranemu ciągowi po konwersji na wielkie litery."
  remarks: "Tylko małe litery są konwertowane na wielkie litery; wszystkie znaki niebędące znaki i wielkich liter pozostają niezmienione.       Ta funkcja używa informacji o kulturze aplikacji podczas manipulacji ciąg, tak aby zmiany wielkości liter są odpowiednie dla ustawień regionalnych, w którym aplikacja jest używana.      > [!IMPORTANT] > Jeśli aplikacji podejmowania decyzji w procesie zabezpieczeń na podstawie wyniku porównania lub operacji w przypadku zmiany, a następnie należy użyć operacji <xref:System.String.Compare%2A?displayProperty=fullName>— Metoda i przekazać <xref:System.StringComparison>lub <xref:System.StringComparison>dla `comparisonType` argument.</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> Aby uzyskać więcej informacji, zobacz [jak kultury wpływa na ciągi w Visual Basic](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This example uses the `UCase` function to return an uppercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#31](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._201_1.vb)]"
  syntax:
    content: public static char UCase (char Value);
    parameters:
    - id: Value
      type: System.Char
      description: "Wymagany. Wszystkie prawidłowe <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> lub <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> wyrażenia."
    return:
      type: System.Char
      description: "Zwraca ciąg lub znak odpowiadający wybranemu ciągowi po konwersji na wielkie litery."
  overload: Microsoft.VisualBasic.Strings.UCase*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.UCase(System.String)
  id: UCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: UCase(String)
  nameWithType: Strings.UCase(String)
  fullName: Microsoft.VisualBasic.Strings.UCase(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca ciąg lub znak odpowiadający wybranemu ciągowi po konwersji na wielkie litery."
  remarks: "Tylko małe litery są konwertowane na wielkie litery; wszystkie znaki niebędące znaki i wielkich liter pozostają niezmienione.       Ta funkcja używa informacji o kulturze aplikacji podczas manipulacji ciąg, tak aby zmiany wielkości liter są odpowiednie dla ustawień regionalnych, w którym aplikacja jest używana.      > [!IMPORTANT] > Jeśli aplikacji podejmowania decyzji w procesie zabezpieczeń na podstawie wyniku porównania lub operacji w przypadku zmiany, a następnie należy użyć operacji <xref:System.String.Compare%2A?displayProperty=fullName>— Metoda i przekazać <xref:System.StringComparison>lub <xref:System.StringComparison>dla `comparisonType` argument.</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> Aby uzyskać więcej informacji, zobacz [jak kultury wpływa na ciągi w Visual Basic](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This example uses the `UCase` function to return an uppercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#31](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._23_1.vb)]"
  syntax:
    content: public static string UCase (string Value);
    parameters:
    - id: Value
      type: System.String
      description: "Wymagany. Wszystkie prawidłowe <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> lub <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> wyrażenia."
    return:
      type: System.String
      description: "Zwraca ciąg lub znak odpowiadający wybranemu ciągowi po konwersji na wielkie litery."
  overload: Microsoft.VisualBasic.Strings.UCase*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: Microsoft.VisualBasic.Strings.Asc(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Asc(Char)
  nameWithType: Strings.Asc(Char)
  fullName: Microsoft.VisualBasic.Strings.Asc(Char)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: Microsoft.VisualBasic.Strings.Asc(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Asc(String)
  nameWithType: Strings.Asc(String)
  fullName: Microsoft.VisualBasic.Strings.Asc(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Strings.AscW(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: AscW(Char)
  nameWithType: Strings.AscW(Char)
  fullName: Microsoft.VisualBasic.Strings.AscW(Char)
- uid: Microsoft.VisualBasic.Strings.AscW(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: AscW(String)
  nameWithType: Strings.AscW(String)
  fullName: Microsoft.VisualBasic.Strings.AscW(String)
- uid: Microsoft.VisualBasic.Strings.Chr(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Chr(Int32)
  nameWithType: Strings.Chr(Int32)
  fullName: Microsoft.VisualBasic.Strings.Chr(Int32)
- uid: Microsoft.VisualBasic.Strings.ChrW(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: ChrW(Int32)
  nameWithType: Strings.ChrW(Int32)
  fullName: Microsoft.VisualBasic.Strings.ChrW(Int32)
- uid: Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Filter(Object[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(Object[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(Object[],String,Boolean,CompareMethod)
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.CompareMethod
  parent: Microsoft.VisualBasic
  isExternal: false
  name: CompareMethod
  nameWithType: CompareMethod
  fullName: Microsoft.VisualBasic.CompareMethod
- uid: Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Filter(String[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(String[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(String[],String,Boolean,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.Format(System.Object,System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Format(Object,String)
  nameWithType: Strings.Format(Object,String)
  fullName: Microsoft.VisualBasic.Strings.Format(Object,String)
- uid: Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatCurrency(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
- uid: Microsoft.VisualBasic.TriState
  parent: Microsoft.VisualBasic
  isExternal: false
  name: TriState
  nameWithType: TriState
  fullName: Microsoft.VisualBasic.TriState
- uid: Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatDateTime(DateTime,DateFormat)
  nameWithType: Strings.FormatDateTime(DateTime,DateFormat)
  fullName: Microsoft.VisualBasic.Strings.FormatDateTime(DateTime,DateFormat)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: Microsoft.VisualBasic.DateFormat
  parent: Microsoft.VisualBasic
  isExternal: false
  name: DateFormat
  nameWithType: DateFormat
  fullName: Microsoft.VisualBasic.DateFormat
- uid: Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatNumber(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
- uid: Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatPercent(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
- uid: Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: GetChar(String,Int32)
  nameWithType: Strings.GetChar(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.GetChar(String,Int32)
- uid: Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStr(String,String,CompareMethod)
  nameWithType: Strings.InStr(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(String,String,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStr(Int32,String,String,CompareMethod)
  nameWithType: Strings.InStr(Int32,String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(Int32,String,String,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStrRev(String,String,Int32,CompareMethod)
  nameWithType: Strings.InStrRev(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStrRev(String,String,Int32,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Join(Object[],String)
  nameWithType: Strings.Join(Object[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(Object[],String)
- uid: Microsoft.VisualBasic.Strings.Join(System.String[],System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Join(String[],String)
  nameWithType: Strings.Join(String[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(String[],String)
- uid: Microsoft.VisualBasic.Strings.LCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LCase(Char)
  nameWithType: Strings.LCase(Char)
  fullName: Microsoft.VisualBasic.Strings.LCase(Char)
- uid: Microsoft.VisualBasic.Strings.LCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LCase(String)
  nameWithType: Strings.LCase(String)
  fullName: Microsoft.VisualBasic.Strings.LCase(String)
- uid: Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Left(String,Int32)
  nameWithType: Strings.Left(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Left(String,Int32)
- uid: Microsoft.VisualBasic.Strings.Len(System.Boolean)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Boolean)
  nameWithType: Strings.Len(Boolean)
  fullName: Microsoft.VisualBasic.Strings.Len(Boolean)
- uid: Microsoft.VisualBasic.Strings.Len(System.Byte)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Byte)
  nameWithType: Strings.Len(Byte)
  fullName: Microsoft.VisualBasic.Strings.Len(Byte)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: Microsoft.VisualBasic.Strings.Len(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Char)
  nameWithType: Strings.Len(Char)
  fullName: Microsoft.VisualBasic.Strings.Len(Char)
- uid: Microsoft.VisualBasic.Strings.Len(System.DateTime)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(DateTime)
  nameWithType: Strings.Len(DateTime)
  fullName: Microsoft.VisualBasic.Strings.Len(DateTime)
- uid: Microsoft.VisualBasic.Strings.Len(System.Decimal)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Decimal)
  nameWithType: Strings.Len(Decimal)
  fullName: Microsoft.VisualBasic.Strings.Len(Decimal)
- uid: System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: Microsoft.VisualBasic.Strings.Len(System.Double)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Double)
  nameWithType: Strings.Len(Double)
  fullName: Microsoft.VisualBasic.Strings.Len(Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.VisualBasic.Strings.Len(System.Int16)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Int16)
  nameWithType: Strings.Len(Int16)
  fullName: Microsoft.VisualBasic.Strings.Len(Int16)
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: Microsoft.VisualBasic.Strings.Len(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Int32)
  nameWithType: Strings.Len(Int32)
  fullName: Microsoft.VisualBasic.Strings.Len(Int32)
- uid: Microsoft.VisualBasic.Strings.Len(System.Int64)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Int64)
  nameWithType: Strings.Len(Int64)
  fullName: Microsoft.VisualBasic.Strings.Len(Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.Strings.Len(System.Object)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Object)
  nameWithType: Strings.Len(Object)
  fullName: Microsoft.VisualBasic.Strings.Len(Object)
- uid: Microsoft.VisualBasic.Strings.Len(System.SByte)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(SByte)
  nameWithType: Strings.Len(SByte)
  fullName: Microsoft.VisualBasic.Strings.Len(SByte)
- uid: System.SByte
  parent: System
  isExternal: true
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: Microsoft.VisualBasic.Strings.Len(System.Single)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Single)
  nameWithType: Strings.Len(Single)
  fullName: Microsoft.VisualBasic.Strings.Len(Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.VisualBasic.Strings.Len(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(String)
  nameWithType: Strings.Len(String)
  fullName: Microsoft.VisualBasic.Strings.Len(String)
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt16)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(UInt16)
  nameWithType: Strings.Len(UInt16)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt16)
- uid: System.UInt16
  parent: System
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(UInt32)
  nameWithType: Strings.Len(UInt32)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt32)
- uid: System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt64)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(UInt64)
  nameWithType: Strings.Len(UInt64)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt64)
- uid: System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LSet(String,Int32)
  nameWithType: Strings.LSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.LSet(String,Int32)
- uid: Microsoft.VisualBasic.Strings.LTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LTrim(String)
  nameWithType: Strings.LTrim(String)
  fullName: Microsoft.VisualBasic.Strings.LTrim(String)
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Mid(String,Int32)
  nameWithType: Strings.Mid(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32)
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Mid(String,Int32,Int32)
  nameWithType: Strings.Mid(String,Int32,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32,Int32)
- uid: Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Replace(String,String,String,Int32,Int32,CompareMethod)
  nameWithType: Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Right(String,Int32)
  nameWithType: Strings.Right(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Right(String,Int32)
- uid: Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RSet(String,Int32)
  nameWithType: Strings.RSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.RSet(String,Int32)
- uid: Microsoft.VisualBasic.Strings.RTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RTrim(String)
  nameWithType: Strings.RTrim(String)
  fullName: Microsoft.VisualBasic.Strings.RTrim(String)
- uid: Microsoft.VisualBasic.Strings.Space(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Space(Int32)
  nameWithType: Strings.Space(Int32)
  fullName: Microsoft.VisualBasic.Strings.Space(Int32)
- uid: Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Split(String,String,Int32,CompareMethod)
  nameWithType: Strings.Split(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Split(String,String,Int32,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrComp(String,String,CompareMethod)
  nameWithType: Strings.StrComp(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.StrComp(String,String,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrConv(String,VbStrConv,Int32)
  nameWithType: Strings.StrConv(String,VbStrConv,Int32)
  fullName: Microsoft.VisualBasic.Strings.StrConv(String,VbStrConv,Int32)
- uid: Microsoft.VisualBasic.VbStrConv
  parent: Microsoft.VisualBasic
  isExternal: false
  name: VbStrConv
  nameWithType: VbStrConv
  fullName: Microsoft.VisualBasic.VbStrConv
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup(Int32,Char)
  nameWithType: Strings.StrDup(Int32,Char)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Char)
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup(Int32,Object)
  nameWithType: Strings.StrDup(Int32,Object)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Object)
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup(Int32,String)
  nameWithType: Strings.StrDup(Int32,String)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,String)
- uid: Microsoft.VisualBasic.Strings.StrReverse(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrReverse(String)
  nameWithType: Strings.StrReverse(String)
  fullName: Microsoft.VisualBasic.Strings.StrReverse(String)
- uid: Microsoft.VisualBasic.Strings.Trim(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Trim(String)
  nameWithType: Strings.Trim(String)
  fullName: Microsoft.VisualBasic.Strings.Trim(String)
- uid: Microsoft.VisualBasic.Strings.UCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: UCase(Char)
  nameWithType: Strings.UCase(Char)
  fullName: Microsoft.VisualBasic.Strings.UCase(Char)
- uid: Microsoft.VisualBasic.Strings.UCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: UCase(String)
  nameWithType: Strings.UCase(String)
  fullName: Microsoft.VisualBasic.Strings.UCase(String)
- uid: Microsoft.VisualBasic.Strings.Asc*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Asc
  nameWithType: Strings.Asc
- uid: Microsoft.VisualBasic.Strings.AscW*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: AscW
  nameWithType: Strings.AscW
- uid: Microsoft.VisualBasic.Strings.Chr*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Chr
  nameWithType: Strings.Chr
- uid: Microsoft.VisualBasic.Strings.ChrW*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: ChrW
  nameWithType: Strings.ChrW
- uid: Microsoft.VisualBasic.Strings.Filter*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Filter
  nameWithType: Strings.Filter
- uid: Microsoft.VisualBasic.Strings.Format*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Format
  nameWithType: Strings.Format
- uid: Microsoft.VisualBasic.Strings.FormatCurrency*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatCurrency
  nameWithType: Strings.FormatCurrency
- uid: Microsoft.VisualBasic.Strings.FormatDateTime*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatDateTime
  nameWithType: Strings.FormatDateTime
- uid: Microsoft.VisualBasic.Strings.FormatNumber*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatNumber
  nameWithType: Strings.FormatNumber
- uid: Microsoft.VisualBasic.Strings.FormatPercent*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatPercent
  nameWithType: Strings.FormatPercent
- uid: Microsoft.VisualBasic.Strings.GetChar*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: GetChar
  nameWithType: Strings.GetChar
- uid: Microsoft.VisualBasic.Strings.InStr*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStr
  nameWithType: Strings.InStr
- uid: Microsoft.VisualBasic.Strings.InStrRev*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStrRev
  nameWithType: Strings.InStrRev
- uid: Microsoft.VisualBasic.Strings.Join*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Join
  nameWithType: Strings.Join
- uid: Microsoft.VisualBasic.Strings.LCase*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LCase
  nameWithType: Strings.LCase
- uid: Microsoft.VisualBasic.Strings.Left*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Left
  nameWithType: Strings.Left
- uid: Microsoft.VisualBasic.Strings.Len*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len
  nameWithType: Strings.Len
- uid: Microsoft.VisualBasic.Strings.LSet*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LSet
  nameWithType: Strings.LSet
- uid: Microsoft.VisualBasic.Strings.LTrim*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LTrim
  nameWithType: Strings.LTrim
- uid: Microsoft.VisualBasic.Strings.Mid*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Mid
  nameWithType: Strings.Mid
- uid: Microsoft.VisualBasic.Strings.Replace*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Replace
  nameWithType: Strings.Replace
- uid: Microsoft.VisualBasic.Strings.Right*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Right
  nameWithType: Strings.Right
- uid: Microsoft.VisualBasic.Strings.RSet*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RSet
  nameWithType: Strings.RSet
- uid: Microsoft.VisualBasic.Strings.RTrim*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RTrim
  nameWithType: Strings.RTrim
- uid: Microsoft.VisualBasic.Strings.Space*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Space
  nameWithType: Strings.Space
- uid: Microsoft.VisualBasic.Strings.Split*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Split
  nameWithType: Strings.Split
- uid: Microsoft.VisualBasic.Strings.StrComp*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrComp
  nameWithType: Strings.StrComp
- uid: Microsoft.VisualBasic.Strings.StrConv*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrConv
  nameWithType: Strings.StrConv
- uid: Microsoft.VisualBasic.Strings.StrDup*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup
  nameWithType: Strings.StrDup
- uid: Microsoft.VisualBasic.Strings.StrReverse*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrReverse
  nameWithType: Strings.StrReverse
- uid: Microsoft.VisualBasic.Strings.Trim*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Trim
  nameWithType: Strings.Trim
- uid: Microsoft.VisualBasic.Strings.UCase*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: UCase
  nameWithType: Strings.UCase
