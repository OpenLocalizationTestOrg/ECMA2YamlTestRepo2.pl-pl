### YamlMime:ManagedReference
items:
- uid: System.Windows.PropertyPath
  id: PropertyPath
  children:
  - System.Windows.PropertyPath.#ctor(System.Object)
  - System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  - System.Windows.PropertyPath.Path
  - System.Windows.PropertyPath.PathParameters
  langs:
  - csharp
  name: PropertyPath
  nameWithType: PropertyPath
  fullName: System.Windows.PropertyPath
  type: Class
  summary: "Implementuje struktura danych opisu właściwości jako ścieżka poniżej innej właściwości lub poniżej typem właściciela. Ścieżki właściwości są używane w powiązaniu danych do obiektów oraz scenorys i osiach czasu dla animacji."
  remarks: "Ta klasa zawiera ciąg <xref:System.Windows.PropertyPath.Path%2A>i listy właściwości zależności, które są <xref:System.Windows.PropertyPath.PathParameters%2A>w ciągu<xref:System.Windows.PropertyPath.Path%2A>.</xref:System.Windows.PropertyPath.Path%2A> </xref:System.Windows.PropertyPath.PathParameters%2A> </xref:System.Windows.PropertyPath.Path%2A>       PropertyPath obsługuje dwa tryby działania: **tryb źródła** opisuje ścieżkę do właściwości, która jest używana jako źródło dla innej operacji. Ten tryb jest używany przez <xref:System.Windows.Data.Binding>klasy do obsługi wiązania z danymi.</xref:System.Windows.Data.Binding>       **Tryb docelowy** opisuje ścieżkę do właściwości, która zostanie ustawione jako właściwość target. Ten tryb jest używany przez animacji wesprzeć ustawiające oś czasu i scenorysu.       Na przykład `Background.Opacity` jest ścieżką dwuetapową. Tej ścieżki oznacza: najpierw należy znaleźć `Background` właściwość obiektu, Pobierz obiekt wartość `Background` właściwość ma wartość, a następnie pobrać wartości `Opacity` właściwości tego obiektu.      <a name=&quot;xamlAttributeUsage_PropertyPath&quot;></a>## Użycie atrybutu XAML ```   <object property=&quot;propertyPath&quot; .../>   ``` <a name=&quot;xamlValues_PropertyPath&quot;> </a> ## wartości XAML *propertyPath* ciąg, który zostanie zidentyfikowane jako ścieżki właściwości prostymi lub złożonymi.       Składnia PropertyPath ustawieniu [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] jest uniwersalny, ale złożone i jest opisany w innym temacie [składnia PropertyPath XAML](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Windows.PropertyPathConverter))]

      public sealed class PropertyPath
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PropertyPath(Object)
  nameWithType: PropertyPath.PropertyPath(Object)
  fullName: System.Windows.PropertyPath.PropertyPath(Object)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Windows.PropertyPath&quot;> </xref> klasy."
  remarks: "Ten konstruktor ma dwa użycia zupełnie inaczej w zależności od tego, czy jest on używany dla ścieżki właściwości tryb źródła dla powiązania lub ścieżki właściwości pojedynczy krok tryb obiektu docelowego dla docelowego scenorysu.       Jeśli za pomocą tej <xref:System.Windows.PropertyPath>w trybie źródła dla powiązania, `parameter` jest ciąg reprezentujący nazwę właściwości lub może być ciąg opisujący ścieżkę &quot;krokowym&quot; do właściwości w [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] modelu obiektu obiektu, który jest używany jako źródło dla powiązania.</xref:System.Windows.PropertyPath> Ścieżki właściwości powiązania znaku, który identyfikuje &quot;krok&quot; jest kropkę (.). Odwołania indeksatora (w tym wiele indeksatorów i typ zróżnicowanie) również są obsługiwane. Aby uzyskać więcej informacji o składni ciągu szczegółowo używane przez <xref:System.Windows.Data.Binding>obiekt, zobacz <xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName>.</xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName> </xref:System.Windows.Data.Binding> Właściwość używana jako źródło powiązania nie musi być właściwością zależności. Jeśli powiązanie aktualizuje dwukierunkowe, odwołuje się do właściwości musi być do odczytu / zapisu. Należy również zauważyć, że cel wiązania musi być właściwością zależności. Aby uzyskać więcej informacji, zobacz [omówienie powiązania danych](~/add/includes/ajax-current-ext-md.md).       Jeśli za pomocą tej <xref:System.Windows.PropertyPath>w trybie docelowej ścieżce pojedynczy krok dla docelowego scenorysu, `parameter` jest zazwyczaj podawana jako typ <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty> </xref:System.Windows.PropertyPath> Można również określić ciąg, który jest <xref:System.Windows.DependencyProperty.Name%2A>.</xref:System.Windows.DependencyProperty.Name%2A> Każda z tych ocenić do tego samego rezultatu, ponieważ jest ona przechowywana wewnętrznie jako ciąg. Podana <xref:System.Windows.DependencyProperty>jest konwertowana na ciąg za pośrednictwem <xref:System.Windows.Markup.DependencyPropertyConverter>.</xref:System.Windows.Markup.DependencyPropertyConverter> </xref:System.Windows.DependencyProperty> <xref:System.Windows.Markup.DependencyPropertyConverter>Obsługiwana kwalifikowaną formatu nazewnictwa dla właściwości zależności, dzięki czemu można określić *typeName*.* propertyName* kwalifikowana ciąg nazwy właściwości zależności konstruktora PropertyPath w kodzie.</xref:System.Windows.Markup.DependencyPropertyConverter> Kwalifikowana ścieżka do identyfikatora właściwości zależności to pojęcie innego niż złożony ścieżki. Złożone ścieżki <xref:System.Windows.PropertyPath>zamiast tego należy utworzyć z <xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=fullName>konstruktora.</xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=fullName> </xref:System.Windows.PropertyPath>"
  syntax:
    content: public PropertyPath (object parameter);
    parameters:
    - id: parameter
      type: System.Object
      description: "Ścieżka właściwości, albo opisujący ścieżkę do [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] właściwości lub właściwości jednej zależności."
  overload: System.Windows.PropertyPath.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  id: '#ctor(System.String,System.Object[])'
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PropertyPath(String,Object[])
  nameWithType: PropertyPath.PropertyPath(String,Object[])
  fullName: System.Windows.PropertyPath.PropertyPath(String,Object[])
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Windows.PropertyPath&quot;> </xref> klasy pathing podany ciąg tokenu i parametry."
  remarks: "Ta sygnatura jest zwykle używany wyłącznie dla docelowej trybu <xref:System.Windows.PropertyPath>użycia ze ścieżkami złożony.</xref:System.Windows.PropertyPath>       Ten konstruktor obsługuje `params` dla `pathParameters` argument konstruktora. W związku z tym można określić zawartości `pathParameters` jako serię argumenty konstruktora rozdzielaną przecinkami, które wypełnić tablicy, zamiast konieczności wymiaru tablicy, a następnie wypełnij go przy użyciu `pathParameters` elementów. Każdy element, należy określić musi mieć jedną z następujących typów: <xref:System.Windows.DependencyProperty>, <xref:System.Reflection.PropertyInfo> <xref:System.ComponentModel.PropertyDescriptor>.</xref:System.ComponentModel.PropertyDescriptor> </xref:System.Reflection.PropertyInfo> </xref:System.Windows.DependencyProperty>       Aby uzyskać więcej informacji na wymagania dotyczące parametrów zobacz <xref:System.Windows.PropertyPath.Path%2A>i <xref:System.Windows.PropertyPath.PathParameters%2A>.</xref:System.Windows.PropertyPath.PathParameters%2A> </xref:System.Windows.PropertyPath.Path%2A>"
  syntax:
    content: public PropertyPath (string path, object[] pathParameters);
    parameters:
    - id: path
      type: System.String
      description: "Ciąg określający <xref:System.Windows.PropertyPath.Path*>, w formacie tokenami.</xref:System.Windows.PropertyPath.Path*>"
    - id: pathParameters
      type: System.Object[]
      description: "Tablica obiektów, która ustawia <xref:System.Windows.PropertyPath.PathParameters*>.</xref:System.Windows.PropertyPath.PathParameters*>"
  overload: System.Windows.PropertyPath.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.Path
  id: Path
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: Path
  nameWithType: PropertyPath.Path
  fullName: System.Windows.PropertyPath.Path
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Pobiera lub ustawia ciąg opisujący ścieżkę."
  remarks: "The string contained in this property has three completely different meanings depending on whether a <xref:System.Windows.PropertyPath> is being used for a source-mode property path for a binding, for a target-mode single-step property path for a storyboard target, or for a complex path for a storyboard target.  \n  \n If using this <xref:System.Windows.PropertyPath> in source mode for a binding, Path is a string representing a property name, or can be a string that describes a \"step-through\" path to the property in the [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] object model of the object that is being used as the source for a binding. For a binding property path, the character that identifies a \"step\" is a dot (.). Indexer references (including multiple indexers, and type differentiation) are also supported. For more details on the syntax of the string as specifically used by the <xref:System.Windows.Data.Binding> object, see <xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName>. A property used as a binding source need not be a dependency property. If the binding updates two-way, the property source must be read-write. Also note that the binding target does have to be a dependency property. For details, see [Data Binding Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n If using this <xref:System.Windows.PropertyPath> in target mode for a single-step path for a storyboard target, <xref:System.Windows.PropertyPath> is a string that is a *typeName*.*propertyName* qualified dependency property name string.  \n  \n If using this <xref:System.Windows.PropertyPath> for a complex path for a storyboard target, Path is a tokenized string format that describes the relationships of the various objects given in the <xref:System.Windows.PropertyPath.PathParameters%2A>.  \n  \n-   Each item in the array is specified in this format by the array index for the item enclosed in parentheses. For example, to specify the first item in the array, the string token is `(0)`.  \n  \n-   Relationships between items (\"steps\" in the path) are specified by a dot (.). The property forward of the dot is the first step in the path, the property after is the second step, and so on (you can specify steps beyond two). The last step in the chain always represents the property being animated.  \n  \n-   Items within collection properties are accessed with an indexer syntax, with the index within square brackets ([ and ]). The indexer is additive to the token representing the property. For example, the following is a two-step path, with the token combination in the first step specifying the second item from within the collection of that property: `(0)[1].(1)` . You cannot use an indexer on the last property in the chain; you cannot animate the actual collection position, you must animate a property on that object.  \n  \n The path string for a <xref:System.Windows.PropertyPath> is typically established through the constructors: the <xref:System.Windows.PropertyPath.%23ctor%28System.Object%29> signature for bindings or single-step storyboard targets, the [PropertyPath(String, Object\\[\\])](assetId:///M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])?qualifyHint=False&autoUpgrade=False) signature for multi-step storyboard targets.  \n  \n **XAML:** When you use a <xref:System.Windows.PropertyPath> to describe a property reference in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], as an attribute value, the string that you specify is first handled by a type converter (<xref:System.Windows.PropertyPathConverter>). This type converter then processes the string and based on its syntax will call one of the <xref:System.Windows.PropertyPath> constructor signatures. This indirection through the type converter handling an attribute value is generally how you use <xref:System.Windows.PropertyPath> in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], rather than declaring a <xref:System.Windows.PropertyPath> object element and then applying specific values to attributes such as Path and <xref:System.Windows.PropertyPath.PathParameters%2A>. For more information, see [PropertyPath XAML Syntax](~/add/includes/ajax-current-ext-md.md).  \n  \n<a name=\"xamlTextUsage_Path\"></a>   \n## XAML Text Usage  \n Members of the <xref:System.Windows.PropertyPath> type are not typically set in a direct [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax. See Remarks."
  syntax:
    content: public string Path { get; set; }
    return:
      type: System.String
      description: "Ciąg opisujący ścieżkę."
  overload: System.Windows.PropertyPath.Path*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.PathParameters
  id: PathParameters
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
  fullName: System.Windows.PropertyPath.PathParameters
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Pobiera listę parametrów do użycia podczas ścieżka odwołuje się do parametrów indeksowane."
  remarks: "Właściwości <xref:System.Windows.PropertyPath>zwykle są wyznaczane przez konstruktorów.</xref:System.Windows.PropertyPath> Do ustawiania PathParameters, <xref:System.Windows.PropertyPath.%23ctor%2A>Konstruktor jest szczególnie przydatna ponieważ `pathParameters` wyznaczony jako argument konstruktora `params`, co oznacza, nie trzeba utworzyć lub wymiaru tablicy dla konstrukcji.</xref:System.Windows.PropertyPath.%23ctor%2A> Każdy element członkowski tablicy jest po prostu określić jako dodatkowy parametr.       Jeśli właściwość końcowego, która jest elementem docelowym jest <xref:System.Windows.Freezable>Wpisz wartość zostaną sklonowane.</xref:System.Windows.Freezable> Aby uzyskać więcej informacji, zobacz [omówienie Scenorys](~/add/includes/ajax-current-ext-md.md).       Rzeczywiste oceny łańcucha właściwości jest wykonywane przez mechanizmy animacji scenorysu. W <xref:System.Windows.PropertyPath>poziomu, weryfikacja nie jest przeprowadzana na upewnij się, że kroki ścieżki na wszystkich.</xref:System.Windows.PropertyPath> Na przykład można utworzyć ścieżki właściwości, która ma <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName>w pierwszym kroku i <xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=fullName>jako drugi etap.</xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=fullName> </xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName> Ścieżka właściwości nie powiedzie się Jeśli faktycznie stosowane jako cel, ponieważ wypełnienia tego typu pędzla, ale <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName>nie ma <xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=fullName>Właściwości.</xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=fullName> </xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName> Nieprawidłowa właściwość ścieżki dyskretnie zakończyć się niepowodzeniem. Aby uzyskać więcej informacji, zobacz [omówienie Scenorys](../Topic/Storyboards%20Overview.md).       **XAML:** korzystając <xref:System.Windows.PropertyPath>do opisywania odwołania do właściwości w [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], ponieważ wartość atrybutu ciąg, który określisz najpierw jest obsługiwana przez konwerter typów (<xref:System.Windows.PropertyPathConverter>).</xref:System.Windows.PropertyPathConverter> </xref:System.Windows.PropertyPath> Ten konwerter typów następnie przetwarza ciągu i na podstawie wywoła jeden z jego składni <xref:System.Windows.PropertyPath>sygnatury konstruktora.</xref:System.Windows.PropertyPath> Tego operatora pośredniego za pomocą konwertera typu obsługi wartość atrybutu jest zazwyczaj jak używasz <xref:System.Windows.PropertyPath>w [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], zamiast deklarowanie <xref:System.Windows.PropertyPath>obiekt elementu, a następnie zostają określone wartości do atrybutów, takich jak <xref:System.Windows.PropertyPath.Path%2A>i PathParameters.</xref:System.Windows.PropertyPath.Path%2A> </xref:System.Windows.PropertyPath> </xref:System.Windows.PropertyPath> Aby uzyskać więcej informacji, zobacz [składnia PropertyPath XAML](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;xamlTextUsage_PathParameters&quot;></a>## Członkowie użycia tekstu XAML <xref:System.Windows.PropertyPath>typu nie są zwykle ustawić w bezpośrednią [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] składni.</xref:System.Windows.PropertyPath> Zobacz uwagi."
  syntax:
    content: public System.Collections.ObjectModel.Collection<object> PathParameters { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.Object}
      description: "Lista parametrów."
  overload: System.Windows.PropertyPath.PathParameters*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.PropertyPath.#ctor(System.Object)
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath(Object)
  nameWithType: PropertyPath.PropertyPath(Object)
  fullName: System.Windows.PropertyPath.PropertyPath(Object)
- uid: System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath(String,Object[])
  nameWithType: PropertyPath.PropertyPath(String,Object[])
  fullName: System.Windows.PropertyPath.PropertyPath(String,Object[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.PropertyPath.Path
  parent: System.Windows.PropertyPath
  isExternal: false
  name: Path
  nameWithType: PropertyPath.Path
  fullName: System.Windows.PropertyPath.Path
- uid: System.Windows.PropertyPath.PathParameters
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
  fullName: System.Windows.PropertyPath.PathParameters
- uid: System.Collections.ObjectModel.Collection{System.Object}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<Object>
  nameWithType: Collection<Object>
  fullName: System.Collections.ObjectModel.Collection<System.Object>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.PropertyPath.#ctor*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath
  nameWithType: PropertyPath.PropertyPath
- uid: System.Windows.PropertyPath.Path*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: Path
  nameWithType: PropertyPath.Path
- uid: System.Windows.PropertyPath.PathParameters*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
