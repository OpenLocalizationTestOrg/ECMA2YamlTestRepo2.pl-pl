### YamlMime:ManagedReference
items:
- uid: System.Reflection.IReflect
  id: IReflect
  children:
  - System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  - System.Reflection.IReflect.UnderlyingSystemType
  langs:
  - csharp
  name: IReflect
  nameWithType: IReflect
  fullName: System.Reflection.IReflect
  type: Interface
  summary: "Współdziała z [interfejsu IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5)."
  remarks: "Interfejs interfejsu IReflect jest używany na potrzeby współdziałania z [interfejsu IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5). Interfejsu IReflect definiuje podzbiór <xref:System.Type>metody odbicia.</xref:System.Type> Implementowanie ten interfejs umożliwia typ, aby dostosować zachowanie, gdy obiekt jest uzyskiwany z modelu COM jako `IDispatch` obiektu. <xref:System.Runtime.InteropServices.CustomMarshalers.ExpandoToDispatchExMarshaler>Klasa może być używana do organizowania obiektu, który zawiera implementację interfejsu IReflect lub <xref:System.Runtime.InteropServices.Expando.IExpando>jako COM `IDispatch` obiektu i na odwrót.</xref:System.Runtime.InteropServices.Expando.IExpando> </xref:System.Runtime.InteropServices.CustomMarshalers.ExpandoToDispatchExMarshaler>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      [System.Runtime.InteropServices.Guid("AFBF15E5-C37C-11d2-B88E-00A0C9B471B8")]

      public interface IReflect
  implements: []
  platform:
  - net462
- uid: System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)
  id: GetField(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetField(String,BindingFlags)
  nameWithType: IReflect.GetField(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetField(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Zwraca <xref:System.Reflection.FieldInfo>obiekt, który odpowiada flagi powiązania i określonego pola.</xref:System.Reflection.FieldInfo>"
  syntax:
    content: public System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "Nazwa pola można znaleźć."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Atrybuty powiązanie używane do sterowania wyszukiwania."
    return:
      type: System.Reflection.FieldInfo
      description: "A <xref:System.Reflection.FieldInfo>obiektu zawierającego informacje pola o nazwie obiektu spełniającego ograniczenia wyszukiwania określone w <code> bindingAttr </code>.</xref:System.Reflection.FieldInfo>"
  overload: System.Reflection.IReflect.GetField*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "Obiekt implementuje wiele pól o takiej samej nazwie."
  platform:
  - net462
- uid: System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)
  id: GetFields(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetFields(BindingFlags)
  nameWithType: IReflect.GetFields(BindingFlags)
  fullName: System.Reflection.IReflect.GetFields(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Zwraca tablicę <xref:System.Reflection.FieldInfo>obiektów, które odnoszą się do wszystkich pól bieżącej klasy.</xref:System.Reflection.FieldInfo>"
  remarks: "Dopasowanie opiera się na nazwę. Każde pole musi mieć unikatową nazwę. <xref:System.Reflection.BindingFlags?displayProperty=fullName>Flaga Określa, że metody niepublicznej znajdują się w wyszukiwaniu.</xref:System.Reflection.BindingFlags?displayProperty=fullName> <xref:System.Reflection.BindingFlags?displayProperty=fullName>Flaga Określa, że metody publiczne są uwzględniane w wyszukiwaniu.</xref:System.Reflection.BindingFlags?displayProperty=fullName>"
  syntax:
    content: public System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Atrybuty powiązanie używane do sterowania wyszukiwania."
    return:
      type: System.Reflection.FieldInfo[]
      description: "Tablica <xref:System.Reflection.FieldInfo>obiektów zawierających wszystkie informacje pola dla tego obiektu odbicia spełniającego ograniczenia wyszukiwania określone w <code> bindingAttr </code>.</xref:System.Reflection.FieldInfo>"
  overload: System.Reflection.IReflect.GetFields*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)
  id: GetMember(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetMember(String,BindingFlags)
  nameWithType: IReflect.GetMember(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetMember(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Pobiera tablicę <xref:System.Reflection.MemberInfo>obiekty odpowiadające wszystkich publicznych elementów członkowskich lub wszystkie elementy członkowskie, które odpowiada określonej nazwy.</xref:System.Reflection.MemberInfo>"
  remarks: "Metoda GetMember pobiera tablicę <xref:System.Reflection.MemberInfo>obiektów przy użyciu nazwy i atrybut wiązania, które odpowiadają wszystkich publicznych elementów członkowskich lub wszystkie elementy członkowskie, które odpowiada określonej nazwy.</xref:System.Reflection.MemberInfo> W przypadku określonej nazwy jest obserwowanych lub ignorowane, zgodnie z określonym <xref:System.Reflection.BindingFlags?displayProperty=fullName>.</xref:System.Reflection.BindingFlags?displayProperty=fullName>"
  syntax:
    content: public System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "Nazwa elementu członkowskiego do znalezienia."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Atrybuty powiązanie używane do sterowania wyszukiwania."
    return:
      type: System.Reflection.MemberInfo[]
      description: "Tablica <xref:System.Reflection.MemberInfo>obiektów pasujących <code> name </code> parametru.</xref:System.Reflection.MemberInfo>"
  overload: System.Reflection.IReflect.GetMember*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)
  id: GetMembers(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetMembers(BindingFlags)
  nameWithType: IReflect.GetMembers(BindingFlags)
  fullName: System.Reflection.IReflect.GetMembers(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Pobiera tablicę <xref:System.Reflection.MemberInfo>obiektów, które odnoszą się do wszystkich publicznych elementów członkowskich lub dla wszystkich członków bieżącej klasy.</xref:System.Reflection.MemberInfo>"
  remarks: "Ta metoda pobiera tablicę <xref:System.Reflection.MemberInfo>obiektów przy użyciu atrybutu powiązania, który odpowiada do wszystkich publicznych elementów członkowskich lub dla wszystkich członków bieżącej klasy.</xref:System.Reflection.MemberInfo> Zwraca tablicę wszystkich elementów członkowskich zdefiniowanych dla tego obiektu."
  syntax:
    content: public System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Atrybuty powiązanie używane do sterowania wyszukiwania."
    return:
      type: System.Reflection.MemberInfo[]
      description: "Tablica <xref:System.Reflection.MemberInfo>obiektów zawierających wszystkie informacje elementu członkowskiego dla tego obiektu odbicia.</xref:System.Reflection.MemberInfo>"
  overload: System.Reflection.IReflect.GetMembers*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)
  id: GetMethod(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetMethod(String,BindingFlags)
  nameWithType: IReflect.GetMethod(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetMethod(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Pobiera <xref:System.Reflection.MethodInfo>obiekt, który odpowiada określonej metody w obszarze określonej ograniczenia wyszukiwania.</xref:System.Reflection.MethodInfo>"
  syntax:
    content: public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "Nazwa elementu członkowskiego do znalezienia."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Atrybuty powiązanie używane do sterowania wyszukiwania."
    return:
      type: System.Reflection.MethodInfo
      description: "A <xref:System.Reflection.MethodInfo>obiekt zawierający informacje o metodzie dopasowany na ograniczenia nazwy i wyszukiwania metody określone w <code> bindingAttr </code>.</xref:System.Reflection.MethodInfo>"
  overload: System.Reflection.IReflect.GetMethod*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "Obiekt implementuje wiele metod o tej samej nazwie."
  platform:
  - net462
- uid: System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  id: GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
  nameWithType: IReflect.GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
  fullName: System.Reflection.IReflect.GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Pobiera <xref:System.Reflection.MethodInfo>obiekt odpowiadający określonej metody, przy użyciu <xref:System.Type>tablicy można wybrać jeden z metody przeciążane.</xref:System.Type> </xref:System.Reflection.MethodInfo>"
  remarks: "Wartość zwracana jest dopasowania na podstawie nazwy metody <xref:System.Reflection.BindingFlags>elementu członkowskiego wyliczenia, rodzaj konwersji typu określony przez `binder` parametr, przeciążenia i <xref:System.Reflection.ParameterInfo>, który opisuje sygnaturę metody.</xref:System.Reflection.ParameterInfo> </xref:System.Reflection.BindingFlags>"
  syntax:
    content: public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: name
      type: System.String
      description: "Nazwa elementu członkowskiego do znalezienia."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Atrybuty powiązanie używane do sterowania wyszukiwania."
    - id: binder
      type: System.Reflection.Binder
      description: "Obiekt, który implementuje <xref href=&quot;System.Reflection.Binder&quot;> </xref>, zawierający właściwości związanych z tej metody."
    - id: types
      type: System.Type[]
      description: "Tablica pozwala wybrać jedną z metod przeciążona."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "Tablica modyfikatorów parametrów umożliwia powiązanie pracować z podpisów parametru, w których typy zostały zmodyfikowane."
    return:
      type: System.Reflection.MethodInfo
      description: "Żądana metoda zgodny z określonymi parametrami."
  overload: System.Reflection.IReflect.GetMethod*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "Obiekt implementuje wiele metod o tej samej nazwie."
  platform:
  - net462
- uid: System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)
  id: GetMethods(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetMethods(BindingFlags)
  nameWithType: IReflect.GetMethods(BindingFlags)
  fullName: System.Reflection.IReflect.GetMethods(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Pobiera tablicę <xref:System.Reflection.MethodInfo>obiektów z wszystkich metod publicznych lub wszystkie metody bieżącej klasy.</xref:System.Reflection.MethodInfo>"
  remarks: "Atrybut niepublicznych `bindingAttr` wskazane jest tylko metody publiczne są zwracane."
  syntax:
    content: public System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Atrybuty powiązanie używane do sterowania wyszukiwania."
    return:
      type: System.Reflection.MethodInfo[]
      description: "Tablica <xref:System.Reflection.MethodInfo>obiektów zawierających wszystkie metody zdefiniowane dla tego obiektu odbicia, spełniających ograniczenia wyszukiwania określone w <code> bindingAttr </code>.</xref:System.Reflection.MethodInfo>"
  overload: System.Reflection.IReflect.GetMethods*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)
  id: GetProperties(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetProperties(BindingFlags)
  nameWithType: IReflect.GetProperties(BindingFlags)
  fullName: System.Reflection.IReflect.GetProperties(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Pobiera tablicę <xref:System.Reflection.PropertyInfo>obiektów odpowiadającym wszystkie właściwości publiczne lub na wszystkie właściwości bieżącej klasy.</xref:System.Reflection.PropertyInfo>"
  syntax:
    content: public System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Atrybut wiązania użyć do kontrolowania wyszukiwania."
    return:
      type: System.Reflection.PropertyInfo[]
      description: "Tablica <xref:System.Reflection.PropertyInfo>obiektów dla wszystkich właściwości zdefiniowane w obiekcie odbicia.</xref:System.Reflection.PropertyInfo>"
  overload: System.Reflection.IReflect.GetProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)
  id: GetProperty(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetProperty(String,BindingFlags)
  nameWithType: IReflect.GetProperty(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetProperty(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Pobiera <xref:System.Reflection.PropertyInfo>odpowiadający określonej właściwości w obiekcie określono ograniczenia wyszukiwania.</xref:System.Reflection.PropertyInfo>"
  syntax:
    content: public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "Nazwa właściwości, aby znaleźć."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Atrybuty powiązanie używane do sterowania wyszukiwania."
    return:
      type: System.Reflection.PropertyInfo
      description: "A <xref:System.Reflection.PropertyInfo>obiektu właściwości zlokalizować spełniającego ograniczenia wyszukiwania określone w <code> bindingAttr </code>, lub <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Jeśli właściwość nie jest zlokalizowany.</xref:System.Reflection.PropertyInfo>"
  overload: System.Reflection.IReflect.GetProperty*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "Obiekt implementuje wiele pól o takiej samej nazwie."
  platform:
  - net462
- uid: System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  id: GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  nameWithType: IReflect.GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  fullName: System.Reflection.IReflect.GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Pobiera <xref:System.Reflection.PropertyInfo>ograniczenia wyszukiwania określony obiekt, który odpowiada określonej właściwości przy.</xref:System.Reflection.PropertyInfo>"
  remarks: "Ta metoda pobiera <xref:System.Reflection.PropertyInfo>odpowiadający określonej właściwości w obiekcie określono ograniczenia wyszukiwania.</xref:System.Reflection.PropertyInfo> Tablica typu służy do wybierz spośród przeciążonej metody."
  syntax:
    content: public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: name
      type: System.String
      description: "Nazwa elementu członkowskiego do znalezienia."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Atrybut wiązania użyć do kontrolowania wyszukiwania."
    - id: binder
      type: System.Reflection.Binder
      description: "Obiekt, który implementuje <xref href=&quot;System.Reflection.Binder&quot;> </xref>, zawierający właściwości związanych z tej metody."
    - id: returnType
      type: System.Type
      description: "Typ właściwości."
    - id: types
      type: System.Type[]
      description: "Tablica umożliwia wybranie jednego z przeciążonych metod o tej samej nazwie."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "Tablica pozwala wybrać modyfikatorów parametrów."
    return:
      type: System.Reflection.PropertyInfo
      description: "A <xref:System.Reflection.PropertyInfo>obiektu zlokalizować właściwości, jeśli właściwość o podanej nazwie znajdował się w tym obiekcie odbicia lub <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Jeśli właściwość nie jest zlokalizowany.</xref:System.Reflection.PropertyInfo>"
  overload: System.Reflection.IReflect.GetProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  id: InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  nameWithType: IReflect.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  fullName: System.Reflection.IReflect.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Wywołuje określony element członkowski."
  remarks: "Metodę, która ma zostać wywołana musi być dostępna i udostępnia specyficzny dopasowania z określona lista argumentów, w obszarze ograniczenia określonych atrybutów integratora i wywołanie.       Metoda jest wywoływana, jeśli liczba parametrów w deklaracji metody jest równa liczbie argumentów określona lista argumentów i można przekonwertować typu argumentu przez obiekt wiążący z typem parametru.      > [!NOTE] > Tablicy Modyfikatory parametr przekazywany do metody Element InvokeMember może zawierać modyfikatora jeden parametr. Tylko pierwszy modyfikator parametru jest uznawany za podczas określania, który argument musi być przekazywane przez odwołanie, gdy ujawniać modelowi COM.       Obiekt wiążący znajduje wszystkie metody dopasowania, zgodnie z typem powiązania żądanie (<xref:System.Reflection.BindingFlags?displayProperty=fullName>, <xref:System.Reflection.IReflect.GetProperties%2A>i tak dalej).</xref:System.Reflection.IReflect.GetProperties%2A> </xref:System.Reflection.BindingFlags?displayProperty=fullName> Zbiór metod są filtrowane według nazwy, liczba argumentów i zestaw Modyfikatory wyszukiwania zdefiniowane w obiekt wiążący. Po wybraniu metody jest wywoływana, a w tym momencie zaznaczono ułatwień dostępu. Wyszukiwanie może kontrolować, które zestaw metod jest przeszukiwany zależności atrybutu dostępności skojarzonego z metodą. <xref:System.Reflection.Binder.BindToMethod%2A>Wybiera wywoływanej metody.</xref:System.Reflection.Binder.BindToMethod%2A> Domyślnego integratora wybierze najbardziej zgodne.       Ograniczenia dostępu są ignorowane w przypadku całkowicie zaufanego kodu. Oznacza to konstruktory prywatne, pola, metody i właściwości można uzyskać dostępu do się wywołana przez odbicie w każdym przypadku, gdy kod jest w pełni zaufany."
  example:
  - "The following example obtains the value of the <xref:System.DateTime.Now%2A> property.  \n  \n [!code-cs[Classic IReflect.InvokeMember Example#1](~/add/codesnippet/csharp/46b5c0ee-07c6-4491-8e06-_1.cs)]\n [!code-vb[Classic IReflect.InvokeMember Example#1](~/add/codesnippet/visualbasic/46b5c0ee-07c6-4491-8e06-_1.vb)]\n [!code-cpp[Classic IReflect.InvokeMember Example#1](~/add/codesnippet/cpp/46b5c0ee-07c6-4491-8e06-_1.cpp)]"
  syntax:
    content: public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
    parameters:
    - id: name
      type: System.String
      description: "Nazwa elementu członkowskiego do znalezienia."
    - id: invokeAttr
      type: System.Reflection.BindingFlags
      description: "Jeden z <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref> atrybuty wywołania. `invokeAttr` Parametr może być Konstruktor, metody, właściwości lub pola. Należy określić atrybut odpowiedniego wywołania. Wywołaj domyślny element członkowski klasy, przekazując pustego ciągu (&quot;&quot;) jako nazwa elementu członkowskiego."
    - id: binder
      type: System.Reflection.Binder
      description: "Jeden z <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref> bit flagi. Implementuje <xref href=&quot;System.Reflection.Binder&quot;> </xref>, zawierający właściwości związanych z tej metody."
    - id: target
      type: System.Object
      description: "Obiekt do wywołania określonego elementu członkowskiego. Ten parametr jest ignorowany dla statycznych elementów członkowskich."
    - id: args
      type: System.Object[]
      description: "Tablica obiektów zawierającą numer, kolejność i typy parametrów elementu członkowskiego, do wywołania. Jest to pusta tablica, jeśli nie ma żadnych parametrów."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: 'An array of <xref href="System.Reflection.ParameterModifier"></xref> objects. This array has the same length as the `args` parameter, representing the invoked member''s argument attributes in the metadata. A parameter can have the following attributes: <xref uid="langword_csharp_pdIn" name="pdIn" href=""></xref>, <xref uid="langword_csharp_pdOut" name="pdOut" href=""></xref>, <xref uid="langword_csharp_pdRetval" name="pdRetval" href=""></xref>, <xref uid="langword_csharp_pdOptional" name="pdOptional" href=""></xref>, and <xref uid="langword_csharp_pdHasDefault" name="pdHasDefault" href=""></xref>. These represent [In], [Out], [retval], [optional], and a default parameter, respectively. These attributes are used by various interoperability services.'
    - id: culture
      type: System.Globalization.CultureInfo
      description: "Wystąpienie <xref:System.Globalization.CultureInfo>używane do sterowania koercja typów.</xref:System.Globalization.CultureInfo> Na przykład `culture` konwertuje <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> reprezentujący 1000 do <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> wartości, ponieważ 1000 jest inaczej reprezentowany przez innych kultur. Jeśli ten parametr ma <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, <xref:System.Globalization.CultureInfo>służy bieżącego wątku.</xref:System.Globalization.CultureInfo>"
    - id: namedParameters
      type: System.String[]
      description: "A <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> tablicy parametrów."
    return:
      type: System.Object
      description: "Określony element członkowski."
  overload: System.Reflection.IReflect.InvokeMember*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Określono więcej niż jeden argument dla pola <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref>."
  - type: System.MissingFieldException
    commentId: T:System.MissingFieldException
    description: "Nie można odnaleźć pola lub właściwości."
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: "Nie można odnaleźć metody."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Prywatnego elementu członkowskiego jest wywoływana bez potrzeby <xref href=&quot;System.Security.Permissions.ReflectionPermission&quot;> </xref>."
  platform:
  - net462
- uid: System.Reflection.IReflect.UnderlyingSystemType
  id: UnderlyingSystemType
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: UnderlyingSystemType
  nameWithType: IReflect.UnderlyingSystemType
  fullName: System.Reflection.IReflect.UnderlyingSystemType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Pobiera typ podstawowy, który reprezentuje <xref href=&quot;System.Reflection.IReflect&quot;> </xref> obiektu."
  syntax:
    content: public Type UnderlyingSystemType { get; }
    return:
      type: System.Type
      description: "Typ podstawowy, który reprezentuje <xref href=&quot;System.Reflection.IReflect&quot;> </xref> obiektu."
  overload: System.Reflection.IReflect.UnderlyingSystemType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Reflection.AmbiguousMatchException
  isExternal: true
  name: System.Reflection.AmbiguousMatchException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.MissingFieldException
  isExternal: true
  name: System.MissingFieldException
- uid: System.MissingMethodException
  isExternal: true
  name: System.MissingMethodException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetField(String,BindingFlags)
  nameWithType: IReflect.GetField(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetField(String,BindingFlags)
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetFields(BindingFlags)
  nameWithType: IReflect.GetFields(BindingFlags)
  fullName: System.Reflection.IReflect.GetFields(BindingFlags)
- uid: System.Reflection.FieldInfo[]
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo[]
  spec.csharp:
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: FieldInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMember(String,BindingFlags)
  nameWithType: IReflect.GetMember(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetMember(String,BindingFlags)
- uid: System.Reflection.MemberInfo[]
  parent: System.Reflection
  isExternal: true
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo[]
  spec.csharp:
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: MemberInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMembers(BindingFlags)
  nameWithType: IReflect.GetMembers(BindingFlags)
  fullName: System.Reflection.IReflect.GetMembers(BindingFlags)
- uid: System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMethod(String,BindingFlags)
  nameWithType: IReflect.GetMethod(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetMethod(String,BindingFlags)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
  nameWithType: IReflect.GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
  fullName: System.Reflection.IReflect.GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.ParameterModifier[]
  parent: System.Reflection
  isExternal: false
  name: ParameterModifier
  nameWithType: ParameterModifier
  fullName: System.Reflection.ParameterModifier[]
  spec.csharp:
  - uid: System.Reflection.ParameterModifier
    name: ParameterModifier
    nameWithType: ParameterModifier
    fullName: ParameterModifier[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMethods(BindingFlags)
  nameWithType: IReflect.GetMethods(BindingFlags)
  fullName: System.Reflection.IReflect.GetMethods(BindingFlags)
- uid: System.Reflection.MethodInfo[]
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo[]
  spec.csharp:
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: MethodInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetProperties(BindingFlags)
  nameWithType: IReflect.GetProperties(BindingFlags)
  fullName: System.Reflection.IReflect.GetProperties(BindingFlags)
- uid: System.Reflection.PropertyInfo[]
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo[]
  spec.csharp:
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: PropertyInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetProperty(String,BindingFlags)
  nameWithType: IReflect.GetProperty(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetProperty(String,BindingFlags)
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  nameWithType: IReflect.GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  fullName: System.Reflection.IReflect.GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  parent: System.Reflection.IReflect
  isExternal: false
  name: InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  nameWithType: IReflect.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  fullName: System.Reflection.IReflect.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.IReflect.UnderlyingSystemType
  parent: System.Reflection.IReflect
  isExternal: false
  name: UnderlyingSystemType
  nameWithType: IReflect.UnderlyingSystemType
  fullName: System.Reflection.IReflect.UnderlyingSystemType
- uid: System.Reflection.IReflect.GetField*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetField
  nameWithType: IReflect.GetField
- uid: System.Reflection.IReflect.GetFields*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetFields
  nameWithType: IReflect.GetFields
- uid: System.Reflection.IReflect.GetMember*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMember
  nameWithType: IReflect.GetMember
- uid: System.Reflection.IReflect.GetMembers*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMembers
  nameWithType: IReflect.GetMembers
- uid: System.Reflection.IReflect.GetMethod*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMethod
  nameWithType: IReflect.GetMethod
- uid: System.Reflection.IReflect.GetMethods*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMethods
  nameWithType: IReflect.GetMethods
- uid: System.Reflection.IReflect.GetProperties*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetProperties
  nameWithType: IReflect.GetProperties
- uid: System.Reflection.IReflect.GetProperty*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetProperty
  nameWithType: IReflect.GetProperty
- uid: System.Reflection.IReflect.InvokeMember*
  parent: System.Reflection.IReflect
  isExternal: false
  name: InvokeMember
  nameWithType: IReflect.InvokeMember
- uid: System.Reflection.IReflect.UnderlyingSystemType*
  parent: System.Reflection.IReflect
  isExternal: false
  name: UnderlyingSystemType
  nameWithType: IReflect.UnderlyingSystemType
