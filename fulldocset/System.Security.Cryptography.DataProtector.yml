### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.DataProtector
  id: DataProtector
  children:
  - System.Security.Cryptography.DataProtector.#ctor(System.String,System.String,System.String[])
  - System.Security.Cryptography.DataProtector.ApplicationName
  - System.Security.Cryptography.DataProtector.Create(System.String,System.String,System.String,System.String[])
  - System.Security.Cryptography.DataProtector.GetHashedPurpose
  - System.Security.Cryptography.DataProtector.IsReprotectRequired(System.Byte[])
  - System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext
  - System.Security.Cryptography.DataProtector.PrimaryPurpose
  - System.Security.Cryptography.DataProtector.Protect(System.Byte[])
  - System.Security.Cryptography.DataProtector.ProviderProtect(System.Byte[])
  - System.Security.Cryptography.DataProtector.ProviderUnprotect(System.Byte[])
  - System.Security.Cryptography.DataProtector.SpecificPurposes
  - System.Security.Cryptography.DataProtector.Unprotect(System.Byte[])
  langs:
  - csharp
  name: DataProtector
  nameWithType: DataProtector
  fullName: System.Security.Cryptography.DataProtector
  type: Class
  summary: "Udostępnia klasę podstawową dla funkcji ochrony danych."
  remarks: "This class protects stored data from viewing and tampering. The access to the protected data is obtained by creating an instance of this class and using the exact purpose strings that were used to protect the data.  The caller does not need a key to either protect or unprotect the data. The key is provided by the encryption algorithm.  \n  \n Derived classes must override the [ProviderProtect(Byte\\[\\])](assetId:///M:System.Security.Cryptography.DataProtector.ProviderProtect(System.Byte[])?qualifyHint=False&autoUpgrade=True) and <xref:System.Security.Cryptography.DataProtector.Unprotect%2A> methods, which the DataProtector base class calls back into. They must also override the <xref:System.Security.Cryptography.DataProtector.IsReprotectRequired%2A> method, which can always return `true` with a  potential small loss of efficiency when applications refresh their database of stored cipher text. Derived classes should provide a constructor that calls the base class constructor, which sets the <xref:System.Security.Cryptography.DataProtector.ApplicationName%2A>, <xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A>, and <xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A> properties."
  example:
  - "The following example demonstrates how to create a data protector that uses a protection class with an option for extra entropy. By default, the DataProtector class prepends the hash of the purpose properties to the data to be encrypted. You can turn that functionality off and use the hashed purpose as extra entropy when calling a data protector with an extra entropy option.  \n  \n [!code-cs[Cryptography.DataProtector#1](~/add/codesnippet/csharp/t-system.security.crypto_7_1.cs)]\n [!code-vb[Cryptography.DataProtector#1](~/add/codesnippet/visualbasic/t-system.security.crypto_7_1.vb)]  \n  \n The following example demonstrates a simple data protector that uses the <xref:System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext%2A> functionality of the DataProtector class.  \n  \n [!code-vb[Cryptography.MemoryProtector#1](~/add/codesnippet/visualbasic/t-system.security.crypto_7_2.vb)]\n [!code-cs[Cryptography.MemoryProtector#1](~/add/codesnippet/csharp/t-system.security.crypto_7_2.cs)]"
  syntax:
    content: public abstract class DataProtector
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.#ctor(System.String,System.String,System.String[])
  id: '#ctor(System.String,System.String,System.String[])'
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: DataProtector(String,String,String[])
  nameWithType: DataProtector.DataProtector(String,String,String[])
  fullName: System.Security.Cryptography.DataProtector.DataProtector(String,String,String[])
  type: Constructor
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "Tworzy nowe wystąpienie klasy <xref href=&quot;System.Security.Cryptography.DataProtector&quot;> </xref> przy użyciu nazwy aplikacji podane podstawowym celem i określonych celów."
  remarks: "Ten konstruktor ustawia <xref:System.Security.Cryptography.DataProtector.ApplicationName%2A>, <xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A>, i <xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A>Właściwości.</xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A> </xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A> </xref:System.Security.Cryptography.DataProtector.ApplicationName%2A> Kombinacja tych trzech właściwości musi jednoznacznie identyfikować dane, które są chronione. Jeśli dane nie jest jednoznacznie zidentyfikować, mogą przypadkowo odczytać błędnych danych lub innych danych mogą być zastępowane dla należy do Ciebie. Przykłady z par podstawowych i określonego celu są &quot;faktura&quot; i faktury numer, &quot;kart upominkowych&quot; oraz liczbę kart upominkowych, &quot;password&quot; i ciąg adresu URL."
  syntax:
    content: protected DataProtector (string applicationName, string primaryPurpose, string[] specificPurposes);
    parameters:
    - id: applicationName
      type: System.String
      description: "Nazwa aplikacji."
    - id: primaryPurpose
      type: System.String
      description: "Głównym celem chronionych danych. Aby uzyskać dodatkowe istotne informacje, zobacz uwagi."
    - id: specificPurposes
      type: System.String[]
      description: "Określonych celów chronionych danych. Aby uzyskać dodatkowe istotne informacje, zobacz uwagi."
  overload: System.Security.Cryptography.DataProtector.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>applicationName</code>jest to pusty ciąg lub <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.       - lub - <code>primaryPurpose</code> jest ciągiem pustym lub <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.       - lub - <code>specificPurposes</code> zawiera pusty ciąg lub <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.ApplicationName
  id: ApplicationName
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: ApplicationName
  nameWithType: DataProtector.ApplicationName
  fullName: System.Security.Cryptography.DataProtector.ApplicationName
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "Pobiera nazwę aplikacji."
  syntax:
    content: protected string ApplicationName { get; }
    return:
      type: System.String
      description: "Nazwa aplikacji."
  overload: System.Security.Cryptography.DataProtector.ApplicationName*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.Create(System.String,System.String,System.String,System.String[])
  id: Create(System.String,System.String,System.String,System.String[])
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: Create(String,String,String,String[])
  nameWithType: DataProtector.Create(String,String,String,String[])
  fullName: System.Security.Cryptography.DataProtector.Create(String,String,String,String[])
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "Tworzy wystąpienie implementacji funkcji ochrony danych przy użyciu nazwy określonej klasy funkcji ochrony danych, nazwę aplikacji, głównym celem i określonych celów."
  syntax:
    content: public static System.Security.Cryptography.DataProtector Create (string providerClass, string applicationName, string primaryPurpose, string[] specificPurposes);
    parameters:
    - id: providerClass
      type: System.String
      description: "Nazwa klasy funkcji ochrony danych."
    - id: applicationName
      type: System.String
      description: "Nazwa aplikacji."
    - id: primaryPurpose
      type: System.String
      description: "Głównym celem chronionych danych."
    - id: specificPurposes
      type: System.String[]
      description: "Określonych celów chronionych danych."
    return:
      type: System.Security.Cryptography.DataProtector
      description: "Obiekt implementacji funkcji ochrony danych."
  overload: System.Security.Cryptography.DataProtector.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>providerClass</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.GetHashedPurpose
  id: GetHashedPurpose
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: GetHashedPurpose()
  nameWithType: DataProtector.GetHashedPurpose()
  fullName: System.Security.Cryptography.DataProtector.GetHashedPurpose()
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "Tworzy skrót wartości właściwości określonej przez konstruktora."
  remarks: "GetHashedPurpose oblicza skrót nazwę aplikacji i Pełna cel.  Pełna celem jest złączeniem wszystkich <xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A>i <xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A>Właściwości.</xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A> </xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A>  Każdego z trzech części jest poprzedzone znakiem jego długość, skrót można wycofać."
  example:
  - "The following example shows how to use the GetHashedPurpose method to hash the purpose properties for use as extra entropy.  It is part of a larger code example for the <xref:System.Security.Cryptography.DataProtector> class.  \n  \n [!code-cs[Cryptography.DataProtector#3](~/add/codesnippet/csharp/m-system.security.crypto_107_1.cs)]\n [!code-vb[Cryptography.DataProtector#3](~/add/codesnippet/visualbasic/m-system.security.crypto_107_1.vb)]"
  syntax:
    content: protected virtual byte[] GetHashedPurpose ();
    parameters: []
    return:
      type: System.Byte[]
      description: "Tablica bajtów, które zawierają skrót <> </> *>, <> </> *>, i <xref:System.Security.Cryptography.DataProtector.SpecificPurposes*>Właściwości.</xref:System.Security.Cryptography.DataProtector.SpecificPurposes*>"
  overload: System.Security.Cryptography.DataProtector.GetHashedPurpose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.IsReprotectRequired(System.Byte[])
  id: IsReprotectRequired(System.Byte[])
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: IsReprotectRequired(Byte[])
  nameWithType: DataProtector.IsReprotectRequired(Byte[])
  fullName: System.Security.Cryptography.DataProtector.IsReprotectRequired(Byte[])
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "Określa, czy ponownego szyfrowania jest wymagany dla określonych danych zaszyfrowanych."
  syntax:
    content: public abstract bool IsReprotectRequired (byte[] encryptedData);
    parameters:
    - id: encryptedData
      type: System.Byte[]
      description: "Zaszyfrowane dane, które ma zostać obliczone."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli dane muszą być ponownie szyfrowane; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.DataProtector.IsReprotectRequired*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext
  id: PrependHashedPurposeToPlaintext
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: PrependHashedPurposeToPlaintext
  nameWithType: DataProtector.PrependHashedPurposeToPlaintext
  fullName: System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "Określa, czy skrót dołączany na początku tablicy tekst przed szyfrowania."
  remarks: "Domyślnie zakłada się, że klas pochodnych będzie dołączenie wartości skrótu <xref:System.Security.Cryptography.DataProtector.ApplicationName%2A>, <xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A>, i <xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A>Właściwości na zwykły tekst przed zaszyfrowaniem i będzie Sprawdź i zweryfikował skrótu podczas odszyfrowywania.</xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A> </xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A> </xref:System.Security.Cryptography.DataProtector.ApplicationName%2A>  Jeśli klasa pochodna chce Określ prepended dane samodzielnie (na przykład jako wartość opcjonalna entropii), tej właściwości można zastąpić i wartość do zwrócenia `false`.  Jeśli jest PrependHashedPurposeToPlaintext `false`, <xref:System.Security.Cryptography.DataProtector.Protect%2A>i <xref:System.Security.Cryptography.DataProtector.Unprotect%2A>bezpośrednio za pomocą przekazuje do <xref:System.Security.Cryptography.DataProtector.ProviderProtect%2A>i <xref:System.Security.Cryptography.DataProtector.ProviderUnprotect%2A>zastępuje bez zmiany tablicy bajtów.</xref:System.Security.Cryptography.DataProtector.ProviderUnprotect%2A> </xref:System.Security.Cryptography.DataProtector.ProviderProtect%2A> </xref:System.Security.Cryptography.DataProtector.Unprotect%2A> </xref:System.Security.Cryptography.DataProtector.Protect%2A>"
  syntax:
    content: protected virtual bool PrependHashedPurposeToPlaintext { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.PrimaryPurpose
  id: PrimaryPurpose
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: PrimaryPurpose
  nameWithType: DataProtector.PrimaryPurpose
  fullName: System.Security.Cryptography.DataProtector.PrimaryPurpose
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "Pobiera podstawowym celem chronionych danych."
  syntax:
    content: protected string PrimaryPurpose { get; }
    return:
      type: System.String
      description: "Głównym celem chronionych danych."
  overload: System.Security.Cryptography.DataProtector.PrimaryPurpose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.Protect(System.Byte[])
  id: Protect(System.Byte[])
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: Protect(Byte[])
  nameWithType: DataProtector.Protect(Byte[])
  fullName: System.Security.Cryptography.DataProtector.Protect(Byte[])
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "Chroni dane określonego użytkownika."
  syntax:
    content: public byte[] Protect (byte[] userData);
    parameters:
    - id: userData
      type: System.Byte[]
      description: "Dane, które mają być chronione."
    return:
      type: System.Byte[]
      description: "Tablica bajtów, który zawiera dane zaszyfrowane."
  overload: System.Security.Cryptography.DataProtector.Protect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>userData</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.ProviderProtect(System.Byte[])
  id: ProviderProtect(System.Byte[])
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: ProviderProtect(Byte[])
  nameWithType: DataProtector.ProviderProtect(Byte[])
  fullName: System.Security.Cryptography.DataProtector.ProviderProtect(Byte[])
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "Określa metodę delegata w pochodnej klasy, która <xref:System.Security.Cryptography.DataProtector.Protect*>metody w klasie podstawowej ponownie wywołuje.</xref:System.Security.Cryptography.DataProtector.Protect*>"
  remarks: ''
  example:
  - "The following example shows an implementation of the ProviderProtect method.  It is part of a larger code example for the <xref:System.Security.Cryptography.DataProtector> class.  \n  \n [!code-vb[Cryptography.MemoryProtector#3](~/add/codesnippet/visualbasic/m-system.security.crypto_130_1.vb)]\n [!code-cs[Cryptography.MemoryProtector#3](~/add/codesnippet/csharp/m-system.security.crypto_130_1.cs)]"
  syntax:
    content: protected abstract byte[] ProviderProtect (byte[] userData);
    parameters:
    - id: userData
      type: System.Byte[]
      description: "Do szyfrowania danych."
    return:
      type: System.Byte[]
      description: "Tablica bajtów, który zawiera dane zaszyfrowane."
  overload: System.Security.Cryptography.DataProtector.ProviderProtect*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.ProviderUnprotect(System.Byte[])
  id: ProviderUnprotect(System.Byte[])
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: ProviderUnprotect(Byte[])
  nameWithType: DataProtector.ProviderUnprotect(Byte[])
  fullName: System.Security.Cryptography.DataProtector.ProviderUnprotect(Byte[])
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "Określa metodę delegata w pochodnej klasy, która <xref:System.Security.Cryptography.DataProtector.Unprotect*>metody w klasie podstawowej ponownie wywołuje.</xref:System.Security.Cryptography.DataProtector.Unprotect*>"
  remarks: ''
  example:
  - "The following example shows an implementation of the ProviderUnprotect method.  It is part of a larger code example for the <xref:System.Security.Cryptography.DataProtector> class.  \n  \n [!code-vb[Cryptography.MemoryProtector#4](~/add/codesnippet/visualbasic/m-system.security.crypto_20_1.vb)]\n [!code-cs[Cryptography.MemoryProtector#4](~/add/codesnippet/csharp/m-system.security.crypto_20_1.cs)]"
  syntax:
    content: protected abstract byte[] ProviderUnprotect (byte[] encryptedData);
    parameters:
    - id: encryptedData
      type: System.Byte[]
      description: "Dane niezaszyfrowane."
    return:
      type: System.Byte[]
      description: "Niezaszyfrowane dane."
  overload: System.Security.Cryptography.DataProtector.ProviderUnprotect*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.SpecificPurposes
  id: SpecificPurposes
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: SpecificPurposes
  nameWithType: DataProtector.SpecificPurposes
  fullName: System.Security.Cryptography.DataProtector.SpecificPurposes
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "Pobiera określonych celów chronionych danych."
  syntax:
    content: protected System.Collections.Generic.IEnumerable<string> SpecificPurposes { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "Kolekcja określonych celów chronionych danych."
  overload: System.Security.Cryptography.DataProtector.SpecificPurposes*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.Unprotect(System.Byte[])
  id: Unprotect(System.Byte[])
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: Unprotect(Byte[])
  nameWithType: DataProtector.Unprotect(Byte[])
  fullName: System.Security.Cryptography.DataProtector.Unprotect(Byte[])
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "Wyłącza ochronę określonych danych chronionych."
  syntax:
    content: public byte[] Unprotect (byte[] encryptedData);
    parameters:
    - id: encryptedData
      type: System.Byte[]
      description: "Zaszyfrowane dane do usunięcia ochrony."
    return:
      type: System.Byte[]
      description: "Tablica bajtów z danymi w formacie zwykłego tekstu."
  overload: System.Security.Cryptography.DataProtector.Unprotect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>encryptedData</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "<code>encryptedData</code>zawiera nieprawidłowy cel."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.Security.Cryptography.DataProtector.#ctor(System.String,System.String,System.String[])
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: DataProtector(String,String,String[])
  nameWithType: DataProtector.DataProtector(String,String,String[])
  fullName: System.Security.Cryptography.DataProtector.DataProtector(String,String,String[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.DataProtector.ApplicationName
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: ApplicationName
  nameWithType: DataProtector.ApplicationName
  fullName: System.Security.Cryptography.DataProtector.ApplicationName
- uid: System.Security.Cryptography.DataProtector.Create(System.String,System.String,System.String,System.String[])
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: Create(String,String,String,String[])
  nameWithType: DataProtector.Create(String,String,String,String[])
  fullName: System.Security.Cryptography.DataProtector.Create(String,String,String,String[])
- uid: System.Security.Cryptography.DataProtector
  parent: System.Security.Cryptography
  isExternal: false
  name: DataProtector
  nameWithType: DataProtector
  fullName: System.Security.Cryptography.DataProtector
- uid: System.Security.Cryptography.DataProtector.GetHashedPurpose
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: GetHashedPurpose()
  nameWithType: DataProtector.GetHashedPurpose()
  fullName: System.Security.Cryptography.DataProtector.GetHashedPurpose()
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.DataProtector.IsReprotectRequired(System.Byte[])
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: IsReprotectRequired(Byte[])
  nameWithType: DataProtector.IsReprotectRequired(Byte[])
  fullName: System.Security.Cryptography.DataProtector.IsReprotectRequired(Byte[])
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: PrependHashedPurposeToPlaintext
  nameWithType: DataProtector.PrependHashedPurposeToPlaintext
  fullName: System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext
- uid: System.Security.Cryptography.DataProtector.PrimaryPurpose
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: PrimaryPurpose
  nameWithType: DataProtector.PrimaryPurpose
  fullName: System.Security.Cryptography.DataProtector.PrimaryPurpose
- uid: System.Security.Cryptography.DataProtector.Protect(System.Byte[])
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: Protect(Byte[])
  nameWithType: DataProtector.Protect(Byte[])
  fullName: System.Security.Cryptography.DataProtector.Protect(Byte[])
- uid: System.Security.Cryptography.DataProtector.ProviderProtect(System.Byte[])
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: ProviderProtect(Byte[])
  nameWithType: DataProtector.ProviderProtect(Byte[])
  fullName: System.Security.Cryptography.DataProtector.ProviderProtect(Byte[])
- uid: System.Security.Cryptography.DataProtector.ProviderUnprotect(System.Byte[])
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: ProviderUnprotect(Byte[])
  nameWithType: DataProtector.ProviderUnprotect(Byte[])
  fullName: System.Security.Cryptography.DataProtector.ProviderUnprotect(Byte[])
- uid: System.Security.Cryptography.DataProtector.SpecificPurposes
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: SpecificPurposes
  nameWithType: DataProtector.SpecificPurposes
  fullName: System.Security.Cryptography.DataProtector.SpecificPurposes
- uid: System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Cryptography.DataProtector.Unprotect(System.Byte[])
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: Unprotect(Byte[])
  nameWithType: DataProtector.Unprotect(Byte[])
  fullName: System.Security.Cryptography.DataProtector.Unprotect(Byte[])
- uid: System.Security.Cryptography.DataProtector.#ctor*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: DataProtector
  nameWithType: DataProtector.DataProtector
- uid: System.Security.Cryptography.DataProtector.ApplicationName*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: ApplicationName
  nameWithType: DataProtector.ApplicationName
- uid: System.Security.Cryptography.DataProtector.Create*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: Create
  nameWithType: DataProtector.Create
- uid: System.Security.Cryptography.DataProtector.GetHashedPurpose*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: GetHashedPurpose
  nameWithType: DataProtector.GetHashedPurpose
- uid: System.Security.Cryptography.DataProtector.IsReprotectRequired*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: IsReprotectRequired
  nameWithType: DataProtector.IsReprotectRequired
- uid: System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: PrependHashedPurposeToPlaintext
  nameWithType: DataProtector.PrependHashedPurposeToPlaintext
- uid: System.Security.Cryptography.DataProtector.PrimaryPurpose*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: PrimaryPurpose
  nameWithType: DataProtector.PrimaryPurpose
- uid: System.Security.Cryptography.DataProtector.Protect*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: Protect
  nameWithType: DataProtector.Protect
- uid: System.Security.Cryptography.DataProtector.ProviderProtect*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: ProviderProtect
  nameWithType: DataProtector.ProviderProtect
- uid: System.Security.Cryptography.DataProtector.ProviderUnprotect*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: ProviderUnprotect
  nameWithType: DataProtector.ProviderUnprotect
- uid: System.Security.Cryptography.DataProtector.SpecificPurposes*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: SpecificPurposes
  nameWithType: DataProtector.SpecificPurposes
- uid: System.Security.Cryptography.DataProtector.Unprotect*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: Unprotect
  nameWithType: DataProtector.Unprotect
