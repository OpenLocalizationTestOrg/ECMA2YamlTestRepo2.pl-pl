### YamlMime:ManagedReference
items:
- uid: System.Web.Hosting.ApplicationManager
  id: ApplicationManager
  children:
  - System.Web.Hosting.ApplicationManager.Close
  - System.Web.Hosting.ApplicationManager.CreateObject(System.Web.Hosting.IApplicationHost,System.Type)
  - System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean)
  - System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean,System.Boolean)
  - System.Web.Hosting.ApplicationManager.GetAppDomain(System.String)
  - System.Web.Hosting.ApplicationManager.GetAppDomain(System.Web.Hosting.IApplicationHost)
  - System.Web.Hosting.ApplicationManager.GetApplicationManager
  - System.Web.Hosting.ApplicationManager.GetObject(System.String,System.Type)
  - System.Web.Hosting.ApplicationManager.GetRunningApplications
  - System.Web.Hosting.ApplicationManager.InitializeLifetimeService
  - System.Web.Hosting.ApplicationManager.IsIdle
  - System.Web.Hosting.ApplicationManager.Open
  - System.Web.Hosting.ApplicationManager.ShutdownAll
  - System.Web.Hosting.ApplicationManager.ShutdownApplication(System.String)
  - System.Web.Hosting.ApplicationManager.StopObject(System.String,System.Type)
  langs:
  - csharp
  name: ApplicationManager
  nameWithType: ApplicationManager
  fullName: System.Web.Hosting.ApplicationManager
  type: Class
  summary: "Zarządza domen aplikacji platformy ASP.NET dla platformy ASP.NET hosting aplikacji."
  remarks: "Obiekt ApplicationManager zapewnia zarządzanie okresem istnienia obiektów w środowisku macierzystym dla aplikacji ASP.NET. Jest on odpowiedzialny za: - aktywowanie i inicjowania aplikacji ASP.NET.      -Zarządzanie okresem istnienia aplikacji i okres istnienia obiektów zarejestrowany w aplikacji.      -Udostępnianie obiektów używanych przez środowisko macierzyste do przetwarzania żądań aplikacji ASP.NET.      -Udostępnianie listę aplikacji uruchomionych w procesie hostingu w danym momencie."
  syntax:
    content: 'public sealed class ApplicationManager : MarshalByRefObject'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements: []
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Web.Hosting.ApplicationManager.Close
  id: Close
  parent: System.Web.Hosting.ApplicationManager
  langs:
  - csharp
  name: Close()
  nameWithType: ApplicationManager.Close()
  fullName: System.Web.Hosting.ApplicationManager.Close()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Zamyka wszystkie domeny aplikacji."
  remarks: "Jeśli wywołanie metody Close zmniejsza liczbę odwołania aplikacji za pomocą Menedżera aplikacji 0, wywołuje metody Close <xref:System.Web.Hosting.ApplicationManager.ShutdownAll%2A>metody.</xref:System.Web.Hosting.ApplicationManager.ShutdownAll%2A>"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Web.Hosting.ApplicationManager.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.ApplicationManager.CreateObject(System.Web.Hosting.IApplicationHost,System.Type)
  id: CreateObject(System.Web.Hosting.IApplicationHost,System.Type)
  parent: System.Web.Hosting.ApplicationManager
  langs:
  - csharp
  name: CreateObject(IApplicationHost,Type)
  nameWithType: ApplicationManager.CreateObject(IApplicationHost,Type)
  fullName: System.Web.Hosting.ApplicationManager.CreateObject(IApplicationHost,Type)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Tworzy obiekt do domeny określonej aplikacji, na podstawie typu."
  remarks: "CreateObject wprowadzono w programie .NET Framework w wersji 3.5.  Aby uzyskać więcej informacji, zobacz [wersje i zależności](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Web.Hosting.IRegisteredObject CreateObject (System.Web.Hosting.IApplicationHost appHost, Type type);
    parameters:
    - id: appHost
      type: System.Web.Hosting.IApplicationHost
      description: "<xref href=&quot;System.Web.Hosting.IApplicationHost&quot;> </xref> Obiektu."
    - id: type
      type: System.Type
      description: "Typ obiektu do utworzenia."
    return:
      type: System.Web.Hosting.IRegisteredObject
      description: "Nowy obiekt typu określonego w <code> type </code>."
  overload: System.Web.Hosting.ApplicationManager.CreateObject*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Ścieżka fizyczna aplikacji nie istnieje."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>appHost</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>type</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  platform:
  - net462
- uid: System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean)
  id: CreateObject(System.String,System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.Hosting.ApplicationManager
  langs:
  - csharp
  name: CreateObject(String,Type,String,String,Boolean)
  nameWithType: ApplicationManager.CreateObject(String,Type,String,String,Boolean)
  fullName: System.Web.Hosting.ApplicationManager.CreateObject(String,Type,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Tworzy obiekt do domeny określonej aplikacji na podstawie typu, ścieżki wirtualne i fizyczne i wartość logiczną wskazującą zachowanie awarii, gdy istnieje już obiekt określonego typu."
  remarks: "CreateObject — Metoda służy do tworzenia i zarejestrować obiektów w aplikacji. Można utworzyć tylko jeden obiekt każdego typu. Jeśli trzeba utworzyć wiele obiektów tego samego typu, musi implementować fabryka obiektu. Aby uzyskać więcej informacji zobacz przykład kodu, w tym temacie.       Każda aplikacja, identyfikowany przez identyfikator unikatowy aplikacji działa w domenie aplikacji. CreateObject — Metoda tworzy obiekt określonego typu w domenie aplikacji określonego w aplikacji `appID` parametru. Jeśli domena aplikacji nie istnieje dla określonej aplikacji, utworzono przed utworzeniem obiektu.       `failIfExists` Parametr steruje zachowaniem CreateObject metody, gdy istnieje już obiekt określonego typu w aplikacji. Gdy `failIfExists` jest `true`, Metoda CreateObject zgłasza <xref:System.InvalidOperationException>wyjątek.</xref:System.InvalidOperationException>       Gdy `failIfExists` jest `false`, CreateObject — Metoda zwraca istniejącego zarejestrowanego obiektu określonego typu.       CreateObject — Metoda wywołuje przeciążenia, które przyjmuje dodatkowych `throwOnError` parametr o `throwOnError` ustawioną `false`."
  example:
  - "The following code example is an implementation of the object-factory design pattern for registered objects. Using the factory pattern enables you to register multiple instances of an object. The example contains two objects: `SampleComponent`, which is the object the application will use multiple instances of, and `SampleComponentFactory`, which manages a list of `SampleComponent` instances.  \n  \n [!code-cs[System.Web.Hosting.ApplicationManager#1](~/add/codesnippet/csharp/37d6d853-1462-44e9-b1c3-_1.cs)]\n [!code-vb[System.Web.Hosting.ApplicationManager#1](~/add/codesnippet/visualbasic/37d6d853-1462-44e9-b1c3-_1.vb)]"
  syntax:
    content: public System.Web.Hosting.IRegisteredObject CreateObject (string appId, Type type, string virtualPath, string physicalPath, bool failIfExists);
    parameters:
    - id: appId
      type: System.String
      description: "Unikatowy identyfikator dla aplikacji, która jest właścicielem obiektu."
    - id: type
      type: System.Type
      description: "Typ obiektu do utworzenia."
    - id: virtualPath
      type: System.String
      description: "Ścieżka wirtualna do aplikacji."
    - id: physicalPath
      type: System.String
      description: "Ścieżka fizyczna do aplikacji."
    - id: failIfExists
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby zgłosić wyjątek, jeśli obiekt określonego typu nie jest obecnie zarejestrowany; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> do zwrócenia istniejącego zarejestrowanego obiektu określonego typu."
    return:
      type: System.Web.Hosting.IRegisteredObject
      description: "Nowy obiekt z określonym <code> type </code>."
  overload: System.Web.Hosting.ApplicationManager.CreateObject*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>physicalPath</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>  \n  \n \\- or -  \n  \n <code>physicalPath</code> is not a valid application path.  \n  \n \\- or -  \n  \n <code>type</code> does not implement the <xref href=\"System.Web.Hosting.IRegisteredObject\"></xref> interface."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>appID</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>type</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>failIfExists</code>jest <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> i określonego typu obiektu jest już zarejestrowany."
  platform:
  - net462
- uid: System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean,System.Boolean)
  id: CreateObject(System.String,System.Type,System.String,System.String,System.Boolean,System.Boolean)
  parent: System.Web.Hosting.ApplicationManager
  langs:
  - csharp
  name: CreateObject(String,Type,String,String,Boolean,Boolean)
  nameWithType: ApplicationManager.CreateObject(String,Type,String,String,Boolean,Boolean)
  fullName: System.Web.Hosting.ApplicationManager.CreateObject(String,Type,String,String,Boolean,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Tworzy obiekt do domeny określonej aplikacji oparte na typ, ścieżki wirtualnej i fizycznej, wartość logiczną wskazującą zachowanie awarii, gdy istnieje już obiekt o określonym typie i wartość logiczną wskazującą, czy są zgłaszane hostingu wyjątki błąd inicjowania."
  remarks: "To przeciążenie metody <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A>metoda zapewnia `throwOnError` parametr, który umożliwia kontrolowanie, czy są zgłaszane wyjątki inicjowania obsługi.</xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> Przeciążenia <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A>metodę, która nie zapewnia `throwOnError` wywołuje tego przeciążenia z parametrem ustawioną `false`.</xref:System.Web.Hosting.ApplicationManager.CreateObject%2A>"
  syntax:
    content: public System.Web.Hosting.IRegisteredObject CreateObject (string appId, Type type, string virtualPath, string physicalPath, bool failIfExists, bool throwOnError);
    parameters:
    - id: appId
      type: System.String
      description: "Unikatowy identyfikator dla aplikacji, która jest właścicielem obiektu."
    - id: type
      type: System.Type
      description: "Typ obiektu do utworzenia."
    - id: virtualPath
      type: System.String
      description: "Ścieżka wirtualna do aplikacji."
    - id: physicalPath
      type: System.String
      description: "Ścieżka fizyczna do aplikacji."
    - id: failIfExists
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby zgłosić wyjątek, jeśli obiekt określonego typu nie jest obecnie zarejestrowany; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> do zwrócenia istniejącego zarejestrowanego obiektu określonego typu."
    - id: throwOnError
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby zgłaszają wyjątki hostingu błędy inicjowania; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> do nie zgłosi wyjątku inicjowania wyjątki hostingu."
    return:
      type: System.Web.Hosting.IRegisteredObject
      description: "Nowy obiekt z określonym <code> type </code>."
  overload: System.Web.Hosting.ApplicationManager.CreateObject*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>physicalPath</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>  \n  \n \\- or -  \n  \n <code>physicalPath</code> is not a valid application path.  \n  \n \\- or -  \n  \n <code>type</code> does not implement the <xref href=\"System.Web.Hosting.IRegisteredObject\"></xref> interface."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>appID</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>type</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>failIfExists</code>jest <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> i określonego typu obiektu jest już zarejestrowany."
  platform:
  - net462
- uid: System.Web.Hosting.ApplicationManager.GetAppDomain(System.String)
  id: GetAppDomain(System.String)
  parent: System.Web.Hosting.ApplicationManager
  langs:
  - csharp
  name: GetAppDomain(String)
  nameWithType: ApplicationManager.GetAppDomain(String)
  fullName: System.Web.Hosting.ApplicationManager.GetAppDomain(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Pobiera domeny aplikacji w określonej aplikacji."
  syntax:
    content: public AppDomain GetAppDomain (string appId);
    parameters:
    - id: appId
      type: System.String
      description: "Unikatowy identyfikator dla aplikacji."
    return:
      type: System.AppDomain
      description: "Domena aplikacji w aplikacji."
  overload: System.Web.Hosting.ApplicationManager.GetAppDomain*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.ApplicationManager.GetAppDomain(System.Web.Hosting.IApplicationHost)
  id: GetAppDomain(System.Web.Hosting.IApplicationHost)
  parent: System.Web.Hosting.ApplicationManager
  langs:
  - csharp
  name: GetAppDomain(IApplicationHost)
  nameWithType: ApplicationManager.GetAppDomain(IApplicationHost)
  fullName: System.Web.Hosting.ApplicationManager.GetAppDomain(IApplicationHost)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Pobiera domeny aplikacji w aplikacji przy użyciu określonego hosta."
  syntax:
    content: public AppDomain GetAppDomain (System.Web.Hosting.IApplicationHost appHost);
    parameters:
    - id: appHost
      type: System.Web.Hosting.IApplicationHost
      description: "Host, który można uzyskać w domenie aplikacji."
    return:
      type: System.AppDomain
      description: "Domena aplikacji w aplikacji."
  overload: System.Web.Hosting.ApplicationManager.GetAppDomain*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.ApplicationManager.GetApplicationManager
  id: GetApplicationManager
  parent: System.Web.Hosting.ApplicationManager
  langs:
  - csharp
  name: GetApplicationManager()
  nameWithType: ApplicationManager.GetApplicationManager()
  fullName: System.Web.Hosting.ApplicationManager.GetApplicationManager()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Zwraca pojedyncze wystąpienie <xref href=&quot;System.Web.Hosting.ApplicationManager&quot;> </xref> obiekt skojarzony z tym procesem hosta platformy ASP.NET."
  remarks: "Tylko jedno wystąpienie <xref:System.Web.Hosting.ApplicationManager>obiekt jest tworzony przez proces hosta platformy ASP.NET w domyślnej domeny aplikacji.</xref:System.Web.Hosting.ApplicationManager> Jeśli wystąpienie <xref:System.Web.Hosting.ApplicationManager>klasy nie jest dostępna, metoda GetApplicationManager najpierw tworzy wystąpienie <xref:System.Web.Hosting.ApplicationManager>klasy, a następnie zwraca nowo utworzony obiekt.</xref:System.Web.Hosting.ApplicationManager> </xref:System.Web.Hosting.ApplicationManager> Jeśli wystąpienie <xref:System.Web.Hosting.ApplicationManager>klasa została wcześniej utworzona, metoda GetApplicationManager zwraca obiekt istniejący.</xref:System.Web.Hosting.ApplicationManager>"
  example:
  - "The following code example uses the GetApplicationManager method to retrieve the <xref:System.Web.Hosting.ApplicationManager> instance for a Web application.  \n  \n [!code-vb[System.Web.Hosting.ApplicationInfo#1](~/add/codesnippet/visualbasic/m-system.web.hosting.app_0_1.aspx)]\n [!code-cs[System.Web.Hosting.ApplicationInfo#1](~/add/codesnippet/csharp/m-system.web.hosting.app_0_1.aspx)]"
  syntax:
    content: public static System.Web.Hosting.ApplicationManager GetApplicationManager ();
    parameters: []
    return:
      type: System.Web.Hosting.ApplicationManager
      description: "Pojedyncze wystąpienie <xref href=&quot;System.Web.Hosting.ApplicationManager&quot;> </xref> obiekt skojarzony z procesem hosta platformy ASP.NET, który jest uruchomiony."
  overload: System.Web.Hosting.ApplicationManager.GetApplicationManager*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.ApplicationManager.GetObject(System.String,System.Type)
  id: GetObject(System.String,System.Type)
  parent: System.Web.Hosting.ApplicationManager
  langs:
  - csharp
  name: GetObject(String,Type)
  nameWithType: ApplicationManager.GetObject(String,Type)
  fullName: System.Web.Hosting.ApplicationManager.GetObject(String,Type)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Zwraca zarejestrowanego obiektu określonego typu z określonej aplikacji."
  syntax:
    content: public System.Web.Hosting.IRegisteredObject GetObject (string appId, Type type);
    parameters:
    - id: appId
      type: System.String
      description: "Unikatowy identyfikator dla aplikacji, która jest właścicielem obiektu."
    - id: type
      type: System.Type
      description: "Typ obiektu do zwrócenia."
    return:
      type: System.Web.Hosting.IRegisteredObject
      description: "Zarejestrowany obiekt określonego typu; lub <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> czy typ nie został zarejestrowany za pośrednictwem wywołania <xref:System.Web.Hosting.ApplicationManager.CreateObject*>metody.</xref:System.Web.Hosting.ApplicationManager.CreateObject*>"
  overload: System.Web.Hosting.ApplicationManager.GetObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>appId</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       —or—       <code>type</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Hosting.ApplicationManager.GetRunningApplications
  id: GetRunningApplications
  parent: System.Web.Hosting.ApplicationManager
  langs:
  - csharp
  name: GetRunningApplications()
  nameWithType: ApplicationManager.GetRunningApplications()
  fullName: System.Web.Hosting.ApplicationManager.GetRunningApplications()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Zwraca migawki uruchomionych aplikacji."
  remarks: ''
  example:
  - "The following code example uses the GetRunningApplications method to display information about the applications managed by an <xref:System.Web.Hosting.ApplicationManager> instance.  \n  \n [!code-vb[System.Web.Hosting.ApplicationInfo#1](~/add/codesnippet/visualbasic/m-system.web.hosting.app_1_1.aspx)]\n [!code-cs[System.Web.Hosting.ApplicationInfo#1](~/add/codesnippet/csharp/m-system.web.hosting.app_1_1.aspx)]"
  syntax:
    content: public System.Web.Hosting.ApplicationInfo[] GetRunningApplications ();
    parameters: []
    return:
      type: System.Web.Hosting.ApplicationInfo[]
      description: "Tablica <xref href=&quot;System.Web.Hosting.ApplicationInfo&quot;> </xref> obiektów, które zawierają informacje o aplikacjach zarządzanych przez to <xref href=&quot;System.Web.Hosting.ApplicationManager&quot;> </xref> wystąpienia."
  overload: System.Web.Hosting.ApplicationManager.GetRunningApplications*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.ApplicationManager.InitializeLifetimeService
  id: InitializeLifetimeService
  parent: System.Web.Hosting.ApplicationManager
  langs:
  - csharp
  name: InitializeLifetimeService()
  nameWithType: ApplicationManager.InitializeLifetimeService()
  fullName: System.Web.Hosting.ApplicationManager.InitializeLifetimeService()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Zapewnia domeny aplikacji bez ograniczeń czasowych okres istnienia, zapobiegając tworzona dzierżawy."
  remarks: "Ta metoda zastępuje <xref:System.MarshalByRefObject.InitializeLifetimeService%2A>metodę w swojej klasy podstawowej.</xref:System.MarshalByRefObject.InitializeLifetimeService%2A> Zawsze zwraca `null` i tym samym uniemożliwia dzierżawy z tworzona, która będzie ograniczona istnienia domeny aplikacji."
  syntax:
    content: public override object InitializeLifetimeService ();
    parameters: []
    return:
      type: System.Object
      description: "Always <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Hosting.ApplicationManager.InitializeLifetimeService*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.ApplicationManager.IsIdle
  id: IsIdle
  parent: System.Web.Hosting.ApplicationManager
  langs:
  - csharp
  name: IsIdle()
  nameWithType: ApplicationManager.IsIdle()
  fullName: System.Web.Hosting.ApplicationManager.IsIdle()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Zwraca wartość wskazującą, czy wszystkie aplikacje należące do procesu są w stanie bezczynności i nie przetwarza żądań."
  remarks: "Zwraca metodę IsIdle `true` Jeśli wszystkie aplikacje należące do procesu są w stanie bezczynności."
  syntax:
    content: public bool IsIdle ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli wszystkie aplikacje w procesie są w stanie bezczynności; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Hosting.ApplicationManager.IsIdle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.ApplicationManager.Open
  id: Open
  parent: System.Web.Hosting.ApplicationManager
  langs:
  - csharp
  name: Open()
  nameWithType: ApplicationManager.Open()
  fullName: System.Web.Hosting.ApplicationManager.Open()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Zgłasza przyrostu wątkowo liczebności referencyjnej użytkownika wystąpienia menedżera aplikacji."
  syntax:
    content: public void Open ();
    parameters: []
  overload: System.Web.Hosting.ApplicationManager.Open*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.ApplicationManager.ShutdownAll
  id: ShutdownAll
  parent: System.Web.Hosting.ApplicationManager
  langs:
  - csharp
  name: ShutdownAll()
  nameWithType: ApplicationManager.ShutdownAll()
  fullName: System.Web.Hosting.ApplicationManager.ShutdownAll()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Zwalnia wszystkie zasoby aplikacji."
  remarks: "Wywołanie metody ShutdownAll jest odpowiednikiem wywołania <xref:System.Web.Hosting.HostingEnvironment.InitiateShutdown%2A?displayProperty=fullName>metody we wszystkich domenach aplikacji zarządzanych przez to <xref:System.Web.Hosting.ApplicationManager>wystąpienie; jednak można wywołać metody ShutdownAll z spoza domeny aplikacji zarządzanych.</xref:System.Web.Hosting.ApplicationManager> </xref:System.Web.Hosting.HostingEnvironment.InitiateShutdown%2A?displayProperty=fullName>"
  syntax:
    content: public void ShutdownAll ();
    parameters: []
  overload: System.Web.Hosting.ApplicationManager.ShutdownAll*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.ApplicationManager.ShutdownApplication(System.String)
  id: ShutdownApplication(System.String)
  parent: System.Web.Hosting.ApplicationManager
  langs:
  - csharp
  name: ShutdownApplication(String)
  nameWithType: ApplicationManager.ShutdownApplication(String)
  fullName: System.Web.Hosting.ApplicationManager.ShutdownApplication(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Zwalnia określonej aplikacji."
  remarks: "Wywołanie metody ShutdownApplication jest odpowiednikiem wywołania <xref:System.Web.Hosting.HostingEnvironment.InitiateShutdown%2A?displayProperty=fullName>metodę dla określonej domenie aplikacji; jednak można wywołać metody ShutdownApplication z domeny zewnętrznej zarządzanych aplikacji.</xref:System.Web.Hosting.HostingEnvironment.InitiateShutdown%2A?displayProperty=fullName>"
  syntax:
    content: public void ShutdownApplication (string appId);
    parameters:
    - id: appId
      type: System.String
      description: "Unikatowy identyfikator aplikacji do zwolnienia."
  overload: System.Web.Hosting.ApplicationManager.ShutdownApplication*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>appId</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Hosting.ApplicationManager.StopObject(System.String,System.Type)
  id: StopObject(System.String,System.Type)
  parent: System.Web.Hosting.ApplicationManager
  langs:
  - csharp
  name: StopObject(String,Type)
  nameWithType: ApplicationManager.StopObject(String,Type)
  fullName: System.Web.Hosting.ApplicationManager.StopObject(String,Type)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Usuwa określony obiekt z listy zarejestrowanych obiektów w aplikacji. Jeśli obiekt do usunięcia jest ostatni obiekt pozostałe na liście zarejestrowanych obiektów w aplikacji, aplikacja nie jest załadowany."
  syntax:
    content: public void StopObject (string appId, Type type);
    parameters:
    - id: appId
      type: System.String
      description: "Unikatowy identyfikator dla aplikacji, która jest właścicielem obiektu."
    - id: type
      type: System.Type
      description: "Typ obiektu do zwolnienia."
  overload: System.Web.Hosting.ApplicationManager.StopObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>appId</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>type</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Web.Hosting.ApplicationManager.Close
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: Close()
  nameWithType: ApplicationManager.Close()
  fullName: System.Web.Hosting.ApplicationManager.Close()
- uid: System.Web.Hosting.ApplicationManager.CreateObject(System.Web.Hosting.IApplicationHost,System.Type)
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: CreateObject(IApplicationHost,Type)
  nameWithType: ApplicationManager.CreateObject(IApplicationHost,Type)
  fullName: System.Web.Hosting.ApplicationManager.CreateObject(IApplicationHost,Type)
- uid: System.Web.Hosting.IRegisteredObject
  parent: System.Web.Hosting
  isExternal: false
  name: IRegisteredObject
  nameWithType: IRegisteredObject
  fullName: System.Web.Hosting.IRegisteredObject
- uid: System.Web.Hosting.IApplicationHost
  parent: System.Web.Hosting
  isExternal: false
  name: IApplicationHost
  nameWithType: IApplicationHost
  fullName: System.Web.Hosting.IApplicationHost
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: CreateObject(String,Type,String,String,Boolean)
  nameWithType: ApplicationManager.CreateObject(String,Type,String,String,Boolean)
  fullName: System.Web.Hosting.ApplicationManager.CreateObject(String,Type,String,String,Boolean)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean,System.Boolean)
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: CreateObject(String,Type,String,String,Boolean,Boolean)
  nameWithType: ApplicationManager.CreateObject(String,Type,String,String,Boolean,Boolean)
  fullName: System.Web.Hosting.ApplicationManager.CreateObject(String,Type,String,String,Boolean,Boolean)
- uid: System.Web.Hosting.ApplicationManager.GetAppDomain(System.String)
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: GetAppDomain(String)
  nameWithType: ApplicationManager.GetAppDomain(String)
  fullName: System.Web.Hosting.ApplicationManager.GetAppDomain(String)
- uid: System.AppDomain
  parent: System
  isExternal: false
  name: AppDomain
  nameWithType: AppDomain
  fullName: System.AppDomain
- uid: System.Web.Hosting.ApplicationManager.GetAppDomain(System.Web.Hosting.IApplicationHost)
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: GetAppDomain(IApplicationHost)
  nameWithType: ApplicationManager.GetAppDomain(IApplicationHost)
  fullName: System.Web.Hosting.ApplicationManager.GetAppDomain(IApplicationHost)
- uid: System.Web.Hosting.ApplicationManager.GetApplicationManager
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: GetApplicationManager()
  nameWithType: ApplicationManager.GetApplicationManager()
  fullName: System.Web.Hosting.ApplicationManager.GetApplicationManager()
- uid: System.Web.Hosting.ApplicationManager
  parent: System.Web.Hosting
  isExternal: false
  name: ApplicationManager
  nameWithType: ApplicationManager
  fullName: System.Web.Hosting.ApplicationManager
- uid: System.Web.Hosting.ApplicationManager.GetObject(System.String,System.Type)
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: GetObject(String,Type)
  nameWithType: ApplicationManager.GetObject(String,Type)
  fullName: System.Web.Hosting.ApplicationManager.GetObject(String,Type)
- uid: System.Web.Hosting.ApplicationManager.GetRunningApplications
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: GetRunningApplications()
  nameWithType: ApplicationManager.GetRunningApplications()
  fullName: System.Web.Hosting.ApplicationManager.GetRunningApplications()
- uid: System.Web.Hosting.ApplicationInfo[]
  parent: System.Web.Hosting
  isExternal: false
  name: ApplicationInfo
  nameWithType: ApplicationInfo
  fullName: System.Web.Hosting.ApplicationInfo[]
  spec.csharp:
  - uid: System.Web.Hosting.ApplicationInfo
    name: ApplicationInfo
    nameWithType: ApplicationInfo
    fullName: ApplicationInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.Hosting.ApplicationManager.InitializeLifetimeService
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: InitializeLifetimeService()
  nameWithType: ApplicationManager.InitializeLifetimeService()
  fullName: System.Web.Hosting.ApplicationManager.InitializeLifetimeService()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.Hosting.ApplicationManager.IsIdle
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: IsIdle()
  nameWithType: ApplicationManager.IsIdle()
  fullName: System.Web.Hosting.ApplicationManager.IsIdle()
- uid: System.Web.Hosting.ApplicationManager.Open
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: Open()
  nameWithType: ApplicationManager.Open()
  fullName: System.Web.Hosting.ApplicationManager.Open()
- uid: System.Web.Hosting.ApplicationManager.ShutdownAll
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: ShutdownAll()
  nameWithType: ApplicationManager.ShutdownAll()
  fullName: System.Web.Hosting.ApplicationManager.ShutdownAll()
- uid: System.Web.Hosting.ApplicationManager.ShutdownApplication(System.String)
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: ShutdownApplication(String)
  nameWithType: ApplicationManager.ShutdownApplication(String)
  fullName: System.Web.Hosting.ApplicationManager.ShutdownApplication(String)
- uid: System.Web.Hosting.ApplicationManager.StopObject(System.String,System.Type)
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: StopObject(String,Type)
  nameWithType: ApplicationManager.StopObject(String,Type)
  fullName: System.Web.Hosting.ApplicationManager.StopObject(String,Type)
- uid: System.Web.Hosting.ApplicationManager.Close*
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: Close
  nameWithType: ApplicationManager.Close
- uid: System.Web.Hosting.ApplicationManager.CreateObject*
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: CreateObject
  nameWithType: ApplicationManager.CreateObject
- uid: System.Web.Hosting.ApplicationManager.GetAppDomain*
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: GetAppDomain
  nameWithType: ApplicationManager.GetAppDomain
- uid: System.Web.Hosting.ApplicationManager.GetApplicationManager*
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: GetApplicationManager
  nameWithType: ApplicationManager.GetApplicationManager
- uid: System.Web.Hosting.ApplicationManager.GetObject*
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: GetObject
  nameWithType: ApplicationManager.GetObject
- uid: System.Web.Hosting.ApplicationManager.GetRunningApplications*
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: GetRunningApplications
  nameWithType: ApplicationManager.GetRunningApplications
- uid: System.Web.Hosting.ApplicationManager.InitializeLifetimeService*
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: InitializeLifetimeService
  nameWithType: ApplicationManager.InitializeLifetimeService
- uid: System.Web.Hosting.ApplicationManager.IsIdle*
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: IsIdle
  nameWithType: ApplicationManager.IsIdle
- uid: System.Web.Hosting.ApplicationManager.Open*
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: Open
  nameWithType: ApplicationManager.Open
- uid: System.Web.Hosting.ApplicationManager.ShutdownAll*
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: ShutdownAll
  nameWithType: ApplicationManager.ShutdownAll
- uid: System.Web.Hosting.ApplicationManager.ShutdownApplication*
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: ShutdownApplication
  nameWithType: ApplicationManager.ShutdownApplication
- uid: System.Web.Hosting.ApplicationManager.StopObject*
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: StopObject
  nameWithType: ApplicationManager.StopObject
