### YamlMime:ManagedReference
items:
- uid: System.Net.Http.DelegatingHandler
  id: DelegatingHandler
  children:
  - System.Net.Http.DelegatingHandler.#ctor
  - System.Net.Http.DelegatingHandler.#ctor(System.Net.Http.HttpMessageHandler)
  - System.Net.Http.DelegatingHandler.Dispose(System.Boolean)
  - System.Net.Http.DelegatingHandler.InnerHandler
  - System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  langs:
  - csharp
  name: DelegatingHandler
  nameWithType: DelegatingHandler
  fullName: System.Net.Http.DelegatingHandler
  type: Class
  summary: "Typ dla programów obsługi HTTP, który deleguje przetwarzanie komunikatów odpowiedzi HTTP do innego programu obsługi, nazywany wewnętrznym programem obsługi."
  remarks: "Ta aplikacja zwykle wystąpienia tej klasy a następnie ustawiona wewnętrznym programem obsługi lub podaj wewnętrznym programem obsługi w konstruktorze.       Należy pamiętać, że <xref:System.Net.Http.DelegatingHandler.InnerHandler%2A>właściwość może być zbyt obsługi delegujące.</xref:System.Net.Http.DelegatingHandler.InnerHandler%2A> Takie podejście umożliwia tworzenie stosów obsługi do przetwarzania komunikatów odpowiedzi HTTP."
  syntax:
    content: 'public abstract class DelegatingHandler : System.Net.Http.HttpMessageHandler'
  inheritance:
  - System.Object
  - System.Net.Http.HttpMessageHandler
  implements: []
  inheritedMembers:
  - System.Net.Http.HttpMessageHandler.Dispose
  platform:
  - net462
- uid: System.Net.Http.DelegatingHandler.#ctor
  id: '#ctor'
  parent: System.Net.Http.DelegatingHandler
  langs:
  - csharp
  name: DelegatingHandler()
  nameWithType: DelegatingHandler.DelegatingHandler()
  fullName: System.Net.Http.DelegatingHandler.DelegatingHandler()
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Tworzy nowe wystąpienie klasy <xref href=&quot;System.Net.Http.DelegatingHandler&quot;> </xref> klasy."
  remarks: "Wewnętrzny dojście można ustawić za pomocą <xref:System.Net.Http.DelegatingHandler.InnerHandler%2A>.</xref:System.Net.Http.DelegatingHandler.InnerHandler%2A>"
  syntax:
    content: protected DelegatingHandler ();
    parameters: []
  overload: System.Net.Http.DelegatingHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.DelegatingHandler.#ctor(System.Net.Http.HttpMessageHandler)
  id: '#ctor(System.Net.Http.HttpMessageHandler)'
  parent: System.Net.Http.DelegatingHandler
  langs:
  - csharp
  name: DelegatingHandler(HttpMessageHandler)
  nameWithType: DelegatingHandler.DelegatingHandler(HttpMessageHandler)
  fullName: System.Net.Http.DelegatingHandler.DelegatingHandler(HttpMessageHandler)
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Tworzy nowe wystąpienie klasy <xref href=&quot;System.Net.Http.DelegatingHandler&quot;> </xref> klasy z określonym wewnętrznym programem obsługi."
  syntax:
    content: protected DelegatingHandler (System.Net.Http.HttpMessageHandler innerHandler);
    parameters:
    - id: innerHandler
      type: System.Net.Http.HttpMessageHandler
      description: "Wewnętrzny program obsługi, która jest odpowiedzialna za przetwarzanie komunikatów odpowiedzi HTTP."
  overload: System.Net.Http.DelegatingHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.DelegatingHandler.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Http.DelegatingHandler
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DelegatingHandler.Dispose(Boolean)
  fullName: System.Net.Http.DelegatingHandler.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Zwalnia zasoby niezarządzane używane przez <xref href=&quot;System.Net.Http.DelegatingHandler&quot;> </xref>i opcjonalnie usuwa zarządzane zasoby."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby zwolnić zasoby zarządzane i niezarządzane; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> powoduje zwolnienie tylko niezarządzane zasoby."
  overload: System.Net.Http.DelegatingHandler.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.DelegatingHandler.InnerHandler
  id: InnerHandler
  parent: System.Net.Http.DelegatingHandler
  langs:
  - csharp
  name: InnerHandler
  nameWithType: DelegatingHandler.InnerHandler
  fullName: System.Net.Http.DelegatingHandler.InnerHandler
  type: Property
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Pobiera lub ustawia wewnętrzny program obsługi, który przetwarza komunikatów odpowiedzi HTTP."
  remarks: "Ta właściwość InnerHandler można ustawić tylko przed użyciem klasy ( <xref:System.Net.Http.DelegatingHandler.SendAsync%2A>Metoda jest wywoływana).</xref:System.Net.Http.DelegatingHandler.SendAsync%2A>       Zauważ, że właściwość InnerHandler może być delegujące programu obsługi, ale jest to rzadko. Takie podejście umożliwia tworzenie stosów obsługi komunikatów odpowiedzi HTTP."
  syntax:
    content: public System.Net.Http.HttpMessageHandler InnerHandler { get; set; }
    return:
      type: System.Net.Http.HttpMessageHandler
      description: "Wewnętrzny program obsługi komunikatów odpowiedzi HTTP."
  overload: System.Net.Http.DelegatingHandler.InnerHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.DelegatingHandler
  langs:
  - csharp
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: DelegatingHandler.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.DelegatingHandler.SendAsync(HttpRequestMessage,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wysyła żądanie HTTP do wewnętrznego programu obsługi do wysyłania do serwera jako operację asynchroniczną."
  remarks: "Ta operacja nie blokuje. Ta implementacja możliwym do zastąpienia <xref:System.Net.Http.HttpClientHandler.SendAsync%2A>Metoda przekazuje żądanie HTTP do wewnętrznego programu obsługi do wysyłania do serwera jako operację asynchroniczną.</xref:System.Net.Http.HttpClientHandler.SendAsync%2A>       Metoda SendAsync jest głównie używane przez system, a nie przez aplikacje. Gdy ta metoda jest wywoływana, wywołuje metodę SendAsync na wewnętrznym programem obsługi."
  syntax:
    content: protected override System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "Komunikat żądania HTTP do wysyłania do serwera."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Token anulowania do anulowania operacji."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.DelegatingHandler.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>request</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: System.Net.Http.HttpMessageHandler
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Net.Http.DelegatingHandler.#ctor
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: DelegatingHandler()
  nameWithType: DelegatingHandler.DelegatingHandler()
  fullName: System.Net.Http.DelegatingHandler.DelegatingHandler()
- uid: System.Net.Http.DelegatingHandler.#ctor(System.Net.Http.HttpMessageHandler)
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: DelegatingHandler(HttpMessageHandler)
  nameWithType: DelegatingHandler.DelegatingHandler(HttpMessageHandler)
  fullName: System.Net.Http.DelegatingHandler.DelegatingHandler(HttpMessageHandler)
- uid: System.Net.Http.DelegatingHandler.Dispose(System.Boolean)
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DelegatingHandler.Dispose(Boolean)
  fullName: System.Net.Http.DelegatingHandler.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Http.DelegatingHandler.InnerHandler
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: InnerHandler
  nameWithType: DelegatingHandler.InnerHandler
  fullName: System.Net.Http.DelegatingHandler.InnerHandler
- uid: System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: DelegatingHandler.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.DelegatingHandler.SendAsync(HttpRequestMessage,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<HttpResponseMessage>
  nameWithType: Task<HttpResponseMessage>
  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.Http.HttpResponseMessage>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: HttpResponseMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpRequestMessage
  parent: System.Net.Http
  isExternal: false
  name: HttpRequestMessage
  nameWithType: HttpRequestMessage
  fullName: System.Net.Http.HttpRequestMessage
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Net.Http.DelegatingHandler.#ctor*
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: DelegatingHandler
  nameWithType: DelegatingHandler.DelegatingHandler
- uid: System.Net.Http.DelegatingHandler.Dispose*
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: Dispose
  nameWithType: DelegatingHandler.Dispose
- uid: System.Net.Http.DelegatingHandler.InnerHandler*
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: InnerHandler
  nameWithType: DelegatingHandler.InnerHandler
- uid: System.Net.Http.DelegatingHandler.SendAsync*
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: SendAsync
  nameWithType: DelegatingHandler.SendAsync
