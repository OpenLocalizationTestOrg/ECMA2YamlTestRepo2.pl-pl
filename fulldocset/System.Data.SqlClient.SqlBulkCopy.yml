### YamlMime:ManagedReference
items:
- uid: System.Data.SqlClient.SqlBulkCopy
  id: SqlBulkCopy
  children:
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)
  - System.Data.SqlClient.SqlBulkCopy.BatchSize
  - System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  - System.Data.SqlClient.SqlBulkCopy.Close
  - System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  - System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  - System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  - System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  - System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  - System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)
  langs:
  - csharp
  name: SqlBulkCopy
  nameWithType: SqlBulkCopy
  fullName: System.Data.SqlClient.SqlBulkCopy
  type: Class
  summary: "Umożliwia wydajne ładowanie zbiorcze tabeli programu SQL Server przy użyciu danych z innego źródła."
  remarks: "Microsoft SQL Server zawiera popularne narzędzia wiersza polecenia o nazwie **bcp** do przenoszenia danych z jednej tabeli do innego, czy na jednym serwerze lub między serwerami. Klasa SqlBulkCopy umożliwia pisanie kodu zarządzanego rozwiązań w zakresie podobnych możliwościach. Istnieją inne sposoby, aby załadować dane do tabeli programu SQL Server (na przykład instrukcji INSERT), ale SqlBulkCopy oferuje wydajności znaczących korzyści nad nimi.       Klasa SqlBulkCopy można zapisać danych tylko do tabel programu SQL Server. Jednak źródła danych nie jest ograniczona do programu SQL Server; wszystkie źródła danych może służyć, jak długo dane mogą być ładowane do <xref:System.Data.DataTable>wystąpienia lub odczytu z <xref:System.Data.IDataReader>wystąpienia.</xref:System.Data.IDataReader> </xref:System.Data.DataTable>       SqlBulkCopy zakończy się niepowodzeniem podczas ładowania zbiorczego <xref:System.Data.DataTable>kolumny typu <xref:System.Data.SqlTypes.SqlDateTime>do programu SQL Server dodać kolumnę, którego typ jest jednym z typów daty/godziny w programie SQL Server 2008.</xref:System.Data.SqlTypes.SqlDateTime> </xref:System.Data.DataTable>"
  example:
  - "The following console application demonstrates how to load data using the SqlBulkCopy class. In this example, a <xref:System.Data.SqlClient.SqlDataReader> is used to copy data from the **Production.Product** table in the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]**AdventureWorks** database to a similar table in the same database.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks BulkCopy.Single#1](~/add/codesnippet/csharp/t-system.data.sqlclient._9_1.cs)]\n [!code-vb[DataWorks BulkCopy.Single#1](~/add/codesnippet/visualbasic/t-system.data.sqlclient._9_1.vb)]"
  syntax:
    content: 'public sealed class SqlBulkCopy : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)
  id: '#ctor(System.Data.SqlClient.SqlConnection)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlBulkCopy(SqlConnection)
  nameWithType: SqlBulkCopy.SqlBulkCopy(SqlConnection)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(SqlConnection)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> przy użyciu określonego otwartego wystąpienia <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>."
  remarks: "Ponieważ połączenie jest już otwarty podczas <xref:System.Data.SqlClient.SqlBulkCopy>zainicjowano wystąpienia, połączenie pozostaje otwarty po <xref:System.Data.SqlClient.SqlBulkCopy>instancja jest zamknięta.</xref:System.Data.SqlClient.SqlBulkCopy> </xref:System.Data.SqlClient.SqlBulkCopy>       Jeśli `connection` argument ma wartość null, <xref:System.ArgumentNullException>jest generowany.</xref:System.ArgumentNullException>"
  example:
  - "The following console application demonstrates how to bulk load data using a connection that is already open. In this example, a <xref:System.Data.SqlClient.SqlDataReader> is used to copy data from the **Production.Product** table in the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]**AdventureWorks** database to a similar table in the same database. This example is for demonstration purposes only. You would not use `SqlBulkCopy` to move data from one table to another in the same database in a production application. Note that the source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks BulkCopy.Single#1](~/add/codesnippet/csharp/759c1349-38f0-4ca1-9e42-_1.cs)]\n [!code-vb[DataWorks BulkCopy.Single#1](~/add/codesnippet/visualbasic/759c1349-38f0-4ca1-9e42-_1.vb)]"
  syntax:
    content: public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection);
    parameters:
    - id: connection
      type: System.Data.SqlClient.SqlConnection
      description: "Już otwarta <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> wystąpienia, która będzie służyć do wykonywania operacji kopiowania zbiorczego. Jeśli nie są używane parametry połączenia <xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>, można użyć <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;> </xref> do przekazania bezpieczniejsze niż identyfikator użytkownika i hasło określającego identyfikator użytkownika i hasło jako tekst w ciągu połączenia."
  overload: System.Data.SqlClient.SqlBulkCopy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlBulkCopy(String)
  nameWithType: SqlBulkCopy.SqlBulkCopy(String)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Inicjuje i otwiera nowe wystąpienie klasy <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> oparte na podane <code> connectionString </code>. Używa konstruktora <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> zainicjować nowe wystąpienie klasy <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> klasy."
  remarks: "Połączenie jest zamykane automatycznie po zakończeniu operacji kopiowania zbiorczego.       Jeśli `connectionString` ma wartość null, <xref:System.ArgumentNullException>jest generowany.</xref:System.ArgumentNullException> Jeśli `connectionString` to ciąg pusty <xref:System.ArgumentException>jest generowany.</xref:System.ArgumentException>"
  example:
  - "The following console application demonstrates how to bulk load data by using a connection specified as a string. The connection is automatically closed when the <xref:System.Data.SqlClient.SqlBulkCopy> instance is closed.  \n  \n In this example, the source data is first read from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._5_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.ConnectionString#1](~/add/codesnippet/csharp/m-system.data.sqlclient._5_1.cs)]"
  syntax:
    content: public SqlBulkCopy (string connectionString);
    parameters:
    - id: connectionString
      type: System.String
      description: "Ciąg połączenia, który ma zostać otwarty na potrzeby używania przez definiowanie <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> wystąpienia. Jeśli nie są używane parametry połączenia <xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>, można użyć &lt;xref:System.Data.SqlClient.SqlBulkCopy.%23ctor%2A&gt; lub &lt;xref:System.Data.SqlClient.SqlBulkCopy.%23ctor%2A&gt; i <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;> </xref> do przekazania bezpieczniejsze niż identyfikator użytkownika i hasło określającego identyfikator użytkownika i hasło jako tekst w ciągu połączenia."
  overload: System.Data.SqlClient.SqlBulkCopy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)
  id: '#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlBulkCopy(String,SqlBulkCopyOptions)
  nameWithType: SqlBulkCopy.SqlBulkCopy(String,SqlBulkCopyOptions)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(String,SqlBulkCopyOptions)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Inicjuje i otwiera nowe wystąpienie klasy <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> oparte na podane <code> connectionString </code>. Używa konstruktora, który <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> zainicjować nowe wystąpienie klasy <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> klasy. <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> Wystąpienia działa zgodnie z podanym w opcji <code> copyOptions </code> parametru."
  remarks: "Możesz uzyskać szczegółowe informacje o wszystkich opcjach kopiowania zbiorczego w <xref:System.Data.SqlClient.SqlBulkCopyOptions>tematu.</xref:System.Data.SqlClient.SqlBulkCopyOptions>"
  example:
  - "The following console application demonstrates how to perform a bulk load by using a connection specified as a string. An option is set to use the value in the identity column of the source table when you load the destination table. In this example, the source data is first read from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source table and destination table each include an Identity column. By default, a new value for the **Identity** column is generated in the destination table for each row added. In this example, an option is set when the connection is opened that forces the bulk load process to use the **Identity** values from the source table instead. To see how the option changes the way the bulk load works, run the sample with the **dbo.BulkCopyDemoMatchingColumns** table empty. All rows load from the source. Then run the sample again without emptying the table. An exception is thrown and the code writes a message to the console notifying you that rows weren't added because of primary key constraint violations.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks SqlBulkCopy.KeepIdentity#1](~/add/codesnippet/csharp/9a723f0e-d2b0-40de-a13f-_1.cs)]\n [!code-vb[DataWorks SqlBulkCopy.KeepIdentity#1](~/add/codesnippet/visualbasic/9a723f0e-d2b0-40de-a13f-_1.vb)]"
  syntax:
    content: public SqlBulkCopy (string connectionString, System.Data.SqlClient.SqlBulkCopyOptions copyOptions);
    parameters:
    - id: connectionString
      type: System.String
      description: "Ciąg połączenia, który ma zostać otwarty na potrzeby używania przez definiowanie <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> wystąpienia. Jeśli nie są używane parametry połączenia <xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>, można użyć &lt;xref:System.Data.SqlClient.SqlBulkCopy.%23ctor%2A&gt; lub &lt;xref:System.Data.SqlClient.SqlBulkCopy.%23ctor%2A&gt; i <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;> </xref> do przekazania bezpieczniejsze niż identyfikator użytkownika i hasło określającego identyfikator użytkownika i hasło jako tekst w ciągu połączenia."
    - id: copyOptions
      type: System.Data.SqlClient.SqlBulkCopyOptions
      description: "Kombinacja wartości z <xref href=&quot;System.Data.SqlClient.SqlBulkCopyOptions&quot;> </xref> wyliczenie określające wierszy źródła danych, które są kopiowane do tabeli docelowej."
  overload: System.Data.SqlClient.SqlBulkCopy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)
  id: '#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
  nameWithType: SqlBulkCopy.SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> przy użyciu dostarczonego istniejących otwartego wystąpienia <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>. <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> Wystąpienia działa zgodnie z podanym w opcji <code> copyOptions </code> parametru. Jeśli inne niż null <xref href=&quot;System.Data.SqlClient.SqlTransaction&quot;> </xref> jest podany, operacje kopiowania będą wykonywane w ramach tej transakcji."
  remarks: "Jeśli dostępne są następujące opcje `UseInternalTransaction` i `externalTransaction` argument nie jest zerowa, **InvalidArgumentException** jest generowany.       Aby uzyskać przykłady pokazujące, jak używać `SqlBulkCopy` w transakcji, zobacz [transakcji i operacje kopiowania masowego](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlBulkCopyOptions copyOptions, System.Data.SqlClient.SqlTransaction externalTransaction);
    parameters:
    - id: connection
      type: System.Data.SqlClient.SqlConnection
      description: "Już otwarta <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> wystąpienia, która będzie służyć do wykonywania kopiowania zbiorczego. Jeśli nie są używane parametry połączenia <xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>, można użyć <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;> </xref> do przekazania bezpieczniejsze niż identyfikator użytkownika i hasło określającego identyfikator użytkownika i hasło jako tekst w ciągu połączenia."
    - id: copyOptions
      type: System.Data.SqlClient.SqlBulkCopyOptions
      description: "Kombinacja wartości z <xref href=&quot;System.Data.SqlClient.SqlBulkCopyOptions&quot;> </xref> wyliczenie określające wierszy źródła danych, które są kopiowane do tabeli docelowej."
    - id: externalTransaction
      type: System.Data.SqlClient.SqlTransaction
      description: "Istniejące <xref href=&quot;System.Data.SqlClient.SqlTransaction&quot;> </xref> wystąpienie w ramach którego zostanie przeprowadzona kopiowania zbiorczego."
  overload: System.Data.SqlClient.SqlBulkCopy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.BatchSize
  id: BatchSize
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: BatchSize
  nameWithType: SqlBulkCopy.BatchSize
  fullName: System.Data.SqlClient.SqlBulkCopy.BatchSize
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Liczba wierszy w każdej z partii. Po zakończeniu poszczególnych partii wierszy w partii są wysyłane do serwera."
  remarks: "Plik wsadowy została ukończona, gdy zostały przetworzone BatchSize wierszy lub nie ma żadnych więcej wierszy, aby wysłać do docelowego źródła danych.       Zero (domyślnie) wskazuje, że każdy <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>Operacja jest pojedyncza partia.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>       Jeśli <xref:System.Data.SqlClient.SqlBulkCopy>wystąpienia została zadeklarowana bez <xref:System.Data.SqlClient.SqlBulkCopyOptions>opcja w praktyce wiersze są wysyłane do wierszy BatchSize serwera w czasie, ale nie podjęto żadnej akcji związanych z transakcji.</xref:System.Data.SqlClient.SqlBulkCopyOptions> </xref:System.Data.SqlClient.SqlBulkCopy> Jeśli <xref:System.Data.SqlClient.SqlBulkCopyOptions>obowiązuje, każdej z partii wierszy są wstawiane jako osobnej transakcji.</xref:System.Data.SqlClient.SqlBulkCopyOptions>       W dowolnym momencie można ustawić właściwości BatchSize. Jeśli kopiowanie masowe jest już w toku, zgodnie z poprzednim rozmiar partii jest o rozmiarze bieżącej partii. Partie kolejnych Użyj nowego rozmiaru. Jeśli BatchSize początkowo jest równy zero i zmienione podczas <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>Operacja jest już w toku, że operacja ładuje dane jako pojedyncza partia.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> Wszystkie kolejne <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>operacji na tym samym <xref:System.Data.SqlClient.SqlBulkCopy>wystąpienia Użyj nowego BatchSize.</xref:System.Data.SqlClient.SqlBulkCopy> </xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>"
  example:
  - "The following console application demonstrates how to bulk load data in batches of 50 rows. For an example illustrating how BatchSize works with a transaction, see [Transaction and Bulk Copy Operations](~/add/includes/ajax-current-ext-md.md).  \n  \n In this example, the source data is first read from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks SqlBulkCopy.BatchSize#1](~/add/codesnippet/csharp/p-system.data.sqlclient._2_1.cs)]\n [!code-vb[DataWorks SqlBulkCopy.BatchSize#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._2_1.vb)]"
  syntax:
    content: public int BatchSize { get; set; }
    return:
      type: System.Int32
      description: "Wartość całkowita właściwości BatchSize lub zero, jeśli wartość nie została ustawiona."
  overload: System.Data.SqlClient.SqlBulkCopy.BatchSize*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  id: BulkCopyTimeout
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: BulkCopyTimeout
  nameWithType: SqlBulkCopy.BulkCopyTimeout
  fullName: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Liczba sekund dla operacji zanim upłynie limit czasu."
  remarks: "Jeśli operacja jest limit czasu, transakcja nie została zatwierdzona i wszystkie skopiowane wiersze zostaną usunięte z tabeli docelowej."
  example:
  - "The following console application demonstrates how to modify the time-out to 60 seconds when bulk loading data.  \n  \n In this example, the source data is first read from a [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source data does not have to be located on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] instance, it is easier and faster to use a [!INCLUDE[tsql](~/add/includes/tsql-md.md)]`INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.Timeout#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._14_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.Timeout#1](~/add/codesnippet/csharp/p-system.data.sqlclient._14_1.cs)]"
  syntax:
    content: public int BulkCopyTimeout { get; set; }
    return:
      type: System.Int32
      description: "Całkowita właściwości BulkCopyTimeout. Wartość domyślna to 30 sekund. Wartość 0 oznacza brak limitu; kopiowania zbiorczego będzie czekać w nieskończoność."
  overload: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.Close
  id: Close
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: Close()
  nameWithType: SqlBulkCopy.Close()
  fullName: System.Data.SqlClient.SqlBulkCopy.Close()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Zamyka <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> wystąpienia."
  remarks: "Po wywołaniu metody Close na <xref:System.Data.SqlClient.SqlBulkCopy>obiekt inna operacja zostanie wykonana pomyślnie.</xref:System.Data.SqlClient.SqlBulkCopy> <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>Metoda zgłosi <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> wywołań       Wywoływanie metody Close z <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied>zdarzenie <xref:System.InvalidOperationException>zostanie wygenerowany.</xref:System.InvalidOperationException> </xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied>       Należy pamiętać, że Otwórz <xref:System.Data.SqlClient.SqlBulkCopy>wystąpienia są zamknięte niejawnie na końcu `using` bloku.</xref:System.Data.SqlClient.SqlBulkCopy>"
  example:
  - "The following example uses the same <xref:System.Data.SqlClient.SqlBulkCopy> instance to add sales orders and their associated details to two destination tables. Because the **AdventureWorks** sales order tables are large, the sample reads only orders placed by a certain account number and bulk copies those orders and details to the destination tables. The Close method is used only after both bulk copy operations are complete.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.OrdersDetails#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._43_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.OrdersDetails#1](~/add/codesnippet/csharp/m-system.data.sqlclient._43_1.cs)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Data.SqlClient.SqlBulkCopy.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  id: ColumnMappings
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: ColumnMappings
  nameWithType: SqlBulkCopy.ColumnMappings
  fullName: System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Zwraca kolekcję <xref href=&quot;System.Data.SqlClient.SqlBulkCopyColumnMapping&quot;> </xref> elementów. Mapowania kolumn zdefiniować relacji między kolumnami w źródle danych i kolumn w lokalizacji docelowej."
  remarks: "Jeśli źródło danych i tabeli docelowej mają taką samą liczbę kolumn oraz numerem porządkowym odpowiadającej mu kolumny docelowej jest zgodny z numerem porządkowym każdej kolumny źródłowej w źródle danych, kolekcji ColumnMappings nie jest konieczne. Jednak liczby kolumn są różne, czy numer porządkowy pozycji nie są zgodne, aby upewnić się, że dane są kopiowane do kolumn poprawne musi używać właściwości ColumnMappings.       Podczas wykonywania operacji kopiowania zbiorczego umożliwia dostęp do tej kolekcji, ale nie można zmienić. Każda próba ją zmienić zgłosi <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException>"
  syntax:
    content: public System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings { get; }
    return:
      type: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
      description: "Kolekcja mapowania kolumn. Domyślnie jest pustej kolekcji."
  overload: System.Data.SqlClient.SqlBulkCopy.ColumnMappings*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  id: DestinationTableName
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: DestinationTableName
  nameWithType: SqlBulkCopy.DestinationTableName
  fullName: System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Nazwa tabeli docelowej na serwerze."
  remarks: "Jeśli DestinationTableName nie została ustawiona podczas <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>jest nazywany <xref:System.ArgumentNullException>jest generowany.</xref:System.ArgumentNullException> </xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>       Jeśli DestinationTableName jest modyfikowany podczas <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>Operacja została uruchomiona, zmiana nie wpływa na bieżącej operacji.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> Nowa wartość DestinationTableName jest używana przy następnym <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>Metoda jest wywoływana.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>       DestinationTableName jest trzyczęściowej nazwy (`<database>.<owningschema>.<name>`). Jeśli wybierzesz może kwalifikować się nazwy tabeli z bazy danych i schemat będący właścicielem. Jednak jeśli nazwa tabeli używa znaku podkreślenia (&quot;_&quot;) ani innych znaków specjalnych, użytkownik musi escape nazwy za pomocą nawiasów, podobnie jak w (`[<database>.<owningschema>.<name_01>]`). Aby uzyskać więcej informacji zobacz temat &quot;Identyfikatory&quot; w dokumentacji SQL Server — książki Online.       Można danych kopiowanie masowe do tabeli tymczasowej za pomocą wartości, takich jak `tempdb..#table` lub `tempdb.<owner>.#table` właściwość DestinationTableName."
  example:
  - "The following console application demonstrates how to bulk load data using a connection that is already open. The destination table is a table in the **AdventureWorks** database.  \n  \n In this example, the connection is first used to read data from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.Single#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._5_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.Single#1](~/add/codesnippet/csharp/p-system.data.sqlclient._5_1.cs)]"
  syntax:
    content: public string DestinationTableName { get; set; }
    return:
      type: System.String
      description: "Wartość ciągu właściwość DestinationTableName lub wartość null, jeśli nie został dostarczony."
  overload: System.Data.SqlClient.SqlBulkCopy.DestinationTableName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  id: EnableStreaming
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: EnableStreaming
  nameWithType: SqlBulkCopy.EnableStreaming
  fullName: System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Włącza lub wyłącza <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> obiektu do transmisji danych z <xref href=&quot;System.Data.IDataReader&quot;> </xref> obiektu"
  remarks: "Gdy jest EnableStreaming `true`, <xref:System.Data.SqlClient.SqlBulkCopy>odczytuje z <xref:System.Data.IDataReader>przy użyciu <xref:System.Data.CommandBehavior>, Optymalizacja użycia pamięci za pomocą <xref:System.Data.IDataReader>przesyłania strumieniowego możliwości.</xref:System.Data.IDataReader> </xref:System.Data.CommandBehavior> </xref:System.Data.IDataReader> </xref:System.Data.SqlClient.SqlBulkCopy> Gdy ma wartość false, <xref:System.Data.SqlClient.SqlBulkCopy>klasy ładuje wszystkie dane zwrócone przez <xref:System.Data.IDataReader>obiektu w pamięci przed wysłaniem do [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] lub SQL Azure.</xref:System.Data.IDataReader> </xref:System.Data.SqlClient.SqlBulkCopy>"
  syntax:
    content: public bool EnableStreaming { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> obiektu można przesyłać strumieniowo dane z <xref href=&quot;System.Data.IDataReader&quot;> </xref> obiektu; w przeciwnym razie wartość false. Wartość domyślna to <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.SqlClient.SqlBulkCopy.EnableStreaming*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  id: NotifyAfter
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: NotifyAfter
  nameWithType: SqlBulkCopy.NotifyAfter
  fullName: System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Określa liczbę wierszy do przetwarzania przed wygenerowaniem powiadomienia."
  remarks: "Ta właściwość jest przeznaczona dla składników interfejsu użytkownika, które ilustrują postęp operacji kopiowania zbiorczego. Wskazuje liczbę wierszy do przetwarzania przed wygenerowaniem powiadomienia. W dowolnym momencie można ustawić właściwości NotifyAfter, nawet wtedy, gdy trwa operacja kopiowania zbiorczego. Zmiany wprowadzone podczas operacji kopiowania zbiorczego zaczynają obowiązywać po następnym powiadomień. Nowe ustawienie jest stosowane do wszystkich kolejnych operacji na tym samym wystąpieniu.       Jeśli NotifyAfter jest ustaw wartość mniejsza od zera, <xref:System.ArgumentOutOfRangeException>jest zgłaszany.</xref:System.ArgumentOutOfRangeException>"
  example:
  - "The following console application demonstrates how to bulk load data using a connection that is already open. The NotifyAfter property is set so that the event handler is called after every 50 rows copied to the table.  \n  \n In this example, the connection is first used to read data from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. Then a second connection is opened to bulk copy the data. Note that the source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._11_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.NotifyAfter#1](~/add/codesnippet/csharp/p-system.data.sqlclient._11_1.cs)]"
  syntax:
    content: public int NotifyAfter { get; set; }
    return:
      type: System.Int32
      description: "Wartość całkowita właściwości NotifyAfter lub zero, jeśli nie ustawiono właściwości."
  overload: System.Data.SqlClient.SqlBulkCopy.NotifyAfter*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  id: SqlRowsCopied
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlRowsCopied
  nameWithType: SqlBulkCopy.SqlRowsCopied
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Występuje zawsze liczbę wierszy określony przez <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter*>właściwości zostały przetworzone.</xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter*>"
  remarks: "Należy pamiętać, że ustawienia <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A>i <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>są niezależne.</xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> </xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> Odbieranie zdarzeń SqlRowsCopied nie oznacza, że wszystkie wiersze zostały wysłane do serwera lub zatwierdzone.       Nie można wywołać SqlBulkCopy.Close (<xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>) lub SqlConnection.Close (<xref:System.Data.SqlClient.SqlConnection.Close%2A>) z tego zdarzenia.</xref:System.Data.SqlClient.SqlConnection.Close%2A> </xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> To spowoduje <xref:System.InvalidOperationException>zgłoszone i <xref:System.Data.SqlClient.SqlBulkCopy>nie spowoduje zmiany stanu obiektu.</xref:System.Data.SqlClient.SqlBulkCopy> </xref:System.InvalidOperationException> Jeśli użytkownik chce anulować operację z poziomu zdarzenia <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A>właściwości <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs>mogą być używane.</xref:System.Data.SqlClient.SqlRowsCopiedEventArgs> </xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> (Zobacz [transakcji i operacje kopiowania masowego](~/add/includes/ajax-current-ext-md.md) przykłady, które używają <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A>Właściwości.)</xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A>       Brak akcji, takich jak działania transakcji jest obsługiwana w połączenia podczas wykonywania operacji kopiowania zbiorczego, i zalecane jest, aby używać tego samego połączenia, które są używane podczas zdarzenia SqlRowsCopied. Jednak możesz otworzyć innego połączenia."
  example:
  - "The following console application demonstrates how to bulk load data using a connection that is already open. The <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> property is set so that the event handler is called after every 50 rows copied to the table.  \n  \n In this example, the connection is first used to read data from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. Note that the source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/add/codesnippet/visualbasic/e-system.data.sqlclient._2_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.NotifyAfter#1](~/add/codesnippet/csharp/e-system.data.sqlclient._2_1.cs)]"
  syntax:
    content: public event System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied;
    return:
      type: System.Data.SqlClient.SqlRowsCopiedEventHandler
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose
  id: System#IDisposable#Dispose
  isEii: true
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: System.IDisposable.Dispose()
  nameWithType: SqlBulkCopy.System.IDisposable.Dispose()
  fullName: System.Data.SqlClient.SqlBulkCopy.System.IDisposable.Dispose()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Zwalnia wszelkie zasoby używane przez bieżące wystąpienie klasy <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> klasy."
  remarks: "Wywołanie `Dispose` po zakończeniu przy użyciu <xref:System.Data.SqlClient.SqlBulkCopy>.</xref:System.Data.SqlClient.SqlBulkCopy> `Dispose` Pozostawia metody <xref:System.Data.SqlClient.SqlBulkCopy>w stanie uniemożliwiającym jego używanie.</xref:System.Data.SqlClient.SqlBulkCopy> Po wywołaniu `Dispose`, konieczne jest zwolnienie wszystkich odwołań do <xref:System.Data.SqlClient.SqlBulkCopy>, moduł zbierający elementy bezużyteczne mógł odzyskać pamięć który <xref:System.Data.SqlClient.SqlBulkCopy>klasy.</xref:System.Data.SqlClient.SqlBulkCopy> </xref:System.Data.SqlClient.SqlBulkCopy>       Aby uzyskać więcej informacji, zobacz [czyszczenie zasobów niezarządzanych](~/add/includes/ajax-current-ext-md.md) i [implementacja metody Dispose](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Wywołania zawsze `Dispose` przed zwolnieniem ostatniego odwołania do <xref:System.Data.SqlClient.SqlBulkCopy>.</xref:System.Data.SqlClient.SqlBulkCopy> W przeciwnym razie używa zasobów nie zostanie zwolniona do wywołania modułu zbierającego elementy bezużyteczne <xref:System.Data.SqlClient.SqlBulkCopy>obiektu `Finalize` metody.</xref:System.Data.SqlClient.SqlBulkCopy>"
  syntax:
    content: void IDisposable.Dispose ();
    parameters: []
  overload: System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)
  id: WriteToServer(System.Data.Common.DbDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(DbDataReader)
  nameWithType: SqlBulkCopy.WriteToServer(DbDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DbDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Kopiuje wszystkie wiersze z podane <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref> tablicy do tabeli docelowej, określone przez <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>Właściwość <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> obiektu.</xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>"
  syntax:
    content: public void WriteToServer (System.Data.Common.DbDataReader reader);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "A <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref> której wiersze zostaną skopiowane do tabeli docelowej."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])
  id: WriteToServer(System.Data.DataRow[])
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(DataRow[])
  nameWithType: SqlBulkCopy.WriteToServer(DataRow[])
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataRow[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Kopiuje wszystkie wiersze z podane <xref href=&quot;System.Data.DataRow&quot;> </xref> tablicy do tabeli docelowej, określone przez <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>Właściwość <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> obiektu.</xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>"
  remarks: "Podczas operacji kopiowania zbiorczego jest w toku, skojarzono docelowego <xref:System.Data.SqlClient.SqlConnection>jest zajęty obsługująca, a nie inne operacje mogą być wykonywane w połączeniu.</xref:System.Data.SqlClient.SqlConnection>       <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>Kolekcji mapy z <xref:System.Data.DataRow>kolumn do tabeli docelowej bazy danych.</xref:System.Data.DataRow> </xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>"
  example:
  - "The following console application demonstrates how to bulk load data from a <xref:System.Data.DataRow> array. The destination table is a table in the **AdventureWorks** database.  \n  \n In this example, a <xref:System.Data.DataTable> is created at run time. A single row is selected from the <xref:System.Data.DataTable> to copy to the destination table.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks SqlBulkCopy.RowArray#1](~/add/codesnippet/csharp/m-system.data.sqlclient._3_1.cs)]\n [!code-vb[DataWorks SqlBulkCopy.RowArray#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._3_1.vb)]"
  syntax:
    content: public void WriteToServer (System.Data.DataRow[] rows);
    parameters:
    - id: rows
      type: System.Data.DataRow[]
      description: "Tablica <xref href=&quot;System.Data.DataRow&quot;> </xref> obiektów, które zostaną skopiowane do tabeli docelowej."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)
  id: WriteToServer(System.Data.DataTable)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(DataTable)
  nameWithType: SqlBulkCopy.WriteToServer(DataTable)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Kopiuje wszystkie wiersze w podane <xref href=&quot;System.Data.DataTable&quot;> </xref> do tabeli docelowej, określone przez <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>Właściwość <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> obiektu.</xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>"
  remarks: "Wszystkie wiersze w <xref:System.Data.DataTable>są kopiowane do tabeli docelowej z wyjątkiem tych, które zostały usunięte.</xref:System.Data.DataTable>       Podczas operacji kopiowania zbiorczego jest w toku, skojarzono docelowego <xref:System.Data.SqlClient.SqlConnection>jest zajęty obsługująca, a nie inne operacje mogą być wykonywane w połączeniu.</xref:System.Data.SqlClient.SqlConnection>       <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>Kolekcji mapy z <xref:System.Data.DataTable>kolumn do tabeli docelowej bazy danych.</xref:System.Data.DataTable> </xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>"
  example:
  - "The following Console application demonstrates how to bulk load data from a <xref:System.Data.DataTable>. The destination table is a table in the **AdventureWorks** database.  \n  \n In this example, a <xref:System.Data.DataTable> is created at run time and is the source of the `SqlBulkCopy` operation.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks SqlBulkCopy.DataTable#1](~/add/codesnippet/csharp/m-system.data.sqlclient._16_1.cs)]\n [!code-vb[DataWorks SqlBulkCopy.DataTable#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._16_1.vb)]"
  syntax:
    content: public void WriteToServer (System.Data.DataTable table);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> której wiersze zostaną skopiowane do tabeli docelowej."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)
  id: WriteToServer(System.Data.IDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(IDataReader)
  nameWithType: SqlBulkCopy.WriteToServer(IDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(IDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Kopiuje wszystkie wiersze w podane <xref href=&quot;System.Data.IDataReader&quot;> </xref> do tabeli docelowej, określone przez <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>Właściwość <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> obiektu.</xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>"
  remarks: "Operacja kopiowania rozpoczyna się od następnego wiersza dostępne w czytniku. W większości przypadków, czytnik właśnie został zwrócony przez <xref:System.Data.IDbCommand.ExecuteReader%2A>lub podobne wywołanie, więc następnego wiersza dostępne jest pierwszy wiersz.</xref:System.Data.IDbCommand.ExecuteReader%2A> Aby przetwarzać wiele wyników, należy wywołać <xref:System.Data.IDataReader.NextResult%2A>czytnik danych i ponownie wywołania WriteToServer.</xref:System.Data.IDataReader.NextResult%2A>       Należy pamiętać, że przy użyciu WriteToServer modyfikuje stan czytnika danych. Wywoła metodę <xref:System.Data.IDataReader.Read%2A>do momentu zwraca wartość false, operacja została przerwana lub występuje błąd.</xref:System.Data.IDataReader.Read%2A> Oznacza to, że w innym stanie, prawdopodobnie na końcu zestawu wyników będzie czytnik danych po zakończeniu operacji WriteToServer.       Podczas operacji kopiowania zbiorczego jest w toku, skojarzono docelowego <xref:System.Data.SqlClient.SqlConnection>jest zajęty obsługująca, a nie inne operacje mogą być wykonywane w połączeniu.</xref:System.Data.SqlClient.SqlConnection>       <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>Kolekcji mapuje danych z czytnika kolumn do tabeli docelowej bazy danych.</xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>"
  example:
  - "The following console application demonstrates how to bulk load data from a <xref:System.Data.SqlClient.SqlDataReader>. The destination table is a table in the **AdventureWorks** database.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._35_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.ConnectionString#1](~/add/codesnippet/csharp/m-system.data.sqlclient._35_1.cs)]"
  syntax:
    content: public void WriteToServer (System.Data.IDataReader reader);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "A <xref href=&quot;System.Data.IDataReader&quot;> </xref> której wiersze zostaną skopiowane do tabeli docelowej."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)
  id: WriteToServer(System.Data.DataTable,System.Data.DataRowState)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(DataTable,DataRowState)
  nameWithType: SqlBulkCopy.WriteToServer(DataTable,DataRowState)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataTable,DataRowState)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Kopiuje tylko wiersze spełniające podany wiersz stanu w podane <xref href=&quot;System.Data.DataTable&quot;> </xref> do tabeli docelowej, określone przez <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>Właściwość <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> obiektu.</xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>"
  remarks: "Tylko wiersze w <xref:System.Data.DataTable>w Stanach wskazanych w `rowState` argumentów i nie zostały usunięte są kopiowane do tabeli docelowej.</xref:System.Data.DataTable>      > [!NOTE] > Jeśli <xref:System.Data.DataRowState>jest określona, wszystkie <xref:System.Data.DataRowState>, <xref:System.Data.DataRowState>, i <xref:System.Data.DataRowState>wierszy również zostaną skopiowane na serwer.</xref:System.Data.DataRowState> </xref:System.Data.DataRowState> </xref:System.Data.DataRowState> </xref:System.Data.DataRowState> Wyjątek nie zostanie wygenerowany.       Podczas operacji kopiowania zbiorczego jest w toku, skojarzono docelowego <xref:System.Data.SqlClient.SqlConnection>jest zajęty obsługująca, a nie inne operacje mogą być wykonywane w połączeniu.</xref:System.Data.SqlClient.SqlConnection>       <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>Kolekcji mapy z <xref:System.Data.DataTable>kolumn do tabeli docelowej bazy danych.</xref:System.Data.DataTable> </xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>"
  example:
  - "The following Console application demonstrates how to bulk load only the rows in a <xref:System.Data.DataTable> that match a specified state. In this case, only unchanged rows are added. The destination table is a table in the **AdventureWorks** database.  \n  \n In this example, a <xref:System.Data.DataTable> is created at run time and three rows are added to it. Before the WriteToServer method is executed, one of the rows is edited. The WriteToServer method is called with a `DataRowState.Unchanged``rowState` argument, so only the two unchanged rows are bulk copied to the destination.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks SqlBulkCopy.DataRowState#1](~/add/codesnippet/csharp/65bb2b63-7c25-4470-9a90-_1.cs)]\n [!code-vb[DataWorks SqlBulkCopy.DataRowState#1](~/add/codesnippet/visualbasic/65bb2b63-7c25-4470-9a90-_1.vb)]"
  syntax:
    content: public void WriteToServer (System.Data.DataTable table, System.Data.DataRowState rowState);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> której wiersze zostaną skopiowane do tabeli docelowej."
    - id: rowState
      type: System.Data.DataRowState
      description: "Wartość z zakresu od <xref href=&quot;System.Data.DataRowState&quot;> </xref> wyliczenia. Odpowiadające stanu wiersza tylko wiersze są kopiowane do lokalizacji docelowej."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)
  id: WriteToServerAsync(System.Data.Common.DbDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DbDataReader)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DbDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DbDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Wersja asynchroniczna elementu <> </> *>, która kopiuje wszystkie wiersze z podane <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref> tablicy do tabeli docelowej, określone przez <> </> *> właściwość <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> obiektu."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "A <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref> której wiersze zostaną skopiowane do tabeli docelowej."
    return:
      type: System.Threading.Tasks.Task
      description: "Zadanie reprezentujące operację asynchroniczną."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])
  id: WriteToServerAsync(System.Data.DataRow[])
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataRow[])
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataRow[])
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataRow[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Wersja asynchroniczna elementu <> </> *>, która kopiuje wszystkie wiersze z podane <xref href=&quot;System.Data.DataRow&quot;> </xref> tablicy do tabeli docelowej, określone przez <> </> *> właściwość <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> obiektu."
  remarks: "Aby uzyskać więcej informacji na temat programowania asynchronicznego w [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] dostawcy danych dla [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], zobacz [programowania asynchronicznego](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows);
    parameters:
    - id: rows
      type: System.Data.DataRow[]
      description: "Tablica <xref href=&quot;System.Data.DataRow&quot;> </xref> obiektów, które zostaną skopiowane do tabeli docelowej."
    return:
      type: System.Threading.Tasks.Task
      description: "Zadanie reprezentujące operację asynchroniczną."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Wywoływanie WriteToServerAsync wiele razy dla tego samego wystąpienia przed ukończeniem zadania.       Wywoływanie WriteToServerAsync i <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>dla tego samego wystąpienia przed ukończeniem zadania.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>       Połączenie porzuca lub jest zamknięty podczas wykonywania WriteToServerAsync.       Zwrócony w obiekcie zadań <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> obiekt został zamknięty podczas wykonywania metody.       Zwracane w obiekt zadania, wystąpił limit czasu puli połączeń.       Zwrócony w obiekcie zadań <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> obiekt jest zamknięty przed wykonaniem metody.       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>określono w parametrach połączenia."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Zwracane w obiekt zadania, wszelkie błędy zwrócone przez [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] który wystąpił podczas otwierania połączenia."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)
  id: WriteToServerAsync(System.Data.DataTable)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataTable)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Wersja asynchroniczna elementu <> </> *>, która kopiuje wszystkie wiersze w podane <xref href=&quot;System.Data.DataTable&quot;> </xref> do tabeli docelowej, określone przez <> </> *> właściwość <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> obiektu."
  remarks: "Aby uzyskać więcej informacji na temat programowania asynchronicznego w [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] dostawcy danych dla [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], zobacz [programowania asynchronicznego](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> której wiersze zostaną skopiowane do tabeli docelowej."
    return:
      type: System.Threading.Tasks.Task
      description: "Zadanie reprezentujące operację asynchroniczną."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Wywoływanie WriteToServerAsync wiele razy dla tego samego wystąpienia przed ukończeniem zadania.       Wywoływanie WriteToServerAsync i <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>dla tego samego wystąpienia przed ukończeniem zadania.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>       Połączenie porzuca lub jest zamknięty podczas wykonywania WriteToServerAsync.       Zwrócony w obiekcie zadań <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> obiekt został zamknięty podczas wykonywania metody.       Zwracane w obiekt zadania, wystąpił limit czasu puli połączeń.       Zwrócony w obiekcie zadań <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> obiekt jest zamknięty przed wykonaniem metody.       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>określono w parametrach połączenia."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Zwracane w obiekt zadania, wszelkie błędy zwrócone przez [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] który wystąpił podczas otwierania połączenia."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)
  id: WriteToServerAsync(System.Data.IDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(IDataReader)
  nameWithType: SqlBulkCopy.WriteToServerAsync(IDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(IDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Wersja asynchroniczna elementu <> </> *>, która kopiuje wszystkie wiersze w podane <xref href=&quot;System.Data.IDataReader&quot;> </xref> do tabeli docelowej, określone przez <> </> *> właściwość <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> obiektu."
  remarks: "Aby uzyskać więcej informacji na temat programowania asynchronicznego w [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] dostawcy danych dla [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], zobacz [programowania asynchronicznego](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "A <xref href=&quot;System.Data.IDataReader&quot;> </xref> której wiersze zostaną skopiowane do tabeli docelowej."
    return:
      type: System.Threading.Tasks.Task
      description: "Zadanie reprezentujące operację asynchroniczną."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Wywoływanie WriteToServerAsync wiele razy dla tego samego wystąpienia przed ukończeniem zadania.       Wywoływanie WriteToServerAsync i <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>dla tego samego wystąpienia przed ukończeniem zadania.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>       Połączenie porzuca lub jest zamknięty podczas wykonywania WriteToServerAsync.       Zwrócony w obiekcie zadań <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> obiekt został zamknięty podczas wykonywania metody.       Zwracane w obiekt zadania, wystąpił limit czasu puli połączeń.       Zwrócony w obiekcie zadań <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> obiekt jest zamknięty przed wykonaniem metody.       <xref href=&quot;System.Data.IDataReader&quot;> </xref> Został zamknięty przed ukończonej <xref:System.Threading.Tasks.Task>zwrócił.</xref:System.Threading.Tasks.Task>       <xref href=&quot;System.Data.IDataReader&quot;> </xref>Jego skojarzony połączenie zostało zamknięte przed ukończonej <xref:System.Threading.Tasks.Task>zwrócił.</xref:System.Threading.Tasks.Task>       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>określono w parametrach połączenia."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Zwracane w obiekt zadania, wszelkie błędy zwrócone przez [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] który wystąpił podczas otwierania połączenia."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DbDataReader,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DbDataReader,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DbDataReader,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Wersja asynchroniczna elementu <> </> *>, która kopiuje wszystkie wiersze z podane <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref> tablicy do tabeli docelowej, określone przez <> </> *> właściwość <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> obiektu."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "A <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref> której wiersze zostaną skopiowane do tabeli docelowej."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Instrukcja anulowania. A <> </> *> wartość w tym parametrze sprawia, że ta metoda jest odpowiednikiem <> </> *>."
    return:
      type: System.Threading.Tasks.Task
      description: "Zwraca <xref:System.Threading.Tasks.Task>.</xref:System.Threading.Tasks.Task>"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataRow[],CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataRow[],CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataRow[],CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Wersja asynchroniczna elementu <> </> *>, która kopiuje wszystkie wiersze z podane <xref href=&quot;System.Data.DataRow&quot;> </xref> tablicy do tabeli docelowej, określone przez <> </> *> właściwość <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> obiektu.       Token anulowania może służyć do żądania porzucony operację zanim upłynie limit czasu polecenia.  Wyjątki będą zgłaszane przez zwrócony obiekt zadania."
  remarks: "Aby uzyskać więcej informacji na temat programowania asynchronicznego w [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] dostawcy danych dla [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], zobacz [programowania asynchronicznego](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: rows
      type: System.Data.DataRow[]
      description: "Tablica <xref href=&quot;System.Data.DataRow&quot;> </xref> obiektów, które zostaną skopiowane do tabeli docelowej."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Instrukcja anulowania. A <> </> *> wartość w tym parametrze sprawia, że ta metoda jest odpowiednikiem <> </> *>."
    return:
      type: System.Threading.Tasks.Task
      description: "Zadanie reprezentujące operację asynchroniczną."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Wywoływanie <> </> *> wiele razy dla tego samego wystąpienia przed ukończeniem zadania.       Wywoływanie <> </> *> i <> </> *> dla tego samego wystąpienia przed ukończeniem zadania.       Połączenie porzuca lub jest zamknięty podczas <> </> *> wykonywania.       Zwrócony w obiekcie zadań <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> obiekt został zamknięty podczas wykonywania metody.       Zwracane w obiekt zadania, wystąpił limit czasu puli połączeń.       Zwrócony w obiekcie zadań <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> obiekt jest zamknięty przed wykonaniem metody.       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>określono w parametrach połączenia."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Zwracane w obiekt zadania, wszelkie błędy zwrócone przez [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] który wystąpił podczas otwierania połączenia."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)
  id: WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataTable,DataRowState)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Wersja asynchroniczna elementu <> </> *>, który kopiuje tylko wiersze spełniające podany wiersz stanu w podane <xref href=&quot;System.Data.DataTable&quot;> </xref> do tabeli docelowej, określone przez <> </> *> właściwość <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> obiektu."
  remarks: "Aby uzyskać więcej informacji na temat programowania asynchronicznego w [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] dostawcy danych dla [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], zobacz [programowania asynchronicznego](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> której wiersze zostaną skopiowane do tabeli docelowej."
    - id: rowState
      type: System.Data.DataRowState
      description: "Wartość z zakresu od <xref href=&quot;System.Data.DataRowState&quot;> </xref> wyliczenia. Odpowiadające stanu wiersza tylko wiersze są kopiowane do lokalizacji docelowej."
    return:
      type: System.Threading.Tasks.Task
      description: "Zadanie reprezentujące operację asynchroniczną."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Wywoływanie WriteToServerAsync wiele razy dla tego samego wystąpienia przed ukończeniem zadania.       Wywoływanie WriteToServerAsync i <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>dla tego samego wystąpienia przed ukończeniem zadania.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>       Połączenie porzuca lub jest zamknięty podczas wykonywania WriteToServerAsync.       Zwrócony w obiekcie zadań <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> obiekt został zamknięty podczas wykonywania metody.       Zwracane w obiekt zadania, wystąpił limit czasu puli połączeń.       Zwrócony w obiekcie zadań <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> obiekt jest zamknięty przed wykonaniem metody.       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>określono w parametrach połączenia."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Zwracane w obiekt zadania, wszelkie błędy zwrócone przez [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] który wystąpił podczas otwierania połączenia."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataTable,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Wersja asynchroniczna elementu <> </> *>, która kopiuje wszystkie wiersze w podane <xref href=&quot;System.Data.DataTable&quot;> </xref> do tabeli docelowej, określone przez <> </> *> właściwość <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> obiektu.       Token anulowania może służyć do żądania porzucony operację zanim upłynie limit czasu polecenia.  Wyjątki będą zgłaszane przez zwrócony obiekt zadania."
  remarks: "Aby uzyskać więcej informacji na temat programowania asynchronicznego w [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] dostawcy danych dla [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], zobacz [programowania asynchronicznego](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> której wiersze zostaną skopiowane do tabeli docelowej."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Instrukcja anulowania. A <> </> *> wartość w tym parametrze sprawia, że ta metoda jest odpowiednikiem <> </> *>."
    return:
      type: System.Threading.Tasks.Task
      description: "Zadanie reprezentujące operację asynchroniczną."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Wywoływanie <> </> *> wiele razy dla tego samego wystąpienia przed ukończeniem zadania.       Wywoływanie <> </> *> i <> </> *> dla tego samego wystąpienia przed ukończeniem zadania.       Połączenie porzuca lub jest zamknięty podczas <> </> *> wykonywania.       Zwrócony w obiekcie zadań <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> obiekt został zamknięty podczas wykonywania metody.       Zwracane w obiekt zadania, wystąpił limit czasu puli połączeń.       Zwrócony w obiekcie zadań <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> obiekt jest zamknięty przed wykonaniem metody.       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>określono w parametrach połączenia."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Zwracane w obiekt zadania, wszelkie błędy zwrócone przez [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] który wystąpił podczas otwierania połączenia."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(IDataReader,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(IDataReader,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(IDataReader,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Wersja asynchroniczna elementu <> </> *>, która kopiuje wszystkie wiersze w podane <xref href=&quot;System.Data.IDataReader&quot;> </xref> do tabeli docelowej, określone przez <> </> *> właściwość <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> obiektu.       Token anulowania może służyć do żądania porzucony operację zanim upłynie limit czasu polecenia.  Wyjątki będą zgłaszane przez zwrócony obiekt zadania."
  remarks: "Aby uzyskać więcej informacji na temat programowania asynchronicznego w [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] dostawcy danych dla [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], zobacz [programowania asynchronicznego](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "A <xref href=&quot;System.Data.IDataReader&quot;> </xref> której wiersze zostaną skopiowane do tabeli docelowej."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Instrukcja anulowania. A <> </> *> wartość w tym parametrze sprawia, że ta metoda jest odpowiednikiem <> </> *>."
    return:
      type: System.Threading.Tasks.Task
      description: "Zadanie reprezentujące operację asynchroniczną."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Wywoływanie <> </> *> wiele razy dla tego samego wystąpienia przed ukończeniem zadania.       Wywoływanie <> </> *> i <> </> *> dla tego samego wystąpienia przed ukończeniem zadania.       Połączenie porzuca lub jest zamknięty podczas <> </> *> wykonywania.       Zwrócony w obiekcie zadań <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> obiekt został zamknięty podczas wykonywania metody.       Zwracane w obiekt zadania, wystąpił limit czasu puli połączeń.       Zwrócony w obiekcie zadań <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> obiekt jest zamknięty przed wykonaniem metody.       <xref href=&quot;System.Data.IDataReader&quot;> </xref> Został zamknięty przed ukończonej <xref:System.Threading.Tasks.Task>zwrócił.</xref:System.Threading.Tasks.Task>       <xref href=&quot;System.Data.IDataReader&quot;> </xref>Jego skojarzony połączenie zostało zamknięte przed ukończonej <xref:System.Threading.Tasks.Task>zwrócił.</xref:System.Threading.Tasks.Task>       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>określono w parametrach połączenia."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Zwracane w obiekt zadania, wszelkie błędy zwrócone przez [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] który wystąpił podczas otwierania połączenia."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataTable,DataRowState,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Wersja asynchroniczna elementu <> </> *>, który kopiuje tylko wiersze spełniające podany wiersz stanu w podane <xref href=&quot;System.Data.DataTable&quot;> </xref> do tabeli docelowej, określone przez <> </> *> właściwość <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> obiektu.       Token anulowania może służyć do żądania porzucony operację zanim upłynie limit czasu polecenia.  Wyjątki będą zgłaszane przez zwrócony obiekt zadania."
  remarks: "Aby uzyskać więcej informacji na temat programowania asynchronicznego w [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] dostawcy danych dla [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], zobacz [programowania asynchronicznego](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> której wiersze zostaną skopiowane do tabeli docelowej."
    - id: rowState
      type: System.Data.DataRowState
      description: "Wartość z zakresu od <xref href=&quot;System.Data.DataRowState&quot;> </xref> wyliczenia. Odpowiadające stanu wiersza tylko wiersze są kopiowane do lokalizacji docelowej."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Instrukcja anulowania. A <> </> *> wartość w tym parametrze sprawia, że ta metoda jest odpowiednikiem <> </> *>."
    return:
      type: System.Threading.Tasks.Task
      description: "Zadanie reprezentujące operację asynchroniczną."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Wywoływanie <> </> *> wiele razy dla tego samego wystąpienia przed ukończeniem zadania.       Wywoływanie <> </> *> i <> </> *> dla tego samego wystąpienia przed ukończeniem zadania.       Połączenie porzuca lub jest zamknięty podczas <> </> *> wykonywania.       Zwrócony w obiekcie zadań <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> obiekt został zamknięty podczas wykonywania metody.       Zwracane w obiekt zadania, wystąpił limit czasu puli połączeń.       Zwrócony w obiekcie zadań <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> obiekt jest zamknięty przed wykonaniem metody.       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>określono w parametrach połączenia."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Zwracane w obiekt zadania, wszelkie błędy zwrócone przez [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] który wystąpił podczas otwierania połączenia."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Data.SqlClient.SqlException
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlException
  nameWithType: SqlException
  fullName: System.Data.SqlClient.SqlException
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy(SqlConnection)
  nameWithType: SqlBulkCopy.SqlBulkCopy(SqlConnection)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(SqlConnection)
- uid: System.Data.SqlClient.SqlConnection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlConnection
  nameWithType: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy(String)
  nameWithType: SqlBulkCopy.SqlBulkCopy(String)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy(String,SqlBulkCopyOptions)
  nameWithType: SqlBulkCopy.SqlBulkCopy(String,SqlBulkCopyOptions)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(String,SqlBulkCopyOptions)
- uid: System.Data.SqlClient.SqlBulkCopyOptions
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlBulkCopyOptions
  nameWithType: SqlBulkCopyOptions
  fullName: System.Data.SqlClient.SqlBulkCopyOptions
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
  nameWithType: SqlBulkCopy.SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
- uid: System.Data.SqlClient.SqlTransaction
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlTransaction
  nameWithType: SqlTransaction
  fullName: System.Data.SqlClient.SqlTransaction
- uid: System.Data.SqlClient.SqlBulkCopy.BatchSize
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: BatchSize
  nameWithType: SqlBulkCopy.BatchSize
  fullName: System.Data.SqlClient.SqlBulkCopy.BatchSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: BulkCopyTimeout
  nameWithType: SqlBulkCopy.BulkCopyTimeout
  fullName: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
- uid: System.Data.SqlClient.SqlBulkCopy.Close
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: Close()
  nameWithType: SqlBulkCopy.Close()
  fullName: System.Data.SqlClient.SqlBulkCopy.Close()
- uid: System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: ColumnMappings
  nameWithType: SqlBulkCopy.ColumnMappings
  fullName: System.Data.SqlClient.SqlBulkCopy.ColumnMappings
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlBulkCopyColumnMappingCollection
  nameWithType: SqlBulkCopyColumnMappingCollection
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
- uid: System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: DestinationTableName
  nameWithType: SqlBulkCopy.DestinationTableName
  fullName: System.Data.SqlClient.SqlBulkCopy.DestinationTableName
- uid: System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: EnableStreaming
  nameWithType: SqlBulkCopy.EnableStreaming
  fullName: System.Data.SqlClient.SqlBulkCopy.EnableStreaming
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: NotifyAfter
  nameWithType: SqlBulkCopy.NotifyAfter
  fullName: System.Data.SqlClient.SqlBulkCopy.NotifyAfter
- uid: System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlRowsCopied
  nameWithType: SqlBulkCopy.SqlRowsCopied
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
- uid: System.Data.SqlClient.SqlRowsCopiedEventHandler
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlRowsCopiedEventHandler
  nameWithType: SqlRowsCopiedEventHandler
  fullName: System.Data.SqlClient.SqlRowsCopiedEventHandler
- uid: System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: System.IDisposable.Dispose()
  nameWithType: SqlBulkCopy.System.IDisposable.Dispose()
  fullName: System.Data.SqlClient.SqlBulkCopy.System.IDisposable.Dispose()
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(DbDataReader)
  nameWithType: SqlBulkCopy.WriteToServer(DbDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DbDataReader)
- uid: System.Data.Common.DbDataReader
  parent: System.Data.Common
  isExternal: false
  name: DbDataReader
  nameWithType: DbDataReader
  fullName: System.Data.Common.DbDataReader
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(DataRow[])
  nameWithType: SqlBulkCopy.WriteToServer(DataRow[])
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataRow[])
- uid: System.Data.DataRow[]
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow[]
  spec.csharp:
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: DataRow[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(DataTable)
  nameWithType: SqlBulkCopy.WriteToServer(DataTable)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataTable)
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(IDataReader)
  nameWithType: SqlBulkCopy.WriteToServer(IDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(IDataReader)
- uid: System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(DataTable,DataRowState)
  nameWithType: SqlBulkCopy.WriteToServer(DataTable,DataRowState)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataTable,DataRowState)
- uid: System.Data.DataRowState
  parent: System.Data
  isExternal: false
  name: DataRowState
  nameWithType: DataRowState
  fullName: System.Data.DataRowState
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DbDataReader)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DbDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DbDataReader)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataRow[])
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataRow[])
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataRow[])
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataTable)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(IDataReader)
  nameWithType: SqlBulkCopy.WriteToServerAsync(IDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(IDataReader)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DbDataReader,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DbDataReader,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DbDataReader,CancellationToken)
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataRow[],CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataRow[],CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataRow[],CancellationToken)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataTable,DataRowState)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataTable,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,CancellationToken)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(IDataReader,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(IDataReader,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(IDataReader,CancellationToken)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataTable,DataRowState,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState,CancellationToken)
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy
  nameWithType: SqlBulkCopy.SqlBulkCopy
- uid: System.Data.SqlClient.SqlBulkCopy.BatchSize*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: BatchSize
  nameWithType: SqlBulkCopy.BatchSize
- uid: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: BulkCopyTimeout
  nameWithType: SqlBulkCopy.BulkCopyTimeout
- uid: System.Data.SqlClient.SqlBulkCopy.Close*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: Close
  nameWithType: SqlBulkCopy.Close
- uid: System.Data.SqlClient.SqlBulkCopy.ColumnMappings*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: ColumnMappings
  nameWithType: SqlBulkCopy.ColumnMappings
- uid: System.Data.SqlClient.SqlBulkCopy.DestinationTableName*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: DestinationTableName
  nameWithType: SqlBulkCopy.DestinationTableName
- uid: System.Data.SqlClient.SqlBulkCopy.EnableStreaming*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: EnableStreaming
  nameWithType: SqlBulkCopy.EnableStreaming
- uid: System.Data.SqlClient.SqlBulkCopy.NotifyAfter*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: NotifyAfter
  nameWithType: SqlBulkCopy.NotifyAfter
- uid: System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: System.IDisposable.Dispose
  nameWithType: SqlBulkCopy.System.IDisposable.Dispose
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer
  nameWithType: SqlBulkCopy.WriteToServer
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync
  nameWithType: SqlBulkCopy.WriteToServerAsync
