### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection
  id: WebPartConnection
  children:
  - System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  - System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  - System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ToString
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  langs:
  - csharp
  name: WebPartConnection
  nameWithType: WebPartConnection
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection
  type: Class
  summary: "Udostępnia obiekt, który umożliwia dwa <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> służy do utworzenia połączenia. Ta klasa nie może być dziedziczona."
  remarks: "W zestawie formantu części sieci Web połączenie jest łączem lub skojarzenie między dwiema <xref:System.Web.UI.WebControls.WebParts.WebPart>(lub innego serwera lub użytkownika) formantów, które pozwalają na udostępnianie danych.</xref:System.Web.UI.WebControls.WebParts.WebPart> Ta możliwość udostępniania danych umożliwia połączonych formanty do użycia w sposób, który przekracza funkcje oferowane przez formanty izolowanym. Na przykład jeśli jeden formant zawiera kod pocztowy danych, a inny formant mógł odczytywania danych i udostępniać informacji o pogodzie lokalnych, na podstawie kodu pocztowego, możliwości połączenia dwóch formantów zawiera więcej wartości dla użytkowników. Aby rozszerzyć w tym przykładzie, inne formanty mógł zostać utworzony również wyświetlane informacje oparte na kod pocztowy, takich jak kontrola wraz z łączami do lokalnych wiadomości, a tych kontrolek, które mogą pracować z danymi kod pocztowy może udostępniać dane po jednym formant, który zawiera kod pocztowy. Tworzyć i zarządzać połączeń między takich kontroli zgodne z przeglądarki sieci Web, przy użyciu standardowych połączeń interfejsu użytkownika (UI) udostępniane przez użytkowników końcowych w aplikacji sieci Web części <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>formant lub przy użyciu niestandardowego interfejsu użytkownika, dostarczone przez dewelopera.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>       W tym omówieniu klasy WebPartConnection jest ogólnym zestawieniu podstawowe szczegóły dotyczące tworzenia połączenia. Aby uzyskać więcej informacji na temat określonych składników i wymagania związane z tworzeniem połączeń, zobacz [Omówienie połączeń części sieci Web](~/add/includes/ajax-current-ext-md.md), lub Zobacz klasy odwołania i wspomnianego dyskusji następujące przykłady kodu. Kilka aspektów podstawowych składników Web Part połączenia: - dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart>formantów.</xref:System.Web.UI.WebControls.WebParts.WebPart> Połączenie każdej części sieci Web składa się z dwóch formantów. Istnieje możliwość sterowania jednocześnie brać udziału w więcej niż jedno połączenie, ale każdego pojedynczego połączenia składa się z dokładnie dwóch formantów. Formanty mogą dziedziczyć bezpośrednio po <xref:System.Web.UI.WebControls.WebParts.WebPart>klasy podstawowej ani ich nie mogą być inne formanty serwera, łącznie z formantami, niestandardowe kontrolki serwera i kontrolek użytkownika programu ASP.NET.</xref:System.Web.UI.WebControls.WebParts.WebPart> Formanty, które nie pochodzą z <xref:System.Web.UI.WebControls.WebParts.WebPart>klasy, jeśli umieszczone w <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>strefy, automatycznie są ujęte w <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>obiektu w czasie wykonywania, która umożliwi im dziedziczyć <xref:System.Web.UI.WebControls.WebParts.WebPart>klasy i funkcja jako środowiska wykonawczego <xref:System.Web.UI.WebControls.WebParts.WebPart>formantów.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart>      -Formantów znajdujących się w <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>strefy.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> Zarówno <xref:System.Web.UI.WebControls.WebParts.WebPart>kontrolek i innego typu kontrolki serwera musi znajdować się w <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>strefy, aby można było uczestniczyć w połączeń części sieci Web (i większość funkcji części sieci Web).</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart>      -Konsumenci i dostawcy. W związku z każdej części sieci Web istnieją dwie opcje: Dostawca danych i konsumentów danych. Dostawca dostarcza danych do konsumenta za pomocą metody określonej wywołania zwrotnego, która zwraca dane w postaci interfejsu. (Na przykład sposobu tworzenia i określić metodę wywołania zwrotnego, zobacz przykład części tego tematu). Ta metoda wywołania zwrotnego jest znany jako punkt połączenia dostawcy. Szczegóły tego punktu połączenia (jego nazwa &quot;przyjaznym&quot;, identyfikator i typ zwróconego interface) są zawarte w <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>obiekt skojarzony z formantem dostawcy.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Klient odbiera dane za pomocą określonej metody, który może zaakceptować wystąpienia interfejsu. Ta metoda jest znany jako punkt połączenia klienta i szczegóły punktu połączenia (nazwa, identyfikator i typ interfejsu) są zawarte w <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>obiekt skojarzony z formantem konsumentów.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>      -Formanty zgodny lub nieprawidłowy transformatora. W przypadku połączenia do pracy klienta oraz dostawcy musi być zgodne (co oznacza, że ich metod punktu określonego połączenia może współpracować z tego samego typu interfejsu) lub może być <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>obiektu stanie tłumaczenia typu udostępnianymi przez dostawcę na typ rozpoznawany przez konsumenta.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>      -WebPartConnection obiektu. Połączenie z istnieje musi być wystąpieniem klasy WebPartConnection, który zawiera odwołania do formantów dostawcy i klienta oraz szczegóły dotyczące ich punkty połączenia. Jeśli dostawcy i klienta są niezgodne, a zamiast tego użyć <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>obiekt, aby połączyć, odwołuje się do połączenia transformatora.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>      — Sposób nawiązywania połączenia. Po zgodne kontroli klienta i dostawcy zostały prawidłowo zaprojektowane z metody punktu połączenia i umieścić w strefie, a obiekt WebPartConnection jest dostępny, ostatniego konieczne podstawowe kroku jest zainicjowanie połączenia. Jednym ze sposobów przyczyną może być jest przeznaczony dla użytkowników utworzyć połączenie za pośrednictwem interfejsu użytkownika. Jeśli umieścisz `<asp:connectionszone>` elementu na stronie, a drugi wymaganych składników dla połączenia są w miejscu, w czasie wykonywania użytkownika można przełączać strony do trybu wyświetlania connect, kliknij przycisk Zlecenie Połącz w menu zleceń dostawcy lub konsumenta i połączenie interfejsu użytkownika (na podstawie <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>kontroli) będą wyświetlane.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Za pośrednictwem tego interfejsu użytkownika użytkownik może inicjować połączenia. Innym sposobem jest zainicjowanie połączenia jest przeprowadzenie programowo. W obu przypadkach jest taka sama czy za pośrednictwem interfejsu użytkownika, lub programowo, metody podstawowej inicjuje połączenie. Wywołania aplikacji <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>— Metoda (lub <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>metodę, jeśli używanie transformatora) na <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontrolować, przekazanie do niego, dostawca, konsumenta i ich obiekty punktu odpowiednie połączenie, a metoda zwraca obiekt WebPartConnection.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>       Klasa WebPartConnection definiuje obiekt, który hermetyzuje istotne szczegóły połączenia między dwiema <xref:System.Web.UI.WebControls.WebParts.WebPart>formantów.</xref:System.Web.UI.WebControls.WebParts.WebPart> Klasa zawiera prawie tylko właściwości powiązanych z szczegóły danego połączenia. Kilka właściwości dotyczą kontroli klienta w połączeniu. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A>Właściwość odwołuje się do konsumenta samej kontrolce, a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A>właściwość odwołuje się identyfikator klienta.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>Odwołuje się obiekt, który zawiera szczegółowe informacje o punkt połączenia klienta, że użytkownik <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A>Właściwości.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>Właściwość odwołuje się identyfikator <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>obiektu.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> Te właściwości związanych z odbiorców połączenia musi mieć wartość do nich przypisane do utworzenia połączenia.       Klasa WebPartConnection ma również kilka właściwości, które odnoszą się do sterowania dostawcy w połączeniu i odpowiadają one właściwości dla konsumenta. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A>Właściwość odwołuje się do dostawcy samej kontrolce, podczas <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A>właściwość odwołuje się do jej identyfikatora.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>Odwołań do właściwości <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>obiektu, a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>właściwość odwołuje się identyfikator punktu połączenia dostawcy.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>       Kilka właściwości dotyczą stan połączenia. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A>Właściwość wskazuje, czy połączenie jest aktywne (obecnie wymiana danych) lub (nadal połączony, ale nie jest aktywnie udostępniania danych nieaktywnych).</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>Właściwość wskazuje, czy połączenie jest udostępnione (dostępne dla wszystkich użytkowników strony) lub połączenie specyficzne dla użytkownika i <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>właściwość wskazuje, czy formant jest statyczny (deklaracja w znaczniku strony i w związku z tym stałe) lub dynamiczny (utworzone programowo, co oznacza, że można go usunąć).</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>"
  example:
  - "The following code example demonstrates how to create a simple connection between two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The example demonstrates three ways of forming a connection: declaratively, by placing tags for the connection in the markup of the Web page; programmatically, by creating the connection in code; and through the UI, by placing a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control on the page, which enables users to establish a connection.  \n  \n The code example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_343_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_343_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. Its `ProvideIZipCode` method is the callback method that implements the interface's only member. The method simply returns an instance of the interface. Note that the method is marked with a `ConnectionProvider` attribute in its metadata. This is the mechanism for identifying the method as the callback method for the provider's connection point. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_343_2.vb)]\n [!code-cs[WebParts_WebPartConnection_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_343_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are the `Register` directives for the user control and the custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. Because the example assumes dynamic compilation of the controls, the source code for the controls should be in an App_Code subfolder; the `Register` tag in the page references only an arbitrary tag prefix and the namespace of the controls. The custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (the provider and consumer) are declared within the Web page's `<asp:webpartzone>` element, inside a `<zonetemplate>` element.  \n  \n The page provides three ways to form a connection between the custom controls. The first method is declarative. In the markup for the page, a <`StaticConnections>` element is declared, and within that is an `<asp:WebPartConnections>` element, with the various consumer and provider details of the connection specified as attributes. This is one way to create a connection, by declaring it directly in the Web page, specifically within the `<asp:WebPartManager>` element. Because of this static connection, a connection between the two custom controls is created immediately the first time the page loads.  \n  \n A second method for forming a connection between the controls is provided by the `<asp:connectionszone>` element in the page. If a user switches a page into connect display mode at run time, and clicks a connect verb on one of the custom controls, the `<asp:connectionszone>` element automatically renders the UI for creating a connection.  \n  \n The page also demonstrates a third way of creating a connection, which is to do it programmatically. In the `Button1_Click` method, the code creates a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object for the provider control, and retrieves its connection point details by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method. It carries out a similar task for the consumer control, calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> method. Finally, it creates the new WebPartConnection object by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control.  \n  \n [!code-cs[WebParts_WebPartConnection_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_343_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_343_3.aspx)]  \n  \n After you load the Web page in a browser, the first connection already exists because it is declared within the `<StaticConnections>` element. Enter some text in the **ZIP Code Provider** control, and it will be displayed in the consumer control. Next, disconnect the two controls. Using the **Display Mode** drop-down list control, change the page to connect display mode. Click the verbs menu (represented by a downward arrow in the title bar) for each of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and notice that each has a **Connect** option. This is a connect verb, which appears in the verbs menu only when the page is in connect mode. Click the connect verb on one of the controls, and the connection UI provided by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control appears. Click the **Disconnect** button to end the static connection between the controls. Use the **Display Mode** control to return the page to browse mode. Try to enter some new text in the provider again, and note that because the controls are disconnected, the text fails to update in the consumer control.  \n  \n Next, use the same method as above to switch the page into connect display mode again. Click a connect verb on one of the controls. Click the **Create a Connection** link, and use the UI provided by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control to create a connection between the controls. This is the second method for creating a connection. Note that as soon as the connection is formed, the last string you entered in the provider control (that failed to appear because the controls were disconnected) suddenly appears in the consumer, because the connection has been recreated. Click the **Disconnect** button to end the current connection that you just created. Return the page to browse mode. Enter some new text in the provider to demonstrate that the text is not updated, and that the controls are again disconnected.  \n  \n Return the page to connect display mode. Instead of clicking a connect verb, click the **Connect WebPart Controls** button, which illustrates the third method of forming a connection. This approach connects the controls programmatically in one simple step without having to use the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. Note that as the connection is created, the last string you entered in the provider suddenly appears in the consumer control."
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]

      [System.Web.UI.ParseChildren(true, "Transformers")]

      public sealed class WebPartConnection
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: WebPartConnection()
  nameWithType: WebPartConnection.WebPartConnection()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.WebPartConnection()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> klasy."
  remarks: "Konstruktor WebPartConnection jest publiczny, dzięki czemu analizatora składni ASP.NET można utworzyć wystąpienia, gdy połączenie jest zadeklarowany w znaczniku strony sieci Web; Ten konstruktor nie jest przeznaczony do użycia w kodzie developer.       Jeśli chcesz utworzyć <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>programowo, obiekt, należy użyć <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName>lub <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName>metody w <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontroli.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Te metody obsługi wielu szczegółów tworzenia połączenia, a następnie wróć <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>obiektu.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection>       Konstruktor WebPartConnection <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>klasy ustawia wartości <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>i <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>właściwości `true`.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection> W związku z tym domyślny stan nowego połączenia ma być statyczne (co oznacza, że jest on zadeklarowany w znaczniku strony sieci Web zawierającej) i udostępnionych (widoczny dla wszystkich użytkowników strony). Będzie to miało miejsce podczas dodawania połączenia w typowy scenariusz przez zadeklarowanie połączenia w znaczniku strony z `<asp:webpartconnection>` elementu. Jednak w innych warunkach połączenia będą miały różne wartości tych właściwości. Na przykład programowo dodać połączenie przez utworzenie obiektu połączenia w kodzie, a użytkownik jest wyświetlanie strony w zakresie personalizacji użytkownika domyślnego, połączenie zostanie utworzona jako dynamiczny, połączenie na user(visible only to the specific user).      > [!NOTE] > <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>i <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>Właściwości są tylko do odczytu, a te właściwości, które określają rodzaj połączenia są ustawiane wewnętrznie przez <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontroli w zależności od tego, jak tworzone jest połączenie (deklaratywnie w znacznikach strony lub programistycznie za pomocą kodu lub interfejsu użytkownika).</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>"
  syntax:
    content: public WebPartConnection ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  id: Consumer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Consumer
  nameWithType: WebPartConnection.Consumer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Pobiera <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> obiekt, który działa jako kontrolka użytkownika w połączeniu."
  remarks: "Połączenie każdej części sieci Web składa się z dwóch formantów, które udostępniają danych. Jeden formant zachowuje się jak dostawcy danych, a inny formant zachowuje się jak konsumenta, otrzymywanie i przetwarzania danych od dostawcy. Właściwość konsumenta pobiera odwołanie do <xref:System.Web.UI.WebControls.WebParts.WebPart>kontrolować działając jako klient w relacji połączenia.</xref:System.Web.UI.WebControls.WebParts.WebPart>"
  example:
  - "The following code example demonstrates the programmatic use of the Consumer property.  \n  \n The code example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_Consumer#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_487_1.ascx)]\n [!code-cs[WebParts_WebPartConnection_Consumer#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_487_1.ascx)]  \n  \n The second part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that serve as the consumer and the provider for the connection, and an interface used for the connection points. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_Consumer#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_487_2.cs)]\n [!code-vb[WebParts_WebPartConnection_Consumer#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_487_2.vb)]  \n  \n The third part of the code example is the code for the Web page that hosts the controls and demonstrates the use of the Consumer property. Near the top of the page are the `Register` directives for the user control and the custom controls. Because this example uses dynamic compilation, the `Register` directive for the source file does not need to reference an assembly name; it includes only an arbitrary tag prefix and the namespace of the controls. In the `Button2_Click` method, the code accesses the connection object through the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control, and gets a reference to the consumer control.  \n  \n [!code-cs[WebParts_WebPartConnection_Consumer#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_487_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_Consumer#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_487_3.aspx)]  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Use the **Connect WebPart Controls** button, or the provided connection user interface (UI), to create a connection between the two controls. Click the **Display Consumer Info** button to run the code that demonstrates the Consumer property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPart Consumer { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> reprezentujący kontroli składników Web Part działający jako odbiorców w połączeniu."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Długość <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*>Właściwości jest równa zero.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  id: ConsumerConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ConsumerConnectionPoint
  nameWithType: WebPartConnection.ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Pobiera obiekt, który służy jako punkt połączenia dla formantu, który działa jako klient w połączeniu."
  remarks: "Jeden z kroków wymaganych do utworzenia połączenia między dwiema <xref:System.Web.UI.WebControls.WebParts.WebPart>formantów jest utworzenie punktów połączeń dla każdej kontrolki.</xref:System.Web.UI.WebControls.WebParts.WebPart> Punkt połączenia klienta jest obiekt, który zawiera informacje o sposobie połączyć z kontrolą, działając jako klient. W kodzie źródłowym konsumenta, musi być jedną z metod identyfikowany z `ConnectionConsumer` atrybutu. <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>Obiekt, który jest skojarzony z formantem konsumenta zawiera szczegółowe informacje dotyczące metody i atrybut, tym identyfikator dla metody do użycia w interfejsie użytkownika (UI), nazwa wyświetlana i typ interfejsu, które metody mogą pobierać.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Ten zestaw informacje na temat konsumenta, jego metodę tworzące połączenia i typ interfejsu, który obsługuje usługę, zbiorczo stanowi punkt połączenia klienta.       Domyślnie <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>obiektu mogą łączyć się tylko jeden z <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>obiektu naraz.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Klient może mieć wiele metod zidentyfikowane jako punkty połączenia możliwe konsumenta, ale konsumenta tylko mogą uczestniczyć w ramach jednego połączenia klientów (w związku z tym tylko jednego z jego punktów połączenia klienta mogą być aktywne) w czasie. Z kolei <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>można nawiązać połączenia z dowolną liczbę <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>obiektów.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> To zachowanie domyślne można zmienić przez zastąpienie <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A>Właściwość <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>atrybutu.</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A>"
  example:
  - "The following code example demonstrates the programmatic use of the ConsumerConnectionPoint property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1183_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1183_1.ascx)]  \n  \n The second part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that serve as the consumer and the provider for the connection, and an interface used for the connection points. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1183_2.vb)]\n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1183_2.cs)]  \n  \n The third part of the code example is the code for the Web page that hosts the controls and demonstrates the use of the ConsumerConnectionPoint property. In the `Button1_Click` method, all the objects required to form a connection are created, including a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object. These objects are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create the connection. In the `Button2_Click` method, the code accesses the ConsumerConnectionPoint property and displays some details of the connection point.  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1183_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1183_3.aspx)]  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Use the **Connect WebPart Controls** button, or the provided connection UI, to create a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that demonstrates the ConsumerConnectionPoint property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&quot;> </xref> skojarzony z formantem odbiorców w połączeniu."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  id: ConsumerConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ConsumerConnectionPointID
  nameWithType: WebPartConnection.ConsumerConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Pobiera lub ustawia wartość właściwości połączenia, który odwołuje się do Identyfikatora obiektu służy jako punkt połączenia klienta dla tego połączenia."
  remarks: "Połączenia statyczne zadeklarowany w znaczniku strony sieci Web, deweloperzy można określić punkt połączenia klienta, które będą używane dla połączenia przez przypisanie wartości do `ConsumerConnectionPointID` atrybutu `<asp:webpartconnection>` elementu. Jeśli wartość nie jest przypisany do atrybutu, <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>wartość właściwości jest używany.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       Podczas tworzenia dynamicznych połączeń (programowe), zwykle nie należy ustawiać wartość właściwości ConsumerConnectionPointID. Możesz po prostu wywołać <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>Metoda <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontrolować, przekazanie do niego konsumenta i połączenia klienta punktu obiekty (wraz z wymaganych parametrów), a ta metoda określa identyfikator jest prawidłowy na potrzeby punkt połączenia klienta.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> Podobnie podczas odłączania, możesz wywołać <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>metody bez konieczności Określ wartość właściwości ConsumerConnectionPointID.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>      > [!NOTE] > Identyfikator punkt połączenia klienta można określić po wskazaniu <xref:System.Web.UI.WebControls.WebParts.WebPart>lub inny formant serwera klientów.</xref:System.Web.UI.WebControls.WebParts.WebPart> Należy określić metody pobierającej wystąpienia interfejs dostarczony przez formant dostawcy lub transformatora konsumenta. Aby zidentyfikować metody, oznacz go z `ConnectionConsumer` atrybutu kod. Po dodaniu tego atrybutu można dodać parametru wartości opcjonalny ciąg, który służy jako identyfikator dla klienta <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>obiektu.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Jeśli zostanie podana wartość dla parametru opcjonalnego identyfikator tej wartości staje się wartości właściwości ConsumerConnectionPointID dla połączenia. Jeśli nie zostanie podana wartość Identyfikatora <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>wartość właściwości jest używany.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>"
  example:
  - "The following code example shows the declarative and programmatic use of the ConsumerConnectionPointID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/add/codesnippet/csharp/420efe59-4fbb-4b23-bdd1-_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/add/codesnippet/visualbasic/420efe59-4fbb-4b23-bdd1-_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/add/codesnippet/csharp/420efe59-4fbb-4b23-bdd1-_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/add/codesnippet/visualbasic/420efe59-4fbb-4b23-bdd1-_2.vb)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ConsumerConnectionPointID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Then, in the `Button2_Click` method, the code accesses the ConsumerConnectionPointID property.  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/add/codesnippet/csharp/420efe59-4fbb-4b23-bdd1-_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/add/codesnippet/visualbasic/420efe59-4fbb-4b23-bdd1-_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that accesses the ConsumerConnectionPointID property value. The value is written out in a label below the controls."
  syntax:
    content: public string ConsumerConnectionPointID { get; set; }
    return:
      type: System.String
      description: "Ciąg zawierający identyfikator połączenia klienta punktu."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  id: ConsumerID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ConsumerID
  nameWithType: WebPartConnection.ConsumerID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Pobiera lub ustawia wartość właściwości połączenia, który odwołuje się identyfikator <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> kontroli działania klientów dla tego połączenia."
  remarks: "Wartość właściwości ConsumerID jest wymagana podczas tworzenia połączenia między <xref:System.Web.UI.WebControls.WebParts.WebPart>formantów.</xref:System.Web.UI.WebControls.WebParts.WebPart> Jeśli wartość nie jest przypisany do właściwości, jest zwracany wyjątek, kiedy <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontroli umożliwia przeprowadzenie próby aktywacji połączenia.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example shows the declarative and programmatic use of the ConsumerID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerID#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1237_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerID#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1237_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerID#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1237_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ConsumerID#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1237_2.vb)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ConsumerID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Then, in the `Button2_Click` method, the code accesses the value of the ConsumerID property and displays it in a label.  \n  \n [!code-vb[WebParts_WebPartConnection_ConsumerID#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1237_3.aspx)]\n [!code-cs[WebParts_WebPartConnection_ConsumerID#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1237_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **Consumer Details** button to run the code that accesses the ConsumerID property value."
  syntax:
    content: public string ConsumerID { get; set; }
    return:
      type: System.String
      description: "Ciąg, który zawiera identyfikator formantu, działając jako klient w połączeniu."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  id: ID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ID
  nameWithType: WebPartConnection.ID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Pobiera lub ustawia identyfikator <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> obiektu."
  remarks: "Każdy <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>obiekt ma unikatową wartość przypisana do jego właściwość Identyfikatora.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> To, aby upewnić się, że istnieje możliwość rozróżnienia wielu połączeń.       W przypadku utworzenia statyczne połączenie przez zadeklarowanie `<asp:webpartconnection>` element strony sieci Web, a nie należy przypisywać wartości do `ID` atrybutu dla połączenia wyjątek jest zgłaszany, gdy <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontroli umożliwia przeprowadzenie próby aktywacji połączenia.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>       Gdy <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontroli tworzy nowe połączenie dynamicznych, wywołuje <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A>metodę, aby wygenerować unikatowego Identyfikatora dla połączenia.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example shows the declarative and programmatic use of the ID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ID#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_443_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ID#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_443_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ID#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_443_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ID#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_443_2.vb)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Here, the ID property is not required, because the connection is dynamic, and the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control assigns an ID to the connection. In the `Button2_Click` method, the code accesses the value of the ID property and displays it in a label.  \n  \n [!code-cs[WebParts_WebPartConnection_ID#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_443_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ID#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_443_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **Connection Details** button to run the code that accesses the ID property value."
  syntax:
    content: public string ID { get; set; }
    return:
      type: System.String
      description: "Ciąg zawierający identyfikator <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  id: IsActive
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: IsActive
  nameWithType: WebPartConnection.IsActive
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Pobiera wartość wskazującą, czy <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> obiekt jest obecnie stanie wymiany danych między formantami dostawcy i klienta."
  remarks: "Właściwość IsActive wskazuje stan <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>obiektu.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Gdy połączenie jest w tym stanie, formantów dostawcy i klienta w połączeniu są komunikujące się i wymieniać dane za pomocą wspólnego interfejsu lub <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>obiektu.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       Gdy użytkownik odwiedza renderowanej strony zawiera nawiązane połączenie w trybie normalnym przeglądania, połączenie jest zwykle active (chyba że nie można aktywować ze względu na konflikt niektórych lub innych problem podczas ładowania strony). Na wczesnym etapie cyklu życia strony i kontrolki, wartość właściwości jest `false`. Tuż po aktywowaniu połączenia <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated>zdarzenia w <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontroli jest wywoływane.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> W szczególności połączenia została aktywowana po klienta ma pobrać wystąpienia określonego interfejsu od dostawcy lub <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>obiektu.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       Warto wiedzieć, czy połączenie jest aktywne w sytuacjach, w których mogą wystąpić konflikty lub problemy z synchronizacją ze względu na wiele połączeń na stronie. Na przykład, jeśli istnieje jakaś konflikt między dwa połączenia <xref:System.Web.UI.WebControls.WebParts.WebPartManager>formant ma opcję nie aktywacji jednego z połączeń, aby uniknąć konfliktu.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example demonstrates use of the IsActive property.  \n  \n The example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsActive#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1322_1.cs)]\n [!code-vb[WebParts_WebPartConnection_IsActive#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1322_1.vb)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. Within the `<script>` element are four event handlers. Each event handler checks the value of the IsActive property on the static connection, and writes a message to the <xref:System.Web.UI.WebControls.Label> control indicating whether the connection is active or inactive at that state of the page and control life cycle. This demonstrates at what point the connection becomes active, and that it remains active after the page is rendered.  \n  \n [!code-cs[WebParts_WebPartConnection_IsActive#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1322_2.aspx)]\n [!code-vb[WebParts_WebPartConnection_IsActive#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1322_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created, and messages have already been written to the labels showing whether the connection was active at various points in the page and control life cycle. Click the **Connection Details** button, and note that the connection is not active at that point, but that the connection is reactivated each time after the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> event, and that it is still active (and will remain so) after the <xref:System.Web.UI.Control.PreRender> event of the page."
  syntax:
    content: public bool IsActive { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli połączenie jest aktywne; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  id: IsShared
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: IsShared
  nameWithType: WebPartConnection.IsShared
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Pobiera wartość wskazującą, czy <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> obiekt jest widoczny dla wszystkich użytkowników lub tylko do bieżącego użytkownika."
  remarks: "W przypadku poszczególnych <xref:System.Web.UI.WebControls.WebParts.WebPart>formantów, <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>obiektu mogą być udostępniane wystąpienia użytkownika.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> </xref:System.Web.UI.WebControls.WebParts.WebPart> Udostępnione wystąpienie oznacza, że połączenie jest widoczne dla wszystkich użytkowników strony sieci Web i wystąpienia użytkownika oznacza, że połączenie jest widoczna tylko dla określonego użytkownika.       Ogólnie rzecz biorąc sposób połączenia jest dodany do strony określa, czy połączenie jest udostępnione. Jeśli połączenie jest zadeklarowany w znaczniku strony sieci Web, a następnie połączenie jest udostępniana i wartość właściwości IsShared jest `true`. Ponadto jeśli strony sieci Web wspólnego zakresu personalizacji po dodaniu połączenia, połączenie jest również udostępniony. Zazwyczaj, gdy użytkownik używa `<asp:connectionszone>` interfejsu użytkownika (UI), aby dodać połączenie strony jest w zakresie personalizacji użytkownika, więc połączenie nie jest udostępniana i wartość właściwości IsShared jest `false`."
  example:
  - "The following code example demonstrates programmatic use of the IsShared property.  \n  \n The code example has five parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An entry in the Web.config file that is required to run the example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsShared#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_784_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_IsShared#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_784_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsShared#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_784_2.cs)]\n [!code-vb[WebParts_WebPartConnection_IsShared#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_784_2.vb)]  \n  \n The third part of the code example is the Web page. In the `Button2_Click` method, it checks the IsShared property of the existing connection and displays the result on the page.  \n  \n [!code-cs[WebParts_WebPartConnection_IsShared#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_784_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_IsShared#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_784_3.aspx)]  \n  \n The fourth part of the code example is an entry in the Web.config file that is required for the user account that will be running the example to be able to edit the page in shared personalization scope. To enable this, you must have an entry in the Web.config file within the `<system.web>` section that looks like the following example.  \n  \n```  \n<webParts>  \n  <personalization>  \n    <authorization>  \n      <allow users=\"UserAccount\"  \n             roles=\"admin\"  \n             verbs=\"enterSharedScope\"/>  \n    </authorization>            \n  </personalization>  \n</webParts>  \n```  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect display mode. Click the **Connect WebPart Controls** button to form a connection. Next, click the **Connection Details** button to display whether the connection is shared. If you created the connection with the page in the default user personalization scope, the IsShared property value should be `false` for the connection.  \n  \n On the verbs menu of one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (indicated by the downward arrow in the title bar), click the connect verb. When the connection UI appears, click the **Disconnect** button to end the connection. Use the **Display Mode** control to return the page to browse mode.  \n  \n In the **Display Mode** control, select the **Shared** option to switch the page into shared personalization scope. Follow the same steps as those above to create a connection, and again click the **Connection Details** button to display whether the connection is shared. In this case, the value of the IsShared property should be `true`."
  syntax:
    content: public bool IsShared { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli połączenie jest udostępniana; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  id: IsStatic
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: IsStatic
  nameWithType: WebPartConnection.IsStatic
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Pobiera wartość wskazującą, czy <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> obiektu jest zadeklarowany w znaczniku strony sieci Web lub utworzone programowo."
  remarks: "Połączenia między formantami części sieci Web może być statyczne lub dynamiczne. Połączenia statyczne jest zadeklarowany w znaczniku strony sieci Web przy użyciu `<asp:WebPartConnection>` elementu. Dynamiczne połączenia są tworzone programowo lub gdy użytkownik tworzy połączenie za pośrednictwem interfejsu użytkownika (UI), zdefiniowane przez <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>kontroli.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>       Połączenia statyczne są obiekty udostępnione, co oznacza, że są one dostępne dla wszystkich użytkowników strony sieci Web. Ponadto są zasadniczo trwałe, ponieważ statycznych, takich jak <xref:System.Web.UI.WebControls.WebParts.WebPart>kontroli, nie może być trwale usunięte.</xref:System.Web.UI.WebControls.WebParts.WebPart>      > [!NOTE] > Podczas, gdy nie można trwale usunąć obiektu połączenia statyczne, jego może zostać trwale rozłączona. W takim przypadku odłączony obiekt czy istnieje na serwerze, ale użytkownik końcowy nie będzie świadomość istnienia obiektu na stronie."
  example:
  - "The following code example demonstrates the programmatic use of the IsStatic property.  \n  \n The code example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsStatic#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_499_1.cs)]\n [!code-vb[WebParts_WebPartConnection_IsStatic#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_499_1.vb)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. The `Button1_Click` method accesses the IsStatic property to check whether the connection is static.  \n  \n [!code-vb[WebParts_WebPartConnection_IsStatic#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_499_2.aspx)]\n [!code-cs[WebParts_WebPartConnection_IsStatic#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_499_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created. Enter some text in the provider control, and note that the text is displayed in the consumer control. Click the **Connection Details** button to display the value of the IsStatic property."
  syntax:
    content: public bool IsStatic { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli połączenie jest statyczny; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  id: Provider
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Provider
  nameWithType: WebPartConnection.Provider
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Pobiera <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> formant, który działa jako dostawca w połączeniu składników Web Part."
  remarks: "Połączenie każdej części sieci Web składa się z dwóch <xref:System.Web.UI.WebControls.WebParts.WebPart>Formanty — klienta i dostawcy — i właściwości dostawcy zwraca odwołanie do formantu dostawcy w połączeniu.</xref:System.Web.UI.WebControls.WebParts.WebPart>       Podobnie jak jego odpowiednik w przypadku połączenia (kontrola użytkownika) kontrola dostawcy jest niezbędny do ustanowienia połączenia. Czy należy utworzyć połączenie programowe lub przez zadeklarowanie go w formacie trwałości strony, należy określić formantu, który ma działać jako dostawca dla połączenia."
  example:
  - "The following code example demonstrates use of the Provider property.  \n  \n The code example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_Provider#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_43_1.vb)]\n [!code-cs[WebParts_WebPartConnection_Provider#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_43_1.cs)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. Notice that in the `<asp:webpartconnection>` element, the `ProviderID` attribute has the ID of the provider control assigned to it. This is required to identify the provider for the static connection. The `Button1_Click` method accesses the Provider property and writes some of its details to a label.  \n  \n [!code-cs[WebParts_WebPartConnection_Provider#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_43_2.aspx)]\n [!code-vb[WebParts_WebPartConnection_Provider#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_43_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created. Enter some text in the provider control, and note that the text is displayed in the consumer control. Click the **Provider Details** button to display some of the property values accessed through the Provider property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPart Provider { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> działający jako dostawca danych."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Długość <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*>wartość właściwości jest równa zero.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  id: ProviderConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ProviderConnectionPoint
  nameWithType: WebPartConnection.ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Pobiera obiekt, który służy jako punkt połączenia dla <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> kontrolować działający jako dostawca dla połączenia."
  remarks: "Jeden z kroków wymaganych do utworzenia połączenia między dwiema <xref:System.Web.UI.WebControls.WebParts.WebPart>formantów jest utworzenie punktów połączeń dla każdej kontrolki.</xref:System.Web.UI.WebControls.WebParts.WebPart> Punkt połączenia dostawcy jest obiekt, który zawiera informacje o sposobie połączyć z kontrolą pełnią funkcję dostawcy usług. W kodzie źródłowym dostawcy, musi być jedną z metod identyfikowany z `ConnectionProvider` atrybutu. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>Który jest skojarzony z dostawcą formant zawiera szczegółowe informacje dotyczące metody i atrybut, tym identyfikator dla metody, nazwa wyświetlana do użycia w interfejsie użytkownika (UI), i wpisz wystąpienie interfejsu, które metody można wrócić do sterowania konsumenta.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Ten zestaw informacji o dostawcy, jego metodę tworzące połączenia i typ interfejsu, który zapewnia, zbiorczo stanowi punkt połączenia dostawcy.       Domyślnie <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>mogą łączyć się tylko jeden z <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>obiektu naraz.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Klient może mieć wiele metod zidentyfikowane jako punkty połączenia możliwe konsumenta, ale konsumenta tylko mogą uczestniczyć w ramach jednego połączenia klientów (w związku z tym tylko jednego z jego punktów połączenia klienta mogą być aktywne) w czasie. Z kolei <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>można nawiązać połączenia z dowolną liczbę <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>obiektów domyślnie.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Na przykład formant dostawcy, który zawiera kod pocztowy może zostać połączona z wielu formantów konsumenta, które używają kodu pocztowego można utworzyć różne rodzaje danych oparte na kod pocztowy, takich jak dane o pogodzie, wiadomości i tak dalej. To zachowanie domyślne można zmienić przez zastąpienie <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A>Właściwość <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>atrybutu.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A>"
  example:
  - "The following code example demonstrates the programmatic use of the ProviderConnectionPoint property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_471_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_471_1.ascx)]  \n  \n The second part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that serve as the consumer and the provider for the connection, and an interface used for the connection points. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_471_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_471_2.vb)]  \n  \n The third part of the code example is the code for the Web page that hosts the controls and demonstrates the use of the ProviderConnectionPoint property. In the `Button1_Click` method, all the objects required to form a connection are created, including a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object. Note the call to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. The various created objects are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create the connection. In the `Button2_Click` method, the code accesses the ProviderConnectionPoint property and displays some details of the connection point.  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_471_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_471_3.aspx)]  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Use the **Connect WebPart Controls** button, or the provided connection UI, to create a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that demonstrates the ProviderConnectionPoint property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&quot;> </xref> skojarzony z formantem dostawcy w połączeniu."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  id: ProviderConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ProviderConnectionPointID
  nameWithType: WebPartConnection.ProviderConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Pobiera lub ustawia wartość właściwości połączenia, który odwołuje się do Identyfikatora obiektu służy jako punkt połączenia dostawcy dla tego połączenia."
  remarks: "Połączenia statyczne zadeklarowany w znaczniku strony sieci Web, deweloperzy można określić punktu połączenia dostawcy, który będzie używany dla połączenia przez przypisanie wartości do `ProviderConnectionPointID` atrybutu `<asp:webpartconnection>` elementu. Jeśli wartość nie jest przypisany do atrybutu, <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>wartość właściwości jest używany.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       Podczas tworzenia dynamicznych połączeń (programowe), zwykle nie należy ustawiać wartość właściwości ProviderConnectionPointID. Możesz po prostu wywołać <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>Metoda <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontrolować, przekazywanie do niego dostawcy i połączenia z dostawcą punktu obiekty (wraz z wymaganych parametrów), a ta metoda określa identyfikator jest prawidłowy na potrzeby punktu połączenia dostawcy.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> Podobnie podczas odłączania, możesz wywołać <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>metody bez konieczności Określ wartość właściwości ProviderConnectionPointID.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>      > [!NOTE] > Identyfikator punkt połączenia dostawcy można określić po wskazaniu <xref:System.Web.UI.WebControls.WebParts.WebPart>lub inny formant serwera jako dostawca.</xref:System.Web.UI.WebControls.WebParts.WebPart> Należy określić, metody wywołania zwrotnego w dostawcy, który służy wystąpienie interfejsu zawierający dane z klientem. Aby zidentyfikować metody, oznacz go z `ConnectionProvider` atrybutu kod. Po dodaniu tego atrybutu można dodać parametru wartości opcjonalny ciąg, który służy jako identyfikator dla dostawcy <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>obiektu.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Jeśli zostanie podana wartość dla parametru opcjonalnego identyfikator tej wartości staje się wartości właściwości ProviderConnectionPointID dla połączenia. Jeśli nie zostanie podana wartość Identyfikatora <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontroli przypisuje domyślny identyfikator podczas tworzenia obiektu.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example shows the declarative and programmatic use of the ProviderConnectionPointID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/add/codesnippet/csharp/8cfbdeee-12ad-4cb7-abb6-_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/add/codesnippet/visualbasic/8cfbdeee-12ad-4cb7-abb6-_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/add/codesnippet/visualbasic/8cfbdeee-12ad-4cb7-abb6-_2.vb)]\n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/add/codesnippet/csharp/8cfbdeee-12ad-4cb7-abb6-_2.cs)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ProviderConnectionPointID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point (and the ID) defined in the provider control. Then, in the `Button2_Click` method, the code accesses the ProviderConnectionPointID property.  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/add/codesnippet/csharp/8cfbdeee-12ad-4cb7-abb6-_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/add/codesnippet/visualbasic/8cfbdeee-12ad-4cb7-abb6-_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that accesses the ProviderConnectionPointID property value. The value is written out in a label below the controls."
  syntax:
    content: public string ProviderConnectionPointID { get; set; }
    return:
      type: System.String
      description: "Ciąg, który zawiera identyfikator dla obiekt punkt połączenia dostawcy."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  id: ProviderID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ProviderID
  nameWithType: WebPartConnection.ProviderID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Pobiera lub ustawia wartość właściwości połączenia, który odwołuje się identyfikator <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> kontroli działania jako dostawcę dla tego połączenia."
  remarks: "Wartość właściwości ProviderID jest wymagana podczas tworzenia połączenia między dwiema <xref:System.Web.UI.WebControls.WebParts.WebPart>formantów.</xref:System.Web.UI.WebControls.WebParts.WebPart> Jeśli wartość nie jest przypisany do właściwości, jest zwracany wyjątek, kiedy <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontroli umożliwia przeprowadzenie próby aktywacji połączenia.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example shows the declarative and programmatic use of the ProviderID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderID#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_577_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ProviderID#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_577_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_ProviderID#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_577_2.vb)]\n [!code-cs[WebParts_WebPartConnection_ProviderID#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_577_2.cs)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ProviderID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Then, in the `Button2_Click` method, the code accesses the value of the ProviderID property and displays it in a label.  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderID#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_577_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ProviderID#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_577_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. To do that, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button, and the controls are disconnected. Next, use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **Consumer Details** button to run the code that accesses the ProviderID property value."
  syntax:
    content: public string ProviderID { get; set; }
    return:
      type: System.String
      description: "Ciąg, który zawiera identyfikator formantu dostawcy."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString
  id: ToString
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ToString()
  nameWithType: WebPartConnection.ToString()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Zastępuje dziedziczonego <xref:System.Object.ToString*>metodę i zwraca wartość typu krótkich nazw dla obiekt połączenia.</xref:System.Object.ToString*>"
  remarks: "Ta metoda jest używana głównie dla wygody przez projektantów formantu. Powoduje to zwiększenie, jak obiekty połączenia są wyświetlane w widoku Projekt przy użyciu krótszej nazwy typu, zamiast w pełni kwalifikowaną nazwę typu. Jednak można wywołać metody w dowolnym momencie w kodzie miejscu znasz nazwę typu obiektu połączenia."
  example:
  - "The following code example demonstrates how to call the ToString method to return the short type name of a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object.  \n  \n The code example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ToString#2](~/add/codesnippet/csharp/m-system.web.ui.webcontr_228_1.cs)]\n [!code-vb[WebParts_WebPartConnection_ToString#2](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_228_1.vb)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. The `Button1_Click` method calls the ToString method to write the type name of the connection to a label.  \n  \n [!code-cs[WebParts_WebPartConnection_ToString#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_228_2.aspx)]\n [!code-vb[WebParts_WebPartConnection_ToString#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_228_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created. Enter some text in the provider control, and note that the text is displayed in the consumer control. Click the **Connection Details** button to execute the ToString method."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "Ciąg zawierający nazwę krótką (niekwalifikowane) typu <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  id: Transformer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Transformer
  nameWithType: WebPartConnection.Transformer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Pobiera <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> obiekt, który jest używany do transformacji danych między dwoma punktami połączenia niezgodnymi w połączeniu składników Web Part."
  remarks: "W związku z części sieci Web istnieją dwa sposoby, w których można połączyć formantów dostawcy i klienta w połączeniu. Można połączyć bezpośrednio, za pomocą odpowiednich <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>obiektów i typu interfejsu, który jest rozpoznawany przez oba formanty.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Lub, jeśli są one zgodne, może nawiązać połączenie pośrednio, za pomocą <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>obiekt, który przekształca wystąpienia interfejsu od dostawcy na typ rozpoznawany przez konsumenta.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       Gdy transformatora jest potrzebna w ramach połączenia, właściwość transformatora zawiera odwołanie do <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>obiektu.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Można dodać transformatora połączenia deklaratywnie w znacznikach strony sieci Web, dodając tag dla niestandardowych transformatora (lub jeden z transformatory podaną w zestawie formantu części sieci Web) w ramach `<asp:WebPartConnection>` elementu. Można również dodać transformatora programowe tworzenie wystąpienie w kodzie i wywoływania <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29>Metoda <xref:System.Web.UI.WebControls.WebParts.WebPartManager>formantu do utworzenia połączenia, przekazywanie do niego obiekt transformatora wraz z wymaganych parametrów.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29>"
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartTransformer
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;></xref>. Wartość domyślna to <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  id: Transformers
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Transformers
  nameWithType: WebPartConnection.Transformers
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Pobiera kolekcję <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> obiekty używane wewnętrznie zestaw kontroli części sieci Web."
  remarks: "Użyj transformatory, który nigdy nie ma właściwości przez deweloperów. Dostęp transformatora skojarzone z połączeniem, do deweloperów zawsze należy używać <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A>Właściwości.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A>       Właściwość transformatory jest używana wewnętrznie przez formant składników Web Part ustawioną umożliwiają deweloperom strony zadeklarować transformatora elementów w obrębie `<asp:webpartconnection>` elementu w znaczniku strony sieci Web."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartTransformerCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformerCollection&quot;> </xref> zawierający <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> obiektów."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: WebPartConnection()
  nameWithType: WebPartConnection.WebPartConnection()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.WebPartConnection()
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Consumer
  nameWithType: WebPartConnection.Consumer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
- uid: System.Web.UI.WebControls.WebParts.WebPart
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPart
  nameWithType: WebPart
  fullName: System.Web.UI.WebControls.WebParts.WebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: WebPartConnection.ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPointID
  nameWithType: WebPartConnection.ConsumerConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerID
  nameWithType: WebPartConnection.ConsumerID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ID
  nameWithType: WebPartConnection.ID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsActive
  nameWithType: WebPartConnection.IsActive
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsShared
  nameWithType: WebPartConnection.IsShared
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsStatic
  nameWithType: WebPartConnection.IsStatic
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Provider
  nameWithType: WebPartConnection.Provider
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: WebPartConnection.ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPointID
  nameWithType: WebPartConnection.ProviderConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderID
  nameWithType: WebPartConnection.ProviderID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ToString()
  nameWithType: WebPartConnection.ToString()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString()
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformer
  nameWithType: WebPartConnection.Transformer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
- uid: System.Web.UI.WebControls.WebParts.WebPartTransformer
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartTransformer
  nameWithType: WebPartTransformer
  fullName: System.Web.UI.WebControls.WebParts.WebPartTransformer
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformers
  nameWithType: WebPartConnection.Transformers
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
- uid: System.Web.UI.WebControls.WebParts.WebPartTransformerCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartTransformerCollection
  nameWithType: WebPartTransformerCollection
  fullName: System.Web.UI.WebControls.WebParts.WebPartTransformerCollection
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: WebPartConnection
  nameWithType: WebPartConnection.WebPartConnection
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Consumer
  nameWithType: WebPartConnection.Consumer
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: WebPartConnection.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPointID
  nameWithType: WebPartConnection.ConsumerConnectionPointID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerID
  nameWithType: WebPartConnection.ConsumerID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ID
  nameWithType: WebPartConnection.ID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsActive
  nameWithType: WebPartConnection.IsActive
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsShared
  nameWithType: WebPartConnection.IsShared
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsStatic
  nameWithType: WebPartConnection.IsStatic
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Provider
  nameWithType: WebPartConnection.Provider
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: WebPartConnection.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPointID
  nameWithType: WebPartConnection.ProviderConnectionPointID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderID
  nameWithType: WebPartConnection.ProviderID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ToString
  nameWithType: WebPartConnection.ToString
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformer
  nameWithType: WebPartConnection.Transformer
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformers
  nameWithType: WebPartConnection.Transformers
