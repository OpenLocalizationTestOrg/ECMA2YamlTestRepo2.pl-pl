### YamlMime:ManagedReference
items:
- uid: System.Transactions.TransactionManager
  id: TransactionManager
  children:
  - System.Transactions.TransactionManager.DefaultTimeout
  - System.Transactions.TransactionManager.DistributedTransactionStarted
  - System.Transactions.TransactionManager.HostCurrentCallback
  - System.Transactions.TransactionManager.MaximumTimeout
  - System.Transactions.TransactionManager.RecoveryComplete(System.Guid)
  - System.Transactions.TransactionManager.Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)
  langs:
  - csharp
  name: TransactionManager
  nameWithType: TransactionManager
  fullName: System.Transactions.TransactionManager
  type: Class
  summary: "Zawiera metody używane do zarządzania transakcji. Ta klasa nie może być dziedziczona."
  remarks: "Ta klasa zawiera statycznej właściwości i metody używane do uzyskiwania informacji na temat domyślne opcje transakcji. Zawiera on również kilka metod statycznych użyty do odzyskiwania trwałe zasobu, gdy zasób trwały nie powiodło się. Żadna specjalna akcja jest wymagany trwałe zasobu, jeśli MSDTC Microsoft Distributed Transaction Coordinator () nie powiedzie się."
  syntax:
    content: public static class TransactionManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Transactions.TransactionManager.DefaultTimeout
  id: DefaultTimeout
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: DefaultTimeout
  nameWithType: TransactionManager.DefaultTimeout
  fullName: System.Transactions.TransactionManager.DefaultTimeout
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Pobiera domyślny limit czasu dla nowych transakcji."
  remarks: "Interwał limitu czasu transakcji to czas, w ramach którego transakcja musi zostać zakończona. Jeśli Menedżer transakcji nie ma heard wszystkich uczestników transakcji w obrębie interwał limitu czasu, przerywa transakcję.       Tę wartość można ustawić w `DefaultSettingsSection` pliku konfiguracji."
  syntax:
    content: public static TimeSpan DefaultTimeout { get; }
    return:
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan>wartość, która określa interwał limitu czasu dla nowych transakcji.</xref:System.TimeSpan>"
  overload: System.Transactions.TransactionManager.DefaultTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionManager.DistributedTransactionStarted
  id: DistributedTransactionStarted
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: DistributedTransactionStarted
  nameWithType: TransactionManager.DistributedTransactionStarted
  fullName: System.Transactions.TransactionManager.DistributedTransactionStarted
  type: Event
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Wskazuje, czy transakcja rozproszona została uruchomiona."
  remarks: "**Uwaga** rejestracji dla tego zdarzenia powoduje spadek wydajności transakcji rozproszonych wszystkie. Lokalne transakcje nie są monitorowane, jak to wpływ na wydajność jeszcze bardziej.       **Uwaga** ta metoda używa <xref:System.Security.Permissions.SecurityAction>Aby zapobiec jest wywoływany z kodu niezaufane; jednak tylko bezpośredniego obiektu wywołującego jest wymagany do posiadał `FullTrust` zestaw uprawnień.</xref:System.Security.Permissions.SecurityAction>"
  syntax:
    content: public static event System.Transactions.TransactionStartedEventHandler DistributedTransactionStarted;
    return:
      type: System.Transactions.TransactionStartedEventHandler
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionManager.HostCurrentCallback
  id: HostCurrentCallback
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: HostCurrentCallback
  nameWithType: TransactionManager.HostCurrentCallback
  fullName: System.Transactions.TransactionManager.HostCurrentCallback
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Pobiera lub ustawia fabrykę niestandardowych transakcji."
  remarks: '**Uwaga** ta metoda używa <xref:System.Security.Permissions.SecurityAction>Aby zapobiec jest wywoływany z kodu niezaufane; jednak tylko bezpośredniego obiektu wywołującego jest wymagany do posiadał `FullTrust` zestaw uprawnień.</xref:System.Security.Permissions.SecurityAction>'
  syntax:
    content: public static System.Transactions.HostCurrentTransactionCallback HostCurrentCallback { get; set; }
    return:
      type: System.Transactions.HostCurrentTransactionCallback
      description: "A <xref href=&quot;System.Transactions.HostCurrentTransactionCallback&quot;> </xref> zawierający fabryki niestandardowych transakcji."
  overload: System.Transactions.TransactionManager.HostCurrentCallback*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionManager.MaximumTimeout
  id: MaximumTimeout
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: MaximumTimeout
  nameWithType: TransactionManager.MaximumTimeout
  fullName: System.Transactions.TransactionManager.MaximumTimeout
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Pobiera domyślny maksymalny limit czasu dla nowych transakcji."
  remarks: "Aby uzyskać informacje o limicie czasu interwału, zobacz dokumentację dla <xref:System.Transactions.TransactionManager.DefaultTimeout%2A>Właściwości.</xref:System.Transactions.TransactionManager.DefaultTimeout%2A>       Tę wartość można ustawić w `MachineSettingsSection` pliku konfiguracji."
  syntax:
    content: public static TimeSpan MaximumTimeout { get; }
    return:
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan>wartość, która określa maksymalną wartość limitu czasu jest dozwolona podczas tworzenia nowych transakcji.</xref:System.TimeSpan>"
  overload: System.Transactions.TransactionManager.MaximumTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionManager.RecoveryComplete(System.Guid)
  id: RecoveryComplete(System.Guid)
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: RecoveryComplete(Guid)
  nameWithType: TransactionManager.RecoveryComplete(Guid)
  fullName: System.Transactions.TransactionManager.RecoveryComplete(Guid)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Wysyła powiadomienie do Menedżera transakcji Menedżera zasobów odzyskiwanie po awarii zakończenie reenlisting w wszystkich nierozwiązanych transakcji."
  remarks: "Wszyscy menedżerowie zasobów trwałe powinien wykonać odzyskiwanie po ich pierwszym uruchomieniu przez wywołanie metody <xref:System.Transactions.TransactionManager.Reenlist%2A>metody dla każdej transakcji oczekujących.</xref:System.Transactions.TransactionManager.Reenlist%2A>  Tylko wtedy, gdy są wykonywane wszystkie reenlistments Menedżera zasobów wywołać Metoda RecoveryComplete.       Aby uzyskać więcej informacji dotyczących odzyskiwania, zobacz [wykonywania odzyskiwania](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691).       **Uwaga** ta metoda używa <xref:System.Security.Permissions.SecurityAction>Aby zapobiec jest wywoływany z kodu niezaufane; jednak tylko bezpośredniego obiektu wywołującego jest wymagany do posiadał `FullTrust` zestaw uprawnień.</xref:System.Security.Permissions.SecurityAction>"
  syntax:
    content: public static void RecoveryComplete (Guid resourceManagerIdentifier);
    parameters:
    - id: resourceManagerIdentifier
      type: System.Guid
      description: "A <xref:System.Guid>który unikatowo identyfikuje zasobów, które mają zostać odzyskane z.</xref:System.Guid>"
  overload: System.Transactions.TransactionManager.RecoveryComplete*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>resourceManagerIdentifier</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Transactions.TransactionManager.Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)
  id: Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: Reenlist(Guid,Byte[],IEnlistmentNotification)
  nameWithType: TransactionManager.Reenlist(Guid,Byte[],IEnlistmentNotification)
  fullName: System.Transactions.TransactionManager.Reenlist(Guid,Byte[],IEnlistmentNotification)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Reenlists trwałego uczestnika transakcji."
  remarks: "Menedżer zasobów ułatwia rozpoznawania trwałych rejestracji w transakcji przez reenlisting uczestnika transakcji po awarii zasobów.       `resourceManagerIdentifier` Parametr jest używany do spójnie etykietę uczestnika transakcji w przypadku awarii zasobów.  Menedżer zasobów podczas wywołania metody Reenlist metody, musisz podać takie same `resourceManagerIdentifier` wyczerpuje po pierwotnie wywołaniu <xref:System.Transactions.Transaction.EnlistDurable%2A>metody podczas rejestracji, lub <xref:System.Transactions.TransactionException>jest generowany.</xref:System.Transactions.TransactionException> </xref:System.Transactions.Transaction.EnlistDurable%2A>       Jeśli uczestnik jest reenlisted za pomocą tej metody, metody Faza 2 <xref:System.Transactions.IEnlistmentNotification>odpowiadające jej wyniku (oznacza to, <xref:System.Transactions.IEnlistmentNotification.Commit%2A>, <xref:System.Transactions.IEnlistmentNotification.Rollback%2A>lub <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>) są nazywane odpowiednio.</xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> </xref:System.Transactions.IEnlistmentNotification.Rollback%2A> </xref:System.Transactions.IEnlistmentNotification.Commit%2A> </xref:System.Transactions.IEnlistmentNotification>       Po pomyślnie zostały reenlisted uczestników, powinny wywoływać <xref:System.Transactions.TransactionManager.RecoveryComplete%2A>Aby zakończyć odzyskiwanie.</xref:System.Transactions.TransactionManager.RecoveryComplete%2A>       Tej metody powinny wywoływać tylko w przypadku, gdy Menedżer zasobów zostanie uruchomiony ponownie po awarii. Ponadto użytkownik należy tylko ponownie zarejestrować cytatu nierozwiązanych transakcji zarejestrowane przez Menedżera zasobów w fazie przygotowanie początkowej dwufazowe zatwierdzanie. Każda próba ta metoda jest wywoływana przez nieprawidłowy czas może wygenerować błędne wyniki.       Jeśli Menedżer transakcji nie powiedzie się i Menedżera zasobów wykonuje odzyskiwania tylko przez krótki czas po wywołana <xref:System.Transactions.PreparingEnlistment.Prepared%2A>Metoda rejestracji w fazie 1 protokołu dwufazowy proces zatwierdzania, Menedżera zasobów albo może odbierać <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>lub <xref:System.Transactions.IEnlistmentNotification.Rollback%2A>wywołania zwrotnego.</xref:System.Transactions.IEnlistmentNotification.Rollback%2A> </xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> </xref:System.Transactions.PreparingEnlistment.Prepared%2A>       Aby uzyskać więcej informacji dotyczących odzyskiwania, zobacz [wykonywania odzyskiwania](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691).       **Uwaga** ta metoda używa <xref:System.Security.Permissions.SecurityAction>Aby zapobiec jest wywoływany z kodu niezaufane; jednak tylko bezpośredniego obiektu wywołującego jest wymagany do posiadał `FullTrust` zestaw uprawnień.</xref:System.Security.Permissions.SecurityAction>"
  syntax:
    content: public static System.Transactions.Enlistment Reenlist (Guid resourceManagerIdentifier, byte[] recoveryInformation, System.Transactions.IEnlistmentNotification enlistmentNotification);
    parameters:
    - id: resourceManagerIdentifier
      type: System.Guid
      description: "A <xref:System.Guid>który unikatowo identyfikuje Menedżera zasobów.</xref:System.Guid>"
    - id: recoveryInformation
      type: System.Byte[]
      description: "Zawiera dodatkowe informacje o odzyskiwaniu."
    - id: enlistmentNotification
      type: System.Transactions.IEnlistmentNotification
      description: "Obiekt zasobu, który implementuje <xref href=&quot;System.Transactions.IEnlistmentNotification&quot;> </xref> do odbierania powiadomień."
    return:
      type: System.Transactions.Enlistment
      description: "<xref href=&quot;System.Transactions.Enlistment&quot;> </xref> Opisujący rejestracji."
  overload: System.Transactions.TransactionManager.Reenlist*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>recoveryInformation</code>jest nieprawidłowy.       - lub - informacji Menedżera transakcji w <code>recoveryInformation</code> nie jest zgodny ze skonfigurowanym menedżerem transakcji.       - lub - <code>RecoveryInformation</code> nie jest rozpoznawany przez <xref href=&quot;System.Transactions&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Transactions.TransactionManager.RecoveryComplete*>została już wywołana dla określonego <code> resourceManagerIdentifier </code>.</xref:System.Transactions.TransactionManager.RecoveryComplete*> Ponownej rejestracji zostanie odrzucone."
  - type: System.Transactions.TransactionException
    commentId: T:System.Transactions.TransactionException
    description: "<code> resourceManagerIdentifier </code> Nie pasuje do zawartości określonego odzyskiwania informacji w <code> recoveryInformation </code>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Transactions.TransactionException
  parent: System.Transactions
  isExternal: false
  name: TransactionException
  nameWithType: TransactionException
  fullName: System.Transactions.TransactionException
- uid: System.Transactions.TransactionManager.DefaultTimeout
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: DefaultTimeout
  nameWithType: TransactionManager.DefaultTimeout
  fullName: System.Transactions.TransactionManager.DefaultTimeout
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Transactions.TransactionManager.DistributedTransactionStarted
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: DistributedTransactionStarted
  nameWithType: TransactionManager.DistributedTransactionStarted
  fullName: System.Transactions.TransactionManager.DistributedTransactionStarted
- uid: System.Transactions.TransactionStartedEventHandler
  parent: System.Transactions
  isExternal: false
  name: TransactionStartedEventHandler
  nameWithType: TransactionStartedEventHandler
  fullName: System.Transactions.TransactionStartedEventHandler
- uid: System.Transactions.TransactionManager.HostCurrentCallback
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: HostCurrentCallback
  nameWithType: TransactionManager.HostCurrentCallback
  fullName: System.Transactions.TransactionManager.HostCurrentCallback
- uid: System.Transactions.HostCurrentTransactionCallback
  parent: System.Transactions
  isExternal: false
  name: HostCurrentTransactionCallback
  nameWithType: HostCurrentTransactionCallback
  fullName: System.Transactions.HostCurrentTransactionCallback
- uid: System.Transactions.TransactionManager.MaximumTimeout
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: MaximumTimeout
  nameWithType: TransactionManager.MaximumTimeout
  fullName: System.Transactions.TransactionManager.MaximumTimeout
- uid: System.Transactions.TransactionManager.RecoveryComplete(System.Guid)
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: RecoveryComplete(Guid)
  nameWithType: TransactionManager.RecoveryComplete(Guid)
  fullName: System.Transactions.TransactionManager.RecoveryComplete(Guid)
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Transactions.TransactionManager.Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: Reenlist(Guid,Byte[],IEnlistmentNotification)
  nameWithType: TransactionManager.Reenlist(Guid,Byte[],IEnlistmentNotification)
  fullName: System.Transactions.TransactionManager.Reenlist(Guid,Byte[],IEnlistmentNotification)
- uid: System.Transactions.Enlistment
  parent: System.Transactions
  isExternal: false
  name: Enlistment
  nameWithType: Enlistment
  fullName: System.Transactions.Enlistment
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Transactions.IEnlistmentNotification
  parent: System.Transactions
  isExternal: false
  name: IEnlistmentNotification
  nameWithType: IEnlistmentNotification
  fullName: System.Transactions.IEnlistmentNotification
- uid: System.Transactions.TransactionManager.DefaultTimeout*
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: DefaultTimeout
  nameWithType: TransactionManager.DefaultTimeout
- uid: System.Transactions.TransactionManager.HostCurrentCallback*
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: HostCurrentCallback
  nameWithType: TransactionManager.HostCurrentCallback
- uid: System.Transactions.TransactionManager.MaximumTimeout*
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: MaximumTimeout
  nameWithType: TransactionManager.MaximumTimeout
- uid: System.Transactions.TransactionManager.RecoveryComplete*
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: RecoveryComplete
  nameWithType: TransactionManager.RecoveryComplete
- uid: System.Transactions.TransactionManager.Reenlist*
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: Reenlist
  nameWithType: TransactionManager.Reenlist
