### YamlMime:ManagedReference
items:
- uid: System.Workflow.Runtime.WorkflowInstance
  id: WorkflowInstance
  children:
  - System.Workflow.Runtime.WorkflowInstance.Abort
  - System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  - System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  - System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  - System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)
  - System.Workflow.Runtime.WorkflowInstance.GetHashCode
  - System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition
  - System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration
  - System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData
  - System.Workflow.Runtime.WorkflowInstance.InstanceId
  - System.Workflow.Runtime.WorkflowInstance.Load
  - System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles
  - System.Workflow.Runtime.WorkflowInstance.Resume
  - System.Workflow.Runtime.WorkflowInstance.Start
  - System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)
  - System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)
  - System.Workflow.Runtime.WorkflowInstance.TryUnload
  - System.Workflow.Runtime.WorkflowInstance.Unload
  - System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime
  langs:
  - csharp
  name: WorkflowInstance
  nameWithType: WorkflowInstance
  fullName: System.Workflow.Runtime.WorkflowInstance
  type: Class
  summary: "Reprezentuje wystąpienie przepływu pracy."
  remarks: "> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]Klasa obiektu WorkflowInstance udostępnia metody i właściwości, których można użyć do kontrolowania wykonywania wystąpienia przepływu pracy; jest zasadniczo serwera proxy do wystąpienia przepływu pracy w rzeczywistych używane przez aparat środowiska uruchomieniowego przepływu pracy. Hosta lub usługi można nakazać aparatu wykonawczego workflow do wykonania akcji w wystąpieniu przepływu pracy, wywołując odpowiednie metody, które znajdują się w klasie wystąpienie przepływu pracy.  Jeśli żądana akcja nie jest prawidłowy, na przykład jeśli host wymaga <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A>w wystąpieniu przepływu pracy, które zostało już zakończone, aparatu wykonawczego workflow zgłosi wyjątek odpowiednie.</xref:System.Workflow.Runtime.WorkflowInstance.Load%2A>      > [!NOTE] > Jeśli wystąpienia przepływu pracy przestanie odpowiadać, ponieważ wywołanie aplikacji hosta nie może zwracać, jedynym sposobem odzyskania wystąpienie jest ponowne uruchomienie środowiska uruchomieniowego. Jednak jeśli wystąpienie zostało wymuszone zwolniony, przerwana lub wstrzymana, jego może być kontynuowane przez wywołanie metody <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=fullName>metody.</xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=fullName>"
  example:
  - "The following code example demonstrates how you can create and start a WorkflowInstance in a workflow host. The code creates an instance of the <xref:System.Workflow.Runtime.WorkflowRuntime>, adds services to the runtime, and then demonstrates the recommended way to create a WorkflowInstance object. The code initializes WorkflowInstance by calling the <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> method and passing the previously created type to it. The WorkflowInstance is started with the <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> method call.  \n  \n This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see [Canceling a Workflow](http://msdn.microsoft.com/en-us/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  \n  \n [!code-cs[WF_Samples#260](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#260)]\n [!code-vb[WF_Samples#260](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#260)]"
  syntax:
    content: >-
      [System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]

      public sealed class WorkflowInstance
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Abort
  id: Abort
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Abort()
  nameWithType: WorkflowInstance.Abort()
  fullName: System.Workflow.Runtime.WorkflowInstance.Abort()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Przerywa wystąpienia przepływu pracy."
  remarks: "Wystąpienie przepływu pracy zostało przerwane w sposób synchroniczne; oznacza to metoda zwraca po wystąpienia przepływu pracy zostało przerwane. Aparatu wykonawczego workflow unieważnia wystąpienia przepływu pracy w pamięci i czyszczenia <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>.</xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> Jeśli usługi utrwalania był używany przez wystąpienie przepływu pracy, wszystkich działań wykonanych od czasu ostatniego punktu trwałości jest odrzucone. Po jego przerwanie wystąpienia przepływu pracy, aparatu środowiska uruchomieniowego przepływu pracy zgłasza <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted>zdarzeń.</xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted> Możesz wywołać <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A>Aby ponownie załadować wystąpienia przepływu pracy i rozpocząć od ostatniego punktu trwałości.</xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A>       `Abort`różni się od <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A>tego czasu `Abort` po prostu usuwa wystąpienie przepływu pracy w pamięci i może zostać uruchomiony ponownie z ostatniego punktu trwałości przerwania czyści wystąpienia przepływu pracy w pamięci i informuje usługi utrwalania, że wystąpienie zostało wyczyszczone z pamięci.</xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> Aby uzyskać <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>, oznacza to, że wszystkie informacje o stanie dla tego wystąpienia przepływu pracy została usunięta z bazy danych po zakończeniu.</xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> Nie można ponownie załadować wystąpienia przepływu pracy z punktu zapisanych wcześniej trwałości."
  example:
  - "The following example demonstrates calling Abort on a workflow instance of type Workflow1.  \n  \n [!code-cs[WF_Samples#13](~/add/codesnippet/csharp/wf_snippets/snippets.cs#13)]\n [!code-vb[WF_Samples#13](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#13)]"
  syntax:
    content: public void Abort ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.Abort*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Aparat środowiska uruchomieniowego przepływu pracy nie jest uruchomiona."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  id: ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: ApplyWorkflowChanges(WorkflowChanges)
  nameWithType: WorkflowInstance.ApplyWorkflowChanges(WorkflowChanges)
  fullName: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(WorkflowChanges)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Stosuje zmiany do wystąpienia przepływu pracy, określony przez <xref href=&quot;System.Workflow.ComponentModel.WorkflowChanges&quot;> </xref> obiektu."
  remarks: "Wystąpienie przepływu pracy nie jest już wstrzymany, aparatu wykonawczego workflow tymczasowo wstrzymuje wystąpienia przed zastosowaniem zmian."
  example:
  - "The following example demonstrates calling ApplyWorkflowChanges to a <xref:System.Workflow.Runtime.WorkflowInstance> object.  This example is from the Ordering State Machine SDK sample, from the Mainform.cs file.  For more information, see the [Ordering State Machine Sample](http://msdn.microsoft.com/en-us/59272cf4-bc98-439c-bcfa-b66999ebce5c).  \n  \n [!code-cs[WF_Samples#89](~/add/codesnippet/csharp/wf_snippets/snippets1.cs#89)]\n [!code-vb[WF_Samples#89](~/add/codesnippet/visualbasic/wf_snippets/snippets1.vb#89)]"
  syntax:
    content: public void ApplyWorkflowChanges (System.Workflow.ComponentModel.WorkflowChanges workflowChanges);
    parameters:
    - id: workflowChanges
      type: System.Workflow.ComponentModel.WorkflowChanges
      description: "A <xref href=&quot;System.Workflow.ComponentModel.WorkflowChanges&quot;> </xref> określenie aktualizacji dynamicznych dla wystąpienia przepływu pracy."
  overload: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Aparat środowiska uruchomieniowego przepływu pracy nie jest uruchomiona."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  id: EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: EnqueueItem(IComparable,Object,IPendingWork,Object)
  nameWithType: WorkflowInstance.EnqueueItem(IComparable,Object,IPendingWork,Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.EnqueueItem(IComparable,Object,IPendingWork,Object)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Zapisuje synchronicznie wiadomości do kolejki określonego przepływu pracy."
  remarks: "Wysyła `item` do określonego <xref:System.Workflow.Runtime.WorkflowQueue>.</xref:System.Workflow.Runtime.WorkflowQueue> Jeśli chcesz otrzymać powiadomienie, gdy wiadomość zostanie dostarczona, można zaimplementować <xref:System.Workflow.Runtime.IPendingWork>usługi i przebiegu `workItem` i <xref:System.Workflow.Runtime.IPendingWork>obiektu EnqueueItem.</xref:System.Workflow.Runtime.IPendingWork> </xref:System.Workflow.Runtime.IPendingWork> Jeśli nie chcesz, aby takie powiadomienie, można przekazać odwołanie o wartości null (`Nothing` w języku Visual Basic) dla `pendingWork` i `workItem`.       Przy użyciu tej metody z przepływ pracy automatu stanów, można uzyskać wyjątek z komunikatem &quot;kolejki&quot;{0}&quot;nie jest włączona.&quot; Dzieje się tak, gdy bieżący stan komputera stanu nie może określić sposób obsługi określonego zdarzenia. Na przykład, jeśli niektóre stanie innym niż bieżący stan zawiera <xref:System.Workflow.Activities.EventDrivenActivity>zawierający <xref:System.Workflow.Activities.HandleExternalEventActivity>reprezentowaną przez kolejkę {0}.</xref:System.Workflow.Activities.HandleExternalEventActivity> </xref:System.Workflow.Activities.EventDrivenActivity>      > [!NOTE] > Wiadomości nie ma gwarancji do odebrania przez wystąpienie przepływu pracy w kolejności, w której zostały wysłane. Na przykład jeśli odbieranie wiadomości w istniejącym kolejka przepływu pracy można utworzyć innej kolejki kolejki B, który następnie nasłuchuje kolejną wiadomość wysłana po pierwszej wiadomości przyczyny (kolejki A), jest możliwe, że to drugi komunikat pojawią się najpierw i nie będą odbierane z powodu swojej kolejki nie jest jeszcze utworzony. Aby uniknąć tego problemu, to drugi komunikat nie powinna być wysyłana dopóki nie zostanie zweryfikowana obecności drugi kolejki (przy użyciu <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A>.)</xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A>"
  example:
  - "The following code example demonstrates how to use EnqueueItem. When the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> event occurs, the `OnWorkflowIdled` method defined in this example is called. It determines which workflow is idled using the <xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> property and then gets a collection of queued items for the workflow instance by calling the <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> method. The code iterates over the collection to determine which activity is waiting for the event that idled the workflow. It then sends an exception to the workflow queue using the EnqueueItem method along with the name of the event queue item.  \n  \n This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see [Canceling a Workflow](http://msdn.microsoft.com/en-us/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  \n  \n [!code-cs[WF_Samples#261](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#261)]\n [!code-vb[WF_Samples#261](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#261)]"
  syntax:
    content: public void EnqueueItem (IComparable queueName, object item, System.Workflow.Runtime.IPendingWork pendingWork, object workItem);
    parameters:
    - id: queueName
      type: System.IComparable
      description: "Nazwa <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref>."
    - id: item
      type: System.Object
      description: "Obiekt, który można umieścić w kolejce."
    - id: pendingWork
      type: System.Workflow.Runtime.IPendingWork
      description: "<xref href=&quot;System.Workflow.Runtime.IPendingWork&quot;> </xref> , Która umożliwia nadawcy zgłaszane po `item` jest dostarczany."
    - id: workItem
      type: System.Object
      description: "Obiekt do przekazania do <xref href=&quot;System.Workflow.Runtime.IPendingWork&quot;> </xref> metody."
  overload: System.Workflow.Runtime.WorkflowInstance.EnqueueItem*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>queueName</code>to odwołanie o wartości null (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> w języku Visual Basic)."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Aparat środowiska uruchomieniowego przepływu pracy nie jest uruchomiona.       - lub - <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref> określonego przez <code> queueName </code> nie istnieje.       - lub - <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref> określonego przez <code> queueName </code> nie jest włączone."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  id: EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
  nameWithType: WorkflowInstance.EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Zapisuje komunikat do kolejki określonego przepływu pracy, gdy przepływ pracy jest w stanie bezczynności. EnqueueItemOnIdle czeka, aż do przepływu pracy osiągnie punkt bezczynności i enqueues po sprawdzeniu, czy harmonogram przepływu pracy jest w stanie bezczynności (to znaczy nie aktywnych operacji nie jest wykonywane)."
  remarks: "Czeka na wystąpienie przepływu pracy w stan bezczynności, a następnie wysyła `item` do określonego <xref:System.Workflow.Runtime.WorkflowQueue>.</xref:System.Workflow.Runtime.WorkflowQueue> Jeśli można wywołać elementu EnqueueItemOnIdle WE, gdy wystąpienia przepływu pracy jest wstrzymana, aparatu wykonawczego workflow zgłosi <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> Jeśli chcesz otrzymać powiadomienie, gdy wiadomość zostanie dostarczona, można zaimplementować <xref:System.Workflow.Runtime.IPendingWork>usługi i przebiegu `workItem` i <xref:System.Workflow.Runtime.IPendingWork>obiekt <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>.</xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> </xref:System.Workflow.Runtime.IPendingWork> </xref:System.Workflow.Runtime.IPendingWork> Jeśli nie chcesz, aby takie powiadomienie, można przekazać odwołanie o wartości null (`Nothing` w języku Visual Basic) dla `pendingWork` i `workItem`.       Gdy przepływ pracy automatu stanów za pomocą tej metody, można uzyskać wyjątek, który zawiera komunikat &quot;Nie włączono kolejki&quot;{0}&quot;.&quot; Dzieje się tak, gdy bieżący stan komputera stanu nie może określić sposób obsługi określonego zdarzenia. Na przykład, jeśli niektóre stanie innym niż bieżący stan zawiera <xref:System.Workflow.Activities.EventDrivenActivity>zawierający <xref:System.Workflow.Activities.HandleExternalEventActivity>reprezentowaną przez kolejkę {0}.</xref:System.Workflow.Activities.HandleExternalEventActivity> </xref:System.Workflow.Activities.EventDrivenActivity>"
  example:
  - "The following example demonstrates sending information to a workflow instance using the `EnqueueItemOnIdle` method. First, a WorkflowInstance object is created and started; next, an object that implements the <xref:System.Workflow.Runtime.IPendingWork> interface is created. `EnqueueItemOnIdle` is then called, passing in string values for the queue name, the enqueued item, and the work item to be passed to the methods of the pendingWork object.  \n  \n [!code-cs[WF_Samples#12](~/add/codesnippet/csharp/wf_snippets/snippets.cs#12)]\n [!code-vb[WF_Samples#12](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#12)]"
  syntax:
    content: public void EnqueueItemOnIdle (IComparable queueName, object item, System.Workflow.Runtime.IPendingWork pendingWork, object workItem);
    parameters:
    - id: queueName
      type: System.IComparable
      description: "Nazwa <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref>."
    - id: item
      type: System.Object
      description: "Obiekt, który można umieścić w kolejce."
    - id: pendingWork
      type: System.Workflow.Runtime.IPendingWork
      description: "<xref href=&quot;System.Workflow.Runtime.IPendingWork&quot;> </xref> , Która umożliwia nadawcy zgłaszane po `item` jest dostarczany."
    - id: workItem
      type: System.Object
      description: "Obiekt do przekazania do <xref href=&quot;System.Workflow.Runtime.IPendingWork&quot;> </xref> metody."
  overload: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>queueName</code>to odwołanie o wartości null (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> w języku Visual Basic)."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Aparat środowiska uruchomieniowego przepływu pracy nie jest uruchomiona.       - lub - wystąpienia przepływu pracy jest wstrzymana.       - lub - <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref> określonego przez <code> queueName </code> nie istnieje.       - lub - <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref> określonego przez <code> queueName </code> nie jest włączone."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: WorkflowInstance.Equals(Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.Equals(Object)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Zwraca wartość wskazującą, czy określony obiekt jest taki sam <xref href=&quot;System.Workflow.Runtime.WorkflowInstance&quot;> </xref>."
  remarks: "Obiekt musi być wystąpieniem <xref:System.Workflow.Runtime.WorkflowInstance>klasy i mieć tego samego <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A>jako tego <xref:System.Workflow.Runtime.WorkflowInstance>.</xref:System.Workflow.Runtime.WorkflowInstance> </xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> </xref:System.Workflow.Runtime.WorkflowInstance>"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "Obiekt do porównania."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli określony obiekt jest taki sam <xref href=&quot;System.Workflow.Runtime.WorkflowInstance&quot;> </xref>; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Workflow.Runtime.WorkflowInstance.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.GetHashCode
  id: GetHashCode
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: WorkflowInstance.GetHashCode()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetHashCode()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Zwraca wartość skrótu dla tego wystąpienia przepływu pracy."
  remarks: "GetHashCode zwraca wartość skrótu na podstawie wartości <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A>.</xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A>"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Wartość skrótu dla tego <xref href=&quot;System.Workflow.Runtime.WorkflowInstance&quot;> </xref>."
  overload: System.Workflow.Runtime.WorkflowInstance.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition
  id: GetWorkflowDefinition
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: GetWorkflowDefinition()
  nameWithType: WorkflowInstance.GetWorkflowDefinition()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Pobiera działania głównego dla tego wystąpienia przepływu pracy."
  remarks: "Działanie główne umożliwia przechodzenie hierarchii działania przepływu pracy.       Ta metoda nie jest wielowątkowość, więc hosta powinien synchronizować się jego wywołania tej metody."
  example:
  - "The following example demonstrates retrieving the workflow definition from a workflow instance.  This example is from the Ordering State Machine SDK sample, from the Mainform.cs file.  For more information, see the [Ordering State Machine Sample](http://msdn.microsoft.com/en-us/59272cf4-bc98-439c-bcfa-b66999ebce5c).  \n  \n [!code-cs[WF_Samples#86](~/add/codesnippet/csharp/wf_snippets/snippets1.cs#86)]\n [!code-vb[WF_Samples#86](~/add/codesnippet/visualbasic/wf_snippets/snippets1.vb#86)]"
  syntax:
    content: public System.Workflow.ComponentModel.Activity GetWorkflowDefinition ();
    parameters: []
    return:
      type: System.Workflow.ComponentModel.Activity
      description: "<xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref> Obiektu."
  overload: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration
  id: GetWorkflowNextTimerExpiration
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: GetWorkflowNextTimerExpiration()
  nameWithType: WorkflowInstance.GetWorkflowNextTimerExpiration()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Zwraca następnego punktu w czasie tego <xref href=&quot;System.Workflow.Runtime.WorkflowInstance&quot;> </xref> jest zaplanowane do dostarczenia komunikatu czasomierza."
  remarks: ''
  example:
  - "The following example demonstrates using the GetWorkflowNextTimerExpiration method to determine if more workflow timer messages are enqueued. This example is from the WorkflowThreading SDK sample, from the Program.cs file. For more information, see [Workflow Threading Sample](http://msdn.microsoft.com/en-us/5b650be7-09fa-47db-a2f6-523dc8ea5ee9).  \n  \n [!code-cs[WF_Samples#284](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#284)]\n [!code-vb[WF_Samples#284](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#284)]"
  syntax:
    content: public DateTime GetWorkflowNextTimerExpiration ();
    parameters: []
    return:
      type: System.DateTime
      description: "Wartość daty/godziny, która reprezentuje następnej <xref:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt*>czasu to <xref href=&quot;System.Workflow.Runtime.WorkflowInstance&quot;> </xref> można dostarczyć komunikatu czasomierza.</xref:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt*>"
  overload: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData
  id: GetWorkflowQueueData
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: GetWorkflowQueueData()
  nameWithType: WorkflowInstance.GetWorkflowQueueData()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Pobiera kolekcję <xref href=&quot;System.Workflow.Runtime.WorkflowQueueInfo&quot;> </xref> obiekty, które zawiera elementy oczekujące i subskrybowane działań dla kolejek przepływu pracy skojarzonego z tym wystąpieniem przepływu pracy."
  remarks: "GetWorkflowQueueData zwraca kolekcję <xref:System.Workflow.Runtime.WorkflowQueueInfo>obiektów, z których każdy zawiera informacje o stanie kolejki przepływu pracy skojarzonego z tym wystąpieniem przepływu pracy.</xref:System.Workflow.Runtime.WorkflowQueueInfo> <xref:System.Workflow.Runtime.WorkflowQueueInfo.Items%2A?displayProperty=fullName>zawiera elementy oczekujące <xref:System.Workflow.Runtime.WorkflowQueue>i <xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=fullName>zawiera listę działań, które subskrybuje dostarczania elementu na <xref:System.Workflow.Runtime.WorkflowQueue>.</xref:System.Workflow.Runtime.WorkflowQueue> </xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=fullName> </xref:System.Workflow.Runtime.WorkflowQueue></xref:System.Workflow.Runtime.WorkflowQueueInfo.Items%2A?displayProperty=fullName>"
  example:
  - "The following code example demonstrates how you can use the GetWorkflowQueueData method to obtain information about the state of all workflow queues associated with a <xref:System.Workflow.Runtime.WorkflowInstance> object. When the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> event occurs, the `OnWorkflowIdled` method defined in this example is called. It determines which workflow is idled using the <xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> property and then gets a collection of queued items for the workflow instance by calling the GetWorkflowQueueData method. The code iterates over the collection to determine which activity is waiting for the event that idled the workflow. It then sends an exception to the workflow queue using the <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> method along with the name of the event queue item.  \n  \n This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see [Canceling a Workflow](http://msdn.microsoft.com/en-us/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  \n  \n [!code-cs[WF_Samples#261](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#261)]\n [!code-vb[WF_Samples#261](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#261)]"
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Workflow.Runtime.WorkflowQueueInfo> GetWorkflowQueueData ();
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.Runtime.WorkflowQueueInfo}
      description: "A &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; z <xref href=&quot;System.Workflow.Runtime.WorkflowQueueInfo&quot;> </xref> obiektów."
  overload: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Aparat środowiska uruchomieniowego przepływu pracy nie jest uruchomiona."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.InstanceId
  id: InstanceId
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: InstanceId
  nameWithType: WorkflowInstance.InstanceId
  fullName: System.Workflow.Runtime.WorkflowInstance.InstanceId
  type: Property
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Pobiera unikatowy identyfikator dla wystąpienia przepływu pracy."
  remarks: "Identyfikator InstanceId służy do odwołania do wystąpienia przepływu pracy."
  example:
  - "The following code example demonstrates how you can use the InstanceId property to obtain information about a <xref:System.Workflow.Runtime.WorkflowInstance> object. The first code snippet creates a <xref:System.Workflow.Runtime.WorkflowInstance> variable named `instanceId`.  \n  \n [!code-cs[WF_Samples#210](~/add/codesnippet/csharp/wf_snippets/snippets19.cs#210)]\n [!code-vb[WF_Samples#210](~/add/codesnippet/visualbasic/wf_snippets/snippets19.vb#210)]  \n  \n The second snippet uses the InstanceId property as the first object in an `OrderEventArgs` constructor call when the `CallBackForApproval` method is called.  \n  \n This code example is part of the Listen SDK Sample from the OrderServiceImple.cs file. For more information, see [Listen Sample](http://msdn.microsoft.com/en-us/1cec0e82-7544-429f-b717-0fc25eb42b7f).  \n  \n [!code-cs[WF_Samples#211](~/add/codesnippet/csharp/wf_snippets/snippets19.cs#211)]\n [!code-vb[WF_Samples#211](~/add/codesnippet/visualbasic/wf_snippets/snippets19.vb#211)]"
  syntax:
    content: public Guid InstanceId { get; }
    return:
      type: System.Guid
      description: "<xref:System.Guid>Wystąpienia przepływu pracy.</xref:System.Guid>"
  overload: System.Workflow.Runtime.WorkflowInstance.InstanceId*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Load
  id: Load
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Load()
  nameWithType: WorkflowInstance.Load()
  fullName: System.Workflow.Runtime.WorkflowInstance.Load()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Ładuje wystąpienia przepływu pracy wcześniej usunięty z pamięci."
  remarks: "Obciążenie jest synchroniczne; w przypadku wystąpienia przepływu pracy mogą być ładowane, obciążenia zwraca po wystąpienia przepływu pracy zostało załadowane do pamięci i zaplanowane przez aparat środowiska uruchomieniowego przepływu pracy. Środowisko uruchomieniowe zgłasza <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded>zdarzeń po usługi utrwalania przywróciła wystąpienia przepływu pracy w pamięci, ale przed przepływu pracy aparatu wykonawczego planuje wystąpienie.</xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded>"
  example:
  - "The following example demonstrates how to load a previously unloaded <xref:System.Workflow.Runtime.WorkflowInstance> object.  \n  \n [!code-cs[WF_Samples#10](~/add/codesnippet/csharp/wf_snippets/snippets.cs#10)]\n [!code-vb[WF_Samples#10](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#10)]"
  syntax:
    content: public void Load ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.Load*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Aparat środowiska uruchomieniowego przepływu pracy nie jest uruchomiona."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles
  id: ReloadTrackingProfiles
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: ReloadTrackingProfiles()
  nameWithType: WorkflowInstance.ReloadTrackingProfiles()
  fullName: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Załaduj ponownie profile śledzenia dla tego wystąpienia przepływu pracy."
  remarks: "Infrastrukturze środowiska uruchomieniowego śledzenia spowoduje ponowne załadowanie każdego <xref:System.Workflow.Runtime.Tracking.TrackingProfile>dla tego wystąpienia przepływu pracy skojarzonego z jego kanały śledzenia.</xref:System.Workflow.Runtime.Tracking.TrackingProfile> Jeśli nie jest w stanie wstrzymanym, przepływ pracy jest tymczasowo wstrzymane przez środowisko uruchomieniowe śledzenia infrastruktury, gdy są ładowane profile śledzenia."
  syntax:
    content: public void ReloadTrackingProfiles ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Aparat środowiska uruchomieniowego przepływu pracy nie jest uruchomiona."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Resume
  id: Resume
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Resume()
  nameWithType: WorkflowInstance.Resume()
  fullName: System.Workflow.Runtime.WorkflowInstance.Resume()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Wznawia wykonywanie wystąpienia przepływu pracy wstrzymanej wcześniej."
  remarks: "Hosta można wywołać Wznów, aby wznowić wykonywania wystąpienia przepływu pracy, który został wcześniej zawieszony. Jeśli wystąpienie przepływu pracy nie jest w stanie wstrzymanym, nie podjęto żadnej akcji. Środowisko uruchomieniowe zgłasza <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed>zdarzeń tuż przed wznowieniem wykonywania wystąpienia przepływu pracy.</xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed>"
  example:
  - "The following example demonstrates calling Resume on a previously suspended workflow instance.  This example is from the Suspend and Terminate SDK sample.  For more information, see [Suspend and Terminate Sample](http://msdn.microsoft.com/en-us/f4dffa58-d01e-44fb-b5a1-3b283d2c4517).  \n  \n [!code-cs[WF_Samples#172](~/add/codesnippet/csharp/wf_snippets/snippets11.cs#172)]\n [!code-vb[WF_Samples#172](~/add/codesnippet/visualbasic/wf_snippets/snippets11.vb#172)]"
  syntax:
    content: public void Resume ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.Resume*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Aparat środowiska uruchomieniowego przepływu pracy nie jest uruchomiona."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Start
  id: Start
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Start()
  nameWithType: WorkflowInstance.Start()
  fullName: System.Workflow.Runtime.WorkflowInstance.Start()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Rozpoczyna wykonywanie wystąpienia przepływu pracy."
  remarks: "Uruchom wywołania <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ExecuteActivity%2A>w działaniu głównym tego wystąpienia przepływu pracy.</xref:System.Workflow.ComponentModel.ActivityExecutionContext.ExecuteActivity%2A> Jeśli Start napotkał wyjątek, kończy wystąpienia przepływu pracy, wywołując <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A>z <xref:System.Exception.Message%2A>Właściwość wyjątku przekazany jako przyczyna przerwanie.</xref:System.Exception.Message%2A> </xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A>"
  example:
  - "The following code example demonstrates how you can use the Start method to start a <xref:System.Workflow.Runtime.WorkflowInstance> in a workflow host. The code creates an instance of the <xref:System.Workflow.Runtime.WorkflowRuntime>, adds services to the runtime, and then demonstrates the recommended way to create a <xref:System.Workflow.Runtime.WorkflowInstance> object. It creates a <xref:System.Type> object and casts it to one of the workflow objects with which the host is associated. The code next initializes <xref:System.Workflow.Runtime.WorkflowInstance> by calling the <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> method and passing the previously created type to it. The <xref:System.Workflow.Runtime.WorkflowInstance> is started with the Start method call.  \n  \n This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see [Canceling a Workflow](http://msdn.microsoft.com/en-us/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  \n  \n [!code-cs[WF_Samples#260](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#260)]\n [!code-vb[WF_Samples#260](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#260)]"
  syntax:
    content: public void Start ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.Start*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Aparat środowiska uruchomieniowego przepływu pracy nie jest uruchomiona.       - lub - wystąpienie przepływu pracy zostało już uruchomione."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)
  id: Suspend(System.String)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Suspend(String)
  nameWithType: WorkflowInstance.Suspend(String)
  fullName: System.Workflow.Runtime.WorkflowInstance.Suspend(String)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Wstrzymuje wykonywanie wystąpienia przepływu pracy."
  remarks: "Wystąpienie przepływu pracy został wstrzymany w sposób synchronicznego. Jeśli wystąpienie przepływu pracy jest już wstrzymana, nie podjęto żadnej akcji; w przeciwnym razie aparatu wykonawczego workflow wstrzymuje wystąpienia przepływu pracy, generuje <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended>zdarzenia i przekazuje `reason` <xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs>.</xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs> </xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended>      > [!NOTE] > Zawieszenia nie spowoduje usunięcia wystąpienia przepływu pracy."
  example:
  - "The following code example demonstrates calling Suspend on a <xref:System.Workflow.Runtime.WorkflowInstance> object.  \n  \n [!code-cs[WF_Samples#9](~/add/codesnippet/csharp/wf_snippets/snippets.cs#9)]\n [!code-vb[WF_Samples#9](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#9)]"
  syntax:
    content: public void Suspend (string error);
    parameters:
    - id: error
      type: System.String
      description: "Opis powodu wstrzymanie tego wystąpienia przepływu pracy."
  overload: System.Workflow.Runtime.WorkflowInstance.Suspend*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Aparat środowiska uruchomieniowego przepływu pracy nie jest uruchomiona."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)
  id: Terminate(System.String)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Terminate(String)
  nameWithType: WorkflowInstance.Terminate(String)
  fullName: System.Workflow.Runtime.WorkflowInstance.Terminate(String)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Kończy wystąpienia przepływu pracy w sposób synchronicznego."
  remarks: "Wystąpienie przepływu pracy zostało przerwane w sposób synchronicznego. Host wywołania przerwania przerwanie wystąpienia przepływu pracy. Aparatu wykonawczego workflow czyści wystąpienia przepływu pracy w pamięci i informuje usługi utrwalania, że wystąpienie zostało wyczyszczone z pamięci. Aby uzyskać <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>, oznacza to, że wszystkie informacje o stanie dla tego wystąpienia przepływu pracy została usunięta z bazy danych po zakończeniu.</xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> Nie można ponownie załadować wystąpienia przepływu pracy z punktu zapisanych wcześniej trwałości.       Po wystąpienia przepływu pracy w pamięci jest wyczyszczone i usługi utrwalania zostanie poinformowany o rozwiązaniu, `Terminate` metoda zgłasza <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated>zdarzenia i przekazuje `reason` we <xref:System.Exception.Message%2A>właściwości <xref:System.Workflow.ComponentModel.WorkflowTerminatedException>zawarte w <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs>.</xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs> </xref:System.Workflow.ComponentModel.WorkflowTerminatedException> </xref:System.Exception.Message%2A> </xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated>       `Terminate`różni się od <xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A>w tym podczas przerwania czyści wystąpienia przepływu pracy w pamięci i informuje o trwałości usługa przerwanie, `Abort` po prostu usuwa wystąpienie przepływu pracy w pamięci, której następnie można ponownie uruchomić od ostatniego punktu trwałości.</xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A>"
  example:
  - "The following code example demonstrates calling Terminate on a <xref:System.Workflow.Runtime.WorkflowInstance> object.  \n  \n [!code-cs[WF_Samples#8](~/add/codesnippet/csharp/wf_snippets/snippets.cs#8)]\n [!code-vb[WF_Samples#8](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#8)]"
  syntax:
    content: public void Terminate (string error);
    parameters:
    - id: error
      type: System.String
      description: "Opis Przyczyna przerywanie wystąpienia przepływu pracy."
  overload: System.Workflow.Runtime.WorkflowInstance.Terminate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Aparat środowiska uruchomieniowego przepływu pracy nie jest uruchomiona."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.TryUnload
  id: TryUnload
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: TryUnload()
  nameWithType: WorkflowInstance.TryUnload()
  fullName: System.Workflow.Runtime.WorkflowInstance.TryUnload()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Zwalnia wystąpienie przepływu pracy z pamięci w magazynie trwałości, gdy wystąpienie jest wstrzymane lub bezczynności."
  remarks: "W przypadku wystąpienia przepływu pracy bezczynności lub wstrzymania, TryUnload korzysta z usługi trwałości do usunięcia wystąpienia przepływu pracy z pamięci i utrwala go w magazynie danych. Jeśli nie ma usługi utrwalania, w zarejestrowany <xref:System.Workflow.Runtime.WorkflowRuntime>TryUnload zgłasza <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Workflow.Runtime.WorkflowRuntime> Jeśli wystąpienie przepływu pracy jest poprawnie utrwalona, środowisko uruchomieniowe zgłasza <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded>zdarzeń i zwraca `true`.</xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A>Zwraca `false` wystąpienia przepływu pracy został już zwolniony, zostało zakończone, została przerwana czy zostało już zakończone.</xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A>       Host umożliwia TryUnload odzyskać zasoby systemowe z bezczynności przepływu pracy."
  example:
  - "The following example demonstrates using the TryUnload method to unload a workflow when the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> event fires. This example is from the Using Persistence Services SDK sample, from the Program.cs file. For more information, see [Using Persistence Services Sample](http://msdn.microsoft.com/en-us/3176b7e7-ae49-4d5c-802b-85032d6ebde6).  \n  \n [!code-cs[WF_Samples#280](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#280)]\n [!code-vb[WF_Samples#280](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#280)]"
  syntax:
    content: public bool TryUnload ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli wystąpienie przepływu pracy został zwolniony; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Workflow.Runtime.WorkflowInstance.TryUnload*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Nie ma usługi utrwalania zarejestrowana w usłudze aparatu wykonawczego workflow."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Unload
  id: Unload
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Unload()
  nameWithType: WorkflowInstance.Unload()
  fullName: System.Workflow.Runtime.WorkflowInstance.Unload()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Zwalnia wystąpienie przepływu pracy z pamięci w magazynie trwałości. To wywołanie blokuje dopiero po zakończeniu obecnie zaplanowanych zadań, lub na końcu zakresu transakcji."
  remarks: "Zwolnienie jest synchroniczne; oznacza to zwraca po zakończeniu wykonywania akcji. Jeśli wystąpienie przepływu pracy nie jest bezczynny, środowisko uruchomieniowe oczekuje, aż wystąpienie może zostać przerwane. Tylko można przerwać wystąpienia, po zakończeniu elementu obecnie zaplanowanych zadań; jest to zazwyczaj gdy aktualnie uruchomione działanie zwróci z jego <xref:System.Workflow.ComponentModel.Activity.Execute%2A>metody.</xref:System.Workflow.ComponentModel.Activity.Execute%2A> Jednak jeśli wystąpienie jest wykonywany <xref:System.Workflow.ComponentModel.TransactionScopeActivity>, zakresu transakcji należy ukończyć wykonywania wystąpienia może zostać przerwane.</xref:System.Workflow.ComponentModel.TransactionScopeActivity> Zwolnienie następnie używa usługi trwałości można usunąć wystąpienia przepływu pracy z pamięci i będzie się utrzymywał w magazynie danych. Jeśli nie ma usługi utrwalania, zarejestrowany <xref:System.Workflow.Runtime.WorkflowRuntime>Unload zgłasza <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Workflow.Runtime.WorkflowRuntime> Jeśli wystąpienie przepływu pracy jest poprawnie utrwalona, środowisko uruchomieniowe zgłasza <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded>zdarzeń.</xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded>       Host umożliwia zwolnienie odzyskać zasoby systemowe z bezczynności przepływu pracy."
  example:
  - "The following example demonstrates calling Unload on a <xref:System.Workflow.Runtime.WorkflowInstance> object.  \n  \n [!code-cs[WF_Samples#11](~/add/codesnippet/csharp/wf_snippets/snippets.cs#11)]\n [!code-vb[WF_Samples#11](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#11)]"
  syntax:
    content: public void Unload ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.Unload*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Nie ma usługi utrwalania zarejestrowana w usłudze aparatu wykonawczego workflow."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime
  id: WorkflowRuntime
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: WorkflowRuntime
  nameWithType: WorkflowInstance.WorkflowRuntime
  fullName: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime
  type: Property
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Pobiera <xref href=&quot;System.Workflow.Runtime.WorkflowRuntime&quot;> </xref> dla tego wystąpienia przepływu pracy."
  remarks: ''
  example:
  - "The following example demonstrates accessing the executing <xref:System.Workflow.Runtime.WorkflowRuntime> of a <xref:System.Workflow.Runtime.WorkflowInstance> object.  \n  \n [!code-cs[WF_Samples#7](~/add/codesnippet/csharp/wf_snippets/snippets.cs#7)]\n [!code-vb[WF_Samples#7](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#7)]"
  syntax:
    content: public System.Workflow.Runtime.WorkflowRuntime WorkflowRuntime { get; }
    return:
      type: System.Workflow.Runtime.WorkflowRuntime
      description: "A <xref href=&quot;System.Workflow.Runtime.WorkflowRuntime&quot;> </xref> reprezentujący środowiska wykonawczego, w której to wystąpienie przepływu pracy jest uruchomiony."
  overload: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Workflow.Runtime.WorkflowInstance.Abort
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Abort()
  nameWithType: WorkflowInstance.Abort()
  fullName: System.Workflow.Runtime.WorkflowInstance.Abort()
- uid: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: ApplyWorkflowChanges(WorkflowChanges)
  nameWithType: WorkflowInstance.ApplyWorkflowChanges(WorkflowChanges)
  fullName: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(WorkflowChanges)
- uid: System.Workflow.ComponentModel.WorkflowChanges
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: WorkflowChanges
  nameWithType: WorkflowChanges
  fullName: System.Workflow.ComponentModel.WorkflowChanges
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: EnqueueItem(IComparable,Object,IPendingWork,Object)
  nameWithType: WorkflowInstance.EnqueueItem(IComparable,Object,IPendingWork,Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.EnqueueItem(IComparable,Object,IPendingWork,Object)
- uid: System.IComparable
  parent: System
  isExternal: true
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.Workflow.Runtime.IPendingWork
  parent: System.Workflow.Runtime
  isExternal: false
  name: IPendingWork
  nameWithType: IPendingWork
  fullName: System.Workflow.Runtime.IPendingWork
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
  nameWithType: WorkflowInstance.EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
- uid: System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Equals(Object)
  nameWithType: WorkflowInstance.Equals(Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Workflow.Runtime.WorkflowInstance.GetHashCode
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetHashCode()
  nameWithType: WorkflowInstance.GetHashCode()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowDefinition()
  nameWithType: WorkflowInstance.GetWorkflowDefinition()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition()
- uid: System.Workflow.ComponentModel.Activity
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: Activity
  nameWithType: Activity
  fullName: System.Workflow.ComponentModel.Activity
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowNextTimerExpiration()
  nameWithType: WorkflowInstance.GetWorkflowNextTimerExpiration()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration()
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowQueueData()
  nameWithType: WorkflowInstance.GetWorkflowQueueData()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData()
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.Runtime.WorkflowQueueInfo}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<WorkflowQueueInfo>
  nameWithType: ReadOnlyCollection<WorkflowQueueInfo>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Workflow.Runtime.WorkflowQueueInfo>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Workflow.Runtime.WorkflowQueueInfo>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Workflow.Runtime.WorkflowQueueInfo
    name: WorkflowQueueInfo
    nameWithType: WorkflowQueueInfo
    fullName: WorkflowQueueInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Workflow.Runtime.WorkflowInstance.InstanceId
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: InstanceId
  nameWithType: WorkflowInstance.InstanceId
  fullName: System.Workflow.Runtime.WorkflowInstance.InstanceId
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Workflow.Runtime.WorkflowInstance.Load
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Load()
  nameWithType: WorkflowInstance.Load()
  fullName: System.Workflow.Runtime.WorkflowInstance.Load()
- uid: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: ReloadTrackingProfiles()
  nameWithType: WorkflowInstance.ReloadTrackingProfiles()
  fullName: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles()
- uid: System.Workflow.Runtime.WorkflowInstance.Resume
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Resume()
  nameWithType: WorkflowInstance.Resume()
  fullName: System.Workflow.Runtime.WorkflowInstance.Resume()
- uid: System.Workflow.Runtime.WorkflowInstance.Start
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Start()
  nameWithType: WorkflowInstance.Start()
  fullName: System.Workflow.Runtime.WorkflowInstance.Start()
- uid: System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Suspend(String)
  nameWithType: WorkflowInstance.Suspend(String)
  fullName: System.Workflow.Runtime.WorkflowInstance.Suspend(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Terminate(String)
  nameWithType: WorkflowInstance.Terminate(String)
  fullName: System.Workflow.Runtime.WorkflowInstance.Terminate(String)
- uid: System.Workflow.Runtime.WorkflowInstance.TryUnload
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: TryUnload()
  nameWithType: WorkflowInstance.TryUnload()
  fullName: System.Workflow.Runtime.WorkflowInstance.TryUnload()
- uid: System.Workflow.Runtime.WorkflowInstance.Unload
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Unload()
  nameWithType: WorkflowInstance.Unload()
  fullName: System.Workflow.Runtime.WorkflowInstance.Unload()
- uid: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: WorkflowRuntime
  nameWithType: WorkflowInstance.WorkflowRuntime
  fullName: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime
- uid: System.Workflow.Runtime.WorkflowRuntime
  parent: System.Workflow.Runtime
  isExternal: false
  name: WorkflowRuntime
  nameWithType: WorkflowRuntime
  fullName: System.Workflow.Runtime.WorkflowRuntime
- uid: System.Workflow.Runtime.WorkflowInstance.Abort*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Abort
  nameWithType: WorkflowInstance.Abort
- uid: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: ApplyWorkflowChanges
  nameWithType: WorkflowInstance.ApplyWorkflowChanges
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItem*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: EnqueueItem
  nameWithType: WorkflowInstance.EnqueueItem
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: EnqueueItemOnIdle
  nameWithType: WorkflowInstance.EnqueueItemOnIdle
- uid: System.Workflow.Runtime.WorkflowInstance.Equals*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Equals
  nameWithType: WorkflowInstance.Equals
- uid: System.Workflow.Runtime.WorkflowInstance.GetHashCode*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetHashCode
  nameWithType: WorkflowInstance.GetHashCode
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowDefinition
  nameWithType: WorkflowInstance.GetWorkflowDefinition
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowNextTimerExpiration
  nameWithType: WorkflowInstance.GetWorkflowNextTimerExpiration
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowQueueData
  nameWithType: WorkflowInstance.GetWorkflowQueueData
- uid: System.Workflow.Runtime.WorkflowInstance.InstanceId*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: InstanceId
  nameWithType: WorkflowInstance.InstanceId
- uid: System.Workflow.Runtime.WorkflowInstance.Load*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Load
  nameWithType: WorkflowInstance.Load
- uid: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: ReloadTrackingProfiles
  nameWithType: WorkflowInstance.ReloadTrackingProfiles
- uid: System.Workflow.Runtime.WorkflowInstance.Resume*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Resume
  nameWithType: WorkflowInstance.Resume
- uid: System.Workflow.Runtime.WorkflowInstance.Start*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Start
  nameWithType: WorkflowInstance.Start
- uid: System.Workflow.Runtime.WorkflowInstance.Suspend*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Suspend
  nameWithType: WorkflowInstance.Suspend
- uid: System.Workflow.Runtime.WorkflowInstance.Terminate*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Terminate
  nameWithType: WorkflowInstance.Terminate
- uid: System.Workflow.Runtime.WorkflowInstance.TryUnload*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: TryUnload
  nameWithType: WorkflowInstance.TryUnload
- uid: System.Workflow.Runtime.WorkflowInstance.Unload*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Unload
  nameWithType: WorkflowInstance.Unload
- uid: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: WorkflowRuntime
  nameWithType: WorkflowInstance.WorkflowRuntime
