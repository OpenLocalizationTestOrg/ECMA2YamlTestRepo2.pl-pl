### YamlMime:ManagedReference
items:
- uid: System.Windows.RoutedEventHandler
  id: RoutedEventHandler
  langs:
  - csharp
  name: RoutedEventHandler
  nameWithType: RoutedEventHandler
  fullName: System.Windows.RoutedEventHandler
  type: Delegate
  summary: "Reprezentuje metodę, która będzie obsługiwać różne kierowane zdarzenia, które nie mają określonego zdarzenia danych po przekroczeniu dane, które są wspólne dla wszystkich kierowane zdarzenia."
  remarks: "Delegat RoutedEventHandler służy do kierowanego zdarzenia, które nie raportuje informacje specyficzne dla zdarzenia w danych zdarzenia. Istnieje wiele takich kierowane zdarzenia; wyraźne przykładami <xref:System.Windows.Controls.Primitives.ButtonBase.Click>i <xref:System.Windows.FrameworkElement.Loaded>.</xref:System.Windows.FrameworkElement.Loaded> </xref:System.Windows.Controls.Primitives.ButtonBase.Click>       Najbardziej warte wymienienia różnica między pisanie programu obsługi dla kierowanego zdarzenia, a nie ogólny [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] zdarzeń jest to, że `sender` zdarzenia (element, których program obsługi jest podłączony i wywołać) nie może być uważane za musi być źródłem zdarzenia. Źródło jest zgłaszany jako właściwość w danych zdarzenia (<xref:System.Windows.RoutedEventArgs.Source%2A>).</xref:System.Windows.RoutedEventArgs.Source%2A> Różnica między `sender`i <xref:System.Windows.RoutedEventArgs.Source%2A>powstaje na podstawie zdarzenia rozsyłane do różnych elementów podczas przechodzenia kierowanego zdarzenia za pośrednictwem drzewa.</xref:System.Windows.RoutedEventArgs.Source%2A>       Możesz użyć dowolnej `sender` lub <xref:System.Windows.RoutedEventArgs.Source%2A>dla obiekt odwołania jeśli celowo nie jesteś zainteresowany zachowanie routingu bezpośredniego lub propagacji kierowanego zdarzenia i zamierzasz obsługiwać zdarzenia rozsyłane na elementach, gdzie są najpierw wywoływane.</xref:System.Windows.RoutedEventArgs.Source%2A> W takim przypadku `sender` i <xref:System.Windows.RoutedEventArgs.Source%2A>są tego samego obiektu.</xref:System.Windows.RoutedEventArgs.Source%2A>       Jeśli zamierzasz korzystać z funkcji związanego z używaniem kierowane zdarzenia i odpowiednio zapisu programu obsługi, dwie najważniejsze właściwości dane zdarzenia, które będą działać z podczas pisania programów obsługi zdarzeń są <xref:System.Windows.RoutedEventArgs.Source%2A>i <xref:System.Windows.RoutedEventArgs.Handled%2A>.</xref:System.Windows.RoutedEventArgs.Handled%2A> </xref:System.Windows.RoutedEventArgs.Source%2A>       Dla niektórych kombinacji zdarzenia wejściowe i [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] klasy formantów, element, który wywołuje zdarzenie nie jest pierwszym elementem, który ma możliwość jego obsługa. Jeśli zdarzenie wejściowe ma wersję Podgląd zdarzeń, następnie korzeń drzewa element ma pierwsza okazja, można ustawić <xref:System.Windows.RoutedEventArgs.Handled%2A>do `true` danych udostępnionych zdarzeń i może mieć wpływ, sposobie zgłaszania zdarzeń wejściowych pozostałe elementy w jego trasy zdarzenia.</xref:System.Windows.RoutedEventArgs.Handled%2A> Obsługa zachowanie może dawać wrażenie, że nie jest konkretnym kierowanego zdarzenia podglądu uruchamiany zgodnie z oczekiwaniami. Aby uzyskać więcej informacji, zobacz [Podgląd zdarzeń](~/add/includes/ajax-current-ext-md.md) i [omówienie wprowadzania](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public delegate void RoutedEventHandler(object sender, RoutedEventArgs e);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
