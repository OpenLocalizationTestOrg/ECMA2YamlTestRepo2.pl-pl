### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.FileIOPermissionAttribute
  id: FileIOPermissionAttribute
  children:
  - System.Security.Permissions.FileIOPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  - System.Security.Permissions.FileIOPermissionAttribute.All
  - System.Security.Permissions.FileIOPermissionAttribute.AllFiles
  - System.Security.Permissions.FileIOPermissionAttribute.AllLocalFiles
  - System.Security.Permissions.FileIOPermissionAttribute.Append
  - System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl
  - System.Security.Permissions.FileIOPermissionAttribute.CreatePermission
  - System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery
  - System.Security.Permissions.FileIOPermissionAttribute.Read
  - System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl
  - System.Security.Permissions.FileIOPermissionAttribute.ViewAndModify
  - System.Security.Permissions.FileIOPermissionAttribute.Write
  langs:
  - csharp
  name: FileIOPermissionAttribute
  nameWithType: FileIOPermissionAttribute
  fullName: System.Security.Permissions.FileIOPermissionAttribute
  type: Class
  summary: "Zezwala na akcje zabezpieczeń dla <xref href=&quot;System.Security.Permissions.FileIOPermission&quot;> </xref> ma zostać zastosowany do kodu przy użyciu zabezpieczeń deklaratywnych. Ta klasa nie może być dziedziczona."
  remarks: "Files and directories are specified using absolute paths. When accessing files, a security check is performed when the file is created or opened. The security check is not done again unless the file is closed and reopened. Checking permissions when the file is first accessed minimizes the impact of the security check on application performance because opening a file happens only once, while reading and writing can happen multiple times.  \n  \n The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used.  \n  \n The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. Security attributes are used only for declarative security. For imperative security, use the corresponding permission class.  \n  \n> [!CAUTION]\n>  `Unrestricted` <xref:System.Security.Permissions.FileIOPermission> grants permission for all paths within a file system, including multiple pathnames that can be used to access a single given file. To <xref:System.Security.CodeAccessPermission.Deny%2A> access to a file, you must `Deny` all possible paths to the file. For example, if \\\\\\server\\share is mapped to the network drive X, to `Deny` access to \\\\\\server\\share\\file, you must `Deny` \\\\\\server\\share\\file, X:\\file and any other path that you can use to access the file."
  example:
  - "The following code example demonstrates how to request <xref:System.Security.Permissions.FileIOPermission> by using the FileIOPermissionAttribute class, indicating the only permission that is to be granted to the code.  \n  \n [!code-cpp[Classic FileIOPermissionAttribute Example#1](~/add/codesnippet/cpp/t-system.security.permis_3_1.cpp)]\n [!code-vb[Classic FileIOPermissionAttribute Example#1](~/add/codesnippet/visualbasic/t-system.security.permis_3_1.vb)]\n [!code-cs[Classic FileIOPermissionAttribute Example#1](~/add/codesnippet/csharp/t-system.security.permis_3_1.cs)]  \n  \n The following example shows how to demand that the calling code has unrestricted <xref:System.Security.Permissions.FileIOPermission>. You typically make demands in managed libraries (DLLs) to help protect methods or classes from potentially harmful code.  \n  \n [!code-cpp[Classic FileIOPermissionAttribute Example#2](~/add/codesnippet/cpp/t-system.security.permis_3_2.cpp)]\n [!code-vb[Classic FileIOPermissionAttribute Example#2](~/add/codesnippet/visualbasic/t-system.security.permis_3_2.vb)]\n [!code-cs[Classic FileIOPermissionAttribute Example#2](~/add/codesnippet/csharp/t-system.security.permis_3_2.cs)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Constructor | System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class FileIOPermissionAttribute : System.Security.Permissions.CodeAccessSecurityAttribute
  inheritance:
  - System.Attribute
  - System.Security.Permissions.SecurityAttribute
  - System.Security.Permissions.CodeAccessSecurityAttribute
  implements: []
  inheritedMembers:
  - System.Security.Permissions.SecurityAttribute.Action
  - System.Security.Permissions.SecurityAttribute.Unrestricted
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  id: '#ctor(System.Security.Permissions.SecurityAction)'
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: FileIOPermissionAttribute(SecurityAction)
  nameWithType: FileIOPermissionAttribute.FileIOPermissionAttribute(SecurityAction)
  fullName: System.Security.Permissions.FileIOPermissionAttribute.FileIOPermissionAttribute(SecurityAction)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Security.Permissions.FileIOPermissionAttribute&quot;> </xref> klasy z określonym <xref href=&quot;System.Security.Permissions.SecurityAction&quot;> </xref>."
  remarks: ''
  example:
  - "The following code example creates several instances of the <xref:System.Security.Permissions.FileIOPermissionAttribute> class to set varying levels of file I/O permissions.  \n  \n [!code-cpp[System.Security.Permissions.FileIOPermissionAttribute#1](~/add/codesnippet/cpp/b53c5cc8-9649-49f3-9193-_1.cpp)]\n [!code-cs[System.Security.Permissions.FileIOPermissionAttribute#1](~/add/codesnippet/csharp/b53c5cc8-9649-49f3-9193-_1.cs)]\n [!code-vb[System.Security.Permissions.FileIOPermissionAttribute#1](~/add/codesnippet/visualbasic/b53c5cc8-9649-49f3-9193-_1.vb)]"
  syntax:
    content: public FileIOPermissionAttribute (System.Security.Permissions.SecurityAction action);
    parameters:
    - id: action
      type: System.Security.Permissions.SecurityAction
      description: "Jeden z <xref href=&quot;System.Security.Permissions.SecurityAction&quot;> </xref> wartości."
  overload: System.Security.Permissions.FileIOPermissionAttribute.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> action </code> Parametru nie jest prawidłową <xref href=&quot;System.Security.Permissions.SecurityAction&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.All
  id: All
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: All
  nameWithType: FileIOPermissionAttribute.All
  fullName: System.Security.Permissions.FileIOPermissionAttribute.All
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Pobiera lub ustawia pełny dostęp do pliku lub katalogu, który jest określony przez wartość ciągu."
  remarks: "Ta właściwość określa dostępu dla pojedynczego pliku lub katalogu. Aby określić dodatkowe pliki i katalogi, należy użyć dodatkowych atrybutów."
  example:
  - "The following code example sets the All property to grant full access to the specified directory.  \n  \n [!code-cpp[System.Security.Permissions.FileIOPermissionAttribute#6](~/add/codesnippet/cpp/p-system.security.permis_24_1.cpp)]\n [!code-cs[System.Security.Permissions.FileIOPermissionAttribute#6](~/add/codesnippet/csharp/p-system.security.permis_24_1.cs)]\n [!code-vb[System.Security.Permissions.FileIOPermissionAttribute#6](~/add/codesnippet/visualbasic/p-system.security.permis_24_1.vb)]"
  syntax:
    content: public string All { get; set; }
    return:
      type: System.String
      description: "Ścieżka bezwzględna do pliku lub katalogu do pełnego dostępu."
  overload: System.Security.Permissions.FileIOPermissionAttribute.All*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Metoda get nie jest obsługiwana dla tej właściwości."
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.AllFiles
  id: AllFiles
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: AllFiles
  nameWithType: FileIOPermissionAttribute.AllFiles
  fullName: System.Security.Permissions.FileIOPermissionAttribute.AllFiles
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Pobiera lub ustawia dozwolone dostęp do wszystkich plików."
  remarks: "Ta właściwość pobiera lub ustawia dozwolone dostęp do wszystkich plików na dyskach lokalnych komputera i sieci.       Osoba <xref:System.Security.Permissions.FileIOPermissionAccess>wartość można określić za pomocą bitowej `AND` operacji.</xref:System.Security.Permissions.FileIOPermissionAccess>"
  syntax:
    content: public System.Security.Permissions.FileIOPermissionAccess AllFiles { get; set; }
    return:
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "Bitowe połączenie <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref> wartości, które reprezentuje uprawnienia dla wszystkich plików. Wartość domyślna to <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>."
  overload: System.Security.Permissions.FileIOPermissionAttribute.AllFiles*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.AllLocalFiles
  id: AllLocalFiles
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: AllLocalFiles
  nameWithType: FileIOPermissionAttribute.AllLocalFiles
  fullName: System.Security.Permissions.FileIOPermissionAttribute.AllLocalFiles
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Pobiera lub ustawia dozwolone dostęp do wszystkich plików lokalnych."
  remarks: "Lokalne pliki są pliki znajdujące się na komputerze lokalnym. Wszystkie pliki, które nie są dostępne za pośrednictwem dysku sieciowego są pliki lokalne.       Osoba <xref:System.Security.Permissions.FileIOPermissionAccess>wartość można określić za pomocą bitowej `AND` operacji.</xref:System.Security.Permissions.FileIOPermissionAccess>"
  syntax:
    content: public System.Security.Permissions.FileIOPermissionAccess AllLocalFiles { get; set; }
    return:
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "Bitowe połączenie <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref> wartości, które reprezentuje uprawnienia dla wszystkich plików lokalnych. Wartość domyślna to <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>."
  overload: System.Security.Permissions.FileIOPermissionAttribute.AllLocalFiles*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.Append
  id: Append
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: Append
  nameWithType: FileIOPermissionAttribute.Append
  fullName: System.Security.Permissions.FileIOPermissionAttribute.Append
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Pobiera lub ustawia Dołącz dostępu do pliku lub katalogu, który jest określony przez wartość ciągu."
  remarks: "Ta właściwość określa dostępu dla pojedynczego pliku lub katalogu. Aby określić dodatkowe pliki i katalogi, należy użyć dodatkowych atrybutów."
  example:
  - "The following code example sets the Append property to grant <xref:System.Security.Permissions.FileIOPermissionAccess> access to files in the specified directory.  \n  \n [!code-cpp[System.Security.Permissions.FileIOPermissionAttribute#4](~/add/codesnippet/cpp/p-system.security.permis_6_1.cpp)]\n [!code-cs[System.Security.Permissions.FileIOPermissionAttribute#4](~/add/codesnippet/csharp/p-system.security.permis_6_1.cs)]\n [!code-vb[System.Security.Permissions.FileIOPermissionAttribute#4](~/add/codesnippet/visualbasic/p-system.security.permis_6_1.vb)]"
  syntax:
    content: public string Append { get; set; }
    return:
      type: System.String
      description: "Ścieżka bezwzględna plik lub katalog dołączania dostępu."
  overload: System.Security.Permissions.FileIOPermissionAttribute.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl
  id: ChangeAccessControl
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: ChangeAccessControl
  nameWithType: FileIOPermissionAttribute.ChangeAccessControl
  fullName: System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Pobiera lub ustawia plik lub katalog, w którym można zmienić informacji dotyczących kontroli dostępu."
  remarks: "Ta właściwość pobiera lub ustawia dostępu dla pojedynczego pliku lub katalogu. Użyj dodatkowych <xref:System.Security.Permissions.FileIOPermissionAttribute>atrybutów, aby określić dodatkowe pliki i katalogi.</xref:System.Security.Permissions.FileIOPermissionAttribute>      > [!IMPORTANT] > Listy kontroli dostępu (ACL) w tym artykule opisano osoby lub grupy, którzy lub nie ma praw do określonych akcji na danym pliku i jego właściwości.  Możliwość zmiany listy ACL jest ważne uprawnień i może być przyznany należy z rozwagą."
  syntax:
    content: public string ChangeAccessControl { get; set; }
    return:
      type: System.String
      description: "Ścieżka bezwzględna do pliku lub katalogu, w którym można zmienić informacje dotyczące sterowania."
  overload: System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.CreatePermission
  id: CreatePermission
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: CreatePermission()
  nameWithType: FileIOPermissionAttribute.CreatePermission()
  fullName: System.Security.Permissions.FileIOPermissionAttribute.CreatePermission()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Tworzy i zwraca nowy <xref href=&quot;System.Security.Permissions.FileIOPermission&quot;> </xref>."
  remarks: "Tę metodę należy wywoływać tylko przez system zabezpieczeń, nigdy nie przez kod aplikacji.       W czasie kompilacji atrybuty przekonwertować deklaracje zabezpieczeń do serializacji formularza w metadanych. Zabezpieczenia deklaracyjne danych w metadanych jest tworzona na podstawie ta metoda zwraca odpowiadającego atrybutowi uprawnień."
  syntax:
    content: public override System.Security.IPermission CreatePermission ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "A <xref href=&quot;System.Security.Permissions.FileIOPermission&quot;> </xref> , który odpowiada temu atrybutowi."
  overload: System.Security.Permissions.FileIOPermissionAttribute.CreatePermission*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Informacje o ścieżce do pliku lub katalogu, dla którego ma być zabezpieczone dostępu zawiera nieprawidłowe znaki lub specyfikatory symboli wieloznacznych."
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery
  id: PathDiscovery
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: PathDiscovery
  nameWithType: FileIOPermissionAttribute.PathDiscovery
  fullName: System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Pobiera lub ustawia plik lub katalog, do którego należy przyznać odnajdywania ścieżki."
  remarks: "Path discovery controls access to the information in the path itself. This helps protect sensitive information in the path, such as user names, as well as information about the directory structure revealed in the path. This value does not grant access to files or folders represented by the path.  \n  \n> [!NOTE]\n>  For performance reasons, PathDiscovery should be granted only to directories, not to files. For example, PathDiscovery permission should be granted to paths such as C:\\test and C:\\test\\\\, not to files such as C:\\test\\example.txt.  \n  \n This property sets access for a single file or directory. Use additional attributes to specify additional files and directories."
  example:
  - "The following code example sets the PathDiscovery property to grant <xref:System.Security.Permissions.FileIOPermissionAccess> access to files in the specified directory.  \n  \n [!code-cpp[System.Security.Permissions.FileIOPermissionAttribute#3](~/add/codesnippet/cpp/p-system.security.permis_31_1.cpp)]\n [!code-cs[System.Security.Permissions.FileIOPermissionAttribute#3](~/add/codesnippet/csharp/p-system.security.permis_31_1.cs)]\n [!code-vb[System.Security.Permissions.FileIOPermissionAttribute#3](~/add/codesnippet/visualbasic/p-system.security.permis_31_1.vb)]"
  syntax:
    content: public string PathDiscovery { get; set; }
    return:
      type: System.String
      description: "Ścieżka bezwzględna do pliku lub katalogu."
  overload: System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.Read
  id: Read
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: Read
  nameWithType: FileIOPermissionAttribute.Read
  fullName: System.Security.Permissions.FileIOPermissionAttribute.Read
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Pobiera lub ustawia dostęp do odczytu dla pliku lub katalogu określonym przez wartość ciągu."
  remarks: "Ta właściwość określa dostępu dla pojedynczego pliku lub katalogu. Aby określić dodatkowe pliki i katalogi, należy użyć dodatkowych atrybutów."
  example:
  - "The following example sets the Read property to grant <xref:System.Security.Permissions.FileIOPermissionAccess> access to files in the specified directory.  \n  \n [!code-cpp[System.Security.Permissions.FileIOPermissionAttribute#2](~/add/codesnippet/cpp/p-system.security.permis_20_1.cpp)]\n [!code-cs[System.Security.Permissions.FileIOPermissionAttribute#2](~/add/codesnippet/csharp/p-system.security.permis_20_1.cs)]\n [!code-vb[System.Security.Permissions.FileIOPermissionAttribute#2](~/add/codesnippet/visualbasic/p-system.security.permis_20_1.vb)]"
  syntax:
    content: public string Read { get; set; }
    return:
      type: System.String
      description: "Ścieżka bezwzględna do pliku lub katalogu, aby uzyskać dostęp do odczytu."
  overload: System.Security.Permissions.FileIOPermissionAttribute.Read*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl
  id: ViewAccessControl
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: ViewAccessControl
  nameWithType: FileIOPermissionAttribute.ViewAccessControl
  fullName: System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Pobiera lub ustawia plik lub katalog, w którym można wyświetlać informacje dotyczące kontroli dostępu."
  remarks: "Ta właściwość pobiera lub ustawia dostępu dla pojedynczego pliku lub katalogu. Użyj dodatkowych <xref:System.Security.Permissions.FileIOPermissionAttribute>atrybutów, aby określić dodatkowe pliki i katalogi.</xref:System.Security.Permissions.FileIOPermissionAttribute>      > [!IMPORTANT] > Listy kontroli dostępu (ACL) w tym artykule opisano osoby lub grupy, którzy lub nie ma praw do określonych akcji na danym pliku i jego właściwości.  Możliwość wyświetlania listy ACL jest ważne uprawnień i może być przyznany należy z rozwagą."
  syntax:
    content: public string ViewAccessControl { get; set; }
    return:
      type: System.String
      description: "Ścieżka bezwzględna do pliku lub katalogu, w którym można wyświetlać informacje dotyczące sterowania."
  overload: System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.ViewAndModify
  id: ViewAndModify
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: ViewAndModify
  nameWithType: FileIOPermissionAttribute.ViewAndModify
  fullName: System.Security.Permissions.FileIOPermissionAttribute.ViewAndModify
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Pobiera lub ustawia plik lub katalog, w którym plik danych można wyświetlać i modyfikować."
  remarks: "Ta właściwość określa <xref:System.Security.Permissions.FileIOPermissionAttribute.Append%2A>, <xref:System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery%2A>, <xref:System.Security.Permissions.FileIOPermissionAttribute.Read%2A>, i <xref:System.Security.Permissions.FileIOPermissionAttribute.Write%2A>Właściwości dla pojedynczego pliku lub katalogu.</xref:System.Security.Permissions.FileIOPermissionAttribute.Write%2A> </xref:System.Security.Permissions.FileIOPermissionAttribute.Read%2A> </xref:System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery%2A> </xref:System.Security.Permissions.FileIOPermissionAttribute.Append%2A> Użyj dodatkowych <xref:System.Security.Permissions.FileIOPermissionAttribute>atrybutów, aby określić dodatkowe pliki i katalogi.</xref:System.Security.Permissions.FileIOPermissionAttribute> Prawa dostępu są tylko danych plików obejmują one dostęp do sterowania właściwości <xref:System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl%2A>i <xref:System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl%2A>.</xref:System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl%2A> </xref:System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl%2A>      > [!NOTE] > `get` Akcesor zapewnia zgodność kompilatora C#. Kompilator języka C# wymaga właściwości atrybutów, aby zezwalać na odczyt i zapis."
  syntax:
    content: public string ViewAndModify { get; set; }
    return:
      type: System.String
      description: "Ścieżka bezwzględna do pliku lub katalogu, w którym plik danych można wyświetlać i modyfikować."
  overload: System.Security.Permissions.FileIOPermissionAttribute.ViewAndModify*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> Jest wywoływana metoda dostępu. Metody dostępu jest dostępne tylko dla zgodności kompilatora C#."
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.Write
  id: Write
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: Write
  nameWithType: FileIOPermissionAttribute.Write
  fullName: System.Security.Permissions.FileIOPermissionAttribute.Write
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Pobiera lub ustawia dostęp do zapisu dla pliku lub katalogu określonym przez wartość ciągu."
  remarks: "Ta właściwość określa dostępu dla pojedynczego pliku lub katalogu. Aby określić dodatkowe pliki i katalogi, należy użyć dodatkowych atrybutów."
  example:
  - "The following example sets the Write property to grant <xref:System.Security.Permissions.FileIOPermissionAccess> access to files in the specified directory.  \n  \n [!code-cpp[System.Security.Permissions.FileIOPermissionAttribute#5](~/add/codesnippet/cpp/p-system.security.permis_18_1.cpp)]\n [!code-cs[System.Security.Permissions.FileIOPermissionAttribute#5](~/add/codesnippet/csharp/p-system.security.permis_18_1.cs)]\n [!code-vb[System.Security.Permissions.FileIOPermissionAttribute#5](~/add/codesnippet/visualbasic/p-system.security.permis_18_1.vb)]"
  syntax:
    content: public string Write { get; set; }
    return:
      type: System.String
      description: "Ścieżka bezwzględna do pliku lub katalogu do zapisu."
  overload: System.Security.Permissions.FileIOPermissionAttribute.Write*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Permissions.CodeAccessSecurityAttribute
  isExternal: false
  name: System.Security.Permissions.CodeAccessSecurityAttribute
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Security.Permissions.FileIOPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: FileIOPermissionAttribute(SecurityAction)
  nameWithType: FileIOPermissionAttribute.FileIOPermissionAttribute(SecurityAction)
  fullName: System.Security.Permissions.FileIOPermissionAttribute.FileIOPermissionAttribute(SecurityAction)
- uid: System.Security.Permissions.SecurityAction
  parent: System.Security.Permissions
  isExternal: false
  name: SecurityAction
  nameWithType: SecurityAction
  fullName: System.Security.Permissions.SecurityAction
- uid: System.Security.Permissions.FileIOPermissionAttribute.All
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: All
  nameWithType: FileIOPermissionAttribute.All
  fullName: System.Security.Permissions.FileIOPermissionAttribute.All
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Permissions.FileIOPermissionAttribute.AllFiles
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: AllFiles
  nameWithType: FileIOPermissionAttribute.AllFiles
  fullName: System.Security.Permissions.FileIOPermissionAttribute.AllFiles
- uid: System.Security.Permissions.FileIOPermissionAccess
  parent: System.Security.Permissions
  isExternal: false
  name: FileIOPermissionAccess
  nameWithType: FileIOPermissionAccess
  fullName: System.Security.Permissions.FileIOPermissionAccess
- uid: System.Security.Permissions.FileIOPermissionAttribute.AllLocalFiles
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: AllLocalFiles
  nameWithType: FileIOPermissionAttribute.AllLocalFiles
  fullName: System.Security.Permissions.FileIOPermissionAttribute.AllLocalFiles
- uid: System.Security.Permissions.FileIOPermissionAttribute.Append
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: Append
  nameWithType: FileIOPermissionAttribute.Append
  fullName: System.Security.Permissions.FileIOPermissionAttribute.Append
- uid: System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: ChangeAccessControl
  nameWithType: FileIOPermissionAttribute.ChangeAccessControl
  fullName: System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl
- uid: System.Security.Permissions.FileIOPermissionAttribute.CreatePermission
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: CreatePermission()
  nameWithType: FileIOPermissionAttribute.CreatePermission()
  fullName: System.Security.Permissions.FileIOPermissionAttribute.CreatePermission()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: PathDiscovery
  nameWithType: FileIOPermissionAttribute.PathDiscovery
  fullName: System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery
- uid: System.Security.Permissions.FileIOPermissionAttribute.Read
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: Read
  nameWithType: FileIOPermissionAttribute.Read
  fullName: System.Security.Permissions.FileIOPermissionAttribute.Read
- uid: System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: ViewAccessControl
  nameWithType: FileIOPermissionAttribute.ViewAccessControl
  fullName: System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl
- uid: System.Security.Permissions.FileIOPermissionAttribute.ViewAndModify
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: ViewAndModify
  nameWithType: FileIOPermissionAttribute.ViewAndModify
  fullName: System.Security.Permissions.FileIOPermissionAttribute.ViewAndModify
- uid: System.Security.Permissions.FileIOPermissionAttribute.Write
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: Write
  nameWithType: FileIOPermissionAttribute.Write
  fullName: System.Security.Permissions.FileIOPermissionAttribute.Write
- uid: System.Security.Permissions.FileIOPermissionAttribute.#ctor*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: FileIOPermissionAttribute
  nameWithType: FileIOPermissionAttribute.FileIOPermissionAttribute
- uid: System.Security.Permissions.FileIOPermissionAttribute.All*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: All
  nameWithType: FileIOPermissionAttribute.All
- uid: System.Security.Permissions.FileIOPermissionAttribute.AllFiles*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: AllFiles
  nameWithType: FileIOPermissionAttribute.AllFiles
- uid: System.Security.Permissions.FileIOPermissionAttribute.AllLocalFiles*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: AllLocalFiles
  nameWithType: FileIOPermissionAttribute.AllLocalFiles
- uid: System.Security.Permissions.FileIOPermissionAttribute.Append*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: Append
  nameWithType: FileIOPermissionAttribute.Append
- uid: System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: ChangeAccessControl
  nameWithType: FileIOPermissionAttribute.ChangeAccessControl
- uid: System.Security.Permissions.FileIOPermissionAttribute.CreatePermission*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: CreatePermission
  nameWithType: FileIOPermissionAttribute.CreatePermission
- uid: System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: PathDiscovery
  nameWithType: FileIOPermissionAttribute.PathDiscovery
- uid: System.Security.Permissions.FileIOPermissionAttribute.Read*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: Read
  nameWithType: FileIOPermissionAttribute.Read
- uid: System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: ViewAccessControl
  nameWithType: FileIOPermissionAttribute.ViewAccessControl
- uid: System.Security.Permissions.FileIOPermissionAttribute.ViewAndModify*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: ViewAndModify
  nameWithType: FileIOPermissionAttribute.ViewAndModify
- uid: System.Security.Permissions.FileIOPermissionAttribute.Write*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: Write
  nameWithType: FileIOPermissionAttribute.Write
