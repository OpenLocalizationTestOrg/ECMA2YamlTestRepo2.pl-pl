### YamlMime:ManagedReference
items:
- uid: System.ServiceProcess.ServiceInstaller
  id: ServiceInstaller
  children:
  - System.ServiceProcess.ServiceInstaller.#ctor
  - System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  - System.ServiceProcess.ServiceInstaller.DelayedAutoStart
  - System.ServiceProcess.ServiceInstaller.Description
  - System.ServiceProcess.ServiceInstaller.DisplayName
  - System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)
  - System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  - System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)
  - System.ServiceProcess.ServiceInstaller.ServiceName
  - System.ServiceProcess.ServiceInstaller.ServicesDependedOn
  - System.ServiceProcess.ServiceInstaller.StartType
  - System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)
  langs:
  - csharp
  name: ServiceInstaller
  nameWithType: ServiceInstaller
  fullName: System.ServiceProcess.ServiceInstaller
  type: Class
  summary: "Instaluje klasę, która rozszerza <xref href=&quot;System.ServiceProcess.ServiceBase&quot;> </xref> implementacji usługi. Ta klasa jest wywoływana przez narzędzie instalacji podczas instalowania aplikacji usługi."
  remarks: "The ServiceInstaller does work specific to the service with which it is associated. It is used by the installation utility to write registry values associated with the service to a subkey within the HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services registry key. The service is identified by its ServiceName within this subkey. The subkey also includes the name of the executable or .dll to which the service belongs.  \n  \n To install a service, create a project installer class that inherits from the <xref:System.Configuration.Install.Installer> class, and set the <xref:System.ComponentModel.RunInstallerAttribute> attribute on the class to `true`. Within your project, create one <xref:System.ServiceProcess.ServiceProcessInstaller> instance per service application, and one ServiceInstaller instance for each service in the application. Within your project installer class constructor, set the installation properties for the service using the <xref:System.ServiceProcess.ServiceProcessInstaller> and ServiceInstaller instances, and add the instances to the <xref:System.Configuration.Install.Installer.Installers%2A> collection.  \n  \n> [!NOTE]\n>  It is recommended that you use the constructor for adding installer instances; however, if you need to add to the <xref:System.Configuration.Install.Installer.Installers%2A> collection in the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> method, be sure to perform the same additions to the collection in the <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> method.  \n  \n For all classes deriving from the <xref:System.Configuration.Install.Installer> class, the state of the <xref:System.Configuration.Install.Installer.Installers%2A> collection must be the same in the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> and <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> methods. However, you can avoid the maintenance of the collection across the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> and <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> methods if you add installer instances to the <xref:System.Configuration.Install.Installer.Installers%2A> collection in your custom installer class constructor.When the install utility is called, it looks for the <xref:System.ComponentModel.RunInstallerAttribute> attribute. If the attribute is `true`, the utility installs all the services that were added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection that were associated with your project installer. If <xref:System.ComponentModel.RunInstallerAttribute> is `false` or does not exist, the install utility ignores the project installer.  \n  \n The <xref:System.ServiceProcess.ServiceProcessInstaller> associated with your project installation class installs information common to all ServiceInstaller instances in the project. If this service has anything that separates it from the other services in the installation project, that service-specific information is installed by this method.  \n  \n> [!NOTE]\n>  It is crucial that the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> be identical to the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> of the class you derived from <xref:System.ServiceProcess.ServiceBase>. Normally, the value of the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> property for the service is set within the Main() function of the service application's executable. The Service Control Manager uses the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=fullName> property to locate the service within this executable.  \n  \n You can modify other properties on the ServiceInstaller either before or after adding it to the <xref:System.Configuration.Install.Installer.Installers%2A> collection of your project installer. For example, a service's <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> may be set to start the service automatically at reboot or require a user to start the service manually.  \n  \n Normally, you will not call the methods on ServiceInstaller within your code; they are generally called only by the install utility. The install utility automatically calls the <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=fullName> and <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=fullName> methods during the installation process. It backs out failures, if necessary, by calling <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (or <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=fullName>) on all previously installed components.  \n  \n The installation utility calls <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> to remove the object.  \n  \n An application's install routine maintains information automatically about the components already installed, using the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>. This state information is continuously updated as the <xref:System.ServiceProcess.ServiceProcessInstaller> instance, and each ServiceInstaller instance is installed by the utility. It is usually unnecessary for your code to modify state information explicitly.  \n  \n When the installation is performed, it automatically creates an <xref:System.Diagnostics.EventLogInstaller> to install the event log source associated with the <xref:System.ServiceProcess.ServiceBase> derived class. The <xref:System.Diagnostics.EventLog.Log%2A> property for this source is set by the <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> constructor to the computer's Application log. When you set the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> of the ServiceInstaller (which should be identical to the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> of the service), the <xref:System.Diagnostics.EventLog.Source%2A> is automatically set to the same value. In an installation failure, the source's installation is rolled-back along with previously installed services.  \n  \n The <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> method tries to stop the service if it is running. Whether this succeeds or not, <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> undoes the changes made by <xref:System.ServiceProcess.ServiceInstaller.Install%2A>. If a new source was created for event logging, the source is deleted."
  example:
  - "The following example creates a project installer, called `MyProjectInstaller`, which inherits from <xref:System.Configuration.Install.Installer>. It is assumed there is a service executable that contains two services, \"Hello-World Service 1\" and \"Hello-World Service 2\". Within the constructor for `MyProjectInstaller` (which would be called by the install utility), ServiceInstaller objects are created for each of these services, and a <xref:System.ServiceProcess.ServiceProcessInstaller> is created for the executable. For the install utility to recognize `MyProjectInstaller` as a valid installer, the <xref:System.ComponentModel.RunInstallerAttribute> attribute is set to `true`.  \n  \n Optional properties are set on the process installer and the service installers before the installers are added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection. When the install utility accesses `MyProjectInstaller`, the objects added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection through a call to <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=fullName> will be installed in turn. During the process, the installer maintains state information indicating which objects have been installed, so each can be backed out in turn, if an installation failure occurs.  \n  \n Normally, you would not create an instance of your project installer class explicitly. You would create it and add the <xref:System.ComponentModel.RunInstallerAttribute> attribute to the syntax, but it is the install utility that actually calls, and therefore instantiates, the class.  \n  \n [!code-cpp[Classic ServiceInstaller Example#1](~/add/codesnippet/cpp/t-system.serviceprocess._4_1.cpp)]\n [!code-cs[Classic ServiceInstaller Example#1](~/add/codesnippet/csharp/t-system.serviceprocess._4_1.cs)]\n [!code-vb[Classic ServiceInstaller Example#1](~/add/codesnippet/visualbasic/t-system.serviceprocess._4_1.vb)]"
  syntax:
    content: 'public class ServiceInstaller : System.Configuration.Install.ComponentInstaller'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Configuration.Install.Installer
  - System.Configuration.Install.ComponentInstaller
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Configuration.Install.Installer.AfterInstall
  - System.Configuration.Install.Installer.AfterRollback
  - System.Configuration.Install.Installer.AfterUninstall
  - System.Configuration.Install.Installer.BeforeInstall
  - System.Configuration.Install.Installer.BeforeRollback
  - System.Configuration.Install.Installer.BeforeUninstall
  - System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.Committed
  - System.Configuration.Install.Installer.Committing
  - System.Configuration.Install.Installer.Context
  - System.Configuration.Install.Installer.HelpText
  - System.Configuration.Install.Installer.Installers
  - System.Configuration.Install.Installer.OnAfterInstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnAfterRollback(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnAfterUninstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeInstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeRollback(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeUninstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnCommitted(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnCommitting(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.Parent
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.#ctor
  id: '#ctor'
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: ServiceInstaller()
  nameWithType: ServiceInstaller.ServiceInstaller()
  fullName: System.ServiceProcess.ServiceInstaller.ServiceInstaller()
  type: Constructor
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.ServiceProcess.ServiceInstaller&quot;> </xref> klasy."
  remarks: "Aby zainstalować usługę, należy utworzyć klasę Instalatora projektu dziedziczący z <xref:System.Configuration.Install.Installer>klasy, a następnie ustaw <xref:System.ComponentModel.RunInstallerAttribute>atrybutu dla klasy do `true`.</xref:System.ComponentModel.RunInstallerAttribute> </xref:System.Configuration.Install.Installer> W ramach projektu, utworzyć <xref:System.ServiceProcess.ServiceProcessInstaller>wystąpień dla poszczególnych aplikacji usługi, a drugi <xref:System.ServiceProcess.ServiceInstaller>wystąpienia dla każdej usługi w aplikacji.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> W ramach Twojej konstruktora klasy projektu Instalatora należy ustawić właściwości instalacji dla usługi przy użyciu <xref:System.ServiceProcess.ServiceProcessInstaller>i <xref:System.ServiceProcess.ServiceInstaller>wystąpienia, a następnie dodaj wystąpień <xref:System.Configuration.Install.Installer.Installers%2A>kolekcji.</xref:System.Configuration.Install.Installer.Installers%2A> </xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller>       Konstruktor ServiceInstaller automatycznie generuje źródło dziennika zdarzeń których <xref:System.Diagnostics.EventLog.Log%2A>właściwość jest ustawiona na dziennik aplikacji na komputerze i <xref:System.Diagnostics.EventLogInstaller>.</xref:System.Diagnostics.EventLogInstaller> </xref:System.Diagnostics.EventLog.Log%2A> Podczas ustawiania <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>z <xref:System.ServiceProcess.ServiceInstaller>, powinny być identyczne z <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName>usługi, <xref:System.Diagnostics.EventLog.Source%2A>Właściwości dziennika zdarzeń jest automatycznie ustawiana taką samą wartość.</xref:System.Diagnostics.EventLog.Source%2A> </xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> </xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> Źródło jest usuwane automatycznie w przypadku niepowodzenia instalacji.       Ustawia konstruktora ServiceInstaller <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>właściwości `ServiceStartMode.Manual` do określenia, czy użytkownik Uruchom usługę.</xref:System.ServiceProcess.ServiceInstaller.StartType%2A> Można zresetować właściwości `ServiceStartMode.Automatic` do określenia, czy usługa jest uruchomiona po ponownym uruchomieniu komputera."
  syntax:
    content: public ServiceInstaller ();
    parameters: []
  overload: System.ServiceProcess.ServiceInstaller.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  id: CopyFromComponent(System.ComponentModel.IComponent)
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: CopyFromComponent(IComponent)
  nameWithType: ServiceInstaller.CopyFromComponent(IComponent)
  fullName: System.ServiceProcess.ServiceInstaller.CopyFromComponent(IComponent)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Kopiuje właściwości z wystąpienia <xref href=&quot;System.ServiceProcess.ServiceBase&quot;> </xref> do tego Instalatora."
  remarks: "Ta metoda zostanie wywołana rzadko w kodzie. CopyFromComponent jest zazwyczaj wywoływana tylko przez projektantów.       Nazwa usługi jest zapisywany CopyFromComponent `component` parametr <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>z <xref:System.ServiceProcess.ServiceInstaller>wystąpienia.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> (Ponieważ parametr musi być wystąpieniem klasy, która jest pochodną <xref:System.ServiceProcess.ServiceBase>, `component` może mieć właściwość <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName>.)      > [!NOTE] > Jeśli używasz projektanta programu Visual Studio, ta metoda jest wywoływana w czasie projektowania, gdy użytkownik kliknie `Add Installer` składnik to klasa określona jako jej Instalatora.</xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> </xref:System.ServiceProcess.ServiceBase> Instalator ma wszystkie informacje może ze składnika na żywo i zapisze go w celu użycia w czasie instalacji."
  syntax:
    content: public override void CopyFromComponent (System.ComponentModel.IComponent component);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "<xref href=&quot;System.ComponentModel.IComponent&quot;> </xref> Do skopiowania."
  overload: System.ServiceProcess.ServiceInstaller.CopyFromComponent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Składnik zostanie skojarzony z tym Instalatora nie dziedziczy <xref href=&quot;System.ServiceProcess.ServiceBase&quot;> </xref>."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.DelayedAutoStart
  id: DelayedAutoStart
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: DelayedAutoStart
  nameWithType: ServiceInstaller.DelayedAutoStart
  fullName: System.ServiceProcess.ServiceInstaller.DelayedAutoStart
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Pobiera lub ustawia wartość wskazującą, czy usługa powinno zostać opóźnione uruchomienie, dopóki nie są uruchomione inne usługi automatycznie uruchomiony."
  remarks: "Właściwość DelayedAutoStart może odnosić się do dowolnej usługi, ale jest ignorowana, chyba że tryb uruchamiania usługi jest <xref:System.ServiceProcess.ServiceStartMode>.</xref:System.ServiceProcess.ServiceStartMode> Ustawienie zostanie uwzględnione po następnym ponownym uruchomieniu systemu. Menedżer sterowania usługami nie gwarantuje określony czas rozpoczęcia dla usługi.       Opóźnione automatyczne uruchamianie usługi nie może być członkiem grupy porządkujących, ale może zależeć od innej usługi, automatyczne uruchamianie. Jeśli aplikacja wymaga opóźnionego automatycznego uruchamiania usługi przed jego załadowaniem, wywołanie kończy się niepowodzeniem.       W systemach operacyjnych, które nie obsługują opóźnionego automatycznego uruchamiania ustawienie dla tej właściwości nie ma znaczenia."
  syntax:
    content: public bool DelayedAutoStart { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>opóźnienia automatycznego uruchomienia usługi; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Wartość domyślna to <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceProcess.ServiceInstaller.DelayedAutoStart*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.Description
  id: Description
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: Description
  nameWithType: ServiceInstaller.Description
  fullName: System.ServiceProcess.ServiceInstaller.Description
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Pobiera lub ustawia opis usługi."
  remarks: "Użyj właściwości Description przeznaczenie zainstalowanej usługi dla użytkownika. Użytkownik może przeglądać opis usługi w aplikacjach, które są wyświetlane szczegóły dla zainstalowanych usług.       Na przykład w systemie Windows XP można wyświetlić opis usługi za pomocą narzędzia wiersza polecenia usługi Service Control (Sc.exe) lub można wyświetlić opis usługi w ramach **usług** węzła **Zarządzanie komputerem** konsoli."
  example:
  - "The following code example sets the installation properties for a new Windows service application. The example sets the service name, along with the display name and description. After assigning the installation properties for the service, the example adds the <xref:System.ServiceProcess.ServiceInstaller> object to the <xref:System.Configuration.Install.Installer.Installers%2A> collection.  \n  \n [!code-cs[ServiceProcess_ServiceInstaller#3](~/add/codesnippet/csharp/p-system.serviceprocess._7_1.cs)]\n [!code-vb[ServiceProcess_ServiceInstaller#3](~/add/codesnippet/visualbasic/p-system.serviceprocess._7_1.vb)]"
  syntax:
    content: public string Description { get; set; }
    return:
      type: System.String
      description: "Opis usługi. Wartość domyślna to ciąg pusty (&quot;&quot;)."
  overload: System.ServiceProcess.ServiceInstaller.Description*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.DisplayName
  id: DisplayName
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: DisplayName
  nameWithType: ServiceInstaller.DisplayName
  fullName: System.ServiceProcess.ServiceInstaller.DisplayName
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Wskazuje przyjazną nazwę identyfikującą usługi dla użytkownika."
  remarks: "The DisplayName is used, for example, in the Service Control Manager to provide a user-readable descriptive name for the service. The DisplayName is a registry value, but is never used as a registry key. Therefore, restrictions on the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property value do not apply. <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> is used as the HKEY_LOCAL_MACHINES\\System\\CurrentControlSet\\Services registry key, so it is restricted.  \n  \n The display name is never used by the install utility to identify the service, so there are no restrictions on the choice of name, as there is for the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property."
  syntax:
    content: public string DisplayName { get; set; }
    return:
      type: System.String
      description: "Nazwa skojarzonego z usługą, często używane dla narzędzia interakcyjne."
  overload: System.ServiceProcess.ServiceInstaller.DisplayName*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)
  id: Install(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: Install(IDictionary)
  nameWithType: ServiceInstaller.Install(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Install(IDictionary)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Instaluje usługę przez zapisywanie informacji o aplikacji usługi do rejestru. Ta metoda jest przeznaczona do użycia przez narzędzia instalacji, automatycznie przetwarzające odpowiednie metody."
  remarks: "Zwykle nie będzie wywoływać metody na <xref:System.ServiceProcess.ServiceInstaller>w kodzie; zwykle nazywane są tylko przez narzędzie instalacji.</xref:System.ServiceProcess.ServiceInstaller> Narzędzie instalacji automatycznie wywołuje metodę instalacji podczas instalacji. Go utworzyć kopię zapasową limit niepowodzeń, jeśli to konieczne, przez wywołanie metody <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A>dla obiektu, który wygenerował wyjątek.</xref:System.ServiceProcess.ServiceInstaller.Rollback%2A>       Procedury instalacji aplikacji przechowuje informacje automatycznie o składnikach, które zostały już zainstalowane, za pomocą Instalatora projektu <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> Te informacje stan przekazany do instalacji jako `stateSaver` parametru jest stale aktualizowany jako <xref:System.ServiceProcess.ServiceProcessInstaller>wystąpienia i każdego <xref:System.ServiceProcess.ServiceInstaller>przez narzędzie jest zainstalowane wystąpienie.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> Nie jest konieczne dla swój kod, aby jawnie modyfikować tych informacji o stanie.       <xref:System.ServiceProcess.ServiceProcessInstaller>Skojarzone z instalacji klasy instaluje informacji o projekcie wspólne dla wszystkich <xref:System.ServiceProcess.ServiceInstaller>wystąpień w projekcie.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> Jeśli ta usługa ma niczego, która oddziela go od innych usług w projekcie instalacji, te informacje specyficzne dla usługi zostanie zainstalowany przez tę metodę.       Aby zainstalować usługę, należy utworzyć klasę Instalatora projektu dziedziczący z <xref:System.Configuration.Install.Installer>klasy, a następnie ustaw <xref:System.ComponentModel.RunInstallerAttribute>atrybutu dla klasy do `true`.</xref:System.ComponentModel.RunInstallerAttribute> </xref:System.Configuration.Install.Installer> W ramach projektu, utworzyć <xref:System.ServiceProcess.ServiceProcessInstaller>wystąpień dla poszczególnych aplikacji usługi, a drugi <xref:System.ServiceProcess.ServiceInstaller>wystąpienia dla każdej usługi w aplikacji.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> W ramach Twojej konstruktora klasy projektu Instalatora należy ustawić właściwości instalacji dla usługi przy użyciu <xref:System.ServiceProcess.ServiceProcessInstaller>i <xref:System.ServiceProcess.ServiceInstaller>wystąpienia, a następnie dodaj wystąpień <xref:System.Configuration.Install.Installer.Installers%2A>kolekcji.</xref:System.Configuration.Install.Installer.Installers%2A> </xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller>      > [!NOTE] > Zalecane jest używanie konstruktora dodawania Instalatora wystąpień; jednak jeśli konieczne jest dodanie do <xref:System.Configuration.Install.Installer.Installers%2A>kolekcji w metodzie instalacji, należy wykonać dodatki z tej samej kolekcji w <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>metody.</xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> </xref:System.Configuration.Install.Installer.Installers%2A>       Dla wszystkie klasy wywodzące się z <xref:System.Configuration.Install.Installer>klasy stan <xref:System.Configuration.Install.Installer.Installers%2A>kolekcji muszą być takie same, instalacji i <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>metody.</xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> </xref:System.Configuration.Install.Installer.Installers%2A> </xref:System.Configuration.Install.Installer> Jednak można uniknąć obsługi kolekcji przez instalację i <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>metody, jeśli dodasz wystąpienia Instalatora, aby <xref:System.Configuration.Install.Installer.Installers%2A>kolekcji w konstruktorze klasy użytkownika niestandardowego Instalatora.</xref:System.Configuration.Install.Installer.Installers%2A> </xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>"
  syntax:
    content: public override void Install (System.Collections.IDictionary stateSaver);
    parameters:
    - id: stateSaver
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>Zawierający informacje o kontekście związane z instalacją.</xref:System.Collections.IDictionary>"
  overload: System.ServiceProcess.ServiceInstaller.Install*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Instalacja nie zawiera <xref href=&quot;System.ServiceProcess.ServiceProcessInstaller&quot;> </xref> pliku wykonywalnego.       - lub - nazwa pliku zestawu jest <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> lub ciąg pusty.       - lub - nazwa usługi jest nieprawidłowa.       - lub - nie można otworzyć Menedżera kontroli usług."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Nazwa wyświetlana usługi jest więcej niż 255 znaków długości."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "System nie może wygenerować uchwytu do usługi.       - lub - usługi o tej nazwie jest już zainstalowana."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  id: IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: IsEquivalentInstaller(ComponentInstaller)
  nameWithType: ServiceInstaller.IsEquivalentInstaller(ComponentInstaller)
  fullName: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(ComponentInstaller)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Wskazuje, czy dwa instalatorów zainstalować tę samą usługę."
  remarks: "IsEquivalentInstaller wskazuje, na przykład, czy dwa instalatorów zainstalować tę samą usługę dla tego samego konta użytkownika."
  syntax:
    content: public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);
    parameters:
    - id: otherInstaller
      type: System.Configuration.Install.ComponentInstaller
      description: "A <xref href=&quot;System.Configuration.Install.ComponentInstaller&quot;> </xref> do której są porównanie bieżącego Instalatora."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli wywołanie <xref:System.ServiceProcess.ServiceInstaller.Install*>w obu tych programów instalacyjnych spowodowałoby takie same Instalowanie usługi; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.ServiceProcess.ServiceInstaller.Install*>"
  overload: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)
  id: Rollback(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: Rollback(IDictionary)
  nameWithType: ServiceInstaller.Rollback(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Rollback(IDictionary)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Przywraca zapisywane przez procedurę instalacji w rejestrze informacji o aplikacji usługi. Ta metoda jest przeznaczona do użycia przez narzędzia instalacji, automatycznie przetwarzające odpowiednie metody."
  remarks: "Zwykle nie będzie wywoływać metody na <xref:System.ServiceProcess.ServiceInstaller>w kodzie; zwykle nazywane są tylko przez narzędzie instalacji.</xref:System.ServiceProcess.ServiceInstaller> Narzędzie instalacji automatycznie wywołuje <xref:System.ServiceProcess.ServiceInstaller.Install%2A>metody w ramach procesu instalacji.</xref:System.ServiceProcess.ServiceInstaller.Install%2A> Tworzy kopię go się błędy, jeśli to konieczne, przez wywołanie wycofywania obiektu wygenerowany wyjątek.       Procedury instalacji aplikacji przechowuje informacje automatycznie składniki już zainstalowane, za pomocą Instalatora projektu <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> Te informacje stan przekazany do wycofania jako `savedState` parametru jest stale aktualizowany jako <xref:System.ServiceProcess.ServiceProcessInstaller>wystąpienia i każdego <xref:System.ServiceProcess.ServiceInstaller>przez narzędzie jest zainstalowane wystąpienie.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> Nie jest konieczne dla swój kod, aby jawnie modyfikować tych informacji o stanie."
  syntax:
    content: public override void Rollback (System.Collections.IDictionary savedState);
    parameters:
    - id: savedState
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>Zawierający informacje o kontekście związane z instalacją.</xref:System.Collections.IDictionary>"
  overload: System.ServiceProcess.ServiceInstaller.Rollback*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.ServiceName
  id: ServiceName
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: ServiceName
  nameWithType: ServiceInstaller.ServiceName
  fullName: System.ServiceProcess.ServiceInstaller.ServiceName
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Wskazuje nazwę używaną przez system do identyfikacji usługi. Ta właściwość musi być taki sam jak &lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName&gt; usługi, które chcesz zainstalować."
  remarks: "It is crucial that the ServiceName be identical to the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> of the class you derived from <xref:System.ServiceProcess.ServiceBase>. Normally, the value of the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> property for the service is set within the Main() function of the service application's executable. The Service Control Manager uses the ServiceName property to locate the service within this executable.  \n  \n When you set the ServiceName of the service installer, the <xref:System.Diagnostics.EventLog.Source%2A> of the associated event log is set to the same value. This allows the service to automatically log service commands (such as Start and Stop) calls to the Application log on the computer.  \n  \n> [!NOTE]\n>  If a source by the same name already exists on the computer, but in a log other than the Application log, an exception will be thrown. If the source exists and is associated with the Application log, that source is used to report command calls to the service, and no exception is thrown.  \n  \n The ServiceName cannot be `null` or have zero length. Its maximum size is 256 characters. It also cannot contain forward or backward slashes, '/' or '\\\\', or characters from the ASCII character set with value less than decimal value 32."
  syntax:
    content: public string ServiceName { get; set; }
    return:
      type: System.String
      description: "Nazwa usługi do zainstalowania. Przed prób narzędzie instalacji, aby zainstalować usługę, należy ustawić tę wartość."
  overload: System.ServiceProcess.ServiceInstaller.ServiceName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Właściwość ServiceName jest nieprawidłowa."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.ServicesDependedOn
  id: ServicesDependedOn
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: ServicesDependedOn
  nameWithType: ServiceInstaller.ServicesDependedOn
  fullName: System.ServiceProcess.ServiceInstaller.ServicesDependedOn
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Wskazuje usługi, które muszą być uruchomione na uruchamianie tej usługi."
  remarks: "Usługa może wymagać innych usług, należy uruchomić przed jego rozpoczęciem. Klucz w rejestrze są zapisywane informacje z tej właściwości. Gdy użytkownik (lub systemu, w przypadku automatycznego uruchamiania) próbuje uruchomić usługę, Menedżer sterowania usługami (SCM) sprawdza, czy każdy z usług w tablicy została już uruchomiona.       Jeśli usługi w tablicy nie jest następnie uruchomiony, SCM próbuje uruchomić je. Dotyczy to również usług z `Manual` <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>.</xref:System.ServiceProcess.ServiceInstaller.StartType%2A>       Jeśli każda usługa, od których zależy usługa ta nie powiedzie się, ta usługa nie zostanie uruchomiona. Nie jest zgłaszany wyjątek, jeśli system nie jest uruchomiona, ponieważ nie istnieje żaden wyjątek obsługi na poziomie systemu, aby wykryć. Wybieranie sposobu obsługi błędów uruchamiania usługi, należy wdrożyć w kodzie. Zazwyczaj do użytkownika podczas uruchamiania pojawia się okno dialogowe, gdy nie można uruchomić usługi.       Jeśli usługa nie zostanie uruchomiona, wpis w dzienniku zdarzeń aplikacji.       Usług, od których zależy usługa ta nie jest konieczne należeć do tego samego pliku wykonywalnego."
  syntax:
    content: public string[] ServicesDependedOn { get; set; }
    return:
      type: System.String[]
      description: "Tablica usług, które muszą być uruchomione, zanim będzie można uruchomić usługi skojarzonej z tego Instalatora."
  overload: System.ServiceProcess.ServiceInstaller.ServicesDependedOn*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.StartType
  id: StartType
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: StartType
  nameWithType: ServiceInstaller.StartType
  fullName: System.ServiceProcess.ServiceInstaller.StartType
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Wskazuje, jak i kiedy ta usługa jest uruchomiona."
  remarks: "Ustaw wartości StartType określa automatycznie uruchomienia usługi po ponownym rozruchu lub że użytkownik musi ręcznie uruchomić usługę. Usługi można także wyłączyć, określając, że nie można było go uruchomić, ręcznie lub programowo, dopóki nie jest włączona.       Nie można zmienić <xref:System.ServiceProcess.ServiceInstaller>wartości właściwości po zakończeniu instalacji.</xref:System.ServiceProcess.ServiceInstaller> Aby zmienić wartości StartType, można być konieczne odinstalowanie i ponowne zainstalowanie usługi albo ręcznie zmienić ustawienie przy użyciu Menedżera kontroli usług."
  syntax:
    content: public System.ServiceProcess.ServiceStartMode StartType { get; set; }
    return:
      type: System.ServiceProcess.ServiceStartMode
      description: "A <xref href=&quot;System.ServiceProcess.ServiceStartMode&quot;> </xref> reprezentujący sposób usługa jest uruchomiona. Wartość domyślna to <xref uid=&quot;langword_csharp_Manual&quot; name=&quot;Manual&quot; href=&quot;&quot;> </xref>, który określa, że usługa nie zostanie automatycznie uruchomiona po ponownym rozruchu."
  overload: System.ServiceProcess.ServiceInstaller.StartType*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "Tryb uruchamiania nie jest wartością <xref href=&quot;System.ServiceProcess.ServiceStartMode&quot;> </xref> wyliczenia."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)
  id: Uninstall(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: Uninstall(IDictionary)
  nameWithType: ServiceInstaller.Uninstall(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Uninstall(IDictionary)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Odinstalowuje usługi przez usunięcie z rejestru informacji o nim."
  remarks: "Odinstaluj pierwszej próby zatrzymania usługi przed jego odinstalowaniem. Jeśli usługa nie może zostać zatrzymana, żaden wyjątek zostanie przechwycony i metody będzie kontynuowane przy użyciu usunięcie usługi.       Zwykle nie będzie wywoływać metody na <xref:System.ServiceProcess.ServiceInstaller>w kodzie; zwykle nazywane są tylko przez narzędzie instalacji.</xref:System.ServiceProcess.ServiceInstaller> InstallUtil służy do odinstalowania usług, jak również zainstalować je; Odinstalowywanie ma przełącznik w wywołaniu wiersza polecenia.       Procedury odinstalowywania aplikacji przechowuje informacje automatycznie o składnikach odinstalowywane przy użyciu Instalatora projektu <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> Informacje o tym stanie przekazany Odinstaluj jako `savedState` parametru jest stale aktualizowany jako <xref:System.ServiceProcess.ServiceProcessInstaller>wystąpienia i każdego <xref:System.ServiceProcess.ServiceInstaller>wystąpienie zostało zainstalowane za pomocą narzędzia.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> Nie jest konieczne dla swój kod, aby jawnie modyfikować tych informacji o stanie.       Dla wszystkie klasy wywodzące się z <xref:System.Configuration.Install.Installer>klasy stan <xref:System.Configuration.Install.Installer.Installers%2A>kolekcji muszą być takie same, w <xref:System.ServiceProcess.ServiceInstaller.Install%2A>i odinstalowywania metody.</xref:System.ServiceProcess.ServiceInstaller.Install%2A> </xref:System.Configuration.Install.Installer.Installers%2A> </xref:System.Configuration.Install.Installer> Jednak można uniknąć obsługi kolekcji między <xref:System.ServiceProcess.ServiceInstaller.Install%2A>i odinstalowywania metody, jeśli dodasz wystąpienia Instalatora, aby <xref:System.Configuration.Install.Installer.Installers%2A>kolekcji w konstruktorze klasy użytkownika niestandardowego Instalatora.</xref:System.Configuration.Install.Installer.Installers%2A> </xref:System.ServiceProcess.ServiceInstaller.Install%2A>       Nie ma mechanizmu wycofywania odinstalowywania, dlatego jedna usługa odinstalowanie zakończy się niepowodzeniem, to nie wpływa na inne usługi (zazwyczaj w tym samym projekcie instalacji) odinstalowywane."
  syntax:
    content: public override void Uninstall (System.Collections.IDictionary savedState);
    parameters:
    - id: savedState
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>Zawierający informacje o kontekście związane z instalacją.</xref:System.Collections.IDictionary>"
  overload: System.ServiceProcess.ServiceInstaller.Uninstall*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Nie można otworzyć Menedżera kontroli usług.       - lub - systemu nie można uzyskać dojścia do usługi."
  platform:
  - net462
references:
- uid: System.Configuration.Install.ComponentInstaller
  isExternal: false
  name: System.Configuration.Install.ComponentInstaller
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ComponentModel.Win32Exception
  parent: System.ComponentModel
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.ServiceProcess.ServiceInstaller.#ctor
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServiceInstaller()
  nameWithType: ServiceInstaller.ServiceInstaller()
  fullName: System.ServiceProcess.ServiceInstaller.ServiceInstaller()
- uid: System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: CopyFromComponent(IComponent)
  nameWithType: ServiceInstaller.CopyFromComponent(IComponent)
  fullName: System.ServiceProcess.ServiceInstaller.CopyFromComponent(IComponent)
- uid: System.ComponentModel.IComponent
  parent: System.ComponentModel
  isExternal: false
  name: IComponent
  nameWithType: IComponent
  fullName: System.ComponentModel.IComponent
- uid: System.ServiceProcess.ServiceInstaller.DelayedAutoStart
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: DelayedAutoStart
  nameWithType: ServiceInstaller.DelayedAutoStart
  fullName: System.ServiceProcess.ServiceInstaller.DelayedAutoStart
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceProcess.ServiceInstaller.Description
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Description
  nameWithType: ServiceInstaller.Description
  fullName: System.ServiceProcess.ServiceInstaller.Description
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ServiceProcess.ServiceInstaller.DisplayName
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: DisplayName
  nameWithType: ServiceInstaller.DisplayName
  fullName: System.ServiceProcess.ServiceInstaller.DisplayName
- uid: System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Install(IDictionary)
  nameWithType: ServiceInstaller.Install(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Install(IDictionary)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: IsEquivalentInstaller(ComponentInstaller)
  nameWithType: ServiceInstaller.IsEquivalentInstaller(ComponentInstaller)
  fullName: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(ComponentInstaller)
- uid: System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Rollback(IDictionary)
  nameWithType: ServiceInstaller.Rollback(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Rollback(IDictionary)
- uid: System.ServiceProcess.ServiceInstaller.ServiceName
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServiceName
  nameWithType: ServiceInstaller.ServiceName
  fullName: System.ServiceProcess.ServiceInstaller.ServiceName
- uid: System.ServiceProcess.ServiceInstaller.ServicesDependedOn
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServicesDependedOn
  nameWithType: ServiceInstaller.ServicesDependedOn
  fullName: System.ServiceProcess.ServiceInstaller.ServicesDependedOn
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ServiceProcess.ServiceInstaller.StartType
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: StartType
  nameWithType: ServiceInstaller.StartType
  fullName: System.ServiceProcess.ServiceInstaller.StartType
- uid: System.ServiceProcess.ServiceStartMode
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceStartMode
  nameWithType: ServiceStartMode
  fullName: System.ServiceProcess.ServiceStartMode
- uid: System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Uninstall(IDictionary)
  nameWithType: ServiceInstaller.Uninstall(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Uninstall(IDictionary)
- uid: System.ServiceProcess.ServiceInstaller.#ctor*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServiceInstaller
  nameWithType: ServiceInstaller.ServiceInstaller
- uid: System.ServiceProcess.ServiceInstaller.CopyFromComponent*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: CopyFromComponent
  nameWithType: ServiceInstaller.CopyFromComponent
- uid: System.ServiceProcess.ServiceInstaller.DelayedAutoStart*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: DelayedAutoStart
  nameWithType: ServiceInstaller.DelayedAutoStart
- uid: System.ServiceProcess.ServiceInstaller.Description*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Description
  nameWithType: ServiceInstaller.Description
- uid: System.ServiceProcess.ServiceInstaller.DisplayName*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: DisplayName
  nameWithType: ServiceInstaller.DisplayName
- uid: System.ServiceProcess.ServiceInstaller.Install*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Install
  nameWithType: ServiceInstaller.Install
- uid: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: IsEquivalentInstaller
  nameWithType: ServiceInstaller.IsEquivalentInstaller
- uid: System.ServiceProcess.ServiceInstaller.Rollback*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Rollback
  nameWithType: ServiceInstaller.Rollback
- uid: System.ServiceProcess.ServiceInstaller.ServiceName*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServiceName
  nameWithType: ServiceInstaller.ServiceName
- uid: System.ServiceProcess.ServiceInstaller.ServicesDependedOn*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServicesDependedOn
  nameWithType: ServiceInstaller.ServicesDependedOn
- uid: System.ServiceProcess.ServiceInstaller.StartType*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: StartType
  nameWithType: ServiceInstaller.StartType
- uid: System.ServiceProcess.ServiceInstaller.Uninstall*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Uninstall
  nameWithType: ServiceInstaller.Uninstall
