### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.SemanticResultKey
  id: SemanticResultKey
  children:
  - System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])
  - System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])
  - System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder
  langs:
  - csharp
  name: SemanticResultKey
  nameWithType: SemanticResultKey
  fullName: System.Speech.Recognition.SemanticResultKey
  type: Class
  summary: "Kojarzy ciąg klucza z <xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref> wartości, aby zdefiniować <xref href=&quot;System.Speech.Recognition.SemanticValue&quot;> </xref> obiektów."
  remarks: "To podstawowa jednostka semantycznego wyrażenie w System.Speech <xref:System.Speech.Recognition.SemanticValue>, która jest parę klucz/wartość.</xref:System.Speech.Recognition.SemanticValue>       Przy użyciu obiektów SemanticResultKey, tag <xref:System.Speech.Recognition.SemanticResultValue>wystąpień znajdujących się w <xref:System.Speech.Recognition.GrammarBuilder>obiekty i ciągi, dzięki czemu wartości można łatwo uzyskać dostęp z <xref:System.Speech.Recognition.SemanticValue>wystąpień na rozpoznawanie.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue>       Można użyć <xref:System.Speech.Recognition.SemanticResultValue>i SemanticResultKey obiektów, w połączeniu z <xref:System.Speech.Recognition.GrammarBuilder>i <xref:System.Speech.Recognition.Choices>obiekty do definiowania struktury semantycznego dla gramatyki rozpoznawania mowy.</xref:System.Speech.Recognition.Choices> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue> Aby uzyskać dostęp do informacji semantycznych w wyniku rozpoznawania, uzyskać wystąpienia <xref:System.Speech.Recognition.SemanticValue>za pośrednictwem <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A>właściwości <xref:System.Speech.Recognition.RecognizedPhrase>.</xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> </xref:System.Speech.Recognition.SemanticValue>       Aby uzyskać więcej informacji o korzystaniu z <xref:System.Speech.Recognition.SemanticResultValue>i obiekty SemanticResultKey, zobacz [SemanticResultValue zrozumienia i obiekty SemanticResultKey](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c) i [przy użyciu SemanticResultKey wyodrębnić SemanticResultValue](http://msdn.microsoft.com/en-us/198e29b8-845f-4cec-a25e-f55c0eaf46aa) w [systemu mowy Programming Guide dla programu .NET Framework 4.0](http://msdn.microsoft.com/en-us/610116c7-3817-40ff-857b-5d41e8511043).</xref:System.Speech.Recognition.SemanticResultValue>"
  example:
  - "The following example creates a <xref:System.Speech.Recognition.Grammar> to recognize password input of the form \"My password is …\", where the actual input is matched with a wildcard.  \n  \n The wildcard is tagged with a semantic key, and the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> handler checks for the presence of this tag to verify that a password input has occurred.  \n  \n```c#  \nprivate void pwdGrammar()   \n{  \n  GrammarBuilder pwdBuilder = new GrammarBuilder(\"My Password is\");  \n  GrammarBuilder wildcardBuilder = new GrammarBuilder();  \n  wildcardBuilder.AppendWildcard();  \n  SemanticResultKey wildcardKey= new SemanticResultKey(\"Password\", wildcardBuilder);  \n  pwdBuilder+=wildcardKey;  \n  Grammar grammar = new Grammar(pwdBuilder);  \n  grammar.Name = \"Password input\";  \n  \n  grammar.SpeechRecognized += delegate(object sender, SpeechRecognizedEventArgs eventArgs)   \n  {  \n    SemanticValue semantics = eventArgs.Result.Semantics;  \n    RecognitionResult result=eventArgs.Result;  \n  \n    if (!semantics.ContainsKey(\"Password\"))   \n    {  \n      SpeechUI.SendTextFeedback(eventArgs.Result, \"No Password Provided\", false);  \n    }  \n    else   \n    {  \n      RecognizedAudio pwdAudio = result.GetAudioForWordRange(result.Words[3], result.Words[result.Words.Count - 1]);  \n      MemoryStream pwdMemoryStream = new MemoryStream();  \n      pwdAudio.WriteToAudioStream(pwdMemoryStream);  \n      if (!IsValidPwd(pwdMemoryStream))   \n      {  \n        string badPwd = System.IO.Path.GetTempPath() + \"BadPwd\" + (new Random()).Next().ToString() + \".wav\";  \n        FileStream waveStream = new FileStream(badPwd, FileMode.Create);  \n        pwdAudio.WriteToWaveStream(waveStream);  \n        waveStream.Flush();  \n        waveStream.Close();  \n        SpeechUI.SendTextFeedback(eventArgs.Result, \"Invalid Password\", false);  \n  \n      }  \n    }  \n  };  \n  grammar.Enabled = true;  \n  _recognizer.LoadGrammar(grammar);  \n  UpdateGrammarTree(_grammarTreeView, _recognizer);  \n  \n}  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{_semanticKey.DebugSummary}")]

      public class SemanticResultKey
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])
  id: '#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])'
  parent: System.Speech.Recognition.SemanticResultKey
  langs:
  - csharp
  name: SemanticResultKey(String,GrammarBuilder[])
  nameWithType: SemanticResultKey.SemanticResultKey(String,GrammarBuilder[])
  fullName: System.Speech.Recognition.SemanticResultKey.SemanticResultKey(String,GrammarBuilder[])
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Przypisuje do co najmniej jeden klucz semantyki <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> obiekty używane do tworzenia gramatyki rozpoznawania mowy."
  remarks: "Z powodu niejawne konwersje `builders` obsługuje argument <xref:System.Speech.Recognition.SemanticResultValue>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.Choices>, i <xref:System.String>także obiekty.</xref:System.String> </xref:System.Speech.Recognition.Choices> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> Aby uzyskać więcej informacji na niejawne konwersje zobacz <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>.</xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>       Podczas wykonywania operacji rozpoznawania <xref:System.Speech.Recognition.GrammarBuilder>obiektów w `builders` argumentu są traktowane jako sekwencyjnych.</xref:System.Speech.Recognition.GrammarBuilder> Na przykład jeśli następujące <xref:System.Speech.Recognition.SemanticResultValue>jest używany do tworzenia <xref:System.Speech.Recognition.Grammar>, dane wejściowe do aparatu rozpoznawania musi zawierać słów &quot;szybki lis brązowy&quot; w sekwencji ma być rozpoznawane.</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.SemanticResultValue>      ```c#   SemanticResultKey stringTest=new SemanticResultKey(       &quot;stringTest&quot;, new GrammarBuilder[] {       new GrammarBuilder(&quot;the&quot;),       new GrammarBuilder(&quot;quick&quot;),       new GrammarBuilder(&quot;brown&quot;),       new GrammarBuilder(&quot;fox&quot;)});   ````semanticResultKey` Argument zawiera tag używane do dostępu <xref:System.Speech.Recognition.SemanticValue>który może być zwracany.</xref:System.Speech.Recognition.SemanticValue>       <xref:System.Speech.Recognition.SemanticValue.Value%2A>z <xref:System.Speech.Recognition.SemanticValue>jest określany przez <xref:System.Speech.Recognition.GrammarBuilder>wystąpienia zapewniane przez `builders` parametru.</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A>       Jeśli <xref:System.Speech.Recognition.GrammarBuilder>obiekty zawierają żadnych wystąpień definiującego <xref:System.Speech.Recognition.SemanticResultValue>, wartość <xref:System.Speech.Recognition.SemanticValue>jest `null`.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder>       Jeśli <xref:System.Speech.Recognition.GrammarBuilder>obiektów w `builders` parametru podaj nieoznakowanego (nie są skojarzone z <xref:System.Speech.Recognition.SemanticResultKey>obiektu) <xref:System.Speech.Recognition.SemanticResultValue>wystąpienie, które jest używane przez logikę rozpoznawania, danego wystąpienia <xref:System.Speech.Recognition.SemanticResultValue>określi <xref:System.Speech.Recognition.SemanticValue.Value%2A>Właściwość <xref:System.Speech.Recognition.SemanticValue>który jest tworzony.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.GrammarBuilder>       Powinien istnieć jeden i tylko jeden nieoznakowany <xref:System.Speech.Recognition.SemanticResultValue>wystąpienia w <xref:System.Speech.Recognition.GrammarBuilder>obiekty określone przez `builders` parametru.</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue> Jeśli wiele wystąpień nieoznakowany <xref:System.Speech.Recognition.SemanticResultValue>są skojarzone z <xref:System.Speech.Recognition.SemanticResultKey>, każda będzie podejmować próby zestaw wartości <xref:System.Speech.Recognition.SemanticValue>utworzone w wyniku rozpoznawania.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> Jest to niedozwolone, a aparat rozpoznawania wygeneruje wyjątek podczas próby użycia <xref:System.Speech.Recognition.Grammar>utworzone za pomocą takich <xref:System.Speech.Recognition.SemanticResultKey>wystąpienia.</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Grammar>       Wystąpienia <xref:System.Speech.Recognition.SemanticResultValue>zawartych w <xref:System.Speech.Recognition.GrammarBuilder>obiekty określone przez `builders` parametru i już skojarzona z inną <xref:System.Speech.Recognition.SemanticResultKey>nie mają wpływu na bieżące <xref:System.Speech.Recognition.SemanticResultKey>wystąpienia.</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue>"
  example:
  - "The following example creates a <xref:System.Speech.Recognition.Grammar> to recognize password input of the form \"My password is …\", where the actual input is matched with a wildcard.  \n  \n The wildcard is tagged by a <xref:System.Speech.Recognition.SpeechRecognizer> whose key value is \"Password\". The <xref:System.Speech.Recognition.Grammar.SpeechRecognized> handler checks for the presence of this tag, obtains the audio input of the password, and verifies the password.  \n  \n```c#  \nprivate void pwdGrammar()   \n{  \n  GrammarBuilder pwdBuilder = new GrammarBuilder(\"My Password is\");  \n  GrammarBuilder wildcardBuilder = new GrammarBuilder();  \n  wildcardBuilder.AppendWildcard();  \n  SemanticResultKey wildcardKey= new SemanticResultKey(\"Password\", wildcardBuilder);  \n  pwdBuilder+=wildcardKey;  \n  Grammar grammar = new Grammar(pwdBuilder);  \n  grammar.Name = \"Password input\";  \n  \n  grammar.SpeechRecognized +=   \n    delegate(object sender, SpeechRecognizedEventArgs eventArgs)   \n    {  \n      SemanticValue semantics = eventArgs.Result.Semantics;  \n      RecognitionResult result=eventArgs.Result;  \n  \n      if (!semantics.ContainsKey(\"Password\"))   \n      {  \n        SpeechUI.SendTextFeedback(eventArgs.Result, \"No Password Provided\", false);  \n      }  \n      else   \n      {  \n        RecognizedAudio pwdAudio = result.GetAudioForWordRange(  \n                  result.Words[3],  \n                  result.Words[result.Words.Count - 1]);  \n                  MemoryStream pwdMemoryStream = new MemoryStream();  \n                  pwdAudio.WriteToAudioStream(pwdMemoryStream);  \n        if (!IsValidPwd(pwdMemoryStream))   \n        {  \n          string badPwd = System.IO.Path.GetTempPath() + \"BadPwd\" + (new Random()).Next().ToString() + \".wav\";  \n          FileStream waveStream = new FileStream(badPwd, FileMode.Create);    \n          pwdAudio.WriteToWaveStream(waveStream);  \n          waveStream.Flush();  \n          waveStream.Close();  \n          SpeechUI.SendTextFeedback(eventArgs.Result, \"Invalid Password\", false);      \n        }  \n      }  \n    };  \n  \n  grammar.Enabled = true;  \n  _recognizer.LoadGrammar(grammar);  \n  UpdateGrammarTree(_grammarTreeView, _recognizer);  \n  \n}  \n```"
  syntax:
    content: public SemanticResultKey (string semanticResultKey, System.Speech.Recognition.GrammarBuilder[] builders);
    parameters:
    - id: semanticResultKey
      type: System.String
      description: "Tag, który ma być używany jako klucz semantyki dostępu do <xref href=&quot;System.Speech.Recognition.SemanticValue&quot;> </xref> wystąpienia skojarzonego z <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> obiekty określone przez `builders` argumentu."
    - id: builders
      type: System.Speech.Recognition.GrammarBuilder[]
      description: "Tablica gramatyki składników, które zostaną skojarzone z <xref href=&quot;System.Speech.Recognition.SemanticValue&quot;> </xref> obiekt z tagiem zdefiniowane w `semanticResultKey`."
  overload: System.Speech.Recognition.SemanticResultKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])
  id: '#ctor(System.String,System.String[])'
  parent: System.Speech.Recognition.SemanticResultKey
  langs:
  - csharp
  name: SemanticResultKey(String,String[])
  nameWithType: SemanticResultKey.SemanticResultKey(String,String[])
  fullName: System.Speech.Recognition.SemanticResultKey.SemanticResultKey(String,String[])
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Przypisuje do co najmniej jeden klucz semantyki <xref:System.String>wystąpień używane do tworzenia gramatyki rozpoznawania mowy.</xref:System.String>"
  remarks: "Podczas wykonywania operacji rozpoznawania <xref:System.String>obiektów używanych w `phrases` parametru są traktowane jako sekwencyjnych.</xref:System.String> Na przykład jeśli następujące <xref:System.Speech.Recognition.SemanticResultValue>jest używany do tworzenia <xref:System.Speech.Recognition.Grammar>, dane wejściowe do aparatu rozpoznawania musi zawierać słów &quot;szybki lis brązowy&quot; w sekwencji ma być rozpoznawane.</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.SemanticResultValue>      ```c#   SemanticResultKey stringTest=new SemanticResultKey(&quot;stringTest&quot;,                                    new string[] {                                                  &quot;the&quot;,                                                  &quot;quick&quot;,                                                  &quot;brown&quot;,                                                  &quot;fox&quot;});   ````semanticResultKey` Argument określa klucz służący do dostępu <xref:System.Speech.Recognition.SemanticValue>który może być zwracany.</xref:System.Speech.Recognition.SemanticValue>       Jeśli musisz utworzyć <xref:System.Speech.Recognition.Grammar>przy użyciu <xref:System.Speech.Recognition.GrammarBuilder>obiekt, który zawiera klucz semantyki z tablicę obiektów string <xref:System.Speech.Recognition.SemanticValue.Value%2A>z <xref:System.Speech.Recognition.SemanticValue>utworzone przez operację rozpoznawania będzie ciąg używany rozpoznawanie.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.Grammar> W poprzednim przykładzie, oznacza to, że <xref:System.Speech.Recognition.SemanticValue.Value%2A>byłoby &quot;szybki lis brązowy&quot;.</xref:System.Speech.Recognition.SemanticValue.Value%2A>"
  example:
  - "The following example creates a <xref:System.Speech.Recognition.Grammar> from a <xref:System.Speech.Recognition.GrammarBuilder> object that uses a <xref:System.Speech.Recognition.SemanticResultKey>, which is defined by an array of <xref:System.String> objects.  \n  \n A recognition engine using the <xref:System.Speech.Recognition.Grammar> created will recognize the phrase \"color red green blue zero\". The semantics of the <xref:System.Speech.Recognition.RecognizedPhrase> returned by recognition will contain a <xref:System.Speech.Recognition.SemanticValue> with a <xref:System.Speech.Recognition.SemanticValue.Value%2A> of \"red green blue\". You can access the <xref:System.Speech.Recognition.SemanticValue> using the \"code\" tag.  \n  \n Because of the `SemanticResultValue(\"zero\", 5)` appended to the <xref:System.Speech.Recognition.GrammarBuilder>, the root <xref:System.Speech.Recognition.SemanticValue> object in the <xref:System.Speech.Recognition.RecognizedPhrase> will have a value of 5.  \n  \n```c#  \nprivate void keyTest()   \n{  \n  // Say \"color red green blue zero\"  \n  GrammarBuilder gb = new GrammarBuilder(\"color\") +  \n                        new SemanticResultKey(\"code\",   \n                          (new string[] {\"red\", \"green\", \"blue\"})) +  \n                        new SemanticResultValue(\"zero\", 5);  \n  Grammar g = new Grammar(gb);  \n  g.Name = \"keyTest\";  \n  _recognizer.LoadGrammar(g);  \n}  \n```"
  syntax:
    content: public SemanticResultKey (string semanticResultKey, string[] phrases);
    parameters:
    - id: semanticResultKey
      type: System.String
      description: "Tag, aby można używać dostępu <xref href=&quot;System.Speech.Recognition.SemanticValue&quot;> </xref> wystąpienia skojarzonego z <xref:System.String>obiekty określone przez `phrases` argument.</xref:System.String>"
    - id: phrases
      type: System.String[]
      description: "Co najmniej jeden <xref:System.String>obiektów, którego połączonych tekstu zostaną skojarzone z <xref href=&quot;System.Speech.Recognition.SemanticValue&quot;> </xref> obiekt z tagiem zdefiniowane w `semanticResultKey`.</xref:System.String>"
  overload: System.Speech.Recognition.SemanticResultKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder
  id: ToGrammarBuilder
  parent: System.Speech.Recognition.SemanticResultKey
  langs:
  - csharp
  name: ToGrammarBuilder()
  nameWithType: SemanticResultKey.ToGrammarBuilder()
  fullName: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Zwraca wystąpienie klasy <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> utworzone na podstawie bieżącego <xref href=&quot;System.Speech.Recognition.SemanticResultKey&quot;> </xref> wystąpienia."
  remarks: "Korzystanie z <xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A>odpowiada za pomocą <xref:System.Speech.Recognition.GrammarBuilder>Konstruktor pobierający <xref:System.Speech.Recognition.SemanticResultKey>jako argument (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29>).</xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A>"
  example:
  - "The following example creates a <xref:System.Speech.Recognition.Grammar> object that supports commands to change the background color.  \n  \n A <xref:System.Speech.Recognition.Choices> object (`colorChoice`) containing the list of options for background colors is filled using the [Add(GrammarBuilder\\[\\])](assetId:///M:System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])?qualifyHint=False&autoUpgrade=False) method with <xref:System.Speech.Recognition.GrammarBuilder> instances. The <xref:System.Speech.Recognition.GrammarBuilder> instances are obtained through the ToGrammarBuilder method on the <xref:System.Speech.Recognition.SemanticResultValue> objects created from color strings.  \n  \n A <xref:System.Speech.Recognition.GrammarBuilder> is then obtained by calling ToGrammarBuilder on a <xref:System.Speech.Recognition.SemanticResultKey> instance, which will be used to key the semantic choices in `colorChoice`.  \n  \n```c#  \n  \nprivate Grammar CreateGrammarBuilderRGBSemantics()   \n{  \n  \n  // Create a set of choices, each a lookup from a color name to RGB.  \n  // Choices constructors do not take SemanticResultValue parameters, so cast   \n  // the SemanticResultValue to GrammarBuilder.  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n    SemanticResultValue colorValue=new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.  \n    colorChoice.Add(colorValue.ToGrammarBuilder());      \n  }  \n  SemanticResultKey choiceKey = new SemanticResultKey(\"rgb\", colorChoice);  \n  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  \n  \n  // Create two intermediate grammars with introductory phrase and the color choice.  \n  GrammarBuilder makeBackgroundBuilder = \"Make background\";  \n  makeBackgroundBuilder.Append(choiceBuilder);  \n  \n  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder(\"Configure background as\");  \n  configureBackgroundBuilder.Append((new SemanticResultKey(\"rgb\", colorChoice)).ToGrammarBuilder());  \n  \n  // Create the Grammar object, which recognizes either intermediate grammar.  \n  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] {makeBackgroundBuilder, configureBackgroundBuilder}));  \n  grammar.Name = \"Make Background /Configure background as\";  \n  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();
    parameters: []
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "Zwraca wystąpienie klasy <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> utworzone na podstawie bieżącego <xref href=&quot;System.Speech.Recognition.SemanticResultKey&quot;> </xref> wystąpienia."
  overload: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: SemanticResultKey(String,GrammarBuilder[])
  nameWithType: SemanticResultKey.SemanticResultKey(String,GrammarBuilder[])
  fullName: System.Speech.Recognition.SemanticResultKey.SemanticResultKey(String,GrammarBuilder[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Recognition.GrammarBuilder[]
  parent: System.Speech.Recognition
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder[]
  spec.csharp:
  - uid: System.Speech.Recognition.GrammarBuilder
    name: GrammarBuilder
    nameWithType: GrammarBuilder
    fullName: GrammarBuilder[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: SemanticResultKey(String,String[])
  nameWithType: SemanticResultKey.SemanticResultKey(String,String[])
  fullName: System.Speech.Recognition.SemanticResultKey.SemanticResultKey(String,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: ToGrammarBuilder()
  nameWithType: SemanticResultKey.ToGrammarBuilder()
  fullName: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder()
- uid: System.Speech.Recognition.GrammarBuilder
  parent: System.Speech.Recognition
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder
- uid: System.Speech.Recognition.SemanticResultKey.#ctor*
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: SemanticResultKey
  nameWithType: SemanticResultKey.SemanticResultKey
- uid: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder*
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: ToGrammarBuilder
  nameWithType: SemanticResultKey.ToGrammarBuilder
