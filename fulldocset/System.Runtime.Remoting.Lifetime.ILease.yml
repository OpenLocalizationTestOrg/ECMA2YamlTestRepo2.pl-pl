### YamlMime:ManagedReference
items:
- uid: System.Runtime.Remoting.Lifetime.ILease
  id: ILease
  children:
  - System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime
  - System.Runtime.Remoting.Lifetime.ILease.CurrentState
  - System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime
  - System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor)
  - System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor,System.TimeSpan)
  - System.Runtime.Remoting.Lifetime.ILease.Renew(System.TimeSpan)
  - System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime
  - System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout
  - System.Runtime.Remoting.Lifetime.ILease.Unregister(System.Runtime.Remoting.Lifetime.ISponsor)
  langs:
  - csharp
  name: ILease
  nameWithType: ILease
  fullName: System.Runtime.Remoting.Lifetime.ILease
  type: Interface
  summary: "Definiuje obiekt dzierżawy okres istnienia, który jest używany przez usługę okres istnienia komunikacji zdalnej."
  remarks: "Rozproszone odzyskiwanie kolekcji formantów, usunięcie aplikacji serwera. Tradycyjnym rozproszonej wyrzucanie elementów bezużytecznych używa liczby odwołań i polecenie ping dla formantu. Działa to również w przypadku kilku klientów dla każdego obiektu, ale nie działa dobrze w przypadku, gdy istnieją tysiące klientów dla każdego obiektu. Okres istnienia usługi można założyć funkcja tradycyjnych rozproszonej moduł Garbage Collector i skale sytuacji, gdy zwiększa liczby klientów.       Okres istnienia usługi kojarzy dzierżawy z każdego obiektu zdalnie aktywowane. Gdy dzierżawa wygaśnie, obiekt jest usunięty. Dzierżawę można określić, że obiekt ma nieograniczony okres istnienia.       Każdy <xref:System.AppDomain>zawiera Menedżera dzierżawy, który zarządza dzierżawy w domenie.</xref:System.AppDomain> Menedżer dzierżawy okresowo sprawdza dzierżawy do czasu wygaśnięcia. Jeśli Dzierżawa wygasła, możesz albo można anulowane przez usunięcie jego odwołanie do dzierżawy lub odnowiony, wywołując jedną lub więcej sponsorzy dzierżawy.       Dzierżawa zawiera właściwości, które określają jego zasad i metod, które odnowić czas trwania dzierżawy. Dzierżawa uwidacznia interfejs ILease.       Na przykład przedstawiający sposób użycia interfejsu ILease zobacz [okresy istnienia](http://msdn.microsoft.com/en-us/334a30e5-33cb-4f0f-a38a-ed4abc5560fa)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface ILease
  implements: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime
  id: CurrentLeaseTime
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: CurrentLeaseTime
  nameWithType: ILease.CurrentLeaseTime
  fullName: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Pobiera czas pozostały dzierżawy."
  syntax:
    content: public TimeSpan CurrentLeaseTime { get; }
    return:
      type: System.TimeSpan
      description: "Ilość czasu na dzierżawę."
  overload: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Bezpośredniego obiektu wywołującego wykonuje wywołanie przez odwołanie do interfejsu i nie ma uprawnienia infrastruktury."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentState
  id: CurrentState
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: CurrentState
  nameWithType: ILease.CurrentState
  fullName: System.Runtime.Remoting.Lifetime.ILease.CurrentState
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Pobiera bieżący <xref href=&quot;System.Runtime.Remoting.Lifetime.LeaseState&quot;> </xref> dzierżawy."
  syntax:
    content: public System.Runtime.Remoting.Lifetime.LeaseState CurrentState { get; }
    return:
      type: System.Runtime.Remoting.Lifetime.LeaseState
      description: "Bieżący <xref href=&quot;System.Runtime.Remoting.Lifetime.LeaseState&quot;> </xref> dzierżawy."
  overload: System.Runtime.Remoting.Lifetime.ILease.CurrentState*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Bezpośredniego obiektu wywołującego wykonuje wywołanie przez odwołanie do interfejsu i nie ma uprawnienia infrastruktury."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime
  id: InitialLeaseTime
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: InitialLeaseTime
  nameWithType: ILease.InitialLeaseTime
  fullName: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Pobiera lub ustawia początkową czasu dzierżawy."
  remarks: "Jeśli ustawiono właściwość InitialLeaseTime <xref:System.TimeSpan?displayProperty=fullName>, dzierżawy nigdy nie będzie limit czasu i skojarzonych z nim obiekt ma nieograniczony okres istnienia.</xref:System.TimeSpan?displayProperty=fullName>"
  syntax:
    content: public TimeSpan InitialLeaseTime { get; set; }
    return:
      type: System.TimeSpan
      description: "Początkowy czas dzierżawy."
  overload: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Bezpośredniego obiektu wywołującego wykonuje wywołanie przez odwołanie do interfejsu i nie ma uprawnienia infrastruktury."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor)
  id: Register(System.Runtime.Remoting.Lifetime.ISponsor)
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: Register(ISponsor)
  nameWithType: ILease.Register(ISponsor)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Register(ISponsor)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Rejestruje sponsor dzierżawy bez odnawiania dzierżawy."
  remarks: "Jeśli nie zarejestrowano sponsor z bieżącej metody, nie zostanie odnowiony dzierżawy."
  syntax:
    content: public void Register (System.Runtime.Remoting.Lifetime.ISponsor obj);
    parameters:
    - id: obj
      type: System.Runtime.Remoting.Lifetime.ISponsor
      description: "Wywołanie zwrotne obiektu sponsor."
  overload: System.Runtime.Remoting.Lifetime.ILease.Register*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Bezpośredniego obiektu wywołującego wykonuje wywołanie przez odwołanie do interfejsu i nie ma uprawnienia infrastruktury."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor,System.TimeSpan)
  id: Register(System.Runtime.Remoting.Lifetime.ISponsor,System.TimeSpan)
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: Register(ISponsor,TimeSpan)
  nameWithType: ILease.Register(ISponsor,TimeSpan)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Register(ISponsor,TimeSpan)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Rejestruje sponsor dzierżawy i jest odnawiana go przez określony <xref:System.TimeSpan>.</xref:System.TimeSpan>"
  syntax:
    content: public void Register (System.Runtime.Remoting.Lifetime.ISponsor obj, TimeSpan renewalTime);
    parameters:
    - id: obj
      type: System.Runtime.Remoting.Lifetime.ISponsor
      description: "Wywołanie zwrotne obiektu sponsor."
    - id: renewalTime
      type: System.TimeSpan
      description: "Limit czasu na odnawianie dzierżawy przez."
  overload: System.Runtime.Remoting.Lifetime.ILease.Register*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Bezpośredniego obiektu wywołującego wykonuje wywołanie przez odwołanie do interfejsu i nie ma uprawnienia infrastruktury."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.Renew(System.TimeSpan)
  id: Renew(System.TimeSpan)
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: Renew(TimeSpan)
  nameWithType: ILease.Renew(TimeSpan)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Renew(TimeSpan)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Odnawia dzierżawę na określoną godzinę."
  remarks: "Czas trwania dzierżawy jest równa wartości maksymalnej <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A>lub bieżący czas i czas przedłużenia.</xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A>"
  syntax:
    content: public TimeSpan Renew (TimeSpan renewalTime);
    parameters:
    - id: renewalTime
      type: System.TimeSpan
      description: "Limit czasu na odnawianie dzierżawy przez."
    return:
      type: System.TimeSpan
      description: "Czas wygaśnięcia nowej dzierżawy."
  overload: System.Runtime.Remoting.Lifetime.ILease.Renew*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Bezpośredniego obiektu wywołującego wykonuje wywołanie przez odwołanie do interfejsu i nie ma uprawnienia infrastruktury."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime
  id: RenewOnCallTime
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: RenewOnCallTime
  nameWithType: ILease.RenewOnCallTime
  fullName: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Pobiera lub ustawia czas, przez którą wywołania obiektu zdalnego odnawia <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*>.</xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*>"
  remarks: "Po wprowadzeniu wywołania do obiektu zdalnego Usługa okres istnienia dodaje RenewOnCallTime do <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A>tylko wtedy, gdy <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A>spadła poniżej RenewOnCallTime.</xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> </xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> Kolejne wywołania w związku z tym nie zwiększają <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A>bez granica.</xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> Zamiast tego natychmiast po każde wywołanie <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A>jest gwarantowane jako RenewOnCallTime lub dłużej.</xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A>"
  syntax:
    content: public TimeSpan RenewOnCallTime { get; set; }
    return:
      type: System.TimeSpan
      description: "Ilość czasu, przez który wywołanie obiektu zdalnego odnawia <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*>.</xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*>"
  overload: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Bezpośredniego obiektu wywołującego wykonuje wywołanie przez odwołanie do interfejsu i nie ma uprawnienia infrastruktury."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout
  id: SponsorshipTimeout
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: SponsorshipTimeout
  nameWithType: ILease.SponsorshipTimeout
  fullName: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Pobiera lub ustawia czas oczekiwania sponsor mają być zwracane z czas przedłużenia dzierżawy."
  remarks: "Jeśli jest SponsorshipTimeout <xref:System.TimeSpan?displayProperty=fullName>, a następnie tej dzierżawy nie podejmie sponsorzy.</xref:System.TimeSpan?displayProperty=fullName>       Jeśli sponsor nie odpowiada wywołaniu odnawiania dzierżawy, w tym czasie, zakłada, że martwy i zostanie usunięty z listy sponsorzy dla bieżącej dzierżawy."
  syntax:
    content: public TimeSpan SponsorshipTimeout { get; set; }
    return:
      type: System.TimeSpan
      description: "Ilość czasu oczekiwania na sponsor mają być zwracane z czas przedłużenia dzierżawy."
  overload: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Bezpośredniego obiektu wywołującego wykonuje wywołanie przez odwołanie do interfejsu i nie ma uprawnienia infrastruktury."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.Unregister(System.Runtime.Remoting.Lifetime.ISponsor)
  id: Unregister(System.Runtime.Remoting.Lifetime.ISponsor)
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: Unregister(ISponsor)
  nameWithType: ILease.Unregister(ISponsor)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Unregister(ISponsor)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Usuwa sponsor z listy rozdzielonej."
  syntax:
    content: public void Unregister (System.Runtime.Remoting.Lifetime.ISponsor obj);
    parameters:
    - id: obj
      type: System.Runtime.Remoting.Lifetime.ISponsor
      description: "Sponsor dzierżawy wyrejestrować."
  overload: System.Runtime.Remoting.Lifetime.ILease.Unregister*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Bezpośredniego obiektu wywołującego wykonuje wywołanie przez odwołanie do interfejsu i nie ma uprawnienia infrastruktury."
  platform:
  - net462
references:
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: CurrentLeaseTime
  nameWithType: ILease.CurrentLeaseTime
  fullName: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentState
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: CurrentState
  nameWithType: ILease.CurrentState
  fullName: System.Runtime.Remoting.Lifetime.ILease.CurrentState
- uid: System.Runtime.Remoting.Lifetime.LeaseState
  parent: System.Runtime.Remoting.Lifetime
  isExternal: false
  name: LeaseState
  nameWithType: LeaseState
  fullName: System.Runtime.Remoting.Lifetime.LeaseState
- uid: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: InitialLeaseTime
  nameWithType: ILease.InitialLeaseTime
  fullName: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime
- uid: System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor)
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: Register(ISponsor)
  nameWithType: ILease.Register(ISponsor)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Register(ISponsor)
- uid: System.Runtime.Remoting.Lifetime.ISponsor
  parent: System.Runtime.Remoting.Lifetime
  isExternal: false
  name: ISponsor
  nameWithType: ISponsor
  fullName: System.Runtime.Remoting.Lifetime.ISponsor
- uid: System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor,System.TimeSpan)
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: Register(ISponsor,TimeSpan)
  nameWithType: ILease.Register(ISponsor,TimeSpan)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Register(ISponsor,TimeSpan)
- uid: System.Runtime.Remoting.Lifetime.ILease.Renew(System.TimeSpan)
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: Renew(TimeSpan)
  nameWithType: ILease.Renew(TimeSpan)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Renew(TimeSpan)
- uid: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: RenewOnCallTime
  nameWithType: ILease.RenewOnCallTime
  fullName: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime
- uid: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: SponsorshipTimeout
  nameWithType: ILease.SponsorshipTimeout
  fullName: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout
- uid: System.Runtime.Remoting.Lifetime.ILease.Unregister(System.Runtime.Remoting.Lifetime.ISponsor)
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: Unregister(ISponsor)
  nameWithType: ILease.Unregister(ISponsor)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Unregister(ISponsor)
- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: CurrentLeaseTime
  nameWithType: ILease.CurrentLeaseTime
- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentState*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: CurrentState
  nameWithType: ILease.CurrentState
- uid: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: InitialLeaseTime
  nameWithType: ILease.InitialLeaseTime
- uid: System.Runtime.Remoting.Lifetime.ILease.Register*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: Register
  nameWithType: ILease.Register
- uid: System.Runtime.Remoting.Lifetime.ILease.Renew*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: Renew
  nameWithType: ILease.Renew
- uid: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: RenewOnCallTime
  nameWithType: ILease.RenewOnCallTime
- uid: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: SponsorshipTimeout
  nameWithType: ILease.SponsorshipTimeout
- uid: System.Runtime.Remoting.Lifetime.ILease.Unregister*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: Unregister
  nameWithType: ILease.Unregister
