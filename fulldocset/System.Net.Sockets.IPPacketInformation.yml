### YamlMime:ManagedReference
items:
- uid: System.Net.Sockets.IPPacketInformation
  id: IPPacketInformation
  children:
  - System.Net.Sockets.IPPacketInformation.Address
  - System.Net.Sockets.IPPacketInformation.Equals(System.Object)
  - System.Net.Sockets.IPPacketInformation.GetHashCode
  - System.Net.Sockets.IPPacketInformation.Interface
  - System.Net.Sockets.IPPacketInformation.op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  - System.Net.Sockets.IPPacketInformation.op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  langs:
  - csharp
  name: IPPacketInformation
  nameWithType: IPPacketInformation
  fullName: System.Net.Sockets.IPPacketInformation
  type: Struct
  summary: "Przedstawia informacje pakietu po wywołaniu <> </> *> lub <> </> *>."
  syntax:
    content: public struct IPPacketInformation
  inheritance:
  - System.ValueType
  implements: []
  platform:
  - net462
- uid: System.Net.Sockets.IPPacketInformation.Address
  id: Address
  parent: System.Net.Sockets.IPPacketInformation
  langs:
  - csharp
  name: Address
  nameWithType: IPPacketInformation.Address
  fullName: System.Net.Sockets.IPPacketInformation.Address
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Pobiera informacje ze źródła — wersja pakietu, który został odebrany w wyniku wywołania <> </> *> metody lub <> </> *> metody."
  syntax:
    content: public System.Net.IPAddress Address { get; }
    return:
      type: System.Net.IPAddress
      description: "<xref:System.Net.IPAddress>Wskazujące informacji o źródle pakietu, który został odebrany w wyniku wywołania <> </> *> metody lub <> </> *> metody.</xref:System.Net.IPAddress> Dla pakietów, które zostały wysłane z adresu emisji pojedynczej zwróci właściwości adresu <xref:System.Net.IPAddress>nadawcy; dla pakietów multiemisji lub emisji, właściwość Address będzie zwracać multiemisji lub emisji <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> </xref:System.Net.IPAddress>"
  overload: System.Net.Sockets.IPPacketInformation.Address*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.IPPacketInformation.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Net.Sockets.IPPacketInformation
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: IPPacketInformation.Equals(Object)
  fullName: System.Net.Sockets.IPPacketInformation.Equals(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Zwraca wartość wskazującą, czy to wystąpienie jest taki sam jak określony obiekt."
  syntax:
    content: public override bool Equals (object comparand);
    parameters:
    - id: comparand
      type: System.Object
      description: "Obiekt do porównania z tym wystąpieniem."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli <code> comparand </code> jest wystąpieniem <xref href=&quot;System.Net.Sockets.IPPacketInformation&quot;> </xref> i jest równa wartości wystąpienia; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Sockets.IPPacketInformation.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.IPPacketInformation.GetHashCode
  id: GetHashCode
  parent: System.Net.Sockets.IPPacketInformation
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: IPPacketInformation.GetHashCode()
  fullName: System.Net.Sockets.IPPacketInformation.GetHashCode()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Zwraca wartość skrótu dla tego wystąpienia."
  remarks: "Wartość skrótu jest utworzone na podstawie wartości <xref:System.Net.Sockets.IPPacketInformation.Address%2A>i <xref:System.Net.Sockets.IPPacketInformation.Interface%2A>Właściwości.</xref:System.Net.Sockets.IPPacketInformation.Interface%2A> </xref:System.Net.Sockets.IPPacketInformation.Address%2A>"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Skrótu Int32."
  overload: System.Net.Sockets.IPPacketInformation.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.IPPacketInformation.Interface
  id: Interface
  parent: System.Net.Sockets.IPPacketInformation
  langs:
  - csharp
  name: Interface
  nameWithType: IPPacketInformation.Interface
  fullName: System.Net.Sockets.IPPacketInformation.Interface
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Pobiera informacje interfejs sieci skojarzony z wywołania <> </> *> lub <> </> *>."
  syntax:
    content: public int Interface { get; }
    return:
      type: System.Int32
      description: "<xref:System.Int32>Wartość, która reprezentuje indeks interfejsu sieciowego.</xref:System.Int32> Można użyć tego indeksu z <xref:System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces*>Aby uzyskać więcej informacji na temat odpowiedniego interfejsu.</xref:System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces*>"
  overload: System.Net.Sockets.IPPacketInformation.Interface*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.IPPacketInformation.op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  id: op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  parent: System.Net.Sockets.IPPacketInformation
  langs:
  - csharp
  name: op_Equality(IPPacketInformation,IPPacketInformation)
  nameWithType: IPPacketInformation.op_Equality(IPPacketInformation,IPPacketInformation)
  fullName: System.Net.Sockets.IPPacketInformation.op_Equality(IPPacketInformation,IPPacketInformation)
  type: Operator
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Sprawdza, czy dwa określone <xref href=&quot;System.Net.Sockets.IPPacketInformation&quot;> </xref> wystąpienia są równoważne."
  remarks: "Ten operator testów zarówno <xref:System.Net.Sockets.IPPacketInformation.Address%2A>i <xref:System.Net.Sockets.IPPacketInformation.Interface%2A>wartości dla obu argumentów.</xref:System.Net.Sockets.IPPacketInformation.Interface%2A> </xref:System.Net.Sockets.IPPacketInformation.Address%2A>"
  syntax:
    content: public static bool op_Equality (System.Net.Sockets.IPPacketInformation packetInformation1, System.Net.Sockets.IPPacketInformation packetInformation2);
    parameters:
    - id: packetInformation1
      type: System.Net.Sockets.IPPacketInformation
      description: "<xref href=&quot;System.Net.Sockets.IPPacketInformation&quot;> </xref> Wystąpienia, które jest z lewej strony operatora równości."
    - id: packetInformation2
      type: System.Net.Sockets.IPPacketInformation
      description: "<xref href=&quot;System.Net.Sockets.IPPacketInformation&quot;> </xref> Wystąpienia, które jest z prawej strony operatora równości."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>packetInformation1</code> and <code>packetInformation2</code> are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Net.Sockets.IPPacketInformation.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.IPPacketInformation.op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  id: op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  parent: System.Net.Sockets.IPPacketInformation
  langs:
  - csharp
  name: op_Inequality(IPPacketInformation,IPPacketInformation)
  nameWithType: IPPacketInformation.op_Inequality(IPPacketInformation,IPPacketInformation)
  fullName: System.Net.Sockets.IPPacketInformation.op_Inequality(IPPacketInformation,IPPacketInformation)
  type: Operator
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Sprawdza, czy dwa określone <xref href=&quot;System.Net.Sockets.IPPacketInformation&quot;> </xref> wystąpień nie są takie same."
  remarks: "Ten operator testów zarówno <xref:System.Net.Sockets.IPPacketInformation.Address%2A>i <xref:System.Net.Sockets.IPPacketInformation.Interface%2A>wartości dla obu argumentów.</xref:System.Net.Sockets.IPPacketInformation.Interface%2A> </xref:System.Net.Sockets.IPPacketInformation.Address%2A>"
  syntax:
    content: public static bool op_Inequality (System.Net.Sockets.IPPacketInformation packetInformation1, System.Net.Sockets.IPPacketInformation packetInformation2);
    parameters:
    - id: packetInformation1
      type: System.Net.Sockets.IPPacketInformation
      description: "<xref href=&quot;System.Net.Sockets.IPPacketInformation&quot;> </xref> Wystąpienia, które jest z lewej strony operator nierówności."
    - id: packetInformation2
      type: System.Net.Sockets.IPPacketInformation
      description: "<xref href=&quot;System.Net.Sockets.IPPacketInformation&quot;> </xref> Wystąpienie, które ma prawa operator nierówności."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>packetInformation1</code> and <code>packetInformation2</code> are unequal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Net.Sockets.IPPacketInformation.op_Inequality*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.Net.Sockets.IPPacketInformation.Address
  parent: System.Net.Sockets.IPPacketInformation
  isExternal: false
  name: Address
  nameWithType: IPPacketInformation.Address
  fullName: System.Net.Sockets.IPPacketInformation.Address
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: true
  name: IPAddress
  nameWithType: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Net.Sockets.IPPacketInformation.Equals(System.Object)
  parent: System.Net.Sockets.IPPacketInformation
  isExternal: false
  name: Equals(Object)
  nameWithType: IPPacketInformation.Equals(Object)
  fullName: System.Net.Sockets.IPPacketInformation.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Net.Sockets.IPPacketInformation.GetHashCode
  parent: System.Net.Sockets.IPPacketInformation
  isExternal: false
  name: GetHashCode()
  nameWithType: IPPacketInformation.GetHashCode()
  fullName: System.Net.Sockets.IPPacketInformation.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Sockets.IPPacketInformation.Interface
  parent: System.Net.Sockets.IPPacketInformation
  isExternal: false
  name: Interface
  nameWithType: IPPacketInformation.Interface
  fullName: System.Net.Sockets.IPPacketInformation.Interface
- uid: System.Net.Sockets.IPPacketInformation.op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  parent: System.Net.Sockets.IPPacketInformation
  isExternal: false
  name: op_Equality(IPPacketInformation,IPPacketInformation)
  nameWithType: IPPacketInformation.op_Equality(IPPacketInformation,IPPacketInformation)
  fullName: System.Net.Sockets.IPPacketInformation.op_Equality(IPPacketInformation,IPPacketInformation)
- uid: System.Net.Sockets.IPPacketInformation
  parent: System.Net.Sockets
  isExternal: false
  name: IPPacketInformation
  nameWithType: IPPacketInformation
  fullName: System.Net.Sockets.IPPacketInformation
- uid: System.Net.Sockets.IPPacketInformation.op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  parent: System.Net.Sockets.IPPacketInformation
  isExternal: false
  name: op_Inequality(IPPacketInformation,IPPacketInformation)
  nameWithType: IPPacketInformation.op_Inequality(IPPacketInformation,IPPacketInformation)
  fullName: System.Net.Sockets.IPPacketInformation.op_Inequality(IPPacketInformation,IPPacketInformation)
- uid: System.Net.Sockets.IPPacketInformation.Address*
  parent: System.Net.Sockets.IPPacketInformation
  isExternal: false
  name: Address
  nameWithType: IPPacketInformation.Address
- uid: System.Net.Sockets.IPPacketInformation.Equals*
  parent: System.Net.Sockets.IPPacketInformation
  isExternal: false
  name: Equals
  nameWithType: IPPacketInformation.Equals
- uid: System.Net.Sockets.IPPacketInformation.GetHashCode*
  parent: System.Net.Sockets.IPPacketInformation
  isExternal: false
  name: GetHashCode
  nameWithType: IPPacketInformation.GetHashCode
- uid: System.Net.Sockets.IPPacketInformation.Interface*
  parent: System.Net.Sockets.IPPacketInformation
  isExternal: false
  name: Interface
  nameWithType: IPPacketInformation.Interface
- uid: System.Net.Sockets.IPPacketInformation.op_Equality*
  parent: System.Net.Sockets.IPPacketInformation
  isExternal: false
  name: op_Equality
  nameWithType: IPPacketInformation.op_Equality
- uid: System.Net.Sockets.IPPacketInformation.op_Inequality*
  parent: System.Net.Sockets.IPPacketInformation
  isExternal: false
  name: op_Inequality
  nameWithType: IPPacketInformation.op_Inequality
