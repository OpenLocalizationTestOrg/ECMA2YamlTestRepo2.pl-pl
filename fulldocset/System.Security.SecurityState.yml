### YamlMime:ManagedReference
items:
- uid: System.Security.SecurityState
  id: SecurityState
  children:
  - System.Security.SecurityState.#ctor
  - System.Security.SecurityState.EnsureState
  - System.Security.SecurityState.IsStateAvailable
  langs:
  - csharp
  name: SecurityState
  nameWithType: SecurityState
  fullName: System.Security.SecurityState
  type: Class
  summary: "Udostępnia klasę podstawową dla żądania stanu zabezpieczeń akcji z <xref href=&quot;System.AppDomainManager&quot;> </xref> obiektu."
  remarks: "Ta klasa zapewnienie klasę, która zawiera właściwość, która określa istotnych dla zabezpieczeń akcję do wykonania musi dziedziczyć. Obiekt SecurityState, który jest utworzone z klasy pochodnej jest przekazywany do <xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName>metodę, aby określić, czy host umożliwia do wykonania tej akcji.</xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName> Domyślna implementacja <xref:System.AppDomainManager.CheckSecuritySettings%2A>Metoda zawsze zwraca `false`.</xref:System.AppDomainManager.CheckSecuritySettings%2A>  Metoda musi zostać zastąpiona wykryć akcje, które są dozwolone.       Na przykład, jeśli chcesz uzyskać dostępu do kamery internetowej, w kodzie biblioteki, należy utworzyć `WebcamSecurityState` obiekt i wywołanie <xref:System.Security.SecurityState.EnsureState%2A>metodę, aby określić, czy host zezwala na dostęp do kamery w sieci Web, jak pokazano w poniższym przykładzie.</xref:System.Security.SecurityState.EnsureState%2A>  (Możesz znaleźć kod `WebcamSecurityState` w sekcji &quot;Example&quot;.)      ```   WebcamSecurityState securityState = new WebcamSecurityState(&quot;Safe access to Webcam&quot;, WebcamSecurityOptions.SafeAccess);   try   {      securityState.EnsureState();      // Allocate memory.      }   catch (ApplicationException e)   {       // Handle any exception that is thrown.       System.Diagnostics.Debug.WriteLine(e.Message);   }   ```Przetwarzania wywołania <xref:System.AppDomainManager>należy pamiętać o `WebcamSecurityState` za pośrednictwem zastępująca <xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName>metody, jak pokazano w poniższym przykładzie.</xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName> </xref:System.AppDomainManager>      ```   [SecurityCritical]   public override bool CheckSecuritySettings(System.Security.SecurityState securityState)   {      switch (securityState.ToString())      {         case &quot;WebcamSecurityState&quot;:         {             if ((securityState as WebcamSecurityState).Options == WebcamSecurityOptions.SafeAccess)                 return PromptUser((securityState as WebcamSecurityState).Description);              return false;         }      }         return false;   }   private bool PromptUser(string text)   {      // Replace the OpenFileDialog with a custom user prompt.      OpenFileDialog o = new OpenFileDialog();      o.Title = text;      if (o.ShowDialog() == DialogResult.OK)         return true;      else         return false;   }      ```"
  example:
  - "The following example shows how to override the SecurityState class.  \n  \n```  \n[SecurityCritical]  \npublic enum WebcamSecurityOptions  \n    {  \n        SafeAccess,  \n        FullAccess  \n    }  \n[SecurityCritical]  \npublic class WebcamSecurityState : SecurityState  \n{  \n    public WebcamSecurityState(string description, WebcamSecurityOptions options)  \n    {  \n        Options = options;  \n        Description = description;  \n    }  \n    public WebcamSecurityOptions Options { get; set; }  \n    public string Description { get; set; }  \n    public override void EnsureState()  \n    {  \n       if (!IsStateAvailable())  \n           throw new ApplicationException(\"WebcamSecurityState not available\");  \n    }  \n }  \n  \n```"
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public abstract class SecurityState
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.SecurityState.#ctor
  id: '#ctor'
  parent: System.Security.SecurityState
  langs:
  - csharp
  name: SecurityState()
  nameWithType: SecurityState.SecurityState()
  fullName: System.Security.SecurityState.SecurityState()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Security.SecurityState&quot;> </xref> klasy."
  syntax:
    content: protected SecurityState ();
    parameters: []
  overload: System.Security.SecurityState.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityState.EnsureState
  id: EnsureState
  parent: System.Security.SecurityState
  langs:
  - csharp
  name: EnsureState()
  nameWithType: SecurityState.EnsureState()
  fullName: System.Security.SecurityState.EnsureState()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "W przypadku przesłonięcia w klasie pochodnej zapewnia, że stan reprezentowanego przez <xref href=&quot;System.Security.SecurityState&quot;> </xref> jest dostępna na hoście."
  remarks: "Implementacja tej metody powinny być podobne do poniższego przykładu.      ```   public override void EnsureState()   {       if (!IsStateAvailable())             throw new ApplicationException(&quot;WebcamSecurityState not available&quot;);   }      ```"
  syntax:
    content: public abstract void EnsureState ();
    parameters: []
  overload: System.Security.SecurityState.EnsureState*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityState.IsStateAvailable
  id: IsStateAvailable
  parent: System.Security.SecurityState
  langs:
  - csharp
  name: IsStateAvailable()
  nameWithType: SecurityState.IsStateAvailable()
  fullName: System.Security.SecurityState.IsStateAvailable()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Pobiera wartość wskazującą, czy stan dla tej implementacji <xref href=&quot;System.Security.SecurityState&quot;> </xref> klasy jest dostępny na bieżącym hoście."
  remarks: "Wywołania IsStateAvailable <xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName>metodę, aby określić, czy stan reprezentowanym przez tę klasę jest dostępne na hoście.</xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=fullName>       Zobacz <xref:System.Security.SecurityState>klasy dla implementacji przykład <xref:System.AppDomainManager.CheckSecuritySettings%2A>metody.</xref:System.AppDomainManager.CheckSecuritySettings%2A> </xref:System.Security.SecurityState>"
  syntax:
    content: public bool IsStateAvailable ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli stan jest dostępna; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.SecurityState.IsStateAvailable*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.SecurityState.#ctor
  parent: System.Security.SecurityState
  isExternal: false
  name: SecurityState()
  nameWithType: SecurityState.SecurityState()
  fullName: System.Security.SecurityState.SecurityState()
- uid: System.Security.SecurityState.EnsureState
  parent: System.Security.SecurityState
  isExternal: false
  name: EnsureState()
  nameWithType: SecurityState.EnsureState()
  fullName: System.Security.SecurityState.EnsureState()
- uid: System.Security.SecurityState.IsStateAvailable
  parent: System.Security.SecurityState
  isExternal: false
  name: IsStateAvailable()
  nameWithType: SecurityState.IsStateAvailable()
  fullName: System.Security.SecurityState.IsStateAvailable()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.SecurityState.#ctor*
  parent: System.Security.SecurityState
  isExternal: false
  name: SecurityState
  nameWithType: SecurityState.SecurityState
- uid: System.Security.SecurityState.EnsureState*
  parent: System.Security.SecurityState
  isExternal: false
  name: EnsureState
  nameWithType: SecurityState.EnsureState
- uid: System.Security.SecurityState.IsStateAvailable*
  parent: System.Security.SecurityState
  isExternal: false
  name: IsStateAvailable
  nameWithType: SecurityState.IsStateAvailable
