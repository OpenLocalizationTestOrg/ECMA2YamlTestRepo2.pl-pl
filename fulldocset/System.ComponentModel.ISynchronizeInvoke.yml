### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.ISynchronizeInvoke
  id: ISynchronizeInvoke
  children:
  - System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])
  - System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)
  - System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])
  - System.ComponentModel.ISynchronizeInvoke.InvokeRequired
  langs:
  - csharp
  name: ISynchronizeInvoke
  nameWithType: ISynchronizeInvoke
  fullName: System.ComponentModel.ISynchronizeInvoke
  type: Interface
  summary: "Zapewnia sposób synchronicznie lub asynchronicznie wykonania delegata."
  remarks: "The ISynchronizeInvoke interface provides synchronous and asynchronous communication between objects about the occurrence of an event. Objects that implement this interface can receive notification that an event has occurred, and they can respond to queries about the event. In this way, clients can ensure that one request has been processed before they submit a subsequent request that depends on completion of the first.  \n  \n The ISynchronizeInvoke class provides two ways to invoke a process:  \n  \n1.  Asynchronously, by using the [BeginInvoke(Delegate, Object\\[\\])](assetId:///M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])?qualifyHint=False&autoUpgrade=True) method. <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> starts a process and then returns immediately. Use <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> to wait until the process started by <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> completes.  \n  \n2.  Synchronously, by using the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method. <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> starts a process, waits until it completes, and then returns. Use <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when the control's main thread is different from the calling thread to marshal the call to the proper thread.  \n  \n> [!NOTE]\n>  The <xref:System.Security.Permissions.HostProtectionAttribute> attribute applied to this class has the following <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> property value: <xref:System.Security.Permissions.HostProtectionResource> &#124; <xref:System.Security.Permissions.HostProtectionResource>. The <xref:System.Security.Permissions.HostProtectionAttribute> does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the <xref:System.Security.Permissions.HostProtectionAttribute> class or [SQL Server Programming and Host Protection Attributes](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public interface ISynchronizeInvoke
  implements: []
  platform:
  - net462
- uid: System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])
  id: BeginInvoke(System.Delegate,System.Object[])
  parent: System.ComponentModel.ISynchronizeInvoke
  langs:
  - csharp
  name: BeginInvoke(Delegate,Object[])
  nameWithType: ISynchronizeInvoke.BeginInvoke(Delegate,Object[])
  fullName: System.ComponentModel.ISynchronizeInvoke.BeginInvoke(Delegate,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Asynchronicznie wykonuje delegata w wątku, który utworzył ten obiekt."
  remarks: "`method` Delegata jest wykonywana w wątku, który utworzył obiekt, zamiast wątku, w którym wywołano BeginInvoke.       Delegat jest wywoływana asynchronicznie, a ta metoda zwraca natychmiast. Ta metoda jest wywoływana z dowolnego wątku. Wartość zwrócona przez proces uruchomiony przy użyciu tej metody należy wywołać <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A>można uzyskać wartość.</xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A>       Jeśli należy wywołać synchronicznie delegata, użyj <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A>metody zamiast.</xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A>"
  syntax:
    content: public IAsyncResult BeginInvoke (Delegate method, object[] args);
    parameters:
    - id: method
      type: System.Delegate
      description: "A <xref:System.Delegate>do metody, która przyjmuje parametry o takiej samej liczby i typów, które są zawarte w `args`.</xref:System.Delegate>"
    - id: args
      type: System.Object[]
      description: "Tablica typu <xref:System.Object>przekazywane jako argumenty do podanej metody.</xref:System.Object> Może to być <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> jeśli niezbędne są bez argumentów."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Interfejs reprezentujący operację asynchroniczną uruchomiony przez wywołanie tej metody.</xref:System.IAsyncResult>"
  overload: System.ComponentModel.ISynchronizeInvoke.BeginInvoke*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)
  id: EndInvoke(System.IAsyncResult)
  parent: System.ComponentModel.ISynchronizeInvoke
  langs:
  - csharp
  name: EndInvoke(IAsyncResult)
  nameWithType: ISynchronizeInvoke.EndInvoke(IAsyncResult)
  fullName: System.ComponentModel.ISynchronizeInvoke.EndInvoke(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Czeka dopóki proces uruchomiony przez wywołanie <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke*>zakończeniu, a następnie zwraca wartość wygenerowanych przez proces.</xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke*>"
  remarks: "Ta metoda pobiera wartość zwracaną przez operację asynchroniczną reprezentowany przez <xref:System.IAsyncResult>przekazany przez ten interfejs.</xref:System.IAsyncResult> Jeśli operacja asynchroniczna nie zostało ukończone, ta metoda będzie czekał wynik jest dostępna."
  syntax:
    content: public object EndInvoke (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Interfejs reprezentujący operację asynchroniczną uruchomiony przez wywołanie <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke*>.</xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke*> </xref:System.IAsyncResult>"
    return:
      type: System.Object
      description: "<xref:System.Object>Reprezentujący wartość zwracaną wygenerowanych przez operację asynchroniczną.</xref:System.Object>"
  overload: System.ComponentModel.ISynchronizeInvoke.EndInvoke*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])
  id: Invoke(System.Delegate,System.Object[])
  parent: System.ComponentModel.ISynchronizeInvoke
  langs:
  - csharp
  name: Invoke(Delegate,Object[])
  nameWithType: ISynchronizeInvoke.Invoke(Delegate,Object[])
  fullName: System.ComponentModel.ISynchronizeInvoke.Invoke(Delegate,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Synchronicznie wykonuje delegata w wątku, który utworzył ten obiekt i marshals wywołania do tworzenia wątku."
  remarks: "W odróżnieniu od <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>, ta metoda działa synchronicznie, czyli czeka dopóki proces zostanie zakończony przed zwróceniem.</xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> Wyjątki zgłoszone podczas wywołania są propagowane do obiektu wywołującego.       Użyj tej metody w wywołaniu metody z innego wątku do zorganizowania wywołania wątku właściwe."
  syntax:
    content: public object Invoke (Delegate method, object[] args);
    parameters:
    - id: method
      type: System.Delegate
      description: "A <xref:System.Delegate>zawiera metody do wywołania w kontekście wątku dla formantu.</xref:System.Delegate>"
    - id: args
      type: System.Object[]
      description: "Tablica typu <xref:System.Object>reprezentujący argumenty do przekazania do podanej metody.</xref:System.Object> Może to być <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> jeśli niezbędne są bez argumentów."
    return:
      type: System.Object
      description: "<xref:System.Object>Reprezentujący wartość zwracaną z delegat wywoływany, lub <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Jeśli delegat nie ma wartości zwracanych.</xref:System.Object>"
  overload: System.ComponentModel.ISynchronizeInvoke.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ISynchronizeInvoke.InvokeRequired
  id: InvokeRequired
  parent: System.ComponentModel.ISynchronizeInvoke
  langs:
  - csharp
  name: InvokeRequired
  nameWithType: ISynchronizeInvoke.InvokeRequired
  fullName: System.ComponentModel.ISynchronizeInvoke.InvokeRequired
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Pobiera wartość wskazującą, czy należy wywołać element wywołujący <xref:System.ComponentModel.ISynchronizeInvoke.Invoke*>podczas wywoływania obiektu, który implementuje ten interfejs.</xref:System.ComponentModel.ISynchronizeInvoke.Invoke*>"
  remarks: "Ta właściwość określa, czy należy wywołać element wywołujący <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A>podczas wykonywania wywołań metody do obiektu, który implementuje ten interfejs.</xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> Takie obiekty są powiązane z konkretnym wątkiem i nie są wątkowo. Jeśli są wywołanie metody z innego wątku, należy użyć <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A>metody do zorganizowania wywołania wątku prawidłowego.</xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A>"
  syntax:
    content: public bool InvokeRequired { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli element wywołujący musi wywołać <xref:System.ComponentModel.ISynchronizeInvoke.Invoke*>; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.ComponentModel.ISynchronizeInvoke.Invoke*>"
  overload: System.ComponentModel.ISynchronizeInvoke.InvokeRequired*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])
  parent: System.ComponentModel.ISynchronizeInvoke
  isExternal: false
  name: BeginInvoke(Delegate,Object[])
  nameWithType: ISynchronizeInvoke.BeginInvoke(Delegate,Object[])
  fullName: System.ComponentModel.ISynchronizeInvoke.BeginInvoke(Delegate,Object[])
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)
  parent: System.ComponentModel.ISynchronizeInvoke
  isExternal: false
  name: EndInvoke(IAsyncResult)
  nameWithType: ISynchronizeInvoke.EndInvoke(IAsyncResult)
  fullName: System.ComponentModel.ISynchronizeInvoke.EndInvoke(IAsyncResult)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])
  parent: System.ComponentModel.ISynchronizeInvoke
  isExternal: false
  name: Invoke(Delegate,Object[])
  nameWithType: ISynchronizeInvoke.Invoke(Delegate,Object[])
  fullName: System.ComponentModel.ISynchronizeInvoke.Invoke(Delegate,Object[])
- uid: System.ComponentModel.ISynchronizeInvoke.InvokeRequired
  parent: System.ComponentModel.ISynchronizeInvoke
  isExternal: false
  name: InvokeRequired
  nameWithType: ISynchronizeInvoke.InvokeRequired
  fullName: System.ComponentModel.ISynchronizeInvoke.InvokeRequired
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.ISynchronizeInvoke.BeginInvoke*
  parent: System.ComponentModel.ISynchronizeInvoke
  isExternal: false
  name: BeginInvoke
  nameWithType: ISynchronizeInvoke.BeginInvoke
- uid: System.ComponentModel.ISynchronizeInvoke.EndInvoke*
  parent: System.ComponentModel.ISynchronizeInvoke
  isExternal: false
  name: EndInvoke
  nameWithType: ISynchronizeInvoke.EndInvoke
- uid: System.ComponentModel.ISynchronizeInvoke.Invoke*
  parent: System.ComponentModel.ISynchronizeInvoke
  isExternal: false
  name: Invoke
  nameWithType: ISynchronizeInvoke.Invoke
- uid: System.ComponentModel.ISynchronizeInvoke.InvokeRequired*
  parent: System.ComponentModel.ISynchronizeInvoke
  isExternal: false
  name: InvokeRequired
  nameWithType: ISynchronizeInvoke.InvokeRequired
