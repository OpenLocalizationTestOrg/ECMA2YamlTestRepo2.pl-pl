### YamlMime:ManagedReference
items:
- uid: System.Management.Instrumentation.ManagementReferenceAttribute
  id: ManagementReferenceAttribute
  children:
  - System.Management.Instrumentation.ManagementReferenceAttribute.#ctor
  - System.Management.Instrumentation.ManagementReferenceAttribute.Type
  langs:
  - csharp
  name: ManagementReferenceAttribute
  nameWithType: ManagementReferenceAttribute
  fullName: System.Management.Instrumentation.ManagementReferenceAttribute
  type: Class
  summary: "ManagementReferenceAttribute oznacza parametr — członek, właściwości lub metody klasy jako odwołanie do innego obiektu zarządzania lub klasy.       Uwaga: do bibliotek WMI .NET są teraz wziąć pod uwagę stanu końcowego, a nie dalszy rozwój, ulepszenia lub aktualizacje będą dostępne dla problemy związane z zabezpieczeniami wpływu na te biblioteki. [API MI](https://msdn.microsoft.com/en-us/library/jj152383%28v=vs.80%29.aspx) powinna być używana do wszystkich nowych wdrożeń."
  remarks: "Ten atrybut służy do tworzenia skojarzenia klasy, jak pokazano w poniższym przykładzie."
  example:
  - "This example demonstrates how to use the ManagementReferenceAttribute attribute together with the <xref:System.Management.Instrumentation.ManagementQualifierAttribute> to create an association WMI class that links two other WMI classes. The example is a decoupled provider that exposes three WMI classes in the root/assoc namespace. The first two classes, NumberPhonetic and NumberLetter, are linked by the last class, LetterPhonetic.  \n  \n To compile the example, you will need to include references to both System.Management.Instrumentation and System.Configuration.Install. You must run installutil.exe against the resulting executable and ensure that the program is running in order to use the implemented WMI classes.  \n  \n```  \nusing System;  \nusing System.Collections;  \nusing System.Management.Instrumentation;  \n  \n[assembly: WmiConfiguration(\"root/assoc\", HostingModel = ManagementHostingModel.Decoupled)]  \n  \n[System.ComponentModel.RunInstaller(true)]  \npublic class TheInstaller : DefaultManagementInstaller  \n{ }  \n  \nnamespace AssocExample  \n{  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            InstrumentationManager.RegisterType(typeof(NumberPhonetic));  \n            InstrumentationManager.RegisterType(typeof(NumberLetter));  \n            InstrumentationManager.RegisterType(typeof(LetterPhonetic));  \n  \n            Console.WriteLine(\"Press enter to exit\");  \n            Console.ReadLine();  \n  \n            InstrumentationManager.UnregisterType(typeof(NumberPhonetic));  \n            InstrumentationManager.UnregisterType(typeof(NumberLetter));  \n            InstrumentationManager.UnregisterType(typeof(LetterPhonetic));  \n  \n        }  \n    }  \n  \n  [ManagementEntity]  \n    public class NumberPhonetic  \n    {  \n        [ManagementKey]  \n        public int Number;  \n  \n        [ManagementProbe]  \n        public string Name;  \n  \n        [ManagementBind]  \n        public NumberPhonetic(int Number)  \n        {  \n           this.Number = Number;  \n           if(Number == 1)  \n           {  \n              Name = \"alpha\";  \n           }  \n           else if(Number == 2)  \n           {  \n              Name = \"bravo\";  \n           }  \n           else  \n           {  \n              throw new InstanceNotFoundException();  \n           }  \n        }  \n  \n        [ManagementEnumerator]  \n        static public IEnumerable EnumerateInstances()  \n        {  \n            for (int i = 1; i < 3; i++)  \n            {  \n                yield return new NumberPhonetic(i);  \n            }  \n        }  \n  \n    }  \n  \n    [ManagementEntity]  \n    public class NumberLetter  \n    {  \n        [ManagementKey]  \n        public int Number;  \n  \n        [ManagementProbe]  \n        public string Letter;  \n  \n        [ManagementBind]  \n        public NumberLetter(int Number)  \n        {  \n           this.Number = Number;  \n           if(Number == 1)  \n           {  \n              Letter = \"A\";  \n           }  \n           else if(Number == 2)  \n           {  \n              Letter = \"B\";  \n           }  \n           else  \n           {  \n              throw new InstanceNotFoundException();  \n           }  \n        }  \n  \n        [ManagementEnumerator]  \n        static public IEnumerable EnumerateInstances()  \n        {  \n            for (int i = 1; i < 3; i++)  \n            {  \n                yield return new NumberLetter(i);  \n            }  \n        }  \n  \n    }  \n  \n    [ManagementEntity]  \n    [ManagementQualifier(\"Association\", Flavor = ManagementQualifierFlavors.DisableOverride)]  \n    public class LetterPhonetic  \n    {  \n        [ManagementReference(Type = \"NumberLetter\")]  \n        [ManagementKey]  \n        public string LetterNumber;  \n  \n        [ManagementReference(Type = \"NumberPhonetic\")]  \n        [ManagementKey]  \n        public string PhoneticNumber;  \n  \n        [ManagementEnumerator]  \n        static public IEnumerable EnumerateInstances()  \n        {  \n            ArrayList insts = new ArrayList();  \n            for (int i = 1; i < 3; i++)  \n            {  \n                LetterPhonetic inst = new LetterPhonetic();  \n                inst.LetterNumber = \"Letter = \" + i;  \n                inst.PhoneticNumber = \"Phonetic = \" + i;  \n                insts.Add(inst);  \n            }  \n            return insts;  \n        }  \n  \n    }  \n  \n}  \n```"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Parameter, AllowMultiple=false)]

      public sealed class ManagementReferenceAttribute : Attribute
  inheritance:
  - System.Attribute
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Management.Instrumentation.ManagementReferenceAttribute.#ctor
  id: '#ctor'
  parent: System.Management.Instrumentation.ManagementReferenceAttribute
  langs:
  - csharp
  name: ManagementReferenceAttribute()
  nameWithType: ManagementReferenceAttribute.ManagementReferenceAttribute()
  fullName: System.Management.Instrumentation.ManagementReferenceAttribute.ManagementReferenceAttribute()
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Management.Instrumentation
  summary: "Inicjuje nowe wystąpienie <xref:System.Management.ManagementReferenceAttribute>klasy.</xref:System.Management.ManagementReferenceAttribute> Jest to domyślny konstruktor."
  syntax:
    content: public ManagementReferenceAttribute ();
    parameters: []
  overload: System.Management.Instrumentation.ManagementReferenceAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Management.Instrumentation.ManagementReferenceAttribute.Type
  id: Type
  parent: System.Management.Instrumentation.ManagementReferenceAttribute
  langs:
  - csharp
  name: Type
  nameWithType: ManagementReferenceAttribute.Type
  fullName: System.Management.Instrumentation.ManagementReferenceAttribute.Type
  type: Property
  assemblies:
  - System.Core
  namespace: System.Management.Instrumentation
  summary: "Pobiera lub ustawia nazwę typu występującego w odwołaniu."
  remarks: "Domyślny typ jest obiekt."
  syntax:
    content: public string Type { get; set; }
    return:
      type: System.String
      description: "Ciąg zawierający nazwę typu występującego w odwołaniu."
  overload: System.Management.Instrumentation.ManagementReferenceAttribute.Type*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Attribute
  isExternal: false
  name: System.Attribute
- uid: System.Management.Instrumentation.ManagementReferenceAttribute.#ctor
  parent: System.Management.Instrumentation.ManagementReferenceAttribute
  isExternal: false
  name: ManagementReferenceAttribute()
  nameWithType: ManagementReferenceAttribute.ManagementReferenceAttribute()
  fullName: System.Management.Instrumentation.ManagementReferenceAttribute.ManagementReferenceAttribute()
- uid: System.Management.Instrumentation.ManagementReferenceAttribute.Type
  parent: System.Management.Instrumentation.ManagementReferenceAttribute
  isExternal: false
  name: Type
  nameWithType: ManagementReferenceAttribute.Type
  fullName: System.Management.Instrumentation.ManagementReferenceAttribute.Type
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Management.Instrumentation.ManagementReferenceAttribute.#ctor*
  parent: System.Management.Instrumentation.ManagementReferenceAttribute
  isExternal: false
  name: ManagementReferenceAttribute
  nameWithType: ManagementReferenceAttribute.ManagementReferenceAttribute
- uid: System.Management.Instrumentation.ManagementReferenceAttribute.Type*
  parent: System.Management.Instrumentation.ManagementReferenceAttribute
  isExternal: false
  name: Type
  nameWithType: ManagementReferenceAttribute.Type
