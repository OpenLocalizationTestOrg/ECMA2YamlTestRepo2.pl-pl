### YamlMime:ManagedReference
items:
- uid: System.DirectoryServices.DirectoryEntry
  id: DirectoryEntry
  children:
  - System.DirectoryServices.DirectoryEntry.#ctor
  - System.DirectoryServices.DirectoryEntry.#ctor(System.Object)
  - System.DirectoryServices.DirectoryEntry.#ctor(System.String)
  - System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String)
  - System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String,System.DirectoryServices.AuthenticationTypes)
  - System.DirectoryServices.DirectoryEntry.AuthenticationType
  - System.DirectoryServices.DirectoryEntry.Children
  - System.DirectoryServices.DirectoryEntry.Close
  - System.DirectoryServices.DirectoryEntry.CommitChanges
  - System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry)
  - System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry,System.String)
  - System.DirectoryServices.DirectoryEntry.DeleteTree
  - System.DirectoryServices.DirectoryEntry.Dispose(System.Boolean)
  - System.DirectoryServices.DirectoryEntry.Exists(System.String)
  - System.DirectoryServices.DirectoryEntry.Guid
  - System.DirectoryServices.DirectoryEntry.Invoke(System.String,System.Object[])
  - System.DirectoryServices.DirectoryEntry.InvokeGet(System.String)
  - System.DirectoryServices.DirectoryEntry.InvokeSet(System.String,System.Object[])
  - System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry)
  - System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry,System.String)
  - System.DirectoryServices.DirectoryEntry.Name
  - System.DirectoryServices.DirectoryEntry.NativeGuid
  - System.DirectoryServices.DirectoryEntry.NativeObject
  - System.DirectoryServices.DirectoryEntry.ObjectSecurity
  - System.DirectoryServices.DirectoryEntry.Options
  - System.DirectoryServices.DirectoryEntry.Parent
  - System.DirectoryServices.DirectoryEntry.Password
  - System.DirectoryServices.DirectoryEntry.Path
  - System.DirectoryServices.DirectoryEntry.Properties
  - System.DirectoryServices.DirectoryEntry.RefreshCache
  - System.DirectoryServices.DirectoryEntry.RefreshCache(System.String[])
  - System.DirectoryServices.DirectoryEntry.Rename(System.String)
  - System.DirectoryServices.DirectoryEntry.SchemaClassName
  - System.DirectoryServices.DirectoryEntry.SchemaEntry
  - System.DirectoryServices.DirectoryEntry.UsePropertyCache
  - System.DirectoryServices.DirectoryEntry.Username
  langs:
  - csharp
  name: DirectoryEntry
  nameWithType: DirectoryEntry
  fullName: System.DirectoryServices.DirectoryEntry
  type: Class
  summary: "Klasa DirectoryEntry hermetyzuje węzeł lub obiekt w hierarchii usługi Active Directory."
  remarks: "Klasa używana do powiązanie do obiektów, lub odczytywanie i aktualizowanie atrybutów. DirectoryEntry, wraz z klasy pomocy zapewnia obsługę cyklu życia zarządzania i nawigacja metody. Obejmują one tworzenie, usuwanie, zmiana nazwy, przeniesienie węzła podrzędnego i wyliczania elementów podrzędnych. Po zmodyfikowaniu węzła musi zatwierdzić zmiany w kolejności ich do zapisania do drzewa. Aby uzyskać więcej informacji, zobacz <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>Właściwości.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>       DirectoryEntry może służyć dostępu do wpisów regularnych i niektórych, ale nie wszystkich informacji z wpisów schematu.       Hierarchia usług domenowych w usłudze Active Directory zawiera do kilku tysięcy węzłów. Każdy węzeł reprezentuje obiekt, np. z drukarką sieciową lub użytkownika w domenie. Sieci firmowe stale zmienić nowi pracownicy są dzierżawione i obiekty, takie jak drukarek sieciowych i komputery są dodawane. Technologia Active Directory interfejsy ADSI (Service) udostępnia sposobów programowo dodawania tych obiektów do drzewa katalogów.       Aby utworzyć wpis katalogu w hierarchii, należy użyć <xref:System.DirectoryServices.DirectoryEntry.Children%2A>Właściwości.</xref:System.DirectoryServices.DirectoryEntry.Children%2A> <xref:System.DirectoryServices.DirectoryEntry.Children%2A>Właściwość jest kolekcja, która zapewnia <xref:System.DirectoryServices.DirectoryEntries.Add%2A>— Metoda, za pomocą którego Dodaj węzeł do kolekcji bezpośrednio poniżej węzła nadrzędnego, które obecnie są powiązane.</xref:System.DirectoryServices.DirectoryEntries.Add%2A> </xref:System.DirectoryServices.DirectoryEntry.Children%2A> Podczas dodawania węzła do kolekcji, należy określić nazwę dla nowego węzła i nazwy szablonu schematu, który ma być skojarzony z węzłem. Na przykład można użyć schematu zatytułowany &quot;Komputer&quot; Aby dodać nowe komputery w hierarchii.       Ta klasa zawiera także buforowania atrybutów, które mogą być przydatne w przypadku optymalizacji ruchu sieciowego. Aby użyć atrybutu buforowania, zobacz <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>Właściwości.</xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>       Z każdego z dostawców usługi Active Directory Domain Services można użyć klas, skojarzone ze składnikiem DirectoryEntry. Niektóre z bieżącego dostawcy są Internet Information Services (IIS), dostęp protokołu LDAP (Lightweight Directory), Novell katalogu usługi (usługi NDS systemu NetWare) i Windows NT.      > [!NOTE] > Zakłada się, że posiadanie ogólnej wiedzy z usług domenowych w usłudze Active Directory przed użyciem tej klasy. Aby uzyskać więcej informacji, zobacz <xref:System.DirectoryServices?displayProperty=fullName>Omówienie przestrzeni nazw.</xref:System.DirectoryServices?displayProperty=fullName>"
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.DirectoryServices.Design.DirectoryEntryConverter))]

      [System.DirectoryServices.DSDescription("DirectoryEntryDesc")]

      public class DirectoryEntry : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.#ctor
  id: '#ctor'
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: DirectoryEntry()
  nameWithType: DirectoryEntry.DirectoryEntry()
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry()
  type: Constructor
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> klasy."
  syntax:
    content: public DirectoryEntry ();
    parameters: []
  overload: System.DirectoryServices.DirectoryEntry.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: DirectoryEntry(Object)
  nameWithType: DirectoryEntry.DirectoryEntry(Object)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(Object)
  type: Constructor
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> klasy, która jest powiązana z natywnego określony obiekt usług domenowych w usłudze Active Directory."
  remarks: "Ten konstruktor umożliwia programowi na używanie metod i właściwości <xref:System.DirectoryServices.DirectoryEntry>klasy natywnego obiektu usług domenowych w usłudze Active Directory, który implementuje interfejs IAD za pośrednictwem natywnego interfejsu API.</xref:System.DirectoryServices.DirectoryEntry> Aby uzyskać więcej informacji na temat interfejsu IAD, zobacz temat [IAD](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp) w bibliotece MSDN pod [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library)."
  syntax:
    content: public DirectoryEntry (object adsObject);
    parameters:
    - id: adsObject
      type: System.Object
      description: "Nazwa natywnej do powiązania obiektu usług domenowych w usłudze Active Directory."
  overload: System.DirectoryServices.DirectoryEntry.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: DirectoryEntry(String)
  nameWithType: DirectoryEntry.DirectoryEntry(String)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(String)
  type: Constructor
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> klasy, która wiąże to wystąpienie węzła w usługach domenowych w usłudze Active Directory znajduje się w określonej ścieżce."
  remarks: ''
  example:
  - "The following example binds a <xref:System.DirectoryServices.DirectoryEntry> object to the directory entry at the specified path, and displays the <xref:System.DirectoryServices.DirectoryEntry.Path%2A> property of each child entry that is specified by the node's <xref:System.DirectoryServices.DirectoryEntry.Children%2A> property.  \n  \n```vb  \nPublic Class PrintChildren  \n  \n    'Entry point which delegates to C-style main Private Function.  \n    Public Overloads Shared Sub Main()  \n        Main(System.Environment.GetCommandLineArgs())  \n    End Sub  \n  \n    Overloads Public Shared Sub Main(args() As String)  \n        Dim objDE As DirectoryEntry  \n        Dim strPath As String = \"LDAP://DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \n        If args.Length > 0 Then  \n            strPath = args(1)  \n        End If   \n        ' Create a new DirectoryEntry with the given path.  \n        objDE = New DirectoryEntry(strPath)  \n  \n        Dim objChildDE As DirectoryEntry  \n        For Each objChildDE In  objDE.Children  \n            Console.WriteLine(objChildDE.Path)  \n        Next objChildDE  \n    End Sub 'Main  \nEnd Class 'PrintChildren  \n  \n```  \n  \n```c#  \npublic class PrintChildren{  \n   public static void Main(String[] args)  \n   {  \n      DirectoryEntry objDE;  \n      String strPath=\"LDAP://DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n      if(args.Length>0)strPath=args[1];  \n  \n      // Create a new DirectoryEntry with the given path.  \n      objDE=new DirectoryEntry(strPath);  \n  \n      foreach(DirectoryEntry objChildDE in objDE.Children)  \n        Console.WriteLine(objChildDE.Path);  \n   }  \n }  \n  \n```  \n  \n```cpp#  \nint main()  \n{  \n    String^ args[] = Environment::GetCommandLineArgs();  \n    DirectoryEntry^ objDE;  \n    String^ strPath = \"LDAP://DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n    if(args->Length>1)  \n    {  \n        strPath=args[1];  \n    }  \n  \n    // Create a new DirectoryEntry with the given path.  \n    objDE = gcnew DirectoryEntry(strPath);  \n  \n    System::Collections::IEnumerator^ enum0 = objDE->Children->GetEnumerator();  \n    while (enum0->MoveNext())  \n    {  \n        DirectoryEntry^ objChildDE = safe_cast<DirectoryEntry^>(enum0->Current);  \n        Console::WriteLine(objChildDE->Path);  \n    }  \n}  \n  \n```"
  syntax:
    content: public DirectoryEntry (string path);
    parameters:
    - id: path
      type: System.String
      description: "Ścieżka, jaką wiązania elementu DirectoryEntry katalogu. <xref:System.DirectoryServices.DirectoryEntry.Path*>Właściwość jest inicjowana na tę wartość.</xref:System.DirectoryServices.DirectoryEntry.Path*>"
  overload: System.DirectoryServices.DirectoryEntry.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: DirectoryEntry(String,String,String)
  nameWithType: DirectoryEntry.DirectoryEntry(String,String,String)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(String,String,String)
  type: Constructor
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> klasy."
  syntax:
    content: public DirectoryEntry (string path, string username, string password);
    parameters:
    - id: path
      type: System.String
      description: "Ścieżka tego <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>. <xref:System.DirectoryServices.DirectoryEntry.Path*>Właściwość jest inicjowana na tę wartość.</xref:System.DirectoryServices.DirectoryEntry.Path*>"
    - id: username
      type: System.String
      description: "Nazwa użytkownika używana podczas uwierzytelniania klienta. <xref:System.DirectoryServices.DirectoryEntry.Username*>Właściwość jest inicjowana na tę wartość.</xref:System.DirectoryServices.DirectoryEntry.Username*>"
    - id: password
      type: System.String
      description: "Hasło do użycia podczas uwierzytelniania klienta. <xref:System.DirectoryServices.DirectoryEntry.Password*>Właściwość jest inicjowana na tę wartość.</xref:System.DirectoryServices.DirectoryEntry.Password*>"
  overload: System.DirectoryServices.DirectoryEntry.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String,System.DirectoryServices.AuthenticationTypes)
  id: '#ctor(System.String,System.String,System.String,System.DirectoryServices.AuthenticationTypes)'
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: DirectoryEntry(String,String,String,AuthenticationTypes)
  nameWithType: DirectoryEntry.DirectoryEntry(String,String,String,AuthenticationTypes)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(String,String,String,AuthenticationTypes)
  type: Constructor
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> klasy."
  syntax:
    content: public DirectoryEntry (string path, string username, string password, System.DirectoryServices.AuthenticationTypes authenticationType);
    parameters:
    - id: path
      type: System.String
      description: "Ścieżka tego <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>. <xref:System.DirectoryServices.DirectoryEntry.Path*>Właściwość jest inicjowana na tę wartość.</xref:System.DirectoryServices.DirectoryEntry.Path*>"
    - id: username
      type: System.String
      description: "Nazwa użytkownika używana podczas uwierzytelniania klienta. <xref:System.DirectoryServices.DirectoryEntry.Username*>Właściwość jest inicjowana na tę wartość.</xref:System.DirectoryServices.DirectoryEntry.Username*>"
    - id: password
      type: System.String
      description: "Hasło do użycia podczas uwierzytelniania klienta. <xref:System.DirectoryServices.DirectoryEntry.Password*>Właściwość jest inicjowana na tę wartość.</xref:System.DirectoryServices.DirectoryEntry.Password*>"
    - id: authenticationType
      type: System.DirectoryServices.AuthenticationTypes
      description: "Jeden z <xref href=&quot;System.DirectoryServices.AuthenticationTypes&quot;> </xref> wartości. <xref:System.DirectoryServices.DirectoryEntry.AuthenticationType*>Właściwość jest inicjowana na tę wartość.</xref:System.DirectoryServices.DirectoryEntry.AuthenticationType*>"
  overload: System.DirectoryServices.DirectoryEntry.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.AuthenticationType
  id: AuthenticationType
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: AuthenticationType
  nameWithType: DirectoryEntry.AuthenticationType
  fullName: System.DirectoryServices.DirectoryEntry.AuthenticationType
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Pobiera lub ustawia typ uwierzytelniania do użycia."
  remarks: "Przed [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)], wartość domyślna to <xref:System.DirectoryServices.AuthenticationTypes>.</xref:System.DirectoryServices.AuthenticationTypes> Począwszy od [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)], wartość domyślna to <xref:System.DirectoryServices.AuthenticationTypes>.</xref:System.DirectoryServices.AuthenticationTypes>"
  syntax:
    content: public System.DirectoryServices.AuthenticationTypes AuthenticationType { get; set; }
    return:
      type: System.DirectoryServices.AuthenticationTypes
      description: "Jeden z <xref href=&quot;System.DirectoryServices.AuthenticationTypes&quot;> </xref> wartości."
  overload: System.DirectoryServices.DirectoryEntry.AuthenticationType*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Children
  id: Children
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Children
  nameWithType: DirectoryEntry.Children
  fullName: System.DirectoryServices.DirectoryEntry.Children
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Pobiera obiekt podrzędny wpisy ten węzeł w hierarchii usługi Active Directory."
  remarks: "Wpisy podrzędne są tylko bezpośrednie elementy podrzędne tego węzła.       Ta właściwość służy do znajdowania, pobrać lub utworzyć wpis katalogu w hierarchii. Ta właściwość jest zestawem oraz funkcje iteracji zwykle zapewnia <xref:System.DirectoryServices.DirectoryEntries.Add%2A>— Metoda, za pomocą którego Dodaj węzeł do kolekcji bezpośrednio poniżej węzła nadrzędnego, które obecnie są powiązane.</xref:System.DirectoryServices.DirectoryEntries.Add%2A> Podczas dodawania węzła do kolekcji, należy określić nazwę dla nowego węzła i nazwy szablonu schematu, który ma być skojarzony z węzłem. Na przykład można użyć schematu zatytułowany &quot;Komputer&quot; Aby dodać nowe komputery w hierarchii.      > [!NOTE] > Domyślnie zmian lokalnie w pamięci podręcznej. Po zmodyfikowaniu lub Dodaj węzeł, należy wywołać <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>metodę, aby zatwierdzić zmiany w kolejności ich zapisanie drzewa.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> Jeśli należy wywołać <xref:System.DirectoryServices.DirectoryEntry.RefreshCache>przed wywołaniem <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>, wszystkie Niewprowadzone zmiany pamięci podręcznej właściwości zostaną utracone.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> </xref:System.DirectoryServices.DirectoryEntry.RefreshCache> Aby uzyskać więcej informacji, zobacz <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>i <xref:System.DirectoryServices.DirectoryEntry.RefreshCache>metod i <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>Właściwości.</xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> </xref:System.DirectoryServices.DirectoryEntry.RefreshCache> </xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>"
  syntax:
    content: public System.DirectoryServices.DirectoryEntries Children { get; }
    return:
      type: System.DirectoryServices.DirectoryEntries
      description: "A <xref href=&quot;System.DirectoryServices.DirectoryEntries&quot;> </xref> obiekt zawierający wpisy podrzędne tego węzła w hierarchii usługi Active Directory."
  overload: System.DirectoryServices.DirectoryEntry.Children*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Close
  id: Close
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Close()
  nameWithType: DirectoryEntry.Close()
  fullName: System.DirectoryServices.DirectoryEntry.Close()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Zamyka <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> obiektu i zwalnia wszystkie zasoby systemu, które są skojarzone z danym składnikiem."
  remarks: "Wywołaj tę metodę w celu zwolnienia zasobów systemowych niezarządzane, bez oczekiwania na wyrzucanie elementów bezużytecznych.       Po wywołaniu Close, wszystkie operacje <xref:System.DirectoryServices.DirectoryEntry>może zgłaszać wyjątków.</xref:System.DirectoryServices.DirectoryEntry>"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.DirectoryServices.DirectoryEntry.Close*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.CommitChanges
  id: CommitChanges
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: CommitChanges()
  nameWithType: DirectoryEntry.CommitChanges()
  fullName: System.DirectoryServices.DirectoryEntry.CommitChanges()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Zapisuje zmiany wprowadzone do wpisu w katalogu w magazynie katalogu źródłowego."
  remarks: "Domyślnie właściwości zmiany lokalnie do pamięci podręcznej, a wartości właściwości do odczytu są buforowane, po pierwszym odczytu. Aby uzyskać więcej informacji zobacz <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>.</xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>       Zmiany wprowadzone w pamięci podręcznej zawierają zmiany właściwości, a także wywołania <xref:System.DirectoryServices.DirectoryEntries.Add%2A>(Jeśli to jest nowo utworzony wpis).</xref:System.DirectoryServices.DirectoryEntries.Add%2A>      > [!CAUTION] > Połączeń <xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>przed wywołaniem metody CommitChanges, wszystkie Niewprowadzone zmiany pamięci podręcznej właściwości zostaną utracone.</xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>      ## Zabezpieczenia — użyj <xref:System.DirectoryServices.DirectoryServicesPermission>klasy do odczytu, zapisu, usuwanie, zmiana i dodawanie w hierarchii usługi Active Directory.</xref:System.DirectoryServices.DirectoryServicesPermission> Wyliczenie skojarzone: <xref:System.DirectoryServices.DirectoryServicesPermissionAccess>.</xref:System.DirectoryServices.DirectoryServicesPermissionAccess>"
  syntax:
    content: public void CommitChanges ();
    parameters: []
  overload: System.DirectoryServices.DirectoryEntry.CommitChanges*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry)
  id: CopyTo(System.DirectoryServices.DirectoryEntry)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: CopyTo(DirectoryEntry)
  nameWithType: DirectoryEntry.CopyTo(DirectoryEntry)
  fullName: System.DirectoryServices.DirectoryEntry.CopyTo(DirectoryEntry)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Tworzy kopię tego wpisu jako element podrzędny określonego elementu nadrzędnego."
  remarks: "Jeśli <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>jest `true`, wywołaj <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>dla nowego obiektu kopii utrwalenie.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> </xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>       Dostawca dostępu protokołu LDAP (Lightweight Directory) nie obsługuje obecnie metoda CopyTo."
  syntax:
    content: public System.DirectoryServices.DirectoryEntry CopyTo (System.DirectoryServices.DirectoryEntry newParent);
    parameters:
    - id: newParent
      type: System.DirectoryServices.DirectoryEntry
      description: "Nazwa wyróżniająca <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> obiektu, który ma być nadrzędną dla kopii, która jest tworzona."
    return:
      type: System.DirectoryServices.DirectoryEntry
      description: "A <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> obiekt, który reprezentuje kopię tego wpisu jako element podrzędny z nowym rekordem nadrzędnym."
  overload: System.DirectoryServices.DirectoryEntry.CopyTo*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Określony <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> nie jest kontenerem."
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry,System.String)
  id: CopyTo(System.DirectoryServices.DirectoryEntry,System.String)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: CopyTo(DirectoryEntry,String)
  nameWithType: DirectoryEntry.CopyTo(DirectoryEntry,String)
  fullName: System.DirectoryServices.DirectoryEntry.CopyTo(DirectoryEntry,String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Tworzy kopię tego <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> obiektu jako element podrzędny określonego elementu nadrzędnego <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> obiektu o określonej nazwie nowe."
  remarks: "Dostawca dostępu protokołu LDAP (Lightweight Directory) nie obsługuje obecnie tej metody.       Jeśli <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>jest `true`, wywołaj <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>dla nowego obiektu kopii utrwalenie.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> </xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>"
  syntax:
    content: public System.DirectoryServices.DirectoryEntry CopyTo (System.DirectoryServices.DirectoryEntry newParent, string newName);
    parameters:
    - id: newParent
      type: System.DirectoryServices.DirectoryEntry
      description: "Nazwa Wyróżniająca z <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> obiektu, który ma być nadrzędną dla kopii, która jest tworzona."
    - id: newName
      type: System.String
      description: "Nazwa kopii tego wpisu."
    return:
      type: System.DirectoryServices.DirectoryEntry
      description: "Zmieniono nazwę kopię tego wpisu jako element podrzędny określonego elementu nadrzędnego."
  overload: System.DirectoryServices.DirectoryEntry.CopyTo*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Określony <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> obiektu nie jest kontenerem."
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.DeleteTree
  id: DeleteTree
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: DeleteTree()
  nameWithType: DirectoryEntry.DeleteTree()
  fullName: System.DirectoryServices.DirectoryEntry.DeleteTree()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Usuwa ten wpis i jego całą poddrzewo z hierarchii usług domenowych w usłudze Active Directory."
  remarks: "Dostawców dostarczanych przez system interfejsy usługi Active Directory (ADSI) tylko dostępu protokołu LDAP (Lightweight Directory) obsługuje obecnie tej operacji.      > [!CAUTION] > Wejścia i jego poddrzewa całego są usuwane z hierarchii usług domenowych w usłudze Active Directory.      ## Zabezpieczenia — użyj <xref:System.DirectoryServices.DirectoryServicesPermission>usuwania wpisów z hierarchii usług domenowych w usłudze Active Directory.</xref:System.DirectoryServices.DirectoryServicesPermission> Wyliczenie skojarzone: <xref:System.DirectoryServices.DirectoryServicesPermissionAccess?displayProperty=fullName>.</xref:System.DirectoryServices.DirectoryServicesPermissionAccess?displayProperty=fullName>"
  syntax:
    content: public void DeleteTree ();
    parameters: []
  overload: System.DirectoryServices.DirectoryEntry.DeleteTree*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Określony <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> nie jest kontenerem."
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DirectoryEntry.Dispose(Boolean)
  fullName: System.DirectoryServices.DirectoryEntry.Dispose(Boolean)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Usuwa zasoby (inne niż pamięci), które są używane przez <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>."
  remarks: "Ta metoda jest wywoływana przez metodę publiczną <xref:System.ComponentModel.Component.Dispose%2A>— Metoda i <xref:System.Object.Finalize%2A>metody.</xref:System.Object.Finalize%2A> </xref:System.ComponentModel.Component.Dispose%2A> <xref:System.ComponentModel.Component.Dispose%2A>wywołuje metodę Dispose chronionego z `disposing` ustawiona `true`.</xref:System.ComponentModel.Component.Dispose%2A> <xref:System.Object.Finalize%2A>wywołuje <xref:System.ComponentModel.Component.Dispose%2A>z `disposing` ustawioną `false`.</xref:System.ComponentModel.Component.Dispose%2A></xref:System.Object.Finalize%2A>       Gdy `disposing` parametr jest `true`, ta metoda zwalnia wszystkie zasoby, które są przechowywane przez wszelkie obiekty zarządzane przez to <xref:System.DirectoryServices.DirectoryEntry>obiektu odwołania.</xref:System.DirectoryServices.DirectoryEntry> Ta metoda wywołuje <xref:System.ComponentModel.Component.Dispose%2A>metody każdego odwołuje się do obiektu.</xref:System.ComponentModel.Component.Dispose%2A>       Aby uzyskać więcej informacji na temat <xref:System.ComponentModel.Component.Dispose%2A>i <xref:System.Object.Finalize%2A>metody, zobacz [przesłaniania metody Finalize](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</xref:System.Object.Finalize%2A> </xref:System.ComponentModel.Component.Dispose%2A>"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby zwolnić zasoby zarządzane i niezarządzane; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> aby zwolnić tylko zasoby niezarządzane."
  overload: System.DirectoryServices.DirectoryEntry.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Exists(System.String)
  id: Exists(System.String)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Exists(String)
  nameWithType: DirectoryEntry.Exists(String)
  fullName: System.DirectoryServices.DirectoryEntry.Exists(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Określa, czy określona ścieżka reprezentuje rzeczywisty wpis w usłudze katalogowej."
  remarks: ''
  example:
  - "The following example takes one argument and determines whether the path corresponds to a valid <xref:System.DirectoryServices.DirectoryEntry>.  \n  \n```vb  \nDim myADSPath As String = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \n' Determine whether the given path is correct for the DirectoryEntry.  \nIf DirectoryEntry.Exists(myADSPath) Then  \n   Console.WriteLine(\"The path {0} is valid\",myADSPath)  \nElse  \n   Console.WriteLine(\"The path {0} is invalid\",myADSPath)  \nEnd If  \n  \n```  \n  \n```c#  \nstring myADSPath =\"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Determine whether the given path is correct for the DirectoryEntry.  \nif (DirectoryEntry.Exists(myADSPath))  \n{  \n    Console.WriteLine(\"The path {0} is valid\",myADSPath);  \n}  \n    else  \n{  \n    Console.WriteLine(\"The path {0} is invalid\",myADSPath);  \n}  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n// Determine whether the given path is correct for the DirectoryEntry.  \nif (DirectoryEntry::Exists(myADSPath))   \n{  \n    Console::WriteLine(\"The path {0} is valid\", myADSPath);  \n}   \nelse   \n{  \n    Console::WriteLine(\"The path {0} is invalid\", myADSPath);  \n}  \n  \n```"
  syntax:
    content: public static bool Exists (string path);
    parameters:
    - id: path
      type: System.String
      description: "Ścieżka zapisu, aby sprawdzić."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli określona ścieżka reprezentuje prawidłowy wpis w usłudze katalogowej; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.DirectoryServices.DirectoryEntry.Exists*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Guid
  id: Guid
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Guid
  nameWithType: DirectoryEntry.Guid
  fullName: System.DirectoryServices.DirectoryEntry.Guid
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Pobiera identyfikator GUID <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>."
  remarks: "Podczas wiązania z obiektu w usługach domenowych w usłudze Active Directory, użyj <xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A>Właściwości.</xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A>"
  example:
  - "The following example demonstrates the Guid and <xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A> properties of the <xref:System.DirectoryServices.DirectoryEntry> class. This example gets the user-specified <xref:System.DirectoryServices.DirectoryEntry> and displays its Guid and <xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A> properties.  \n  \n```vb  \nDim myADSPath As [String] = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath)  \n  \n' Display the Guid and NativeGuid.  \nConsole.WriteLine(\"The GUID of the ADS object:\" + myDirectoryEntry.Guid.ToString)  \nConsole.WriteLine(\"The Native GUID of the ADS\" + \"object:\" + myDirectoryEntry.NativeGuid)  \n  \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry myDirectoryEntry=new DirectoryEntry(myADSPath);  \n  \n// Display the Guid and NativeGuid.  \nConsole.WriteLine(\"The GUID of the ADS object:\"+  \n                  myDirectoryEntry.Guid);  \nConsole.WriteLine(\"The Native GUID of the ADS\"+  \n                  \"object:\"+myDirectoryEntry.NativeGuid);  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath);  \n  \n// Display the Guid and NativeGuid.  \nConsole::WriteLine(\"The GUID of the ADS object: {0}\", myDirectoryEntry->Guid);  \nConsole::WriteLine(\"The Native GUID of the ADS object: {0}\",  \n                   myDirectoryEntry->NativeGuid);  \n  \n```"
  syntax:
    content: public Guid Guid { get; }
    return:
      type: System.Guid
      description: "A <xref:System.Guid>strukturę, która reprezentuje identyfikator GUID <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>.</xref:System.Guid>"
  overload: System.DirectoryServices.DirectoryEntry.Guid*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Invoke(System.String,System.Object[])
  id: Invoke(System.String,System.Object[])
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Invoke(String,Object[])
  nameWithType: DirectoryEntry.Invoke(String,Object[])
  fullName: System.DirectoryServices.DirectoryEntry.Invoke(String,Object[])
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Wywołuje metodę dla obiekt natywny usług domenowych w usłudze Active Directory."
  remarks: "Jeśli wartość zwracaną metody natywnej implementuje interfejs IAD, odpowiadający jej <xref:System.DirectoryServices.DirectoryEntry>jest zwracana.</xref:System.DirectoryServices.DirectoryEntry> Aby uzyskać więcej informacji na temat interfejsu IAD, zobacz temat [IAD](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp) w bibliotece MSDN pod [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp)."
  syntax:
    content: public object Invoke (string methodName, object[] args);
    parameters:
    - id: methodName
      type: System.String
      description: "Nazwa metody do wywołania."
    - id: args
      type: System.Object[]
      description: "Tablica typu <xref:System.Object>obiektów, które zawiera argumenty metody do wywołania.</xref:System.Object>"
    return:
      type: System.Object
      description: "Wartość zwracana wywoływanej metody."
  overload: System.DirectoryServices.DirectoryEntry.Invoke*
  exceptions:
  - type: System.DirectoryServices.DirectoryServicesCOMException
    commentId: T:System.DirectoryServices.DirectoryServicesCOMException
    description: "Wykonanie metody macierzystej zwrócił <xref:System.Runtime.InteropServices.COMException>wyjątek.</xref:System.Runtime.InteropServices.COMException>"
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: "Wykonanie metody macierzystej zwrócił <xref:System.Reflection.TargetInvocationException>wyjątek.</xref:System.Reflection.TargetInvocationException> <xref:System.Exception.InnerException*>Zawiera właściwość <xref:System.Runtime.InteropServices.COMException>wyjątek, który zawiera informacje o wystąpieniu tego błędu.</xref:System.Runtime.InteropServices.COMException> </xref:System.Exception.InnerException*>"
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.InvokeGet(System.String)
  id: InvokeGet(System.String)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: InvokeGet(String)
  nameWithType: DirectoryEntry.InvokeGet(String)
  fullName: System.DirectoryServices.DirectoryEntry.InvokeGet(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Pobiera właściwości z natywnego obiektu usług domenowych w usłudze Active Directory."
  remarks: "Nie można używać tej metody. <xref:System.DirectoryServices.DirectoryEntry.Properties%2A>Właściwości powinny być używane do dostępu właściwości <xref:System.DirectoryServices.DirectoryEntry>obiektu.</xref:System.DirectoryServices.DirectoryEntry> </xref:System.DirectoryServices.DirectoryEntry.Properties%2A>"
  syntax:
    content: public object InvokeGet (string propertyName);
    parameters:
    - id: propertyName
      type: System.String
      description: "Nazwa właściwości do pobrania."
    return:
      type: System.Object
      description: "Obiekt, który reprezentuje wymaganej właściwości."
  overload: System.DirectoryServices.DirectoryEntry.InvokeGet*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.InvokeSet(System.String,System.Object[])
  id: InvokeSet(System.String,System.Object[])
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: InvokeSet(String,Object[])
  nameWithType: DirectoryEntry.InvokeSet(String,Object[])
  fullName: System.DirectoryServices.DirectoryEntry.InvokeSet(String,Object[])
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Ustawia właściwość natywnego obiektu usług domenowych w usłudze Active Directory."
  remarks: "Nie można używać tej metody. <xref:System.DirectoryServices.DirectoryEntry.Properties%2A>Właściwości powinny być używane do dostępu właściwości <xref:System.DirectoryServices.DirectoryEntry>obiektu.</xref:System.DirectoryServices.DirectoryEntry> </xref:System.DirectoryServices.DirectoryEntry.Properties%2A>"
  syntax:
    content: public void InvokeSet (string propertyName, object[] args);
    parameters:
    - id: propertyName
      type: System.String
      description: "Nazwa właściwości do ustawienia."
    - id: args
      type: System.Object[]
      description: "Obiekt usług domenowych w usłudze Active Directory można ustawić."
  overload: System.DirectoryServices.DirectoryEntry.InvokeSet*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry)
  id: MoveTo(System.DirectoryServices.DirectoryEntry)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: MoveTo(DirectoryEntry)
  nameWithType: DirectoryEntry.MoveTo(DirectoryEntry)
  fullName: System.DirectoryServices.DirectoryEntry.MoveTo(DirectoryEntry)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Przenosi to <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> obiekt do określonego elementu nadrzędnego."
  remarks: "Jeśli <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>jest `true`, wywołaj <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>metody dla nowego obiektu utrwalenie przeniesienie.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> </xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>"
  syntax:
    content: public void MoveTo (System.DirectoryServices.DirectoryEntry newParent);
    parameters:
    - id: newParent
      type: System.DirectoryServices.DirectoryEntry
      description: "Element nadrzędny, do którego chcesz przenieść ten wpis."
  overload: System.DirectoryServices.DirectoryEntry.MoveTo*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Określony <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> nie jest kontenerem."
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry,System.String)
  id: MoveTo(System.DirectoryServices.DirectoryEntry,System.String)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: MoveTo(DirectoryEntry,String)
  nameWithType: DirectoryEntry.MoveTo(DirectoryEntry,String)
  fullName: System.DirectoryServices.DirectoryEntry.MoveTo(DirectoryEntry,String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Przenosi to <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> obiekt do określonego elementu nadrzędnego i zmienia jego nazwę na określoną wartość."
  remarks: "Jeśli <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>jest `true`, wywołaj <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>dla nowego obiektu utrwalenie przeniesienie.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> </xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>"
  syntax:
    content: public void MoveTo (System.DirectoryServices.DirectoryEntry newParent, string newName);
    parameters:
    - id: newParent
      type: System.DirectoryServices.DirectoryEntry
      description: "Element nadrzędny, do którego chcesz przenieść ten wpis."
    - id: newName
      type: System.String
      description: "Nowa nazwa tego wpisu."
  overload: System.DirectoryServices.DirectoryEntry.MoveTo*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Określony <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> nie jest kontenerem."
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Name
  id: Name
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Name
  nameWithType: DirectoryEntry.Name
  fullName: System.DirectoryServices.DirectoryEntry.Name
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Pobiera nazwę obiektu jako o nazwie podstawowej usługi katalogowej."
  remarks: "To nazwa, wraz z <xref:System.DirectoryServices.DirectoryEntry.SchemaClassName%2A>, odróżni ten wpis z jego elementów równorzędnych i musi być unikatowa wśród jego elementów równorzędnych w poszczególnych kontenerach.</xref:System.DirectoryServices.DirectoryEntry.SchemaClassName%2A>"
  example:
  - "The following example creates a <xref:System.DirectoryServices.DirectoryEntry> for the node in the Active Directory Domain Services. It then displays the Name and <xref:System.DirectoryServices.DirectoryEntry.Path%2A> properties of its child nodes.  \n  \n```vb  \nDim myADSPath As String = \"LDAP://onecity/CN=Users,DC=onecity,  \n           _DC=corp,DC=fabrikam,DC=com\"  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath)  \n  \nConsole.WriteLine(\"DirectoryEntry Name :\" + myDirectoryEntry.Name)  \nConsole.WriteLine(ControlChars.NewLine _  \n        + \"The child entries for this node in the Active Directory Domain Services hierarchy\")  \n  \nDim myDirectoryEntryChild As DirectoryEntry  \nFor Each myDirectoryEntryChild In  myDirectoryEntry.Children  \n   Console.WriteLine(myDirectoryEntryChild.Path)  \nNext myDirectoryEntryChild  \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=Users,  \n             DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry myDirectoryEntry=new DirectoryEntry(myADSPath);  \n  \nConsole.WriteLine(\"DirectoryEntry Name :\"+ myDirectoryEntry.Name);  \nConsole.WriteLine(\"\\nThe child entries for this node \"+  \n   \"in the Active Directory Domain Services hierarchy\");  \n  \nforeach(DirectoryEntry myDirectoryEntryChild in  \n   myDirectoryEntry.Children)  \n{  \n   Console.WriteLine(myDirectoryEntryChild.Path);  \n}  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath);  \n  \nConsole::WriteLine(\"DirectoryEntry Name : {0}\", myDirectoryEntry->Name);  \nConsole::WriteLine(\"\\nThe child entries for this node in the Active Directory Domain Services hierarchy\");  \n  \nCollections::IEnumerator^ myEnumerator = myDirectoryEntry->Children->GetEnumerator();  \nwhile (myEnumerator->MoveNext())   \n{  \n    DirectoryEntry^ myDirectoryEntryChild = safe_cast<DirectoryEntry^>(myEnumerator->Current);  \n    Console::WriteLine(myDirectoryEntryChild->Path);  \n}  \n```"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "Nazwa obiektu o nazwie podstawowej usługi katalogowej."
  overload: System.DirectoryServices.DirectoryEntry.Name*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.NativeGuid
  id: NativeGuid
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: NativeGuid
  nameWithType: DirectoryEntry.NativeGuid
  fullName: System.DirectoryServices.DirectoryEntry.NativeGuid
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Pobiera identyfikator GUID <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>, ponieważ zwrócony od dostawcy."
  remarks: "Użyj właściwości NativeGuid podczas wiązania obiektu w usługach domenowych w usłudze Active Directory.      > [!NOTE] > Dostawca dostępu protokołu LDAP (Lightweight Directory) zwraca globalnie unikatowy identyfikator <xref:System.DirectoryServices.DirectoryEntry>w innym formacie niż Internet Information Services (IIS), Novell Directory Server (usługi NDS systemu NetWare) i dostawcy WinNT.</xref:System.DirectoryServices.DirectoryEntry>"
  example:
  - "The following example demonstrates the <xref:System.DirectoryServices.DirectoryEntry.Guid%2A> and NativeGuid properties of the <xref:System.DirectoryServices.DirectoryEntry> class. This example gets the user-specified <xref:System.DirectoryServices.DirectoryEntry> and displays its <xref:System.DirectoryServices.DirectoryEntry.Guid%2A> and NativeGuid properties.  \n  \n```vb  \nDim myADSPath As [String] = \"LDAP://onecity/CN=Users,  \n             DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath)  \n  \n' Display the Guid and NativeGuid.  \nConsole.WriteLine(\"The GUID of the ADS object:\" + myDirectoryEntry.Guid.ToString)  \nConsole.WriteLine(\"The Native GUID of the ADS\" + \"object:\" +   \n             myDirectoryEntry.NativeGuid)  \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=Users,  \n             DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry myDirectoryEntry=new DirectoryEntry(myADSPath);  \n  \n// Display the Guid and NativeGuid.  \nConsole.WriteLine(\"The GUID of the ADS object:\"+  \n                  myDirectoryEntry.Guid);  \nConsole.WriteLine(\"The Native GUID of the ADS\"+  \n                  \"object:\"+myDirectoryEntry.NativeGuid);  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath);  \n  \n// Display the Guid and NativeGuid.  \nConsole::WriteLine(\"The GUID of the ADS object: {0}\", myDirectoryEntry->Guid));  \nConsole::WriteLine(\"The Native GUID of the ADS object: {0}\",  \n                   myDirectoryEntry->NativeGuid);  \n```"
  syntax:
    content: public string NativeGuid { get; }
    return:
      type: System.String
      description: "A <xref:System.Guid>strukturę, która reprezentuje identyfikator GUID <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>, ponieważ zwrócony od dostawcy.</xref:System.Guid>"
  overload: System.DirectoryServices.DirectoryEntry.NativeGuid*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.NativeObject
  id: NativeObject
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: NativeObject
  nameWithType: DirectoryEntry.NativeObject
  fullName: System.DirectoryServices.DirectoryEntry.NativeObject
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Pobiera obiekt natywny interfejsy usługi Active Directory (ADSI)."
  remarks: "Ta właściwość służy do rzutowania natywnego obiektu usług domenowych w usłudze Active Directory, który implementuje interfejs IAD, jeśli chcesz użyć interfejsu COM. Aby uzyskać więcej informacji na temat interfejsu IAD, zobacz temat [IAD](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp) w bibliotece MSDN pod [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp).       Ten obiekt jest przeznaczony dla zaawansowanych scenariuszy, które nie mogą być realizowane za pomocą <xref:System.DirectoryServices?displayProperty=fullName>klasy wyłącznie.</xref:System.DirectoryServices?displayProperty=fullName> Aby go użyć, musisz zaimportować jednego z interfejsów modelu COM z rodziny IAD, a następnie rzutowania tę właściwość, aby ten interfejs."
  syntax:
    content: public object NativeObject { get; }
    return:
      type: System.Object
      description: "Macierzysty obiekt ADSI."
  overload: System.DirectoryServices.DirectoryEntry.NativeObject*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.ObjectSecurity
  id: ObjectSecurity
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: ObjectSecurity
  nameWithType: DirectoryEntry.ObjectSecurity
  fullName: System.DirectoryServices.DirectoryEntry.ObjectSecurity
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Pobiera lub Ustawia deskryptor zabezpieczeń dla tego wpisu."
  syntax:
    content: public System.DirectoryServices.ActiveDirectorySecurity ObjectSecurity { get; set; }
    return:
      type: System.DirectoryServices.ActiveDirectorySecurity
      description: "<xref href=&quot;System.DirectoryServices.ActiveDirectorySecurity&quot;> </xref> Obiekt, który reprezentuje deskryptora zabezpieczeń dla tego wpisu katalogu."
  overload: System.DirectoryServices.DirectoryEntry.ObjectSecurity*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Options
  id: Options
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Options
  nameWithType: DirectoryEntry.Options
  fullName: System.DirectoryServices.DirectoryEntry.Options
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Pobiera opcje specyficznych dla dostawcy dla tego wpisu."
  syntax:
    content: public System.DirectoryServices.DirectoryEntryConfiguration Options { get; }
    return:
      type: System.DirectoryServices.DirectoryEntryConfiguration
      description: "A <xref href=&quot;System.DirectoryServices.DirectoryEntryConfiguration&quot;> </xref> obiekt, który zawiera opcje specyficznych dla dostawcy dla tego wpisu."
  overload: System.DirectoryServices.DirectoryEntry.Options*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Parent
  id: Parent
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Parent
  nameWithType: DirectoryEntry.Parent
  fullName: System.DirectoryServices.DirectoryEntry.Parent
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Pobiera ten wpis nadrzędnej w hierarchii usługi Active Directory."
  remarks: ''
  example:
  - "The following example searches a given <xref:System.DirectoryServices.DirectoryEntry> and displays the <xref:System.DirectoryServices.DirectoryEntry.Name%2A> and Parent of the result.  \n  \n```vb  \nDim myADSPath As String = _   \n          \"LDAP://onecity/CN=user,CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword)  \n  \nConsole.WriteLine(\"Parent is :\" + myDirectoryEntry.Parent.Path)  \n  \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=user,CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry myDirectoryEntry=new DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  \n  \nConsole.WriteLine(\"Parent is :\"+myDirectoryEntry.Parent.Path);  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=user,CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  \n  \nConsole::WriteLine(\"Parent is :{0}\", myDirectoryEntry->Parent->Path);  \n  \n```"
  syntax:
    content: public System.DirectoryServices.DirectoryEntry Parent { get; }
    return:
      type: System.DirectoryServices.DirectoryEntry
      description: "A <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> obiekt, który reprezentuje element nadrzędny tego wpisu."
  overload: System.DirectoryServices.DirectoryEntry.Parent*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Password
  id: Password
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Password
  nameWithType: DirectoryEntry.Password
  fullName: System.DirectoryServices.DirectoryEntry.Password
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Ustawia hasło do użycia podczas uwierzytelniania klienta."
  remarks: "Można ustawić <xref:System.DirectoryServices.DirectoryEntry.Username%2A>i właściwości hasła, aby określić alternatywne poświadczenia umożliwiające dostęp do informacji w usługach domenowych w usłudze Active Directory.</xref:System.DirectoryServices.DirectoryEntry.Username%2A> Inne <xref:System.DirectoryServices.DirectoryEntry>obiekt pobrany z tego wystąpienia (na przykład za pomocą <xref:System.DirectoryServices.DirectoryEntry.Children%2A>) są automatycznie tworzone przy użyciu tego samego poświadczeń alternatywnych.</xref:System.DirectoryServices.DirectoryEntry.Children%2A> </xref:System.DirectoryServices.DirectoryEntry>"
  example:
  - "The following example demonstrates the <xref:System.DirectoryServices.DirectoryEntry.Username%2A> and Password properties of the <xref:System.DirectoryServices.DirectoryEntry> class. This example gets the user-specified <xref:System.DirectoryServices.DirectoryEntry> and the <xref:System.DirectoryServices.DirectoryEntry.Path%2A> of all its <xref:System.DirectoryServices.DirectoryEntry.Children%2A>.  \n  \n```vb  \nDim myADSPath As String = _  \n      \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \n  \n' Create an Instance of DirectoryEntry.  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath)  \nmyDirectoryEntry.Username = UserName  \nmyDirectoryEntry.Password = SecurelyStoredPassword  \n  \n' Get the Child ADS objects.  \nConsole.WriteLine(\"The Child ADS objects are:\")  \nDim myChildDirectoryEntry As DirectoryEntry  \nFor Each myChildDirectoryEntry In  myDirectoryEntry.Children  \n   Console.WriteLine(myChildDirectoryEntry.Path)  \nNext myChildDirectoryEntry   \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=Users,  \n         DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Create an Instance of DirectoryEntry.  \nDirectoryEntry myDirectoryEntry = new DirectoryEntry(myADSPath);  \nmyDirectoryEntry.Username = UserName;  \nmyDirectoryEntry.Password = SecurelyStoredPassword;  \n  \n// Get the Child ADS objects.  \nConsole.WriteLine(\"The Child ADS objects are:\");  \nforeach(DirectoryEntry myChildDirectoryEntry in myDirectoryEntry.Children)  \n   Console.WriteLine(myChildDirectoryEntry.Path);  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Create an Instance of DirectoryEntry.  \nDirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath);  \nmyDirectoryEntry->Username = UserName;  \nmyDirectoryEntry->Password = SecurelyStoredPassword;  \n  \n// Get the Child ADS objects.  \nConsole::WriteLine(\"The Child ADS objects are:\");  \nCollections::IEnumerator^ myEnum = myDirectoryEntry->Children->GetEnumerator();  \nwhile (myEnum->MoveNext())   \n{  \n    DirectoryEntry^ myChildDirectoryEntry = safe_cast<DirectoryEntry^>  \n             (myEnum->Current);  \n    Console::WriteLine(myChildDirectoryEntry->Path);  \n}  \n  \n```"
  syntax:
    content: public string Password { set; }
    return:
      type: System.String
      description: "Hasło do użycia podczas uwierzytelniania klienta."
  overload: System.DirectoryServices.DirectoryEntry.Password*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Path
  id: Path
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Path
  nameWithType: DirectoryEntry.Path
  fullName: System.DirectoryServices.DirectoryEntry.Path
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Pobiera lub ustawia ścieżkę dla tego <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>."
  remarks: "The Path property uniquely identifies this entry in a networked environment. This entry can always be retrieved using this Path.  \n  \n Setting the Path retrieves a new entry from the directory store; it does not change the path of the currently bound entry.  \n  \n The classes associated with the <xref:System.DirectoryServices.DirectoryEntry> component can be used with any of the Active Directory Domain Services service providers. Some of the current providers are Internet Information Services (IIS), Lightweight Directory Access Protocol (LDAP), Novell NetWare Directory Service (NDS), and WinNT.  \n  \n> [!NOTE]\n>  The section of the Path that identifies the provider (precedes \"://\") is case-sensitive. For example, \"LDAP://\" or \"WinNT://\".  \n  \n The syntax for the Path property varies according to the provider. Some common scenarios are:  \n  \n WinNT  \n  \n-   Connect to a group on a computer. For example, \"WinNT**://\\<domain name>/\\<computer name>/\\<group name>**\". If you are connecting to a local computer, \"WinNT://**\\<computer name>/\\<group name>**\".  \n  \n-   Connect to a user on a computer. For example, \"WinNT://**\\<domain name>/\\<computer name>/\\<user name>**\". If you are connecting to a local computer, \"WinNT://**\\<computer name>/\\<user name>**\".  \n  \n-   Connect to services on a computer. For example, \"WinNT://**\\<domain name>/\\<computer name>/\\<service name>**\". If you are connecting to a local computer, \"WinNT://**\\<computer name>/\\<service name>**\".  \n  \n-   Discover all domains on the network. For example, \"WinNT:\" The domains can be found by enumerating the children of this entry.  \n  \n LDAP  \n  \n-   Connect to a group in a domain. For example, \"LDAP://CN=\\<group name>, CN =\\<Users>, DC=\\<domain component>, DC=\\<domain component>,...\".  \n  \n-   Connect to a user in a domain. For example, \"LDAP://CN=\\<full user name>, CN=\\<Users>, DC=\\<domain component>, DC=\\<domain component>,...\".  \n  \n-   Connect to computers in a domain. For example, \"LDAP://CN=\\<computer name>, CN=\\<Computers>, DC=\\<domain component>, DC=\\<domain component>,...\".  \n  \n IIS  \n  \n-   Connect to a Web directory. For example, \"IIS://LocalHost/W3SVC/1/ROOT/\\<Web directory name>\".  \n  \n To bind to the current domain using LDAP, use the path \"LDAP://RootDSE\", then get the default naming context and rebind the entry. For example:  \n  \n```c#  \nString str = ent.Properties[\"defaultNamingContext\"][0];  \nDirectoryEntry domain = new DirectoryEntry(\"LDAP://\" + str);  \n```  \n  \n For more information, see the documentation for your provider and the topic [Using Active Directory Service Interfaces](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/using_adsi.asp) in the MSDN Library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)."
  syntax:
    content: public string Path { get; set; }
    return:
      type: System.String
      description: "Ścieżka tego <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> obiektu. Wartość domyślna to ciąg pusty (&quot;&quot;)."
  overload: System.DirectoryServices.DirectoryEntry.Path*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Properties
  id: Properties
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Properties
  nameWithType: DirectoryEntry.Properties
  fullName: System.DirectoryServices.DirectoryEntry.Properties
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Pobiera właściwości usług domenowych w usłudze Active Directory dla tej <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> obiektu."
  remarks: "Jeśli nie zainicjowano właściwości, właściwości wywołuje metodę interfejsu ADSI [IADs::Get](http://msdn2.microsoft.com/library/aa746347.aspx) metody do pobierania wartości z pamięci podręcznej. Jeśli podstawowy pamięci podręcznej nie został załadowany, [IADs::Get](http://msdn2.microsoft.com/library/aa746347.aspx) niejawnie wywołuje [IADs::GetInfo](http://msdn2.microsoft.com/library/aa746349.aspx). Ta metoda ładuje wartości obsługiwanych właściwości, które nie zostały ustawione w pamięci podręcznej z odpowiedni magazyn katalogu. Kolejne wywołania właściwości pobiera wartości właściwości w pamięci podręcznej tylko. Aby kontrolować ładowania pamięci podręcznej właściwości, należy wywołać <xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>.</xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>       **Uwaga** właściwość właściwości nie jest obsługiwana do użytku z rozszerzenia klienta usługi Active Directory (DSClient) dla [!INCLUDE[WinNt4Family](~/add/includes/ajax-current-ext-md.md)]."
  syntax:
    content: public System.DirectoryServices.PropertyCollection Properties { get; }
    return:
      type: System.DirectoryServices.PropertyCollection
      description: "A <xref href=&quot;System.DirectoryServices.PropertyCollection&quot;> </xref> obiekt, który zawiera właściwości, które są ustawione dla tego wpisu."
  overload: System.DirectoryServices.DirectoryEntry.Properties*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.RefreshCache
  id: RefreshCache
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: RefreshCache()
  nameWithType: DirectoryEntry.RefreshCache()
  fullName: System.DirectoryServices.DirectoryEntry.RefreshCache()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Ładuje wartości właściwości dla tego <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> obiektu w pamięci podręcznej właściwości."
  remarks: >-
    > [!CAUTION]

    >  Any uncommitted changes to the property cache will be lost. Use the <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> method to persist changes to the directory store.
  syntax:
    content: public void RefreshCache ();
    parameters: []
  overload: System.DirectoryServices.DirectoryEntry.RefreshCache*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.RefreshCache(System.String[])
  id: RefreshCache(System.String[])
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: RefreshCache(String[])
  nameWithType: DirectoryEntry.RefreshCache(String[])
  fullName: System.DirectoryServices.DirectoryEntry.RefreshCache(String[])
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Ładuje wartości właściwości określonego do pamięci podręcznej właściwości."
  remarks: >-
    > [!CAUTION]

    >  Any uncommitted changes to the property cache will be lost. Use <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> to persist changes to the directory store.
  syntax:
    content: public void RefreshCache (string[] propertyNames);
    parameters:
    - id: propertyNames
      type: System.String[]
      description: "Tablica określonych właściwości."
  overload: System.DirectoryServices.DirectoryEntry.RefreshCache*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Rename(System.String)
  id: Rename(System.String)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Rename(String)
  nameWithType: DirectoryEntry.Rename(String)
  fullName: System.DirectoryServices.DirectoryEntry.Rename(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Zmienia nazwę to <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> obiektu."
  remarks: "> [!NOTE]> To ma wpływ na ścieżkę, która jest używana do odwoływania się do tego wpisu.       Jeśli <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>jest `true`, należy wywołać <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>metody dla nowego obiektu utrwalenie przeniesienie.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> </xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>"
  syntax:
    content: public void Rename (string newName);
    parameters:
    - id: newName
      type: System.String
      description: "Nowa nazwa wejścia."
  overload: System.DirectoryServices.DirectoryEntry.Rename*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.SchemaClassName
  id: SchemaClassName
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: SchemaClassName
  nameWithType: DirectoryEntry.SchemaClassName
  fullName: System.DirectoryServices.DirectoryEntry.SchemaClassName
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Pobiera nazwę klasy schematu dla tego <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> obiektu."
  remarks: "To jest taka sama jak <xref:System.DirectoryServices.DirectoryEntry.Name%2A>Właściwość <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A>Właściwości.</xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> </xref:System.DirectoryServices.DirectoryEntry.Name%2A>       A <xref:System.DirectoryServices.DirectoryEntry>definiuje schematu obiektu jego właściwości i metody.</xref:System.DirectoryServices.DirectoryEntry>"
  example:
  - "The following example demonstrates the SchemaClassName and <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> properties of the <xref:System.DirectoryServices.DirectoryEntry> class. This example gets the user-specified <xref:System.DirectoryServices.DirectoryEntry> and gets all of its children if the <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> is a container object.  The <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> is a container object if the <xref:System.DirectoryServices.DirectoryEntry.Name%2A> of that object is \"container\".  \n  \n```vb  \nDim myADSPath As String = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \n  \n' Creates an Instance of DirectoryEntry.  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword)  \n  \n' Display the 'SchemaClassName'.  \nConsole.WriteLine(\"Schema class name:\" + myDirectoryEntry.SchemaClassName)  \n  \n' Gets the SchemaEntry of the ADS object.  \nDim mySchemaEntry As DirectoryEntry = myDirectoryEntry.SchemaEntry  \n  \nIf String.Compare(mySchemaEntry.Name, \"container\") = 0 Then  \n   Dim myChildDirectoryEntry As DirectoryEntry  \n   For Each myChildDirectoryEntry In  myDirectoryEntry.Children  \n      Console.WriteLine(myChildDirectoryEntry.Path)  \n   Next  \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Creates an Instance of DirectoryEntry.  \nDirectoryEntry  myDirectoryEntry=new DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  \n  \n// Display the 'SchemaClassName'.  \nConsole.WriteLine(\"Schema class name:\" + myDirectoryEntry.SchemaClassName);  \n  \n// Gets the SchemaEntry of the ADS object.  \nDirectoryEntry mySchemaEntry = myDirectoryEntry.SchemaEntry;  \n  \nif (string.Compare(mySchemaEntry.Name, \"container\") == 0)  \n{  \n   foreach(DirectoryEntry myChildDirectoryEntry in myDirectoryEntry.Children)  \n      Console.WriteLine(myChildDirectoryEntry.Path);  \n}  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Creates an Instance of DirectoryEntry.  \nDirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  \n  \n// Display the 'SchemaClassName'.  \nConsole::WriteLine(\"Schema class name:{0}\", myDirectoryEntry->SchemaClassName);  \n  \n// Gets the SchemaEntry of the ADS Object.  \nDirectoryEntry^ mySchemaEntry = myDirectoryEntry->SchemaEntry;  \n  \nif (!String::Compare(mySchemaEntry->Name, \"container\"))   \n{  \n    Collections::IEnumerator^ myEnum = myDirectoryEntry->Children->GetEnumerator();  \n    while (myEnum->MoveNext())   \n    {  \n        DirectoryEntry^ myChildDirectoryEntry = safe_cast<DirectoryEntry^>(myEnum->Current);  \n        Console::WriteLine(myChildDirectoryEntry->Path);  \n    }  \n}  \n  \n```"
  syntax:
    content: public string SchemaClassName { get; }
    return:
      type: System.String
      description: "Nazwa klasy schematu dla tego <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> obiektu."
  overload: System.DirectoryServices.DirectoryEntry.SchemaClassName*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.SchemaEntry
  id: SchemaEntry
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: SchemaEntry
  nameWithType: DirectoryEntry.SchemaEntry
  fullName: System.DirectoryServices.DirectoryEntry.SchemaEntry
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Pobiera obiekt schematu dla tego wpisu."
  remarks: "Schemat wpisu Określa listę nazw właściwości obowiązkowe i opcjonalne.       Ta właściwość służy do dowiedzieć się, jakie właściwości i metody są dostępne na skojarzonego obiektu."
  example:
  - "The following example demonstrates the <xref:System.DirectoryServices.DirectoryEntry.SchemaClassName%2A> and SchemaEntry properties of the <xref:System.DirectoryServices.DirectoryEntry> class. This example gets the user-specified <xref:System.DirectoryServices.DirectoryEntry> object and gets all of its children if the SchemaEntry object is a container object.  The SchemaEntry is a container object if the <xref:System.DirectoryServices.DirectoryEntry.Name%2A> of that object is \"container\".  \n  \n```vb  \nDim myADSPath As String = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \n  \n' Creates an Instance of DirectoryEntry.  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword)  \n  \n' Display the 'SchemaClassName'.  \nConsole.WriteLine(\"Schema class name:\" + myDirectoryEntry.SchemaClassName)  \n  \n' Gets the SchemaEntry of the ADS object.  \nDim mySchemaEntry As DirectoryEntry = myDirectoryEntry.SchemaEntry  \n  \nIf String.Compare(mySchemaEntry.Name, \"container\") = 0 Then  \n   Dim myChildDirectoryEntry As DirectoryEntry  \n   For Each myChildDirectoryEntry In  myDirectoryEntry.Children  \n      Console.WriteLine(myChildDirectoryEntry.Path)  \n   Next  \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Creates an Instance of DirectoryEntry.  \nDirectoryEntry  myDirectoryEntry=new DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  \n  \n// Display the 'SchemaClassName'.  \nConsole.WriteLine(\"Schema class name:\"+myDirectoryEntry.SchemaClassName);  \n  \n// Gets the SchemaEntry of the ADS object.  \nDirectoryEntry mySchemaEntry = myDirectoryEntry.SchemaEntry;  \n  \nif (string.Compare(mySchemaEntry.Name,\"container\") == 0)  \n{  \n   foreach(DirectoryEntry myChildDirectoryEntry in myDirectoryEntry.Children)  \n      Console.WriteLine(myChildDirectoryEntry.Path);  \n}  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Creates an Instance of DirectoryEntry.  \nDirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  \n  \n// Display the 'SchemaClassName'.  \nConsole::WriteLine(\"Schema class name:{0}\", myDirectoryEntry->SchemaClassName);  \n  \n// Gets the SchemaEntry of the ADS Object*.  \nDirectoryEntry^ mySchemaEntry = myDirectoryEntry->SchemaEntry;  \n  \nif (!String::Compare(mySchemaEntry->Name, S\"container\"))   \n{  \n    Collections::IEnumerator^ myEnum = myDirectoryEntry->Children->GetEnumerator();  \n    while (myEnum->MoveNext())   \n    {  \n        DirectoryEntry^ myChildDirectoryEntry = safe_cast<DirectoryEntry^>(myEnum->Current);  \n        Console::WriteLine(myChildDirectoryEntry->Path);  \n    }  \n}  \n  \n```"
  syntax:
    content: public System.DirectoryServices.DirectoryEntry SchemaEntry { get; }
    return:
      type: System.DirectoryServices.DirectoryEntry
      description: "A <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> obiekt, który reprezentuje klasę schematu dla tego wpisu."
  overload: System.DirectoryServices.DirectoryEntry.SchemaEntry*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.UsePropertyCache
  id: UsePropertyCache
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: UsePropertyCache
  nameWithType: DirectoryEntry.UsePropertyCache
  fullName: System.DirectoryServices.DirectoryEntry.UsePropertyCache
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Pobiera lub ustawia wartość wskazującą, czy po zakończeniu każdej operacji powinno być zadeklarowanej pamięci podręcznej."
  remarks: "Domyślnie właściwości zmiany lokalnie do pamięci podręcznej, a wartości właściwości do odczytu są buforowane, po pierwszym odczytu. Gdy właściwość UsePropertyCache jest `true`, dostęp do <xref:System.DirectoryServices.DirectoryEntry>Właściwości obiektu jest szybsze.</xref:System.DirectoryServices.DirectoryEntry> To ustawienie `false` spowoduje, że pamięć podręczna można przesłać po zakończeniu każdej operacji.       Jeśli właściwość UsePropertyCache jest `true` i chcesz zatwierdzić buforowane zmiany, wywołaj <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>metody.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> Aby zaktualizować wartości w pamięci podręcznej, po dokonaniu zmian w katalogu, należy wywołać <xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>metody.</xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>      > [!CAUTION] > Połączeń <xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>przed wywołaniem <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>, wszystkie Niewprowadzone zmiany pamięci podręcznej właściwości zostaną utracone.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> </xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>      > [!NOTE] > Internet Information Services (IIS), dostawca nie obsługuje zatwierdzania pamięci podręcznej po zakończeniu każdej operacji."
  syntax:
    content: public bool UsePropertyCache { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli pamięć podręczna nie należy zatwierdzić po zakończeniu każdej operacji; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Wartość domyślna to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.DirectoryServices.DirectoryEntry.UsePropertyCache*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Username
  id: Username
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Username
  nameWithType: DirectoryEntry.Username
  fullName: System.DirectoryServices.DirectoryEntry.Username
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Pobiera lub ustawia nazwę użytkownika używane podczas uwierzytelniania klienta."
  remarks: "Można ustawić nazwę użytkownika i <xref:System.DirectoryServices.DirectoryEntry.Password%2A>Aby określić alternatywne poświadczenia umożliwiające dostęp do informacji w usługach domenowych w usłudze Active Directory.</xref:System.DirectoryServices.DirectoryEntry.Password%2A> Inne <xref:System.DirectoryServices.DirectoryEntry>obiekt pobrany z tego wystąpienia (na przykład za pomocą <xref:System.DirectoryServices.DirectoryEntry.Children%2A>) są automatycznie tworzone przy użyciu tego samego poświadczeń alternatywnych.</xref:System.DirectoryServices.DirectoryEntry.Children%2A> </xref:System.DirectoryServices.DirectoryEntry>"
  example:
  - "The following example demonstrates the Username and <xref:System.DirectoryServices.DirectoryEntry.Password%2A> properties of the <xref:System.DirectoryServices.DirectoryEntry> class. This example gets the user-specified <xref:System.DirectoryServices.DirectoryEntry> and the <xref:System.DirectoryServices.DirectoryEntry.Path%2A> of all its <xref:System.DirectoryServices.DirectoryEntry.Children%2A>.  \n  \n```vb  \nDim myADSPath As String = _  \n      \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \n  \n' Create an Instance of DirectoryEntry.  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath)  \nmyDirectoryEntry.Username = UserName  \nmyDirectoryEntry.Password = SecurelyStoredPassword  \n  \n' Get the Child ADS objects.  \nConsole.WriteLine(\"The Child ADS objects are:\")  \nDim myChildDirectoryEntry As DirectoryEntry  \nFor Each myChildDirectoryEntry In  myDirectoryEntry.Children  \n   Console.WriteLine(myChildDirectoryEntry.Path)  \nNext myChildDirectoryEntry  \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Create an Instance of DirectoryEntry.  \nDirectoryEntry myDirectoryEntry = new DirectoryEntry(myADSPath);  \nmyDirectoryEntry.Username = UserName;  \nmyDirectoryEntry.Password = SecurelyStoredPassword;  \n  \n// Get the Child ADS objects.  \nConsole.WriteLine(\"The Child ADS objects are:\");  \nforeach(DirectoryEntry myChildDirectoryEntry in myDirectoryEntry.Children)  \n   Console.WriteLine(myChildDirectoryEntry.Path);  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Create an Instance of DirectoryEntry.  \nDirectoryEntry^ myDirectoryEntry = new DirectoryEntry(myADSPath);  \nmyDirectoryEntry->Username = UserName;  \nmyDirectoryEntry->Password = SecurelyStoredPassword;  \n  \n// Get the Child ADS objects.  \nConsole::WriteLine(\"The Child ADS objects are:\");  \nCollections::IEnumerator^ myEnum = myDirectoryEntry->Children->GetEnumerator();  \nwhile (myEnum->MoveNext())   \n{  \n    DirectoryEntry^ myChildDirectoryEntry = safe_cast<DirectoryEntry^>(myEnum->Current);  \n    Console::WriteLine(myChildDirectoryEntry->Path);  \n}  \n  \n```"
  syntax:
    content: public string Username { get; set; }
    return:
      type: System.String
      description: "Nazwa użytkownika używana podczas uwierzytelniania klienta."
  overload: System.DirectoryServices.DirectoryEntry.Username*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.DirectoryServices.DirectoryServicesCOMException
  parent: System.DirectoryServices
  isExternal: false
  name: DirectoryServicesCOMException
  nameWithType: DirectoryServicesCOMException
  fullName: System.DirectoryServices.DirectoryServicesCOMException
- uid: System.Reflection.TargetInvocationException
  isExternal: true
  name: System.Reflection.TargetInvocationException
- uid: System.DirectoryServices.DirectoryEntry.#ctor
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DirectoryEntry()
  nameWithType: DirectoryEntry.DirectoryEntry()
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry()
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.Object)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DirectoryEntry(Object)
  nameWithType: DirectoryEntry.DirectoryEntry(Object)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.String)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DirectoryEntry(String)
  nameWithType: DirectoryEntry.DirectoryEntry(String)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DirectoryEntry(String,String,String)
  nameWithType: DirectoryEntry.DirectoryEntry(String,String,String)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(String,String,String)
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String,System.DirectoryServices.AuthenticationTypes)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DirectoryEntry(String,String,String,AuthenticationTypes)
  nameWithType: DirectoryEntry.DirectoryEntry(String,String,String,AuthenticationTypes)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(String,String,String,AuthenticationTypes)
- uid: System.DirectoryServices.AuthenticationTypes
  parent: System.DirectoryServices
  isExternal: false
  name: AuthenticationTypes
  nameWithType: AuthenticationTypes
  fullName: System.DirectoryServices.AuthenticationTypes
- uid: System.DirectoryServices.DirectoryEntry.AuthenticationType
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: AuthenticationType
  nameWithType: DirectoryEntry.AuthenticationType
  fullName: System.DirectoryServices.DirectoryEntry.AuthenticationType
- uid: System.DirectoryServices.DirectoryEntry.Children
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Children
  nameWithType: DirectoryEntry.Children
  fullName: System.DirectoryServices.DirectoryEntry.Children
- uid: System.DirectoryServices.DirectoryEntries
  parent: System.DirectoryServices
  isExternal: false
  name: DirectoryEntries
  nameWithType: DirectoryEntries
  fullName: System.DirectoryServices.DirectoryEntries
- uid: System.DirectoryServices.DirectoryEntry.Close
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Close()
  nameWithType: DirectoryEntry.Close()
  fullName: System.DirectoryServices.DirectoryEntry.Close()
- uid: System.DirectoryServices.DirectoryEntry.CommitChanges
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: CommitChanges()
  nameWithType: DirectoryEntry.CommitChanges()
  fullName: System.DirectoryServices.DirectoryEntry.CommitChanges()
- uid: System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: CopyTo(DirectoryEntry)
  nameWithType: DirectoryEntry.CopyTo(DirectoryEntry)
  fullName: System.DirectoryServices.DirectoryEntry.CopyTo(DirectoryEntry)
- uid: System.DirectoryServices.DirectoryEntry
  parent: System.DirectoryServices
  isExternal: false
  name: DirectoryEntry
  nameWithType: DirectoryEntry
  fullName: System.DirectoryServices.DirectoryEntry
- uid: System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry,System.String)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: CopyTo(DirectoryEntry,String)
  nameWithType: DirectoryEntry.CopyTo(DirectoryEntry,String)
  fullName: System.DirectoryServices.DirectoryEntry.CopyTo(DirectoryEntry,String)
- uid: System.DirectoryServices.DirectoryEntry.DeleteTree
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DeleteTree()
  nameWithType: DirectoryEntry.DeleteTree()
  fullName: System.DirectoryServices.DirectoryEntry.DeleteTree()
- uid: System.DirectoryServices.DirectoryEntry.Dispose(System.Boolean)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DirectoryEntry.Dispose(Boolean)
  fullName: System.DirectoryServices.DirectoryEntry.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.DirectoryServices.DirectoryEntry.Exists(System.String)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Exists(String)
  nameWithType: DirectoryEntry.Exists(String)
  fullName: System.DirectoryServices.DirectoryEntry.Exists(String)
- uid: System.DirectoryServices.DirectoryEntry.Guid
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Guid
  nameWithType: DirectoryEntry.Guid
  fullName: System.DirectoryServices.DirectoryEntry.Guid
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.DirectoryServices.DirectoryEntry.Invoke(System.String,System.Object[])
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Invoke(String,Object[])
  nameWithType: DirectoryEntry.Invoke(String,Object[])
  fullName: System.DirectoryServices.DirectoryEntry.Invoke(String,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.DirectoryServices.DirectoryEntry.InvokeGet(System.String)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: InvokeGet(String)
  nameWithType: DirectoryEntry.InvokeGet(String)
  fullName: System.DirectoryServices.DirectoryEntry.InvokeGet(String)
- uid: System.DirectoryServices.DirectoryEntry.InvokeSet(System.String,System.Object[])
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: InvokeSet(String,Object[])
  nameWithType: DirectoryEntry.InvokeSet(String,Object[])
  fullName: System.DirectoryServices.DirectoryEntry.InvokeSet(String,Object[])
- uid: System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: MoveTo(DirectoryEntry)
  nameWithType: DirectoryEntry.MoveTo(DirectoryEntry)
  fullName: System.DirectoryServices.DirectoryEntry.MoveTo(DirectoryEntry)
- uid: System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry,System.String)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: MoveTo(DirectoryEntry,String)
  nameWithType: DirectoryEntry.MoveTo(DirectoryEntry,String)
  fullName: System.DirectoryServices.DirectoryEntry.MoveTo(DirectoryEntry,String)
- uid: System.DirectoryServices.DirectoryEntry.Name
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Name
  nameWithType: DirectoryEntry.Name
  fullName: System.DirectoryServices.DirectoryEntry.Name
- uid: System.DirectoryServices.DirectoryEntry.NativeGuid
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: NativeGuid
  nameWithType: DirectoryEntry.NativeGuid
  fullName: System.DirectoryServices.DirectoryEntry.NativeGuid
- uid: System.DirectoryServices.DirectoryEntry.NativeObject
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: NativeObject
  nameWithType: DirectoryEntry.NativeObject
  fullName: System.DirectoryServices.DirectoryEntry.NativeObject
- uid: System.DirectoryServices.DirectoryEntry.ObjectSecurity
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: ObjectSecurity
  nameWithType: DirectoryEntry.ObjectSecurity
  fullName: System.DirectoryServices.DirectoryEntry.ObjectSecurity
- uid: System.DirectoryServices.ActiveDirectorySecurity
  parent: System.DirectoryServices
  isExternal: false
  name: ActiveDirectorySecurity
  nameWithType: ActiveDirectorySecurity
  fullName: System.DirectoryServices.ActiveDirectorySecurity
- uid: System.DirectoryServices.DirectoryEntry.Options
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Options
  nameWithType: DirectoryEntry.Options
  fullName: System.DirectoryServices.DirectoryEntry.Options
- uid: System.DirectoryServices.DirectoryEntryConfiguration
  parent: System.DirectoryServices
  isExternal: false
  name: DirectoryEntryConfiguration
  nameWithType: DirectoryEntryConfiguration
  fullName: System.DirectoryServices.DirectoryEntryConfiguration
- uid: System.DirectoryServices.DirectoryEntry.Parent
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Parent
  nameWithType: DirectoryEntry.Parent
  fullName: System.DirectoryServices.DirectoryEntry.Parent
- uid: System.DirectoryServices.DirectoryEntry.Password
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Password
  nameWithType: DirectoryEntry.Password
  fullName: System.DirectoryServices.DirectoryEntry.Password
- uid: System.DirectoryServices.DirectoryEntry.Path
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Path
  nameWithType: DirectoryEntry.Path
  fullName: System.DirectoryServices.DirectoryEntry.Path
- uid: System.DirectoryServices.DirectoryEntry.Properties
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Properties
  nameWithType: DirectoryEntry.Properties
  fullName: System.DirectoryServices.DirectoryEntry.Properties
- uid: System.DirectoryServices.PropertyCollection
  parent: System.DirectoryServices
  isExternal: false
  name: PropertyCollection
  nameWithType: PropertyCollection
  fullName: System.DirectoryServices.PropertyCollection
- uid: System.DirectoryServices.DirectoryEntry.RefreshCache
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: RefreshCache()
  nameWithType: DirectoryEntry.RefreshCache()
  fullName: System.DirectoryServices.DirectoryEntry.RefreshCache()
- uid: System.DirectoryServices.DirectoryEntry.RefreshCache(System.String[])
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: RefreshCache(String[])
  nameWithType: DirectoryEntry.RefreshCache(String[])
  fullName: System.DirectoryServices.DirectoryEntry.RefreshCache(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.DirectoryServices.DirectoryEntry.Rename(System.String)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Rename(String)
  nameWithType: DirectoryEntry.Rename(String)
  fullName: System.DirectoryServices.DirectoryEntry.Rename(String)
- uid: System.DirectoryServices.DirectoryEntry.SchemaClassName
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: SchemaClassName
  nameWithType: DirectoryEntry.SchemaClassName
  fullName: System.DirectoryServices.DirectoryEntry.SchemaClassName
- uid: System.DirectoryServices.DirectoryEntry.SchemaEntry
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: SchemaEntry
  nameWithType: DirectoryEntry.SchemaEntry
  fullName: System.DirectoryServices.DirectoryEntry.SchemaEntry
- uid: System.DirectoryServices.DirectoryEntry.UsePropertyCache
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: UsePropertyCache
  nameWithType: DirectoryEntry.UsePropertyCache
  fullName: System.DirectoryServices.DirectoryEntry.UsePropertyCache
- uid: System.DirectoryServices.DirectoryEntry.Username
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Username
  nameWithType: DirectoryEntry.Username
  fullName: System.DirectoryServices.DirectoryEntry.Username
- uid: System.DirectoryServices.DirectoryEntry.#ctor*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DirectoryEntry
  nameWithType: DirectoryEntry.DirectoryEntry
- uid: System.DirectoryServices.DirectoryEntry.AuthenticationType*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: AuthenticationType
  nameWithType: DirectoryEntry.AuthenticationType
- uid: System.DirectoryServices.DirectoryEntry.Children*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Children
  nameWithType: DirectoryEntry.Children
- uid: System.DirectoryServices.DirectoryEntry.Close*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Close
  nameWithType: DirectoryEntry.Close
- uid: System.DirectoryServices.DirectoryEntry.CommitChanges*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: CommitChanges
  nameWithType: DirectoryEntry.CommitChanges
- uid: System.DirectoryServices.DirectoryEntry.CopyTo*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: CopyTo
  nameWithType: DirectoryEntry.CopyTo
- uid: System.DirectoryServices.DirectoryEntry.DeleteTree*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DeleteTree
  nameWithType: DirectoryEntry.DeleteTree
- uid: System.DirectoryServices.DirectoryEntry.Dispose*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Dispose
  nameWithType: DirectoryEntry.Dispose
- uid: System.DirectoryServices.DirectoryEntry.Exists*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Exists
  nameWithType: DirectoryEntry.Exists
- uid: System.DirectoryServices.DirectoryEntry.Guid*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Guid
  nameWithType: DirectoryEntry.Guid
- uid: System.DirectoryServices.DirectoryEntry.Invoke*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Invoke
  nameWithType: DirectoryEntry.Invoke
- uid: System.DirectoryServices.DirectoryEntry.InvokeGet*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: InvokeGet
  nameWithType: DirectoryEntry.InvokeGet
- uid: System.DirectoryServices.DirectoryEntry.InvokeSet*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: InvokeSet
  nameWithType: DirectoryEntry.InvokeSet
- uid: System.DirectoryServices.DirectoryEntry.MoveTo*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: MoveTo
  nameWithType: DirectoryEntry.MoveTo
- uid: System.DirectoryServices.DirectoryEntry.Name*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Name
  nameWithType: DirectoryEntry.Name
- uid: System.DirectoryServices.DirectoryEntry.NativeGuid*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: NativeGuid
  nameWithType: DirectoryEntry.NativeGuid
- uid: System.DirectoryServices.DirectoryEntry.NativeObject*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: NativeObject
  nameWithType: DirectoryEntry.NativeObject
- uid: System.DirectoryServices.DirectoryEntry.ObjectSecurity*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: ObjectSecurity
  nameWithType: DirectoryEntry.ObjectSecurity
- uid: System.DirectoryServices.DirectoryEntry.Options*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Options
  nameWithType: DirectoryEntry.Options
- uid: System.DirectoryServices.DirectoryEntry.Parent*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Parent
  nameWithType: DirectoryEntry.Parent
- uid: System.DirectoryServices.DirectoryEntry.Password*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Password
  nameWithType: DirectoryEntry.Password
- uid: System.DirectoryServices.DirectoryEntry.Path*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Path
  nameWithType: DirectoryEntry.Path
- uid: System.DirectoryServices.DirectoryEntry.Properties*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Properties
  nameWithType: DirectoryEntry.Properties
- uid: System.DirectoryServices.DirectoryEntry.RefreshCache*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: RefreshCache
  nameWithType: DirectoryEntry.RefreshCache
- uid: System.DirectoryServices.DirectoryEntry.Rename*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Rename
  nameWithType: DirectoryEntry.Rename
- uid: System.DirectoryServices.DirectoryEntry.SchemaClassName*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: SchemaClassName
  nameWithType: DirectoryEntry.SchemaClassName
- uid: System.DirectoryServices.DirectoryEntry.SchemaEntry*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: SchemaEntry
  nameWithType: DirectoryEntry.SchemaEntry
- uid: System.DirectoryServices.DirectoryEntry.UsePropertyCache*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: UsePropertyCache
  nameWithType: DirectoryEntry.UsePropertyCache
- uid: System.DirectoryServices.DirectoryEntry.Username*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Username
  nameWithType: DirectoryEntry.Username
