### YamlMime:ManagedReference
items:
- uid: System.Runtime.Caching.ChangeMonitor
  id: ChangeMonitor
  children:
  - System.Runtime.Caching.ChangeMonitor.#ctor
  - System.Runtime.Caching.ChangeMonitor.Dispose
  - System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)
  - System.Runtime.Caching.ChangeMonitor.HasChanged
  - System.Runtime.Caching.ChangeMonitor.InitializationComplete
  - System.Runtime.Caching.ChangeMonitor.IsDisposed
  - System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)
  - System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)
  - System.Runtime.Caching.ChangeMonitor.UniqueId
  langs:
  - csharp
  name: ChangeMonitor
  nameWithType: ChangeMonitor
  fullName: System.Runtime.Caching.ChangeMonitor
  type: Class
  summary: "Udostępnia klasę podstawową dla typu pochodnego niestandardowego, który monitoruje zmiany w stanie danych, która zależy od elementu pamięci podręcznej."
  remarks: "Klasa ChangeMonitor jest używana jako klasa podstawowa dla klasy pochodnej monitor, które są przeznaczone do pamięci podręcznej konkretnej implementacji. Wystąpienie ChangeMonitor monitoruje zmiany w stanie danych, która zależy od elementu pamięci podręcznej. Na przykład element może być jednostki pliku lub danych, których zawartość są buforowane. Jednostka danych lub plik jest aktualizowany, również należy zmienić wpis pamięci podręcznej skojarzone. Wspólne elementy, które mogą być monitorowane Dołącz jednostek danych (np. pola bazy danych wartości, wierszy i tabele), inny wpis pamięci podręcznej i pliki i atrybutów pliku.       Zmiany w stanie zależność jest zmiany zależności. W implementacji typowe pamięci podręcznej po wystąpienia ChangeMonitor powiadamia pamięci podręcznej, która zmieniła się zależność, pamięci podręcznej wykonuje wymaganych akcji, na przykład unieważnia wpisu pamięci podręcznej wstawionego.       Klasy pochodne ChangeMonitor można dostosować, aby monitorować zmiany zależności dla określonych danych do różnych magazynów. Na przykład są implementacje pamięć podręczna systemu plików, w pamięci fizycznej lub bazy danych. Klasa ChangeMonitor sprawdza zmiany wprowadzone poza pamięci podręcznej, a następnie powiadamia pamięci podręcznej, które nastąpiły zmiany.       [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Zawiera następujące klasy, które pochodzi z klasy ChangeMonitor:- <xref:System.Runtime.Caching.CacheEntryChangeMonitor>- <xref:System.Runtime.Caching.FileChangeMonitor>- <xref:System.Runtime.Caching.HostFileChangeMonitor>- <xref:System.Runtime.Caching.SqlChangeMonitor>każda z tych klas działa z różnymi typami zależności.</xref:System.Runtime.Caching.SqlChangeMonitor> </xref:System.Runtime.Caching.HostFileChangeMonitor> </xref:System.Runtime.Caching.FileChangeMonitor> </xref:System.Runtime.Caching.CacheEntryChangeMonitor> Na przykład pochodnej <xref:System.Runtime.Caching.FileChangeMonitor>Klasa śledzi zmiany w pamięci podręcznej danych systemu plików (pliki i foldery), która zależy od elementu pamięci podręcznej.</xref:System.Runtime.Caching.FileChangeMonitor>"
  syntax:
    content: 'public abstract class ChangeMonitor : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.#ctor
  id: '#ctor'
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: ChangeMonitor()
  nameWithType: ChangeMonitor.ChangeMonitor()
  fullName: System.Runtime.Caching.ChangeMonitor.ChangeMonitor()
  type: Constructor
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> klasy. Ten konstruktor jest wywoływana z konstruktorów w klasach pochodnych w celu zainicjowania klasy podstawowej."
  remarks: "<xref:System.Runtime.Caching.ChangeMonitor>Klasa ma konstruktora domyślnego.</xref:System.Runtime.Caching.ChangeMonitor> Jednak klasy które dziedziczą z podstawowym <xref:System.Runtime.Caching.ChangeMonitor>klasy i Zdefiniuj niestandardowe monitorowanie zmian zachowania, należy wykonać inicjowania w konstruktorze.</xref:System.Runtime.Caching.ChangeMonitor> Aby uzyskać więcej informacji zobacz Uwagi dotyczące obiektów dziedziczących sekcji."
  syntax:
    content: protected ChangeMonitor ();
    parameters: []
  overload: System.Runtime.Caching.ChangeMonitor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.Dispose
  id: Dispose
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: Dispose()
  nameWithType: ChangeMonitor.Dispose()
  fullName: System.Runtime.Caching.ChangeMonitor.Dispose()
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Zwalnia wszystkie zasoby, które są używane przez bieżące wystąpienie klasy <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> klasy."
  remarks: "Wywołuje metodę Dispose <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>metody klas pochodnych tylko jeden raz, jest ona wywoływana po raz pierwszy.</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Kolejne wywołania metody Dispose nie obowiązują. Po wywołaniu metody <xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A>właściwość jest ustawiona na `true`.</xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A>       <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>Przeciążenia musi zostać wywołana zlikwidować <xref:System.Runtime.Caching.ChangeMonitor>wystąpienia.</xref:System.Runtime.Caching.ChangeMonitor> </xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Poniżej przedstawiono reguły wywoływania metody dispose:-przed wstawieniem elementu do pamięci podręcznej, jest odpowiedzialny za wywołującej do rozporządzania <xref:System.Runtime.Caching.ChangeMonitor>wystąpienia.</xref:System.Runtime.Caching.ChangeMonitor>      -Raz elementu pamięci podręcznej i <xref:System.Runtime.Caching.ChangeMonitor>wystąpień, które są skojarzone z nim są przekazywane do pamięci podręcznej, implementujący pamięci podręcznej, który należy się upewnić, że <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>jest wywoływana, nawet jeśli insert nie powiedzie się.</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> </xref:System.Runtime.Caching.ChangeMonitor>      — Po elementu i jego skojarzony <xref:System.Runtime.Caching.ChangeMonitor>wystąpienia są przekazywane do pamięci podręcznej, obiekt wywołujący nie musi dysponować zależności, ponieważ podczas <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>Metoda jest wywoływana, wywołanie jest traktowane jakby zależność została zmieniona.</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> </xref:System.Runtime.Caching.ChangeMonitor> W związku z tym <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>Metoda jest wywoływana automatycznie.</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>      -Biorąc pod uwagę, te reguły <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>Metoda musi zostać wywołana w jednym z następujących sposobów:-użytkowników należy wywołać przeciążenie metody Dispose, jeśli nie wstawić wystąpienia pochodne monitor zmianach do pamięci podręcznej.</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>          Implementacja pamięć podręczna jest odpowiedzialny za wywołania przeciążenia metody Dispose, jeśli implementacja próbuje wstawić wystąpienia monitora zmiany do obiektu pamięci podręcznej, ale wstawiania nie powiedzie się. Podczas próby wstawienia powoduje zgłoszenie wyjątku, implementację buforu musi dysponować skojarzone zależności.          — Jeśli wpis pamięci podręcznej zostanie usunięty, implementację buforu musi również dysponować zależności.       Wewnętrzny wykonania <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>automatycznie wywołuje metodę <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>zarejestrowany przez metodę po wywołuje wywołania zwrotnego <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>metody.</xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> </xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> </xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>      > [!NOTE] > Tego automatycznego usuwania podczas uruchamiania zdarzeń tylko wtedy, gdy inicjowanie <xref:System.Runtime.Caching.ChangeMonitor>wystąpienia wcześniej zakończone.</xref:System.Runtime.Caching.ChangeMonitor>       Gdy monitor pochodnej zmiany Konstruktor wywołuje <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A>metody, jeśli już zmieniła stan monitora zmiany (to znaczy, stan, który jest monitorowany już zmieniona po konstruktora było nadal aktywne) następnie <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A>metody automatycznie zlikwiduje monitor zmianach.</xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> </xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A>      > [!NOTE] > Użytkowników nie powinien wywoływać metodę Dispose. Nie można jednak zapobiec wywołanie metody. W związku z tym, jeśli nie, <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>wywołania metody.</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> W takim przypadku wpis pamięci podręcznej jest powiadamiany o tak, jakby zależność została zmieniona.       Aby uniemożliwić przesłanianie metody Dispose klasy pochodne, metoda nie jest jawnej implementacji interfejsu."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Runtime.Caching.ChangeMonitor.Dispose*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Inicjowanie nie zostało zakończone w klasie pochodnej monitor zmianach wywołać podstawową metodę Dispose."
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ChangeMonitor.Dispose(Boolean)
  fullName: System.Runtime.Caching.ChangeMonitor.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Zwalnia wszystkie zasoby zarządzane i niezarządzane, a wszelkie odwołania do <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> wystąpienia. To przeciążenie musi być implementowana przez klasy pochodnej monitor zmianach."
  remarks: "Jeśli wartość `disposing` wartość jest `true`, wszystkie zasoby zarządzane i niezarządzane są usuwane i wszelkie odwołania do tego obiektu są wydawane, aby umożliwić wystąpienia pochodne monitor zmianach bezużytecznych. Jest on gwarancję, że podstawowym <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>Metoda wywoła implementowana metoda Dispose tylko jeden raz.</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>"
  syntax:
    content: protected abstract void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby zwolnić zasoby zarządzane i niezarządzane, a wszelkie odwołania do <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> wystąpienia; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> aby zwolnić tylko zasoby niezarządzane. Gdy <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> jest przekazywany Dispose metoda jest wywoływana przez <xref uid=&quot;langword_csharp_finalizer&quot; name=&quot;finalizer&quot; href=&quot;&quot;> </xref> wątku i zewnętrznych odwołań zarządzanych prawdopodobnie nie jest już prawidłowe, ponieważ są one już bezużytecznych."
  overload: System.Runtime.Caching.ChangeMonitor.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.HasChanged
  id: HasChanged
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: HasChanged
  nameWithType: ChangeMonitor.HasChanged
  fullName: System.Runtime.Caching.ChangeMonitor.HasChanged
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Pobiera wartość, która wskazuje, że stan, który jest monitorowany przez <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> klasa uległa zmianie."
  remarks: "Możesz sprawdzić wartość tej właściwości w pochodnym <xref:System.Runtime.Caching.ChangeMonitor>klasy, aby zobaczyć, czy zależność została zmieniona.</xref:System.Runtime.Caching.ChangeMonitor>       Wartość jest równa `true` gdy nastąpi zmiana zależności (oznacza to, gdy <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>Metoda jest wywoływana).</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> Po <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>Metoda jest wywoływana przez klasy pochodnej, wartość właściwości HasChanged będzie `true`, niezależnie od tego, czy <xref:System.Runtime.Caching.OnChangedCallback>wystąpienia została powiadomiona, przez wywołanie do <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>metody.</xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> </xref:System.Runtime.Caching.OnChangedCallback> </xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>      > [!NOTE] > Wywołań można sprawdzić właściwość HasChanged w celu sprawdzenia, czy zależność została zmieniona. Jednak w środowisku wielowątkowych prostszy i więcej łatwy w obsłudze podejście jest do wstawiania danych do implementacji pamięci podręcznej bez sprawdzania, czy właściwość HasChanged. Implementacje pamięci podręcznej musi sprawdzić właściwość HasChanged i nie może wykonywać operacji insert ani operacji zestawu, jeśli zmienione zostały już co najmniej jeden skojarzone zależności."
  syntax:
    content: public bool HasChanged { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli stan, który jest monitorowany przez <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> wystąpienia został zmieniony; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Runtime.Caching.ChangeMonitor.HasChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.InitializationComplete
  id: InitializationComplete
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: InitializationComplete()
  nameWithType: ChangeMonitor.InitializationComplete()
  fullName: System.Runtime.Caching.ChangeMonitor.InitializationComplete()
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Wywoływana z konstruktora klasy pochodne wskazująca, że ten Inicjowanie zostało zakończone."
  remarks: "W przypadku zależności zmiany przed zakończeniem inicjowania w klasie pochodnej, musi wywoływać konstruktora klasy pochodnej <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>metody.</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>       Gdy <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>wywołaniu metody <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>jest automatycznie ustawiana właściwość `true` przez monitor zmiany.</xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> </xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> W związku z tym, gdy monitor zmianach Konstruktor wywołuje metodę InitializationComplete, klasa podstawowa automatycznie wywoła <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>metody.</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Jeśli Inicjowanie zostało zakończone, <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>metody automatycznie usuwa wystąpienia pochodne monitor zmianach.</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>"
  syntax:
    content: protected void InitializationComplete ();
    parameters: []
  overload: System.Runtime.Caching.ChangeMonitor.InitializationComplete*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.IsDisposed
  id: IsDisposed
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: IsDisposed
  nameWithType: ChangeMonitor.IsDisposed
  fullName: System.Runtime.Caching.ChangeMonitor.IsDisposed
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Pobiera wartość określającą, czy wystąpienia pochodne <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> klasa zostanie usunięty."
  remarks: "Właściwość jest ustawiona na `true` po podstawowym <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>wywołania metody <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>metody w klasie pochodnej można zlikwidować wystąpienia.</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> </xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>"
  syntax:
    content: public bool IsDisposed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli wystąpienie zostanie usunięty; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Runtime.Caching.ChangeMonitor.IsDisposed*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)
  id: NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: NotifyOnChanged(OnChangedCallback)
  nameWithType: ChangeMonitor.NotifyOnChanged(OnChangedCallback)
  fullName: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(OnChangedCallback)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Wywoływane przez implementacje pamięci podręcznej zarejestrować wywołania zwrotnego i powiadomienie <xref href=&quot;System.Runtime.Caching.ObjectCache&quot;> </xref> wystąpienie za pośrednictwem <xref href=&quot;System.Runtime.Caching.OnChangedCallback&quot;> </xref> delegowanie, gdy zmieniono zależności."
  remarks: "Implementacje pamięci podręcznej umożliwia połączenie się monitor zmiany do tej metody. W przypadku skojarzyć jedną lub więcej zmienić monitorów z elementu pamięci podręcznej, należy przekazać <xref:System.Runtime.Caching.CacheItemPolicy>wystąpienia z właściwością monitorów wypełnione zmiany do elementu pamięci podręcznej.</xref:System.Runtime.Caching.CacheItemPolicy> Realizator pamięci podręcznej, że obsługuje zmienić monitorów jest odpowiedzialny za Iterowanie po <xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A>Właściwości i rejestrowanie <xref:System.Runtime.Caching.OnChangedCallback>obiektów delegowanych z każdym zmienić monitor, który znajdzie.</xref:System.Runtime.Caching.OnChangedCallback> </xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A>       Ponieważ <xref:System.Runtime.Caching.OnChangedCallback>delegata zawiera parametr opcjonalny stanu, implementacja monitor konkretnych zmiany można przekazać informacji o stanie opcjonalne.</xref:System.Runtime.Caching.OnChangedCallback> Realizator pamięci podręcznej określa, czy należy podjąć jawne zależności od typu stanu monitora zmiany przekazywany jako część wywołania zwrotnego.      > [!NOTE] > Podstawowy pamięci podręcznej rozszerzeń interfejsu API nie ma wymagań dotyczących jawne zależności od typu stanu.       Implementacja metody NotifyOnChanged automatycznie określa, czy stan monitora już został zmieniony w czasie, gdy zostanie wywołana metoda NotifyOnChanged. Jeśli <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>właściwość jest `true`, a następnie automatycznie wywołuje metodę <xref:System.Runtime.Caching.OnChangedCallback>program obsługi zdarzeń, który został zarejestrowany za pomocą <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>metody.</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> </xref:System.Runtime.Caching.OnChangedCallback> </xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> Dzieje się tak, ponieważ jest to możliwe, że od czasu implementację buforu tworzy monitorem zmiany czasu implementację buforu pobiera monitora i wiążący sam maksymalnie, podstawowy stan monitorowanych została zmieniona. Jeśli stan został już zmieniony następnie obiekt, który jest przekazywany do <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>jest metoda `null`.</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>       Metoda NotifyOnChanged można wywołać tylko raz i spowoduje zgłoszenie wyjątku w kolejnych wywołaniach."
  syntax:
    content: public void NotifyOnChanged (System.Runtime.Caching.OnChangedCallback onChangedCallback);
    parameters:
    - id: onChangedCallback
      type: System.Runtime.Caching.OnChangedCallback
      description: "Odwołanie do metody, które jest wywoływane, gdy zmieniono zależność."
  overload: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Metoda wywołania zwrotnego został już wywołany."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>onChangedCallback</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)
  id: OnChanged(System.Object)
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: OnChanged(Object)
  nameWithType: ChangeMonitor.OnChanged(Object)
  fullName: System.Runtime.Caching.ChangeMonitor.OnChanged(Object)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Metoda wywoływana przez klasy pochodne, aby zgłosić zdarzenie, gdy zostanie zmieniona zależności."
  remarks: "Zazwyczaj wywoływana jest metoda OnChanged, w przypadku wystąpienia zmian zależności. Metoda OnChanged również jest wywoływane, gdy wystąpienie Monitora zmiany zostanie usunięty, ale usuwania występuje tylko wtedy, gdy nie ma już wywołać metodę wywołania zwrotnego.       Jeśli metoda OnChanged jest wywoływana przed <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>Metoda jest wywoływana, dane o stanie z wywołania metody OnChanged zostanie zapisana przez implementację pamięci podręcznej.</xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> Ponadto wywołanie zwrotne do <xref:System.Runtime.Caching.OnChangedCallback>Metoda jest wywoływana natychmiast po <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>wywołania metody.</xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> </xref:System.Runtime.Caching.OnChangedCallback>"
  syntax:
    content: protected void OnChanged (object state);
    parameters:
    - id: state
      type: System.Object
      description: "Dane zdarzenia zmiany. Ta wartość może być <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Runtime.Caching.ChangeMonitor.OnChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.UniqueId
  id: UniqueId
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: UniqueId
  nameWithType: ChangeMonitor.UniqueId
  fullName: System.Runtime.Caching.ChangeMonitor.UniqueId
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Pobiera wartość, która reprezentuje <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> wystąpienie klasy."
  remarks: "Wartość właściwości UniqueId zazwyczaj składa się z danych dotyczących ciągu nazwy łączyć zależności który jednoznacznie identyfikatory danych, który jest monitorowany przez <xref:System.Runtime.Caching.ChangeMonitor>wystąpienia.</xref:System.Runtime.Caching.ChangeMonitor> Wartość właściwości UniqueId jest ciągiem. Wartość ciągu można przypisywać unikatowy identyfikator <xref:System.Runtime.Caching.ChangeMonitor>wystąpienia.</xref:System.Runtime.Caching.ChangeMonitor>"
  syntax:
    content: public abstract string UniqueId { get; }
    return:
      type: System.String
      description: "Identyfikator wystąpienia zmiany monitora."
  overload: System.Runtime.Caching.ChangeMonitor.UniqueId*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Runtime.Caching.ChangeMonitor.#ctor
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: ChangeMonitor()
  nameWithType: ChangeMonitor.ChangeMonitor()
  fullName: System.Runtime.Caching.ChangeMonitor.ChangeMonitor()
- uid: System.Runtime.Caching.ChangeMonitor.Dispose
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: Dispose()
  nameWithType: ChangeMonitor.Dispose()
  fullName: System.Runtime.Caching.ChangeMonitor.Dispose()
- uid: System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ChangeMonitor.Dispose(Boolean)
  fullName: System.Runtime.Caching.ChangeMonitor.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Runtime.Caching.ChangeMonitor.HasChanged
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: HasChanged
  nameWithType: ChangeMonitor.HasChanged
  fullName: System.Runtime.Caching.ChangeMonitor.HasChanged
- uid: System.Runtime.Caching.ChangeMonitor.InitializationComplete
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: InitializationComplete()
  nameWithType: ChangeMonitor.InitializationComplete()
  fullName: System.Runtime.Caching.ChangeMonitor.InitializationComplete()
- uid: System.Runtime.Caching.ChangeMonitor.IsDisposed
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: IsDisposed
  nameWithType: ChangeMonitor.IsDisposed
  fullName: System.Runtime.Caching.ChangeMonitor.IsDisposed
- uid: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: NotifyOnChanged(OnChangedCallback)
  nameWithType: ChangeMonitor.NotifyOnChanged(OnChangedCallback)
  fullName: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(OnChangedCallback)
- uid: System.Runtime.Caching.OnChangedCallback
  parent: System.Runtime.Caching
  isExternal: false
  name: OnChangedCallback
  nameWithType: OnChangedCallback
  fullName: System.Runtime.Caching.OnChangedCallback
- uid: System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: OnChanged(Object)
  nameWithType: ChangeMonitor.OnChanged(Object)
  fullName: System.Runtime.Caching.ChangeMonitor.OnChanged(Object)
- uid: System.Runtime.Caching.ChangeMonitor.UniqueId
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: UniqueId
  nameWithType: ChangeMonitor.UniqueId
  fullName: System.Runtime.Caching.ChangeMonitor.UniqueId
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Runtime.Caching.ChangeMonitor.#ctor*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: ChangeMonitor
  nameWithType: ChangeMonitor.ChangeMonitor
- uid: System.Runtime.Caching.ChangeMonitor.Dispose*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: Dispose
  nameWithType: ChangeMonitor.Dispose
- uid: System.Runtime.Caching.ChangeMonitor.HasChanged*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: HasChanged
  nameWithType: ChangeMonitor.HasChanged
- uid: System.Runtime.Caching.ChangeMonitor.InitializationComplete*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: InitializationComplete
  nameWithType: ChangeMonitor.InitializationComplete
- uid: System.Runtime.Caching.ChangeMonitor.IsDisposed*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: IsDisposed
  nameWithType: ChangeMonitor.IsDisposed
- uid: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: NotifyOnChanged
  nameWithType: ChangeMonitor.NotifyOnChanged
- uid: System.Runtime.Caching.ChangeMonitor.OnChanged*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: OnChanged
  nameWithType: ChangeMonitor.OnChanged
- uid: System.Runtime.Caching.ChangeMonitor.UniqueId*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: UniqueId
  nameWithType: ChangeMonitor.UniqueId
