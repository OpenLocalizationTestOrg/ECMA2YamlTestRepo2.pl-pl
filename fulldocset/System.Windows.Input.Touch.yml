### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.Touch
  id: Touch
  children:
  - System.Windows.Input.Touch.FrameReported
  langs:
  - csharp
  name: Touch
  nameWithType: Touch
  fullName: System.Windows.Input.Touch
  type: Class
  summary: "Usługa poziomie aplikacji, która przetwarza multitouch dane wejściowe z systemu operacyjnego i zgłasza <xref href=&quot;System.Windows.Input.Touch.FrameReported&quot;> </xref> zdarzeń."
  remarks: "<xref:System.Windows.Input.Touch.FrameReported>Zdarzeń jest uwzględniona w [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] do obsługi zgodności z Silverlight.</xref:System.Windows.Input.Touch.FrameReported> Jeśli nie masz do zapewnienia zgodności z Silverlight, użyj zdarzenia touch, takiego jak <xref:System.Windows.UIElement.TouchDown>i <xref:System.Windows.UIElement.TouchMove>na <xref:System.Windows.UIElement>, <xref:System.Windows.UIElement3D>, lub <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement> </xref:System.Windows.UIElement3D> </xref:System.Windows.UIElement> </xref:System.Windows.UIElement.TouchMove> </xref:System.Windows.UIElement.TouchDown>       <xref:System.Windows.Input.Touch.FrameReported>Zdarzenie nie korzysta z tego samego modelu zdarzeń co zdarzenia wejściowe WPF, takie jak <xref:System.Windows.UIElement.TouchDown>i <xref:System.Windows.UIElement.TouchMove>.</xref:System.Windows.UIElement.TouchMove> </xref:System.Windows.UIElement.TouchDown> </xref:System.Windows.Input.Touch.FrameReported> Zamiast jako zdarzenie specyficzne dla elementu potencjalnie kieruje do drzewa obiektów interfejsu użytkownika przed przypadkowym <xref:System.Windows.Input.Touch.FrameReported>zdarzenie jest pojedyncze zdarzenie, który jest obsługiwany na poziomie aplikacji.</xref:System.Windows.Input.Touch.FrameReported> W związku z tym nie można użyć `sender` parametru obsługi zdarzeń w celu ustalenia, jaki element jest dotknięciu.       Użyj <xref:System.Windows.Input.TouchFrameEventArgs>uzyskanie <xref:System.Windows.Input.TouchPoint>wartości, które mają zastosowanie do zdarzenia touch.</xref:System.Windows.Input.TouchPoint> </xref:System.Windows.Input.TouchFrameEventArgs> Z <xref:System.Windows.Input.TouchPoint>, możesz uzyskać <xref:System.Windows.Input.TouchPoint.Position%2A>dotykowego i określić, czy <xref:System.Windows.Input.TouchAction>został <xref:System.Windows.Input.TouchAction>, <xref:System.Windows.Input.TouchAction>, lub <xref:System.Windows.Input.TouchAction>akcji.</xref:System.Windows.Input.TouchAction> </xref:System.Windows.Input.TouchAction> </xref:System.Windows.Input.TouchAction> </xref:System.Windows.Input.TouchAction> </xref:System.Windows.Input.TouchPoint.Position%2A> </xref:System.Windows.Input.TouchPoint> Umożliwia również <xref:System.Windows.Input.TouchPoint>uzyskanie <xref:System.Windows.Input.TouchDevice>.</xref:System.Windows.Input.TouchDevice> </xref:System.Windows.Input.TouchPoint> Z <xref:System.Windows.Input.TouchDevice>, można określić urządzenia <xref:System.Windows.Input.TouchDevice.Id%2A>i informacje na temat elementu, który jest dotknięciu.</xref:System.Windows.Input.TouchDevice.Id%2A> </xref:System.Windows.Input.TouchDevice>"
  example:
  - "The following example enables you to create simple patterns on a <xref:System.Windows.Controls.Canvas> by dragging two fingers across a touchscreen. Each touch is represented by a <xref:System.Windows.Input.TouchDevice>.The pattern is created by drawing a line between the touch points provided by the touches. This example requires a Windows Touch–compatible screen.  \n  \n The following markup creates the user interface, which consists of a <xref:System.Windows.Controls.Canvas> that is centered in a <xref:System.Windows.Controls.Grid>.  \n  \n [!code-xml[TouchFrameSample#000](~/add/codesnippet/xaml/wpftouchframesample/mainwindow.xaml#000)]  \n  \n The following code handles the <xref:System.Windows.Input.Touch.FrameReported> event. When a touch presses on the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice> is captured to the <xref:System.Windows.Controls.Canvas>. When the touch is lifted, the <xref:System.Windows.Input.TouchDevice> is released. When a touch moves across the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice.Id%2A> is checked. If the move came from the first touch, its location is recorded. If the move came from the second touch, a line is drawn from the position of the first touch to the position of the second touch.  \n  \n [!code-vb[TouchFrameSample#100](~/add/codesnippet/visualbasic/wpftouchframesample/mainwindow.xaml.vb#100)]\n [!code-cs[TouchFrameSample#100](~/add/codesnippet/csharp/wpftouchframesample/mainwindow.xaml.cs#100)]"
  syntax:
    content: public static class Touch
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Input.Touch.FrameReported
  id: FrameReported
  parent: System.Windows.Input.Touch
  langs:
  - csharp
  name: FrameReported
  nameWithType: Touch.FrameReported
  fullName: System.Windows.Input.Touch.FrameReported
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Występuje, gdy jest wysyłany komunikat touch."
  remarks: "Ramka jest jedną z szeregu multitouch wiadomości lub punkty touch. Obsługi zdarzeń FrameReported i uzyskiwania dostępu do danych może odpowiedzieć poprawki <xref:System.Windows.Input.TouchPoint>z <xref:System.Windows.Input.TouchFrameEventArgs>danych zdarzenia.</xref:System.Windows.Input.TouchFrameEventArgs> </xref:System.Windows.Input.TouchPoint>       Zdarzenie FrameReported nie używa tego samego modelu zdarzeń jako inny [!INCLUDE[TLA#tla_titlewinclient](~/add/includes/tlasharptla-titlewinclient-md.md)] wejściowych zdarzenia, takie jak <xref:System.Windows.UIElement.TouchDown>i <xref:System.Windows.UIElement.TouchMove>.</xref:System.Windows.UIElement.TouchMove> </xref:System.Windows.UIElement.TouchDown> Zamiast przed przypadkowym jako zdarzenie specyficzne dla elementu potencjalnie kieruje do drzewa obiektów interfejsu użytkownika, zdarzenie FrameReported jest pojedyncze zdarzenie, który jest obsługiwany na poziomie aplikacji. W związku z tym nie można użyć `sender` parametru obsługi zdarzeń w celu ustalenia, jaki element jest dotknięciu."
  example:
  - "The following example handles the FrameReported event. When a touch presses on the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice> is captured to the <xref:System.Windows.Controls.Canvas>. When the touch is lifted, the <xref:System.Windows.Input.TouchDevice> is released. When a touch moves across the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice.Id%2A> is checked. If the move came from the first touch, its location is recorded. If the move came from the second touch, a line is drawn from the position of the first touch to the position of the second touch.  \n  \n This example is part of a larger example that is available in the <xref:System.Windows.Input.Touch> class overview.  \n  \n [!code-vb[TouchFrameSample#110](~/add/codesnippet/visualbasic/wpftouchframesample/mainwindow.xaml.vb#110)]\n [!code-cs[TouchFrameSample#110](~/add/codesnippet/csharp/wpftouchframesample/mainwindow.xaml.cs#110)]"
  syntax:
    content: public static event System.Windows.Input.TouchFrameEventHandler FrameReported;
    return:
      type: System.Windows.Input.TouchFrameEventHandler
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.Input.Touch.FrameReported
  parent: System.Windows.Input.Touch
  isExternal: false
  name: FrameReported
  nameWithType: Touch.FrameReported
  fullName: System.Windows.Input.Touch.FrameReported
- uid: System.Windows.Input.TouchFrameEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: TouchFrameEventHandler
  nameWithType: TouchFrameEventHandler
  fullName: System.Windows.Input.TouchFrameEventHandler
