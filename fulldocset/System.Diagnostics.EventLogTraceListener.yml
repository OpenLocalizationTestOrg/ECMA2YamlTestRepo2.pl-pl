### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.EventLogTraceListener
  id: EventLogTraceListener
  children:
  - System.Diagnostics.EventLogTraceListener.#ctor
  - System.Diagnostics.EventLogTraceListener.#ctor(System.Diagnostics.EventLog)
  - System.Diagnostics.EventLogTraceListener.#ctor(System.String)
  - System.Diagnostics.EventLogTraceListener.Close
  - System.Diagnostics.EventLogTraceListener.Dispose(System.Boolean)
  - System.Diagnostics.EventLogTraceListener.EventLog
  - System.Diagnostics.EventLogTraceListener.Name
  - System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  - System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  - System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  - System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  - System.Diagnostics.EventLogTraceListener.Write(System.String)
  - System.Diagnostics.EventLogTraceListener.WriteLine(System.String)
  langs:
  - csharp
  name: EventLogTraceListener
  nameWithType: EventLogTraceListener
  fullName: System.Diagnostics.EventLogTraceListener
  type: Class
  summary: "Udostępnia prosty odbiornik, który kieruje śledzenia i debugowania dane wyjściowe do <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref>."
  remarks: "Wystąpienie tego EventLogTraceListener można dodać do <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName>, <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName>, lub <xref:System.Diagnostics.TraceSource.Listeners%2A?displayProperty=fullName>kolekcji, aby wysłać dane wyjściowe śledzenia i debugowania do <xref:System.Diagnostics.EventLog>.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.TraceSource.Listeners%2A?displayProperty=fullName> </xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> </xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName> Można dodać wystąpienia w kodzie lub określić je w pliku konfiguracyjnym aplikacji. Aby dodać EventLogTraceListener przy użyciu pliku konfiguracji aplikacji, Edytuj plik, który odpowiada nazwie aplikacji lub pliku app.config w [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] projektu. W tym pliku należy wstawić element dla typu EventLogTraceListener.       Poniższy przykład umożliwia dodanie obiektu EventLogTraceListener o nazwie `myListener` do <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName>kolekcji.</xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> `initializeData` Parametr określa nazwę źródło dziennika zdarzeń, który zostanie przekazany do <xref:System.Diagnostics.EventLogTraceListener.%23ctor%28System.String%29>konstruktora.</xref:System.Diagnostics.EventLogTraceListener.%23ctor%28System.String%29>      ```   <configuration>     <system.diagnostics>       <trace autoflush=&quot;false&quot; indentsize=&quot;4&quot;>         <listeners>           <add name=&quot;myListener&quot;             type=&quot;System.Diagnostics.EventLogTraceListener&quot;             initializeData=&quot;TraceListenerLog&quot; />         </listeners>       </trace>     </system.diagnostics>   </configuration>   ```Aby uzyskać więcej informacji na temat dodawania obiektów nasłuchujących śledzenia w pliku konfiguracyjnym aplikacji, zobacz lub.      > [!NOTE] > Jeśli <xref:System.Diagnostics.EventLog.Source%2A>dla dziennika zdarzeń, który jest skojarzony z wystąpieniem EventLogTraceListener nie istnieje, jest utworzone nowe źródło zdarzeń.</xref:System.Diagnostics.EventLog.Source%2A> Aby utworzyć źródło zdarzeń w systemie Windows Vista, Windows XP Professional lub Windows Server 2003, musi mieć uprawnienia administratora.   >> Przyczyna to wymaganie to, że wszystkie dzienniki zdarzeń, zabezpieczeń, w tym musi przeszukana w celu określenia, czy źródło zdarzenia jest unikatowa. W systemie Windows Vista użytkownicy nie mają uprawnień do dostępu do dziennika zabezpieczeń; w związku z tym <xref:System.Security.SecurityException>jest generowany.</xref:System.Security.SecurityException>   >> W systemie Windows Vista Kontrola konta użytkownika (UAC) określa uprawnienia użytkownika. Jeśli jesteś członkiem grupy Administratorzy wbudowanych, są przypisane dwa tokenów dostępu do środowiska wykonawczego: token dostępu użytkownika standardowego i token dostępu administratora. Domyślnie są w roli użytkownika standardowego. Do wykonania kodu, który uzyskuje dostęp do dziennika zabezpieczeń, musi najpierw podwyższenie Twoje uprawnienia od użytkownika standardowego do administratora. Można to zrobić, podczas uruchamiania aplikacji przez kliknięcie prawym przyciskiem myszy ikonę aplikacji i wskazujący, że chcesz uruchomić jako administrator.       Ta klasa dostarcza <xref:System.Diagnostics.EventLogTraceListener.EventLog%2A>właściwości do pobrania lub ustawienia dziennika zdarzeń, odbierająca śledzenie lub dane wyjściowe, debugowania i <xref:System.Diagnostics.EventLogTraceListener.Name%2A>Właściwości, aby pomieścić nazwę EventLogTraceListener.</xref:System.Diagnostics.EventLogTraceListener.Name%2A> </xref:System.Diagnostics.EventLogTraceListener.EventLog%2A>       <xref:System.Diagnostics.EventLogTraceListener.Close%2A>— Metoda zamknięcie dziennika zdarzeń, więc nie będzie już otrzymywać śledzenia lub dane wyjściowe debugowania.</xref:System.Diagnostics.EventLogTraceListener.Close%2A> <xref:System.Diagnostics.EventLogTraceListener.Write%2A>I <xref:System.Diagnostics.EventLogTraceListener.WriteLine%2A>metody Zapisz komunikat w dzienniku zdarzeń.</xref:System.Diagnostics.EventLogTraceListener.WriteLine%2A> </xref:System.Diagnostics.EventLogTraceListener.Write%2A>      > [!NOTE] > W celu uniknięcia możliwość zapisania dużych ilości danych w dzienniku zdarzeń, EventLogTraceListener nie danych wyjściowych danych śledzenia opcjonalne, określony przez <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>Właściwości.</xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>"
  example:
  - "The following example creates a trace listener that sends output to an event log. First, the code creates a new EventLogTraceListener that uses the source `myEventLogSource`. Next, `myTraceListener` is added to the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collection. Finally, the example sends a line of output to the <xref:System.Diagnostics.Trace.Listeners%2A> object.  \n  \n [!code-cs[Classic EventLogTraceListener Example#1](~/add/codesnippet/csharp/t-system.diagnostics.eve_3_1.cs)]\n [!code-vb[Classic EventLogTraceListener Example#1](~/add/codesnippet/visualbasic/t-system.diagnostics.eve_3_1.vb)]\n [!code-cpp[Classic EventLogTraceListener Example#1](~/add/codesnippet/cpp/t-system.diagnostics.eve_3_1.cpp)]"
  syntax:
    content: 'public sealed class EventLogTraceListener : System.Diagnostics.TraceListener'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Diagnostics.TraceListener
  implements: []
  inheritedMembers:
  - System.Diagnostics.TraceListener.Attributes
  - System.Diagnostics.TraceListener.Dispose
  - System.Diagnostics.TraceListener.Fail(System.String)
  - System.Diagnostics.TraceListener.Fail(System.String,System.String)
  - System.Diagnostics.TraceListener.Filter
  - System.Diagnostics.TraceListener.Flush
  - System.Diagnostics.TraceListener.GetSupportedAttributes
  - System.Diagnostics.TraceListener.IndentLevel
  - System.Diagnostics.TraceListener.IndentSize
  - System.Diagnostics.TraceListener.IsThreadSafe
  - System.Diagnostics.TraceListener.NeedIndent
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  - System.Diagnostics.TraceListener.TraceOutputOptions
  - System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  - System.Diagnostics.TraceListener.Write(System.Object)
  - System.Diagnostics.TraceListener.Write(System.Object,System.String)
  - System.Diagnostics.TraceListener.Write(System.String,System.String)
  - System.Diagnostics.TraceListener.WriteIndent
  - System.Diagnostics.TraceListener.WriteLine(System.Object)
  - System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
  - System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.#ctor
  id: '#ctor'
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLogTraceListener()
  nameWithType: EventLogTraceListener.EventLogTraceListener()
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener()
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;> </xref> klasy bez nasłuchującego śledzenia."
  syntax:
    content: public EventLogTraceListener ();
    parameters: []
  overload: System.Diagnostics.EventLogTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.Diagnostics.EventLog)
  id: '#ctor(System.Diagnostics.EventLog)'
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLogTraceListener(EventLog)
  nameWithType: EventLogTraceListener.EventLogTraceListener(EventLog)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(EventLog)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;> </xref> przy użyciu określonego dziennika zdarzeń."
  syntax:
    content: public EventLogTraceListener (System.Diagnostics.EventLog eventLog);
    parameters:
    - id: eventLog
      type: System.Diagnostics.EventLog
      description: "Dziennik zdarzeń do zapisu."
  overload: System.Diagnostics.EventLogTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLogTraceListener(String)
  nameWithType: EventLogTraceListener.EventLogTraceListener(String)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;> </xref> przy użyciu określonego źródła."
  syntax:
    content: public EventLogTraceListener (string source);
    parameters:
    - id: source
      type: System.String
      description: "Nazwa istniejącej źródło dziennika zdarzeń."
  overload: System.Diagnostics.EventLogTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Close
  id: Close
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Close()
  nameWithType: EventLogTraceListener.Close()
  fullName: System.Diagnostics.EventLogTraceListener.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zamyka dziennika zdarzeń, dzięki czemu nie będzie już otrzymywać dane wyjściowe śledzenia i debugowania."
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.Diagnostics.EventLogTraceListener.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: EventLogTraceListener.Dispose(Boolean)
  fullName: System.Diagnostics.EventLogTraceListener.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "Do dodania."
  overload: System.Diagnostics.EventLogTraceListener.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.EventLog
  id: EventLog
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLog
  nameWithType: EventLogTraceListener.EventLog
  fullName: System.Diagnostics.EventLogTraceListener.EventLog
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Pobiera lub ustawia dziennik zdarzeń do zapisu."
  syntax:
    content: public System.Diagnostics.EventLog EventLog { get; set; }
    return:
      type: System.Diagnostics.EventLog
      description: "Dziennik zdarzeń do zapisu."
  overload: System.Diagnostics.EventLogTraceListener.EventLog*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Name
  id: Name
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Name
  nameWithType: EventLogTraceListener.Name
  fullName: System.Diagnostics.EventLogTraceListener.Name
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Pobiera lub ustawia nazwę tego <xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;> </xref>."
  remarks: "Ta właściwość jest domyślnie nazwa źródła dziennika zdarzeń."
  syntax:
    content: public override string Name { get; set; }
    return:
      type: System.String
      description: "Nazwa tego nasłuchującego śledzenia."
  overload: System.Diagnostics.EventLogTraceListener.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje informacje o śledzeniu, obiekt danych i informacji o zdarzeniu do dziennika zdarzeń."
  remarks: "> [!IMPORTANT]> <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>Metod nie powinny być wywoływany przez kod aplikacji.</xref:System.Diagnostics.EventLogTraceListener.TraceData%2A> Są one nazywane przy użyciu metod <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, i <xref:System.Diagnostics.TraceSource>klasy dane wyjściowe śledzenia.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>Metody, takiej jak <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>— Metoda jest przeznaczona do automatycznego narzędzia, ale również umożliwia dołączanie dodatkowych obiektów, na przykład wystąpienie wyjątku, do śledzenia.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> </xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>       `eventCache` i `source` parametry są używane do ustalenia, czy zdarzenia powinny być śledzone. `id`Służy do tworzenia <xref:System.Diagnostics.EventInstance>obiektu i <xref:System.Diagnostics.TraceEventType>jest równa <xref:System.Diagnostics.EventLogEntryType>dla <xref:System.Diagnostics.EventInstance.EntryType%2A>Właściwości.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.EventInstance> <xref:System.Diagnostics.EventInstance>Są zapisywane w dzienniku zdarzeń z `data` obiektu sformatowany jako ciąg, przy użyciu <xref:System.Diagnostics.EventLog.WriteEvent%2A>metody.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance>      > [!NOTE] > Maksymalną wartość `id` parametru wynosi 65 535. Jeśli `id` jest większa niż 65 535, ale jest używana wartość maksymalna."
  syntax:
    content: public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, object data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Obiekt, który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje śledzenia stosu."
    - id: source
      type: System.String
      description: "Nazwa używana do identyfikowania dane wyjściowe; zwykle nazwa aplikacji, która wygenerowała zdarzenie śledzenia."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "Jedna z wartości wyliczenia, które określają typ zdarzenia, który spowodował śledzenia."
    - id: id
      type: System.Int32
      description: "Identyfikator numeryczny dla zdarzenia. Kombinacja `source` i `id` unikatowo identyfikuje zdarzenie."
    - id: data
      type: System.Object
      description: "Obiekt danych można zapisać do pliku wyjściowego i strumienia."
  overload: System.Diagnostics.EventLogTraceListener.TraceData*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>nie określono.       - lub - ciąg wpisu dziennika przekracza 32 766 znaków."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje śledzenia informacji, tablicę obiektów danych i informacji o zdarzeniu do dziennika zdarzeń."
  remarks: "> [!IMPORTANT]> <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>Metod nie powinny być wywoływany przez kod aplikacji.</xref:System.Diagnostics.EventLogTraceListener.TraceData%2A> Są one nazywane przy użyciu metod <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, i <xref:System.Diagnostics.TraceSource>klasy dane wyjściowe śledzenia.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>Metody, takiej jak <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>— Metoda jest przeznaczona do automatycznego narzędzia, ale również umożliwia dołączanie dodatkowych obiektów, na przykład wystąpienie wyjątku, do śledzenia.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> </xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>       `severity` i `id` danych parametru jest używany do tworzenia <xref:System.Diagnostics.EventInstance>obiektu, który jest zapisywane w dzienniku zdarzeń z danymi z tablicy obiektów danych.</xref:System.Diagnostics.EventInstance>       `eventCache` i `source` parametry są używane do ustalenia, czy zdarzenia powinny być śledzone. `id`Służy do tworzenia <xref:System.Diagnostics.EventInstance>obiektu i <xref:System.Diagnostics.TraceEventType>jest równa <xref:System.Diagnostics.EventLogEntryType>dla <xref:System.Diagnostics.EventInstance.EntryType%2A>Właściwości.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.EventInstance> <xref:System.Diagnostics.EventInstance>Są zapisywane w dzienniku zdarzeń z `data` tablicę obiektów, sformatowane w postaci tablicy ciągów, za pomocą <xref:System.Diagnostics.EventLog.WriteEvent%2A>metody.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance>      > [!NOTE] > Maksymalną wartość `id` parametru wynosi 65 535. Jeśli `id` jest większa niż 65 535, ale jest używana wartość maksymalna."
  syntax:
    content: public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, object[] data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Obiekt, który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje śledzenia stosu."
    - id: source
      type: System.String
      description: "Nazwa używana do identyfikowania dane wyjściowe; zwykle nazwa aplikacji, która wygenerowała zdarzenie śledzenia."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "Jedna z wartości wyliczenia, które określają typ zdarzenia, który spowodował śledzenia."
    - id: id
      type: System.Int32
      description: "Identyfikator numeryczny dla zdarzenia. Kombinacja `source` i `id` unikatowo identyfikuje zdarzenie."
    - id: data
      type: System.Object[]
      description: "Tablica obiektów danych."
  overload: System.Diagnostics.EventLogTraceListener.TraceData*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>nie określono.       - lub - ciąg wpisu dziennika przekracza 32 766 znaków."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje śledzenia informacji, wiadomości i informacje dotyczące zdarzenia w dzienniku zdarzeń."
  remarks: "> [!IMPORTANT]> <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>Metod nie powinny być wywoływany przez kod aplikacji.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> Te metody są wywoływane przez metody <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, i <xref:System.Diagnostics.TraceSource>klasy do zapisania danych śledzenia.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>Metoda jest przeznaczona do śledzenia zdarzeń, które mogą być przetwarzane automatycznie przez narzędzia.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> Na przykład narzędzie monitorowania można Powiadom administratora określonego zdarzenia są śledzone przez określone źródło.       `eventCache` i `source` parametry są używane do ustalenia, czy zdarzenia powinny być śledzone. `id`Służy do tworzenia <xref:System.Diagnostics.EventInstance>obiektu i <xref:System.Diagnostics.TraceEventType>jest równa <xref:System.Diagnostics.EventLogEntryType>dla <xref:System.Diagnostics.EventInstance.EntryType%2A>Właściwości.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.EventInstance> <xref:System.Diagnostics.EventInstance>Są zapisywane w dzienniku zdarzeń z `message` danych przy użyciu <xref:System.Diagnostics.EventLog.WriteEvent%2A>metody.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance>      > [!NOTE] > Maksymalną wartość `id` parametru wynosi 65 535. Jeśli `id` jest większa niż 65 535, ale jest używana wartość maksymalna."
  syntax:
    content: public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, string message);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Obiekt, który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje śledzenia stosu."
    - id: source
      type: System.String
      description: "Nazwa używana do identyfikowania dane wyjściowe; zwykle nazwa aplikacji, która wygenerowała zdarzenie śledzenia."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "Jedna z wartości wyliczenia, które określają typ zdarzenia, który spowodował śledzenia."
    - id: id
      type: System.Int32
      description: "Identyfikator numeryczny dla zdarzenia. Kombinacja `source` i `id` unikatowo identyfikuje zdarzenie."
    - id: message
      type: System.String
      description: "Komunikat śledzenia."
  overload: System.Diagnostics.EventLogTraceListener.TraceEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>nie określono.       - lub - ciąg wpisu dziennika przekracza 32 766 znaków."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje śledzenia informacji, sformatowany tablicę obiektów i informacji o zdarzeniu do dziennika zdarzeń."
  remarks: "> [!IMPORTANT]> <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>Metod nie powinny być wywoływany przez kod aplikacji.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> Te metody są wywoływane przez metody <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, i <xref:System.Diagnostics.TraceSource>klasy do zapisania danych śledzenia.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>Metoda jest przeznaczona do śledzenia zdarzeń, które mogą być przetwarzane automatycznie przez narzędzia.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> Na przykład narzędzie monitorowania można Powiadom administratora określonego zdarzenia są śledzone przez określone źródło.       `eventCache` i `source` parametry są używane do ustalenia, czy zdarzenia powinny być śledzone. `id`Służy do tworzenia <xref:System.Diagnostics.EventInstance>obiektu i <xref:System.Diagnostics.TraceEventType>jest równa <xref:System.Diagnostics.EventLogEntryType>dla <xref:System.Diagnostics.EventInstance.EntryType%2A>Właściwości.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.EventInstance> <xref:System.Diagnostics.EventInstance>Są zapisywane w dzienniku zdarzeń przy użyciu <xref:System.Diagnostics.EventLog.WriteEvent%2A>metody z komunikatem uzyskane z `format` i `args` parametrów.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance> `args` Tablicę obiektów jest konwertowana na ciąg za pomocą <xref:System.String.Format%2A>jest metoda `format` ciągu i `args` tablicy formatującej ciąg jako komunikat do dziennika zdarzeń.</xref:System.String.Format%2A>      > [!NOTE] > Maksymalną wartość `id` parametru wynosi 65 535. Jeśli `id` jest większa niż 65 535, ale jest używana wartość maksymalna."
  syntax:
    content: public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, string format, object[] args);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Obiekt, który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje śledzenia stosu."
    - id: source
      type: System.String
      description: "Nazwa używana do identyfikowania dane wyjściowe; zwykle nazwa aplikacji, która wygenerowała zdarzenie śledzenia."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "Jedna z wartości wyliczenia, które określają typ zdarzenia, który spowodował śledzenia."
    - id: id
      type: System.Int32
      description: "Identyfikator numeryczny dla zdarzenia. Kombinacja `source` i `id` unikatowo identyfikuje zdarzenie."
    - id: format
      type: System.String
      description: "Ciąg formatu, który zawiera zero lub więcej elementów formatu, które odpowiadają obiektów w `args` tablicy."
    - id: args
      type: System.Object[]
      description: "<xref uid=&quot;langword_csharp_object&quot; name=&quot;object&quot; href=&quot;&quot;> </xref> Tablicę zawierającą zero lub więcej obiektów do formatowania."
  overload: System.Diagnostics.EventLogTraceListener.TraceEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>nie określono.       - lub - ciąg wpisu dziennika przekracza 32 766 znaków."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Write(System.String)
  id: Write(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Write(String)
  nameWithType: EventLogTraceListener.Write(String)
  fullName: System.Diagnostics.EventLogTraceListener.Write(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje komunikat w dzienniku zdarzeń dla tego wystąpienia."
  syntax:
    content: public override void Write (string message);
    parameters:
    - id: message
      type: System.String
      description: "Komunikat do zapisania."
  overload: System.Diagnostics.EventLogTraceListener.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>message</code>długość przekracza 32 766 znaków."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.WriteLine(System.String)
  id: WriteLine(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: WriteLine(String)
  nameWithType: EventLogTraceListener.WriteLine(String)
  fullName: System.Diagnostics.EventLogTraceListener.WriteLine(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje komunikat w dzienniku zdarzeń dla tego wystąpienia."
  syntax:
    content: public override void WriteLine (string message);
    parameters:
    - id: message
      type: System.String
      description: "Komunikat do zapisania."
  overload: System.Diagnostics.EventLogTraceListener.WriteLine*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>message</code>długość przekracza 32 766 znaków."
  platform:
  - net462
references:
- uid: System.Diagnostics.TraceListener
  isExternal: false
  name: System.Diagnostics.TraceListener
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Diagnostics.EventLogTraceListener.#ctor
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener()
  nameWithType: EventLogTraceListener.EventLogTraceListener()
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener()
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.Diagnostics.EventLog)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener(EventLog)
  nameWithType: EventLogTraceListener.EventLogTraceListener(EventLog)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(EventLog)
- uid: System.Diagnostics.EventLog
  parent: System.Diagnostics
  isExternal: false
  name: EventLog
  nameWithType: EventLog
  fullName: System.Diagnostics.EventLog
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener(String)
  nameWithType: EventLogTraceListener.EventLogTraceListener(String)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.EventLogTraceListener.Close
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Close()
  nameWithType: EventLogTraceListener.Close()
  fullName: System.Diagnostics.EventLogTraceListener.Close()
- uid: System.Diagnostics.EventLogTraceListener.Dispose(System.Boolean)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: EventLogTraceListener.Dispose(Boolean)
  fullName: System.Diagnostics.EventLogTraceListener.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.EventLogTraceListener.EventLog
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLog
  nameWithType: EventLogTraceListener.EventLog
  fullName: System.Diagnostics.EventLogTraceListener.EventLog
- uid: System.Diagnostics.EventLogTraceListener.Name
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Name
  nameWithType: EventLogTraceListener.Name
  fullName: System.Diagnostics.EventLogTraceListener.Name
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
- uid: System.Diagnostics.TraceEventCache
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventCache
  nameWithType: TraceEventCache
  fullName: System.Diagnostics.TraceEventCache
- uid: System.Diagnostics.TraceEventType
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventType
  nameWithType: TraceEventType
  fullName: System.Diagnostics.TraceEventType
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
- uid: System.Diagnostics.EventLogTraceListener.Write(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Write(String)
  nameWithType: EventLogTraceListener.Write(String)
  fullName: System.Diagnostics.EventLogTraceListener.Write(String)
- uid: System.Diagnostics.EventLogTraceListener.WriteLine(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: WriteLine(String)
  nameWithType: EventLogTraceListener.WriteLine(String)
  fullName: System.Diagnostics.EventLogTraceListener.WriteLine(String)
- uid: System.Diagnostics.EventLogTraceListener.#ctor*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener
  nameWithType: EventLogTraceListener.EventLogTraceListener
- uid: System.Diagnostics.EventLogTraceListener.Close*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Close
  nameWithType: EventLogTraceListener.Close
- uid: System.Diagnostics.EventLogTraceListener.Dispose*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Dispose
  nameWithType: EventLogTraceListener.Dispose
- uid: System.Diagnostics.EventLogTraceListener.EventLog*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLog
  nameWithType: EventLogTraceListener.EventLog
- uid: System.Diagnostics.EventLogTraceListener.Name*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Name
  nameWithType: EventLogTraceListener.Name
- uid: System.Diagnostics.EventLogTraceListener.TraceData*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceData
  nameWithType: EventLogTraceListener.TraceData
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceEvent
  nameWithType: EventLogTraceListener.TraceEvent
- uid: System.Diagnostics.EventLogTraceListener.Write*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Write
  nameWithType: EventLogTraceListener.Write
- uid: System.Diagnostics.EventLogTraceListener.WriteLine*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: WriteLine
  nameWithType: EventLogTraceListener.WriteLine
