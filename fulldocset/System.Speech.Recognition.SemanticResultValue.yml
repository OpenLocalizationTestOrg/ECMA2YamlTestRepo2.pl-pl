### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.SemanticResultValue
  id: SemanticResultValue
  children:
  - System.Speech.Recognition.SemanticResultValue.#ctor(System.Object)
  - System.Speech.Recognition.SemanticResultValue.#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)
  - System.Speech.Recognition.SemanticResultValue.#ctor(System.String,System.Object)
  - System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder
  langs:
  - csharp
  name: SemanticResultValue
  nameWithType: SemanticResultValue
  fullName: System.Speech.Recognition.SemanticResultValue
  type: Class
  summary: "Reprezentuje wartość semantyki i opcjonalnie kojarzy wartość ze składnikiem gramatyki rozpoznawania mowy."
  remarks: "Korzystanie z SemanticResultValue i <xref:System.Speech.Recognition.SemanticResultKey>obiektów w połączeniu z <xref:System.Speech.Recognition.GrammarBuilder>i <xref:System.Speech.Recognition.Choices>jest najprostszym sposobem projekt semantycznego struktury dla <xref:System.Speech.Recognition.Grammar>.</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.Choices> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultKey> Informacje semantyczne o hasło jest dostępny, uzyskując wystąpienia <xref:System.Speech.Recognition.SemanticValue>, za pośrednictwem <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A>właściwości <xref:System.Speech.Recognition.RecognizedPhrase>.</xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> </xref:System.Speech.Recognition.SemanticValue>      > [!NOTE] > Wartości zarządzane przez obiekty SemanticResultValue <xref:System.Object>wystąpienia przekazane do ich konstruktorów.</xref:System.Object> Typ bazowy <xref:System.Object>musi być `bool`, `int`, `float`, lub `string`.</xref:System.Object> Innego typu uniemożliwi konstrukcja <xref:System.Speech.Recognition.Grammar>wystąpienia o SemanticResultValue.</xref:System.Speech.Recognition.Grammar>       Typowym zastosowaniem wystąpienia SemanticResultValue kojarzy wystąpienie z rozpoznawalnych składnik <xref:System.Speech.Recognition.Grammar>, takie jak hasło, reguły lub <xref:System.Speech.Recognition.Choices>obiektu.</xref:System.Speech.Recognition.Choices> </xref:System.Speech.Recognition.Grammar> Jeśli składnik skojarzony jest używany w ramach operacji rozpoznawania, SemanticResultValue jest używana do definiowania wartość w semantykę zwracane wyrażenie.       Istnieją dwie podstawowe metody kojarzenia wystąpienia SemanticResultValue z elementem gramatyki, w zależności od Konstruktor używany do tworzenia SemanticResultValue.      — Jeśli tylko wartość (określoną przez wystąpienie <xref:System.Object>) jest używana do konstruowania obiektu SemanticResultValue, SemanticResultValue jest skojarzony z składnik gramatyki, który poprzedzone, oprócz <xref:System.Speech.Recognition.GrammarBuilder>obiektu.</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Object>           Na przykład w fragmencie kodu poniżej, jeśli <xref:System.Speech.Recognition.Grammar>utworzone za pomocą tej <xref:System.Speech.Recognition.GrammarBuilder>wystąpienia rozpoznaje słowo &quot;tło&quot;, wartość `true` jest ustawiany w semantyki rozpoznaną frazę.</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.Grammar>          ```c#       GrammarBuilder backgroundGB=new GrammarBuilder(&quot;background&quot;);       backgroundGB.Append(new SemanticResultValue(true));       ```Aby uzyskać więcej informacji zobacz opis <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>.</xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>      — Jeśli wartość ciągu frazy lub określonych <xref:System.Speech.Recognition.GrammarBuilder>wystąpienie jest używany <xref:System.Object>, który określa wartość SemanticResultValue, że wartość jest automatycznie kojarzony z frazy wartość ciągu lub <xref:System.Speech.Recognition.GrammarBuilder>wystąpienia.</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Object> </xref:System.Speech.Recognition.GrammarBuilder>  Jeśli wyrażenie lub <xref:System.Speech.Recognition.GrammarBuilder>obiekt jest używany w procesie rozpoznawania, wartość zostanie przypisana do semantykę rozpoznaną frazę.</xref:System.Speech.Recognition.GrammarBuilder>           Poniższy przykład ilustruje to i pełni taką samą jak w poprzednim przykładzie, który używany jawnego wywołania <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>i <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>.</xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29> </xref:System.Speech.Recognition.GrammarBuilder.Append%2A> Jeśli logika rozpoznawania korzysta z programu word &quot;tło&quot;, wartość `true` zostanie dodany do rozpoznanym semantyki.          ```c#       fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(&quot;background&quot;, true));       ```Aby uzyskać więcej informacji zobacz opis <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Object%29>i <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.String%2CSystem.Object%29>.</xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.String%2CSystem.Object%29> </xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Object%29>       Na użytek <xref:System.Speech.Recognition.Grammar>rozpoznawanie, wszystkie wystąpienia SemanticResultValue musi być skojarzony z jednym z <xref:System.Speech.Recognition.SemanticValue>obiektów używany przez ten <xref:System.Speech.Recognition.Grammar>.</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.Grammar> Jest to realizowane przez skojarzenie semantyczne klucza z SemanticResultValue.       Klucze semantycznego można jawnie dołączyć do SemanticResultValue, przy użyciu <xref:System.Speech.Recognition.SemanticResultKey>obiektu.</xref:System.Speech.Recognition.SemanticResultKey>  Nie zostało dołączone do klucza wystąpienia SemanticResultValue są dołączone do klucza głównego domyślnych <xref:System.Speech.Recognition.SemanticValue>.</xref:System.Speech.Recognition.SemanticValue>       Po SemanticResultValue został użyty do ustawienia <xref:System.Speech.Recognition.SemanticValue.Value%2A>, czy zostaje ono oznakowane domyślny klucz główny lub dowolnego określonego <xref:System.Speech.Recognition.SemanticResultKey>, nie można modyfikować tej wartości lub wystąpi wyjątek podczas operacji rozpoznawania.</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticValue.Value%2A>       Poniższy przykład spowoduje wyjątek, ponieważ zestawy, a następnie modyfikuje głównego <xref:System.Speech.Recognition.SemanticValue.Value%2A> <xref:System.Speech.Recognition.Grammar>.</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.SemanticValue.Value%2A>      ```c#   GrammarBuilder gb=new GrammarBuilder();   gb.Append(new SemanticResultValue(&quot;One&quot;));   gb.Append(new SemanticResultValue(&quot;Two&quot;));   ```Z drugiej strony kod w poniższym przykładzie jest dozwolone. Mimo że definiuje wiele wystąpień SemanticResultValue są uwzględniane w <xref:System.Speech.Recognition.Choices>obiektu, a tylko jedna będzie kiedykolwiek można użyć do ustawienia wartości klucza `bgOrfgText`.</xref:System.Speech.Recognition.Choices>      ```c#   Choices fgOrbgChoice = new Choices();   fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(&quot;background&quot;));   fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(&quot;foreground&quot;));   SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey(&quot;BgOrFgText&quot;, fgOrbgChoice);   ```Aby uzyskać więcej informacji o korzystaniu z SemanticResultValue i <xref:System.Speech.Recognition.SemanticResultKey>obiekty, zobacz [SemanticResultValue zrozumienia i obiekty SemanticResultKey](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c) i [przy użyciu SemanticResultKey wyodrębnić SemanticResultValue](http://msdn.microsoft.com/en-us/198e29b8-845f-4cec-a25e-f55c0eaf46aa) w [systemu mowy Programming Guide dla programu .NET Framework 4.0](http://msdn.microsoft.com/en-us/610116c7-3817-40ff-857b-5d41e8511043).</xref:System.Speech.Recognition.SemanticResultKey>"
  example:
  - "The following example returns a <xref:System.Speech.Recognition.Grammar> that recognizes the command \"Set/Change/Alter Foreground/Background … [color list]\".  SemanticResultValue and <xref:System.Speech.Recognition.SemanticResultKey> instances (in conjunction with <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects) are used to define semantics that can be parsed on recognition.  The parsed semantics will determine which color was requested and whether the foreground or background is to be modified.  \n  \n```  \n  \nprivate Grammar FgBgColorGrammar()   \n{  \n  Grammar grammar = null;  \n  \n  // Allow the command to begin with set, alter, change.  \n  Choices introChoices = new Choices();  \n  foreach (string introString in new string[] { \"Change\", \"Set\", \"Alter\" })   \n  {  \n    GrammarBuilder introGB = new GrammarBuilder(introString);  \n    introChoices.Add(new SemanticResultValue(introGB, String.Format(\"Command: {0}\", introString)));  \n  }    \n  \n  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  \n  \n  // Define the arguments for the command to select foreground or background   \n  // and to change their color as semantic values.  \n  Choices fgOrbgChoice = new Choices();  \n  GrammarBuilder backgroundGB=new GrammarBuilder(\"background\");  \n  backgroundGB.Append(new SemanticResultValue(true));  \n  fgOrbgChoice.Add(backgroundGB);  \n  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(\"foreground\", false));  \n  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice);  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      \n    colorChoice.Add(  \n        (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  \n  }  \n  \n  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  \n  // semantic keys.  \n  GrammarBuilder cmdArgs = new GrammarBuilder();  \n  cmdArgs.Append(new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice));  \n  cmdArgs.AppendWildcard();  \n  cmdArgs.Append(new SemanticResultKey(\"colorStringList\", colorChoice));  \n  \n  GrammarBuilder cmds =   \n      GrammarBuilder.Add(  \n                       cmdIntro,  \n                       new GrammarBuilder(new SemanticResultKey(\"Cmd Args\", cmdArgs)));  \n  grammar = new Grammar(cmds);  \n  grammar.Name = \"Tree [Set,change,alter] [foreground,background] * color\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{_tag.DebugSummary}")]

      public class SemanticResultValue
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultValue.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Speech.Recognition.SemanticResultValue
  langs:
  - csharp
  name: SemanticResultValue(Object)
  nameWithType: SemanticResultValue.SemanticResultValue(Object)
  fullName: System.Speech.Recognition.SemanticResultValue.SemanticResultValue(Object)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref> , określa wartość semantyki."
  remarks: "A `SemanticResultValue` zwróconych przez ten konstruktor nie jest skojarzony z żadnym elementem określonym gramatyki. Skojarzenie musi jawnie przy użyciu wystąpienia `SemanticResultValue` w połączeniu z <xref:System.Speech.Recognition.GrammarBuilder>.</xref:System.Speech.Recognition.GrammarBuilder>       Na przykład w fragmencie kodu poniżej, jeśli <xref:System.Speech.Recognition.Grammar>utworzone za pomocą tej <xref:System.Speech.Recognition.GrammarBuilder>wystąpienia rozpoznaje słowo &quot;tło&quot;, wartość `true` jest ustawiany w semantyki rozpoznaną frazę.</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.Grammar>      ```c#   GrammarBuilder backgroundGB=new GrammarBuilder(&quot;background&quot;);   backgroundGB.Append(new SemanticResultValue(true));   ```"
  example:
  - "The following example returns a <xref:System.Speech.Recognition.Grammar> that recognizes the command \"Set/Change/Alter Foreground/Background … [color list]\". <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey> instances (in conjunction with <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects) are used to define semantics that can be parsed on recognition.  The parsed semantics will determine which color was requested and whether the foreground or background is to be modified.  \n  \n```c#  \n  \nprivate Grammar FgBgColorGrammar()   \n{  \n  Grammar grammar = null;  \n  \n  // Allow the command to begin with set, alter, change.  \n  Choices introChoices = new Choices();  \n  foreach (string introString in new string[] { \"Change\", \"Set\", \"Alter\" })   \n  {  \n    GrammarBuilder introGB = new GrammarBuilder(introString);  \n    introChoices.Add(  \n                  new SemanticResultValue(introGB,  \n                  String.Format(\"Command: {0}\", introString)));  \n  }           \n  \n  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  \n  \n  // Define the arguments for the command to select foreground or background   \n  // and to change their color as semantic values.  \n  Choices fgOrbgChoice = new Choices();  \n  GrammarBuilder backgroundGB=new GrammarBuilder(\"background\");  \n  backgroundGB.Append(new SemanticResultValue(true));  \n  fgOrbgChoice.Add(backgroundGB);  \n  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(\"foreground\", false));  \n  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice);  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      \n    colorChoice.Add(  \n                 (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  \n  }  \n  \n  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  \n  // semantic keys.  \n  GrammarBuilder cmdArgs = new GrammarBuilder();  \n  cmdArgs.Append(new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice));  \n  cmdArgs.AppendWildcard();  \n  cmdArgs.Append(new SemanticResultKey(\"colorStringList\", colorChoice));  \n  \n  GrammarBuilder cmds =   \n      GrammarBuilder.Add(  \n        cmdIntro,   \n        new GrammarBuilder(new SemanticResultKey(\"Cmd Args\", cmdArgs)));  \n  grammar = new Grammar(cmds);  \n  grammar.Name = \"Tree [Set,change,alter] [foreground,background] * color\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public SemanticResultValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Wartość zarządza <xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref>. Must be of type <xref uid=&quot;langword_csharp_bool&quot; name=&quot;bool&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_int&quot; name=&quot;int&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_float&quot; name=&quot;float&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;></xref>."
  overload: System.Speech.Recognition.SemanticResultValue.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultValue.#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)
  id: '#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)'
  parent: System.Speech.Recognition.SemanticResultValue
  langs:
  - csharp
  name: SemanticResultValue(GrammarBuilder,Object)
  nameWithType: SemanticResultValue.SemanticResultValue(GrammarBuilder,Object)
  fullName: System.Speech.Recognition.SemanticResultValue.SemanticResultValue(GrammarBuilder,Object)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref> klasy i kojarzy wartość semantyki z <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> obiektu."
  remarks: "Jeśli określony element gramatyki przez <xref:System.Speech.Recognition.GrammarBuilder>jest używany w logice rozpoznawania `value` zostaną ustawione w semantykę rozpoznanym danych wyjściowych.</xref:System.Speech.Recognition.GrammarBuilder>       W fragmencie kodu poniżej, jeśli logiki rozpoznawania skonstruowany przy <xref:System.Speech.Recognition.GrammarBuilder>wystąpienia (`myGb`) używa <xref:System.Speech.Recognition.Choices>obiektu (`myChoice`) do identyfikowania danych wejściowych, wartość `true` jest dodawany do rozpoznanym semantyki.</xref:System.Speech.Recognition.Choices> </xref:System.Speech.Recognition.GrammarBuilder>      ```c#   myGb.Append(new SemanticResultValue(myChoice, true);   ```Jako <xref:System.Speech.Recognition.GrammarBuilder>obsługuje niejawna konwersja dla <xref:System.Speech.Recognition.Choices>, `SemanticResultValue`, i <xref:System.Speech.Recognition.SemanticResultKey>, ten konstruktor służy również do tych obiektów.</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices> </xref:System.Speech.Recognition.GrammarBuilder>"
  example:
  - "The following example returns a <xref:System.Speech.Recognition.Grammar> that recognizes the command \"Set/Change/Alter Foreground/Background … [color list]\". <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey> instances (in conjunction with <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects) are used to define semantics that can be parsed on recognition.  The parsed semantics will determine which color was requested and whether the foreground or background is to be modified.  \n  \n```c#  \n  \nprivate Grammar FgBgColorGrammar()   \n{  \n  Grammar grammar = null;  \n  \n  // Allow the command to begin with set, alter, change.  \n  Choices introChoices = new Choices();  \n  foreach (string introString in new string[] { \"Change\", \"Set\", \"Alter\" })   \n  {  \n    GrammarBuilder introGB = new GrammarBuilder(introString);  \n    introChoices.Add(  \n                  new SemanticResultValue(introGB,  \n                  String.Format(\"Command: {0}\", introString)));  \n  }           \n  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  \n  \n  // Define the arguments for the command to select foreground or background   \n  // and to change their color as semantic values.  \n  Choices fgOrbgChoice = new Choices();  \n  GrammarBuilder backgroundGB=new GrammarBuilder(\"background\");  \n  backgroundGB.Append(new SemanticResultValue(true));  \n  fgOrbgChoice.Add(backgroundGB);  \n  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(\"foreground\", false));  \n  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice);  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      \n    colorChoice.Add(  \n              (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  \n    }  \n  \n  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  \n  // semantic keys.  \n  GrammarBuilder cmdArgs = new GrammarBuilder();  \n  cmdArgs.Append(new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice));  \n  cmdArgs.AppendWildcard();  \n  cmdArgs.Append(new SemanticResultKey(\"colorStringList\", colorChoice));  \n  \n  GrammarBuilder cmds =   \n      GrammarBuilder.Add(  \n                      cmdIntro,  \n                      new GrammarBuilder(new SemanticResultKey(\"Cmd Args\", cmdArgs)));  \n  grammar = new Grammar(cmds);  \n  grammar.Name = \"Tree [Set,change,alter] [foreground,background] * color\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public SemanticResultValue (System.Speech.Recognition.GrammarBuilder builder, object value);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "Składnik gramatyki ma być używany podczas rozpoznawania."
    - id: value
      type: System.Object
      description: "Wartość zarządza <xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref>. Must be of type <xref uid=&quot;langword_csharp_bool&quot; name=&quot;bool&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_int&quot; name=&quot;int&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_float&quot; name=&quot;float&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;></xref>."
  overload: System.Speech.Recognition.SemanticResultValue.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultValue.#ctor(System.String,System.Object)
  id: '#ctor(System.String,System.Object)'
  parent: System.Speech.Recognition.SemanticResultValue
  langs:
  - csharp
  name: SemanticResultValue(String,Object)
  nameWithType: SemanticResultValue.SemanticResultValue(String,Object)
  fullName: System.Speech.Recognition.SemanticResultValue.SemanticResultValue(String,Object)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref> klasy i kojarzy wartość semantyki z <xref:System.String>obiektu.</xref:System.String>"
  remarks: "Jeśli ciąg określony przez `phrase` jest używany w logice rozpoznawania `value` zostaną ustawione w semantykę rozpoznanym danych wyjściowych.       W poniższy fragment kodu, jeśli logiki rozpoznawania skonstruowany przy <xref:System.Speech.Recognition.GrammarBuilder>wystąpienia (`myGb`) ciąg &quot;Moje hipoteczne&quot; do identyfikowania danych wejściowych, wartość `true` zostanie dodany do rozpoznanym semantyki.</xref:System.Speech.Recognition.GrammarBuilder>      ```c#   myGb.Append(new SemanticResultValue(&quot;my mortgage&quot;, true);   ```"
  example:
  - "The following example returns a <xref:System.Speech.Recognition.Grammar> that recognizes the command \"Set/Change/Alter Foreground/Background … [color list]\". <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey> instances (in conjunction with <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects) are used to define semantics that can be parsed on recognition.  The parsed semantics will determine which color was requested and whether the foreground or background is to be modified.  \n  \n```  \nprivate Grammar FgBgColorGrammar()   \n{  \n  Grammar grammar = null;  \n  \n  // Allow command to begin with set, alter, change.  \n  Choices introChoices = new Choices();  \n  foreach (string introString in new string[] { \"Change\", \"Set\", \"Alter\" })   \n  {  \n    GrammarBuilder introGB = new GrammarBuilder(introString);  \n    introChoices.Add(  \n                  new SemanticResultValue(introGB,  \n                  String.Format(\"Command: {0}\", introString)));  \n  }  \n  \n  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  \n  \n  // Define the arguments for the command to select foreground or background   \n  // and to change their color as semantic values.  \n  Choices fgOrbgChoice = new Choices();  \n  GrammarBuilder backgroundGB=new GrammarBuilder(\"background\");  \n  backgroundGB.Append(new SemanticResultValue(true));  \n  fgOrbgChoice.Add(backgroundGB);  \n  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(\"foreground\", false));  \n  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice);  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      \n    colorChoice.Add(  \n          (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  \n  }  \n  \n  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  \n  // semantic keys.  \n  GrammarBuilder cmdArgs = new GrammarBuilder();  \n  cmdArgs.Append(new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice));  \n  cmdArgs.AppendWildcard();  \n  cmdArgs.Append(new SemanticResultKey(\"colorStringList\", colorChoice));  \n  \n  GrammarBuilder cmds =   \n      GrammarBuilder.Add(cmdIntro,  \n                         new GrammarBuilder(new SemanticResultKey(\"Cmd Args\", cmdArgs)));  \n  grammar = new Grammar(cmds);  \n  grammar.Name = \"Tree [Set,change,alter] [foreground,background] * color\";  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: public SemanticResultValue (string phrase, object value);
    parameters:
    - id: phrase
      type: System.String
      description: "Wyrażenie ma być używany podczas rozpoznawania."
    - id: value
      type: System.Object
      description: "Wartość zarządza <xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref>. Must be of type <xref uid=&quot;langword_csharp_bool&quot; name=&quot;bool&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_int&quot; name=&quot;int&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_float&quot; name=&quot;float&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;></xref>."
  overload: System.Speech.Recognition.SemanticResultValue.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder
  id: ToGrammarBuilder
  parent: System.Speech.Recognition.SemanticResultValue
  langs:
  - csharp
  name: ToGrammarBuilder()
  nameWithType: SemanticResultValue.ToGrammarBuilder()
  fullName: System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Zwraca wystąpienie klasy <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> utworzone na podstawie bieżącego <xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref> wystąpienia."
  remarks: "Korzystanie z ToGrammarBuilder jest odpowiednikiem przy użyciu <xref:System.Speech.Recognition.GrammarBuilder>konstruktora przyjmującego <xref:System.Speech.Recognition.SemanticResultValue>jako argument (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29>).</xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder>"
  example:
  - "The following example creates <xref:System.Speech.Recognition.Grammar> objects that support commands to change the background color.  \n  \n A <xref:System.Speech.Recognition.Choices> object (`colorChoice`) containing the list of options for background colors is filled using the [Add(GrammarBuilder\\[\\])](assetId:///M:System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])?qualifyHint=False&autoUpgrade=False) method with <xref:System.Speech.Recognition.GrammarBuilder> instances that are obtained from the <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> method on the `SemanticResultValue` objects created from color strings.  \n  \n A <xref:System.Speech.Recognition.GrammarBuilder> is then obtained by calling <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> on a <xref:System.Speech.Recognition.SemanticResultKey> instance, which will be used to key the semantic choices in the `colorChoice` instance.  \n  \n```c#  \n  \nprivate Grammar CreateGrammarBuilderRGBSemantics()   \n{  \n  \n  // Create a set of choices, each a lookup from a color name to RBG.  \n  // Choices constructors do not take a SemanticResultValue parameter, so  \n  // cast SemanticResultValue to GrammarBuilder.  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      \n    SemanticResultValue colorValue =   \n        new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  \n    colorChoice.Add(colorValue.ToGrammarBuilder());  \n  }  \n  \n  SemanticResultKey choiceKey = new SemanticResultKey(\"rgb\", colorChoice);  \n  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  \n  \n  // Create two intermediate grammars with an introductory phrase and the  \n  // color choice.  \n  GrammarBuilder makeBackgroundBuilder = \"Make background\";  \n  makeBackgroundBuilder.Append(choiceBuilder);  \n  \n  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder(\"Configure background as\");  \n  configureBackgroundBuilder.Append((new SemanticResultKey(\"rgb\", colorChoice)).ToGrammarBuilder());  \n  \n  // Create the final grammar, which recognizes either intermediate grammar.  \n  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] { makeBackgroundBuilder, configureBackgroundBuilder }));  \n  grammar.Name = \"Set Background Color\";  \n  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();
    parameters: []
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "Zwraca wystąpienie klasy <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> utworzone na podstawie bieżącego <xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref> wystąpienia."
  overload: System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.SemanticResultValue.#ctor(System.Object)
  parent: System.Speech.Recognition.SemanticResultValue
  isExternal: false
  name: SemanticResultValue(Object)
  nameWithType: SemanticResultValue.SemanticResultValue(Object)
  fullName: System.Speech.Recognition.SemanticResultValue.SemanticResultValue(Object)
- uid: System.Speech.Recognition.SemanticResultValue.#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)
  parent: System.Speech.Recognition.SemanticResultValue
  isExternal: false
  name: SemanticResultValue(GrammarBuilder,Object)
  nameWithType: SemanticResultValue.SemanticResultValue(GrammarBuilder,Object)
  fullName: System.Speech.Recognition.SemanticResultValue.SemanticResultValue(GrammarBuilder,Object)
- uid: System.Speech.Recognition.GrammarBuilder
  parent: System.Speech.Recognition
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder
- uid: System.Speech.Recognition.SemanticResultValue.#ctor(System.String,System.Object)
  parent: System.Speech.Recognition.SemanticResultValue
  isExternal: false
  name: SemanticResultValue(String,Object)
  nameWithType: SemanticResultValue.SemanticResultValue(String,Object)
  fullName: System.Speech.Recognition.SemanticResultValue.SemanticResultValue(String,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder
  parent: System.Speech.Recognition.SemanticResultValue
  isExternal: false
  name: ToGrammarBuilder()
  nameWithType: SemanticResultValue.ToGrammarBuilder()
  fullName: System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder()
- uid: System.Speech.Recognition.SemanticResultValue.#ctor*
  parent: System.Speech.Recognition.SemanticResultValue
  isExternal: false
  name: SemanticResultValue
  nameWithType: SemanticResultValue.SemanticResultValue
- uid: System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder*
  parent: System.Speech.Recognition.SemanticResultValue
  isExternal: false
  name: ToGrammarBuilder
  nameWithType: SemanticResultValue.ToGrammarBuilder
