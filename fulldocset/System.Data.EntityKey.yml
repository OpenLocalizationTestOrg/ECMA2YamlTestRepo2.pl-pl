### YamlMime:ManagedReference
items:
- uid: System.Data.EntityKey
  id: EntityKey
  children:
  - System.Data.EntityKey.#ctor
  - System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  - System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})
  - System.Data.EntityKey.#ctor(System.String,System.String,System.Object)
  - System.Data.EntityKey.EntityContainerName
  - System.Data.EntityKey.EntityKeyValues
  - System.Data.EntityKey.EntityNotValidKey
  - System.Data.EntityKey.EntitySetName
  - System.Data.EntityKey.Equals(System.Data.EntityKey)
  - System.Data.EntityKey.Equals(System.Object)
  - System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)
  - System.Data.EntityKey.GetHashCode
  - System.Data.EntityKey.IsTemporary
  - System.Data.EntityKey.NoEntitySetKey
  - System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)
  - System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)
  - System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)
  - System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)
  langs:
  - csharp
  name: EntityKey
  nameWithType: EntityKey
  fullName: System.Data.EntityKey
  type: Class
  summary: "Udostępnia trwałe odwołanie do obiektu, który jest wystąpieniem typu jednostki."
  remarks: "Obiekt EntityKey są niezmienne; oznacza to, że po one nie można ich modyfikować.       Aby uzyskać więcej informacji, zobacz [Praca z kluczy jednostek](http://msdn.microsoft.com/en-us/fe3f4206-d277-43a1-a72f-4e86fdf12b9f)."
  example:
  - "These examples are based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The examples show you how to create and use an EntityKey.  \n  \n [!code-vb[DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#entitykeyclass_trygetobjectbykey)]\n [!code-cs[DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#entitykeyclass_trygetobjectbykey)]  \n  \n [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#addobjectusingkey)]\n [!code-cs[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#addobjectusingkey)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{ConcatKeyValue()}")]

      [System.Runtime.Serialization.DataContract(IsReference=true)]

      public sealed class EntityKey : IEquatable<System.Data.EntityKey>
  inheritance:
  - System.Object
  implements:
  - System.IEquatable<System.Data.EntityKey>
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.EntityKey.#ctor
  id: '#ctor'
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKey()
  nameWithType: EntityKey.EntityKey()
  fullName: System.Data.EntityKey.EntityKey()
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Data.EntityKey&quot;> </xref> klasy."
  syntax:
    content: public EntityKey ();
    parameters: []
  overload: System.Data.EntityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  id: '#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})'
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  nameWithType: EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Data.EntityKey&quot;> </xref> z nazwy zestawu jednostek i rodzajowy <xref:System.Collections.Generic.KeyValuePair>kolekcji.</xref:System.Collections.Generic.KeyValuePair>"
  remarks: ''
  example:
  - "This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example shows you how to create and use an <xref:System.Data.EntityKey>.  \n  \n [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#addobjectusingkey)]\n [!code-cs[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#addobjectusingkey)]"
  syntax:
    content: public EntityKey (string qualifiedEntitySetName, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,object>> entityKeyValues);
    parameters:
    - id: qualifiedEntitySetName
      type: System.String
      description: "A <xref:System.String>to nazwa zestawu jednostek kwalifikowana przez nazwę kontenera jednostek.</xref:System.String>"
    - id: entityKeyValues
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
      description: "Element ogólny <xref:System.Collections.Generic.KeyValuePair>kolekcji.</xref:System.Collections.Generic.KeyValuePair>       Każdej pary klucz wartość zawiera nazwę właściwości jako klucz i wartość tej właściwości, jako wartość. Powinien istnieć jedna para dla każdej właściwości, która jest częścią <xref href=&quot;System.Data.EntityKey&quot;> </xref>. Kolejność pary klucz wartość nie jest ważna, ale każda właściwość klucza mają zostać uwzględnione. Nazwy właściwości to proste nazwy, które nie jest kwalifikowany za pomocą nazwy typu jednostki lub nazwy schematu."
  overload: System.Data.EntityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})
  id: '#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})'
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKey(String,IEnumerable<EntityKeyMember>)
  nameWithType: EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)
  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Data.EntityKey&quot;> </xref> klasy o nazwie zestawu jednostek i &lt;xref:System.Collections.Generic.IEnumerable%601&gt; Kolekcja <xref href=&quot;System.Data.EntityKeyMember&quot;> </xref> obiektów."
  syntax:
    content: public EntityKey (string qualifiedEntitySetName, System.Collections.Generic.IEnumerable<System.Data.EntityKeyMember> entityKeyValues);
    parameters:
    - id: qualifiedEntitySetName
      type: System.String
      description: "A <xref:System.String>to nazwa zestawu jednostek kwalifikowana przez nazwę kontenera jednostek.</xref:System.String>"
    - id: entityKeyValues
      type: System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember}
      description: "&lt;Xref:System.Collections.Generic.IEnumerable%601&gt; Kolekcja <xref href=&quot;System.Data.EntityKeyMember&quot;> </xref> obiektów, z którą ma zostać zainicjować klucza."
  overload: System.Data.EntityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.#ctor(System.String,System.String,System.Object)
  id: '#ctor(System.String,System.String,System.Object)'
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKey(String,String,Object)
  nameWithType: EntityKey.EntityKey(String,String,Object)
  fullName: System.Data.EntityKey.EntityKey(String,String,Object)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Data.EntityKey&quot;> </xref> z nazwy zestawu jednostek i jednostki określone pary kluczy."
  remarks: ''
  example:
  - "This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example shows you how to create and use an <xref:System.Data.EntityKey>.  \n  \n [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#addobjectusingkey)]\n [!code-cs[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#addobjectusingkey)]"
  syntax:
    content: public EntityKey (string qualifiedEntitySetName, string keyName, object keyValue);
    parameters:
    - id: qualifiedEntitySetName
      type: System.String
      description: "A <xref:System.String>to nazwa zestawu jednostek kwalifikowana przez nazwę kontenera jednostek.</xref:System.String>"
    - id: keyName
      type: System.String
      description: "A <xref:System.String>czyli nazwę klucza.</xref:System.String>"
    - id: keyValue
      type: System.Object
      description: "<xref:System.Object>Czyli wartość klucza.</xref:System.Object>"
  overload: System.Data.EntityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.EntityContainerName
  id: EntityContainerName
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityContainerName
  nameWithType: EntityKey.EntityContainerName
  fullName: System.Data.EntityKey.EntityContainerName
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Pobiera lub ustawia nazwę kontenera jednostek."
  syntax:
    content: public string EntityContainerName { get; set; }
    return:
      type: System.String
      description: "A <xref:System.String>wartość, która jest nazwa kontenera jednostek dla obiekt, do którego <xref href=&quot;System.Data.EntityKey&quot;> </xref> należy.</xref:System.String>"
  overload: System.Data.EntityKey.EntityContainerName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.EntityKeyValues
  id: EntityKeyValues
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKeyValues
  nameWithType: EntityKey.EntityKeyValues
  fullName: System.Data.EntityKey.EntityKeyValues
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Pobiera lub ustawia wartości klucza skojarzony z tym <xref href=&quot;System.Data.EntityKey&quot;> </xref>."
  remarks: "<xref:System.Data.EntityKey>Klasa zawiera kopię wartości, które tworzą logicznej klucz, który został określony dla tego typu jednostki.</xref:System.Data.EntityKey>       Elementy członkowskie <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>mieć nazwę właściwości i wartość w <xref:System.Collections.Generic.KeyValuePair%602>, gdy klucz jest nazwą właściwości i wartość jest wartością rzeczywistą tej właściwości w obiekcie.</xref:System.Collections.Generic.KeyValuePair%602> </xref:System.Collections.ObjectModel.ReadOnlyCollection%601>"
  syntax:
    content: public System.Data.EntityKeyMember[] EntityKeyValues { get; set; }
    return:
      type: System.Data.EntityKeyMember[]
      description: "A &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; wartości kluczy dla tego <xref href=&quot;System.Data.EntityKey&quot;> </xref>."
  overload: System.Data.EntityKey.EntityKeyValues*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.EntityNotValidKey
  id: EntityNotValidKey
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityNotValidKey
  nameWithType: EntityKey.EntityNotValidKey
  fullName: System.Data.EntityKey.EntityNotValidKey
  type: Field
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Prosty <xref href=&quot;System.Data.EntityKey&quot;> </xref> identyfikowania jednostki, która jest wynikiem nieudanej [TRAKTUJ](~/add/includes/ajax-current-ext-md.md) operacji."
  remarks: "Istnieją różne sposoby pobieranie nieprawidłowe jednostki. Najbardziej typowym scenariuszem jest, gdy [!INCLUDE[esql](~/add/includes/ajax-current-ext-md.md)] zapytanie używa [TRAKTUJ](../Topic/TREAT%20\\(Entity%20SQL\\).md) operatora, aby zinterpretować wystąpienia typu polimorficznych jako określonego typu i danego wystąpienia nie pasuje. ([TRAKTUJ](../Topic/TREAT%20\\(Entity%20SQL\\).md) jest podobny do języka C# `as` operatora). W takim przypadku zapytanie zwraca jednostki, która nie jest prawidłowy, a klucz jednostki wynikowy ma ustawioną wartość EntityNotValidKey."
  syntax:
    content: public static readonly System.Data.EntityKey EntityNotValidKey;
    return:
      type: System.Data.EntityKey
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.EntitySetName
  id: EntitySetName
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntitySetName
  nameWithType: EntityKey.EntitySetName
  fullName: System.Data.EntityKey.EntitySetName
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Pobiera lub ustawia nazwę zestawu jednostek."
  syntax:
    content: public string EntitySetName { get; set; }
    return:
      type: System.String
      description: "A <xref:System.String>wartość, która jest nazwą jednostki ustawioną dla jednostki którego <xref href=&quot;System.Data.EntityKey&quot;> </xref> należy.</xref:System.String>"
  overload: System.Data.EntityKey.EntitySetName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.Equals(System.Data.EntityKey)
  id: Equals(System.Data.EntityKey)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: Equals(EntityKey)
  nameWithType: EntityKey.Equals(EntityKey)
  fullName: System.Data.EntityKey.Equals(EntityKey)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Zwraca wartość wskazującą, czy to wystąpienie jest równe określonej <xref href=&quot;System.Data.EntityKey&quot;> </xref>."
  remarks: "Klucze tymczasowe ma semantykę porównania inny niż stały klucze:-klucze tymczasowe używają równości odwołań. Oznacza to, że dwa odwołuje się do dokładnie takie same tymczasowego <xref:System.Data.EntityKey>wystąpienia są takie same, ale żaden inny <xref:System.Data.EntityKey>wystąpienia są takie same.</xref:System.Data.EntityKey> </xref:System.Data.EntityKey>      — Klucze stałe określenie na podstawie wartości zawartych w niej właściwości klucza i <xref:System.Data.Metadata.Edm.EntitySet>.</xref:System.Data.Metadata.Edm.EntitySet> równości Oznacza to, że masz dwie oddzielne <xref:System.Data.EntityKey>wystąpień, które są równe, jeśli ich zestawów jednostek są takie same i ich wartości klucza są takie same.</xref:System.Data.EntityKey>       Ponadto klucze tymczasowe ma nie <xref:System.Data.Metadata.Edm.EntitySet>lub wartości klucza, ale wykonania stałe kluczy.</xref:System.Data.Metadata.Edm.EntitySet>"
  syntax:
    content: public bool Equals (System.Data.EntityKey other);
    parameters:
    - id: other
      type: System.Data.EntityKey
      description: "<xref href=&quot;System.Data.EntityKey&quot;> </xref> Obiekt do porównania z tym wystąpieniem."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli to wystąpienie i <code> other </code> mają takie same wartości; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.EntityKey.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: EntityKey.Equals(Object)
  fullName: System.Data.EntityKey.Equals(Object)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Zwraca wartość wskazującą, czy to wystąpienie jest taki sam jak określony obiekt."
  remarks: "Klucze tymczasowe ma semantykę porównania inny niż stały klucze:-klucze tymczasowe używają równości odwołań. Oznacza to, że dwa odwołuje się do dokładnie takie same tymczasowego <xref:System.Data.EntityKey>wystąpienia są takie same, ale żaden inny <xref:System.Data.EntityKey>wystąpienia są takie same.</xref:System.Data.EntityKey> </xref:System.Data.EntityKey>      — Klucze stałe określenie na podstawie wartości zawartych w niej właściwości klucza i <xref:System.Data.Metadata.Edm.EntitySet>.</xref:System.Data.Metadata.Edm.EntitySet> równości Oznacza to, że masz dwie oddzielne <xref:System.Data.EntityKey>wystąpień, które są równe, jeśli ich <xref:System.Data.Metadata.Edm.EntitySet>obiekty są takie same i ich wartości klucza są takie same.</xref:System.Data.Metadata.Edm.EntitySet> </xref:System.Data.EntityKey>       Ponadto klucze tymczasowe ma nie <xref:System.Data.Metadata.Edm.EntitySet>lub wartości klucza, ale wykonania stałe kluczy.</xref:System.Data.Metadata.Edm.EntitySet>"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "<xref:System.Object>Do porównania z tym wystąpieniem.</xref:System.Object>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli to wystąpienie i <code> obj </code> mają takie same wartości; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.EntityKey.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)
  id: GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: GetEntitySet(MetadataWorkspace)
  nameWithType: EntityKey.GetEntitySet(MetadataWorkspace)
  fullName: System.Data.EntityKey.GetEntitySet(MetadataWorkspace)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Pobiera zestaw jednostek dla tego klucza jednostki z obszaru roboczego metadanych."
  remarks: "Zestaw jednostek jest dostępny na podstawie nazwy kontenera jednostek i nazwę klucza zestawu jednostek."
  syntax:
    content: public System.Data.Metadata.Edm.EntitySet GetEntitySet (System.Data.Metadata.Edm.MetadataWorkspace metadataWorkspace);
    parameters:
    - id: metadataWorkspace
      type: System.Data.Metadata.Edm.MetadataWorkspace
      description: "Obszar roboczy metadanych, który zawiera jednostki."
    return:
      type: System.Data.Metadata.Edm.EntitySet
      description: "<xref href=&quot;System.Data.Metadata.Edm.EntitySet&quot;> </xref> Klucza jednostki."
  overload: System.Data.EntityKey.GetEntitySet*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Nie można zlokalizować zestawu jednostek w obszarze roboczym określonych metadanych."
  platform:
  - net462
- uid: System.Data.EntityKey.GetHashCode
  id: GetHashCode
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: EntityKey.GetHashCode()
  fullName: System.Data.EntityKey.GetHashCode()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Pełni rolę funkcji skrótu dla bieżącego <xref href=&quot;System.Data.EntityKey&quot;> </xref> obiektu. GetHashCode nadaje się do tworzenia skrótów algorytmów i struktury danych, takich jak tablicy skrótów."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Wartość skrótu dla bieżącego <xref href=&quot;System.Data.EntityKey&quot;> </xref>."
  overload: System.Data.EntityKey.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.IsTemporary
  id: IsTemporary
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: IsTemporary
  nameWithType: EntityKey.IsTemporary
  fullName: System.Data.EntityKey.IsTemporary
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Pobiera wartość wskazującą, czy <xref href=&quot;System.Data.EntityKey&quot;> </xref> jest tymczasowe."
  remarks: "Po utworzeniu nowego obiektu [!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)] definiuje klucza tymczasowego i ustawia właściwość IsTemporary `true`. Podczas wywoływania <xref:System.Data.Objects.ObjectContext.SaveChanges%2A>metody [!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)] przypisuje stałe klucza i ustawia właściwość IsTemporary `false`.</xref:System.Data.Objects.ObjectContext.SaveChanges%2A>      > [!NOTE] > Klucze tymczasowe są automatycznie utworzone przez platformę; nie można skonstruować bezpośrednio przez użytkownika.       Klucze tymczasowe ma semantykę porównania inny niż stały klucze:-klucze tymczasowe używają równości odwołań. Oznacza to, że dwa odwołuje się do dokładnie takie same tymczasowego <xref:System.Data.EntityKey>wystąpienia są takie same, ale żaden inny <xref:System.Data.EntityKey>wystąpienia są takie same.</xref:System.Data.EntityKey> </xref:System.Data.EntityKey>      — Klucze stałe określenie na podstawie wartości zawartych w niej właściwości klucza i <xref:System.Data.Metadata.Edm.EntitySet>.</xref:System.Data.Metadata.Edm.EntitySet> równości Oznacza to, że masz dwie oddzielne <xref:System.Data.EntityKey>wystąpień, które są równe, jeśli ich zestawów jednostek są takie same i ich wartości klucza są takie same.</xref:System.Data.EntityKey>       Ponadto klucze tymczasowe ma nie <xref:System.Data.Metadata.Edm.EntitySet>lub wartości klucza, ale wykonania stałe kluczy.</xref:System.Data.Metadata.Edm.EntitySet>       Gdy <xref:System.Data.Objects.ObjectStateEntry.AcceptChanges%2A>Metoda jest wywoływana z jednostką <xref:System.Data.Objects.ObjectStateEntry>i przejścia jednostki z <xref:System.Data.EntityState>Stan <xref:System.Data.EntityState>stanu, [!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)] automatycznie oblicza nowy klucz stałe dla jednostki i synchronizuje wszystkie odwołania klucza tymczasowego.</xref:System.Data.EntityState> </xref:System.Data.EntityState> </xref:System.Data.Objects.ObjectStateEntry> </xref:System.Data.Objects.ObjectStateEntry.AcceptChanges%2A>"
  syntax:
    content: public bool IsTemporary { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli <xref href=&quot;System.Data.EntityKey&quot;> </xref> tymczasowe, a w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.EntityKey.IsTemporary*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.NoEntitySetKey
  id: NoEntitySetKey
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: NoEntitySetKey
  nameWithType: EntityKey.NoEntitySetKey
  fullName: System.Data.EntityKey.NoEntitySetKey
  type: Field
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Pojedyncza <xref href=&quot;System.Data.EntityKey&quot;> </xref> przez zostanie zidentyfikowana jako jednostka tylko do odczytu."
  remarks: "Jednostka tylko do odczytu identyfikuje jednostki, która jest prawidłowa w każdym sposób, z tą różnicą, że nie jest skojarzony z zestawu jednostek rzeczywistych. Taka sytuacja może wystąpić w ramach wyniku [!INCLUDE[esql](~/add/includes/ajax-current-ext-md.md)] zapytanie, które tworzy i zwraca wystąpienie jednostki określone w tekście zapytania (w przeciwieństwie do jednostki, która nie została pobrana z tabeli bazy danych). Nie może zostać utrwalona jednostki, która nie ma zestawu jednostek do bazy danych, dopóki nie jest skojarzony z niektórych zestawu jednostek. W związku z tym materializer obiektu będzie traktować tego typu jednostki tak, jakby <xref:System.Data.Objects.MergeOption>określono opcję scalania, niezależnie od opcji scalania rzeczywista, która została określona.</xref:System.Data.Objects.MergeOption> Do obiektu jednostki zostanie utworzony, ale jego tożsamość nie będą rozpoznawane i go nie zostanie dodany do menedżera stanu jako część procesu materialization."
  syntax:
    content: public static readonly System.Data.EntityKey NoEntitySetKey;
    return:
      type: System.Data.EntityKey
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)
  id: OnDeserialized(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: OnDeserialized(StreamingContext)
  nameWithType: EntityKey.OnDeserialized(StreamingContext)
  fullName: System.Data.EntityKey.OnDeserialized(StreamingContext)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Metoda pomocnika, który służy do deserializacji <xref href=&quot;System.Data.EntityKey&quot;> </xref>."
  remarks: "OnDeserialized jest używany przez usługi obiektu po deserializacji <xref:System.Data.EntityKey>.</xref:System.Data.EntityKey> Aby uzyskać więcej informacji, zobacz [serializacji obiektów](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99)."
  syntax:
    content: public void OnDeserialized (System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Opisuje źródłowa i docelowa danego serializowanym strumieniu i zawiera dodatkowy kontekst zdefiniowane przez obiekt wywołujący."
  overload: System.Data.EntityKey.OnDeserialized*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)
  id: OnDeserializing(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: OnDeserializing(StreamingContext)
  nameWithType: EntityKey.OnDeserializing(StreamingContext)
  fullName: System.Data.EntityKey.OnDeserializing(StreamingContext)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Metoda pomocnika, który służy do deserializacji <xref href=&quot;System.Data.EntityKey&quot;> </xref>."
  remarks: "OnDeserializing jest używany przez usługi obiektu po deserializacji <xref:System.Data.EntityKey>.</xref:System.Data.EntityKey> Aby uzyskać więcej informacji, zobacz [serializacji obiektów](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99)."
  syntax:
    content: public void OnDeserializing (System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Opisuje źródłowa i docelowa danego serializowanym strumieniu i zawiera dodatkowy kontekst zdefiniowane przez obiekt wywołujący."
  overload: System.Data.EntityKey.OnDeserializing*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)
  id: op_Equality(System.Data.EntityKey,System.Data.EntityKey)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: op_Equality(EntityKey,EntityKey)
  nameWithType: EntityKey.op_Equality(EntityKey,EntityKey)
  fullName: System.Data.EntityKey.op_Equality(EntityKey,EntityKey)
  type: Operator
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Porównuje dwa <xref href=&quot;System.Data.EntityKey&quot;> </xref> obiektów."
  remarks: "Klucze tymczasowe ma semantykę porównania inny niż stały klucze:-klucze tymczasowe używają równości odwołań. Oznacza to, że dwa odwołuje się do dokładnie takie same tymczasowego <xref:System.Data.EntityKey>wystąpienia są takie same, ale żaden inny <xref:System.Data.EntityKey>wystąpienia są takie same.</xref:System.Data.EntityKey> </xref:System.Data.EntityKey>      — Klucze stałe określenie na podstawie wartości zawartych w niej właściwości klucza i <xref:System.Data.Metadata.Edm.EntitySet>.</xref:System.Data.Metadata.Edm.EntitySet> równości Oznacza to, że masz dwie oddzielne <xref:System.Data.EntityKey>wystąpień, które są równe, jeśli ich zestawów jednostek są takie same i ich wartości klucza są takie same.</xref:System.Data.EntityKey>       Ponadto klucze tymczasowe ma nie <xref:System.Data.Metadata.Edm.EntitySet>lub wartości klucza, ale wykonania stałe kluczy.</xref:System.Data.Metadata.Edm.EntitySet>"
  syntax:
    content: public static bool op_Equality (System.Data.EntityKey key1, System.Data.EntityKey key2);
    parameters:
    - id: key1
      type: System.Data.EntityKey
      description: "A <xref href=&quot;System.Data.EntityKey&quot;> </xref> do porównania."
    - id: key2
      type: System.Data.EntityKey
      description: "A <xref href=&quot;System.Data.EntityKey&quot;> </xref> do porównania."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if the <code>key1</code> and <code>key2</code> values are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Data.EntityKey.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)
  id: op_Inequality(System.Data.EntityKey,System.Data.EntityKey)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: op_Inequality(EntityKey,EntityKey)
  nameWithType: EntityKey.op_Inequality(EntityKey,EntityKey)
  fullName: System.Data.EntityKey.op_Inequality(EntityKey,EntityKey)
  type: Operator
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Porównuje dwa <xref href=&quot;System.Data.EntityKey&quot;> </xref> obiektów."
  remarks: "Klucze tymczasowe ma semantykę porównania inny niż stały klucze:-klucze tymczasowe używają równości odwołań. Oznacza to, że dwa odwołuje się do dokładnie takie same tymczasowego <xref:System.Data.EntityKey>wystąpienia są takie same, ale żaden inny <xref:System.Data.EntityKey>wystąpienia są takie same.</xref:System.Data.EntityKey> </xref:System.Data.EntityKey>      — Klucze stałe określenie na podstawie wartości zawartych w niej właściwości klucza i <xref:System.Data.Metadata.Edm.EntitySet>.</xref:System.Data.Metadata.Edm.EntitySet> równości Oznacza to, że masz dwie oddzielne <xref:System.Data.EntityKey>wystąpień, które są równe, jeśli ich zestawów jednostek są takie same i ich wartości klucza są takie same.</xref:System.Data.EntityKey>       Ponadto klucze tymczasowe ma nie <xref:System.Data.Metadata.Edm.EntitySet>lub wartości klucza, ale wykonania regularne kluczy.</xref:System.Data.Metadata.Edm.EntitySet>"
  syntax:
    content: public static bool op_Inequality (System.Data.EntityKey key1, System.Data.EntityKey key2);
    parameters:
    - id: key1
      type: System.Data.EntityKey
      description: "A <xref href=&quot;System.Data.EntityKey&quot;> </xref> do porównania."
    - id: key2
      type: System.Data.EntityKey
      description: "A <xref href=&quot;System.Data.EntityKey&quot;> </xref> do porównania."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if the <code>key1</code> and <code>key2</code> values are not equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Data.EntityKey.op_Inequality*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.EntityKey.#ctor
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey()
  nameWithType: EntityKey.EntityKey()
  fullName: System.Data.EntityKey.EntityKey()
- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  nameWithType: EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<KeyValuePair<String,Object>>
  nameWithType: IEnumerable<KeyValuePair<String,Object>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.String,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey(String,IEnumerable<EntityKeyMember>)
  nameWithType: EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)
  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)
- uid: System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<EntityKeyMember>
  nameWithType: IEnumerable<EntityKeyMember>
  fullName: System.Collections.Generic.IEnumerable<System.Data.EntityKeyMember>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Data.EntityKeyMember>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.EntityKeyMember
    name: EntityKeyMember
    nameWithType: EntityKeyMember
    fullName: EntityKeyMember
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.EntityKey.#ctor(System.String,System.String,System.Object)
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey(String,String,Object)
  nameWithType: EntityKey.EntityKey(String,String,Object)
  fullName: System.Data.EntityKey.EntityKey(String,String,Object)
- uid: System.Data.EntityKey.EntityContainerName
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityContainerName
  nameWithType: EntityKey.EntityContainerName
  fullName: System.Data.EntityKey.EntityContainerName
- uid: System.Data.EntityKey.EntityKeyValues
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKeyValues
  nameWithType: EntityKey.EntityKeyValues
  fullName: System.Data.EntityKey.EntityKeyValues
- uid: System.Data.EntityKeyMember[]
  parent: System.Data
  isExternal: false
  name: EntityKeyMember
  nameWithType: EntityKeyMember
  fullName: System.Data.EntityKeyMember[]
  spec.csharp:
  - uid: System.Data.EntityKeyMember
    name: EntityKeyMember
    nameWithType: EntityKeyMember
    fullName: EntityKeyMember[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.EntityKey.EntityNotValidKey
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityNotValidKey
  nameWithType: EntityKey.EntityNotValidKey
  fullName: System.Data.EntityKey.EntityNotValidKey
- uid: System.Data.EntityKey
  parent: System.Data
  isExternal: false
  name: EntityKey
  nameWithType: EntityKey
  fullName: System.Data.EntityKey
- uid: System.Data.EntityKey.EntitySetName
  parent: System.Data.EntityKey
  isExternal: false
  name: EntitySetName
  nameWithType: EntityKey.EntitySetName
  fullName: System.Data.EntityKey.EntitySetName
- uid: System.Data.EntityKey.Equals(System.Data.EntityKey)
  parent: System.Data.EntityKey
  isExternal: false
  name: Equals(EntityKey)
  nameWithType: EntityKey.Equals(EntityKey)
  fullName: System.Data.EntityKey.Equals(EntityKey)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.EntityKey.Equals(System.Object)
  parent: System.Data.EntityKey
  isExternal: false
  name: Equals(Object)
  nameWithType: EntityKey.Equals(Object)
  fullName: System.Data.EntityKey.Equals(Object)
- uid: System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)
  parent: System.Data.EntityKey
  isExternal: false
  name: GetEntitySet(MetadataWorkspace)
  nameWithType: EntityKey.GetEntitySet(MetadataWorkspace)
  fullName: System.Data.EntityKey.GetEntitySet(MetadataWorkspace)
- uid: System.Data.Metadata.Edm.EntitySet
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: EntitySet
  nameWithType: EntitySet
  fullName: System.Data.Metadata.Edm.EntitySet
- uid: System.Data.Metadata.Edm.MetadataWorkspace
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: MetadataWorkspace
  nameWithType: MetadataWorkspace
  fullName: System.Data.Metadata.Edm.MetadataWorkspace
- uid: System.Data.EntityKey.GetHashCode
  parent: System.Data.EntityKey
  isExternal: false
  name: GetHashCode()
  nameWithType: EntityKey.GetHashCode()
  fullName: System.Data.EntityKey.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.EntityKey.IsTemporary
  parent: System.Data.EntityKey
  isExternal: false
  name: IsTemporary
  nameWithType: EntityKey.IsTemporary
  fullName: System.Data.EntityKey.IsTemporary
- uid: System.Data.EntityKey.NoEntitySetKey
  parent: System.Data.EntityKey
  isExternal: false
  name: NoEntitySetKey
  nameWithType: EntityKey.NoEntitySetKey
  fullName: System.Data.EntityKey.NoEntitySetKey
- uid: System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.EntityKey
  isExternal: false
  name: OnDeserialized(StreamingContext)
  nameWithType: EntityKey.OnDeserialized(StreamingContext)
  fullName: System.Data.EntityKey.OnDeserialized(StreamingContext)
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.EntityKey
  isExternal: false
  name: OnDeserializing(StreamingContext)
  nameWithType: EntityKey.OnDeserializing(StreamingContext)
  fullName: System.Data.EntityKey.OnDeserializing(StreamingContext)
- uid: System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)
  parent: System.Data.EntityKey
  isExternal: false
  name: op_Equality(EntityKey,EntityKey)
  nameWithType: EntityKey.op_Equality(EntityKey,EntityKey)
  fullName: System.Data.EntityKey.op_Equality(EntityKey,EntityKey)
- uid: System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)
  parent: System.Data.EntityKey
  isExternal: false
  name: op_Inequality(EntityKey,EntityKey)
  nameWithType: EntityKey.op_Inequality(EntityKey,EntityKey)
  fullName: System.Data.EntityKey.op_Inequality(EntityKey,EntityKey)
- uid: System.Data.EntityKey.#ctor*
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey
  nameWithType: EntityKey.EntityKey
- uid: System.Data.EntityKey.EntityContainerName*
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityContainerName
  nameWithType: EntityKey.EntityContainerName
- uid: System.Data.EntityKey.EntityKeyValues*
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKeyValues
  nameWithType: EntityKey.EntityKeyValues
- uid: System.Data.EntityKey.EntitySetName*
  parent: System.Data.EntityKey
  isExternal: false
  name: EntitySetName
  nameWithType: EntityKey.EntitySetName
- uid: System.Data.EntityKey.Equals*
  parent: System.Data.EntityKey
  isExternal: false
  name: Equals
  nameWithType: EntityKey.Equals
- uid: System.Data.EntityKey.GetEntitySet*
  parent: System.Data.EntityKey
  isExternal: false
  name: GetEntitySet
  nameWithType: EntityKey.GetEntitySet
- uid: System.Data.EntityKey.GetHashCode*
  parent: System.Data.EntityKey
  isExternal: false
  name: GetHashCode
  nameWithType: EntityKey.GetHashCode
- uid: System.Data.EntityKey.IsTemporary*
  parent: System.Data.EntityKey
  isExternal: false
  name: IsTemporary
  nameWithType: EntityKey.IsTemporary
- uid: System.Data.EntityKey.OnDeserialized*
  parent: System.Data.EntityKey
  isExternal: false
  name: OnDeserialized
  nameWithType: EntityKey.OnDeserialized
- uid: System.Data.EntityKey.OnDeserializing*
  parent: System.Data.EntityKey
  isExternal: false
  name: OnDeserializing
  nameWithType: EntityKey.OnDeserializing
- uid: System.Data.EntityKey.op_Equality*
  parent: System.Data.EntityKey
  isExternal: false
  name: op_Equality
  nameWithType: EntityKey.op_Equality
- uid: System.Data.EntityKey.op_Inequality*
  parent: System.Data.EntityKey
  isExternal: false
  name: op_Inequality
  nameWithType: EntityKey.op_Inequality
