### YamlMime:ManagedReference
items:
- uid: System.Net.PeerToPeer.PnrpPermission
  id: PnrpPermission
  children:
  - System.Net.PeerToPeer.PnrpPermission.#ctor(System.Security.Permissions.PermissionState)
  - System.Net.PeerToPeer.PnrpPermission.Copy
  - System.Net.PeerToPeer.PnrpPermission.FromXml(System.Security.SecurityElement)
  - System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)
  - System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(System.Security.IPermission)
  - System.Net.PeerToPeer.PnrpPermission.IsUnrestricted
  - System.Net.PeerToPeer.PnrpPermission.ToXml
  - System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: PnrpPermission
  nameWithType: PnrpPermission
  fullName: System.Net.PeerToPeer.PnrpPermission
  type: Class
  summary: "Określa wartości, które są używane w <xref href=&quot;System.Net.PeerToPeer&quot;> </xref> obiekt uprawnień."
  remarks: "Domyślne uprawnienia Zezwalaj na wszystkie lokalne i strefy Intranet aplikacjom dostęp do usługi PNRP. Jeśli domyślne uprawnienia nie są zmieniane, wszystkie połączenia lokalnego i lokalne aplikacje mają dostęp do usług Peer-to-Peer, ale aplikacje globalne (internet) nie mają dostępu.       Wystąpień tego typu mają dwa stany uprawnienie: one albo nie mają dostępu do zasobów chronionych przez uprawnienia lub ich mają nieograniczony dostęp do tych zasobów."
  syntax:
    content: 'public sealed class PnrpPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission'
  inheritance:
  - System.Object
  - System.Security.CodeAccessPermission
  implements:
  - System.Security.Permissions.IUnrestrictedPermission
  inheritedMembers:
  - System.Security.CodeAccessPermission.Assert
  - System.Security.CodeAccessPermission.Demand
  - System.Security.CodeAccessPermission.Deny
  - System.Security.CodeAccessPermission.Equals(System.Object)
  - System.Security.CodeAccessPermission.GetHashCode
  - System.Security.CodeAccessPermission.PermitOnly
  - System.Security.CodeAccessPermission.RevertAll
  - System.Security.CodeAccessPermission.RevertAssert
  - System.Security.CodeAccessPermission.RevertDeny
  - System.Security.CodeAccessPermission.RevertPermitOnly
  - System.Security.CodeAccessPermission.ToString
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: PnrpPermission(PermissionState)
  nameWithType: PnrpPermission.PnrpPermission(PermissionState)
  fullName: System.Net.PeerToPeer.PnrpPermission.PnrpPermission(PermissionState)
  type: Constructor
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> klasy ze stanem podane uprawnienia początkowej."
  remarks: "Wystąpień tego typu mają dwa stany uprawnienie: one albo nie mają dostępu do zasobów chronionych przez uprawnienia lub ich mają nieograniczony dostęp do tych zasobów.       Jeśli `state` jest bez ograniczeń, wystąpienie PnrpPermission przekazuje wszystkich potrzeb. Jeśli `state` zawiera inne wartości wystąpienia PnrpPermission wszystkich potrzeb zakończy się niepowodzeniem."
  syntax:
    content: public PnrpPermission (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: "Jedna z wartości w <xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref> wyliczenia."
  overload: System.Net.PeerToPeer.PnrpPermission.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.Copy
  id: Copy
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: PnrpPermission.Copy()
  fullName: System.Net.PeerToPeer.PnrpPermission.Copy()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Tworzy i zwraca identyczne kopię bieżącego <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref>."
  remarks: "Kopię uprawnienie reprezentuje takie same prawa dostępu do zasobów oryginalnego uprawnienia.       Wystąpień tego typu mają dwa stany uprawnienie: one albo nie mają dostępu do zasobów chronionych przez uprawnienia lub ich mają nieograniczony dostęp do tych zasobów."
  syntax:
    content: public override System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "Obiekt przy użyciu interfejsu IPermission, których wystąpienie zawiera kopię bieżące wystąpienie klasy <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref>."
  overload: System.Net.PeerToPeer.PnrpPermission.Copy*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "-Parametr nie jest prawidłową <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> elementu.      Numer wersji parametr nie jest obsługiwane."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Parametr jest <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> odwołania (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> w języku Visual Basic)."
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: PnrpPermission.FromXml(SecurityElement)
  fullName: System.Net.PeerToPeer.PnrpPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Rekonstruuje obiektu zabezpieczeń o określonym stanie kodowania XML."
  remarks: "Reprezentuje model obiektów XML do kodowania obiektów zabezpieczeń. Ta klasa nie może być dziedziczona.       Ta klasa ma być lekkie wykonania prostego modelu obiektu XML do użycia w ramach systemu zabezpieczeń, a nie do użytku jako ogólne modelu obiektu XML."
  syntax:
    content: public override void FromXml (System.Security.SecurityElement e);
    parameters:
    - id: e
      type: System.Security.SecurityElement
      description: "Kodowanie XML na potrzeby rekonstrukcji uprawnienia."
  overload: System.Net.PeerToPeer.PnrpPermission.FromXml*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "-Parametr nie jest prawidłową <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> elementu.      Numer wersji parametr nie jest obsługiwane."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Parametr jest <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> odwołania (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> w języku Visual Basic)."
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: PnrpPermission.Intersect(IPermission)
  fullName: System.Net.PeerToPeer.PnrpPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Tworzy i zwraca uprawnienia, które jest przecięcia bieżącego <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> i określonego uprawnienia."
  remarks: "Część wspólną dwóch uprawnień jest uprawnienia, które opisano zestaw działań, które opisują one zarówno wspólnych. Tylko zażąda przekazuje oba oryginalnego uprawnienia zostaną spełnione przecięcie.       Poniższe instrukcje muszą być `true` dla wszystkich implementacji metody Intersect. Reprezentuje X i Y <xref:System.Security.IPermission>odwołania do obiektów, które nie są `null` odwołania (Nothing w języku Visual Basic).</xref:System.Security.IPermission>      -X.Intersect(X) zwróciło wartość X.      -X.Intersect(Y) zwraca taką samą wartość jak Y.Intersect(X).      -X.Intersect(a `null` reference (`Nothing` in Visual Basic)) zwraca `null` odwołania (`Nothing` w języku Visual Basic)."
  syntax:
    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "Uprawnienie do Intersect z uprawnieniami bieżącego. Należy tego samego typu co bieżący uprawnień."
    return:
      type: System.Security.IPermission
      description: "Nowe uprawnienia, które reprezentuje część wspólną bieżącego <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> i określonego uprawnienia. Jest to nowe uprawnienie <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> odwołania (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> w języku Visual Basic), jeśli część wspólną jest pusta."
  overload: System.Net.PeerToPeer.PnrpPermission.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Parametr docelowy nie jest <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> odwołania (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> w języku Visual Basic), a nie wystąpienia tej samej klasy bieżące uprawnienia."
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: PnrpPermission.IsSubsetOf(IPermission)
  fullName: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Określa, czy bieżący <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> jest podzbiorem określonego uprawnienia."
  remarks: "The current <xref:System.Net.PeerToPeer.PnrpPermission> is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to \"*C:\\example.txt*\" is a subset of a permission that represents access to \"*C:\\\\*\". If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.  \n  \n The following statements are required to be `true` for all implementations of the IsSubsetOf method. X, Y, and Z represent <xref:System.Security.IPermission> objects that are not a `null` reference (`Nothing` in Visual Basic).  \n  \n-   X.IsSubsetOf(X) returns `true`.  \n  \n-   X.IsSubsetOf(Y) returns the same value as Y.IsSubsetOf(X) if and only if X and Y represent the same set of permissions.  \n  \n-   If X.IsSubsetOf(Y) and Y.IsSubsetOf(Z) both return `true`, X.IsSubsetOf(Z) returns `true`.  \n  \n-  \n  \n If X represents an empty IPermission object with a permission state of *None* and Y represents an IPermission object that is a `null` reference (`Nothing` in Visual Basic), X.IsSubsetOf(Y) returns `true`. If Z is also an empty permission, the compound set operation X.Union(Z).IsSubsetOf(Y) also returns `true` because the <xref:System.Net.PeerToPeer.PnrpPermission.Union%2A> of two empty permissions is an empty permission."
  syntax:
    content: public override bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "Uprawnienia, które ma być sprawdzane pod kątem relacji podzbioru. To uprawnienie musi być tego samego typu co bieżący uprawnień."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>Jeśli bieżący <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> jest podzbiorem określonego uprawnienia; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Parametr docelowy nie jest <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> odwołania (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> w języku Visual Basic), a nie wystąpienia tej samej klasy bieżące uprawnienia."
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted
  id: IsUnrestricted
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: PnrpPermission.IsUnrestricted()
  fullName: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Zwraca wartość określająca czy bieżące <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> jest nieograniczony."
  remarks: "Nieograniczone uprawnienia reprezentuje dostęp do wszystkich zasobów chronionych przez uprawnienia."
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>Jeśli bieżący uprawnienie jest nieograniczony; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.ToXml
  id: ToXml
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: PnrpPermission.ToXml()
  fullName: System.Net.PeerToPeer.PnrpPermission.ToXml()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Tworzy XML kodowanie <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> i jego bieżącym stanie."
  syntax:
    content: public override System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "A <xref href=&quot;System.Security.SecurityElement&quot;> </xref> obiekt, który zawiera kodowanie XML uprawnienia, łącznie z żadnych informacji o stanie."
  overload: System.Net.PeerToPeer.PnrpPermission.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: PnrpPermission.Union(IPermission)
  fullName: System.Net.PeerToPeer.PnrpPermission.Union(IPermission)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Tworzy uprawnienia, które jest Unii bieżącego <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> i określonego uprawnienia."
  remarks: "Wynik wywołania Unii jest uprawnienia, które reprezentuje wszystkie operacje reprezentowany przez oba bieżącego <xref:System.Net.PeerToPeer.PnrpPermission>i określonego uprawnienia.</xref:System.Net.PeerToPeer.PnrpPermission> Wszelkie żądania, który przekazuje albo uprawnienie przekazuje ich union.       Poniższe instrukcje muszą być `true` dla wszystkich implementacji metody Union. Reprezentuje X i Y <xref:System.Security.IPermission>obiektów, które nie są `null` odwołania (`Nothing` w języku Visual Basic).</xref:System.Security.IPermission>      -X.Union(X) zwraca obiekt, który ma taką samą wartość jak X.      -X.Union(Y) zwraca obiekt, który ma taką samą wartość jak dla obiektu zwrócony przez Y.Union(X).      -X.Union(a `null` reference (`Nothing` in Visual Basic)) zwraca obiekt, który ma taką samą wartość jak X."
  syntax:
    content: public override System.Security.IPermission Union (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "Uprawnienie do łączenia z uprawnieniami bieżącego. Należy tego samego typu co bieżący uprawnień."
    return:
      type: System.Security.IPermission
      description: "Nowe uprawnienia, które reprezentuje Unii bieżącego <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> i określonego uprawnienia."
  overload: System.Net.PeerToPeer.PnrpPermission.Union*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>target</code>parametr jest nieprawidłowy."
  platform:
  - net462
references:
- uid: System.Security.CodeAccessPermission
  isExternal: false
  name: System.Security.CodeAccessPermission
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Net.PeerToPeer.PnrpPermission.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: PnrpPermission(PermissionState)
  nameWithType: PnrpPermission.PnrpPermission(PermissionState)
  fullName: System.Net.PeerToPeer.PnrpPermission.PnrpPermission(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Net.PeerToPeer.PnrpPermission.Copy
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: Copy()
  nameWithType: PnrpPermission.Copy()
  fullName: System.Net.PeerToPeer.PnrpPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Net.PeerToPeer.PnrpPermission.FromXml(System.Security.SecurityElement)
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: PnrpPermission.FromXml(SecurityElement)
  fullName: System.Net.PeerToPeer.PnrpPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: PnrpPermission.Intersect(IPermission)
  fullName: System.Net.PeerToPeer.PnrpPermission.Intersect(IPermission)
- uid: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: PnrpPermission.IsSubsetOf(IPermission)
  fullName: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(IPermission)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: IsUnrestricted()
  nameWithType: PnrpPermission.IsUnrestricted()
  fullName: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted()
- uid: System.Net.PeerToPeer.PnrpPermission.ToXml
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: ToXml()
  nameWithType: PnrpPermission.ToXml()
  fullName: System.Net.PeerToPeer.PnrpPermission.ToXml()
- uid: System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: PnrpPermission.Union(IPermission)
  fullName: System.Net.PeerToPeer.PnrpPermission.Union(IPermission)
- uid: System.Net.PeerToPeer.PnrpPermission.#ctor*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: PnrpPermission
  nameWithType: PnrpPermission.PnrpPermission
- uid: System.Net.PeerToPeer.PnrpPermission.Copy*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: Copy
  nameWithType: PnrpPermission.Copy
- uid: System.Net.PeerToPeer.PnrpPermission.FromXml*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: FromXml
  nameWithType: PnrpPermission.FromXml
- uid: System.Net.PeerToPeer.PnrpPermission.Intersect*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: Intersect
  nameWithType: PnrpPermission.Intersect
- uid: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: PnrpPermission.IsSubsetOf
- uid: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: IsUnrestricted
  nameWithType: PnrpPermission.IsUnrestricted
- uid: System.Net.PeerToPeer.PnrpPermission.ToXml*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: ToXml
  nameWithType: PnrpPermission.ToXml
- uid: System.Net.PeerToPeer.PnrpPermission.Union*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: Union
  nameWithType: PnrpPermission.Union
