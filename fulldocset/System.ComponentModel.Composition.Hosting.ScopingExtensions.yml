### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions
  id: ScopingExtensions
  children:
  - System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadata``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String,``0)
  - System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadataWithKey(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String)
  - System.ComponentModel.Composition.Hosting.ScopingExtensions.Exports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String)
  - System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog@,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})
  - System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String)
  - System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String,System.ComponentModel.Composition.Primitives.ImportCardinality)
  langs:
  - csharp
  name: ScopingExtensions
  nameWithType: ScopingExtensions
  fullName: System.ComponentModel.Composition.Hosting.ScopingExtensions
  type: Class
  summary: "Definiuje metody statycznej wygody dla zakresu."
  syntax:
    content: public static class ScopingExtensions
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadata``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String,``0)
  id: ContainsPartMetadata``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String,``0)
  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions
  langs:
  - csharp
  name: ContainsPartMetadata(ComposablePartDefinition,String,T)
  nameWithType: ScopingExtensions.ContainsPartMetadata(ComposablePartDefinition,String,T)
  fullName: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadata(ComposablePartDefinition,String,T)
  type: Method
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  syntax:
    content: public static bool ContainsPartMetadata<T> (this System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, string key, T value);
    parameters:
    - id: part
      type: System.ComponentModel.Composition.Primitives.ComposablePartDefinition
      description: "Do dodania."
    - id: key
      type: System.String
      description: "Do dodania."
    - id: value
      type: T
      description: "Do dodania."
    return:
      type: System.Boolean
      description: "Do dodania."
  overload: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadata<T>*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadataWithKey(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String)
  id: ContainsPartMetadataWithKey(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String)
  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions
  langs:
  - csharp
  name: ContainsPartMetadataWithKey(ComposablePartDefinition,String)
  nameWithType: ScopingExtensions.ContainsPartMetadataWithKey(ComposablePartDefinition,String)
  fullName: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadataWithKey(ComposablePartDefinition,String)
  type: Method
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: "Pobiera wartość wskazującą, czy określona część zawiera metadane z określonym kluczem."
  syntax:
    content: public static bool ContainsPartMetadataWithKey (this System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, string key);
    parameters:
    - id: part
      type: System.ComponentModel.Composition.Primitives.ComposablePartDefinition
      description: "Element do wyszukania."
    - id: key
      type: System.String
      description: "Klucz metadanych."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli <code> part </code> zawiera metadane z określonym kluczem, a w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadataWithKey*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Exports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String)
  id: Exports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String)
  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions
  langs:
  - csharp
  name: Exports(ComposablePartDefinition,String)
  nameWithType: ScopingExtensions.Exports(ComposablePartDefinition,String)
  fullName: System.ComponentModel.Composition.Hosting.ScopingExtensions.Exports(ComposablePartDefinition,String)
  type: Method
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: "Pobiera wartość wskazującą, czy określona część Eksportuje określony kontraktu."
  syntax:
    content: public static bool Exports (this System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, string contractName);
    parameters:
    - id: part
      type: System.ComponentModel.Composition.Primitives.ComposablePartDefinition
      description: "Element do wyszukania."
    - id: contractName
      type: System.String
      description: "Nazwa kontraktu."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli <code> part </code> eksportuje kontrakt określony; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.Composition.Hosting.ScopingExtensions.Exports*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog@,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})
  id: Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog@,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})
  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions
  langs:
  - csharp
  name: Filter(ComposablePartCatalog,Func<ComposablePartDefinition,Boolean>)
  nameWithType: ScopingExtensions.Filter(ComposablePartCatalog,Func<ComposablePartDefinition,Boolean>)
  fullName: System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(ComposablePartCatalog,Func<ComposablePartDefinition,Boolean>)
  type: Method
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: "Filtruje określonego katalogu przy użyciu funkcji określony filtr."
  syntax:
    content: public static System.ComponentModel.Composition.Hosting.FilteredCatalog Filter (this System.ComponentModel.Composition.Primitives.ComposablePartCatalog catalog, Func<System.ComponentModel.Composition.Primitives.ComposablePartDefinition,bool> filter);
    parameters:
    - id: catalog
      type: System.ComponentModel.Composition.Primitives.ComposablePartCatalog
      description: "Katalog do filtrowania."
    - id: filter
      type: System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean}
      description: "Funkcja filtru."
    return:
      type: System.ComponentModel.Composition.Hosting.FilteredCatalog
      description: "Nowy katalog filtrowane przy użyciu określonego filtru."
  overload: System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String)
  id: Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String)
  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions
  langs:
  - csharp
  name: Imports(ComposablePartDefinition,String)
  nameWithType: ScopingExtensions.Imports(ComposablePartDefinition,String)
  fullName: System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(ComposablePartDefinition,String)
  type: Method
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: "Określa, czy określona część importuje określony kontraktu."
  syntax:
    content: public static bool Imports (this System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, string contractName);
    parameters:
    - id: part
      type: System.ComponentModel.Composition.Primitives.ComposablePartDefinition
      description: "Element do wyszukania."
    - id: contractName
      type: System.String
      description: "Nazwa kontraktu."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli <code> part </code> importuje kontrakt określony; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String,System.ComponentModel.Composition.Primitives.ImportCardinality)
  id: Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String,System.ComponentModel.Composition.Primitives.ImportCardinality)
  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions
  langs:
  - csharp
  name: Imports(ComposablePartDefinition,String,ImportCardinality)
  nameWithType: ScopingExtensions.Imports(ComposablePartDefinition,String,ImportCardinality)
  fullName: System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(ComposablePartDefinition,String,ImportCardinality)
  type: Method
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: "Określa, czy określona część importuje określonym kontrakcie o określonej wartości cardinality."
  syntax:
    content: public static bool Imports (this System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, string contractName, System.ComponentModel.Composition.Primitives.ImportCardinality importCardinality);
    parameters:
    - id: part
      type: System.ComponentModel.Composition.Primitives.ComposablePartDefinition
      description: "Element do wyszukania."
    - id: contractName
      type: System.String
      description: "Nazwa kontraktu."
    - id: importCardinality
      type: System.ComponentModel.Composition.Primitives.ImportCardinality
      description: "Kardynalność kontraktu."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli <code> part </code> importuje kontraktu, który ma określoną nazwę i kardynalność; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadata``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String,``0)
  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions
  isExternal: false
  name: ContainsPartMetadata(ComposablePartDefinition,String,T)
  nameWithType: ScopingExtensions.ContainsPartMetadata(ComposablePartDefinition,String,T)
  fullName: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadata(ComposablePartDefinition,String,T)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.Composition.Primitives.ComposablePartDefinition
  parent: System.ComponentModel.Composition.Primitives
  isExternal: false
  name: ComposablePartDefinition
  nameWithType: ComposablePartDefinition
  fullName: System.ComponentModel.Composition.Primitives.ComposablePartDefinition
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadataWithKey(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String)
  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions
  isExternal: false
  name: ContainsPartMetadataWithKey(ComposablePartDefinition,String)
  nameWithType: ScopingExtensions.ContainsPartMetadataWithKey(ComposablePartDefinition,String)
  fullName: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadataWithKey(ComposablePartDefinition,String)
- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Exports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String)
  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions
  isExternal: false
  name: Exports(ComposablePartDefinition,String)
  nameWithType: ScopingExtensions.Exports(ComposablePartDefinition,String)
  fullName: System.ComponentModel.Composition.Hosting.ScopingExtensions.Exports(ComposablePartDefinition,String)
- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog@,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})
  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions
  isExternal: false
  name: Filter(ComposablePartCatalog,Func<ComposablePartDefinition,Boolean>)
  nameWithType: ScopingExtensions.Filter(ComposablePartCatalog,Func<ComposablePartDefinition,Boolean>)
  fullName: System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(ComposablePartCatalog,Func<ComposablePartDefinition,Boolean>)
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog
  parent: System.ComponentModel.Composition.Hosting
  isExternal: false
  name: FilteredCatalog
  nameWithType: FilteredCatalog
  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog
- uid: System.ComponentModel.Composition.Primitives.ComposablePartCatalog
  parent: System.ComponentModel.Composition.Primitives
  isExternal: false
  name: ComposablePartCatalog
  nameWithType: ComposablePartCatalog
  fullName: System.ComponentModel.Composition.Primitives.ComposablePartCatalog
- uid: System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean}
  parent: System
  isExternal: true
  name: Func<ComposablePartDefinition,Boolean>
  nameWithType: Func<ComposablePartDefinition,Boolean>
  fullName: System.Func<System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.Composition.Primitives.ComposablePartDefinition
    name: ComposablePartDefinition
    nameWithType: ComposablePartDefinition
    fullName: ComposablePartDefinition
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String)
  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions
  isExternal: false
  name: Imports(ComposablePartDefinition,String)
  nameWithType: ScopingExtensions.Imports(ComposablePartDefinition,String)
  fullName: System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(ComposablePartDefinition,String)
- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition@,System.String,System.ComponentModel.Composition.Primitives.ImportCardinality)
  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions
  isExternal: false
  name: Imports(ComposablePartDefinition,String,ImportCardinality)
  nameWithType: ScopingExtensions.Imports(ComposablePartDefinition,String,ImportCardinality)
  fullName: System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(ComposablePartDefinition,String,ImportCardinality)
- uid: System.ComponentModel.Composition.Primitives.ImportCardinality
  parent: System.ComponentModel.Composition.Primitives
  isExternal: false
  name: ImportCardinality
  nameWithType: ImportCardinality
  fullName: System.ComponentModel.Composition.Primitives.ImportCardinality
- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadata<T>*
  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions
  isExternal: false
  name: ContainsPartMetadata<T>
  nameWithType: ScopingExtensions.ContainsPartMetadata<T>
- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadataWithKey*
  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions
  isExternal: false
  name: ContainsPartMetadataWithKey
  nameWithType: ScopingExtensions.ContainsPartMetadataWithKey
- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Exports*
  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions
  isExternal: false
  name: Exports
  nameWithType: ScopingExtensions.Exports
- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter*
  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions
  isExternal: false
  name: Filter
  nameWithType: ScopingExtensions.Filter
- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports*
  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions
  isExternal: false
  name: Imports
  nameWithType: ScopingExtensions.Imports
