### YamlMime:ManagedReference
items:
- uid: System.Data.DataSet
  id: DataSet
  children:
  - System.Data.DataSet.#ctor
  - System.Data.DataSet.#ctor(System.String)
  - System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)
  - System.Data.DataSet.AcceptChanges
  - System.Data.DataSet.BeginInit
  - System.Data.DataSet.CaseSensitive
  - System.Data.DataSet.Clear
  - System.Data.DataSet.Clone
  - System.Data.DataSet.Copy
  - System.Data.DataSet.CreateDataReader
  - System.Data.DataSet.CreateDataReader(System.Data.DataTable[])
  - System.Data.DataSet.DataSetName
  - System.Data.DataSet.DefaultViewManager
  - System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)
  - System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataSet.EndInit
  - System.Data.DataSet.EnforceConstraints
  - System.Data.DataSet.ExtendedProperties
  - System.Data.DataSet.GetChanges
  - System.Data.DataSet.GetChanges(System.Data.DataRowState)
  - System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)
  - System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataSet.GetSchemaSerializable
  - System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataSet.GetXml
  - System.Data.DataSet.GetXmlSchema
  - System.Data.DataSet.HasChanges
  - System.Data.DataSet.HasChanges(System.Data.DataRowState)
  - System.Data.DataSet.HasErrors
  - System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])
  - System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])
  - System.Data.DataSet.InferXmlSchema(System.String,System.String[])
  - System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])
  - System.Data.DataSet.Initialized
  - System.Data.DataSet.InitializeDerivedDataSet
  - System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataSet.IsInitialized
  - System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])
  - System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])
  - System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])
  - System.Data.DataSet.Locale
  - System.Data.DataSet.Merge(System.Data.DataRow[])
  - System.Data.DataSet.Merge(System.Data.DataSet)
  - System.Data.DataSet.Merge(System.Data.DataTable)
  - System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)
  - System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)
  - System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)
  - System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  - System.Data.DataSet.MergeFailed
  - System.Data.DataSet.Namespace
  - System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  - System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)
  - System.Data.DataSet.OnRemoveTable(System.Data.DataTable)
  - System.Data.DataSet.Prefix
  - System.Data.DataSet.RaisePropertyChanging(System.String)
  - System.Data.DataSet.ReadXml(System.IO.Stream)
  - System.Data.DataSet.ReadXml(System.IO.TextReader)
  - System.Data.DataSet.ReadXml(System.String)
  - System.Data.DataSet.ReadXml(System.Xml.XmlReader)
  - System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)
  - System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)
  - System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)
  - System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)
  - System.Data.DataSet.ReadXmlSchema(System.IO.Stream)
  - System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)
  - System.Data.DataSet.ReadXmlSchema(System.String)
  - System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)
  - System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)
  - System.Data.DataSet.RejectChanges
  - System.Data.DataSet.Relations
  - System.Data.DataSet.RemotingFormat
  - System.Data.DataSet.Reset
  - System.Data.DataSet.SchemaSerializationMode
  - System.Data.DataSet.ShouldSerializeRelations
  - System.Data.DataSet.ShouldSerializeTables
  - System.Data.DataSet.Site
  - System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection
  - System.Data.DataSet.System#ComponentModel#IListSource#GetList
  - System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema
  - System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  - System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  - System.Data.DataSet.Tables
  - System.Data.DataSet.WriteXml(System.IO.Stream)
  - System.Data.DataSet.WriteXml(System.IO.TextWriter)
  - System.Data.DataSet.WriteXml(System.String)
  - System.Data.DataSet.WriteXml(System.Xml.XmlWriter)
  - System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  - System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  - System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)
  - System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  - System.Data.DataSet.WriteXmlSchema(System.IO.Stream)
  - System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)
  - System.Data.DataSet.WriteXmlSchema(System.String)
  - System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)
  - System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})
  - System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})
  - System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})
  - System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})
  langs:
  - csharp
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
  type: Class
  summary: "Reprezentuje w pamięci podręcznej danych."
  remarks: "Zestaw danych, czyli w pamięci podręcznej danych pobrane ze źródła danych jest głównym architektury ADO.NET. Zestaw danych składa się z kolekcją <xref:System.Data.DataTable>obiektów, które można powiązać ze sobą z <xref:System.Data.DataRelation>obiektów.</xref:System.Data.DataRelation> </xref:System.Data.DataTable> Można również wymusić spójność danych w zestawie danych przy użyciu <xref:System.Data.UniqueConstraint>i <xref:System.Data.ForeignKeyConstraint>obiektów.</xref:System.Data.ForeignKeyConstraint> </xref:System.Data.UniqueConstraint> Aby uzyskać szczegółowe informacje na temat pracy z obiektami zestawu danych, zobacz [zestawów danych, DataTables i DataViews](~/add/includes/ajax-current-ext-md.md).       Podczas gdy <xref:System.Data.DataTable>obiekty zawierają dane, <xref:System.Data.DataRelationCollection>umożliwia poruszać Tabela hierarchii.</xref:System.Data.DataRelationCollection> </xref:System.Data.DataTable> Tabele są zawarte w <xref:System.Data.DataTableCollection>dostępne za pośrednictwem <xref:System.Data.DataSet.Tables%2A>Właściwości.</xref:System.Data.DataSet.Tables%2A> </xref:System.Data.DataTableCollection> Podczas uzyskiwania dostępu do <xref:System.Data.DataTable>obiektów, należy pamiętać, że są one warunkowo z uwzględnieniem wielkości liter.</xref:System.Data.DataTable> Na przykład, jeśli jeden <xref:System.Data.DataTable>o nazwie &quot;mydatatable&quot; i drugiego o nazwie &quot;Mydatatable&quot;, ciąg używany do wyszukania go tabel jest traktowany jako wielkość liter.</xref:System.Data.DataTable> Jednak jeśli istnieje &quot;mydatatable&quot; i &quot;Mydatatable&quot; nie ma, ciąg wyszukiwania jest traktowany jako bez uwzględniania wielkości liter. Aby uzyskać więcej informacji na temat pracy z <xref:System.Data.DataTable>obiekty, zobacz [tworzenie DataTable](~/add/includes/ajax-current-ext-md.md).</xref:System.Data.DataTable>       Zestaw danych można odczytu i zapisu danych i schematu jako dokumentów XML. Dane i schemat można być transport HTTP i używane przez dowolną aplikację na dowolnej platformie, która jest włączone XML. Schemat można zapisać jako schematu XML z <xref:System.Data.DataSet.WriteXmlSchema%2A>metody, a schemat i dane można zapisać przy użyciu <xref:System.Data.DataSet.WriteXml%2A>metody.</xref:System.Data.DataSet.WriteXml%2A> </xref:System.Data.DataSet.WriteXmlSchema%2A> Aby odczytać dokument XML, która obejmuje zarówno schematu, jak i dane, należy użyć <xref:System.Data.DataSet.ReadXml%2A>metody.</xref:System.Data.DataSet.ReadXml%2A>       W typowej implementacji wielowarstwowej, kroki związane z tworzeniem i odświeżanie zestawu danych, a więc aktualizowanie oryginalnych danych mają: 1.  Tworzenie i wypełnianie każdego <xref:System.Data.DataTable>w zestawie danych z danymi ze źródłem danych przy użyciu <xref:System.Data.Common.DataAdapter>.</xref:System.Data.Common.DataAdapter> </xref:System.Data.DataTable>      2.  Zmiany danych w poszczególnych <xref:System.Data.DataTable>obiektów przez dodawanie, aktualizowanie lub usuwanie <xref:System.Data.DataRow>obiektów.</xref:System.Data.DataRow> </xref:System.Data.DataTable>      3.  Wywołanie <xref:System.Data.DataSet.GetChanges%2A>metodę w celu utworzenia drugiego zestawu danych, który zawiera tylko zmiany danych.</xref:System.Data.DataSet.GetChanges%2A>      4.  Wywołanie <xref:System.Data.Common.DataAdapter.Update%2A>metody <xref:System.Data.Common.DataAdapter>, przekazując drugiego zestawu danych jako argument.</xref:System.Data.Common.DataAdapter> </xref:System.Data.Common.DataAdapter.Update%2A>      5.  Wywołanie <xref:System.Data.DataSet.Merge%2A>metodę, aby scalić zmiany z drugiego zestawu danych w pierwszym.</xref:System.Data.DataSet.Merge%2A>      6.  Wywołanie <xref:System.Data.DataSet.AcceptChanges%2A>w zestawie danych.</xref:System.Data.DataSet.AcceptChanges%2A> Alternatywnie wywołania <xref:System.Data.DataSet.RejectChanges%2A>Aby anulować zmiany.</xref:System.Data.DataSet.RejectChanges%2A>      > [!NOTE] > Zestawu danych i <xref:System.Data.DataTable>obiekty dziedziczyć <xref:System.ComponentModel.MarshalByValueComponent>i obsługuje <xref:System.Runtime.Serialization.ISerializable>interfejs dla niego komunikację zdalną.</xref:System.Runtime.Serialization.ISerializable> </xref:System.ComponentModel.MarshalByValueComponent> </xref:System.Data.DataTable> Są to jedyne obiekty ADO.NET, które może zostać wykonana zdalnie.      > [!NOTE] > Przez moduł garbage collector nie sfinalizowaniu klasy dziedziczone z zestawu danych, ponieważ finalizator została pominięta, w elemencie DataSet. Klasy pochodne mogą wywoływać <xref:System.GC.ReRegisterForFinalize%2A>metody w jego konstruktora, aby umożliwić klasy, która ma zostać opracowane przez moduł garbage collector.</xref:System.GC.ReRegisterForFinalize%2A>"
  example:
  - "The following example consists of several methods that, combined, create and fill a DataSet from the **Northwind** database.  \n  \n [!code-cs[Classic WebData DataSet Example#1](~/add/codesnippet/csharp/t-system.data.dataset_1.cs)]\n [!code-vb[Classic WebData DataSet Example#1](~/add/codesnippet/visualbasic/t-system.data.dataset_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultProperty("DataSetName")]

      [System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.Xml.Serialization.XmlRoot("DataSet")]

      [System.Xml.Serialization.XmlSchemaProvider("GetDataSetSchema")]

      public class DataSet : System.ComponentModel.MarshalByValueComponent, System.ComponentModel.IListSource, System.ComponentModel.ISupportInitializeNotification, System.Runtime.Serialization.ISerializable, System.Xml.Serialization.IXmlSerializable
  inheritance:
  - System.Object
  - System.ComponentModel.MarshalByValueComponent
  implements:
  - System.ComponentModel.IListSource
  - System.ComponentModel.ISupportInitializeNotification
  - System.Runtime.Serialization.ISerializable
  - System.Xml.Serialization.IXmlSerializable
  inheritedMembers:
  - System.ComponentModel.MarshalByValueComponent.Container
  - System.ComponentModel.MarshalByValueComponent.DesignMode
  - System.ComponentModel.MarshalByValueComponent.Dispose
  - System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)
  - System.ComponentModel.MarshalByValueComponent.Disposed
  - System.ComponentModel.MarshalByValueComponent.Events
  - System.ComponentModel.MarshalByValueComponent.GetService(System.Type)
  - System.ComponentModel.MarshalByValueComponent.ToString
  platform:
  - net462
- uid: System.Data.DataSet.#ctor
  id: '#ctor'
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DataSet()
  nameWithType: DataSet.DataSet()
  fullName: System.Data.DataSet.DataSet()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Data.DataSet&quot;> </xref> klasy."
  remarks: "Ta implementacja <xref:System.Data.DataSet>Konstruktor nie przyjmuje żadnych parametrów i tworzy domyślną nazwę &quot;NewDataSet,&quot; dla nowego wystąpienia.</xref:System.Data.DataSet>       Nazwę <xref:System.Data.DataSet>jest wymagana do zapewnienia, że reprezentację XML <xref:System.Data.DataSet>zawsze ma nazwę dla elementu dokumentu, który jest elementem najwyższego poziomu w definicji schematu.</xref:System.Data.DataSet> </xref:System.Data.DataSet>"
  example:
  - "The following example creates a new <xref:System.Data.DataSet>, and adds two <xref:System.Data.DataTable> objects to it.  \n  \n [!code-vb[Classic WebData DataSet.DataSet Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.sh_1_1.vb)]"
  syntax:
    content: public DataSet ();
    parameters: []
  overload: System.Data.DataSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DataSet(String)
  nameWithType: DataSet.DataSet(String)
  fullName: System.Data.DataSet.DataSet(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Data.DataSet&quot;> </xref> klasa o podanej nazwie."
  remarks: "Nazwę <xref:System.Data.DataSet>jest wymagana do zapewnienia, że reprezentację XML <xref:System.Data.DataSet>zawsze ma nazwę element dokumentu, który jest elementem najwyższego poziomu w definicji schematu.</xref:System.Data.DataSet> </xref:System.Data.DataSet>"
  example:
  - "The following example creates a new <xref:System.Data.DataSet>, to which two <xref:System.Data.DataTable> objects are added.  \n  \n [!code-vb[Classic WebData DataSet.DataSet1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.sh_0_1.vb)]"
  syntax:
    content: public DataSet (string dataSetName);
    parameters:
    - id: dataSetName
      type: System.String
      description: "Nazwa <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.DataSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DataSet(SerializationInfo,StreamingContext)
  nameWithType: DataSet.DataSet(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.DataSet(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Data.DataSet&quot;> </xref> klasy, która zawiera informacje o danym serializacji i kontekstu."
  syntax:
    content: protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Dane potrzebne do serializacji lub deserializacji obiektu."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Źródło i miejsce docelowe danego strumieniu serializowanym."
  overload: System.Data.DataSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)'
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DataSet(SerializationInfo,StreamingContext,Boolean)
  nameWithType: DataSet.DataSet(SerializationInfo,StreamingContext,Boolean)
  fullName: System.Data.DataSet.DataSet(SerializationInfo,StreamingContext,Boolean)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Data.DataSet&quot;> </xref> klasy."
  syntax:
    content: protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, bool ConstructSchema);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> Obiektu."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "<xref:System.Runtime.Serialization.StreamingContext>Obiektu.</xref:System.Runtime.Serialization.StreamingContext>"
    - id: ConstructSchema
      type: System.Boolean
      description: "Wartość logiczna."
  overload: System.Data.DataSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.AcceptChanges
  id: AcceptChanges
  parent: System.Data.DataSet
  langs:
  - csharp
  name: AcceptChanges()
  nameWithType: DataSet.AcceptChanges()
  fullName: System.Data.DataSet.AcceptChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zatwierdza wszystkie zmiany wprowadzone do tego <xref href=&quot;System.Data.DataSet&quot;> </xref> od momentu załadowania lub od czasu ostatniego AcceptChanges została wywołana."
  remarks: "Zarówno <xref:System.Data.DataRow>i <xref:System.Data.DataTable>klasy mają metody AcceptChanges.</xref:System.Data.DataTable> </xref:System.Data.DataRow> Wywoływanie <xref:System.Data.DataTable.AcceptChanges%2A>na <xref:System.Data.DataTable>poziomie przyczyny <xref:System.Data.DataRow.AcceptChanges%2A>metody dla każdego <xref:System.Data.DataRow>do wywołania.</xref:System.Data.DataRow> </xref:System.Data.DataRow.AcceptChanges%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.AcceptChanges%2A> Podobnie wywoływaniu AcceptChanges <xref:System.Data.DataSet>powoduje, że <xref:System.Data.DataTable.AcceptChanges%2A>ma być wywoływana dla każdej tabeli w ramach <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable.AcceptChanges%2A> </xref:System.Data.DataSet> W ten sposób masz wiele poziomów, w których można wywołać metody. Wywołaniem funkcji AcceptChanges z <xref:System.Data.DataSet>można wywołać metody dla wszystkich obiektów podrzędnych (na przykład tabel i wierszy) z jednym wywołaniu.</xref:System.Data.DataSet>       Podczas wywoływania `AcceptChanges` na `DataSet`oraz <xref:System.Data.DataRow>obiektów nadal w trybie edycji pomyślnie zakończyć ich edycji.</xref:System.Data.DataRow> Właściwość <xref:System.Data.DataRow.RowState%2A>każdego <xref:System.Data.DataRow>również zmianę; `Added` i `Modified` wierszy stają się `Unchanged`, i `Deleted` wiersze zostaną usunięte.</xref:System.Data.DataRow> </xref:System.Data.DataRow.RowState%2A>       Jeśli `DataSet` zawiera <xref:System.Data.ForeignKeyConstraint>obiektów wywoływania `AcceptChanges` metoda powoduje także, że <xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A>mają być egzekwowane.</xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A> </xref:System.Data.ForeignKeyConstraint>      > [!NOTE]  >   `AcceptChanges` i `RejectChanges` dotyczą tylko `DataRow` powiązanych zmian (oznacza to, Dodaj, Usuń, usuwanie i modyfikowanie). Nie mają zastosowania do schematu lub zmian strukturalnych.   >> Zestaw danych został wypełniony przy użyciu element DataAdapter AcceptChanges wywołania nie będą replikowane tych zmian do źródła danych. W takiej sytuacji należy wywołać <xref:System.Data.Common.DataAdapter.Update%2A>zamiast.</xref:System.Data.Common.DataAdapter.Update%2A> Zobacz [aktualizowanie źródła danych z obiektów DataAdapter](http://msdn.microsoft.com/library/33y2221y.aspx) Aby uzyskać więcej informacji."
  example:
  - "The following example adds a <xref:System.Data.DataRow> to a <xref:System.Data.DataTable> in a <xref:System.Data.DataSet>. The AcceptChanges method is then called on the <xref:System.Data.DataSet>, which cascades to all <xref:System.Data.DataTable> objects that it contains.  \n  \n [!code-vb[Classic WebData DataSet.AcceptChanges#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ac_1.vb)]\n [!code-cs[Classic WebData DataSet.AcceptChanges#1](~/add/codesnippet/csharp/m-system.data.dataset.ac_1.cs)]"
  syntax:
    content: public void AcceptChanges ();
    parameters: []
  overload: System.Data.DataSet.AcceptChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.BeginInit
  id: BeginInit
  parent: System.Data.DataSet
  langs:
  - csharp
  name: BeginInit()
  nameWithType: DataSet.BeginInit()
  fullName: System.Data.DataSet.BeginInit()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Rozpoczyna inicjowanie <xref href=&quot;System.Data.DataSet&quot;> </xref> który jest używany w formularzu lub używany przez inny składnik. Inicjowanie występuje w czasie wykonywania."
  remarks: "Środowisku projektowania programu Visual Studio .NET używa tej metody, aby rozpocząć inicjowanie składnik, który jest używany w formularzu lub używany przez inny składnik. <xref:System.Data.DataSet.EndInit%2A>Metoda kończy się inicjowania.</xref:System.Data.DataSet.EndInit%2A> Przy użyciu BeginInit i <xref:System.Data.DataSet.EndInit%2A>metody uniemożliwia użycie przed pełnym zainicjowaniem kontrolki.</xref:System.Data.DataSet.EndInit%2A>"
  syntax:
    content: public void BeginInit ();
    parameters: []
  overload: System.Data.DataSet.BeginInit*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.CaseSensitive
  id: CaseSensitive
  parent: System.Data.DataSet
  langs:
  - csharp
  name: CaseSensitive
  nameWithType: DataSet.CaseSensitive
  fullName: System.Data.DataSet.CaseSensitive
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia wartość wskazującą czy ciągu porównania w <xref href=&quot;System.Data.DataTable&quot;> </xref> obiektów jest rozróżniana wielkość liter."
  remarks: "Właściwości CaseSensitive wpływa na sposób sortowanie, wyszukiwanie i filtrowanie operacje są wykonywane na każdym <xref:System.Data.DataTable>obiektów zawartych w <xref:System.Data.DataSet>przy użyciu <xref:System.Data.DataTable.Select%2A>metody.</xref:System.Data.DataTable.Select%2A> </xref:System.Data.DataSet> </xref:System.Data.DataTable>       Domyślnie ustawienie właściwości CaseSensitive dla <xref:System.Data.DataSet>ustawia również <xref:System.Data.DataTable.CaseSensitive%2A>Właściwości każdego skojarzone <xref:System.Data.DataTable>na tę samą wartość.</xref:System.Data.DataTable> </xref:System.Data.DataTable.CaseSensitive%2A> </xref:System.Data.DataSet>"
  example:
  - "The following example toggles the CaseSensitive property.  \n  \n [!code-vb[Classic WebData DataSet.CaseSensitive Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.ca_1.vb)]"
  syntax:
    content: public bool CaseSensitive { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli porównywania ciągów jest rozróżniana wielkość liter; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Wartość domyślna to <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.CaseSensitive*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Clear
  id: Clear
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Clear()
  nameWithType: DataSet.Clear()
  fullName: System.Data.DataSet.Clear()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Czyści <xref href=&quot;System.Data.DataSet&quot;> </xref> danych przez usunięcie wszystkich wierszy we wszystkich tabelach."
  remarks: "Jeśli <xref:System.Data.DataSet>jest powiązany <xref:System.Xml.XmlDataDocument>Wywołanie wyczyść lub <xref:System.Data.DataTable.Clear%2A?displayProperty=fullName>zgłasza <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.DataTable.Clear%2A?displayProperty=fullName> </xref:System.Xml.XmlDataDocument> </xref:System.Data.DataSet> Aby tego uniknąć, przechodzenie przez każdej tabeli, usunięcie każdego wiersza, w jednym naraz."
  example:
  - "The following example clears the <xref:System.Data.DataSet> of all rows in all tables.  \n  \n [!code-vb[Classic WebData DataSet.Clear Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.cl_1_1.vb)]\n [!code-cs[Classic WebData DataSet.Clear Example#1](~/add/codesnippet/csharp/m-system.data.dataset.cl_1_1.cs)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Data.DataSet.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Clone
  id: Clone
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Clone()
  nameWithType: DataSet.Clone()
  fullName: System.Data.DataSet.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Kopiuje strukturę <xref href=&quot;System.Data.DataSet&quot;> </xref>, łącznie ze wszystkimi <xref href=&quot;System.Data.DataTable&quot;> </xref> schematów, relacje i ograniczeń. Nie kopiuje danych."
  remarks: >-
    > [!NOTE]

    >  If these classes have been subclassed, the clone will also be of the same subclasses.
  example:
  - "The following example creates a clone of a <xref:System.Data.DataSet> object's schema.  \n  \n [!code-cs[Classic WebData DataSet.Clone Example#1](~/add/codesnippet/csharp/m-system.data.dataset.cl_0_1.cs)]\n [!code-vb[Classic WebData DataSet.Clone Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.cl_0_1.vb)]"
  syntax:
    content: public virtual System.Data.DataSet Clone ();
    parameters: []
    return:
      type: System.Data.DataSet
      description: "Nowy <xref href=&quot;System.Data.DataSet&quot;> </xref> z tego samego schematu, ponieważ bieżący <xref href=&quot;System.Data.DataSet&quot;> </xref>, ale żadne dane."
  overload: System.Data.DataSet.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Copy
  id: Copy
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Copy()
  nameWithType: DataSet.Copy()
  fullName: System.Data.DataSet.Copy()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Kopiuje strukturę i dane dla tego <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: ''
  example:
  - "The following example uses the Copy method to create a copy of the original <xref:System.Data.DataSet>.  \n  \n [!code-cs[Classic WebData DataSet.Copy Example#1](~/add/codesnippet/csharp/m-system.data.dataset.copy_1.cs)]\n [!code-vb[Classic WebData DataSet.Copy Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.copy_1.vb)]"
  syntax:
    content: public System.Data.DataSet Copy ();
    parameters: []
    return:
      type: System.Data.DataSet
      description: "Nowy <xref href=&quot;System.Data.DataSet&quot;> </xref> z taką samą strukturę (schematy tabeli, relacji i ograniczeń) oraz dane jako to <xref href=&quot;System.Data.DataSet&quot;> </xref>.       <div class=&quot;alert NOTE&quot;>    Jeśli podklasy tych klas kopia będzie również tego samego podklasy.      </div>"
  overload: System.Data.DataSet.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.CreateDataReader
  id: CreateDataReader
  parent: System.Data.DataSet
  langs:
  - csharp
  name: CreateDataReader()
  nameWithType: DataSet.CreateDataReader()
  fullName: System.Data.DataSet.CreateDataReader()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zwraca <xref href=&quot;System.Data.DataTableReader&quot;> </xref> o jeden wynik na <xref href=&quot;System.Data.DataTable&quot;> </xref>w sekwencji takie same jak tabele są wyświetlane <xref:System.Data.DataSet.Tables*>kolekcji.</xref:System.Data.DataSet.Tables*>"
  remarks: "Aby zapewnić kolejność zestawów wyników w zwróconym <xref:System.Data.DataTableReader>, jeśli <xref:System.Data.DataTable>w <xref:System.Data.DataSet>jest pusta, jego jest reprezentowana przez pusty zestaw wyników w w zwróconym `DataTableReader`.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.DataTableReader>"
  example:
  - "The following example creates three <xref:System.Data.DataTable> instances, and adds each to a <xref:System.Data.DataSet>. The example then passes the filled `DataSet` to a procedure that calls the CreateDataReader method, and proceeds to iterate through all the result sets contained within the <xref:System.Data.DataTableReader>. The example displays the results in the Console window.  \n  \n [!code-vb[DataWorks DataSet.DataTableReader#1](~/add/codesnippet/visualbasic/m-system.data.dataset.cr_0_1.vb)]\n [!code-cs[DataWorks DataSet.DataTableReader#1](~/add/codesnippet/csharp/m-system.data.dataset.cr_0_1.cs)]"
  syntax:
    content: public System.Data.DataTableReader CreateDataReader ();
    parameters: []
    return:
      type: System.Data.DataTableReader
      description: "A <xref href=&quot;System.Data.DataTableReader&quot;> </xref> zawierający zestawy wyników, odpowiadający <xref href=&quot;System.Data.DataTable&quot;> </xref> wystąpień znajdujących się w źródle <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.DataSet.CreateDataReader*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.CreateDataReader(System.Data.DataTable[])
  id: CreateDataReader(System.Data.DataTable[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: CreateDataReader(DataTable[])
  nameWithType: DataSet.CreateDataReader(DataTable[])
  fullName: System.Data.DataSet.CreateDataReader(DataTable[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zwraca <xref href=&quot;System.Data.DataTableReader&quot;> </xref> o jeden wynik na <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "W celu zapewnienia, że kolejność wyniku ustawia w zwróconym <xref:System.Data.DataTableReader>, jeśli <xref:System.Data.DataTable>w <xref:System.Data.DataSet>jest pusta, jego jest reprezentowana przez pusty zestaw wyników w w zwróconym `DataTableReader`.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.DataTableReader> Ponieważ ta wersja przeciążone pozwala podać listę `DataTable` wystąpienia jako parametry, można określić kolejność wyświetlania zestawów wyników w zwróconym `DataTableReader`."
  example:
  - "This example, a Console application, creates three <xref:System.Data.DataTable> instances and adds each to a <xref:System.Data.DataSet>. The example calls the CreateDataReader method and displays the contents of the returned <xref:System.Data.DataTableReader>. Note that the order of the result sets in the `DataTableReader` is controlled by the order of the `DataTable` instances passed as parameters. The example displays the results in the Console window.  \n  \n [!code-vb[DataWorks DataSet.DataTableReaderTables#1](~/add/codesnippet/visualbasic/m-system.data.dataset.cr_1_1.vb)]\n [!code-cs[DataWorks DataSet.DataTableReaderTables#1](~/add/codesnippet/csharp/m-system.data.dataset.cr_1_1.cs)]"
  syntax:
    content: public System.Data.DataTableReader CreateDataReader (System.Data.DataTable[] dataTables);
    parameters:
    - id: dataTables
      type: System.Data.DataTable[]
      description: "Ustawia tablicy DataTables dostarczanie kolejność wyniku w <xref href=&quot;System.Data.DataTableReader&quot;> </xref>."
    return:
      type: System.Data.DataTableReader
      description: "A <xref href=&quot;System.Data.DataTableReader&quot;> </xref> zawierający zestawy wyników, odpowiadający <xref href=&quot;System.Data.DataTable&quot;> </xref> wystąpień znajdujących się w źródle <xref href=&quot;System.Data.DataSet&quot;> </xref>. Zestawy wyników zwróconych znajdują się w kolejności określonej przez <code> dataTables </code> parametru."
  overload: System.Data.DataSet.CreateDataReader*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.DataSetName
  id: DataSetName
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DataSetName
  nameWithType: DataSet.DataSetName
  fullName: System.Data.DataSet.DataSetName
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia nazwę bieżącego <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: ''
  example:
  - "The following example creates a new <xref:System.Data.DataSet> with the given DataSetName.  \n  \n [!code-vb[Classic WebData DataSet.DataSetName Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.da_1.vb)]\n [!code-cs[Classic WebData DataSet.DataSetName Example#1](~/add/codesnippet/csharp/p-system.data.dataset.da_1.cs)]"
  syntax:
    content: public string DataSetName { get; set; }
    return:
      type: System.String
      description: "Nazwa <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.DataSet.DataSetName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.DefaultViewManager
  id: DefaultViewManager
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DefaultViewManager
  nameWithType: DataSet.DefaultViewManager
  fullName: System.Data.DataSet.DefaultViewManager
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera niestandardowy widok danych zawartych w <xref href=&quot;System.Data.DataSet&quot;> </xref> umożliwiają filtrowanie, wyszukiwanie i nawigacja przy użyciu niestandardowego <xref href=&quot;System.Data.DataViewManager&quot;> </xref>."
  remarks: "<xref:System.Data.DataViewManager>Zwrócony przez DefaultViewManager właściwość służy do tworzenia niestandardowych ustawień dla każdego <xref:System.Data.DataTable> <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.DataViewManager>       Po uzyskaniu <xref:System.Data.DataView>z <xref:System.Data.DataTable>, sortowania, filtrowanie, i <xref:System.Data.DataViewRowState>są skonfigurowane zgodnie z ustawieniami we właściwości DefaultViewManager.</xref:System.Data.DataViewRowState> </xref:System.Data.DataTable> </xref:System.Data.DataView>"
  example:
  - "The following example gets the default <xref:System.Data.DataViewManager> for a <xref:System.Data.DataSet>, and adds a <xref:System.Data.DataTable> to the <xref:System.Data.DataTableCollection>.  \n  \n [!code-vb[Classic WebData DataSet.DefaultViewManager Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.de_1.vb)]"
  syntax:
    content: public System.Data.DataViewManager DefaultViewManager { get; }
    return:
      type: System.Data.DataViewManager
      description: "A <xref href=&quot;System.Data.DataViewManager&quot;></xref> object."
  overload: System.Data.DataSet.DefaultViewManager*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)
  id: DetermineSchemaSerializationMode(System.Xml.XmlReader)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DetermineSchemaSerializationMode(XmlReader)
  nameWithType: DataSet.DetermineSchemaSerializationMode(XmlReader)
  fullName: System.Data.DataSet.DetermineSchemaSerializationMode(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Określa <xref:System.Data.DataSet.SchemaSerializationMode*>dla <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.Data.DataSet.SchemaSerializationMode*>"
  remarks: "Tę metodę można wywołać podczas deserializacji typu <xref:System.Data.DataSet>do określenia jego <xref:System.Data.DataSet.SchemaSerializationMode%2A>.</xref:System.Data.DataSet.SchemaSerializationMode%2A> </xref:System.Data.DataSet>"
  syntax:
    content: protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>Wystąpienia przekazywaną podczas deserializacji <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.Xml.XmlReader>"
    return:
      type: System.Data.SchemaSerializationMode
      description: "<xref href=&quot;System.Data.SchemaSerializationMode&quot;> </xref> Wyliczenie wskazujące, czy informacje o schematu została pominięta z ładunku."
  overload: System.Data.DataSet.DetermineSchemaSerializationMode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)
  nameWithType: DataSet.DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Określa <xref:System.Data.DataSet.SchemaSerializationMode*>dla <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.Data.DataSet.SchemaSerializationMode*>"
  remarks: "Tę metodę można wywołać podczas deserializacji typu <xref:System.Data.DataSet>do określenia jego <xref:System.Data.DataSet.SchemaSerializationMode%2A>.</xref:System.Data.DataSet.SchemaSerializationMode%2A> </xref:System.Data.DataSet>"
  syntax:
    content: protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> Który <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>na chroniony Konstruktor &lt;xref:System.Data.DataSet.%23ctor%2A&gt; została wywołana z podczas deserializacji w scenariuszach komunikacji zdalnej."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "<xref:System.Runtime.Serialization.StreamingContext>Który <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>na chroniony Konstruktor &lt;xref:System.Data.DataSet.%23ctor%2A&gt; została wywołana z podczas deserializacji w scenariuszach komunikacji zdalnej.</xref:System.Runtime.Serialization.StreamingContext>"
    return:
      type: System.Data.SchemaSerializationMode
      description: "<xref href=&quot;System.Data.SchemaSerializationMode&quot;> </xref> Wyliczenie wskazujące, czy informacje o schematu została pominięta z ładunku."
  overload: System.Data.DataSet.DetermineSchemaSerializationMode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.EndInit
  id: EndInit
  parent: System.Data.DataSet
  langs:
  - csharp
  name: EndInit()
  nameWithType: DataSet.EndInit()
  fullName: System.Data.DataSet.EndInit()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Kończy się inicjowanie <xref href=&quot;System.Data.DataSet&quot;> </xref> który jest używany w formularzu lub używany przez inny składnik. Inicjowanie występuje w czasie wykonywania."
  remarks: "Środowisku projektowania programu Visual Studio .NET używa tej metody, aby zakończyć inicjowanie składnik, który jest używany w formularzu lub używany przez inny składnik. <xref:System.Data.DataSet.BeginInit%2A>Metoda uruchamia inicjowania.</xref:System.Data.DataSet.BeginInit%2A> Przy użyciu <xref:System.Data.DataSet.BeginInit%2A>i metody EndInit uniemożliwia użycie przed pełnym zainicjowaniem kontrolki.</xref:System.Data.DataSet.BeginInit%2A>"
  syntax:
    content: public void EndInit ();
    parameters: []
  overload: System.Data.DataSet.EndInit*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.EnforceConstraints
  id: EnforceConstraints
  parent: System.Data.DataSet
  langs:
  - csharp
  name: EnforceConstraints
  nameWithType: DataSet.EnforceConstraints
  fullName: System.Data.DataSet.EnforceConstraints
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia wartość wskazującą, czy reguły ograniczeń zostaną wykonane podczas próby żadnej operacji aktualizacji."
  remarks: "Ograniczenia są ustawione na <xref:System.Data.DataTable>poziom (<xref:System.Data.DataTable.Constraints%2A> Właściwości).</xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable> Aby uzyskać więcej informacji o tworzeniu ograniczeń, zobacz [ograniczenia DataTable](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example creates a <xref:System.Data.DataSet> with one table, one column, five rows, and one <xref:System.Data.UniqueConstraint>. The EnforceConstraints property is set to `false` and the values of each row are set to the same value. When the EnforceConstraints property is reset to `true`, a <xref:System.Data.ConstraintException> is generated.  \n  \n [!code-cs[Classic WebData DataSet.EnforceConstraints Example#1](~/add/codesnippet/csharp/p-system.data.dataset.en_1.cs)]\n [!code-vb[Classic WebData DataSet.EnforceConstraints Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.en_1.vb)]"
  syntax:
    content: public bool EnforceConstraints { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli zasady są wymuszane; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Wartość domyślna to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.EnforceConstraints*
  exceptions:
  - type: System.Data.ConstraintException
    commentId: T:System.Data.ConstraintException
    description: "Nie można wymusić jedno lub więcej ograniczeń."
  platform:
  - net462
- uid: System.Data.DataSet.ExtendedProperties
  id: ExtendedProperties
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ExtendedProperties
  nameWithType: DataSet.ExtendedProperties
  fullName: System.Data.DataSet.ExtendedProperties
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera kolekcję użytkownika informacje związane z <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>."
  remarks: "Właściwości rozszerzone właściwości umożliwia przechowywania informacji niestandardowych o `DataSet`. Na przykład może przechowywać czas, kiedy należy odświeżyć dane.       Rozszerzone właściwości musi być typu <xref:System.String>należy je utrwalone po <xref:System.Data.DataSet>jest zapisywany w formacie XML.</xref:System.Data.DataSet> </xref:System.String>"
  example:
  - "The following example adds a custom property to the <xref:System.Data.PropertyCollection> returned by the <xref:System.Data.DataColumn.ExtendedProperties%2A> property. The second example retrieves the custom property.  \n  \n [!code-cs[Classic WebData DataColumn.ExtendedProperties Example#1](~/add/codesnippet/csharp/p-system.data.dataset.ex_1.cs)]\n [!code-vb[Classic WebData DataColumn.ExtendedProperties Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.ex_1.vb)]"
  syntax:
    content: public System.Data.PropertyCollection ExtendedProperties { get; }
    return:
      type: System.Data.PropertyCollection
      description: "A <xref href=&quot;System.Data.PropertyCollection&quot;> </xref> z wszystkie niestandardowe informacje użytkownika."
  overload: System.Data.DataSet.ExtendedProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetChanges
  id: GetChanges
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetChanges()
  nameWithType: DataSet.GetChanges()
  fullName: System.Data.DataSet.GetChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera kopię <xref href=&quot;System.Data.DataSet&quot;> </xref> zawierający wszystkie zmiany wprowadzone od momentu załadowania lub od <xref:System.Data.DataSet.AcceptChanges*>ostatniego została wywołana.</xref:System.Data.DataSet.AcceptChanges*>"
  remarks: "Tworzy nową <xref:System.Data.DataSet>zawierający kopię wszystkich wierszy w oryginalnym <xref:System.Data.DataSet>, która ma oczekujące zmiany.</xref:System.Data.DataSet> </xref:System.Data.DataSet> Ograniczenia relacji może spowodować dodatkowe wiersze bez zmian do dodania do nowej <xref:System.Data.DataSet>Jeśli niezmienione wiersze zawierają kluczy podstawowych odpowiadający klucze obce w zmienionych wierszy.</xref:System.Data.DataSet> Metoda zwraca `null` , jeśli nie ma żadnych wierszy w oryginalnym <xref:System.Data.DataSet>, która ma oczekujące zmiany.</xref:System.Data.DataSet>"
  example:
  - "The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. Two values are changed, and one row is added. A subset of the changed data is created using the GetChanges method. After reconciling errors, a new column is added to the subset, changing the schema. When the <xref:System.Data.DataSet.Merge%2A> method is called with the `missingSchemaAction` set to `MissingSchemaAction.Add`, the new column is added to the original <xref:System.Data.DataSet> object's schema.  \n  \n [!code-cs[Classic WebData DataSet.GetChanges Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ge_0_1.cs)]\n [!code-vb[Classic WebData DataSet.GetChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ge_0_1.vb)]"
  syntax:
    content: public System.Data.DataSet GetChanges ();
    parameters: []
    return:
      type: System.Data.DataSet
      description: "Zmian z tego <xref href=&quot;System.Data.DataSet&quot;> </xref> zawierających akcje wykonać na nim i nowszych można scalić w użyciu <xref:System.Data.DataSet.Merge*>.</xref:System.Data.DataSet.Merge*> Jeśli zostaną znalezione nie zmienionych wierszy, metoda zwraca <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.GetChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetChanges(System.Data.DataRowState)
  id: GetChanges(System.Data.DataRowState)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetChanges(DataRowState)
  nameWithType: DataSet.GetChanges(DataRowState)
  fullName: System.Data.DataSet.GetChanges(DataRowState)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera kopię <xref href=&quot;System.Data.DataSet&quot;> </xref> zawierający wszystkie zmiany wprowadzone od czasu ostatniego załadowania lub od <xref:System.Data.DataSet.AcceptChanges*>została wywołana, filtrowane według <xref href=&quot;System.Data.DataRowState&quot;> </xref>.</xref:System.Data.DataSet.AcceptChanges*>"
  remarks: "<xref:System.Data.DataSet.GetChanges%2A>Metoda jest używana do utworzenia drugiej <xref:System.Data.DataSet>obiekt, który zawiera tylko zmiany wprowadzone do oryginalnej.</xref:System.Data.DataSet> </xref:System.Data.DataSet.GetChanges%2A> Użyj `rowStates` argumentu, aby określić typ zmiany powinien zawierać nowy obiekt.       Ta wartość zwracana kopiowania zaprojektowano w celu scalenia w tej original <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Ograniczenia relacji może spowodować wierszy nadrzędnych oznaczone `Unchanged` do uwzględnienia. Jeśli żadne wiersze z żądaną <xref:System.Data.DataRowState>zostaną znalezione, <xref:System.Data.DataSet.GetChanges%2A>Metoda zwraca `null`.</xref:System.Data.DataSet.GetChanges%2A> </xref:System.Data.DataRowState>"
  example:
  - "The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object, which is then used to update a data source.  \n  \n [!code-vb[Classic WebData DataSet.GetChanges1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ge_2_1.vb)]\n [!code-cs[Classic WebData DataSet.GetChanges1 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ge_2_1.cs)]"
  syntax:
    content: public System.Data.DataSet GetChanges (System.Data.DataRowState rowStates);
    parameters:
    - id: rowStates
      type: System.Data.DataRowState
      description: "Jeden z <xref href=&quot;System.Data.DataRowState&quot;> </xref> wartości."
    return:
      type: System.Data.DataSet
      description: "Filtrowane kopię <xref href=&quot;System.Data.DataSet&quot;> </xref> zawierających akcje wykonać na nim, a następnie scalenia w użyciu <xref:System.Data.DataSet.Merge*>.</xref:System.Data.DataSet.Merge*> Jeśli żadne wiersze z żądaną <xref href=&quot;System.Data.DataRowState&quot;> </xref> zostaną znalezione, metoda zwraca <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.GetChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)
  id: GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetDataSetSchema(XmlSchemaSet)
  nameWithType: DataSet.GetDataSetSchema(XmlSchemaSet)
  fullName: System.Data.DataSet.GetDataSetSchema(XmlSchemaSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera kopię <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> dla zestawu danych."
  syntax:
    content: public static System.Xml.Schema.XmlSchemaComplexType GetDataSetSchema (System.Xml.Schema.XmlSchemaSet schemaSet);
    parameters:
    - id: schemaSet
      type: System.Xml.Schema.XmlSchemaSet
      description: "Określony schemat jest ustawiona."
    return:
      type: System.Xml.Schema.XmlSchemaComplexType
      description: "A copy of <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>."
  overload: System.Data.DataSet.GetDataSetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: DataSet.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Wypełnia obiekt informacje serializacji dane potrzebne do serializacji <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  syntax:
    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "A <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> przechowuje dane serializowane skojarzone z <xref href=&quot;System.Data.DataSet&quot;> </xref>."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "A <xref:System.Runtime.Serialization.StreamingContext>, która zawiera źródło docelowego serializowanym strumieniu skojarzone z <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Data.DataSet.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>info</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Data.DataSet.GetSchemaSerializable
  id: GetSchemaSerializable
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetSchemaSerializable()
  nameWithType: DataSet.GetSchemaSerializable()
  fullName: System.Data.DataSet.GetSchemaSerializable()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zwraca serializacji <xref:System.Xml.Schema.XMLSchema>wystąpienia.</xref:System.Xml.Schema.XMLSchema>"
  syntax:
    content: protected virtual System.Xml.Schema.XmlSchema GetSchemaSerializable ();
    parameters: []
    return:
      type: System.Xml.Schema.XmlSchema
      description: "<xref:System.Xml.Schema.XMLSchema>Wystąpienia.</xref:System.Xml.Schema.XMLSchema>"
  overload: System.Data.DataSet.GetSchemaSerializable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetSerializationData(SerializationInfo,StreamingContext)
  nameWithType: DataSet.GetSerializationData(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.GetSerializationData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Deserializuje dane w tabeli z pliku binarnego lub strumień XML."
  syntax:
    content: protected void GetSerializationData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> Wystąpienia."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Kontekst przesyłania strumieniowego."
  overload: System.Data.DataSet.GetSerializationData*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetXml
  id: GetXml
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetXml()
  nameWithType: DataSet.GetXml()
  fullName: System.Data.DataSet.GetXml()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zwraca reprezentację XML typu danych przechowywanych w <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Wywołanie tej metody jest taki sam jak wywołania <xref:System.Data.DataSet.WriteXml%2A>z <xref:System.Data.XmlWriteMode>ustawioną <xref:System.Data.XmlWriteMode>.</xref:System.Data.XmlWriteMode> </xref:System.Data.XmlWriteMode> </xref:System.Data.DataSet.WriteXml%2A>       GetXml zwraca XML jako ciąg i dlatego wymaga więcej czynności niż <xref:System.Data.DataSet.WriteXml%2A>można zapisać do pliku XML.</xref:System.Data.DataSet.WriteXml%2A>       W przypadku tworzenia <xref:System.Data.DataSet>przy użyciu wnioskowania schematu i serializować ją przy użyciu usługi sieci Web lub XML, kolejność kolumn mogą ulec zmianie.</xref:System.Data.DataSet>"
  example:
  - "The following example creates a <xref:System.Data.DataSet> and <xref:System.Data.DataTable>, adds sample data, and then displays the data in XML format.  \n  \n [!code-cs[Classic WebData DataSet.GetXml Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ge_1_1.cs)]\n [!code-vb[Classic WebData DataSet.GetXml Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ge_1_1.vb)]  \n  \n This sample demonstrates how to write data into an XML file from a DataSet and read data into DataSet from XML. This sample will create one dataset with two tables, use two ways to export a dataset into the XML files (WriteXml and GetXml), and use two ways (ReadXml and InferXmlSchema) to import a dataset from the XML files.  \n  \n Before you compile and run the sample, you need to create four XML files in the sample directory. First, create ElementsWithAttributes.xml:  \n  \n```  \n<MySchool>  \n  <Course CourseID=\"C1045\" Year=\"2012\"  Title=\"Calculus\" Credits=\"4\" DepartmentID=\"7\">New</Course>  \n  <Course CourseID=\"C1061\" Year=\"2012\"  Title=\"Physics\" Credits=\"4\" DepartmentID=\"1\" />  \n  <Department DepartmentID=\"1\" Name=\"Engineering\" Budget=\"350000\" StartDate=\"2007-09-01T00:00:00+08:00\" Administrator=\"2\" />  \n  <Department DepartmentID=\"7\" Name=\"Mathematics\" Budget=\"250024\" StartDate=\"2007-09-01T00:00:00+08:00\" Administrator=\"3\">Cancelled</Department>  \n</MySchool>  \n```  \n  \n Next, create ElementsWithChildElementsxml.xml:  \n  \n```  \n<MySchool>  \n  <Course>  \n    <CourseID>C1045</CourseID>  \n    <Year>2012</Year>  \n    <Title>Calculus</Title>  \n    <Credits>4</Credits>  \n    <DepartmentID>7</DepartmentID>  \n  </Course>  \n  <Course>  \n    <CourseID>C1061</CourseID>  \n    <Year>2012</Year>  \n    <Title>Physics</Title>  \n    <Credits>4</Credits>  \n    <DepartmentID>1</DepartmentID>  \n  </Course>  \n  <Course>  \n    <CourseID>C2021</CourseID>  \n    <Year>2012</Year>  \n    <Title>Composition</Title>  \n    <Credits>3</Credits>  \n    <DepartmentID>2</DepartmentID>  \n  </Course>  \n  <Course>  \n    <CourseID>C2042</CourseID>  \n    <Year>2012</Year>  \n    <Title>Literature</Title>  \n    <Credits>4</Credits>  \n    <DepartmentID>2</DepartmentID>  \n  </Course>  \n  <Department>  \n    <DepartmentID>1</DepartmentID>  \n    <Name>Engineering</Name>  \n    <Budget>350000</Budget>  \n    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  \n    <Administrator>2</Administrator>  \n  </Department>  \n  <Department>  \n    <DepartmentID>2</DepartmentID>  \n    <Name>English</Name>  \n    <Budget>120000</Budget>  \n    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  \n    <Administrator>6</Administrator>  \n  </Department>  \n  <Department>  \n    <DepartmentID>4</DepartmentID>  \n    <Name>Economics</Name>  \n    <Budget>200000</Budget>  \n    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  \n    <Administrator>4</Administrator>  \n  </Department>  \n  <Department>  \n    <DepartmentID>7</DepartmentID>  \n    <Name>Mathematics</Name>  \n    <Budget>250024</Budget>  \n    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  \n    <Administrator>3</Administrator>  \n  </Department>  \n</MySchool>  \n```  \n  \n Now create ElementsWithOnlyAttributes.xml:  \n  \n```  \n<MySchool>  \n  <Course CourseID=\"C1045\" Year=\"2012\"  Title=\"Calculus\" Credits=\"4\" DepartmentID=\"7\" />  \n  <Course CourseID=\"C1061\" Year=\"2012\"  Title=\"Physics\" Credits=\"4\" DepartmentID=\"1\" />  \n  <Department DepartmentID=\"1\" Name=\"Engineering\" Budget=\"350000\" StartDate=\"2007-09-01T00:00:00+08:00\" Administrator=\"2\" />  \n  <Department DepartmentID=\"7\" Name=\"Mathematics\" Budget=\"250024\" StartDate=\"2007-09-01T00:00:00+08:00\" Administrator=\"3\" />  \n</MySchool>  \n```  \n  \n And finally, create RepeatingElements.xml:  \n  \n```  \n<MySchool>  \n  <Course>C1045</Course>  \n  <Course>C1061</Course>  \n  <Department>Engineering</Department>   \n  <Department>Mathematics</Department>  \n</MySchool>  \n```  \n  \n Now you can compile and run the following source code.  [How to Store Data of DataSet into XML File](http://code.msdn.microsoft.com/How-to-Store-Data-of-7b9710f3) has Visual Basic and C# projects for this sample.  \n  \n```  \nusing System;  \nusing System.Data;  \nusing System.IO;  \nusing System.Text;  \nusing System.Xml;  \n  \n// Use WriteXml method to export the dataset.  \nstatic class DataTableHelper {  \n   public static void WriteDataSetToXML(DataSet dataset, String xmlFileName) {  \n      using (FileStream fsWriterStream = new FileStream(xmlFileName, FileMode.Create)) {  \n         using (XmlTextWriter xmlWriter = new XmlTextWriter(fsWriterStream, Encoding.Unicode)) {  \n            dataset.WriteXml(xmlWriter, XmlWriteMode.WriteSchema);  \n            Console.WriteLine(\"Write {0} to the File {1}.\", dataset.DataSetName, xmlFileName);  \n            Console.WriteLine();  \n         }  \n      }  \n   }  \n  \n   // Use GetXml method to get the XML data of the dataset and then export to the file.  \n   public static void GetXMLFromDataSet(DataSet dataset, String xmlFileName) {  \n      using (StreamWriter writer = new StreamWriter(xmlFileName)) {  \n         writer.WriteLine(dataset.GetXml());  \n         Console.WriteLine(\"Get Xml data from {0} and write to the File {1}.\", dataset.DataSetName, xmlFileName);  \n         Console.WriteLine();  \n      }  \n   }  \n  \n   // Use ReadXml method to import the dataset from the dataset.  \n   public static void ReadXmlIntoDataSet(DataSet newDataSet, String xmlFileName) {  \n      using (FileStream fsReaderStream = new FileStream(xmlFileName, FileMode.Open)) {  \n         using (XmlTextReader xmlReader = new XmlTextReader(fsReaderStream)) {  \n            newDataSet.ReadXml(xmlReader, XmlReadMode.ReadSchema);  \n         }  \n      }  \n   }  \n  \n   // Display the columns and value of DataSet.  \n   public static void ShowDataSet(DataSet dataset) {  \n      foreach (DataTable table in dataset.Tables) {  \n         Console.WriteLine(\"Table {0}:\", table.TableName);  \n         ShowDataTable(table);  \n      }  \n   }  \n  \n   // Display the columns and value of DataTable.  \n   private static void ShowDataTable(DataTable table) {  \n      foreach (DataColumn col in table.Columns) {  \n         Console.Write(\"{0,-14}\", col.ColumnName);  \n      }  \n      Console.WriteLine(\"{0,-14}\", \"\");  \n  \n      foreach (DataRow row in table.Rows) {  \n         if (row.RowState == DataRowState.Deleted) {  \n            foreach (DataColumn col in table.Columns) {  \n               if (col.DataType.Equals(typeof(DateTime))) {  \n                  Console.Write(\"{0,-14:d}\", row[col, DataRowVersion.Original]);  \n               }  \n               else if (col.DataType.Equals(typeof(Decimal))) {  \n                  Console.Write(\"{0,-14:C}\", row[col, DataRowVersion.Original]);  \n               }  \n               else {  \n                  Console.Write(\"{0,-14}\", row[col, DataRowVersion.Original]);  \n               }  \n            }  \n         }  \n         else {  \n            foreach (DataColumn col in table.Columns) {  \n               if (col.DataType.Equals(typeof(DateTime))) {  \n                  Console.Write(\"{0,-14:d}\", row[col]);  \n               }  \n               else if (col.DataType.Equals(typeof(Decimal))) {  \n                  Console.Write(\"{0,-14:C}\", row[col]);  \n               }  \n               else {  \n                  Console.Write(\"{0,-14}\", row[col]);  \n               }  \n            }  \n         }  \n         Console.WriteLine(\"{0,-14}\", \"\");  \n      }  \n   }  \n  \n   // Display the columns of DataSet.  \n   public static void ShowDataSetSchema(DataSet dataSet) {  \n      Console.WriteLine(\"{0} contains the following tables:\", dataSet.DataSetName);  \n      foreach (DataTable table in dataSet.Tables) {  \n         Console.WriteLine(\"   Table {0} contains the following columns:\", table.TableName);  \n         ShowDataTableSchema(table);  \n      }  \n   }  \n  \n   // Display the columns of DataTable  \n   private static void ShowDataTableSchema(DataTable table) {  \n      String columnString = \"\";  \n      foreach (DataColumn col in table.Columns) {  \n         columnString += col.ColumnName + \"   \";  \n      }  \n      Console.WriteLine(columnString);  \n   }  \n}  \n  \nclass Program {  \n   static void Main(string[] args) {  \n      // Create the DataSet  \n      DataSet school = new DataSet(\"MySchool\");  \n      DataTable course = CreateCourse();  \n      DataTable department = CreateDepartment();  \n      school.Tables.Add(course);  \n      school.Tables.Add(department);  \n  \n      // Define the constraint between the tables.  \n      ForeignKeyConstraint courseDepartFK = new ForeignKeyConstraint(\"CourseDepartFK\", department.Columns[\"DepartmentID\"], course.Columns[\"DepartmentID\"]);  \n      courseDepartFK.DeleteRule = Rule.Cascade;  \n      courseDepartFK.UpdateRule = Rule.Cascade;  \n      courseDepartFK.AcceptRejectRule = AcceptRejectRule.None;  \n      course.Constraints.Add(courseDepartFK);  \n  \n      InsertDepartments(department);  \n      InsertCourses(course);  \n  \n      // Export the dataset to the XML file.  \n      Console.WriteLine(\"Data of the whole DataSet {0}\", school.DataSetName);  \n      DataTableHelper.ShowDataSet(school);  \n  \n      String xmlWithSchemaFileName = \"WriterXMLWithSchema.xml\";  \n      String xmlGetDataFileName = \"GetXML.xml\";  \n  \n      // Use two ways to export the dataset to the Xml file.  \n      DataTableHelper.WriteDataSetToXML(school, xmlWithSchemaFileName);  \n      DataTableHelper.GetXMLFromDataSet(school, xmlGetDataFileName);  \n  \n      // Import the dataset from the XML file.  \n      // Use two ways to import the dataset from the Xml file.  \n      Console.WriteLine(\"Read Xml document into a new DataSet:\");  \n      DataSet newSchool = new DataSet(\"NewSchool\");  \n      DataTableHelper.ReadXmlIntoDataSet(newSchool, xmlWithSchemaFileName);  \n      DataTableHelper.ShowDataSetSchema(newSchool);  \n      Console.WriteLine();  \n  \n      Console.WriteLine(\"Infer a schema for a DataSet from an XML document:\");  \n      InferDataSetSchemaFromXml();  \n  \n      Console.WriteLine(\"Press any key to exit.\");  \n      Console.ReadKey();  \n   }  \n  \n   static DataTable CreateCourse() {  \n      DataTable course = new DataTable(\"Course\");  \n      DataColumn[] cols ={  \n                              new DataColumn(\"CourseID\",typeof(String)),  \n                              new DataColumn(\"Year\",typeof(Int32)),  \n                              new DataColumn(\"Title\",typeof(String)),  \n                              new DataColumn(\"Credits\",typeof(Int32)),  \n                              new DataColumn(\"DepartmentID\",typeof(Int32))};  \n      course.Columns.AddRange(cols);  \n  \n      course.PrimaryKey = new DataColumn[] { course.Columns[\"CourseID\"], course.Columns[\"Year\"] };  \n  \n      return course;  \n   }  \n  \n   static DataTable CreateDepartment() {  \n      DataTable department = new DataTable(\"Department\");  \n      DataColumn[] cols = {   \n                                new DataColumn(\"DepartmentID\", typeof(Int32)),  \n                                new DataColumn(\"Name\",typeof(String)),  \n                                new DataColumn(\"Budget\",typeof(Decimal)),  \n                                new DataColumn(\"StartDate\",typeof(DateTime)),  \n                                new DataColumn(\"Administrator\",typeof(Int32))};  \n      department.Columns.AddRange(cols);  \n  \n      department.PrimaryKey = new DataColumn[] { department.Columns[\"DepartmentID\"] };  \n  \n      return department;  \n   }  \n  \n   static void InsertDepartments(DataTable department) {  \n      Object[] rows = {   \n                            new Object[]{1,\"Engineering\",350000.00,new DateTime(2007,9,1),2},  \n                            new Object[]{2,\"English\",120000.00,new DateTime(2007,9,1),6},  \n                            new Object[]{4,\"Economics\",200000.00,new DateTime(2007,9,1),4},  \n                            new Object[]{7,\"Mathematics\",250024.00,new DateTime(2007,9,1),3}};  \n  \n      foreach (Object[] row in rows) {  \n         department.Rows.Add(row);  \n      }  \n   }  \n  \n   static void InsertCourses(DataTable course) {  \n      Object[] rows ={  \n                               new Object[]{\"C1045\",2012,\"Calculus\",4,7},  \n                               new Object[]{\"C1061\",2012,\"Physics\",4,1},  \n                               new Object[]{\"C2021\",2012,\"Composition\",3,2},  \n                               new Object[]{\"C2042\",2012,\"Literature\",4,2}};  \n  \n      foreach (Object[] row in rows) {  \n         course.Rows.Add(row);  \n      }  \n   }  \n  \n   // Display the results of inferring schema from four types of XML structures  \n   private static void InferDataSetSchemaFromXml() {  \n      String[] xmlFileNames = {   \n  \n                                    @\"ElementsWithOnlyAttributes.xml\",   \n                                    @\"ElementsWithAttributes.xml\",  \n                                    @\"RepeatingElements.xml\",   \n                                    @\"ElementsWithChildElements.xml\" };  \n  \n      foreach (String xmlFileName in xmlFileNames) {  \n         Console.WriteLine(\"Result of {0}\", Path.GetFileNameWithoutExtension(xmlFileName));  \n         DataSet newSchool = new DataSet();  \n         newSchool.InferXmlSchema(xmlFileName, null);  \n         DataTableHelper.ShowDataSetSchema(newSchool);  \n         Console.WriteLine();  \n      }  \n   }  \n}  \n```"
  syntax:
    content: public string GetXml ();
    parameters: []
    return:
      type: System.String
      description: "Ciąg znaków będący reprezentację danych przechowywanych w <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.DataSet.GetXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetXmlSchema
  id: GetXmlSchema
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetXmlSchema()
  nameWithType: DataSet.GetXmlSchema()
  fullName: System.Data.DataSet.GetXmlSchema()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zwraca schematu XML dla reprezentacji XML dane przechowywane w <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Wywołanie tej metody jest taki sam jak wywołanie <xref:System.Data.DataSet.WriteXmlSchema%2A>, ale tylko podstawowy schemat jest zapisywany.</xref:System.Data.DataSet.WriteXmlSchema%2A>       GetXmlSchema zwraca XML jako ciąg i dlatego wymaga więcej czynności niż <xref:System.Data.DataSet.WriteXmlSchema%2A>można zapisać do pliku XML.</xref:System.Data.DataSet.WriteXmlSchema%2A>       W przypadku tworzenia <xref:System.Data.DataSet>przy użyciu wnioskowania schematu i serializować ją przy użyciu usługi sieci Web lub XML, kolejność kolumn mogą ulec zmianie.</xref:System.Data.DataSet>"
  example:
  - "The following example creates a <xref:System.Data.DataSet> and <xref:System.Data.DataTable>, and then displays the schema in XML format.  \n  \n [!code-cs[Classic WebData DataSet.GetXmlSchema Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ge_3_1.cs)]\n [!code-vb[Classic WebData DataSet.GetXmlSchema Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ge_3_1.vb)]"
  syntax:
    content: public string GetXmlSchema ();
    parameters: []
    return:
      type: System.String
      description: "Ciąg znaków schematu XML dla reprezentacji XML dane przechowywane w <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.DataSet.GetXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.HasChanges
  id: HasChanges
  parent: System.Data.DataSet
  langs:
  - csharp
  name: HasChanges()
  nameWithType: DataSet.HasChanges()
  fullName: System.Data.DataSet.HasChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera wartość wskazującą czy <xref href=&quot;System.Data.DataSet&quot;> </xref> wprowadzono zmiany, w tym wiersze, nowe, usunięte lub zmodyfikowane."
  remarks: ''
  example:
  - "The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object that is then used to update a data source.  \n  \n [!code-vb[Classic WebData DataSet.HasChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ha_0_1.vb)]\n [!code-cs[Classic WebData DataSet.HasChanges Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ha_0_1.cs)]"
  syntax:
    content: public bool HasChanges ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli <xref href=&quot;System.Data.DataSet&quot;> </xref> ma zmian; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.HasChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.HasChanges(System.Data.DataRowState)
  id: HasChanges(System.Data.DataRowState)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: HasChanges(DataRowState)
  nameWithType: DataSet.HasChanges(DataRowState)
  fullName: System.Data.DataSet.HasChanges(DataRowState)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera wartość wskazującą czy <xref href=&quot;System.Data.DataSet&quot;> </xref> zawiera zmiany, w tym nowe, usunięte lub zmodyfikowane wierszy filtrowane według <xref href=&quot;System.Data.DataRowState&quot;> </xref>."
  remarks: "Sprawdź <xref:System.Data.DataSet.HasChanges%2A>Właściwość `DataSet` przed wywołaniem <xref:System.Data.DataSet.GetChanges%2A>metody.</xref:System.Data.DataSet.GetChanges%2A> </xref:System.Data.DataSet.HasChanges%2A>"
  example:
  - "The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object, which is then used to update a data source.  \n  \n [!code-vb[Classic WebData DataSet.GetChanges1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ha_1_1.vb)]\n [!code-cs[Classic WebData DataSet.GetChanges1 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ha_1_1.cs)]"
  syntax:
    content: public bool HasChanges (System.Data.DataRowState rowStates);
    parameters:
    - id: rowStates
      type: System.Data.DataRowState
      description: "Jeden z <xref href=&quot;System.Data.DataRowState&quot;> </xref> wartości."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli <xref href=&quot;System.Data.DataSet&quot;> </xref> ma zmian; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.HasChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.HasErrors
  id: HasErrors
  parent: System.Data.DataSet
  langs:
  - csharp
  name: HasErrors
  nameWithType: DataSet.HasErrors
  fullName: System.Data.DataSet.HasErrors
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera wartość wskazującą, czy występują błędy w żadnym z <xref href=&quot;System.Data.DataTable&quot;> </xref> obiektów w tym <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Każdy <xref:System.Data.DataTable>w <xref:System.Data.DataSet>ma również <xref:System.Data.DataTable.HasErrors%2A>Właściwości.</xref:System.Data.DataTable.HasErrors%2A> </xref:System.Data.DataSet> </xref:System.Data.DataTable> Użyj `HasErrors` właściwość `DataSet` należy sprawdzić, czy wszystkie tabele ma błędów, przed zaewidencjonowaniem poszczególnych <xref:System.Data.DataTable>obiektów.</xref:System.Data.DataTable> Jeśli `DataTable` zawiera błędy, <xref:System.Data.DataTable.GetErrors%2A>Metoda zwraca tablicę <xref:System.Data.DataRow>obiektów zawierających błędy.</xref:System.Data.DataRow> </xref:System.Data.DataTable.GetErrors%2A>"
  example:
  - "The following example uses the HasErrors property to determine whether a <xref:System.Data.DataSet> object contains errors. If so, the errors for each <xref:System.Data.DataRow> in each <xref:System.Data.DataTable> are printed.  \n  \n [!code-cs[Classic WebData DataSet.HasErrors Example#1](~/add/codesnippet/csharp/p-system.data.dataset.ha_1.cs)]\n [!code-vb[Classic WebData DataSet.HasErrors Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.ha_1.vb)]"
  syntax:
    content: public bool HasErrors { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli wszystkie tabela zawiera błąd; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.HasErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])
  id: InferXmlSchema(System.IO.Stream,System.String[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: InferXmlSchema(Stream,String[])
  nameWithType: DataSet.InferXmlSchema(Stream,String[])
  fullName: System.Data.DataSet.InferXmlSchema(Stream,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zastosowanie schematu XML z określonego <xref:System.IO.Stream>do <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.IO.Stream>"
  syntax:
    content: public void InferXmlSchema (System.IO.Stream stream, string[] nsArray);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "<xref uid=&quot;langword_csharp_Stream&quot; name=&quot;Stream&quot; href=&quot;&quot;> </xref> z której mają być odczytywane schematu."
    - id: nsArray
      type: System.String[]
      description: "Tablica ciągów identyfikator URI (Uniform Resource) przestrzeni nazw do wykluczenia z wnioskowania schematu."
  overload: System.Data.DataSet.InferXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])
  id: InferXmlSchema(System.IO.TextReader,System.String[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: InferXmlSchema(TextReader,String[])
  nameWithType: DataSet.InferXmlSchema(TextReader,String[])
  fullName: System.Data.DataSet.InferXmlSchema(TextReader,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zastosowanie schematu XML z określonego <xref:System.IO.TextReader>do <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.IO.TextReader>"
  syntax:
    content: public void InferXmlSchema (System.IO.TextReader reader, string[] nsArray);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "<xref uid=&quot;langword_csharp_TextReader&quot; name=&quot;TextReader&quot; href=&quot;&quot;> </xref> z której mają być odczytywane schematu."
    - id: nsArray
      type: System.String[]
      description: "Tablica ciągów identyfikator URI (Uniform Resource) przestrzeni nazw do wykluczenia z wnioskowania schematu."
  overload: System.Data.DataSet.InferXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.InferXmlSchema(System.String,System.String[])
  id: InferXmlSchema(System.String,System.String[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: InferXmlSchema(String,String[])
  nameWithType: DataSet.InferXmlSchema(String,String[])
  fullName: System.Data.DataSet.InferXmlSchema(String,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zastosowanie schematu XML z określonego pliku do <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  syntax:
    content: public void InferXmlSchema (string fileName, string[] nsArray);
    parameters:
    - id: fileName
      type: System.String
      description: "Nazwa pliku (łącznie ze ścieżką), z której mają być odczytywane schematu."
    - id: nsArray
      type: System.String[]
      description: "Tablica ciągów identyfikator URI (Uniform Resource) przestrzeni nazw do wykluczenia z wnioskowania schematu."
  overload: System.Data.DataSet.InferXmlSchema*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>Nie ustawiono <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])
  id: InferXmlSchema(System.Xml.XmlReader,System.String[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: InferXmlSchema(XmlReader,String[])
  nameWithType: DataSet.InferXmlSchema(XmlReader,String[])
  fullName: System.Data.DataSet.InferXmlSchema(XmlReader,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zastosowanie schematu XML z określonego <xref:System.Xml.XmlReader>do <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.Xml.XmlReader>"
  syntax:
    content: public void InferXmlSchema (System.Xml.XmlReader reader, string[] nsArray);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "<xref uid=&quot;langword_csharp_XMLReader&quot; name=&quot;XMLReader&quot; href=&quot;&quot;> </xref> z której mają być odczytywane schematu."
    - id: nsArray
      type: System.String[]
      description: "Tablica ciągów identyfikator URI (Uniform Resource) przestrzeni nazw do wykluczenia z wnioskowania schematu."
  overload: System.Data.DataSet.InferXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Initialized
  id: Initialized
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Initialized
  nameWithType: DataSet.Initialized
  fullName: System.Data.DataSet.Initialized
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Występuje po <xref href=&quot;System.Data.DataSet&quot;> </xref> został zainicjowany."
  remarks: "Aby uzyskać więcej informacji zobacz <xref:System.Data.DataSet.IsInitialized%2A>.</xref:System.Data.DataSet.IsInitialized%2A>"
  syntax:
    content: public event EventHandler Initialized;
    return:
      type: System.EventHandler
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.InitializeDerivedDataSet
  id: InitializeDerivedDataSet
  parent: System.Data.DataSet
  langs:
  - csharp
  name: InitializeDerivedDataSet()
  nameWithType: DataSet.InitializeDerivedDataSet()
  fullName: System.Data.DataSet.InitializeDerivedDataSet()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Wszystkie dane tabel zestawu danych z pliku binarnego lub strumień XML deserializacji."
  syntax:
    content: protected virtual void InitializeDerivedDataSet ();
    parameters: []
  overload: System.Data.DataSet.InitializeDerivedDataSet*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: IsBinarySerialized(SerializationInfo,StreamingContext)
  nameWithType: DataSet.IsBinarySerialized(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.IsBinarySerialized(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Sprawdza format serializacji reprezentację <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>."
  remarks: "Ten element członkowski obsługuje infrastrukturę .NET Framework i nie jest przeznaczona do użycia bezpośrednio w kodzie."
  syntax:
    content: protected bool IsBinarySerialized (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> Obiektu."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "<xref:System.Runtime.Serialization.StreamingContext>Obiektu.</xref:System.Runtime.Serialization.StreamingContext>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli określony <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> reprezentuje <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> serializacji format binarny, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> inaczej."
  overload: System.Data.DataSet.IsBinarySerialized*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.IsInitialized
  id: IsInitialized
  parent: System.Data.DataSet
  langs:
  - csharp
  name: IsInitialized
  nameWithType: DataSet.IsInitialized
  fullName: System.Data.DataSet.IsInitialized
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera wartość wskazującą, czy <xref href=&quot;System.Data.DataSet&quot;> </xref> został zainicjowany."
  remarks: "Zwraca stan <xref:System.Data.DataSet>podczas jego jest tworzona, na przykład przez program Visual Studio.</xref:System.Data.DataSet> <xref:System.Data.DataSet.BeginInit%2A>Metody ustawia ją na `false` i <xref:System.Data.DataSet.EndInit%2A>metody ustawia ją na `true`.</xref:System.Data.DataSet.EndInit%2A> </xref:System.Data.DataSet.BeginInit%2A>"
  syntax:
    content: public bool IsInitialized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby wskazać składnika została ukończona inicjowania; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.IsInitialized*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])
  id: Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Load(IDataReader,LoadOption,DataTable[])
  nameWithType: DataSet.Load(IDataReader,LoadOption,DataTable[])
  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,DataTable[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Wypełnia <xref href=&quot;System.Data.DataSet&quot;> </xref> z wartości ze źródłem danych przy użyciu dostarczonego <xref href=&quot;System.Data.IDataReader&quot;> </xref>, użycie tablicy <xref href=&quot;System.Data.DataTable&quot;> </xref> instancje, aby podać informacje dotyczące schematu i przestrzeni nazw."
  remarks: "<xref:System.Data.DataTable.Load%2A>Metoda zapewnia technika do wypełniania pojedynczy <xref:System.Data.DataTable>z danych uzyskanych od <xref:System.Data.IDataReader>wystąpienia.</xref:System.Data.IDataReader> </xref:System.Data.DataTable> </xref:System.Data.DataTable.Load%2A> Ta metoda zapewnia te same funkcje, ale pozwala załadować wiele zestawów wyników z <xref:System.Data.IDataReader>na wiele tabel w ramach <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.IDataReader>      > [!NOTE] > Niepowodzenie operacji ładowania <xref:System.InvalidOperationException>ewentualne źródła danych kolumn w przychodzącej `reader` kolumn obliczanych.</xref:System.InvalidOperationException>       `loadOption` Parametr umożliwia określenie sposobu importowanych danych na interakcję z istniejącymi danymi i może być dowolna z wartości z <xref:System.Data.LoadOption>wyliczenie.</xref:System.Data.LoadOption> Zajrzyj do dokumentacji <xref:System.Data.DataTable> <xref:System.Data.DataTable.Load%2A>metody, aby uzyskać więcej informacji na temat używania tego parametru.</xref:System.Data.DataTable.Load%2A></xref:System.Data.DataTable>       `tables` Parametr umożliwia określenie tablicę <xref:System.Data.DataTable>wystąpień wskazującą kolejność tabel odpowiadający każdy wynik ustawić załadowany z czytnika.</xref:System.Data.DataTable> Loadmethod wypełnienia każdego dostarczony <xref:System.Data.DataTable>wystąpienia przy użyciu danych z jednego zestawu wyników z czytnika danych źródła.</xref:System.Data.DataTable> Po ustawieniu każdy wynik Loadmethod przechodzi do następnego wyniku, ustaw w czytniku, dopóki nie istnieją już zestawy wyników.       Schemat rozpoznawanie nazwy dla tej metody jest taka sama, jak następują <xref:System.Data.Common.DbDataAdapter.Fill%2A>metody <xref:System.Data.Common.DbDataAdapter>klasy.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  example:
  - "The following example creates a new <xref:System.Data.DataSet>, adds two <xref:System.Data.DataTable> instances to the <xref:System.Data.DataSet>, and then fills the <xref:System.Data.DataSet> using the Load method, retrieving data from a <xref:System.Data.DataTableReader> that contains two result sets. Finally, the example displays the contents of the tables in the console window.  \n  \n [!code-vb[DataWorks DataSet.LoadTables#1](~/add/codesnippet/visualbasic/54dbea54-b320-4c41-9f97-_1.vb)]\n [!code-cs[DataWorks DataSet.LoadTables#1](~/add/codesnippet/csharp/54dbea54-b320-4c41-9f97-_1.cs)]"
  syntax:
    content: public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.DataTable[] tables);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "<xref href=&quot;System.Data.IDataReader&quot;> </xref> Zapewnia jeden lub więcej zestawów wyników."
    - id: loadOption
      type: System.Data.LoadOption
      description: "Wartość z zakresu od <xref href=&quot;System.Data.LoadOption&quot;> </xref> wyliczenia, która wskazuje, jak wierszy znajdujących się w <xref href=&quot;System.Data.DataTable&quot;> </xref> wystąpień w ramach <xref href=&quot;System.Data.DataSet&quot;> </xref> zostanie połączona z przychodzącego wierszy, które mają taki sam klucz podstawowy."
    - id: tables
      type: System.Data.DataTable[]
      description: "Tablica <xref href=&quot;System.Data.DataTable&quot;> </xref> wystąpienia, z których metody Load pobiera informacje o nazwę i przestrzeń nazw. Każdej z tych tabel musi być członkiem <xref href=&quot;System.Data.DataTableCollection&quot;> </xref> zawarty w tym <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.DataSet.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])
  id: Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Load(IDataReader,LoadOption,String[])
  nameWithType: DataSet.Load(IDataReader,LoadOption,String[])
  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Wypełnia <xref href=&quot;System.Data.DataSet&quot;> </xref> z wartości ze źródłem danych przy użyciu dostarczonego <xref href=&quot;System.Data.IDataReader&quot;> </xref>, przy użyciu tablicy ciągów o podanie nazwy dla tabel w <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>."
  remarks: "<xref:System.Data.DataTable.Load%2A>Metoda zapewnia technika do wypełniania pojedynczy <xref:System.Data.DataTable>z danych uzyskanych od <xref:System.Data.IDataReader>wystąpienia.</xref:System.Data.IDataReader> </xref:System.Data.DataTable> </xref:System.Data.DataTable.Load%2A> Ta metoda zapewnia te same funkcje, ale można załadować wiele zestawów wyników z `IDataReader` na wiele tabel w ramach `DataSet`.      > [!NOTE] > Niepowodzenie operacji ładowania <xref:System.InvalidOperationException>ewentualne źródła danych kolumn w przychodzącej `reader` kolumn obliczanych.</xref:System.InvalidOperationException>       `loadOption` Parametr umożliwia określenie sposobu importowanych danych na interakcję z istniejącymi danymi i może być dowolna z wartości z <xref:System.Data.LoadOption>wyliczenie.</xref:System.Data.LoadOption> Zajrzyj do dokumentacji <xref:System.Data.DataTable.Load%2A>metody, aby uzyskać więcej informacji na temat używania tego parametru.</xref:System.Data.DataTable.Load%2A>       `tables` Parametr umożliwia określenie tablicę nazw tabel, wskazującą kolejność tabel odpowiadający każdy wynik ustawić załadowany z czytnika. `Load` Metoda próbuje odnaleźć tabeli w ramach `DataSet` odnaleźć pasującego do nazwy w tablicy nazw tabel, w kolejności. Jeśli znaleziono zgodnej tabeli tej tabeli jest załadowana zawartość bieżącego zestawu wyników. Jeśli brak dopasowania tabeli zostanie znaleziony, tabela została utworzona przy użyciu nazwy podanej w tabeli nazw tabel i schematu nowa tabela jest wnioskowana na podstawie zestawu wyników. Po każdym zestawu wyników `Load` metody przechodzi do następnego wyniku, ustaw w czytniku, dopóki nie istnieją już zestawy wyników.       Domyślny obszar nazw skojarzone z `DataSet`, jeśli istnieje, jest skojarzony z każdym nowo utworzony `DataTable`. Schemat rozpoznawanie nazwy dla tej metody jest taka sama, jak następują <xref:System.Data.Common.DbDataAdapter.Fill%2A>metody <xref:System.Data.Common.DbDataAdapter>klasy.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  example:
  - "The following Console application example first creates tables and loads data from a reader into a <xref:System.Data.DataSet>, using the `Load` method. The example then adds tables to a <xref:System.Data.DataSet> and attempts to fill the tables with data from a <xref:System.Data.DataTableReader>. In this example, because the parameters passed to the `Load` method indicate a table name that does not exist, the `Load` method creates a new table to match the name passed as a parameter. Once the data has been loaded, the example displays the contents of all its tables in the Console window.  \n  \n [!code-vb[DataWorks DataSet.LoadString#1](~/add/codesnippet/visualbasic/f903cc41-1885-430a-b43a-_1.vb)]\n [!code-cs[DataWorks DataSet.LoadString#1](~/add/codesnippet/csharp/f903cc41-1885-430a-b43a-_1.cs)]"
  syntax:
    content: public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, string[] tables);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "<xref href=&quot;System.Data.IDataReader&quot;> </xref> Zapewnia jeden lub więcej zestawów wyników."
    - id: loadOption
      type: System.Data.LoadOption
      description: "Wartość z zakresu od <xref href=&quot;System.Data.LoadOption&quot;> </xref> wyliczenia, która wskazuje, jak wierszy znajdujących się w <xref href=&quot;System.Data.DataTable&quot;> </xref> wystąpień w ramach <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> zostanie połączona z przychodzącego wierszy, które mają taki sam klucz podstawowy."
    - id: tables
      type: System.String[]
      description: "Tablica ciągów, z którego <xref uid=&quot;langword_csharp_Load&quot; name=&quot;Load&quot; href=&quot;&quot;> </xref> metoda pobiera informacje o nazwie tabeli."
  overload: System.Data.DataSet.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])
  id: Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])
  nameWithType: DataSet.Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])
  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Wypełnia <xref href=&quot;System.Data.DataSet&quot;> </xref> z wartości ze źródłem danych przy użyciu dostarczonego <xref href=&quot;System.Data.IDataReader&quot;> </xref>, użycie tablicy <xref href=&quot;System.Data.DataTable&quot;> </xref> instancje, aby podać informacje dotyczące schematu i przestrzeni nazw."
  remarks: "<xref:System.Data.DataTable.Load%2A>Metoda zapewnia technika do wypełniania pojedynczy <xref:System.Data.DataTable>z danych uzyskanych od <xref:System.Data.IDataReader>wystąpienia.</xref:System.Data.IDataReader> </xref:System.Data.DataTable> </xref:System.Data.DataTable.Load%2A> Ta metoda zapewnia te same funkcje, ale pozwala załadować wiele zestawów wyników z <xref:System.Data.IDataReader>na wiele tabel w ramach <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.IDataReader>      > [!NOTE] > Niepowodzenie operacji ładowania <xref:System.InvalidOperationException>ewentualne źródła danych kolumn w przychodzącej `reader` kolumn obliczanych.</xref:System.InvalidOperationException>       `loadOption` Parametr umożliwia określenie sposobu importowanych danych na interakcję z istniejącymi danymi i może być dowolna z wartości z <xref:System.Data.LoadOption>wyliczenie.</xref:System.Data.LoadOption> Zajrzyj do dokumentacji <xref:System.Data.DataTable> <xref:System.Data.DataTable.Load%2A>metody, aby uzyskać więcej informacji na temat używania tego parametru.</xref:System.Data.DataTable.Load%2A></xref:System.Data.DataTable>       `errorHandler` Parametr jest <xref:System.Data.FillErrorEventHandler>delegata, który odwołuje się do procedury, która jest wywoływana, gdy wystąpi błąd podczas ładowania danych.</xref:System.Data.FillErrorEventHandler> <xref:System.Data.FillErrorEventArgs>Parametr przekazany do procedury dostarcza właściwości, które umożliwiają pobieranie informacji o błędzie, który wystąpił, bieżący wiersz danych, i <xref:System.Data.DataTable>wypełniany.</xref:System.Data.DataTable> </xref:System.Data.FillErrorEventArgs> Za pomocą mechanizm ten delegat, zamiast prostsze bloku try/catch, służy do określania błędu, obsłużyć sytuację i kontynuować przetwarzanie, jeśli chcesz. <xref:System.Data.FillErrorEventArgs>Parametr dostarcza <xref:System.Data.FillErrorEventArgs.Continue%2A>Właściwości: Ustaw tą właściwość na `true` aby wskazać, że zapewnienia obsługi błędów i chcesz kontynuować przetwarzanie; ustaw dla właściwości `false` wskazująca, czy chcesz zatrzymać przetwarzania.</xref:System.Data.FillErrorEventArgs.Continue%2A> </xref:System.Data.FillErrorEventArgs> Należy pamiętać, że ustawienie właściwości `false` powoduje, że kod, która wyzwoliła problem do zgłoszenia wyjątku.       `tables` Parametr umożliwia określenie tablicę <xref:System.Data.DataTable>wystąpień wskazującą kolejność tabel odpowiadający każdy wynik ustawić załadowany z czytnika.</xref:System.Data.DataTable> Loadmethod wypełnienia każdego dostarczony <xref:System.Data.DataTable>wystąpienia przy użyciu danych z jednego zestawu wyników z czytnika danych źródła.</xref:System.Data.DataTable> Po ustawieniu każdy wynik Loadmethod przechodzi do następnego wyniku, ustaw w czytniku, dopóki nie istnieją już zestawy wyników.       Schemat rozpoznawanie nazwy dla tej metody jest taka sama, jak następują <xref:System.Data.Common.DbDataAdapter.Fill%2A>metody <xref:System.Data.Common.DbDataAdapter>klasy.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  example:
  - "The following example adds a table to a <xref:System.Data.DataSet>, and then attempts to use the Load method to load data from a <xref:System.Data.DataTableReader> that contains an incompatible schema. Rather than trapping the error, this example uses a <xref:System.Data.FillErrorEventHandler> delegate to investigate and handle the error. The output is displayed in the console window.  \n  \n [!code-vb[DataWorks DataSet.Load#1](~/add/codesnippet/visualbasic/a22aaabc-2cbb-4c1f-aa4e-_1.vb)]\n [!code-cs[DataWorks DataSet.Load#1](~/add/codesnippet/csharp/a22aaabc-2cbb-4c1f-aa4e-_1.cs)]"
  syntax:
    content: public virtual void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.FillErrorEventHandler errorHandler, System.Data.DataTable[] tables);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "<xref href=&quot;System.Data.IDataReader&quot;> </xref> Zapewnia jeden lub więcej zestawów wyników."
    - id: loadOption
      type: System.Data.LoadOption
      description: "Wartość z zakresu od <xref href=&quot;System.Data.LoadOption&quot;> </xref> wyliczenia, która wskazuje, jak wierszy znajdujących się w <xref href=&quot;System.Data.DataTable&quot;> </xref> wystąpień w ramach <xref href=&quot;System.Data.DataSet&quot;> </xref> zostanie połączona z przychodzącego wierszy, które mają taki sam klucz podstawowy."
    - id: errorHandler
      type: System.Data.FillErrorEventHandler
      description: "A <xref href=&quot;System.Data.FillErrorEventHandler&quot;> </xref> delegata do wywołania, gdy wystąpi błąd podczas ładowania danych."
    - id: tables
      type: System.Data.DataTable[]
      description: "Tablica <xref href=&quot;System.Data.DataTable&quot;> </xref> wystąpienia, z których metody Load pobiera informacje o nazwę i przestrzeń nazw."
  overload: System.Data.DataSet.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Locale
  id: Locale
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Locale
  nameWithType: DataSet.Locale
  fullName: System.Data.DataSet.Locale
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia informacje dotyczące ustawień regionalnych używanych do porównania ciągów wewnątrz tabeli."
  remarks: "Właściwość Locale określa ustawienia regionalne, sortowanie, których dotyczy.       Domyślnie, ustawienia regionalne dla <xref:System.Data.DataSet>ustawia również ustawienia regionalne dla każdego <xref:System.Data.DataTable>obiektu w tym `DataSet` na tę samą wartość.</xref:System.Data.DataTable> </xref:System.Data.DataSet>      > [!NOTE] > W kolumnach, które zawierają wyrażenia, <xref:System.StringComparison>jest używany.</xref:System.StringComparison> <xref:System.StringComparison>Jest ignorowana.</xref:System.StringComparison>"
  example:
  - "The following example gets the <xref:System.Globalization.CultureInfo> for a <xref:System.Data.DataSet> and prints the <xref:System.Globalization.CultureInfo.DisplayName%2A> and <xref:System.Globalization.CultureInfo.EnglishName%2A> properties.  \n  \n [!code-vb[Classic WebData DataSet.Locale Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.lo_1.vb)]"
  syntax:
    content: public System.Globalization.CultureInfo Locale { get; set; }
    return:
      type: System.Globalization.CultureInfo
      description: "A <xref:System.Globalization.CultureInfo>zawierający dane dotyczące ustawień regionalnych komputera użytkownika.</xref:System.Globalization.CultureInfo> Wartość domyślna to <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.Locale*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataRow[])
  id: Merge(System.Data.DataRow[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataRow[])
  nameWithType: DataSet.Merge(DataRow[])
  fullName: System.Data.DataSet.Merge(DataRow[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scala tablicę <xref href=&quot;System.Data.DataRow&quot;> </xref> obiekty do bieżącego <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "<xref:System.Data.DataSet.Merge%2A>Metoda jest używana do scalenia dwa <xref:System.Data.DataSet>obiektów, które mają schematów w znacznym stopniu podobne.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Scalanie jest zwykle używana w aplikacji klienta do zastosować ostatnie zmiany ze źródła danych w istniejącej <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Umożliwia to aplikacji klienta odświeżyć <xref:System.Data.DataSet>przy użyciu najnowszych danych ze źródła danych.</xref:System.Data.DataSet>       <xref:System.Data.DataSet.Merge%2A>Zazwyczaj wywoływana jest metoda na końcu szereg procedur, które obejmują sprawdzanie poprawności zmiany, uzgadnianie błędy, aktualizowanie źródła danych ze zmianami i na koniec odświeżanie istniejącego <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A>       W aplikacji klienckiej jest często mają jednego przycisku, który użytkownik może kliknąć zbiera dane zmienione, a następnie zweryfikuje go przed wysłaniem go z powrotem do składników warstwy środkowej. W tym scenariuszu <xref:System.Data.DataSet.GetChanges%2A>pierwszego wywołania metody.</xref:System.Data.DataSet.GetChanges%2A> Metoda zwraca wartość drugiej <xref:System.Data.DataSet>zoptymalizowane pod kątem sprawdzania poprawności i scalanie.</xref:System.Data.DataSet> Ten drugi <xref:System.Data.DataSet>obiekt zawiera tylko <xref:System.Data.DataTable>i <xref:System.Data.DataRow>obiekty, które zmieniono, wynikające z podzbioru oryginalnej <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow> </xref:System.Data.DataTable> </xref:System.Data.DataSet> Ten podzestaw jest zwykle mniejsze i w związku z tym wydajniej przekazywane z powrotem do składników warstwy środkowej. Składnik warstwy środkowej następnie aktualizuje oryginalne źródło danych zmiany za pomocą procedur składowanych. Warstwy środkowej może wysyłać kopii albo nowy <xref:System.Data.DataSet>zawierającą oryginalnych danych oraz najnowsze dane ze źródła danych (przez ponowne uruchomienie oryginalnego zapytania) lub Wyślij ponownie podzbiór o zmianach, które zostały wprowadzone do niej ze źródła danych.</xref:System.Data.DataSet> (Na przykład, jeśli źródło danych automatycznie tworzy unikatowe wartości kluczy podstawowych, te wartości można propagowane do aplikacji klienckiej.) W obu przypadkach zwróconego <xref:System.Data.DataSet>mogą być scalone aplikacji klienckiej, oryginalne <xref:System.Data.DataSet>z <xref:System.Data.DataSet.Merge%2A>metody.</xref:System.Data.DataSet.Merge%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet>       Gdy <xref:System.Data.DataSet.Merge%2A>Metoda jest wywoływana, schematów dwa <xref:System.Data.DataSet>obiekty są porównywane, ponieważ jest to możliwe, że schematy mogły zostać zmienione.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Na przykład w przypadku business-to-business, nowe kolumny może zostały dodane do schematu XML przez zautomatyzowany proces. Jeśli źródło <xref:System.Data.DataSet>zawiera elementy schematu (dodany <xref:System.Data.DataColumn>obiektów) brakuje w miejscu docelowym, elementy schematu mogą zostać dodane do obiektu docelowego, ustawiając `missingSchemaAction` argument `MissingSchemaAction.Add`.</xref:System.Data.DataColumn> </xref:System.Data.DataSet> W takim przypadku scalonych <xref:System.Data.DataSet>zawiera dodany schemat i dane.</xref:System.Data.DataSet>       Po scaleniu schematów, scalania danych.       Podczas scalania nowe źródło <xref:System.Data.DataSet>do obiektu docelowego, każde źródło wiersze z <xref:System.Data.DataRowState>wartość `Unchanged`, `Modified`, lub `Deleted` są dopasowywane do docelowego wierszy z tej samej wartości klucza podstawowego.</xref:System.Data.DataRowState> </xref:System.Data.DataSet> Źródło wiersze z <xref:System.Data.DataRowState>wartość `Added` są dopasowywane do nowych wierszy docelowych z tej samej wartości klucza podstawowego jako nowe wiersze źródła.</xref:System.Data.DataRowState>       Podczas scalania ograniczenia są wyłączone. Jeśli nie można włączyć ograniczeń na końcu przez scalenie <xref:System.Data.ConstraintException>jest generowana i scalonych danych jest zachowywana, natomiast ograniczenia są wyłączone.</xref:System.Data.ConstraintException> W takim przypadku <xref:System.Data.DataSet.EnforceConstraints%2A>właściwość jest ustawiona na `false`, i błąd zaznaczone wszystkie wiersze, które nie są prawidłowe.</xref:System.Data.DataSet.EnforceConstraints%2A> Błędy muszą zostać rozwiązane przed podjęciem próby zresetowania <xref:System.Data.DataSet.EnforceConstraints%2A>właściwości `true`.</xref:System.Data.DataSet.EnforceConstraints%2A>"
  syntax:
    content: public void Merge (System.Data.DataRow[] rows);
    parameters:
    - id: rows
      type: System.Data.DataRow[]
      description: "Tablica <xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;> </xref> obiekty do scalenia do <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataSet)
  id: Merge(System.Data.DataSet)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataSet)
  nameWithType: DataSet.Merge(DataSet)
  fullName: System.Data.DataSet.Merge(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scala określoną <xref href=&quot;System.Data.DataSet&quot;> </xref> i jego schemat do bieżącego <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>."
  remarks: "Merge — metoda jest używana do scalenia dwa <xref:System.Data.DataSet>obiektów, które mają schematów w znacznym stopniu podobne.</xref:System.Data.DataSet> Scalanie jest zwykle używana w aplikacji klienta do zastosować ostatnie zmiany ze źródła danych w istniejącej <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Umożliwia to aplikacji klienta odświeżyć <xref:System.Data.DataSet>przy użyciu najnowszych danych ze źródła danych.</xref:System.Data.DataSet>       Zazwyczaj wywoływana jest metoda scalania na końcu szereg procedur weryfikacji zmian, uzgadnianie błędy, aktualizowanie źródła danych ze zmianami i na koniec odświeżanie istniejącego <xref:System.Data.DataSet>.</xref:System.Data.DataSet>       W aplikacji klienckiej jest często mają jednego przycisku, który użytkownik może kliknąć zbiera dane zmienione, a następnie zweryfikuje go przed wysłaniem go z powrotem do składników warstwy środkowej. W tym scenariuszu <xref:System.Data.DataSet.GetChanges%2A>pierwszego wywołania metody.</xref:System.Data.DataSet.GetChanges%2A> Metoda zwraca wartość drugiej <xref:System.Data.DataSet>zoptymalizowane pod kątem sprawdzania poprawności i scalanie.</xref:System.Data.DataSet> Ten drugi <xref:System.Data.DataSet>obiekt zawiera tylko <xref:System.Data.DataTable>i <xref:System.Data.DataRow>obiekty, które zmieniono, wynikające z podzbioru oryginalnej <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow> </xref:System.Data.DataTable> </xref:System.Data.DataSet> Ten podzestaw jest zwykle mniejsze i w związku z tym więcej wydajnie przekazywane z powrotem do składników warstwy środkowej. Składnik warstwy środkowej następnie aktualizuje oryginalne źródło danych zmiany za pomocą procedur składowanych. Warstwy środkowej może wysyłać kopii albo nowy <xref:System.Data.DataSet>zawierającą oryginalnych danych oraz najnowsze dane ze źródła danych (przez ponowne uruchomienie oryginalnego zapytania) lub Wyślij ponownie podzbiór o zmianach, które zostały wprowadzone do niej ze źródła danych.</xref:System.Data.DataSet> (Na przykład, jeśli źródło danych automatycznie tworzy unikatowe wartości kluczy podstawowych, te wartości można propagowane do aplikacji klienckiej.) W obu przypadkach zwróconego <xref:System.Data.DataSet>mogą być scalone aplikacji klienckiej, oryginalne <xref:System.Data.DataSet>metodą scalania.</xref:System.Data.DataSet> </xref:System.Data.DataSet>       Gdy wywoływana jest metoda Merge schematów dwa <xref:System.Data.DataSet>obiekty są porównywane, ponieważ jest to możliwe, że schematy mogły zostać zmienione.</xref:System.Data.DataSet> Na przykład w przypadku business-to-business, nowe kolumny może zostały dodane do schematu XML przez zautomatyzowany proces. Jeśli źródło <xref:System.Data.DataSet>zawiera elementy schematu (dodany <xref:System.Data.DataColumn>obiektów) brakuje w miejscu docelowym, elementy schematu mogą zostać dodane do obiektu docelowego, ustawiając `missingSchemaAction` argument `MissingSchemaAction.Add`.</xref:System.Data.DataColumn> </xref:System.Data.DataSet> W takim przypadku scalonych <xref:System.Data.DataSet>zawiera dodany schemat i dane.</xref:System.Data.DataSet>       Po scaleniu schematów, scalania danych.       Podczas scalania nowe źródło <xref:System.Data.DataSet>do obiektu docelowego, każde źródło wiersze z <xref:System.Data.DataRowState>wartość `Unchanged`, `Modified`, lub `Deleted` są dopasowywane do docelowego wierszy z tej samej wartości klucza podstawowego.</xref:System.Data.DataRowState> </xref:System.Data.DataSet> Źródło wiersze z `DataRowState` wartość `Added` są dopasowywane do nowych wierszy docelowych z tej samej wartości klucza podstawowego jako nowe wiersze źródła.       Podczas scalania ograniczenia są wyłączone. Jeśli nie można włączyć ograniczeń na końcu scalania, <xref:System.Data.ConstraintException>jest generowana i scalonych danych jest zachowywana, natomiast ograniczenia są wyłączone.</xref:System.Data.ConstraintException> W takim przypadku <xref:System.Data.DataSet.EnforceConstraints%2A>właściwość jest ustawiona na `false`, i błąd zaznaczone wszystkie wiersze, które nie są prawidłowe.</xref:System.Data.DataSet.EnforceConstraints%2A> Błędy muszą zostać rozwiązane przed podjęciem próby zresetowania <xref:System.Data.DataSet.EnforceConstraints%2A>właściwości `true`.</xref:System.Data.DataSet.EnforceConstraints%2A>"
  example:
  - "The following example uses the <xref:System.Data.DataSet.GetChanges%2A>, Update, and Merge methods on a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DataSet.Merge Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.me_2_1.vb)]\n [!code-cs[Classic WebData DataSet.Merge Example#1](~/add/codesnippet/csharp/m-system.data.dataset.me_2_1.cs)]"
  syntax:
    content: public void Merge (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "<xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> Których danych i schemat zostaną scalone."
  overload: System.Data.DataSet.Merge*
  exceptions:
  - type: System.Data.ConstraintException
    commentId: T:System.Data.ConstraintException
    description: "Nie można włączyć jedno lub więcej ograniczeń."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>dataSet</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataTable)
  id: Merge(System.Data.DataTable)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataTable)
  nameWithType: DataSet.Merge(DataTable)
  fullName: System.Data.DataSet.Merge(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scala określoną <xref href=&quot;System.Data.DataTable&quot;> </xref> i jego schemat do bieżącego <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "<xref:System.Data.DataSet.Merge%2A>Metoda jest używana do scalenia dwa <xref:System.Data.DataSet>obiektów, które mają schematów w znacznym stopniu podobne.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Scalanie jest zwykle używana w aplikacji klienta do zastosować ostatnie zmiany ze źródła danych w istniejącej <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Umożliwia to aplikacji klienta odświeżyć <xref:System.Data.DataSet>przy użyciu najnowszych danych ze źródła danych.</xref:System.Data.DataSet>       <xref:System.Data.DataSet.Merge%2A>Zazwyczaj wywoływana jest metoda na końcu szereg procedur, które obejmują sprawdzanie poprawności zmiany, uzgadnianie błędy, aktualizowanie źródła danych ze zmianami i na koniec odświeżanie istniejącego <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A>       W aplikacji klienckiej jest często mają jednego przycisku, który użytkownik może kliknąć zbiera dane zmienione, a następnie zweryfikuje go przed wysłaniem go z powrotem do składników warstwy środkowej. W tym scenariuszu <xref:System.Data.DataSet.GetChanges%2A>pierwszego wywołania metody.</xref:System.Data.DataSet.GetChanges%2A> Metoda zwraca wartość drugiej <xref:System.Data.DataSet>zoptymalizowane pod kątem sprawdzania poprawności i scalanie.</xref:System.Data.DataSet> Ten drugi <xref:System.Data.DataSet>obiekt zawiera tylko <xref:System.Data.DataTable>i <xref:System.Data.DataRow>obiekty, które zmieniono, wynikające z podzbioru oryginalnej <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow> </xref:System.Data.DataTable> </xref:System.Data.DataSet> Ten podzestaw jest zwykle mniejsze i w związku z tym więcej wydajnie przekazywane z powrotem do składników warstwy środkowej. Składnik warstwy środkowej następnie aktualizuje oryginalne źródło danych zmiany za pomocą procedur składowanych. Warstwy środkowej może wysyłać kopii albo nowy <xref:System.Data.DataSet>zawierającą oryginalnych danych oraz najnowsze dane ze źródła danych (przez ponowne uruchomienie oryginalnego zapytania) lub Wyślij ponownie podzbiór o zmianach, które zostały wprowadzone do niej ze źródła danych.</xref:System.Data.DataSet> (Na przykład, jeśli źródło danych automatycznie tworzy unikatowe wartości kluczy podstawowych, te wartości można propagowane do aplikacji klienckiej.) W obu przypadkach zwróconego <xref:System.Data.DataSet>mogą być scalone aplikacji klienckiej, oryginalne <xref:System.Data.DataSet>z <xref:System.Data.DataSet.Merge%2A>metody.</xref:System.Data.DataSet.Merge%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet>       Gdy <xref:System.Data.DataSet.Merge%2A>Metoda jest wywoływana, schematów dwa <xref:System.Data.DataSet>obiekty są porównywane, ponieważ jest to możliwe, że schematy mogły zostać zmienione.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Na przykład w przypadku business-to-business, nowe kolumny może zostały dodane do schematu XML przez zautomatyzowany proces. Jeśli źródło <xref:System.Data.DataSet>zawiera elementy schematu (dodany <xref:System.Data.DataColumn>obiektów) brakuje w miejscu docelowym, elementy schematu mogą zostać dodane do obiektu docelowego, ustawiając `missingSchemaAction` argument `MissingSchemaAction.Add`.</xref:System.Data.DataColumn> </xref:System.Data.DataSet> W takim przypadku scalonych <xref:System.Data.DataSet>zawiera dodany schemat i dane.</xref:System.Data.DataSet>       Po scaleniu schematów, scalania danych.       Podczas scalania nowe źródło <xref:System.Data.DataSet>do obiektu docelowego, każde źródło wiersze z <xref:System.Data.DataRowState>wartość `Unchanged`, `Modified`, lub `Deleted` są dopasowywane do docelowego wierszy z tej samej wartości klucza podstawowego.</xref:System.Data.DataRowState> </xref:System.Data.DataSet> Źródło wiersze z `DataRowState` wartość `Added` są dopasowywane do nowych wierszy docelowych z tej samej wartości klucza podstawowego jako nowe wiersze źródła.       Podczas scalania ograniczenia są wyłączone. Jeśli nie można włączyć ograniczeń na końcu scalania, <xref:System.Data.ConstraintException>jest generowana i scalonych danych jest zachowywana, natomiast ograniczenia są wyłączone.</xref:System.Data.ConstraintException> W takim przypadku <xref:System.Data.DataSet.EnforceConstraints%2A>właściwość jest ustawiona na `false`, i błąd zaznaczone wszystkie wiersze, które nie są prawidłowe.</xref:System.Data.DataSet.EnforceConstraints%2A> Błędy muszą zostać rozwiązane przed podjęciem próby zresetowania <xref:System.Data.DataSet.EnforceConstraints%2A>właściwości `true`.</xref:System.Data.DataSet.EnforceConstraints%2A>"
  example:
  - "The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. A second <xref:System.Data.DataTable> is created that is identical to the first. Two rows are added to the second table, which is then merged into the <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DataSet.Merge3 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.me_1_1.vb)]\n [!code-cs[Classic WebData DataSet.Merge3 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.me_1_1.cs)]"
  syntax:
    content: public void Merge (System.Data.DataTable table);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "<xref href=&quot;System.Data.DataTable&quot;> </xref> Których danych i schemat zostaną scalone."
  overload: System.Data.DataSet.Merge*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>table</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)
  id: Merge(System.Data.DataSet,System.Boolean)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataSet,Boolean)
  nameWithType: DataSet.Merge(DataSet,Boolean)
  fullName: System.Data.DataSet.Merge(DataSet,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scala określoną <xref href=&quot;System.Data.DataSet&quot;> </xref> i jego schemat do bieżącego <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>, zachowując lub odrzucenie zmian w tym <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> zgodnie z danego argumentu."
  remarks: "<xref:System.Data.DataSet.Merge%2A>Metoda jest używana do scalenia dwa <xref:System.Data.DataSet>obiektów, które mają schematów w znacznym stopniu podobne.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Scalanie jest zwykle używana w aplikacji klienta do zastosować ostatnie zmiany ze źródła danych w istniejącej <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Umożliwia to aplikacji klienta odświeżyć <xref:System.Data.DataSet>przy użyciu najnowszych danych ze źródła danych.</xref:System.Data.DataSet>       <xref:System.Data.DataSet.Merge%2A>Zazwyczaj wywoływana jest metoda na końcu szereg procedur, które obejmują sprawdzanie poprawności zmiany, uzgadnianie błędy, aktualizowanie źródła danych ze zmianami i na koniec odświeżanie istniejącego <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A>       W aplikacji klienckiej jest często mają jednego przycisku, który użytkownik może kliknąć zbiera dane zmienione, a następnie zweryfikuje go przed wysłaniem go z powrotem do składników warstwy środkowej. W tym scenariuszu <xref:System.Data.DataSet.GetChanges%2A>pierwszego wywołania metody.</xref:System.Data.DataSet.GetChanges%2A> Metoda zwraca wartość drugiej <xref:System.Data.DataSet>zoptymalizowane pod kątem sprawdzania poprawności i scalanie.</xref:System.Data.DataSet> Ten drugi <xref:System.Data.DataSet>obiekt zawiera tylko <xref:System.Data.DataTable>i <xref:System.Data.DataRow>obiekty, które zmieniono, wynikające z podzbioru oryginalnej <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow> </xref:System.Data.DataTable> </xref:System.Data.DataSet> Ten podzestaw jest zwykle mniejsze i w związku z tym więcej wydajnie przekazywane z powrotem do składników warstwy środkowej. Składnik warstwy środkowej następnie aktualizuje oryginalne źródło danych zmiany za pomocą procedur składowanych. Warstwy środkowej może wysyłać kopii albo nowy <xref:System.Data.DataSet>zawierającą oryginalnych danych oraz najnowsze dane ze źródła danych (przez ponowne uruchomienie oryginalnego zapytania) lub Wyślij ponownie podzbiór o zmianach, które zostały wprowadzone do niej ze źródła danych.</xref:System.Data.DataSet> (Na przykład, jeśli źródło danych automatycznie tworzy unikatowe wartości kluczy podstawowych, te wartości można propagowane do aplikacji klienckiej.) W obu przypadkach zwróconego <xref:System.Data.DataSet>mogą być scalone aplikacji klienckiej, oryginalne <xref:System.Data.DataSet>z <xref:System.Data.DataSet.Merge%2A>metody.</xref:System.Data.DataSet.Merge%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet>       Gdy <xref:System.Data.DataSet.Merge%2A>Metoda jest wywoływana, schematów dwa <xref:System.Data.DataSet>obiekty są porównywane, ponieważ jest to możliwe, że schematy mogły zostać zmienione.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Na przykład w przypadku business-to-business, nowe kolumny może zostały dodane do schematu XML przez zautomatyzowany proces. Jeśli źródło <xref:System.Data.DataSet>zawiera elementy schematu (dodany <xref:System.Data.DataColumn>obiektów) brakuje w miejscu docelowym, elementy schematu mogą zostać dodane do obiektu docelowego, ustawiając `missingSchemaAction` argument `MissingSchemaAction.Add`.</xref:System.Data.DataColumn> </xref:System.Data.DataSet> W takim przypadku scalonych <xref:System.Data.DataSet>zawiera dodany schemat i dane.</xref:System.Data.DataSet>       Po scaleniu schematów, scalania danych.       Podczas scalania nowe źródło <xref:System.Data.DataSet>do obiektu docelowego, każde źródło wiersze z <xref:System.Data.DataRowState>wartość `Unchanged`, `Modified`, lub `Deleted` są dopasowywane do docelowego wierszy z tej samej wartości klucza podstawowego.</xref:System.Data.DataRowState> </xref:System.Data.DataSet> Źródło wiersze z `DataRowState` wartość `Added` są dopasowywane do nowych wierszy docelowych z tej samej wartości klucza podstawowego jako nowe wiersze źródła.       Podczas scalania ograniczenia są wyłączone. Jeśli nie można włączyć ograniczeń na końcu scalania, <xref:System.Data.ConstraintException>jest generowana i scalonych danych jest zachowywana, natomiast ograniczenia są wyłączone.</xref:System.Data.ConstraintException> W takim przypadku <xref:System.Data.DataSet.EnforceConstraints%2A>właściwość jest ustawiona na `false`, i błąd zaznaczone wszystkie wiersze, które nie są prawidłowe.</xref:System.Data.DataSet.EnforceConstraints%2A> Błędy muszą zostać rozwiązane przed podjęciem próby zresetowania <xref:System.Data.DataSet.EnforceConstraints%2A>właściwości `true`.</xref:System.Data.DataSet.EnforceConstraints%2A>"
  example:
  - "The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. After adding ten rows, two values are changed, and one row is added. A subset of the changed data is created using the <xref:System.Data.DataSet.GetChanges%2A> method. After reconciling errors, the subset data is merged into the original <xref:System.Data.DataSet>.  \n  \n [!code-cs[Classic WebData DataSet.GetChanges Example#1](~/add/codesnippet/csharp/m-system.data.dataset.me_0_1.cs)]\n [!code-vb[Classic WebData DataSet.GetChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.me_0_1.vb)]"
  syntax:
    content: public void Merge (System.Data.DataSet dataSet, bool preserveChanges);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "<xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> Których danych i schemat zostaną scalone."
    - id: preserveChanges
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby zachować zmiany w bieżącym <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)
  id: Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataRow[],Boolean,MissingSchemaAction)
  nameWithType: DataSet.Merge(DataRow[],Boolean,MissingSchemaAction)
  fullName: System.Data.DataSet.Merge(DataRow[],Boolean,MissingSchemaAction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scala tablicę <xref href=&quot;System.Data.DataRow&quot;> </xref> obiekty do bieżącego <xref href=&quot;System.Data.DataSet&quot;> </xref>, zachowując lub odrzucania zmian w <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> i obsługi niezgodne schematu zgodnie z danym argumentów."
  remarks: "<xref:System.Data.DataSet.Merge%2A>Metoda jest używana do scalenia dwa <xref:System.Data.DataSet>obiektów, które mają schematów w znacznym stopniu podobne.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Scalanie jest zwykle używana w aplikacji klienta do zastosować ostatnie zmiany ze źródła danych w istniejącej <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Umożliwia to aplikacji klienta odświeżyć <xref:System.Data.DataSet>przy użyciu najnowszych danych ze źródła danych.</xref:System.Data.DataSet>       <xref:System.Data.DataSet.Merge%2A>Zazwyczaj wywoływana jest metoda na końcu szereg procedur, które obejmują sprawdzanie poprawności zmiany, uzgadnianie błędy, aktualizowanie źródła danych ze zmianami i na koniec odświeżanie istniejącego <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A>       W aplikacji klienckiej jest często mają jednego przycisku, który użytkownik może kliknąć zbiera dane zmienione, a następnie zweryfikuje go przed wysłaniem go z powrotem do składników warstwy środkowej. W tym scenariuszu <xref:System.Data.DataSet.GetChanges%2A>pierwszego wywołania metody.</xref:System.Data.DataSet.GetChanges%2A> Metoda zwraca wartość drugiej <xref:System.Data.DataSet>zoptymalizowane pod kątem sprawdzania poprawności i scalanie.</xref:System.Data.DataSet> Ten drugi <xref:System.Data.DataSet>obiekt zawiera tylko <xref:System.Data.DataTable>i <xref:System.Data.DataRow>obiekty, które zmieniono, wynikające z podzbioru oryginalnej <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow> </xref:System.Data.DataTable> </xref:System.Data.DataSet> Ten podzestaw jest zwykle mniejsze i w związku z tym więcej wydajnie przekazywane z powrotem do składników warstwy środkowej. Składnik warstwy środkowej następnie aktualizuje oryginalne źródło danych zmiany za pomocą procedur składowanych. Warstwy środkowej może wysyłać kopii albo nowy <xref:System.Data.DataSet>zawierającą oryginalnych danych oraz najnowsze dane ze źródła danych (przez ponowne uruchomienie oryginalnego zapytania) lub Wyślij ponownie podzbiór o zmianach, które zostały wprowadzone do niej ze źródła danych.</xref:System.Data.DataSet> (Na przykład, jeśli źródło danych automatycznie tworzy unikatowe wartości kluczy podstawowych, te wartości można propagowane do aplikacji klienckiej.) W obu przypadkach zwróconego <xref:System.Data.DataSet>mogą być scalone aplikacji klienckiej, oryginalne <xref:System.Data.DataSet>z <xref:System.Data.DataSet.Merge%2A>metody.</xref:System.Data.DataSet.Merge%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet>       Aby ułatwić wyjaśnienie <xref:System.Data.DataSet.Merge%2A>metody używamy &quot;target&quot; oznaczającego bieżącego <xref:System.Data.DataSet>i &quot;source&quot; na nazwę drugiego (parametr) <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Element docelowy <xref:System.Data.DataSet>jest więc o nazwie, ponieważ jest obiekt, w którym występuje akcję (scalanie).</xref:System.Data.DataSet> Drugim <xref:System.Data.DataSet>jest nazywany &quot;source&quot;, ponieważ informacje, które zawiera nie ulega zmianie, ale zamiast tego jest scalany bieżącego <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>       Gdy <xref:System.Data.DataSet.Merge%2A>Metoda jest wywoływana, schematów dwa <xref:System.Data.DataSet>obiekty są porównywane, ponieważ jest to możliwe, że schematy mogły zostać zmienione.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Na przykład w przypadku business-to-business, nowe kolumny może zostały dodane do schematu XML przez zautomatyzowany proces. Jeśli źródło <xref:System.Data.DataSet>zawiera elementy schematu (dodany <xref:System.Data.DataColumn>obiektów) brakuje w miejscu docelowym, elementy schematu mogą zostać dodane do obiektu docelowego, ustawiając `missingSchemaAction` argument `MissingSchemaAction.Add`.</xref:System.Data.DataColumn> </xref:System.Data.DataSet> W takim przypadku scalonych <xref:System.Data.DataSet>zawiera dodany schemat i dane.</xref:System.Data.DataSet>       Po scaleniu schematów, scalania danych.       Podczas scalania nowe źródło <xref:System.Data.DataSet>do obiektu docelowego, każde źródło wiersze z <xref:System.Data.DataRowState>wartość `Unchanged`, `Modified`, lub `Deleted` są dopasowywane do docelowego wierszy z tej samej wartości klucza podstawowego.</xref:System.Data.DataRowState> </xref:System.Data.DataSet> Źródło wiersze z `DataRowState` wartość `Added` są dopasowywane do nowych wierszy docelowych z tej samej wartości klucza podstawowego jako nowe wiersze źródła.       Podczas scalania ograniczenia są wyłączone. Jeśli nie można włączyć ograniczeń na końcu scalania, <xref:System.Data.ConstraintException>jest generowana i scalonych danych jest zachowywana, natomiast ograniczenia są wyłączone.</xref:System.Data.ConstraintException> W takim przypadku <xref:System.Data.DataSet.EnforceConstraints%2A>właściwość jest ustawiona na `false`, i błąd zaznaczone wszystkie wiersze, które nie są prawidłowe.</xref:System.Data.DataSet.EnforceConstraints%2A> Błędy muszą zostać rozwiązane przed podjęciem próby zresetowania <xref:System.Data.DataSet.EnforceConstraints%2A>właściwości `true`.</xref:System.Data.DataSet.EnforceConstraints%2A>"
  syntax:
    content: public void Merge (System.Data.DataRow[] rows, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);
    parameters:
    - id: rows
      type: System.Data.DataRow[]
      description: "Tablica <xref href=&quot;System.Data.DataRow&quot;> </xref> obiekty do scalenia do <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>."
    - id: preserveChanges
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby zachować zmiany w <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: missingSchemaAction
      type: System.Data.MissingSchemaAction
      description: "Jeden z <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref> wartości."
  overload: System.Data.DataSet.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)
  id: Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataSet,Boolean,MissingSchemaAction)
  nameWithType: DataSet.Merge(DataSet,Boolean,MissingSchemaAction)
  fullName: System.Data.DataSet.Merge(DataSet,Boolean,MissingSchemaAction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scala określoną <xref href=&quot;System.Data.DataSet&quot;> </xref> i jego schematu z bieżącym <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>, zachowując lub odrzucania zmian w bieżącym <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> i obsługi niezgodne schematu zgodnie z danym argumentów."
  remarks: "<xref:System.Data.DataSet.Merge%2A>Metoda jest używana do scalenia dwa <xref:System.Data.DataSet>obiektów, które mają schematów w znacznym stopniu podobne.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Scalanie jest zwykle używana w aplikacji klienta do zastosować ostatnie zmiany ze źródła danych w istniejącej <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Umożliwia to aplikacji klienta odświeżyć <xref:System.Data.DataSet>przy użyciu najnowszych danych ze źródła danych.</xref:System.Data.DataSet>       <xref:System.Data.DataSet.Merge%2A>Zazwyczaj wywoływana jest metoda na końcu szereg procedur, które obejmują sprawdzanie poprawności zmiany, uzgadnianie błędy, aktualizowanie źródła danych ze zmianami i na koniec odświeżanie istniejącego <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A>       W aplikacji klienckiej jest często mają jednego przycisku, który użytkownik może kliknąć zbiera dane zmienione, a następnie zweryfikuje go przed wysłaniem go z powrotem do składników warstwy środkowej. W tym scenariuszu <xref:System.Data.DataSet.GetChanges%2A>pierwszego wywołania metody.</xref:System.Data.DataSet.GetChanges%2A> Metoda zwraca wartość drugiej <xref:System.Data.DataSet>zoptymalizowane pod kątem sprawdzania poprawności i scalanie.</xref:System.Data.DataSet> Ten drugi <xref:System.Data.DataSet>obiekt zawiera tylko <xref:System.Data.DataTable>i <xref:System.Data.DataRow>obiekty, które zmieniono, wynikające z podzbioru oryginalnej <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow> </xref:System.Data.DataTable> </xref:System.Data.DataSet> Ten podzestaw jest zwykle mniejsze i w związku z tym więcej wydajnie przekazywane z powrotem do składników warstwy środkowej. Składnik warstwy środkowej następnie aktualizuje oryginalne źródło danych zmiany za pomocą procedur składowanych. Warstwy środkowej może wysyłać kopii albo nowy <xref:System.Data.DataSet>zawierającą oryginalnych danych oraz najnowsze dane ze źródła danych (przez ponowne uruchomienie oryginalnego zapytania) lub Wyślij ponownie podzbiór o zmianach, które zostały wprowadzone do niej ze źródła danych.</xref:System.Data.DataSet> (Na przykład, jeśli źródło danych automatycznie tworzy unikatowe wartości kluczy podstawowych, te wartości można propagowane do aplikacji klienckiej.) W obu przypadkach zwróconego <xref:System.Data.DataSet>mogą być scalone aplikacji klienckiej, oryginalne <xref:System.Data.DataSet>z <xref:System.Data.DataSet.Merge%2A>metody.</xref:System.Data.DataSet.Merge%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet>       Aby ułatwić wyjaśnienie <xref:System.Data.DataSet.Merge%2A>metody używamy &quot;target&quot; oznaczającego bieżącego <xref:System.Data.DataSet>i &quot;source&quot; na nazwę drugiego (parametr) <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Element docelowy <xref:System.Data.DataSet>jest więc o nazwie, ponieważ jest obiekt, w którym występuje akcję (scalanie).</xref:System.Data.DataSet> Drugim <xref:System.Data.DataSet>jest nazywany &quot;source&quot;, ponieważ informacje, które zawiera nie ulega zmianie, ale zamiast tego jest scalany bieżącego <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>       Gdy <xref:System.Data.DataSet.Merge%2A>Metoda jest wywoływana, schematów dwa <xref:System.Data.DataSet>obiekty są porównywane, ponieważ jest to możliwe, że schematy mogły zostać zmienione.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Na przykład w przypadku business-to-business, nowe kolumny może zostały dodane do schematu XML przez zautomatyzowany proces. Jeśli źródło <xref:System.Data.DataSet>zawiera elementy schematu (dodany <xref:System.Data.DataColumn>obiektów) brakuje w miejscu docelowym, elementy schematu mogą zostać dodane do obiektu docelowego, ustawiając `missingSchemaAction` argument `MissingSchemaAction.Add`.</xref:System.Data.DataColumn> </xref:System.Data.DataSet> W takim przypadku scalonych <xref:System.Data.DataSet>zawiera dodany schemat i dane.</xref:System.Data.DataSet>       Po scaleniu schematów, scalania danych.       Podczas scalania nowe źródło <xref:System.Data.DataSet>do obiektu docelowego, każde źródło wiersze z <xref:System.Data.DataRowState>wartość `Unchanged`, `Modified`, lub `Deleted` są dopasowywane do docelowego wierszy z tej samej wartości klucza podstawowego.</xref:System.Data.DataRowState> </xref:System.Data.DataSet> Źródło wiersze z `DataRowState` wartość `Added` są dopasowywane do nowych wierszy docelowych z tej samej wartości klucza podstawowego jako nowe wiersze źródła.       Podczas scalania ograniczenia są wyłączone. Jeśli nie można włączyć ograniczeń na końcu scalania, <xref:System.Data.ConstraintException>jest generowana i scalonych danych jest zachowywana, natomiast ograniczenia są wyłączone.</xref:System.Data.ConstraintException> W takim przypadku <xref:System.Data.DataSet.EnforceConstraints%2A>właściwość jest ustawiona na `false`, i błąd zaznaczone wszystkie wiersze, które nie są prawidłowe.</xref:System.Data.DataSet.EnforceConstraints%2A> Błędy muszą zostać rozwiązane przed podjęciem próby zresetowania <xref:System.Data.DataSet.EnforceConstraints%2A>właściwości `true`.</xref:System.Data.DataSet.EnforceConstraints%2A>"
  example:
  - "The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. Two values are changed, and one row is added. A subset of the changed data is created using the <xref:System.Data.DataSet.GetChanges%2A> method. After reconciling errors, a new column is added to the subset, changing the schema. When the <xref:System.Data.DataSet.Merge%2A> method is called with the `missingSchemaAction` set to `MissingSchemaAction.Add`, the new column is added to the original <xref:System.Data.DataSet> object's schema.  \n  \n [!code-cs[Classic WebData DataSet.Merge2 Example#1](~/add/codesnippet/csharp/e5f91548-401c-49b5-ab4b-_1.cs)]\n [!code-vb[Classic WebData DataSet.Merge2 Example#1](~/add/codesnippet/visualbasic/e5f91548-401c-49b5-ab4b-_1.vb)]"
  syntax:
    content: public void Merge (System.Data.DataSet dataSet, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "<xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> Których danych i schemat zostaną scalone."
    - id: preserveChanges
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby zachować zmiany w bieżącym <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: missingSchemaAction
      type: System.Data.MissingSchemaAction
      description: "Jeden z <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref> wartości."
  overload: System.Data.DataSet.Merge*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>dataSet</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  id: Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataTable,Boolean,MissingSchemaAction)
  nameWithType: DataSet.Merge(DataTable,Boolean,MissingSchemaAction)
  fullName: System.Data.DataSet.Merge(DataTable,Boolean,MissingSchemaAction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scala określoną <xref href=&quot;System.Data.DataTable&quot;> </xref> i jego schemat do bieżącego <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>, zachowując lub odrzucania zmian w <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> i obsługi niezgodne schematu zgodnie z danym argumentów."
  remarks: "<xref:System.Data.DataSet.Merge%2A>Metoda jest używana do scalenia dwa <xref:System.Data.DataSet>obiektów, które mają schematów w znacznym stopniu podobne.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Scalanie jest zwykle używana w aplikacji klienta do zastosować ostatnie zmiany ze źródła danych w istniejącej <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Umożliwia to aplikacji klienta odświeżyć <xref:System.Data.DataSet>przy użyciu najnowszych danych ze źródła danych.</xref:System.Data.DataSet>       <xref:System.Data.DataSet.Merge%2A>Zazwyczaj wywoływana jest metoda na końcu szereg procedur, które obejmują sprawdzanie poprawności zmiany, uzgadnianie błędy, aktualizowanie źródła danych ze zmianami i na koniec odświeżanie istniejącego <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A>       zakres przechowywania aplikacji klienckiej, jest często mają jednego przycisku, który użytkownik może kliknąć zbiera dane zmienione, a następnie zweryfikuje go przed wysłaniem go z powrotem do składników warstwy środkowej. W tym scenariuszu <xref:System.Data.DataSet.GetChanges%2A>pierwszego wywołania metody.</xref:System.Data.DataSet.GetChanges%2A> Metoda zwraca wartość drugiej <xref:System.Data.DataSet>zoptymalizowane pod kątem sprawdzania poprawności i scalanie.</xref:System.Data.DataSet> Ten drugi <xref:System.Data.DataSet>obiekt zawiera tylko <xref:System.Data.DataTable>i <xref:System.Data.DataRow>obiekty, które zmieniono, wynikające z podzbioru oryginalnej <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow> </xref:System.Data.DataTable> </xref:System.Data.DataSet> Ten podzestaw jest zwykle mniejsze i w związku z tym więcej wydajnie przekazywane z powrotem do składników warstwy środkowej. Składnik warstwy środkowej następnie aktualizuje oryginalne źródło danych zmiany za pomocą procedur składowanych. Warstwy środkowej może wysyłać kopii albo nowy <xref:System.Data.DataSet>zawierającą oryginalnych danych oraz najnowsze dane ze źródła danych (przez ponowne uruchomienie oryginalnego zapytania) lub Wyślij ponownie podzbiór o zmianach, które zostały wprowadzone do niej ze źródła danych.</xref:System.Data.DataSet> (Na przykład, jeśli źródło danych automatycznie tworzy unikatowe wartości kluczy podstawowych, te wartości można propagowane do aplikacji klienckiej.) W obu przypadkach zwróconego <xref:System.Data.DataSet>mogą być scalone aplikacji klienckiej, oryginalne <xref:System.Data.DataSet>z <xref:System.Data.DataSet.Merge%2A>metody.</xref:System.Data.DataSet.Merge%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet>       Gdy <xref:System.Data.DataSet.Merge%2A>Metoda jest wywoływana, schematów dwa <xref:System.Data.DataSet>obiekty są porównywane, ponieważ jest to możliwe, że schematy mogły zostać zmienione.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Na przykład w przypadku business-to-business, nowe kolumny może zostały dodane do schematu XML przez zautomatyzowany proces. Jeśli źródło <xref:System.Data.DataSet>zawiera elementy schematu (dodany <xref:System.Data.DataColumn>obiektów) brakuje w miejscu docelowym, elementy schematu mogą zostać dodane do obiektu docelowego, ustawiając `missingSchemaAction` argument `MissingSchemaAction.Add`.</xref:System.Data.DataColumn> </xref:System.Data.DataSet> W takim przypadku scalonych <xref:System.Data.DataSet>zawiera dodany schemat i dane.</xref:System.Data.DataSet>       Po scaleniu schematów, scalania danych.       Podczas scalania nowe źródło <xref:System.Data.DataSet>do obiektu docelowego, każde źródło wiersze z <xref:System.Data.DataRowState>wartość `Unchanged`, `Modified`, lub `Deleted` są dopasowywane do docelowego wierszy z tej samej wartości klucza podstawowego.</xref:System.Data.DataRowState> </xref:System.Data.DataSet> Źródło wiersze z `DataRowState` wartość `Added` są dopasowywane do nowych wierszy docelowych z tej samej wartości klucza podstawowego jako nowe wiersze źródła.       Podczas scalania ograniczenia są wyłączone. Jeśli nie można włączyć ograniczeń na końcu scalania, <xref:System.Data.ConstraintException>jest generowana i scalonych danych jest zachowywana, natomiast ograniczenia są wyłączone.</xref:System.Data.ConstraintException> W takim przypadku <xref:System.Data.DataSet.EnforceConstraints%2A>właściwość jest ustawiona na `false`, i błąd zaznaczone wszystkie wiersze, które nie są prawidłowe.</xref:System.Data.DataSet.EnforceConstraints%2A> Błędy muszą zostać rozwiązane przed podjęciem próby zresetowania <xref:System.Data.DataSet.EnforceConstraints%2A>właściwości `true`.</xref:System.Data.DataSet.EnforceConstraints%2A>"
  example:
  - "The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. A second <xref:System.Data.DataTable> is created that is nearly identical to the first except that a new `DataColumn` is added to the table. Two rows are added to the second table, which is then merged into the <xref:System.Data.DataSet> with the `preserveChanges` argument set to `false`, and the `missingSchemaAction` argument set to `MissingSchemaAction.Add`.  \n  \n [!code-cs[Classic WebData DataSet.Merge4 Example#1](~/add/codesnippet/csharp/a63745f5-1a9e-4fc7-9c61-_1.cs)]\n [!code-vb[Classic WebData DataSet.Merge4 Example#1](~/add/codesnippet/visualbasic/a63745f5-1a9e-4fc7-9c61-_1.vb)]"
  syntax:
    content: public void Merge (System.Data.DataTable table, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "<xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref> Których danych i schemat zostaną scalone."
    - id: preserveChanges
      type: System.Boolean
      description: "Jeden z <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref> wartości."
    - id: missingSchemaAction
      type: System.Data.MissingSchemaAction
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby zachować zmiany w <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.Merge*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>dataSet</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Data.DataSet.MergeFailed
  id: MergeFailed
  parent: System.Data.DataSet
  langs:
  - csharp
  name: MergeFailed
  nameWithType: DataSet.MergeFailed
  fullName: System.Data.DataSet.MergeFailed
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Występuje, gdy źródłowe i docelowe <xref href=&quot;System.Data.DataRow&quot;> </xref> mieć tej samej wartości klucza podstawowego, a <xref:System.Data.DataSet.EnforceConstraints*>jest ustawiona na true.</xref:System.Data.DataSet.EnforceConstraints*>"
  remarks: 'Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [NIB: Korzystanie z zdarzenia](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).'
  example:
  - "The following example demonstrates the use of the MergeFailed event.  \n  \n [!code-vb[Classic WebData DataSet.MergeFailed Example#1](~/add/codesnippet/visualbasic/e-system.data.dataset.me_1.vb)]\n [!code-cs[Classic WebData DataSet.MergeFailed Example#1](~/add/codesnippet/csharp/e-system.data.dataset.me_1.cs)]"
  syntax:
    content: public event System.Data.MergeFailedEventHandler MergeFailed;
    return:
      type: System.Data.MergeFailedEventHandler
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Namespace
  id: Namespace
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Namespace
  nameWithType: DataSet.Namespace
  fullName: System.Data.DataSet.Namespace
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia obszar nazw <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Właściwość Namespace jest używana podczas odczytywania i zapisywania XML dokumentu do <xref:System.Data.DataSet>przy użyciu <xref:System.Data.DataSet.ReadXml%2A>, <xref:System.Data.DataSet.WriteXml%2A>, <xref:System.Data.DataSet.ReadXmlSchema%2A>, lub <xref:System.Data.DataSet.WriteXmlSchema%2A>metody.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet>       Przestrzeń nazw dokumentu XML służy do określania zakresu atrybuty i elementy odczytywana do <xref:System.Data.DataSet>.</xref:System.Data.DataSet> XML Na przykład jeśli <xref:System.Data.DataSet>zawiera schemat z dokumentu z przestrzenią nazw &quot;Moja firma,&quot; odczytano i próby odczytania danych tylko z dokumentu z różnych przestrzeni nazw, dane, które nie odpowiadają istniejący schemat zostanie zignorowany.</xref:System.Data.DataSet>"
  example:
  - "The following example sets the <xref:System.Data.DataSet.Prefix%2A> before calling the <xref:System.Data.DataSet.ReadXml%2A> method.  \n  \n [!code-vb[Classic WebData DataSet.Namespace Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.na_1.vb)]\n [!code-cs[Classic WebData DataSet.Namespace Example#1](~/add/codesnippet/csharp/p-system.data.dataset.na_1.cs)]"
  syntax:
    content: public string Namespace { get; set; }
    return:
      type: System.String
      description: "Przestrzeń nazw <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.DataSet.Namespace*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Przestrzeń nazw zawiera już dane."
  platform:
  - net462
- uid: System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  id: OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataSet.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataSet.OnPropertyChanging(PropertyChangedEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zgłasza zdarzenie OnPropertyChanging."
  remarks: 'Wywoływanie zdarzeń wywołuje program obsługi zdarzeń za pośrednictwem pełnomocnika. Aby uzyskać ogólne informacje, zobacz [NIB: wywoływanie zdarzeń](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);
    parameters:
    - id: pcevent
      type: System.ComponentModel.PropertyChangedEventArgs
      description: "A <xref:System.ComponentModel.PropertyChangedEventArgs>zawierający dane zdarzenia.</xref:System.ComponentModel.PropertyChangedEventArgs>"
  overload: System.Data.DataSet.OnPropertyChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)
  id: OnRemoveRelation(System.Data.DataRelation)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: OnRemoveRelation(DataRelation)
  nameWithType: DataSet.OnRemoveRelation(DataRelation)
  fullName: System.Data.DataSet.OnRemoveRelation(DataRelation)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Występuje, gdy <xref href=&quot;System.Data.DataRelation&quot;> </xref> obiekt jest usunięty z <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "Ta metoda powinna zostać zastąpiona przez podklasy, aby ograniczyć tabel usuwana"
  syntax:
    content: protected virtual void OnRemoveRelation (System.Data.DataRelation relation);
    parameters:
    - id: relation
      type: System.Data.DataRelation
      description: "<xref href=&quot;System.Data.DataRelation&quot;> </xref> Usuwana."
  overload: System.Data.DataSet.OnRemoveRelation*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.OnRemoveTable(System.Data.DataTable)
  id: OnRemoveTable(System.Data.DataTable)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: OnRemoveTable(DataTable)
  nameWithType: DataSet.OnRemoveTable(DataTable)
  fullName: System.Data.DataSet.OnRemoveTable(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Występuje, gdy <xref href=&quot;System.Data.DataTable&quot;> </xref> zostanie usunięty z <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Ta metoda może zostać zastąpiona przez podklasy ograniczyć tabele przed usunięciem."
  example:
  - "The following example shows a class derived from the <xref:System.Data.DataSet> with the OnRemoveTable method overridden.  \n  \n [!code-vb[Classic WebData DataSet.OnRemoveTable Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.on_1.vb)]\n [!code-cs[Classic WebData DataSet.OnRemoveTable Example#1](~/add/codesnippet/csharp/m-system.data.dataset.on_1.cs)]"
  syntax:
    content: protected virtual void OnRemoveTable (System.Data.DataTable table);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "<xref href=&quot;System.Data.DataTable&quot;> </xref> Usuwana."
  overload: System.Data.DataSet.OnRemoveTable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Prefix
  id: Prefix
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Prefix
  nameWithType: DataSet.Prefix
  fullName: System.Data.DataSet.Prefix
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia XML prefiks tego aliasów przestrzeni nazw <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Właściwość prefiks jest używany w dokumencie XML Aby zidentyfikować elementy, które należą do przestrzeni nazw <xref:System.Data.DataSet>obiektu (jak ustawione przez <xref:System.Data.DataSet.Namespace%2A>Właściwości).</xref:System.Data.DataSet.Namespace%2A> </xref:System.Data.DataSet>"
  example:
  - "The following example sets the Prefix before calling the <xref:System.Data.DataSet.ReadXml%2A> method.  \n  \n [!code-vb[Classic WebData DataSet.Namespace Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.pr_1.vb)]\n [!code-cs[Classic WebData DataSet.Namespace Example#1](~/add/codesnippet/csharp/p-system.data.dataset.pr_1.cs)]"
  syntax:
    content: public string Prefix { get; set; }
    return:
      type: System.String
      description: "Prefiks XML <xref href=&quot;System.Data.DataSet&quot;> </xref> przestrzeni nazw."
  overload: System.Data.DataSet.Prefix*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.RaisePropertyChanging(System.String)
  id: RaisePropertyChanging(System.String)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: RaisePropertyChanging(String)
  nameWithType: DataSet.RaisePropertyChanging(String)
  fullName: System.Data.DataSet.RaisePropertyChanging(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Wysyła powiadomienie, że określony <xref href=&quot;System.Data.DataSet&quot;> </xref> właściwość ma zostać zmieniona."
  syntax:
    content: protected void RaisePropertyChanging (string name);
    parameters:
    - id: name
      type: System.String
      description: "Nazwa właściwości, która ma zostać zmieniona."
  overload: System.Data.DataSet.RaisePropertyChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.IO.Stream)
  id: ReadXml(System.IO.Stream)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(Stream)
  nameWithType: DataSet.ReadXml(Stream)
  fullName: System.Data.DataSet.ReadXml(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Odczytuje XML: schemat i dane do <xref href=&quot;System.Data.DataSet&quot;> </xref> przy użyciu określonego &lt;xref:System.IO.Stream?displayProperty=fullName&gt;."
  remarks: "<xref:System.Data.DataSet.ReadXml%2A>Metoda zapewnia sposób odczytać tylko dane lub zarówno danych i schematu do <xref:System.Data.DataSet>z dokumentu XML, podczas gdy <xref:System.Data.DataSet.ReadXmlSchema%2A>Metoda odczytuje tylko schemat.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> Aby odczytać zarówno danych, jak i schematu, użyj jednej z `ReadXML` przeciążeń, które zawiera `mode` parametru i ustaw dla niego wartość `ReadSchema`.       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataSet.WriteXml%2A>i <xref:System.Data.DataSet.WriteXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Można zapisać danych XML lub schemat i dane z `DataSet`, użyj `WriteXml` metody. Aby zapisać tylko schemat, należy użyć `WriteXmlSchema` metody.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Jeśli określono schemat w tekście, schematu w wierszu służy do rozszerzania istniejącej struktury relacyjne przed załadowaniem danych. Jeśli występują konflikty (na przykład tej samej kolumny w tej samej tabeli zdefiniowane przy użyciu różnych typów danych) jest wyjątek.       Jeśli schemat nie-line jest określony, struktura relacyjnej został rozszerzony za pośrednictwem wnioskowania odpowiednio do potrzeb zgodnie ze struktury dokumentu XML. Jeśli schemat nie może zostać rozszerzony za pomocą wnioskowania, aby udostępnić wszystkie dane, jest wyjątek.      > [!NOTE] > `DataSet` Nie wiąże — element XML z odpowiadającymi mu dostawcami `DataColumn` lub `DataTable` po prawidłowe znaki XML, takich jak (&quot;_&quot;) są anulowane w serializacji XML. `DataSet` Się tylko specjalne niedozwolone znaki XML w nazwach elementów XML i dlatego tylko zajmowane są takie same. Gdy będą miały zmienione znaczenie prawidłowe znaki w nazwie elementu XML, element jest ignorowany podczas przetwarzania.       Jeśli schemat XML <xref:System.Data.DataSet>obejmuje `targetNamespace`, nie można odczytać danych i wyjątków mogą wystąpić podczas wywoływania metody <xref:System.Data.DataSet.ReadXml%2A>załadować <xref:System.Data.DataSet>XML, który zawiera elementy, bez kwalifikacji przestrzeni nazw.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> Aby odczytać niekwalifikowane elementy, ustaw `elementFormDefault` równa &quot;kwalifikowana&quot; schematów XML, jak pokazano w poniższym przykładzie.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```      > [!NOTE]> Jeśli schemat dla Twojej <xref:System.Data.DataSet>zawiera elementy z tej samej nazwy, ale innego typu, w tej samej przestrzeni nazw, jest zgłaszany wyjątek podczas próby odczytu schematu do <xref:System.Data.DataSet>z <xref:System.Data.DataSet.ReadXml%2A>, określając `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Ten wyjątek nie występuje, jeśli używasz .NET Framework w wersji 1.0."
  example:
  - "The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.  \n  \n [!code-cs[Classic WebData DataSet.ReadXml1 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_7_1.cs)]\n [!code-vb[Classic WebData DataSet.ReadXml1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_7_1.vb)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Obiekt, który jest pochodną <xref:System.IO.Stream>.</xref:System.IO.Stream>"
    return:
      type: System.Data.XmlReadMode
      description: "<xref href=&quot;System.Data.XmlReadMode&quot;> </xref> Używany do odczytu danych."
  overload: System.Data.DataSet.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.IO.TextReader)
  id: ReadXml(System.IO.TextReader)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(TextReader)
  nameWithType: DataSet.ReadXml(TextReader)
  fullName: System.Data.DataSet.ReadXml(TextReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Odczytuje XML: schemat i dane do <xref href=&quot;System.Data.DataSet&quot;> </xref> przy użyciu określonego &lt;xref:System.IO.TextReader?displayProperty=fullName&gt;."
  remarks: "<xref:System.Data.DataSet.ReadXml%2A>Metoda zapewnia sposób odczytać tylko dane lub zarówno danych i schematu do <xref:System.Data.DataSet>z dokumentu XML, podczas gdy <xref:System.Data.DataSet.ReadXmlSchema%2A>Metoda odczytuje tylko schemat.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> Aby odczytać zarówno danych, jak i schematu, użyj jednej z `ReadXML` przeciążeń, które zawiera `mode` parametru i ustaw dla niego wartość `ReadSchema`.       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataSet.WriteXml%2A>i <xref:System.Data.DataSet.WriteXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Można zapisać danych XML lub schemat i dane z `DataSet`, użyj `WriteXml` metody. Aby zapisać tylko schemat, należy użyć `WriteXmlSchema` metody.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Jeśli określono schemat w tekście, schematu w wierszu służy do rozszerzania istniejącej struktury relacyjne przed załadowaniem danych. Jeśli występują konflikty (na przykład tej samej kolumny w tej samej tabeli zdefiniowane przy użyciu różnych typów danych) jest wyjątek.       Jeśli schemat nie-line jest określony, struktura relacyjnej został rozszerzony za pośrednictwem wnioskowania odpowiednio do potrzeb zgodnie ze struktury dokumentu XML. Jeśli schemat nie może zostać rozszerzony za pomocą wnioskowania, aby udostępnić wszystkie dane, jest wyjątek.      > [!NOTE] > `DataSet` Nie wiąże — element XML z odpowiadającymi mu dostawcami `DataColumn` lub `DataTable` po prawidłowe znaki XML, takich jak (&quot;_&quot;) są anulowane w serializacji XML. `DataSet` Się tylko specjalne niedozwolone znaki XML w nazwach elementów XML i dlatego tylko zajmowane są takie same. Gdy będą miały zmienione znaczenie prawidłowe znaki w nazwie elementu XML, element jest ignorowany podczas przetwarzania.       Jeśli schemat XML <xref:System.Data.DataSet>obejmuje `targetNamespace`, nie można odczytać danych i wyjątków mogą wystąpić podczas wywoływania metody <xref:System.Data.DataSet.ReadXml%2A>załadować <xref:System.Data.DataSet>XML, który zawiera elementy, bez kwalifikacji przestrzeni nazw.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> Aby odczytać niekwalifikowane elementy, ustaw `elementFormDefault` równa &quot;kwalifikowana&quot; schematów XML, jak pokazano w poniższym przykładzie.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```Klasy, które dziedziczą z <xref:System.IO.TextReader>obejmują klasy <xref:System.IO.StreamReader>i <xref:System.IO.StringReader>klasy.</xref:System.IO.StringReader> </xref:System.IO.StreamReader> </xref:System.IO.TextReader>      > [!NOTE] > Jeśli schemat dla Twojego <xref:System.Data.DataSet>zawiera elementy z tej samej nazwy, ale innego typu, w tej samej przestrzeni nazw, jest zgłaszany wyjątek podczas próby odczytu schematu do <xref:System.Data.DataSet>z <xref:System.Data.DataSet.ReadXml%2A>, określając `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Ten wyjątek nie występuje, jeśli używasz .NET Framework w wersji 1.0."
  example:
  - "The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.  \n  \n [!code-vb[Classic WebData DataSet.ReadXml2 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_3_1.vb)]\n [!code-cs[Classic WebData DataSet.ReadXml2 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_3_1.cs)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "<xref uid=&quot;langword_csharp_TextReader&quot; name=&quot;TextReader&quot; href=&quot;&quot;> </xref> z której mają być odczytywane schemat i dane."
    return:
      type: System.Data.XmlReadMode
      description: "<xref href=&quot;System.Data.XmlReadMode&quot;> </xref> Używany do odczytu danych."
  overload: System.Data.DataSet.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.String)
  id: ReadXml(System.String)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(String)
  nameWithType: DataSet.ReadXml(String)
  fullName: System.Data.DataSet.ReadXml(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Odczytuje XML: schemat i dane do <xref href=&quot;System.Data.DataSet&quot;> </xref> przy użyciu określonego pliku."
  remarks: "<xref:System.Data.DataSet.ReadXml%2A>Metoda zapewnia sposób odczytać tylko dane lub zarówno danych i schematu do <xref:System.Data.DataSet>z dokumentu XML, podczas gdy <xref:System.Data.DataSet.ReadXmlSchema%2A>Metoda odczytuje tylko schemat.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> Aby odczytać zarówno danych, jak i schematu, użyj jednej z `ReadXML` przeciążeń, które zawiera `mode` parametru i ustaw dla niego wartość `ReadSchema`.       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataSet.WriteXml%2A>i <xref:System.Data.DataSet.WriteXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Można zapisać danych XML lub schemat i dane z `DataSet`, użyj `WriteXml` metody. Aby zapisać tylko schemat, należy użyć `WriteXmlSchema` metody.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Jeśli określono schemat w tekście, schematu w wierszu służy do rozszerzania istniejącej struktury relacyjne przed załadowaniem danych. Jeśli występują konflikty (na przykład tej samej kolumny w tej samej tabeli zdefiniowane przy użyciu różnych typów danych) jest wyjątek.       Jeśli schemat nie-line jest określony, struktura relacyjnej został rozszerzony za pośrednictwem wnioskowania odpowiednio do potrzeb zgodnie ze struktury dokumentu XML. Jeśli schemat nie może zostać rozszerzony za pomocą wnioskowania, aby udostępnić wszystkie dane, jest wyjątek.      > [!NOTE] > `DataSet` Nie wiąże — element XML z odpowiadającymi mu dostawcami `DataColumn` lub `DataTable` po prawidłowe znaki XML, takich jak (&quot;_&quot;) są anulowane w serializacji XML. `DataSet` Się tylko specjalne niedozwolone znaki XML w nazwach elementów XML i dlatego tylko zajmowane są takie same. Gdy będą miały zmienione znaczenie prawidłowe znaki w nazwie elementu XML, element jest ignorowany podczas przetwarzania.       Jeśli schemat XML <xref:System.Data.DataSet>obejmuje `targetNamespace`, nie można odczytać danych i wyjątków mogą wystąpić podczas wywoływania metody <xref:System.Data.DataSet.ReadXml%2A>załadować <xref:System.Data.DataSet>XML, który zawiera elementy, bez kwalifikacji przestrzeni nazw.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> Aby odczytać niekwalifikowane elementy, ustaw `elementFormDefault` równa &quot;kwalifikowana&quot; schematów XML, jak pokazano w poniższym przykładzie.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```      > [!NOTE]> Jeśli schemat dla Twojej <xref:System.Data.DataSet>zawiera elementy z tej samej nazwy, ale innego typu, w tej samej przestrzeni nazw, jest zgłaszany wyjątek podczas próby odczytu schematu do <xref:System.Data.DataSet>z <xref:System.Data.DataSet.ReadXml%2A>, określając `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Ten wyjątek nie występuje, jeśli używasz .NET Framework w wersji 1.0."
  example:
  - "The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.  \n  \n [!code-cs[Classic WebData DataSet.ReadXml3 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_1_1.cs)]\n [!code-vb[Classic WebData DataSet.ReadXml3 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_1_1.vb)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "Nazwa (włącznie ze ścieżką) z której mają być odczytywane."
    return:
      type: System.Data.XmlReadMode
      description: "<xref uid=&quot;langword_csharp_XmlReadMode&quot; name=&quot;XmlReadMode&quot; href=&quot;&quot;> </xref> Używany do odczytu danych."
  overload: System.Data.DataSet.ReadXml*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>Nie ustawiono <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.Xml.XmlReader)
  id: ReadXml(System.Xml.XmlReader)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(XmlReader)
  nameWithType: DataSet.ReadXml(XmlReader)
  fullName: System.Data.DataSet.ReadXml(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Odczytuje XML: schemat i dane do <xref href=&quot;System.Data.DataSet&quot;> </xref> przy użyciu określonego &lt;xref:System.Xml.XmlReader?displayProperty=fullName&gt;."
  remarks: "Metoda ReadXml zapewnia sposób dane tylko do odczytu lub danych i schematu do <xref:System.Data.DataSet>z dokumentu XML, natomiast <xref:System.Data.DataSet.ReadXmlSchema%2A>Metoda odczytuje tylko schemat.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> Aby odczytać zarówno danych, jak i schematu, użyj jednej z `ReadXML` przeciążeń, które zawiera `mode` parametru i ustaw dla niego wartość `ReadSchema`.       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataSet.WriteXml%2A>i <xref:System.Data.DataSet.WriteXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Można zapisać danych XML lub schemat i dane z `DataSet`, użyj `WriteXml` metody. Aby zapisać tylko schemat, należy użyć `WriteXmlSchema` metody.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Jeśli określono schemat w tekście, schematu w wierszu służy do rozszerzania istniejącej struktury relacyjne przed załadowaniem danych. Jeśli występują konflikty (na przykład tej samej kolumny w tej samej tabeli zdefiniowane przy użyciu różnych typów danych) jest wyjątek.       Jeśli schemat nie-line jest określony, struktura relacyjnej został rozszerzony za pośrednictwem wnioskowania odpowiednio do potrzeb zgodnie ze struktury dokumentu XML. Jeśli schemat nie może zostać rozszerzony za pomocą wnioskowania, aby udostępnić wszystkie dane, jest wyjątek.      > [!NOTE] > `DataSet` Nie wiąże — element XML z odpowiadającymi mu dostawcami `DataColumn` lub `DataTable` po prawidłowe znaki XML, takich jak (&quot;_&quot;) są anulowane w serializacji XML. `DataSet` Się tylko specjalne niedozwolone znaki XML w nazwach elementów XML i dlatego tylko zajmowane są takie same. Gdy będą miały zmienione znaczenie prawidłowe znaki w nazwie elementu XML, element jest ignorowany podczas przetwarzania.       Jeśli schemat XML <xref:System.Data.DataSet>obejmuje `targetNamespace`, nie można odczytać danych i wyjątków mogą wystąpić podczas wywoływania metody ReadXml załadować <xref:System.Data.DataSet>XML, który zawiera elementy, bez kwalifikacji przestrzeni nazw.</xref:System.Data.DataSet> </xref:System.Data.DataSet> Aby odczytać niekwalifikowane elementy, ustaw `elementFormDefault` równa &quot;kwalifikowana&quot; schematów XML, jak pokazano w poniższym przykładzie.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```       <xref:System.Xml.XmlTextReader?displayProperty=fullName>dziedziczy <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader></xref:System.Xml.XmlTextReader?displayProperty=fullName>      > [!NOTE] > Jeśli schemat dla Twojego <xref:System.Data.DataSet>zawiera elementy z tej samej nazwy, ale innego typu, w tej samej przestrzeni nazw, jest zgłaszany wyjątek podczas próby odczytu schematu do <xref:System.Data.DataSet>z ReadXml, określając `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet> </xref:System.Data.DataSet> Ten wyjątek nie występuje, jeśli używasz .NET Framework w wersji 1.0."
  example:
  - "The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the ReadXml method is used to fill it with schema and data.  \n  \n [!code-cs[Classic WebData DataSet.ReadXml Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_2_1.cs)]\n [!code-vb[Classic WebData DataSet.ReadXml Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_2_1.vb)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>z której mają być odczytywane.</xref:System.Xml.XmlReader>"
    return:
      type: System.Data.XmlReadMode
      description: "<xref uid=&quot;langword_csharp_XmlReadMode&quot; name=&quot;XmlReadMode&quot; href=&quot;&quot;> </xref> Używany do odczytu danych."
  overload: System.Data.DataSet.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)
  id: ReadXml(System.IO.Stream,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(Stream,XmlReadMode)
  nameWithType: DataSet.ReadXml(Stream,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(Stream,XmlReadMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Odczytuje XML: schemat i dane do <xref href=&quot;System.Data.DataSet&quot;> </xref> przy użyciu określonego &lt;xref:System.IO.Stream?displayProperty=fullName&gt; i <xref href=&quot;System.Data.XmlReadMode&quot;> </xref>."
  remarks: "<xref:System.Data.DataSet.ReadXml%2A>Metoda zapewnia sposób odczytać tylko dane lub zarówno danych i schematu do <xref:System.Data.DataSet>z dokumentu XML, podczas gdy <xref:System.Data.DataSet.ReadXmlSchema%2A>Metoda odczytuje tylko schemat.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> Aby odczytać zarówno danych, jak i schematu, użyj jednej z `ReadXML` przeciążeń, które zawiera `mode` parametru i ustaw dla niego wartość `ReadSchema`.       Dotyczy to także <xref:System.Data.DataSet.WriteXml%2A>i <xref:System.Data.DataSet.WriteXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Można zapisać danych XML lub schemat i dane z `DataSet`, użyj `WriteXml` metody. Aby zapisać tylko schemat, należy użyć `WriteXmlSchema` metody.      > [!NOTE] > Używanie ReadXml i ustawisz <xref:System.Data.XmlReadMode>do `Diffgram`, zawartość elementu docelowego `DataSet` i oryginalny `DataSet` mogą się różnić z powodu jak wygenerowanych i przetwarzane elementu diffgram.</xref:System.Data.XmlReadMode> Aby uzyskać więcej informacji o DataSets, zobacz [DataSets](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Jeśli określono schemat w tekście, schematu w wierszu służy do rozszerzania istniejącej struktury relacyjne przed załadowaniem danych. Jeśli występują konflikty (na przykład tej samej kolumny w tej samej tabeli zdefiniowane przy użyciu różnych typów danych) jest wyjątek.       Jeśli schemat nie-line jest określony, struktura relacyjnej został rozszerzony za pośrednictwem wnioskowania odpowiednio do potrzeb zgodnie ze struktury dokumentu XML. Jeśli schemat nie może zostać rozszerzony za pomocą wnioskowania, aby udostępnić wszystkie dane, jest wyjątek.      > [!NOTE] > `DataSet` Nie wiąże — element XML z odpowiadającymi mu dostawcami `DataColumn` lub `DataTable` po prawidłowe znaki XML, takich jak (&quot;_&quot;) są anulowane w serializacji XML. `DataSet` Się tylko specjalne niedozwolone znaki XML w nazwach elementów XML i dlatego tylko zajmowane są takie same. Gdy będą miały zmienione znaczenie prawidłowe znaki w nazwie elementu XML, element jest ignorowany podczas przetwarzania.       Jeśli schemat XML <xref:System.Data.DataSet>obejmuje `targetNamespace`, nie można odczytać danych i wyjątków mogą wystąpić podczas wywoływania metody <xref:System.Data.DataSet.ReadXml%2A>załadować <xref:System.Data.DataSet>XML, który zawiera elementy, bez kwalifikacji przestrzeni nazw.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> Aby odczytać niekwalifikowane elementy, ustaw `elementFormDefault` równa &quot;kwalifikowana&quot; schematów XML, jak pokazano w poniższym przykładzie.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```      > [!NOTE]> Jeśli schemat dla Twojej <xref:System.Data.DataSet>zawiera elementy z tej samej nazwy, ale innego typu, w tej samej przestrzeni nazw, jest zgłaszany wyjątek podczas próby odczytu schematu do <xref:System.Data.DataSet>z <xref:System.Data.DataSet.ReadXml%2A>, określając `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Ten wyjątek nie występuje, jeśli używasz .NET Framework w wersji 1.0."
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.IO.Stream stream, System.Data.XmlReadMode mode);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "<xref:System.IO.Stream>z której mają być odczytywane.</xref:System.IO.Stream>"
    - id: mode
      type: System.Data.XmlReadMode
      description: "Jeden z <xref href=&quot;System.Data.XmlReadMode&quot;> </xref> wartości."
    return:
      type: System.Data.XmlReadMode
      description: "<xref uid=&quot;langword_csharp_XmlReadMode&quot; name=&quot;XmlReadMode&quot; href=&quot;&quot;> </xref> Używany do odczytu danych."
  overload: System.Data.DataSet.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)
  id: ReadXml(System.IO.TextReader,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(TextReader,XmlReadMode)
  nameWithType: DataSet.ReadXml(TextReader,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(TextReader,XmlReadMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Odczytuje XML: schemat i dane do <xref href=&quot;System.Data.DataSet&quot;> </xref> przy użyciu określonego &lt;xref:System.IO.TextReader?displayProperty=fullName&gt; i <xref href=&quot;System.Data.XmlReadMode&quot;> </xref>."
  remarks: "<xref:System.Data.DataSet.ReadXml%2A>Metoda zapewnia sposób odczytać tylko dane lub zarówno danych i schematu do <xref:System.Data.DataSet>z dokumentu XML, podczas gdy <xref:System.Data.DataSet.ReadXmlSchema%2A>Metoda odczytuje tylko schemat.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> Aby odczytać zarówno danych, jak i schematu, użyj jednej z `ReadXML` przeciążeń, które zawiera `mode` parametru i ustaw dla niego wartość `ReadSchema`.       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataSet.WriteXml%2A>i <xref:System.Data.DataSet.WriteXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Można zapisać danych XML lub schemat i dane z `DataSet`, użyj `WriteXml` metody. Aby zapisać tylko schemat, należy użyć `WriteXmlSchema` metody.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Jeśli określono schemat w tekście, schematu w wierszu służy do rozszerzania istniejącej struktury relacyjne przed załadowaniem danych. Jeśli występują konflikty (na przykład tej samej kolumny w tej samej tabeli zdefiniowane przy użyciu różnych typów danych) jest wyjątek.       Jeśli schemat nie-line jest określony, struktura relacyjnej został rozszerzony za pośrednictwem wnioskowania odpowiednio do potrzeb zgodnie ze struktury dokumentu XML. Jeśli schemat nie może zostać rozszerzony za pomocą wnioskowania, aby udostępnić wszystkie dane, jest wyjątek.      > [!NOTE] > `DataSet` Nie wiąże — element XML z odpowiadającymi mu dostawcami `DataColumn` lub `DataTable` po prawidłowe znaki XML, takich jak (&quot;_&quot;) są anulowane w serializacji XML. `DataSet` Się tylko specjalne niedozwolone znaki XML w nazwach elementów XML i dlatego tylko zajmowane są takie same. Gdy będą miały zmienione znaczenie prawidłowe znaki w nazwie elementu XML, element jest ignorowany podczas przetwarzania.       Jeśli schemat XML <xref:System.Data.DataSet>obejmuje `targetNamespace`, nie można odczytać danych i wyjątków mogą wystąpić podczas wywoływania metody <xref:System.Data.DataSet.ReadXml%2A>załadować <xref:System.Data.DataSet>XML, który zawiera elementy, bez kwalifikacji przestrzeni nazw.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> Aby odczytać niekwalifikowane elementy, ustaw `elementFormDefault` równa &quot;kwalifikowana&quot; schematów XML, jak pokazano w poniższym przykładzie.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```      > [!NOTE]> Jeśli schemat dla Twojej <xref:System.Data.DataSet>zawiera elementy z tej samej nazwy, ale innego typu, w tej samej przestrzeni nazw, jest zgłaszany wyjątek podczas próby odczytu schematu do <xref:System.Data.DataSet>z <xref:System.Data.DataSet.ReadXml%2A>, określając `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Ten wyjątek nie występuje, jeśli używasz .NET Framework w wersji 1.0."
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader, System.Data.XmlReadMode mode);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "<xref:System.IO.TextReader>z której mają być odczytywane.</xref:System.IO.TextReader>"
    - id: mode
      type: System.Data.XmlReadMode
      description: "Jeden z <xref href=&quot;System.Data.XmlReadMode&quot;> </xref> wartości."
    return:
      type: System.Data.XmlReadMode
      description: "<xref uid=&quot;langword_csharp_XmlReadMode&quot; name=&quot;XmlReadMode&quot; href=&quot;&quot;> </xref> Używany do odczytu danych."
  overload: System.Data.DataSet.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)
  id: ReadXml(System.String,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(String,XmlReadMode)
  nameWithType: DataSet.ReadXml(String,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(String,XmlReadMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Odczytuje XML: schemat i dane do <xref href=&quot;System.Data.DataSet&quot;> </xref> przy użyciu określonego pliku i <xref href=&quot;System.Data.XmlReadMode&quot;> </xref>."
  remarks: "<xref:System.Data.DataSet.ReadXml%2A>Metoda zapewnia sposób odczytać tylko dane lub zarówno danych i schematu do <xref:System.Data.DataSet>z dokumentu XML, podczas gdy <xref:System.Data.DataSet.ReadXmlSchema%2A>Metoda odczytuje tylko schemat.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> Aby odczytać zarówno danych, jak i schematu, użyj jednej z `ReadXML` przeciążeń, które zawiera `mode` parametru i ustaw dla niego wartość `ReadSchema`.       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataSet.WriteXml%2A>i <xref:System.Data.DataSet.WriteXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Można zapisać danych XML lub schemat i dane z `DataSet`, użyj `WriteXml` metody. Aby zapisać tylko schemat, należy użyć `WriteXmlSchema` metody.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Jeśli określono schemat w tekście, schematu w wierszu służy do rozszerzania istniejącej struktury relacyjne przed załadowaniem danych. Jeśli występują konflikty (na przykład tej samej kolumny w tej samej tabeli zdefiniowane przy użyciu różnych typów danych) jest wyjątek.       Jeśli schemat nie-line jest określony, struktura relacyjnej został rozszerzony za pośrednictwem wnioskowania odpowiednio do potrzeb zgodnie ze struktury dokumentu XML. Jeśli schemat nie może zostać rozszerzony za pomocą wnioskowania, aby udostępnić wszystkie dane, jest wyjątek.      > [!NOTE] > `DataSet` Nie wiąże — element XML z odpowiadającymi mu dostawcami `DataColumn` lub `DataTable` po prawidłowe znaki XML, takich jak (&quot;_&quot;) są anulowane w serializacji XML. `DataSet` Się tylko specjalne niedozwolone znaki XML w nazwach elementów XML i dlatego tylko zajmowane są takie same. Gdy będą miały zmienione znaczenie prawidłowe znaki w nazwie elementu XML, element jest ignorowany podczas przetwarzania.       Jeśli schemat XML <xref:System.Data.DataSet>obejmuje `targetNamespace`, nie można odczytać danych i wyjątków mogą wystąpić podczas wywoływania metody <xref:System.Data.DataSet.ReadXml%2A>załadować <xref:System.Data.DataSet>XML, który zawiera elementy, bez kwalifikacji przestrzeni nazw.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> Aby odczytać niekwalifikowane elementy, ustaw `elementFormDefault` równa &quot;kwalifikowana&quot; schematów XML, jak pokazano w poniższym przykładzie.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```      > [!NOTE]> Jeśli schemat dla Twojej <xref:System.Data.DataSet>zawiera elementy z tej samej nazwy, ale innego typu, w tej samej przestrzeni nazw, jest zgłaszany wyjątek podczas próby odczytu schematu do <xref:System.Data.DataSet>z <xref:System.Data.DataSet.ReadXml%2A>, określając `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Ten wyjątek nie występuje, jeśli używasz .NET Framework w wersji 1.0."
  syntax:
    content: public System.Data.XmlReadMode ReadXml (string fileName, System.Data.XmlReadMode mode);
    parameters:
    - id: fileName
      type: System.String
      description: "Nazwa (włącznie ze ścieżką) z której mają być odczytywane."
    - id: mode
      type: System.Data.XmlReadMode
      description: "Jeden z <xref href=&quot;System.Data.XmlReadMode&quot;> </xref> wartości."
    return:
      type: System.Data.XmlReadMode
      description: "<xref uid=&quot;langword_csharp_XmlReadMode&quot; name=&quot;XmlReadMode&quot; href=&quot;&quot;> </xref> Używany do odczytu danych."
  overload: System.Data.DataSet.ReadXml*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>Nie ustawiono <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)
  id: ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(XmlReader,XmlReadMode)
  nameWithType: DataSet.ReadXml(XmlReader,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(XmlReader,XmlReadMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Odczytuje XML: schemat i dane do <xref href=&quot;System.Data.DataSet&quot;> </xref> przy użyciu określonego &lt;xref:System.Xml.XmlReader?displayProperty=fullName&gt; i <xref href=&quot;System.Data.XmlReadMode&quot;> </xref>."
  remarks: "<xref:System.Data.DataSet.ReadXml%2A>Metoda zapewnia sposób odczytać tylko dane lub zarówno danych i schematu do <xref:System.Data.DataSet>z dokumentu XML, podczas gdy <xref:System.Data.DataSet.ReadXmlSchema%2A>Metoda odczytuje tylko schemat.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> Aby odczytać zarówno danych, jak i schematu, użyj jednej z `ReadXML` przeciążeń, które zawiera `mode` parametru i ustaw dla niego wartość `ReadSchema`.       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataSet.WriteXml%2A>i <xref:System.Data.DataSet.WriteXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Można zapisać danych XML lub schemat i dane z `DataSet`, użyj `WriteXml` metody. Aby zapisać tylko schemat, należy użyć `WriteXmlSchema` metody.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Jeśli określono schemat w tekście, schematu w wierszu służy do rozszerzania istniejącej struktury relacyjne przed załadowaniem danych. Jeśli występują konflikty (na przykład tej samej kolumny w tej samej tabeli zdefiniowane przy użyciu różnych typów danych) jest wyjątek.       Jeśli schemat nie-line jest określony, struktura relacyjnej został rozszerzony za pośrednictwem wnioskowania odpowiednio do potrzeb zgodnie ze struktury dokumentu XML. Jeśli schemat nie może zostać rozszerzony za pomocą wnioskowania, aby udostępnić wszystkie dane, jest wyjątek.      > [!NOTE] > `DataSet` Nie wiąże — element XML z odpowiadającymi mu dostawcami `DataColumn` lub `DataTable` po prawidłowe znaki XML, takich jak (&quot;_&quot;) są anulowane w serializacji XML. `DataSet` Się tylko specjalne niedozwolone znaki XML w nazwach elementów XML i dlatego tylko zajmowane są takie same. Gdy będą miały zmienione znaczenie prawidłowe znaki w nazwie elementu XML, element jest ignorowany podczas przetwarzania.       Jeśli schemat XML <xref:System.Data.DataSet>obejmuje `targetNamespace`, nie można odczytać danych i wyjątków mogą wystąpić podczas wywoływania metody <xref:System.Data.DataSet.ReadXml%2A>załadować <xref:System.Data.DataSet>XML, który zawiera elementy, bez kwalifikacji przestrzeni nazw.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> Aby odczytać niekwalifikowane elementy, ustaw `elementFormDefault` równa &quot;kwalifikowana&quot; schematów XML, jak pokazano w poniższym przykładzie.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```      > [!NOTE]> Jeśli schemat dla Twojej <xref:System.Data.DataSet>zawiera elementy z tej samej nazwy, ale innego typu, w tej samej przestrzeni nazw, jest zgłaszany wyjątek podczas próby odczytu schematu do <xref:System.Data.DataSet>z <xref:System.Data.DataSet.ReadXml%2A>, określając `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Ten wyjątek nie występuje, jeśli używasz .NET Framework w wersji 1.0."
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader, System.Data.XmlReadMode mode);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>z której mają być odczytywane.</xref:System.Xml.XmlReader>"
    - id: mode
      type: System.Data.XmlReadMode
      description: "Jeden z <xref href=&quot;System.Data.XmlReadMode&quot;> </xref> wartości."
    return:
      type: System.Data.XmlReadMode
      description: "<xref uid=&quot;langword_csharp_XmlReadMode&quot; name=&quot;XmlReadMode&quot; href=&quot;&quot;> </xref> Używany do odczytu danych."
  overload: System.Data.DataSet.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXmlSchema(System.IO.Stream)
  id: ReadXmlSchema(System.IO.Stream)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXmlSchema(Stream)
  nameWithType: DataSet.ReadXmlSchema(Stream)
  fullName: System.Data.DataSet.ReadXmlSchema(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Odczytuje schematu XML z określonego <xref:System.IO.Stream>do <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.IO.Stream>"
  remarks: "Użyj <xref:System.Data.DataSet.ReadXmlSchema%2A>metody do tworzenia schematu dla <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXmlSchema%2A> Schemat zawiera definicji tabeli, relacji i ograniczenia. Aby zapisać schemat dokumentu XML, użyj <xref:System.Data.DataSet.WriteXmlSchema%2A>metody.</xref:System.Data.DataSet.WriteXmlSchema%2A>       Schemat XML jest zapisywany przy użyciu standardu XSD.      > [!NOTE] > Może spowodować uszkodzenie danych, jeśli msdata:DataType i typy xs:type nie są zgodne. Nie zostanie wygenerowany wyjątek.       <xref:System.Data.DataSet.ReadXmlSchema%2A>Metoda jest zazwyczaj wywoływana przed wywołaniem <xref:System.Data.DataSet.ReadXml%2A>metody, które są używane do wypełnienia <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet.ReadXmlSchema%2A>       Klasy, które pochodzą z <xref:System.IO.Stream>obejmują klasy <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>i <xref:System.Net.Sockets.NetworkStream>.</xref:System.Net.Sockets.NetworkStream> </xref:System.IO.MemoryStream> </xref:System.IO.FileStream> </xref:System.IO.BufferedStream> </xref:System.IO.Stream>      > [!NOTE] > Jeśli schemat dla Twojego <xref:System.Data.DataSet>zawiera elementy z tej samej nazwy, ale innego typu, w tej samej przestrzeni nazw, jest zwracany wyjątek, podczas próby odczytu schematu w <xref:System.Data.DataSet>z <xref:System.Data.DataSet.ReadXmlSchema%2A>.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Ten wyjątek nie występuje, jeśli używasz .NET Framework w wersji 1.0."
  example:
  - "The following example creates a <xref:System.IO.FileStream> object to read an XML schema with, and invokes the <xref:System.Data.DataSet.ReadXmlSchema%2A> method with the object.  \n  \n [!code-cs[Classic WebData DataSet.ReadXmlSchema1 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_5_1.cs)]\n [!code-vb[Classic WebData DataSet.ReadXmlSchema1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_5_1.vb)]"
  syntax:
    content: public void ReadXmlSchema (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "<xref:System.IO.Stream>z której mają być odczytywane.</xref:System.IO.Stream>"
  overload: System.Data.DataSet.ReadXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)
  id: ReadXmlSchema(System.IO.TextReader)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXmlSchema(TextReader)
  nameWithType: DataSet.ReadXmlSchema(TextReader)
  fullName: System.Data.DataSet.ReadXmlSchema(TextReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Odczytuje schematu XML z określonego <xref:System.IO.TextReader>do <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.IO.TextReader>"
  remarks: "Użyj <xref:System.Data.DataSet.ReadXmlSchema%2A>metody do tworzenia schematu dla <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXmlSchema%2A> Schemat zawiera definicji tabeli, relacji i ograniczenia. Aby zapisać schemat dokumentu XML, użyj <xref:System.Data.DataSet.WriteXmlSchema%2A>metody.</xref:System.Data.DataSet.WriteXmlSchema%2A>       Schemat XML jest zapisywany przy użyciu standardu XSD.      > [!NOTE] > Może spowodować uszkodzenie danych, jeśli msdata:DataType i typy xs:type nie są zgodne. Nie zostanie wygenerowany wyjątek.       <xref:System.Data.DataSet.ReadXmlSchema%2A>Metoda jest zazwyczaj wywoływana przed wywołaniem <xref:System.Data.DataSet.ReadXml%2A>metody, które są używane do wypełnienia <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet.ReadXmlSchema%2A>       Klasy, które dziedziczą z <xref:System.IO.TextReader>obejmują klasy <xref:System.IO.StreamReader>i <xref:System.IO.StringReader>klasy.</xref:System.IO.StringReader> </xref:System.IO.StreamReader> </xref:System.IO.TextReader>      > [!NOTE] > Jeśli schemat dla Twojego <xref:System.Data.DataSet>zawiera elementy z tej samej nazwy, ale innego typu, w tej samej przestrzeni nazw, jest zwracany wyjątek, podczas próby odczytu schematu w <xref:System.Data.DataSet>z <xref:System.Data.DataSet.ReadXmlSchema%2A>.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Ten wyjątek nie występuje, jeśli używasz .NET Framework w wersji 1.0."
  example:
  - "The following example creates a <xref:System.IO.StreamReader> object to read a schema with, and invokes the <xref:System.Data.DataSet.ReadXmlSchema%2A> method with the object.  \n  \n [!code-vb[Classic WebData DataSet.ReadXmlSchema2 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_8_1.vb)]\n [!code-cs[Classic WebData DataSet.ReadXmlSchema2 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_8_1.cs)]"
  syntax:
    content: public void ReadXmlSchema (System.IO.TextReader reader);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "<xref:System.IO.TextReader>z której mają być odczytywane.</xref:System.IO.TextReader>"
  overload: System.Data.DataSet.ReadXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXmlSchema(System.String)
  id: ReadXmlSchema(System.String)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXmlSchema(String)
  nameWithType: DataSet.ReadXmlSchema(String)
  fullName: System.Data.DataSet.ReadXmlSchema(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Odczytuje schematu XML z określonego pliku do <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Użyj <xref:System.Data.DataSet.ReadXmlSchema%2A>metody do tworzenia schematu dla <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXmlSchema%2A> Schemat zawiera definicji tabeli, relacji i ograniczenia. Aby zapisać schemat dokumentu XML, użyj <xref:System.Data.DataSet.WriteXmlSchema%2A>metody.</xref:System.Data.DataSet.WriteXmlSchema%2A>       Schemat XML jest zapisywany przy użyciu standardu XSD.      > [!NOTE] > Może spowodować uszkodzenie danych, jeśli msdata:DataType i typy xs:type nie są zgodne. Nie zostanie wygenerowany wyjątek.       <xref:System.Data.DataSet.ReadXmlSchema%2A>Metoda jest zazwyczaj wywoływana przed wywołaniem <xref:System.Data.DataSet.ReadXml%2A>metody, które są używane do wypełnienia <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet.ReadXmlSchema%2A>      > [!NOTE] > Jeśli schemat dla Twojego <xref:System.Data.DataSet>zawiera elementy z tej samej nazwy, ale innego typu, w tej samej przestrzeni nazw, jest zgłaszany wyjątek podczas próby odczytu schematu w <xref:System.Data.DataSet>z <xref:System.Data.DataSet.ReadXmlSchema%2A>.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Ten wyjątek nie występuje, jeśli używasz .NET Framework w wersji 1.0."
  example:
  - >-
    [!code-cs[Classic WebData DataSet.ReadXmlSchema3 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_0_1.cs)]
     [!code-vb[Classic WebData DataSet.ReadXmlSchema3 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_0_1.vb)]
  syntax:
    content: public void ReadXmlSchema (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "Plik Nazwa (włącznie ze ścieżką), z której mają być odczytywane."
  overload: System.Data.DataSet.ReadXmlSchema*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>Nie ustawiono <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)
  id: ReadXmlSchema(System.Xml.XmlReader)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXmlSchema(XmlReader)
  nameWithType: DataSet.ReadXmlSchema(XmlReader)
  fullName: System.Data.DataSet.ReadXmlSchema(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Odczytuje schematu XML z określonego <xref:System.Xml.XmlReader>do <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.Xml.XmlReader>"
  remarks: "Tworzenie schematu dla <xref:System.Data.DataSet>.</xref:System.Data.DataSet> przy użyciu metody ReadXmlSchema Schemat zawiera definicji tabeli, relacji i ograniczenia.       Schemat XML jest zapisywany przy użyciu standardu XSD.      > [!NOTE] > Może spowodować uszkodzenie danych, jeśli msdata:DataType i typy xs:type nie są zgodne. Nie zostanie wygenerowany wyjątek.       Zazwyczaj wywoływana jest metoda ReadXmlSchema przed wywołaniem <xref:System.Data.DataSet.ReadXml%2A>metody, które są używane do wypełnienia <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A>       <xref:System.Xml.XmlReader?displayProperty=fullName>Klasa jest abstrakcyjna.</xref:System.Xml.XmlReader?displayProperty=fullName> Klasa, która dziedziczy `XmlReader` jest <xref:System.Xml.XmlTextReader?displayProperty=fullName>klasy.</xref:System.Xml.XmlTextReader?displayProperty=fullName>      > [!NOTE] > Jeśli schemat dla Twojego <xref:System.Data.DataSet>zawiera elementy z tej samej nazwy, ale innego typu, w tej samej przestrzeni nazw, jest zwracany wyjątek, podczas próby odczytu schematu do <xref:System.Data.DataSet>z ReadXmlSchema.</xref:System.Data.DataSet> </xref:System.Data.DataSet> Ten wyjątek nie występuje, jeśli używasz .NET Framework w wersji 1.0."
  example:
  - "The following example creates a new <xref:System.Data.DataSet> and <xref:System.IO.FileStream?displayProperty=fullName> object. The <xref:System.IO.FileStream> object, created with a file path and file name, is used to create an <xref:System.Xml.XmlTextReader?displayProperty=fullName> that is passed as an argument to the ReadXmlSchema method.  \n  \n [!code-vb[Classic WebData DataSet.ReadXmlSchema Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_4_1.vb)]\n [!code-cs[Classic WebData DataSet.ReadXmlSchema Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_4_1.cs)]"
  syntax:
    content: public void ReadXmlSchema (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>z której mają być odczytywane.</xref:System.Xml.XmlReader>"
  overload: System.Data.DataSet.ReadXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)
  id: ReadXmlSerializable(System.Xml.XmlReader)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXmlSerializable(XmlReader)
  nameWithType: DataSet.ReadXmlSerializable(XmlReader)
  fullName: System.Data.DataSet.ReadXmlSerializable(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ignoruje atrybuty i zwraca pusty zestaw danych."
  syntax:
    content: protected virtual void ReadXmlSerializable (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Podany czytnik XML."
  overload: System.Data.DataSet.ReadXmlSerializable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.RejectChanges
  id: RejectChanges
  parent: System.Data.DataSet
  langs:
  - csharp
  name: RejectChanges()
  nameWithType: DataSet.RejectChanges()
  fullName: System.Data.DataSet.RejectChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Wycofuje wszystkie zmiany wprowadzone do <xref href=&quot;System.Data.DataSet&quot;> </xref> od czasu jej utworzenia lub od czasu ostatniego &lt;xref:System.Data.DataSet.AcceptChanges%2A?displayProperty=fullName&gt; została wywołana."
  remarks: "Wywołanie RejectChanges wywołać <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName>metody dla wszystkich <xref:System.Data.DataTable>obiektów zawartych <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName>       <xref:System.Data.DataRow>obiekty zawarte <xref:System.Data.DataSet>każdego można ustawić w trybie edycji przez wywołanie <xref:System.Data.DataRow.BeginEdit%2A?displayProperty=fullName>metody.</xref:System.Data.DataRow.BeginEdit%2A?displayProperty=fullName> </xref:System.Data.DataSet></xref:System.Data.DataRow> Po wywołaniu <xref:System.Data.DataRow.EndEdit%2A?displayProperty=fullName>metody, można odrzucić zmiany wywołując <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName>na <xref:System.Data.DataTable>do której <xref:System.Data.DataRow>obiekty należeć.</xref:System.Data.DataRow> </xref:System.Data.DataTable> </xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName> </xref:System.Data.DataRow.EndEdit%2A?displayProperty=fullName>       Gdy <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName>Metoda jest wywoływana, wszystkie wiersze nadal w trybie edycji Anuluj ich edycji.</xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName> Nowe wiersze zostaną usunięte. Zmodyfikowane i usuniętych wierszy wrócić do pierwotnego stanu (`DataRowState.Unchanged`).       Metoda AcceptChanges i RejectChanges dotyczą tylko <xref:System.Data.DataRow>zmian dotyczących (to znaczy `Add`, `Remove`, `Delete`, i `Modify`).</xref:System.Data.DataRow> Nie mają zastosowania do schematu lub zmian strukturalnych."
  example:
  - "The following example shows a class derived from the <xref:System.Data.DataSet> class. The RejectChanges event is invoked from within a function.  \n  \n [!code-cs[Classic WebData DataSet.RejectChanges Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_6_1.cs)]\n [!code-vb[Classic WebData DataSet.RejectChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_6_1.vb)]"
  syntax:
    content: public virtual void RejectChanges ();
    parameters: []
  overload: System.Data.DataSet.RejectChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Relations
  id: Relations
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Relations
  nameWithType: DataSet.Relations
  fullName: System.Data.DataSet.Relations
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobierz kolekcję relacji, które tabele i Zezwól nawigacji z elementu nadrzędnego tabel dla tabel podrzędnych."
  remarks: ''
  example:
  - "The following example prints the column name of all child tables through the Relations property.  \n  \n [!code-vb[Classic WebData DataSet.Relations Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.re_1.vb)]"
  syntax:
    content: public System.Data.DataRelationCollection Relations { get; }
    return:
      type: System.Data.DataRelationCollection
      description: "A <xref href=&quot;System.Data.DataRelationCollection&quot;> </xref> zawierający kolekcję <xref href=&quot;System.Data.DataRelation&quot;> </xref> obiektów. Zwracany jest pustą kolekcję, jeśli nie <xref href=&quot;System.Data.DataRelation&quot;> </xref> istnieją obiekty."
  overload: System.Data.DataSet.Relations*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.RemotingFormat
  id: RemotingFormat
  parent: System.Data.DataSet
  langs:
  - csharp
  name: RemotingFormat
  nameWithType: DataSet.RemotingFormat
  fullName: System.Data.DataSet.RemotingFormat
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia <xref href=&quot;System.Data.SerializationFormat&quot;> </xref> dla <xref href=&quot;System.Data.DataSet&quot;> </xref> używane podczas komunikacji zdalnej."
  syntax:
    content: public System.Data.SerializationFormat RemotingFormat { get; set; }
    return:
      type: System.Data.SerializationFormat
      description: "A <xref href=&quot;System.Data.SerializationFormat&quot;></xref> object."
  overload: System.Data.DataSet.RemotingFormat*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Reset
  id: Reset
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Reset()
  nameWithType: DataSet.Reset()
  fullName: System.Data.DataSet.Reset()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Czyści wszystkie tabele i usuwa wszystkie relacje, ograniczeń obcego i tabel z <xref href=&quot;System.Data.DataSet&quot;> </xref>. Podklasy powinny zastępować resetowania, aby przywrócić <xref href=&quot;System.Data.DataSet&quot;> </xref> do stanu pierwotnego."
  syntax:
    content: public virtual void Reset ();
    parameters: []
  overload: System.Data.DataSet.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.SchemaSerializationMode
  id: SchemaSerializationMode
  parent: System.Data.DataSet
  langs:
  - csharp
  name: SchemaSerializationMode
  nameWithType: DataSet.SchemaSerializationMode
  fullName: System.Data.DataSet.SchemaSerializationMode
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets or sets a <xref href=&quot;System.Data.SchemaSerializationMode&quot;></xref> for a <xref href=&quot;System.Data.DataSet&quot;></xref>."
  remarks: "A <xref:System.Data.DataSet>serializuje dane schematu i wystąpienia domyślnie w usługach sieci Web i scenariusze komunikacji zdalnej.</xref:System.Data.DataSet> Ustawienie właściwości SchemaSerializationMode typizowanych `DataSet` do <xref:System.Data.SchemaSerializationMode>powoduje, że informacje o schemacie mają być wykluczone z ładunku serializacji.</xref:System.Data.SchemaSerializationMode>       <xref:System.Data.SchemaSerializationMode>jest obsługiwana tylko dla typu `DataSet`.</xref:System.Data.SchemaSerializationMode> Aby uzyskać wyrażeniami bez typu `DataSet` tej właściwości można ustawić tylko do <xref:System.Data.SchemaSerializationMode>.</xref:System.Data.SchemaSerializationMode>       <xref:System.Data.SchemaSerializationMode>należy używać tylko w przypadkach, gdy wpisany informacji o schemacie podstawowych `DataTables`, `DataRelations` i `Constraints` nie został zmodyfikowany.</xref:System.Data.SchemaSerializationMode> Jeśli zmiany informacji o schemacie wystąpił, pełną powinny być serializowane z <xref:System.Data.SchemaSerializationMode>.</xref:System.Data.SchemaSerializationMode>       <xref:System.Data.SchemaSerializationMode>jest obsługiwana w wersji 2.0, .NET Framework lub nowszej.</xref:System.Data.SchemaSerializationMode>       Gdy <xref:System.Data.SchemaSerializationMode>jest ustawiona tylko najwyższego poziomu czasu wykonywania właściwości na <xref:System.Data.DataSet>są serializowane.</xref:System.Data.DataSet> </xref:System.Data.SchemaSerializationMode> Ponadto są one serializowane tylko wtedy, gdy wystąpią różni się od wartości domyślne. Żadna z `Tables`, `Relations` lub `Constraints` są serializowane. Właściwości czasu wykonywania serializacji obejmują <xref:System.Data.DataSet.DataSetName%2A>, <xref:System.Data.DataSet.Namespace%2A>, <xref:System.Data.DataSet.Prefix%2A>, <xref:System.Data.DataSet.Locale%2A>, <xref:System.Data.DataSet.EnforceConstraints%2A>i <xref:System.Data.DataSet.CaseSensitive%2A>.</xref:System.Data.DataSet.CaseSensitive%2A> </xref:System.Data.DataSet.EnforceConstraints%2A> </xref:System.Data.DataSet.Locale%2A> </xref:System.Data.DataSet.Prefix%2A> </xref:System.Data.DataSet.Namespace%2A> </xref:System.Data.DataSet.DataSetName%2A> Te właściwości są serializowane, aby upewnić się, że runtime ogólną integralność danych jest zachowywana."
  syntax:
    content: public virtual System.Data.SchemaSerializationMode SchemaSerializationMode { get; set; }
    return:
      type: System.Data.SchemaSerializationMode
      description: "Gets or sets a <xref href=&quot;System.Data.SchemaSerializationMode&quot;></xref> for a <xref href=&quot;System.Data.DataSet&quot;></xref>."
  overload: System.Data.DataSet.SchemaSerializationMode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ShouldSerializeRelations
  id: ShouldSerializeRelations
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ShouldSerializeRelations()
  nameWithType: DataSet.ShouldSerializeRelations()
  fullName: System.Data.DataSet.ShouldSerializeRelations()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera wartość wskazującą czy <xref:System.Data.DataSet.Relations*>właściwości powinny zostać utrwalony.</xref:System.Data.DataSet.Relations*>"
  remarks: "Zwykle ta metoda albo w przypadku tworzenia projektanta dla <xref:System.Data.DataSet>, lub tworzenia własnego formantu zawierających <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>"
  example:
  - "The following examples show a class derived from the <xref:System.Data.DataSet> class. The <xref:System.Data.DataSet.Reset%2A> and ShouldSerializeRelations methods are invoked from within functions in the derived class.  \n  \n [!code-cs[Classic WebData DataSet.ShouldSerializeRelations Example#1](~/add/codesnippet/csharp/m-system.data.dataset.sh_3_1.cs)]\n [!code-vb[Classic WebData DataSet.ShouldSerializeRelations Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.sh_3_1.vb)]"
  syntax:
    content: protected virtual bool ShouldSerializeRelations ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli wartość właściwości została zmieniona z domyślnego; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.ShouldSerializeRelations*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ShouldSerializeTables
  id: ShouldSerializeTables
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ShouldSerializeTables()
  nameWithType: DataSet.ShouldSerializeTables()
  fullName: System.Data.DataSet.ShouldSerializeTables()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera wartość wskazującą czy <xref:System.Data.DataSet.Tables*>właściwości powinny zostać utrwalony.</xref:System.Data.DataSet.Tables*>"
  remarks: "Zwykle ta metoda tylko wtedy, gdy tworzysz albo projektanta dla <xref:System.Data.DataSet>, lub tworzenia własnego formantu zawierających <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>"
  example:
  - "The following example shows a class derived from the <xref:System.Data.DataSet> class. The ShouldSerializeTables method is called from within functions in the derived class.  \n  \n [!code-vb[Classic WebData DataSet.ShouldSerializeTables Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.sh_2_1.vb)]\n [!code-cs[Classic WebData DataSet.ShouldSerializeTables Example#1](~/add/codesnippet/csharp/m-system.data.dataset.sh_2_1.cs)]"
  syntax:
    content: protected virtual bool ShouldSerializeTables ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli wartość właściwości została zmieniona z domyślnego; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.ShouldSerializeTables*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Site
  id: Site
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Site
  nameWithType: DataSet.Site
  fullName: System.Data.DataSet.Site
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia <xref href=&quot;System.ComponentModel.ISite&quot;> </xref> dla <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Powiązania witryny <xref:System.ComponentModel.Component>do <xref:System.ComponentModel.Container>i umożliwić komunikację między nimi, a także umożliwiają kontener, aby zarządzać jego składniki.</xref:System.ComponentModel.Container> </xref:System.ComponentModel.Component>"
  syntax:
    content: public override System.ComponentModel.ISite Site { get; set; }
    return:
      type: System.ComponentModel.ISite
      description: "An <xref href=&quot;System.ComponentModel.ISite&quot;></xref> for the <xref href=&quot;System.Data.DataSet&quot;></xref>."
  overload: System.Data.DataSet.Site*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection
  id: System#ComponentModel#IListSource#ContainsListCollection
  isEii: true
  parent: System.Data.DataSet
  langs:
  - csharp
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: DataSet.System.ComponentModel.IListSource.ContainsListCollection
  fullName: System.Data.DataSet.System.ComponentModel.IListSource.ContainsListCollection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Opis tego elementu członkowskiego, zobacz &lt;xref:System.ComponentModel.IListSource.ContainsListCollection%2A?displayProperty=fullName&gt;."
  remarks: "Ten element jest jawną implementacją elementu interfejsu. Można go używać tylko wtedy, gdy <xref:System.Data.DataSet>wystąpienia jest rzutowane na <xref:System.ComponentModel.IListSource>interfejsu.</xref:System.ComponentModel.IListSource> </xref:System.Data.DataSet>"
  syntax:
    content: bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    return:
      type: System.Boolean
      description: "Opis tego elementu członkowskiego, zobacz &lt;xref:System.ComponentModel.IListSource.ContainsListCollection%2A?displayProperty=fullName&gt;."
  overload: System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.System#ComponentModel#IListSource#GetList
  id: System#ComponentModel#IListSource#GetList
  isEii: true
  parent: System.Data.DataSet
  langs:
  - csharp
  name: System.ComponentModel.IListSource.GetList()
  nameWithType: DataSet.System.ComponentModel.IListSource.GetList()
  fullName: System.Data.DataSet.System.ComponentModel.IListSource.GetList()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Opis tego elementu członkowskiego, zobacz &lt;xref:System.ComponentModel.IListSource.GetList%2A?displayProperty=fullName&gt;."
  remarks: "Ten element jest jawną implementacją elementu interfejsu. Można go używać tylko wtedy, gdy <xref:System.Data.DataSet>wystąpienia jest rzutowane na <xref:System.ComponentModel.IListSource>interfejsu.</xref:System.ComponentModel.IListSource> </xref:System.Data.DataSet>"
  syntax:
    content: System.Collections.IList IListSource.GetList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "Opis tego elementu członkowskiego, zobacz &lt;xref:System.ComponentModel.IListSource.GetList%2A?displayProperty=fullName&gt;."
  overload: System.Data.DataSet.System#ComponentModel#IListSource#GetList*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema
  id: System#Xml#Serialization#IXmlSerializable#GetSchema
  isEii: true
  parent: System.Data.DataSet
  langs:
  - csharp
  name: System.Xml.Serialization.IXmlSerializable.GetSchema()
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema()
  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Opis tego elementu członkowskiego, zobacz &lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName&gt;."
  remarks: "Ten element jest jawną implementacją elementu interfejsu. Można go używać tylko wtedy, gdy <xref:System.Data.DataSet>wystąpienia jest rzutowane na <xref:System.Xml.Serialization.IXmlSerializable>interfejsu.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Data.DataSet>"
  syntax:
    content: System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();
    parameters: []
    return:
      type: System.Xml.Schema.XmlSchema
      description: "Opis tego elementu członkowskiego, zobacz &lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName&gt;."
  overload: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  id: System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  isEii: true
  parent: System.Data.DataSet
  langs:
  - csharp
  name: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Opis tego elementu członkowskiego, zobacz &lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A?displayProperty=fullName&gt;."
  remarks: "Ten element jest jawną implementacją elementu interfejsu. Można go używać tylko wtedy, gdy <xref:System.Data.DataSet>wystąpienia jest rzutowane na <xref:System.Xml.Serialization.IXmlSerializable>interfejsu.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Data.DataSet>"
  syntax:
    content: void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "A <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  overload: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  id: System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  isEii: true
  parent: System.Data.DataSet
  langs:
  - csharp
  name: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Opis tego elementu członkowskiego, zobacz &lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A?displayProperty=fullName&gt;."
  remarks: "Ten element jest jawną implementacją elementu interfejsu. Można go używać tylko wtedy, gdy <xref:System.Data.DataSet>wystąpienia jest rzutowane na <xref:System.Xml.Serialization.IXmlSerializable>interfejsu.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Data.DataSet>"
  syntax:
    content: void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "A <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  overload: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Tables
  id: Tables
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Tables
  nameWithType: DataSet.Tables
  fullName: System.Data.DataSet.Tables
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera kolekcję w tabelach zawartych w <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Aby dodać tabele do kolekcji, należy użyć <xref:System.Data.DataTableCollection.Add%2A>metody <xref:System.Data.DataTableCollection>.</xref:System.Data.DataTableCollection> </xref:System.Data.DataTableCollection.Add%2A> Aby usunąć tabel, użyj <xref:System.Data.DataTableCollection.Remove%2A>metody.</xref:System.Data.DataTableCollection.Remove%2A>"
  example:
  - "The following example returns the <xref:System.Data.DataSet> object's <xref:System.Data.DataTableCollection>, and prints the columns and rows in each table.  \n  \n [!code-vb[Classic WebData DataSet.Tables Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.ta_1.vb)]\n [!code-cs[Classic WebData DataSet.Tables Example#1](~/add/codesnippet/csharp/p-system.data.dataset.ta_1.cs)]"
  syntax:
    content: public System.Data.DataTableCollection Tables { get; }
    return:
      type: System.Data.DataTableCollection
      description: "<xref href=&quot;System.Data.DataTableCollection&quot;> </xref> Zawarty w tym <xref href=&quot;System.Data.DataSet&quot;> </xref>. Zwracany jest pustą kolekcję, jeśli nie <xref href=&quot;System.Data.DataTable&quot;> </xref> istnieją obiekty."
  overload: System.Data.DataSet.Tables*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.IO.Stream)
  id: WriteXml(System.IO.Stream)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(Stream)
  nameWithType: DataSet.WriteXml(Stream)
  fullName: System.Data.DataSet.WriteXml(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżące dane dla <xref href=&quot;System.Data.DataSet&quot;> </xref> przy użyciu określonego &lt;xref:System.IO.Stream?displayProperty=fullName&gt;."
  remarks: "`WriteXml` Metoda zapewnia sposób można zapisać tylko dane lub zarówno danych i schemat z <xref:System.Data.DataSet>do dokumentu XML, podczas gdy <xref:System.Data.DataSet.WriteXmlSchema%2A>Metoda zapisuje tylko schemat.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Aby napisać zarówno danych, jak i schematu, użyj jednego z przeciążeń, które obejmuje `mode` parametru i ustaw dla niego wartość `WriteSchema`.       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataSet.ReadXml%2A>i <xref:System.Data.DataSet.ReadXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Mają być odczytywane dane XML lub schemat i dane do `DataSet`, użyj `ReadXml` metody. Aby odczytać tylko schemat, należy użyć `ReadXmlSchema` metody.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  example:
  - "The following example creates a <xref:System.IO.FileStream?displayProperty=fullName> object. The object is then used with the WriteXml method to write an XML document.  \n  \n [!code-cs[Classic WebData DataSet.WriteXml Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_2_1.cs)]\n [!code-vb[Classic WebData DataSet.WriteXml Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_2_1.vb)]"
  syntax:
    content: public void WriteXml (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "A <xref:System.IO.Stream>obiekt używany do zapisywania do pliku.</xref:System.IO.Stream>"
  overload: System.Data.DataSet.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.IO.TextWriter)
  id: WriteXml(System.IO.TextWriter)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(TextWriter)
  nameWithType: DataSet.WriteXml(TextWriter)
  fullName: System.Data.DataSet.WriteXml(TextWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżące dane dla <xref href=&quot;System.Data.DataSet&quot;> </xref> przy użyciu określonego <xref:System.IO.TextWriter>.</xref:System.IO.TextWriter>"
  remarks: "`WriteXml` Metoda zapewnia sposób można zapisać tylko dane lub zarówno danych i schemat z <xref:System.Data.DataSet>do dokumentu XML, podczas gdy <xref:System.Data.DataSet.WriteXmlSchema%2A>Metoda zapisuje tylko schemat.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Aby napisać zarówno danych, jak i schematu, użyj jednego z przeciążeń, które obejmuje `mode` parametru i ustaw dla niego wartość `WriteSchema`.       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataSet.ReadXml%2A>i <xref:System.Data.DataSet.ReadXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Mają być odczytywane dane XML lub schemat i dane do `DataSet`, użyj `ReadXml` metody. Aby odczytać tylko schemat, należy użyć `ReadXmlSchema` metody.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.IO.TextWriter writer);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "<xref:System.IO.TextWriter>Obiektu z jakim zostanie zapisane.</xref:System.IO.TextWriter>"
  overload: System.Data.DataSet.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.String)
  id: WriteXml(System.String)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(String)
  nameWithType: DataSet.WriteXml(String)
  fullName: System.Data.DataSet.WriteXml(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżące dane dla <xref href=&quot;System.Data.DataSet&quot;> </xref> do określonego pliku."
  remarks: "`WriteXml` Metoda zapewnia sposób można zapisać tylko dane lub zarówno danych i schemat z <xref:System.Data.DataSet>do dokumentu XML, podczas gdy <xref:System.Data.DataSet.WriteXmlSchema%2A>Metoda zapisuje tylko schemat.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Aby napisać zarówno danych, jak i schematu, użyj jednego z przeciążeń, które obejmuje `mode` parametru i ustaw dla niego wartość `WriteSchema`.       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataSet.ReadXml%2A>i <xref:System.Data.DataSet.ReadXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Mają być odczytywane dane XML lub schemat i dane do `DataSet`, użyj `ReadXml` metody. Aby odczytać tylko schemat, należy użyć `ReadXmlSchema` metody.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "Plik Nazwa (włącznie ze ścieżką), z którym chcesz zapisać."
  overload: System.Data.DataSet.WriteXml*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>Nie ustawiono <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.Xml.XmlWriter)
  id: WriteXml(System.Xml.XmlWriter)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(XmlWriter)
  nameWithType: DataSet.WriteXml(XmlWriter)
  fullName: System.Data.DataSet.WriteXml(XmlWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżące dane dla <xref href=&quot;System.Data.DataSet&quot;> </xref> do określonego <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  remarks: "`WriteXml` Metoda zapewnia sposób można zapisać tylko dane lub zarówno danych i schemat z <xref:System.Data.DataSet>do dokumentu XML, podczas gdy <xref:System.Data.DataSet.WriteXmlSchema%2A>Metoda zapisuje tylko schemat.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Aby napisać zarówno danych, jak i schematu, użyj jednego z przeciążeń, które obejmuje `mode` parametru i ustaw dla niego wartość `WriteSchema`.       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataSet.ReadXml%2A>i <xref:System.Data.DataSet.ReadXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Mają być odczytywane dane XML lub schemat i dane do `DataSet`, użyj `ReadXml` metody. Aby odczytać tylko schemat, należy użyć `ReadXmlSchema` metody.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>z jakim zostanie zapisane.</xref:System.Xml.XmlWriter>"
  overload: System.Data.DataSet.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  id: WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(Stream,XmlWriteMode)
  nameWithType: DataSet.WriteXml(Stream,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(Stream,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżące dane i opcjonalnie schematu dla <xref href=&quot;System.Data.DataSet&quot;> </xref> przy użyciu określonego &lt;xref:System.IO.Stream?displayProperty=fullName&gt; i <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>. Aby napisać schemat, należy ustawić wartość <code> mode </code> parametr <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>."
  remarks: "`WriteXml` Metoda zapewnia sposób można zapisać tylko dane lub zarówno danych i schemat z <xref:System.Data.DataSet>do dokumentu XML, podczas gdy <xref:System.Data.DataSet.WriteXmlSchema%2A>Metoda zapisuje tylko schemat.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Aby napisać zarówno dane i schemat, należy ustawić `mode` parametr `WriteSchema`.       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataSet.ReadXml%2A>i <xref:System.Data.DataSet.ReadXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Mają być odczytywane dane XML lub schemat i dane do `DataSet`, użyj `ReadXml` metody. Aby odczytać tylko schemat, należy użyć `ReadXmlSchema` metody.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "A <xref:System.IO.Stream>obiekt używany do zapisywania do pliku.</xref:System.IO.Stream>"
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Jeden z <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> wartości."
  overload: System.Data.DataSet.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  id: WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(TextWriter,XmlWriteMode)
  nameWithType: DataSet.WriteXml(TextWriter,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(TextWriter,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżące dane i opcjonalnie schematu dla <xref href=&quot;System.Data.DataSet&quot;> </xref> przy użyciu określonego <xref:System.IO.TextWriter>i <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>.</xref:System.IO.TextWriter> Aby napisać schemat, należy ustawić wartość <code> mode </code> parametr <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>."
  remarks: "`WriteXml` Metoda zapewnia sposób można zapisać tylko dane lub zarówno danych i schemat z <xref:System.Data.DataSet>do dokumentu XML, podczas gdy <xref:System.Data.DataSet.WriteXmlSchema%2A>Metoda zapisuje tylko schemat.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Aby napisać zarówno dane i schemat, należy ustawić `mode` parametr `WriteSchema`.       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataSet.ReadXml%2A>i <xref:System.Data.DataSet.ReadXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Mają być odczytywane dane XML lub schemat i dane do `DataSet`, użyj `ReadXml` metody. Aby odczytać tylko schemat, należy użyć `ReadXmlSchema` metody.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  example:
  - "The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.  \n  \n [!code-vb[Classic WebData DataSet.ReadXml2 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_7_1.vb)]\n [!code-cs[Classic WebData DataSet.ReadXml2 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_7_1.cs)]"
  syntax:
    content: public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "A &lt;xref:System.IO.TextWriter?displayProperty=fullName&gt; obiekt używany do zapisywania dokumentu."
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Jeden z <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> wartości."
  overload: System.Data.DataSet.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)
  id: WriteXml(System.String,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(String,XmlWriteMode)
  nameWithType: DataSet.WriteXml(String,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(String,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżące dane i opcjonalnie schematu dla <xref href=&quot;System.Data.DataSet&quot;> </xref> do określonego pliku przy użyciu określonego <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>. Aby napisać schemat, należy ustawić wartość <code> mode </code> parametr <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>."
  remarks: "`WriteXml` Metoda zapewnia sposób można zapisać tylko dane lub zarówno danych i schemat z <xref:System.Data.DataSet>do dokumentu XML, podczas gdy <xref:System.Data.DataSet.WriteXmlSchema%2A>Metoda zapisuje tylko schemat.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Aby napisać zarówno dane i schemat, należy ustawić `mode` parametr `WriteSchema`.       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataSet.ReadXml%2A>i <xref:System.Data.DataSet.ReadXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Mają być odczytywane dane XML lub schemat i dane do `DataSet`, użyj `ReadXml` metody. Aby odczytać tylko schemat, należy użyć `ReadXmlSchema` metody.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  example:
  - "The following example uses the <xref:System.Data.DataSet.WriteXml%2A> method to write an XML document.  \n  \n [!code-cs[Classic WebData DataSet.WriteXml7 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_3_1.cs)]\n [!code-vb[Classic WebData DataSet.WriteXml7 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_3_1.vb)]"
  syntax:
    content: public void WriteXml (string fileName, System.Data.XmlWriteMode mode);
    parameters:
    - id: fileName
      type: System.String
      description: "Plik Nazwa (włącznie ze ścieżką), z którym chcesz zapisać."
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Jeden z <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> wartości."
  overload: System.Data.DataSet.WriteXml*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>Nie ustawiono <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  id: WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(XmlWriter,XmlWriteMode)
  nameWithType: DataSet.WriteXml(XmlWriter,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(XmlWriter,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżące dane i opcjonalnie schematu dla <xref href=&quot;System.Data.DataSet&quot;> </xref> przy użyciu określonego <xref:System.Xml.XmlWriter>i <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>.</xref:System.Xml.XmlWriter> Aby napisać schemat, należy ustawić wartość <code> mode </code> parametr <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>."
  remarks: "`WriteXml` Metoda zapewnia sposób można zapisać tylko dane lub zarówno danych i schemat z <xref:System.Data.DataSet>do dokumentu XML, podczas gdy <xref:System.Data.DataSet.WriteXmlSchema%2A>Metoda zapisuje tylko schemat.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Aby napisać zarówno dane i schemat, należy ustawić `mode` parametr `WriteSchema`.       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataSet.ReadXml%2A>i <xref:System.Data.DataSet.ReadXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Mają być odczytywane dane XML lub schemat i dane do `DataSet`, użyj `ReadXml` metody. Aby odczytać tylko schemat, należy użyć `ReadXmlSchema` metody.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  example:
  - "The following example creates a <xref:System.IO.FileStream?displayProperty=fullName> object that is used to create a new <xref:System.Xml.XmlTextWriter?displayProperty=fullName>. The <xref:System.Xml.XmlTextWriter> object is used with the <xref:System.Data.DataSet.WriteXml%2A> method to write an XML document.  \n  \n [!code-cs[Classic WebData DataSet.WriteXml6 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_1_1.cs)]\n [!code-vb[Classic WebData DataSet.WriteXml6 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_1_1.vb)]"
  syntax:
    content: public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>z jakim zostanie zapisane.</xref:System.Xml.XmlWriter>"
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Jeden z <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> wartości."
  overload: System.Data.DataSet.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.Stream)
  id: WriteXmlSchema(System.IO.Stream)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(Stream)
  nameWithType: DataSet.WriteXmlSchema(Stream)
  fullName: System.Data.DataSet.WriteXmlSchema(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje <xref href=&quot;System.Data.DataSet&quot;> </xref> struktury jako schematu XML do określonego &lt;xref:System.IO.Stream?displayProperty=fullName&gt; obiektu."
  remarks: "Schemat dla zapisu przy użyciu metody WriteXmlSchema <xref:System.Data.DataSet>do dokumentu XML.</xref:System.Data.DataSet> Schemat zawiera definicji tabeli, relacji i ograniczenia. Aby zapisać schemat dokumentu XML, użyj metody WriteXmlSchema.       Schemat XML jest zapisywany przy użyciu standardu XSD.       Aby zapisać dane dokumentu XML, użyj <xref:System.Data.DataSet.WriteXml%2A>metody.</xref:System.Data.DataSet.WriteXml%2A>       Klasy, które pochodzą z <xref:System.IO.Stream>obejmują klasy <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>i <xref:System.Net.Sockets.NetworkStream>.</xref:System.Net.Sockets.NetworkStream> </xref:System.IO.MemoryStream> </xref:System.IO.FileStream> </xref:System.IO.BufferedStream> </xref:System.IO.Stream>"
  example:
  - "The following example creates a new <xref:System.IO.FileStream> object that is passed to the WriteXmlSchema method to write the schema to disk.  \n  \n [!code-vb[Classic WebData DataSet.WriteXmlSchema Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_6_1.vb)]\n [!code-cs[Classic WebData DataSet.WriteXmlSchema Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_6_1.cs)]"
  syntax:
    content: public void WriteXmlSchema (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "A <xref:System.IO.Stream>obiekt używany do zapisywania do pliku.</xref:System.IO.Stream>"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)
  id: WriteXmlSchema(System.IO.TextWriter)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(TextWriter)
  nameWithType: DataSet.WriteXmlSchema(TextWriter)
  fullName: System.Data.DataSet.WriteXmlSchema(TextWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje <xref href=&quot;System.Data.DataSet&quot;> </xref> struktury jako schematu XML do określonego <xref:System.IO.TextWriter>obiektu.</xref:System.IO.TextWriter>"
  remarks: "Użyj <xref:System.Data.DataSet.WriteXmlSchema%2A>metodę, aby zapisać schematu <xref:System.Data.DataSet>do dokumentu XML.</xref:System.Data.DataSet> </xref:System.Data.DataSet.WriteXmlSchema%2A> Schemat zawiera definicji tabeli, relacji i ograniczenia. Aby zapisać schemat dokumentu XML, użyj <xref:System.Data.DataSet.WriteXmlSchema%2A>metody.</xref:System.Data.DataSet.WriteXmlSchema%2A>       Schemat XML jest zapisywany przy użyciu standardu XSD.       Aby zapisać dane dokumentu XML, użyj <xref:System.Data.DataSet.WriteXml%2A>metody.</xref:System.Data.DataSet.WriteXml%2A>       Klasy pochodną od <xref:System.IO.TextWriter?displayProperty=fullName>obejmują klasy <xref:System.Web.HttpWriter?displayProperty=fullName>, <xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=fullName>, <xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName>, <xref:System.IO.StreamWriter?displayProperty=fullName>i <xref:System.IO.StringWriter?displayProperty=fullName>.</xref:System.IO.StringWriter?displayProperty=fullName> </xref:System.IO.StreamWriter?displayProperty=fullName> </xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName> </xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=fullName> </xref:System.Web.HttpWriter?displayProperty=fullName> </xref:System.IO.TextWriter?displayProperty=fullName>"
  example:
  - "The following example creates a <xref:System.Text.StringBuilder?displayProperty=fullName> object to that is used to create a new <xref:System.IO.StringWriter?displayProperty=fullName>. The <xref:System.IO.StringWriter> is passed to the <xref:System.Data.DataSet.WriteXmlSchema%2A> method, and the resulting string is printed to the console window.  \n  \n [!code-cs[Classic WebData DataSet.WriteXmlSchema1 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_0_1.cs)]\n [!code-vb[Classic WebData DataSet.WriteXmlSchema1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_0_1.vb)]"
  syntax:
    content: public void WriteXmlSchema (System.IO.TextWriter writer);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "<xref:System.IO.TextWriter>Obiektu z jakim zostanie zapisane.</xref:System.IO.TextWriter>"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.String)
  id: WriteXmlSchema(System.String)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(String)
  nameWithType: DataSet.WriteXmlSchema(String)
  fullName: System.Data.DataSet.WriteXmlSchema(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje <xref href=&quot;System.Data.DataSet&quot;> </xref> struktury jako schematu XML w pliku."
  remarks: "Użyj <xref:System.Data.DataSet.WriteXmlSchema%2A>metodę, aby zapisać schematu <xref:System.Data.DataSet>do dokumentu XML.</xref:System.Data.DataSet> </xref:System.Data.DataSet.WriteXmlSchema%2A> Schemat zawiera definicji tabeli, relacji i ograniczenia. Aby zapisać schemat dokumentu XML, użyj <xref:System.Data.DataSet.WriteXmlSchema%2A>metody.</xref:System.Data.DataSet.WriteXmlSchema%2A>       Schemat XML jest zapisywany przy użyciu standardu XSD.       Aby zapisać dane dokumentu XML, użyj <xref:System.Data.DataSet.WriteXml%2A>metody.</xref:System.Data.DataSet.WriteXml%2A>"
  example:
  - >-
    [!code-cs[Classic WebData DataSet.WriteXmlSchema3 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_4_1.cs)]
     [!code-vb[Classic WebData DataSet.WriteXmlSchema3 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_4_1.vb)]
  syntax:
    content: public void WriteXmlSchema (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "Plik Nazwa (włącznie ze ścieżką), z którym chcesz zapisać."
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>Nie ustawiono <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)
  id: WriteXmlSchema(System.Xml.XmlWriter)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(XmlWriter)
  nameWithType: DataSet.WriteXmlSchema(XmlWriter)
  fullName: System.Data.DataSet.WriteXmlSchema(XmlWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje <xref href=&quot;System.Data.DataSet&quot;> </xref> struktury jako schematu XML do <xref:System.Xml.XmlWriter>obiektu.</xref:System.Xml.XmlWriter>"
  remarks: "Użyj <xref:System.Data.DataSet.WriteXmlSchema%2A>metodę, aby zapisać schematu <xref:System.Data.DataSet>do dokumentu XML.</xref:System.Data.DataSet> </xref:System.Data.DataSet.WriteXmlSchema%2A> Schemat zawiera definicji tabeli, relacji i ograniczenia. Aby zapisać schemat dokumentu XML, użyj <xref:System.Data.DataSet.WriteXmlSchema%2A>metody.</xref:System.Data.DataSet.WriteXmlSchema%2A>       Schemat XML jest zapisywany przy użyciu standardu XSD.       Aby zapisać dane dokumentu XML, użyj <xref:System.Data.DataSet.WriteXml%2A>metody.</xref:System.Data.DataSet.WriteXml%2A>       Jedna klasa, która dziedziczy z <xref:System.Xml.XmlWriter?displayProperty=fullName>klasy jest <xref:System.Xml.XmlTextWriter?displayProperty=fullName>klasy.</xref:System.Xml.XmlTextWriter?displayProperty=fullName> </xref:System.Xml.XmlWriter?displayProperty=fullName>"
  example:
  - "The following example creates a new <xref:System.IO.FileStream?displayProperty=fullName> object with the specified path. The <xref:System.IO.FileStream> object is used to create an <xref:System.Xml.XMLTextWriter?displayProperty=fullName> object. The <xref:System.Data.DataSet.WriteXmlSchema%2A> method is then invoked with the <xref:System.Xml.XmlTextWriter> object to write the schema to the disk.  \n  \n [!code-cs[Classic WebData DataSet.WriteXmlSchema2 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_5_1.cs)]\n [!code-vb[Classic WebData DataSet.WriteXmlSchema2 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_5_1.vb)]"
  syntax:
    content: public void WriteXmlSchema (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>Do zapisu.</xref:System.Xml.XmlWriter>"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})
  id: WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(Stream,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(Stream,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(Stream,Converter<Type,String>)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje <xref href=&quot;System.Data.DataSet&quot;> </xref> struktury jako schematu XML do określonego &lt;xref:System.IO.Stream?displayProperty=fullName&gt; obiektu."
  syntax:
    content: public void WriteXmlSchema (System.IO.Stream stream, Converter<Type,string> multipleTargetConverter);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "A &lt;xref:System.IO.Stream?displayProperty=fullName&gt; obiektu do zapisu."
    - id: multipleTargetConverter
      type: System.Converter{System.Type,System.String}
      description: "Delegat służący do konwertowania <xref:System.Type>na ciąg.</xref:System.Type>"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})
  id: WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(TextWriter,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(TextWriter,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(TextWriter,Converter<Type,String>)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje <xref href=&quot;System.Data.DataSet&quot;> </xref> struktury jako schematu XML do określonego <xref:System.IO.TextWriter>.</xref:System.IO.TextWriter>"
  syntax:
    content: public void WriteXmlSchema (System.IO.TextWriter writer, Converter<Type,string> multipleTargetConverter);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "A <xref:System.IO.TextWriter>obiektu do zapisu.</xref:System.IO.TextWriter>"
    - id: multipleTargetConverter
      type: System.Converter{System.Type,System.String}
      description: "Delegat służący do konwertowania <xref:System.Type>na ciąg.</xref:System.Type>"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})
  id: WriteXmlSchema(System.String,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(String,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(String,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(String,Converter<Type,String>)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje <xref href=&quot;System.Data.DataSet&quot;> </xref> struktury jako schematu XML w pliku."
  syntax:
    content: public void WriteXmlSchema (string fileName, Converter<Type,string> multipleTargetConverter);
    parameters:
    - id: fileName
      type: System.String
      description: "Nazwa pliku do zapisu."
    - id: multipleTargetConverter
      type: System.Converter{System.Type,System.String}
      description: "Delegat służący do konwertowania <xref:System.Type>na ciąg.</xref:System.Type>"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})
  id: WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(XmlWriter,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(XmlWriter,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(XmlWriter,Converter<Type,String>)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje <xref href=&quot;System.Data.DataSet&quot;> </xref> struktury jako schematu XML do określonego <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  syntax:
    content: public void WriteXmlSchema (System.Xml.XmlWriter writer, Converter<Type,string> multipleTargetConverter);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "A <xref:System.Xml.XmlWriter>obiektu do zapisu.</xref:System.Xml.XmlWriter>"
    - id: multipleTargetConverter
      type: System.Converter{System.Type,System.String}
      description: "Delegat służący do konwertowania <xref:System.Type>na ciąg.</xref:System.Type>"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.MarshalByValueComponent
  isExternal: false
  name: System.ComponentModel.MarshalByValueComponent
- uid: System.Data.ConstraintException
  parent: System.Data
  isExternal: false
  name: ConstraintException
  nameWithType: ConstraintException
  fullName: System.Data.ConstraintException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.DataSet.#ctor
  parent: System.Data.DataSet
  isExternal: false
  name: DataSet()
  nameWithType: DataSet.DataSet()
  fullName: System.Data.DataSet.DataSet()
- uid: System.Data.DataSet.#ctor(System.String)
  parent: System.Data.DataSet
  isExternal: false
  name: DataSet(String)
  nameWithType: DataSet.DataSet(String)
  fullName: System.Data.DataSet.DataSet(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  isExternal: false
  name: DataSet(SerializationInfo,StreamingContext)
  nameWithType: DataSet.DataSet(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.DataSet(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)
  parent: System.Data.DataSet
  isExternal: false
  name: DataSet(SerializationInfo,StreamingContext,Boolean)
  nameWithType: DataSet.DataSet(SerializationInfo,StreamingContext,Boolean)
  fullName: System.Data.DataSet.DataSet(SerializationInfo,StreamingContext,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.DataSet.AcceptChanges
  parent: System.Data.DataSet
  isExternal: false
  name: AcceptChanges()
  nameWithType: DataSet.AcceptChanges()
  fullName: System.Data.DataSet.AcceptChanges()
- uid: System.Data.DataSet.BeginInit
  parent: System.Data.DataSet
  isExternal: false
  name: BeginInit()
  nameWithType: DataSet.BeginInit()
  fullName: System.Data.DataSet.BeginInit()
- uid: System.Data.DataSet.CaseSensitive
  parent: System.Data.DataSet
  isExternal: false
  name: CaseSensitive
  nameWithType: DataSet.CaseSensitive
  fullName: System.Data.DataSet.CaseSensitive
- uid: System.Data.DataSet.Clear
  parent: System.Data.DataSet
  isExternal: false
  name: Clear()
  nameWithType: DataSet.Clear()
  fullName: System.Data.DataSet.Clear()
- uid: System.Data.DataSet.Clone
  parent: System.Data.DataSet
  isExternal: false
  name: Clone()
  nameWithType: DataSet.Clone()
  fullName: System.Data.DataSet.Clone()
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.DataSet.Copy
  parent: System.Data.DataSet
  isExternal: false
  name: Copy()
  nameWithType: DataSet.Copy()
  fullName: System.Data.DataSet.Copy()
- uid: System.Data.DataSet.CreateDataReader
  parent: System.Data.DataSet
  isExternal: false
  name: CreateDataReader()
  nameWithType: DataSet.CreateDataReader()
  fullName: System.Data.DataSet.CreateDataReader()
- uid: System.Data.DataTableReader
  parent: System.Data
  isExternal: false
  name: DataTableReader
  nameWithType: DataTableReader
  fullName: System.Data.DataTableReader
- uid: System.Data.DataSet.CreateDataReader(System.Data.DataTable[])
  parent: System.Data.DataSet
  isExternal: false
  name: CreateDataReader(DataTable[])
  nameWithType: DataSet.CreateDataReader(DataTable[])
  fullName: System.Data.DataSet.CreateDataReader(DataTable[])
- uid: System.Data.DataTable[]
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable[]
  spec.csharp:
  - uid: System.Data.DataTable
    name: DataTable
    nameWithType: DataTable
    fullName: DataTable[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataSet.DataSetName
  parent: System.Data.DataSet
  isExternal: false
  name: DataSetName
  nameWithType: DataSet.DataSetName
  fullName: System.Data.DataSet.DataSetName
- uid: System.Data.DataSet.DefaultViewManager
  parent: System.Data.DataSet
  isExternal: false
  name: DefaultViewManager
  nameWithType: DataSet.DefaultViewManager
  fullName: System.Data.DataSet.DefaultViewManager
- uid: System.Data.DataViewManager
  parent: System.Data
  isExternal: false
  name: DataViewManager
  nameWithType: DataViewManager
  fullName: System.Data.DataViewManager
- uid: System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)
  parent: System.Data.DataSet
  isExternal: false
  name: DetermineSchemaSerializationMode(XmlReader)
  nameWithType: DataSet.DetermineSchemaSerializationMode(XmlReader)
  fullName: System.Data.DataSet.DetermineSchemaSerializationMode(XmlReader)
- uid: System.Data.SchemaSerializationMode
  parent: System.Data
  isExternal: false
  name: SchemaSerializationMode
  nameWithType: SchemaSerializationMode
  fullName: System.Data.SchemaSerializationMode
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  isExternal: false
  name: DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)
  nameWithType: DataSet.DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)
- uid: System.Data.DataSet.EndInit
  parent: System.Data.DataSet
  isExternal: false
  name: EndInit()
  nameWithType: DataSet.EndInit()
  fullName: System.Data.DataSet.EndInit()
- uid: System.Data.DataSet.EnforceConstraints
  parent: System.Data.DataSet
  isExternal: false
  name: EnforceConstraints
  nameWithType: DataSet.EnforceConstraints
  fullName: System.Data.DataSet.EnforceConstraints
- uid: System.Data.DataSet.ExtendedProperties
  parent: System.Data.DataSet
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataSet.ExtendedProperties
  fullName: System.Data.DataSet.ExtendedProperties
- uid: System.Data.PropertyCollection
  parent: System.Data
  isExternal: false
  name: PropertyCollection
  nameWithType: PropertyCollection
  fullName: System.Data.PropertyCollection
- uid: System.Data.DataSet.GetChanges
  parent: System.Data.DataSet
  isExternal: false
  name: GetChanges()
  nameWithType: DataSet.GetChanges()
  fullName: System.Data.DataSet.GetChanges()
- uid: System.Data.DataSet.GetChanges(System.Data.DataRowState)
  parent: System.Data.DataSet
  isExternal: false
  name: GetChanges(DataRowState)
  nameWithType: DataSet.GetChanges(DataRowState)
  fullName: System.Data.DataSet.GetChanges(DataRowState)
- uid: System.Data.DataRowState
  parent: System.Data
  isExternal: false
  name: DataRowState
  nameWithType: DataRowState
  fullName: System.Data.DataRowState
- uid: System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)
  parent: System.Data.DataSet
  isExternal: false
  name: GetDataSetSchema(XmlSchemaSet)
  nameWithType: DataSet.GetDataSetSchema(XmlSchemaSet)
  fullName: System.Data.DataSet.GetDataSetSchema(XmlSchemaSet)
- uid: System.Xml.Schema.XmlSchemaComplexType
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaComplexType
  nameWithType: XmlSchemaComplexType
  fullName: System.Xml.Schema.XmlSchemaComplexType
- uid: System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: DataSet.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Data.DataSet.GetSchemaSerializable
  parent: System.Data.DataSet
  isExternal: false
  name: GetSchemaSerializable()
  nameWithType: DataSet.GetSchemaSerializable()
  fullName: System.Data.DataSet.GetSchemaSerializable()
- uid: System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  isExternal: false
  name: GetSerializationData(SerializationInfo,StreamingContext)
  nameWithType: DataSet.GetSerializationData(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.GetSerializationData(SerializationInfo,StreamingContext)
- uid: System.Data.DataSet.GetXml
  parent: System.Data.DataSet
  isExternal: false
  name: GetXml()
  nameWithType: DataSet.GetXml()
  fullName: System.Data.DataSet.GetXml()
- uid: System.Data.DataSet.GetXmlSchema
  parent: System.Data.DataSet
  isExternal: false
  name: GetXmlSchema()
  nameWithType: DataSet.GetXmlSchema()
  fullName: System.Data.DataSet.GetXmlSchema()
- uid: System.Data.DataSet.HasChanges
  parent: System.Data.DataSet
  isExternal: false
  name: HasChanges()
  nameWithType: DataSet.HasChanges()
  fullName: System.Data.DataSet.HasChanges()
- uid: System.Data.DataSet.HasChanges(System.Data.DataRowState)
  parent: System.Data.DataSet
  isExternal: false
  name: HasChanges(DataRowState)
  nameWithType: DataSet.HasChanges(DataRowState)
  fullName: System.Data.DataSet.HasChanges(DataRowState)
- uid: System.Data.DataSet.HasErrors
  parent: System.Data.DataSet
  isExternal: false
  name: HasErrors
  nameWithType: DataSet.HasErrors
  fullName: System.Data.DataSet.HasErrors
- uid: System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])
  parent: System.Data.DataSet
  isExternal: false
  name: InferXmlSchema(Stream,String[])
  nameWithType: DataSet.InferXmlSchema(Stream,String[])
  fullName: System.Data.DataSet.InferXmlSchema(Stream,String[])
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])
  parent: System.Data.DataSet
  isExternal: false
  name: InferXmlSchema(TextReader,String[])
  nameWithType: DataSet.InferXmlSchema(TextReader,String[])
  fullName: System.Data.DataSet.InferXmlSchema(TextReader,String[])
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Data.DataSet.InferXmlSchema(System.String,System.String[])
  parent: System.Data.DataSet
  isExternal: false
  name: InferXmlSchema(String,String[])
  nameWithType: DataSet.InferXmlSchema(String,String[])
  fullName: System.Data.DataSet.InferXmlSchema(String,String[])
- uid: System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])
  parent: System.Data.DataSet
  isExternal: false
  name: InferXmlSchema(XmlReader,String[])
  nameWithType: DataSet.InferXmlSchema(XmlReader,String[])
  fullName: System.Data.DataSet.InferXmlSchema(XmlReader,String[])
- uid: System.Data.DataSet.Initialized
  parent: System.Data.DataSet
  isExternal: false
  name: Initialized
  nameWithType: DataSet.Initialized
  fullName: System.Data.DataSet.Initialized
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Data.DataSet.InitializeDerivedDataSet
  parent: System.Data.DataSet
  isExternal: false
  name: InitializeDerivedDataSet()
  nameWithType: DataSet.InitializeDerivedDataSet()
  fullName: System.Data.DataSet.InitializeDerivedDataSet()
- uid: System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  isExternal: false
  name: IsBinarySerialized(SerializationInfo,StreamingContext)
  nameWithType: DataSet.IsBinarySerialized(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.IsBinarySerialized(SerializationInfo,StreamingContext)
- uid: System.Data.DataSet.IsInitialized
  parent: System.Data.DataSet
  isExternal: false
  name: IsInitialized
  nameWithType: DataSet.IsInitialized
  fullName: System.Data.DataSet.IsInitialized
- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])
  parent: System.Data.DataSet
  isExternal: false
  name: Load(IDataReader,LoadOption,DataTable[])
  nameWithType: DataSet.Load(IDataReader,LoadOption,DataTable[])
  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,DataTable[])
- uid: System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Data.LoadOption
  parent: System.Data
  isExternal: false
  name: LoadOption
  nameWithType: LoadOption
  fullName: System.Data.LoadOption
- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])
  parent: System.Data.DataSet
  isExternal: false
  name: Load(IDataReader,LoadOption,String[])
  nameWithType: DataSet.Load(IDataReader,LoadOption,String[])
  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,String[])
- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])
  parent: System.Data.DataSet
  isExternal: false
  name: Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])
  nameWithType: DataSet.Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])
  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])
- uid: System.Data.FillErrorEventHandler
  parent: System.Data
  isExternal: false
  name: FillErrorEventHandler
  nameWithType: FillErrorEventHandler
  fullName: System.Data.FillErrorEventHandler
- uid: System.Data.DataSet.Locale
  parent: System.Data.DataSet
  isExternal: false
  name: Locale
  nameWithType: DataSet.Locale
  fullName: System.Data.DataSet.Locale
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Data.DataSet.Merge(System.Data.DataRow[])
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataRow[])
  nameWithType: DataSet.Merge(DataRow[])
  fullName: System.Data.DataSet.Merge(DataRow[])
- uid: System.Data.DataRow[]
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow[]
  spec.csharp:
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: DataRow[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataSet.Merge(System.Data.DataSet)
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataSet)
  nameWithType: DataSet.Merge(DataSet)
  fullName: System.Data.DataSet.Merge(DataSet)
- uid: System.Data.DataSet.Merge(System.Data.DataTable)
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataTable)
  nameWithType: DataSet.Merge(DataTable)
  fullName: System.Data.DataSet.Merge(DataTable)
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataSet,Boolean)
  nameWithType: DataSet.Merge(DataSet,Boolean)
  fullName: System.Data.DataSet.Merge(DataSet,Boolean)
- uid: System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataRow[],Boolean,MissingSchemaAction)
  nameWithType: DataSet.Merge(DataRow[],Boolean,MissingSchemaAction)
  fullName: System.Data.DataSet.Merge(DataRow[],Boolean,MissingSchemaAction)
- uid: System.Data.MissingSchemaAction
  parent: System.Data
  isExternal: false
  name: MissingSchemaAction
  nameWithType: MissingSchemaAction
  fullName: System.Data.MissingSchemaAction
- uid: System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataSet,Boolean,MissingSchemaAction)
  nameWithType: DataSet.Merge(DataSet,Boolean,MissingSchemaAction)
  fullName: System.Data.DataSet.Merge(DataSet,Boolean,MissingSchemaAction)
- uid: System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataTable,Boolean,MissingSchemaAction)
  nameWithType: DataSet.Merge(DataTable,Boolean,MissingSchemaAction)
  fullName: System.Data.DataSet.Merge(DataTable,Boolean,MissingSchemaAction)
- uid: System.Data.DataSet.MergeFailed
  parent: System.Data.DataSet
  isExternal: false
  name: MergeFailed
  nameWithType: DataSet.MergeFailed
  fullName: System.Data.DataSet.MergeFailed
- uid: System.Data.MergeFailedEventHandler
  parent: System.Data
  isExternal: false
  name: MergeFailedEventHandler
  nameWithType: MergeFailedEventHandler
  fullName: System.Data.MergeFailedEventHandler
- uid: System.Data.DataSet.Namespace
  parent: System.Data.DataSet
  isExternal: false
  name: Namespace
  nameWithType: DataSet.Namespace
  fullName: System.Data.DataSet.Namespace
- uid: System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataSet
  isExternal: false
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataSet.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataSet.OnPropertyChanging(PropertyChangedEventArgs)
- uid: System.ComponentModel.PropertyChangedEventArgs
  parent: System.ComponentModel
  isExternal: true
  name: PropertyChangedEventArgs
  nameWithType: PropertyChangedEventArgs
  fullName: System.ComponentModel.PropertyChangedEventArgs
- uid: System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)
  parent: System.Data.DataSet
  isExternal: false
  name: OnRemoveRelation(DataRelation)
  nameWithType: DataSet.OnRemoveRelation(DataRelation)
  fullName: System.Data.DataSet.OnRemoveRelation(DataRelation)
- uid: System.Data.DataRelation
  parent: System.Data
  isExternal: false
  name: DataRelation
  nameWithType: DataRelation
  fullName: System.Data.DataRelation
- uid: System.Data.DataSet.OnRemoveTable(System.Data.DataTable)
  parent: System.Data.DataSet
  isExternal: false
  name: OnRemoveTable(DataTable)
  nameWithType: DataSet.OnRemoveTable(DataTable)
  fullName: System.Data.DataSet.OnRemoveTable(DataTable)
- uid: System.Data.DataSet.Prefix
  parent: System.Data.DataSet
  isExternal: false
  name: Prefix
  nameWithType: DataSet.Prefix
  fullName: System.Data.DataSet.Prefix
- uid: System.Data.DataSet.RaisePropertyChanging(System.String)
  parent: System.Data.DataSet
  isExternal: false
  name: RaisePropertyChanging(String)
  nameWithType: DataSet.RaisePropertyChanging(String)
  fullName: System.Data.DataSet.RaisePropertyChanging(String)
- uid: System.Data.DataSet.ReadXml(System.IO.Stream)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(Stream)
  nameWithType: DataSet.ReadXml(Stream)
  fullName: System.Data.DataSet.ReadXml(Stream)
- uid: System.Data.XmlReadMode
  parent: System.Data
  isExternal: false
  name: XmlReadMode
  nameWithType: XmlReadMode
  fullName: System.Data.XmlReadMode
- uid: System.Data.DataSet.ReadXml(System.IO.TextReader)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(TextReader)
  nameWithType: DataSet.ReadXml(TextReader)
  fullName: System.Data.DataSet.ReadXml(TextReader)
- uid: System.Data.DataSet.ReadXml(System.String)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(String)
  nameWithType: DataSet.ReadXml(String)
  fullName: System.Data.DataSet.ReadXml(String)
- uid: System.Data.DataSet.ReadXml(System.Xml.XmlReader)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(XmlReader)
  nameWithType: DataSet.ReadXml(XmlReader)
  fullName: System.Data.DataSet.ReadXml(XmlReader)
- uid: System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(Stream,XmlReadMode)
  nameWithType: DataSet.ReadXml(Stream,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(Stream,XmlReadMode)
- uid: System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(TextReader,XmlReadMode)
  nameWithType: DataSet.ReadXml(TextReader,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(TextReader,XmlReadMode)
- uid: System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(String,XmlReadMode)
  nameWithType: DataSet.ReadXml(String,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(String,XmlReadMode)
- uid: System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(XmlReader,XmlReadMode)
  nameWithType: DataSet.ReadXml(XmlReader,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(XmlReader,XmlReadMode)
- uid: System.Data.DataSet.ReadXmlSchema(System.IO.Stream)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSchema(Stream)
  nameWithType: DataSet.ReadXmlSchema(Stream)
  fullName: System.Data.DataSet.ReadXmlSchema(Stream)
- uid: System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSchema(TextReader)
  nameWithType: DataSet.ReadXmlSchema(TextReader)
  fullName: System.Data.DataSet.ReadXmlSchema(TextReader)
- uid: System.Data.DataSet.ReadXmlSchema(System.String)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSchema(String)
  nameWithType: DataSet.ReadXmlSchema(String)
  fullName: System.Data.DataSet.ReadXmlSchema(String)
- uid: System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSchema(XmlReader)
  nameWithType: DataSet.ReadXmlSchema(XmlReader)
  fullName: System.Data.DataSet.ReadXmlSchema(XmlReader)
- uid: System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSerializable(XmlReader)
  nameWithType: DataSet.ReadXmlSerializable(XmlReader)
  fullName: System.Data.DataSet.ReadXmlSerializable(XmlReader)
- uid: System.Data.DataSet.RejectChanges
  parent: System.Data.DataSet
  isExternal: false
  name: RejectChanges()
  nameWithType: DataSet.RejectChanges()
  fullName: System.Data.DataSet.RejectChanges()
- uid: System.Data.DataSet.Relations
  parent: System.Data.DataSet
  isExternal: false
  name: Relations
  nameWithType: DataSet.Relations
  fullName: System.Data.DataSet.Relations
- uid: System.Data.DataRelationCollection
  parent: System.Data
  isExternal: false
  name: DataRelationCollection
  nameWithType: DataRelationCollection
  fullName: System.Data.DataRelationCollection
- uid: System.Data.DataSet.RemotingFormat
  parent: System.Data.DataSet
  isExternal: false
  name: RemotingFormat
  nameWithType: DataSet.RemotingFormat
  fullName: System.Data.DataSet.RemotingFormat
- uid: System.Data.SerializationFormat
  parent: System.Data
  isExternal: false
  name: SerializationFormat
  nameWithType: SerializationFormat
  fullName: System.Data.SerializationFormat
- uid: System.Data.DataSet.Reset
  parent: System.Data.DataSet
  isExternal: false
  name: Reset()
  nameWithType: DataSet.Reset()
  fullName: System.Data.DataSet.Reset()
- uid: System.Data.DataSet.SchemaSerializationMode
  parent: System.Data.DataSet
  isExternal: false
  name: SchemaSerializationMode
  nameWithType: DataSet.SchemaSerializationMode
  fullName: System.Data.DataSet.SchemaSerializationMode
- uid: System.Data.DataSet.ShouldSerializeRelations
  parent: System.Data.DataSet
  isExternal: false
  name: ShouldSerializeRelations()
  nameWithType: DataSet.ShouldSerializeRelations()
  fullName: System.Data.DataSet.ShouldSerializeRelations()
- uid: System.Data.DataSet.ShouldSerializeTables
  parent: System.Data.DataSet
  isExternal: false
  name: ShouldSerializeTables()
  nameWithType: DataSet.ShouldSerializeTables()
  fullName: System.Data.DataSet.ShouldSerializeTables()
- uid: System.Data.DataSet.Site
  parent: System.Data.DataSet
  isExternal: false
  name: Site
  nameWithType: DataSet.Site
  fullName: System.Data.DataSet.Site
- uid: System.ComponentModel.ISite
  parent: System.ComponentModel
  isExternal: false
  name: ISite
  nameWithType: ISite
  fullName: System.ComponentModel.ISite
- uid: System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection
  parent: System.Data.DataSet
  isExternal: false
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: DataSet.System.ComponentModel.IListSource.ContainsListCollection
  fullName: System.Data.DataSet.System.ComponentModel.IListSource.ContainsListCollection
- uid: System.Data.DataSet.System#ComponentModel#IListSource#GetList
  parent: System.Data.DataSet
  isExternal: false
  name: System.ComponentModel.IListSource.GetList()
  nameWithType: DataSet.System.ComponentModel.IListSource.GetList()
  fullName: System.Data.DataSet.System.ComponentModel.IListSource.GetList()
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema
  parent: System.Data.DataSet
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.GetSchema()
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema()
  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema()
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  parent: System.Data.DataSet
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  parent: System.Data.DataSet
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Data.DataSet.Tables
  parent: System.Data.DataSet
  isExternal: false
  name: Tables
  nameWithType: DataSet.Tables
  fullName: System.Data.DataSet.Tables
- uid: System.Data.DataTableCollection
  parent: System.Data
  isExternal: false
  name: DataTableCollection
  nameWithType: DataTableCollection
  fullName: System.Data.DataTableCollection
- uid: System.Data.DataSet.WriteXml(System.IO.Stream)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(Stream)
  nameWithType: DataSet.WriteXml(Stream)
  fullName: System.Data.DataSet.WriteXml(Stream)
- uid: System.Data.DataSet.WriteXml(System.IO.TextWriter)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(TextWriter)
  nameWithType: DataSet.WriteXml(TextWriter)
  fullName: System.Data.DataSet.WriteXml(TextWriter)
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Data.DataSet.WriteXml(System.String)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(String)
  nameWithType: DataSet.WriteXml(String)
  fullName: System.Data.DataSet.WriteXml(String)
- uid: System.Data.DataSet.WriteXml(System.Xml.XmlWriter)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(XmlWriter)
  nameWithType: DataSet.WriteXml(XmlWriter)
  fullName: System.Data.DataSet.WriteXml(XmlWriter)
- uid: System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(Stream,XmlWriteMode)
  nameWithType: DataSet.WriteXml(Stream,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(Stream,XmlWriteMode)
- uid: System.Data.XmlWriteMode
  parent: System.Data
  isExternal: false
  name: XmlWriteMode
  nameWithType: XmlWriteMode
  fullName: System.Data.XmlWriteMode
- uid: System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(TextWriter,XmlWriteMode)
  nameWithType: DataSet.WriteXml(TextWriter,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(TextWriter,XmlWriteMode)
- uid: System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(String,XmlWriteMode)
  nameWithType: DataSet.WriteXml(String,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(String,XmlWriteMode)
- uid: System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(XmlWriter,XmlWriteMode)
  nameWithType: DataSet.WriteXml(XmlWriter,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(XmlWriter,XmlWriteMode)
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.Stream)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(Stream)
  nameWithType: DataSet.WriteXmlSchema(Stream)
  fullName: System.Data.DataSet.WriteXmlSchema(Stream)
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(TextWriter)
  nameWithType: DataSet.WriteXmlSchema(TextWriter)
  fullName: System.Data.DataSet.WriteXmlSchema(TextWriter)
- uid: System.Data.DataSet.WriteXmlSchema(System.String)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(String)
  nameWithType: DataSet.WriteXmlSchema(String)
  fullName: System.Data.DataSet.WriteXmlSchema(String)
- uid: System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(XmlWriter)
  nameWithType: DataSet.WriteXmlSchema(XmlWriter)
  fullName: System.Data.DataSet.WriteXmlSchema(XmlWriter)
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(Stream,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(Stream,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(Stream,Converter<Type,String>)
- uid: System.Converter{System.Type,System.String}
  parent: System
  isExternal: false
  name: Converter<Type,String>
  nameWithType: Converter<Type,String>
  fullName: System.Converter<System.Type,System.String>
  spec.csharp:
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: Converter<System.Type,System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(TextWriter,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(TextWriter,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(TextWriter,Converter<Type,String>)
- uid: System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(String,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(String,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(String,Converter<Type,String>)
- uid: System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(XmlWriter,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(XmlWriter,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(XmlWriter,Converter<Type,String>)
- uid: System.Data.DataSet.#ctor*
  parent: System.Data.DataSet
  isExternal: false
  name: DataSet
  nameWithType: DataSet.DataSet
- uid: System.Data.DataSet.AcceptChanges*
  parent: System.Data.DataSet
  isExternal: false
  name: AcceptChanges
  nameWithType: DataSet.AcceptChanges
- uid: System.Data.DataSet.BeginInit*
  parent: System.Data.DataSet
  isExternal: false
  name: BeginInit
  nameWithType: DataSet.BeginInit
- uid: System.Data.DataSet.CaseSensitive*
  parent: System.Data.DataSet
  isExternal: false
  name: CaseSensitive
  nameWithType: DataSet.CaseSensitive
- uid: System.Data.DataSet.Clear*
  parent: System.Data.DataSet
  isExternal: false
  name: Clear
  nameWithType: DataSet.Clear
- uid: System.Data.DataSet.Clone*
  parent: System.Data.DataSet
  isExternal: false
  name: Clone
  nameWithType: DataSet.Clone
- uid: System.Data.DataSet.Copy*
  parent: System.Data.DataSet
  isExternal: false
  name: Copy
  nameWithType: DataSet.Copy
- uid: System.Data.DataSet.CreateDataReader*
  parent: System.Data.DataSet
  isExternal: false
  name: CreateDataReader
  nameWithType: DataSet.CreateDataReader
- uid: System.Data.DataSet.DataSetName*
  parent: System.Data.DataSet
  isExternal: false
  name: DataSetName
  nameWithType: DataSet.DataSetName
- uid: System.Data.DataSet.DefaultViewManager*
  parent: System.Data.DataSet
  isExternal: false
  name: DefaultViewManager
  nameWithType: DataSet.DefaultViewManager
- uid: System.Data.DataSet.DetermineSchemaSerializationMode*
  parent: System.Data.DataSet
  isExternal: false
  name: DetermineSchemaSerializationMode
  nameWithType: DataSet.DetermineSchemaSerializationMode
- uid: System.Data.DataSet.EndInit*
  parent: System.Data.DataSet
  isExternal: false
  name: EndInit
  nameWithType: DataSet.EndInit
- uid: System.Data.DataSet.EnforceConstraints*
  parent: System.Data.DataSet
  isExternal: false
  name: EnforceConstraints
  nameWithType: DataSet.EnforceConstraints
- uid: System.Data.DataSet.ExtendedProperties*
  parent: System.Data.DataSet
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataSet.ExtendedProperties
- uid: System.Data.DataSet.GetChanges*
  parent: System.Data.DataSet
  isExternal: false
  name: GetChanges
  nameWithType: DataSet.GetChanges
- uid: System.Data.DataSet.GetDataSetSchema*
  parent: System.Data.DataSet
  isExternal: false
  name: GetDataSetSchema
  nameWithType: DataSet.GetDataSetSchema
- uid: System.Data.DataSet.GetObjectData*
  parent: System.Data.DataSet
  isExternal: false
  name: GetObjectData
  nameWithType: DataSet.GetObjectData
- uid: System.Data.DataSet.GetSchemaSerializable*
  parent: System.Data.DataSet
  isExternal: false
  name: GetSchemaSerializable
  nameWithType: DataSet.GetSchemaSerializable
- uid: System.Data.DataSet.GetSerializationData*
  parent: System.Data.DataSet
  isExternal: false
  name: GetSerializationData
  nameWithType: DataSet.GetSerializationData
- uid: System.Data.DataSet.GetXml*
  parent: System.Data.DataSet
  isExternal: false
  name: GetXml
  nameWithType: DataSet.GetXml
- uid: System.Data.DataSet.GetXmlSchema*
  parent: System.Data.DataSet
  isExternal: false
  name: GetXmlSchema
  nameWithType: DataSet.GetXmlSchema
- uid: System.Data.DataSet.HasChanges*
  parent: System.Data.DataSet
  isExternal: false
  name: HasChanges
  nameWithType: DataSet.HasChanges
- uid: System.Data.DataSet.HasErrors*
  parent: System.Data.DataSet
  isExternal: false
  name: HasErrors
  nameWithType: DataSet.HasErrors
- uid: System.Data.DataSet.InferXmlSchema*
  parent: System.Data.DataSet
  isExternal: false
  name: InferXmlSchema
  nameWithType: DataSet.InferXmlSchema
- uid: System.Data.DataSet.InitializeDerivedDataSet*
  parent: System.Data.DataSet
  isExternal: false
  name: InitializeDerivedDataSet
  nameWithType: DataSet.InitializeDerivedDataSet
- uid: System.Data.DataSet.IsBinarySerialized*
  parent: System.Data.DataSet
  isExternal: false
  name: IsBinarySerialized
  nameWithType: DataSet.IsBinarySerialized
- uid: System.Data.DataSet.IsInitialized*
  parent: System.Data.DataSet
  isExternal: false
  name: IsInitialized
  nameWithType: DataSet.IsInitialized
- uid: System.Data.DataSet.Load*
  parent: System.Data.DataSet
  isExternal: false
  name: Load
  nameWithType: DataSet.Load
- uid: System.Data.DataSet.Locale*
  parent: System.Data.DataSet
  isExternal: false
  name: Locale
  nameWithType: DataSet.Locale
- uid: System.Data.DataSet.Merge*
  parent: System.Data.DataSet
  isExternal: false
  name: Merge
  nameWithType: DataSet.Merge
- uid: System.Data.DataSet.Namespace*
  parent: System.Data.DataSet
  isExternal: false
  name: Namespace
  nameWithType: DataSet.Namespace
- uid: System.Data.DataSet.OnPropertyChanging*
  parent: System.Data.DataSet
  isExternal: false
  name: OnPropertyChanging
  nameWithType: DataSet.OnPropertyChanging
- uid: System.Data.DataSet.OnRemoveRelation*
  parent: System.Data.DataSet
  isExternal: false
  name: OnRemoveRelation
  nameWithType: DataSet.OnRemoveRelation
- uid: System.Data.DataSet.OnRemoveTable*
  parent: System.Data.DataSet
  isExternal: false
  name: OnRemoveTable
  nameWithType: DataSet.OnRemoveTable
- uid: System.Data.DataSet.Prefix*
  parent: System.Data.DataSet
  isExternal: false
  name: Prefix
  nameWithType: DataSet.Prefix
- uid: System.Data.DataSet.RaisePropertyChanging*
  parent: System.Data.DataSet
  isExternal: false
  name: RaisePropertyChanging
  nameWithType: DataSet.RaisePropertyChanging
- uid: System.Data.DataSet.ReadXml*
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml
  nameWithType: DataSet.ReadXml
- uid: System.Data.DataSet.ReadXmlSchema*
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSchema
  nameWithType: DataSet.ReadXmlSchema
- uid: System.Data.DataSet.ReadXmlSerializable*
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSerializable
  nameWithType: DataSet.ReadXmlSerializable
- uid: System.Data.DataSet.RejectChanges*
  parent: System.Data.DataSet
  isExternal: false
  name: RejectChanges
  nameWithType: DataSet.RejectChanges
- uid: System.Data.DataSet.Relations*
  parent: System.Data.DataSet
  isExternal: false
  name: Relations
  nameWithType: DataSet.Relations
- uid: System.Data.DataSet.RemotingFormat*
  parent: System.Data.DataSet
  isExternal: false
  name: RemotingFormat
  nameWithType: DataSet.RemotingFormat
- uid: System.Data.DataSet.Reset*
  parent: System.Data.DataSet
  isExternal: false
  name: Reset
  nameWithType: DataSet.Reset
- uid: System.Data.DataSet.SchemaSerializationMode*
  parent: System.Data.DataSet
  isExternal: false
  name: SchemaSerializationMode
  nameWithType: DataSet.SchemaSerializationMode
- uid: System.Data.DataSet.ShouldSerializeRelations*
  parent: System.Data.DataSet
  isExternal: false
  name: ShouldSerializeRelations
  nameWithType: DataSet.ShouldSerializeRelations
- uid: System.Data.DataSet.ShouldSerializeTables*
  parent: System.Data.DataSet
  isExternal: false
  name: ShouldSerializeTables
  nameWithType: DataSet.ShouldSerializeTables
- uid: System.Data.DataSet.Site*
  parent: System.Data.DataSet
  isExternal: false
  name: Site
  nameWithType: DataSet.Site
- uid: System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection*
  parent: System.Data.DataSet
  isExternal: false
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: DataSet.System.ComponentModel.IListSource.ContainsListCollection
- uid: System.Data.DataSet.System#ComponentModel#IListSource#GetList*
  parent: System.Data.DataSet
  isExternal: false
  name: System.ComponentModel.IListSource.GetList
  nameWithType: DataSet.System.ComponentModel.IListSource.GetList
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema*
  parent: System.Data.DataSet
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml*
  parent: System.Data.DataSet
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.ReadXml
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml*
  parent: System.Data.DataSet
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.WriteXml
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml
- uid: System.Data.DataSet.Tables*
  parent: System.Data.DataSet
  isExternal: false
  name: Tables
  nameWithType: DataSet.Tables
- uid: System.Data.DataSet.WriteXml*
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml
  nameWithType: DataSet.WriteXml
- uid: System.Data.DataSet.WriteXmlSchema*
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema
  nameWithType: DataSet.WriteXmlSchema
