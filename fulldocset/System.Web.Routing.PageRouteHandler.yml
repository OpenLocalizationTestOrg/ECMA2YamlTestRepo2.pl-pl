### YamlMime:ManagedReference
items:
- uid: System.Web.Routing.PageRouteHandler
  id: PageRouteHandler
  children:
  - System.Web.Routing.PageRouteHandler.#ctor(System.String)
  - System.Web.Routing.PageRouteHandler.#ctor(System.String,System.Boolean)
  - System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess
  - System.Web.Routing.PageRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)
  - System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(System.Web.Routing.RequestContext)
  - System.Web.Routing.PageRouteHandler.VirtualPath
  langs:
  - csharp
  name: PageRouteHandler
  nameWithType: PageRouteHandler
  fullName: System.Web.Routing.PageRouteHandler
  type: Class
  summary: "Udostępnia właściwości i metody określających sposób mapowania pliku fizycznego adresu URL."
  remarks: "Przekaż wystąpienie PageRouteHandler do <xref:System.Web.Routing.Route>konstruktora do mapowania pliku fizycznego adresu URL.</xref:System.Web.Routing.Route> Obiekt PageRouteHandler Określa ścieżkę wirtualną pliku fizycznego i określa, czy zaznaczono opcję reguł autoryzacji dla fizycznego adresu URL."
  syntax:
    content: 'public class PageRouteHandler : System.Web.Routing.IRouteHandler'
  inheritance:
  - System.Object
  implements:
  - System.Web.Routing.IRouteHandler
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Routing.PageRouteHandler.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Web.Routing.PageRouteHandler
  langs:
  - csharp
  name: PageRouteHandler(String)
  nameWithType: PageRouteHandler.PageRouteHandler(String)
  fullName: System.Web.Routing.PageRouteHandler.PageRouteHandler(String)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Routing
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Web.Routing.PageRouteHandler&quot;> </xref> klasy."
  remarks: "Korzystając z tego konstruktora <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A>ma ustawioną właściwość `true`.</xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A>"
  syntax:
    content: public PageRouteHandler (string virtualPath);
    parameters:
    - id: virtualPath
      type: System.String
      description: "Ścieżka wirtualna pliku fizycznego dla tego <xref:System.Web.Routing.RouteData.Route*>obiektu.</xref:System.Web.Routing.RouteData.Route*> Plik musi znajdować się w bieżącej aplikacji. W związku z tym ścieżka musi rozpoczynać się od tyldy (~)."
  overload: System.Web.Routing.PageRouteHandler.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> virtualPath </code> Parametr jest <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> to ciąg pusty lub nie rozpoczyna się od &quot;~ /&quot;."
  platform:
  - net462
- uid: System.Web.Routing.PageRouteHandler.#ctor(System.String,System.Boolean)
  id: '#ctor(System.String,System.Boolean)'
  parent: System.Web.Routing.PageRouteHandler
  langs:
  - csharp
  name: PageRouteHandler(String,Boolean)
  nameWithType: PageRouteHandler.PageRouteHandler(String,Boolean)
  fullName: System.Web.Routing.PageRouteHandler.PageRouteHandler(String,Boolean)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Routing
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Web.Routing.PageRouteHandler&quot;> </xref> klasy."
  remarks: "Domyślnie <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A>jest właściwość `true`.</xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> W związku z tym, jeśli chcesz, aby reguł autoryzacji, które mają być stosowane do obu adres URL strony fizycznej i adres URL trasy, można użyć <xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%29>Konstruktor zamiast tego konstruktora.</xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%29>"
  syntax:
    content: public PageRouteHandler (string virtualPath, bool checkPhysicalUrlAccess);
    parameters:
    - id: virtualPath
      type: System.String
      description: "Ścieżka wirtualna pliku fizycznego tego <xref:System.Web.Routing.RouteData.Route*>obiektu.</xref:System.Web.Routing.RouteData.Route*> Plik musi znajdować się w bieżącej aplikacji. W związku z tym ścieżka musi rozpoczynać się od tyldy (~)."
    - id: checkPhysicalUrlAccess
      type: System.Boolean
      description: "Jeśli ta właściwość jest ustawiona na <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, reguły autoryzacji zostaną zastosowane do adresu URL żądania, a nie adres URL strony fizycznej. Jeśli ta właściwość jest ustawiona na <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, reguły autoryzacji zostaną zastosowane w adresie URL żądania i adres URL strony fizycznej."
  overload: System.Web.Routing.PageRouteHandler.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> virtualPath </code> Parametr jest <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> to ciąg pusty lub nie rozpoczyna się od &quot;~ /&quot;."
  platform:
  - net462
- uid: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess
  id: CheckPhysicalUrlAccess
  parent: System.Web.Routing.PageRouteHandler
  langs:
  - csharp
  name: CheckPhysicalUrlAccess
  nameWithType: PageRouteHandler.CheckPhysicalUrlAccess
  fullName: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Routing
  summary: "Pobiera wartość określającą, czy reguły autoryzacji są stosowane do adresu URL pliku fizycznego."
  remarks: "Można ustawić właściwości CheckPhysicalUrlAccess, korzystając z <xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%2CSystem.Boolean%29>konstruktora.</xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%2CSystem.Boolean%29>       Wartość właściwości CheckPhysicalUrlAccess Określa, czy <xref:System.Web.Routing.PageRouteHandler>obiektu będzie sprawdzać uprawnienia tylko do adresu URL trasy lub zarówno strony fizycznej, jak i adresu URL trasy.</xref:System.Web.Routing.PageRouteHandler>       Jeśli ustawiono właściwość CheckPhysicalUrlAccess `true` (która jest jego wartość domyślna), użytkownik musi mieć uprawnienia dostępu zarówno adres URL trasy, jak i fizycznych adresu URL. Jeśli ustawiono właściwość CheckPhysicalUrlAccess `false`, użytkownik wymaga tylko uprawnień dostępu do adresu URL trasy i uprawnienia do fizycznego adresu URL nie są sprawdzane.       Uprawnienia są zdefiniowane w pliku Web.config, jak pokazano w poniższym przykładzie: ```   <configuration>     <location path=&quot;categoriespage.aspx&quot;>       <system.web>         <authorization>           <allow roles=&quot;admin&quot;/>           <deny users=&quot;*&quot;/>         </authorization>       </system.web>     </location>     <location path=&quot;category&quot;>       <system.web>         <authorization>           <allow users=&quot;*&quot;/>         </authorization>       </system.web>     </location>   </configuration>   ``` dla danego adresu URL żądania, który zawiera `Category/food/show` po nazwie domeny, jeśli jest wzorzec URL trasy `Category/{action}/{categoryName}` i strony fizycznej jest Categoriespage.aspx, [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] stosuje uprawnienia zdefiniowane w poprzednim przykładzie w jednym z następujących sposobów: - Jeśli właściwość CheckPhysicalUrlAccess jest `false`, wszyscy użytkownicy mają prawo dostępu, ponieważ wszyscy użytkownicy są udzielony dostęp do wzorca adresu URL, który rozpoczyna się od `category`.      — Jeśli właściwość CheckPhysicalUrlAccess jest `true`, tylko `admin` użytkownicy mają prawo dostępu. Wszyscy użytkownicy mają dostęp do wzorca adresu URL, który rozpoczyna się od `category`, ale tylko `admin` użytkownicy mają dostęp do strony fizycznej Categoriespage.aspx."
  syntax:
    content: public bool CheckPhysicalUrlAccess { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli autoryzacji jest sprawdzany pod kątem adres URL pliku fizycznego, który jest skojarzony z trasą; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Wartość domyślna to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Routing.PageRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)
  id: GetHttpHandler(System.Web.Routing.RequestContext)
  parent: System.Web.Routing.PageRouteHandler
  langs:
  - csharp
  name: GetHttpHandler(RequestContext)
  nameWithType: PageRouteHandler.GetHttpHandler(RequestContext)
  fullName: System.Web.Routing.PageRouteHandler.GetHttpHandler(RequestContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Routing
  summary: "Zwraca obiekt, który przetwarza żądania."
  syntax:
    content: public virtual System.Web.IHttpHandler GetHttpHandler (System.Web.Routing.RequestContext requestContext);
    parameters:
    - id: requestContext
      type: System.Web.Routing.RequestContext
      description: "Obiekt hermetyzujący informacje o żądaniu."
    return:
      type: System.Web.IHttpHandler
      description: "Obiekt przetwarzający żądanie."
  overload: System.Web.Routing.PageRouteHandler.GetHttpHandler*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestContext</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(System.Web.Routing.RequestContext)
  id: GetSubstitutedVirtualPath(System.Web.Routing.RequestContext)
  parent: System.Web.Routing.PageRouteHandler
  langs:
  - csharp
  name: GetSubstitutedVirtualPath(RequestContext)
  nameWithType: PageRouteHandler.GetSubstitutedVirtualPath(RequestContext)
  fullName: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(RequestContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Routing
  summary: "Zwraca ścieżkę wirtualną pliku fizycznego dla trasy, po zastosowaniu podstawień, aby wszystkie parametry zamiany."
  remarks: "Jeśli <xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A>wartość nie zawiera żadnych parametrów zastąpienia, metoda GetSubstitutedVirtualPath zwraca taką samą wartość jak <xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A>Właściwości.</xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A> </xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A>"
  syntax:
    content: public string GetSubstitutedVirtualPath (System.Web.Routing.RequestContext requestContext);
    parameters:
    - id: requestContext
      type: System.Web.Routing.RequestContext
      description: "Obiekt hermetyzujący informacje o żądaniu."
    return:
      type: System.String
      description: "Adres URL pliku fizycznego, który został wygenerowany na podstawie trasy."
  overload: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestContext</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Routing.PageRouteHandler.VirtualPath
  id: VirtualPath
  parent: System.Web.Routing.PageRouteHandler
  langs:
  - csharp
  name: VirtualPath
  nameWithType: PageRouteHandler.VirtualPath
  fullName: System.Web.Routing.PageRouteHandler.VirtualPath
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Routing
  summary: "Pobiera ścieżkę wirtualną strony sieci Web, który jest skojarzony z tej trasy."
  remarks: "Ustaw właściwość VirtualPath <xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=fullName>konstruktora lub <xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=fullName>konstruktora.</xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=fullName> </xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=fullName>"
  syntax:
    content: public string VirtualPath { get; }
    return:
      type: System.String
      description: "Adres URL strony sieci Web, zanim podstawień zostały zastosowane zastąpienia parametrów."
  overload: System.Web.Routing.PageRouteHandler.VirtualPath*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Web.Routing.PageRouteHandler.#ctor(System.String)
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: PageRouteHandler(String)
  nameWithType: PageRouteHandler.PageRouteHandler(String)
  fullName: System.Web.Routing.PageRouteHandler.PageRouteHandler(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Routing.PageRouteHandler.#ctor(System.String,System.Boolean)
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: PageRouteHandler(String,Boolean)
  nameWithType: PageRouteHandler.PageRouteHandler(String,Boolean)
  fullName: System.Web.Routing.PageRouteHandler.PageRouteHandler(String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: CheckPhysicalUrlAccess
  nameWithType: PageRouteHandler.CheckPhysicalUrlAccess
  fullName: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess
- uid: System.Web.Routing.PageRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: GetHttpHandler(RequestContext)
  nameWithType: PageRouteHandler.GetHttpHandler(RequestContext)
  fullName: System.Web.Routing.PageRouteHandler.GetHttpHandler(RequestContext)
- uid: System.Web.IHttpHandler
  parent: System.Web
  isExternal: false
  name: IHttpHandler
  nameWithType: IHttpHandler
  fullName: System.Web.IHttpHandler
- uid: System.Web.Routing.RequestContext
  parent: System.Web.Routing
  isExternal: true
  name: RequestContext
  nameWithType: RequestContext
  fullName: System.Web.Routing.RequestContext
- uid: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(System.Web.Routing.RequestContext)
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: GetSubstitutedVirtualPath(RequestContext)
  nameWithType: PageRouteHandler.GetSubstitutedVirtualPath(RequestContext)
  fullName: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(RequestContext)
- uid: System.Web.Routing.PageRouteHandler.VirtualPath
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: VirtualPath
  nameWithType: PageRouteHandler.VirtualPath
  fullName: System.Web.Routing.PageRouteHandler.VirtualPath
- uid: System.Web.Routing.PageRouteHandler.#ctor*
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: PageRouteHandler
  nameWithType: PageRouteHandler.PageRouteHandler
- uid: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess*
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: CheckPhysicalUrlAccess
  nameWithType: PageRouteHandler.CheckPhysicalUrlAccess
- uid: System.Web.Routing.PageRouteHandler.GetHttpHandler*
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: GetHttpHandler
  nameWithType: PageRouteHandler.GetHttpHandler
- uid: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath*
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: GetSubstitutedVirtualPath
  nameWithType: PageRouteHandler.GetSubstitutedVirtualPath
- uid: System.Web.Routing.PageRouteHandler.VirtualPath*
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: VirtualPath
  nameWithType: PageRouteHandler.VirtualPath
