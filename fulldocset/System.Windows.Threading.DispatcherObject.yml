### YamlMime:ManagedReference
items:
- uid: System.Windows.Threading.DispatcherObject
  id: DispatcherObject
  children:
  - System.Windows.Threading.DispatcherObject.#ctor
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  langs:
  - csharp
  name: DispatcherObject
  nameWithType: DispatcherObject
  fullName: System.Windows.Threading.DispatcherObject
  type: Class
  summary: "Reprezentuje obiekt, który jest skojarzony z <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>."
  remarks: "Tylko wątek, który <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>został utworzony na może uzyskać dostępu do DispatcherObject bezpośrednio.</xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>  Aby uzyskać dostęp do DispatcherObject z wątku innego niż wątek został utworzony DispatcherObject, należy wywołać <xref:System.Windows.Threading.Dispatcher.Invoke%2A>lub <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>na <xref:System.Windows.Threading.Dispatcher>DispatcherObject jest skojarzony.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.Dispatcher.Invoke%2A>       Podklasy DispatcherObject, które muszą zapewniać bezpieczeństwo wątków można to zrobić przez wywołanie metody <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A>dla wszystkich metod publicznych.</xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A>  Gwarantuje to, że wątek wywołujący jest wątku, który DispatcherObject został utworzony na.       DispatcherObject nie może występować niezależnie; oznacza to, że wszystkie konstruktory są chronione.       Obiekty, które pochodzą z DispatcherObject mają koligacji wątku.       Obiekty, które pochodzą z <xref:System.Windows.Freezable>są bezwątkowe gdy są one zablokowane.</xref:System.Windows.Freezable>  Aby uzyskać więcej informacji, zobacz [obiektu Freezable Przegląd obiektów](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public abstract class DispatcherObject
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherObject.#ctor
  id: '#ctor'
  parent: System.Windows.Threading.DispatcherObject
  langs:
  - csharp
  name: DispatcherObject()
  nameWithType: DispatcherObject.DispatcherObject()
  fullName: System.Windows.Threading.DispatcherObject.DispatcherObject()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Windows.Threading.DispatcherObject&quot;> </xref> klasy."
  syntax:
    content: protected DispatcherObject ();
    parameters: []
  overload: System.Windows.Threading.DispatcherObject.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherObject.CheckAccess
  id: CheckAccess
  parent: System.Windows.Threading.DispatcherObject
  langs:
  - csharp
  name: CheckAccess()
  nameWithType: DispatcherObject.CheckAccess()
  fullName: System.Windows.Threading.DispatcherObject.CheckAccess()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Określa, czy wątek wywołujący ma dostęp do tego <xref href=&quot;System.Windows.Threading.DispatcherObject&quot;> </xref>."
  remarks: "Tylko wątek <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>został utworzony na może uzyskać dostępu do <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>       Którymkolwiek wątku można sprawdzić, czy ma dostęp do tego <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject>       Różnica między CheckAccess i <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A>CheckAccess zwracanych wartość logiczna określająca, czy wątek wywołujący ma dostęp do tego jest <xref:System.Windows.Threading.DispatcherObject>i <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A>zgłasza wyjątek, jeśli wątek wywołujący nie ma dostępu do tego <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> </xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A>       Wywołanie tej metody jest taki sam jak wywołanie <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>na skojarzonym <xref:System.Windows.Threading.Dispatcher>obiektu.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>"
  example:
  - "The following example uses CheckAccess to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.  The CheckAccess method on the <xref:System.Windows.Controls.Button> is called to verify access to the thread.  If the calling thread has access, the <xref:System.Windows.Controls.Button> is updated by just accessing the members of the <xref:System.Windows.Controls.Button>; otherwise, a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, is posted onto the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button>.  \n  \n [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/add/codesnippet/visualbasic/dispatcherobjectaccesssample/window1.xaml.vb#dispatcherobjectaccesscheckaccess)]\n [!code-cs[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/add/codesnippet/csharp/DispatcherObjectAccessSample/Window1.xaml.cs#dispatcherobjectaccesscheckaccess)]"
  syntax:
    content: public bool CheckAccess ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli wątek wywołujący ma dostęp do tego obiektu. w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Threading.DispatcherObject.CheckAccess*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherObject.Dispatcher
  id: Dispatcher
  parent: System.Windows.Threading.DispatcherObject
  langs:
  - csharp
  name: Dispatcher
  nameWithType: DispatcherObject.Dispatcher
  fullName: System.Windows.Threading.DispatcherObject.Dispatcher
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Pobiera <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> to <xref href=&quot;System.Windows.Threading.DispatcherObject&quot;> </xref> jest skojarzony."
  remarks: "Tylko wątek Dyspozytor został utworzony na może uzyskać dostępu do <xref:System.Windows.Threading.DispatcherObject>bezpośrednio.</xref:System.Windows.Threading.DispatcherObject>  Aby uzyskać dostęp do <xref:System.Windows.Threading.DispatcherObject>z wątku innego niż wątek <xref:System.Windows.Threading.DispatcherObject>został utworzony, wywołaj <xref:System.Windows.Threading.Dispatcher.Invoke%2A>i <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>na <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherObject>jest skojarzony.</xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.Dispatcher.Invoke%2A> </xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject>"
  syntax:
    content: public System.Windows.Threading.Dispatcher Dispatcher { get; }
    return:
      type: System.Windows.Threading.Dispatcher
      description: "Dyspozytor."
  overload: System.Windows.Threading.DispatcherObject.Dispatcher*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherObject.VerifyAccess
  id: VerifyAccess
  parent: System.Windows.Threading.DispatcherObject
  langs:
  - csharp
  name: VerifyAccess()
  nameWithType: DispatcherObject.VerifyAccess()
  fullName: System.Windows.Threading.DispatcherObject.VerifyAccess()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Wymusza, że wątek wywołujący ma dostęp do tego <xref href=&quot;System.Windows.Threading.DispatcherObject&quot;> </xref>."
  remarks: "Tylko wątek <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>został utworzony na może uzyskać dostępu do <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>       Którymkolwiek wątku można sprawdzić, czy ma dostęp do tego <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject>       Różnica między <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A>i VerifyAccess <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A>zwraca wartość logiczna określająca, czy wątek wywołujący ma dostęp do tego <xref:System.Windows.Threading.DispatcherObject>i VerifyAccess zgłasza wyjątek, jeśli wątek wywołujący nie ma dostępu do tego <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> </xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A>"
  example:
  - "The following example uses VerifyAccess to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.  If the calling thread does not have access, an <xref:System.InvalidOperationException> is thrown.  \n  \n [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/add/codesnippet/visualbasic/dispatcherobjectaccesssample/window1.xaml.vb#dispatcherobjectaccessverifyaccess)]\n [!code-cs[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/add/codesnippet/csharp/DispatcherObjectAccessSample/Window1.xaml.cs#dispatcherobjectaccessverifyaccess)]"
  syntax:
    content: public void VerifyAccess ();
    parameters: []
  overload: System.Windows.Threading.DispatcherObject.VerifyAccess*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Wątek wywołujący nie ma dostępu do tego <xref href=&quot;System.Windows.Threading.DispatcherObject&quot;> </xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.Threading.DispatcherObject.#ctor
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: DispatcherObject()
  nameWithType: DispatcherObject.DispatcherObject()
  fullName: System.Windows.Threading.DispatcherObject.DispatcherObject()
- uid: System.Windows.Threading.DispatcherObject.CheckAccess
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: CheckAccess()
  nameWithType: DispatcherObject.CheckAccess()
  fullName: System.Windows.Threading.DispatcherObject.CheckAccess()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Threading.DispatcherObject.Dispatcher
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: Dispatcher
  nameWithType: DispatcherObject.Dispatcher
  fullName: System.Windows.Threading.DispatcherObject.Dispatcher
- uid: System.Windows.Threading.Dispatcher
  parent: System.Windows.Threading
  isExternal: false
  name: Dispatcher
  nameWithType: Dispatcher
  fullName: System.Windows.Threading.Dispatcher
- uid: System.Windows.Threading.DispatcherObject.VerifyAccess
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: VerifyAccess()
  nameWithType: DispatcherObject.VerifyAccess()
  fullName: System.Windows.Threading.DispatcherObject.VerifyAccess()
- uid: System.Windows.Threading.DispatcherObject.#ctor*
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: DispatcherObject
  nameWithType: DispatcherObject.DispatcherObject
- uid: System.Windows.Threading.DispatcherObject.CheckAccess*
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: CheckAccess
  nameWithType: DispatcherObject.CheckAccess
- uid: System.Windows.Threading.DispatcherObject.Dispatcher*
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: Dispatcher
  nameWithType: DispatcherObject.Dispatcher
- uid: System.Windows.Threading.DispatcherObject.VerifyAccess*
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: VerifyAccess
  nameWithType: DispatcherObject.VerifyAccess
