### YamlMime:ManagedReference
items:
- uid: System.EnterpriseServices.IProcessInitializer
  id: IProcessInitializer
  children:
  - System.EnterpriseServices.IProcessInitializer.Shutdown
  - System.EnterpriseServices.IProcessInitializer.Startup(System.Object)
  langs:
  - csharp
  name: IProcessInitializer
  nameWithType: IProcessInitializer
  fullName: System.EnterpriseServices.IProcessInitializer
  type: Interface
  summary: "Obsługuje metody, które mogą być wywoływane, gdy składnik COM uruchamiania lub wyłączania."
  remarks: "Implementować metod interfejsu IProcessInitializer na obsługiwanych składników, jeśli chcesz uruchomić inicjowania lub zamknięcia kodu podczas procesu serwera (Dllhost.exe) uruchamiania lub wyłączania odpowiednio.       COM + zawiera `Startup` i `Shutdown` zdarzenia, gdy Dllhost.exe początkowej i końcowej. Ta funkcja umożliwia wszystkie składniki modelu COM + w aplikacji serwera COM + (nazywane składniki serwera poniżej) do uruchamiania niestandardowych inicjowanie i oczyszczanie kodu są zainstalowane. Wystąpienia każdego składnika, który implementuje interfejs IProcessInitializer zostanie utworzona i przechowywana w czasie trwania procesu i wywołano metody interfejsu podczas uruchamiania i wyłączania. Po zaimplementowaniu na <xref:System.EnterpriseServices.ServicedComponent>, podczas rejestracji składnika `InitializesServerApplication` parametru w `COMAdminCatalogObject` w składnikach kolekcji ustawiono `true`.</xref:System.EnterpriseServices.ServicedComponent>       Przy użyciu `Startup` i `Shutdown` zdarzenia, można zainicjować zasobów, tworzyć połączenia, zainicjować udostępnionych danych, a następnie uruchom oczyszczanie kodu. Nie należy jednak dostępu stanów, które są specyficzne dla modelu COM +, ponieważ wystąpienia serwera składników nie został jeszcze utworzony. Ponadto kod w `Startup` i `Shutdown` zdarzenia powinien zwrócić tak szybko jak to możliwe, ponieważ system oczekuje tylko 90 sekund na Dllhost.exe w celu przygotowania do akceptowania aktywacji po procesie uruchamiania systemu. Jeśli nie Dllhost.exe sygnalizuje, że jest gotowy w ciągu 90 sekund, system kończy proces; w związku z tym wszystkie inicjowania przetwarzania musi zostać wykonane w tym przedziale czasu. Składnik każdego serwera, który uczestniczy w inicjowania musi obsługiwać interfejs IProcessInitializer. Przy uruchamianiu DllHost.exe COM + tworzy wszystkie składniki serwera, którzy zażądali tej usługi, wywołania `QueryInterface` IProcessInitializer interfejsu i wywołania <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A>funkcji.</xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> Podobnie podczas zamykania procesu DllHost.exe wywołuje <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A>Funkcja tych wcześniej zapisanych wskaźniki interfejsu.</xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.Guid("1113f52d-dc7f-4943-aed6-88d04027e32a")]

      [System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]

      public interface IProcessInitializer
  implements: []
  platform:
  - net462
- uid: System.EnterpriseServices.IProcessInitializer.Shutdown
  id: Shutdown
  parent: System.EnterpriseServices.IProcessInitializer
  langs:
  - csharp
  name: Shutdown()
  nameWithType: IProcessInitializer.Shutdown()
  fullName: System.EnterpriseServices.IProcessInitializer.Shutdown()
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "Wykonuje akcje zamknięcia. Wywoływana, gdy Dllhost.exe zostanie zamknięta."
  remarks: "Zamknięcie nie jest wywoływana podczas natychmiastowy błąd lub inne zdarzenia zamknięcia krytycznego."
  syntax:
    content: public void Shutdown ();
    parameters: []
  overload: System.EnterpriseServices.IProcessInitializer.Shutdown*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.IProcessInitializer.Startup(System.Object)
  id: Startup(System.Object)
  parent: System.EnterpriseServices.IProcessInitializer
  langs:
  - csharp
  name: Startup(Object)
  nameWithType: IProcessInitializer.Startup(Object)
  fullName: System.EnterpriseServices.IProcessInitializer.Startup(Object)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "Wykonuje inicjowania podczas uruchamiania. Wywołuje się po uruchomieniu Dllhost.exe."
  remarks: "Zawiera odwołanie do obiektu `punkProcessControl` implementuje <xref:System.EnterpriseServices.IProcessInitControl>interfejsu.</xref:System.EnterpriseServices.IProcessInitControl> <xref:System.EnterpriseServices.IProcessInitControl>obsługuje pojedynczej metody <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>.</xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A></xref:System.EnterpriseServices.IProcessInitControl>       Kod inicjujący w uruchomienia można wywołać <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>, z limitem czasu, ustaw liczbę sekund, ponownego uruchamiania limit czasu składnika.</xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>"
  syntax:
    content: public void Startup (object punkProcessControl);
    parameters:
    - id: punkProcessControl
      type: System.Object
      description: "W systemie Microsoft Windows XP wskaźnik do <xref uid=&quot;langword_csharp_IUnknown&quot; name=&quot;IUnknown&quot; href=&quot;&quot;> </xref> interfejs składnika COM uruchamiania. W systemie Windows 2000, ten argument jest zawsze <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.EnterpriseServices.IProcessInitializer.Startup*
  exceptions: []
  platform:
  - net462
references:
- uid: System.EnterpriseServices.IProcessInitializer.Shutdown
  parent: System.EnterpriseServices.IProcessInitializer
  isExternal: false
  name: Shutdown()
  nameWithType: IProcessInitializer.Shutdown()
  fullName: System.EnterpriseServices.IProcessInitializer.Shutdown()
- uid: System.EnterpriseServices.IProcessInitializer.Startup(System.Object)
  parent: System.EnterpriseServices.IProcessInitializer
  isExternal: false
  name: Startup(Object)
  nameWithType: IProcessInitializer.Startup(Object)
  fullName: System.EnterpriseServices.IProcessInitializer.Startup(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EnterpriseServices.IProcessInitializer.Shutdown*
  parent: System.EnterpriseServices.IProcessInitializer
  isExternal: false
  name: Shutdown
  nameWithType: IProcessInitializer.Shutdown
- uid: System.EnterpriseServices.IProcessInitializer.Startup*
  parent: System.EnterpriseServices.IProcessInitializer
  isExternal: false
  name: Startup
  nameWithType: IProcessInitializer.Startup
