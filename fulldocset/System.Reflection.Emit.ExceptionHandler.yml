### YamlMime:ManagedReference
items:
- uid: System.Reflection.Emit.ExceptionHandler
  id: ExceptionHandler
  children:
  - System.Reflection.Emit.ExceptionHandler.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Reflection.ExceptionHandlingClauseOptions,System.Int32)
  - System.Reflection.Emit.ExceptionHandler.Equals(System.Object)
  - System.Reflection.Emit.ExceptionHandler.Equals(System.Reflection.Emit.ExceptionHandler)
  - System.Reflection.Emit.ExceptionHandler.ExceptionTypeToken
  - System.Reflection.Emit.ExceptionHandler.FilterOffset
  - System.Reflection.Emit.ExceptionHandler.GetHashCode
  - System.Reflection.Emit.ExceptionHandler.HandlerLength
  - System.Reflection.Emit.ExceptionHandler.HandlerOffset
  - System.Reflection.Emit.ExceptionHandler.Kind
  - System.Reflection.Emit.ExceptionHandler.op_Equality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)
  - System.Reflection.Emit.ExceptionHandler.op_Inequality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)
  - System.Reflection.Emit.ExceptionHandler.TryLength
  - System.Reflection.Emit.ExceptionHandler.TryOffset
  langs:
  - csharp
  name: ExceptionHandler
  nameWithType: ExceptionHandler
  fullName: System.Reflection.Emit.ExceptionHandler
  type: Struct
  summary: "Reprezentuje program obsługi wyjątku w tablicy bajtowej kodu IL mają być przekazane do metody, takie jak <xref:System.Reflection.Emit.MethodBuilder.SetMethodBody*>.</xref:System.Reflection.Emit.MethodBuilder.SetMethodBody*>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public struct ExceptionHandler : IEquatable<System.Reflection.Emit.ExceptionHandler>
  inheritance:
  - System.ValueType
  implements:
  - System.IEquatable<System.Reflection.Emit.ExceptionHandler>
  platform:
  - net462
- uid: System.Reflection.Emit.ExceptionHandler.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Reflection.ExceptionHandlingClauseOptions,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Reflection.ExceptionHandlingClauseOptions,System.Int32)'
  parent: System.Reflection.Emit.ExceptionHandler
  langs:
  - csharp
  name: ExceptionHandler(Int32,Int32,Int32,Int32,Int32,ExceptionHandlingClauseOptions,Int32)
  nameWithType: ExceptionHandler.ExceptionHandler(Int32,Int32,Int32,Int32,Int32,ExceptionHandlingClauseOptions,Int32)
  fullName: System.Reflection.Emit.ExceptionHandler.ExceptionHandler(Int32,Int32,Int32,Int32,Int32,ExceptionHandlingClauseOptions,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Reflection.Emit.ExceptionHandler&quot;> </xref> klasy z określonymi parametrami."
  syntax:
    content: public ExceptionHandler (int tryOffset, int tryLength, int filterOffset, int handlerOffset, int handlerLength, System.Reflection.ExceptionHandlingClauseOptions kind, int exceptionTypeToken);
    parameters:
    - id: tryOffset
      type: System.Int32
      description: "Przesunięcie bajtów pierwszej instrukcji, które są chronione przez ten program obsługi wyjątku."
    - id: tryLength
      type: System.Int32
      description: "Liczba bajtów chronione przez ten program obsługi wyjątku."
    - id: filterOffset
      type: System.Int32
      description: "Przesunięcie bajtów początku kod filtru. Kod filtru kończy się na pierwszej instrukcji bloku obsługi. Programy obsługi wyjątków bez filtra Określ 0 (zero) dla tego parametru."
    - id: handlerOffset
      type: System.Int32
      description: "Przesunięcie bajtów pierwsza instrukcja tego programu obsługi wyjątków."
    - id: handlerLength
      type: System.Int32
      description: "Liczba bajtów w tym obsługi wyjątków."
    - id: kind
      type: System.Reflection.ExceptionHandlingClauseOptions
      description: "Jedna z wartości wyliczenia, które określa rodzaj obsługi wyjątków."
    - id: exceptionTypeToken
      type: System.Int32
      description: "Token typu wyjątku obsługiwane przez ten program obsługi wyjątku. Jeśli nie ma to zastosowanie, określ 0 (zero)."
  overload: System.Reflection.Emit.ExceptionHandler.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>tryOffset</code>, <code>filterOffset</code>, <code>handlerOffset</code>, <code>tryLength</code>, or <code>handlerLength</code> are negative."
  platform:
  - net462
- uid: System.Reflection.Emit.ExceptionHandler.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.Emit.ExceptionHandler
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: ExceptionHandler.Equals(Object)
  fullName: System.Reflection.Emit.ExceptionHandler.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Wskazuje, czy to wystąpienie <xref href=&quot;System.Reflection.Emit.ExceptionHandler&quot;> </xref> obiekt jest taki sam jak określony obiekt."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "Obiekt do porównania tego wystąpienia."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli <code> obj </code> i to wystąpienie jest równe; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Reflection.Emit.ExceptionHandler.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.ExceptionHandler.Equals(System.Reflection.Emit.ExceptionHandler)
  id: Equals(System.Reflection.Emit.ExceptionHandler)
  parent: System.Reflection.Emit.ExceptionHandler
  langs:
  - csharp
  name: Equals(ExceptionHandler)
  nameWithType: ExceptionHandler.Equals(ExceptionHandler)
  fullName: System.Reflection.Emit.ExceptionHandler.Equals(ExceptionHandler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Wskazuje, czy to wystąpienie <xref href=&quot;System.Reflection.Emit.ExceptionHandler&quot;> </xref> obiekt jest taki sam do innego <xref href=&quot;System.Reflection.Emit.ExceptionHandler&quot;> </xref> obiektu."
  syntax:
    content: public bool Equals (System.Reflection.Emit.ExceptionHandler other);
    parameters:
    - id: other
      type: System.Reflection.Emit.ExceptionHandler
      description: "Obiekt programu obsługi wyjątków do porównania tego wystąpienia."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli <code> other </code> i to wystąpienie jest równe; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Reflection.Emit.ExceptionHandler.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.ExceptionHandler.ExceptionTypeToken
  id: ExceptionTypeToken
  parent: System.Reflection.Emit.ExceptionHandler
  langs:
  - csharp
  name: ExceptionTypeToken
  nameWithType: ExceptionHandler.ExceptionTypeToken
  fullName: System.Reflection.Emit.ExceptionHandler.ExceptionTypeToken
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Pobiera token typu wyjątku obsługiwane przez ten program obsługi."
  syntax:
    content: public int ExceptionTypeToken { get; }
    return:
      type: System.Int32
      description: "Token typu wyjątku obsługiwane przez ten program obsługi lub 0, jeśli żaden nie istnieje."
  overload: System.Reflection.Emit.ExceptionHandler.ExceptionTypeToken*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.ExceptionHandler.FilterOffset
  id: FilterOffset
  parent: System.Reflection.Emit.ExceptionHandler
  langs:
  - csharp
  name: FilterOffset
  nameWithType: ExceptionHandler.FilterOffset
  fullName: System.Reflection.Emit.ExceptionHandler.FilterOffset
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Pobiera Przesunięcie bajtów, przy którym zaczyna się kod filtru dla obsługi wyjątków."
  syntax:
    content: public int FilterOffset { get; }
    return:
      type: System.Int32
      description: "Przesunięcie bajtów, jaką zaczyna się kod filtru lub 0, jeśli filtr nie jest obecny."
  overload: System.Reflection.Emit.ExceptionHandler.FilterOffset*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.ExceptionHandler.GetHashCode
  id: GetHashCode
  parent: System.Reflection.Emit.ExceptionHandler
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: ExceptionHandler.GetHashCode()
  fullName: System.Reflection.Emit.ExceptionHandler.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Służy jako domyślnej funkcji skrótu."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Wartość skrótu dla bieżącego obiektu."
  overload: System.Reflection.Emit.ExceptionHandler.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.ExceptionHandler.HandlerLength
  id: HandlerLength
  parent: System.Reflection.Emit.ExceptionHandler
  langs:
  - csharp
  name: HandlerLength
  nameWithType: ExceptionHandler.HandlerLength
  fullName: System.Reflection.Emit.ExceptionHandler.HandlerLength
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Pobiera długość w bajtach obsługi wyjątków."
  syntax:
    content: public int HandlerLength { get; }
    return:
      type: System.Int32
      description: "Długość, w bajtach, program obsługi wyjątku."
  overload: System.Reflection.Emit.ExceptionHandler.HandlerLength*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.ExceptionHandler.HandlerOffset
  id: HandlerOffset
  parent: System.Reflection.Emit.ExceptionHandler
  langs:
  - csharp
  name: HandlerOffset
  nameWithType: ExceptionHandler.HandlerOffset
  fullName: System.Reflection.Emit.ExceptionHandler.HandlerOffset
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Pobiera Przesunięcie bajtów pierwszej instrukcji obsługi wyjątków."
  syntax:
    content: public int HandlerOffset { get; }
    return:
      type: System.Int32
      description: "Przesunięcie bajtów pierwszej instrukcji obsługi wyjątków."
  overload: System.Reflection.Emit.ExceptionHandler.HandlerOffset*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.ExceptionHandler.Kind
  id: Kind
  parent: System.Reflection.Emit.ExceptionHandler
  langs:
  - csharp
  name: Kind
  nameWithType: ExceptionHandler.Kind
  fullName: System.Reflection.Emit.ExceptionHandler.Kind
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Pobiera wartość, która reprezentuje rodzaj program obsługi wyjątku, który reprezentuje ten obiekt."
  syntax:
    content: public System.Reflection.ExceptionHandlingClauseOptions Kind { get; }
    return:
      type: System.Reflection.ExceptionHandlingClauseOptions
      description: "Jedna z wartości wyliczenia, które określa rodzaj obsługi wyjątków."
  overload: System.Reflection.Emit.ExceptionHandler.Kind*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.ExceptionHandler.op_Equality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)
  id: op_Equality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)
  parent: System.Reflection.Emit.ExceptionHandler
  langs:
  - csharp
  name: op_Equality(ExceptionHandler,ExceptionHandler)
  nameWithType: ExceptionHandler.op_Equality(ExceptionHandler,ExceptionHandler)
  fullName: System.Reflection.Emit.ExceptionHandler.op_Equality(ExceptionHandler,ExceptionHandler)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Określa, czy dwa określone wystąpienia elementu <xref href=&quot;System.Reflection.Emit.ExceptionHandler&quot;> </xref> są takie same."
  syntax:
    content: public static bool op_Equality (System.Reflection.Emit.ExceptionHandler left, System.Reflection.Emit.ExceptionHandler right);
    parameters:
    - id: left
      type: System.Reflection.Emit.ExceptionHandler
      description: "Pierwszy obiekt do porównania."
    - id: right
      type: System.Reflection.Emit.ExceptionHandler
      description: "Drugi obiekt do porównania."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>left</code> and <code>right</code> are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Reflection.Emit.ExceptionHandler.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.ExceptionHandler.op_Inequality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)
  id: op_Inequality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)
  parent: System.Reflection.Emit.ExceptionHandler
  langs:
  - csharp
  name: op_Inequality(ExceptionHandler,ExceptionHandler)
  nameWithType: ExceptionHandler.op_Inequality(ExceptionHandler,ExceptionHandler)
  fullName: System.Reflection.Emit.ExceptionHandler.op_Inequality(ExceptionHandler,ExceptionHandler)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Określa, czy dwa określone wystąpienia elementu <xref href=&quot;System.Reflection.Emit.ExceptionHandler&quot;> </xref> nie są takie same."
  syntax:
    content: public static bool op_Inequality (System.Reflection.Emit.ExceptionHandler left, System.Reflection.Emit.ExceptionHandler right);
    parameters:
    - id: left
      type: System.Reflection.Emit.ExceptionHandler
      description: "Pierwszy obiekt do porównania."
    - id: right
      type: System.Reflection.Emit.ExceptionHandler
      description: "Drugi obiekt do porównania."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>left</code> and <code>right</code> are not equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Reflection.Emit.ExceptionHandler.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.ExceptionHandler.TryLength
  id: TryLength
  parent: System.Reflection.Emit.ExceptionHandler
  langs:
  - csharp
  name: TryLength
  nameWithType: ExceptionHandler.TryLength
  fullName: System.Reflection.Emit.ExceptionHandler.TryLength
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Pobiera długość w bajtach kodu chronione przez ten program obsługi wyjątku."
  syntax:
    content: public int TryLength { get; }
    return:
      type: System.Int32
      description: "Długość, w bajtach kodu chronione przez ten program obsługi wyjątku."
  overload: System.Reflection.Emit.ExceptionHandler.TryLength*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.ExceptionHandler.TryOffset
  id: TryOffset
  parent: System.Reflection.Emit.ExceptionHandler
  langs:
  - csharp
  name: TryOffset
  nameWithType: ExceptionHandler.TryOffset
  fullName: System.Reflection.Emit.ExceptionHandler.TryOffset
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Pobiera Przesunięcie bajtów, przy którym zaczyna się kod, który jest chroniony przez ten program obsługi wyjątku."
  syntax:
    content: public int TryOffset { get; }
    return:
      type: System.Int32
      description: "Przesunięcie bajtów, od której rozpoczyna się kodu, która jest chroniona przez ten program obsługi wyjątku."
  overload: System.Reflection.Emit.ExceptionHandler.TryOffset*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Reflection.Emit.ExceptionHandler.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Reflection.ExceptionHandlingClauseOptions,System.Int32)
  parent: System.Reflection.Emit.ExceptionHandler
  isExternal: false
  name: ExceptionHandler(Int32,Int32,Int32,Int32,Int32,ExceptionHandlingClauseOptions,Int32)
  nameWithType: ExceptionHandler.ExceptionHandler(Int32,Int32,Int32,Int32,Int32,ExceptionHandlingClauseOptions,Int32)
  fullName: System.Reflection.Emit.ExceptionHandler.ExceptionHandler(Int32,Int32,Int32,Int32,Int32,ExceptionHandlingClauseOptions,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.ExceptionHandlingClauseOptions
  parent: System.Reflection
  isExternal: false
  name: ExceptionHandlingClauseOptions
  nameWithType: ExceptionHandlingClauseOptions
  fullName: System.Reflection.ExceptionHandlingClauseOptions
- uid: System.Reflection.Emit.ExceptionHandler.Equals(System.Object)
  parent: System.Reflection.Emit.ExceptionHandler
  isExternal: false
  name: Equals(Object)
  nameWithType: ExceptionHandler.Equals(Object)
  fullName: System.Reflection.Emit.ExceptionHandler.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.Emit.ExceptionHandler.Equals(System.Reflection.Emit.ExceptionHandler)
  parent: System.Reflection.Emit.ExceptionHandler
  isExternal: false
  name: Equals(ExceptionHandler)
  nameWithType: ExceptionHandler.Equals(ExceptionHandler)
  fullName: System.Reflection.Emit.ExceptionHandler.Equals(ExceptionHandler)
- uid: System.Reflection.Emit.ExceptionHandler
  parent: System.Reflection.Emit
  isExternal: false
  name: ExceptionHandler
  nameWithType: ExceptionHandler
  fullName: System.Reflection.Emit.ExceptionHandler
- uid: System.Reflection.Emit.ExceptionHandler.ExceptionTypeToken
  parent: System.Reflection.Emit.ExceptionHandler
  isExternal: false
  name: ExceptionTypeToken
  nameWithType: ExceptionHandler.ExceptionTypeToken
  fullName: System.Reflection.Emit.ExceptionHandler.ExceptionTypeToken
- uid: System.Reflection.Emit.ExceptionHandler.FilterOffset
  parent: System.Reflection.Emit.ExceptionHandler
  isExternal: false
  name: FilterOffset
  nameWithType: ExceptionHandler.FilterOffset
  fullName: System.Reflection.Emit.ExceptionHandler.FilterOffset
- uid: System.Reflection.Emit.ExceptionHandler.GetHashCode
  parent: System.Reflection.Emit.ExceptionHandler
  isExternal: false
  name: GetHashCode()
  nameWithType: ExceptionHandler.GetHashCode()
  fullName: System.Reflection.Emit.ExceptionHandler.GetHashCode()
- uid: System.Reflection.Emit.ExceptionHandler.HandlerLength
  parent: System.Reflection.Emit.ExceptionHandler
  isExternal: false
  name: HandlerLength
  nameWithType: ExceptionHandler.HandlerLength
  fullName: System.Reflection.Emit.ExceptionHandler.HandlerLength
- uid: System.Reflection.Emit.ExceptionHandler.HandlerOffset
  parent: System.Reflection.Emit.ExceptionHandler
  isExternal: false
  name: HandlerOffset
  nameWithType: ExceptionHandler.HandlerOffset
  fullName: System.Reflection.Emit.ExceptionHandler.HandlerOffset
- uid: System.Reflection.Emit.ExceptionHandler.Kind
  parent: System.Reflection.Emit.ExceptionHandler
  isExternal: false
  name: Kind
  nameWithType: ExceptionHandler.Kind
  fullName: System.Reflection.Emit.ExceptionHandler.Kind
- uid: System.Reflection.Emit.ExceptionHandler.op_Equality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)
  parent: System.Reflection.Emit.ExceptionHandler
  isExternal: false
  name: op_Equality(ExceptionHandler,ExceptionHandler)
  nameWithType: ExceptionHandler.op_Equality(ExceptionHandler,ExceptionHandler)
  fullName: System.Reflection.Emit.ExceptionHandler.op_Equality(ExceptionHandler,ExceptionHandler)
- uid: System.Reflection.Emit.ExceptionHandler.op_Inequality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)
  parent: System.Reflection.Emit.ExceptionHandler
  isExternal: false
  name: op_Inequality(ExceptionHandler,ExceptionHandler)
  nameWithType: ExceptionHandler.op_Inequality(ExceptionHandler,ExceptionHandler)
  fullName: System.Reflection.Emit.ExceptionHandler.op_Inequality(ExceptionHandler,ExceptionHandler)
- uid: System.Reflection.Emit.ExceptionHandler.TryLength
  parent: System.Reflection.Emit.ExceptionHandler
  isExternal: false
  name: TryLength
  nameWithType: ExceptionHandler.TryLength
  fullName: System.Reflection.Emit.ExceptionHandler.TryLength
- uid: System.Reflection.Emit.ExceptionHandler.TryOffset
  parent: System.Reflection.Emit.ExceptionHandler
  isExternal: false
  name: TryOffset
  nameWithType: ExceptionHandler.TryOffset
  fullName: System.Reflection.Emit.ExceptionHandler.TryOffset
- uid: System.Reflection.Emit.ExceptionHandler.#ctor*
  parent: System.Reflection.Emit.ExceptionHandler
  isExternal: false
  name: ExceptionHandler
  nameWithType: ExceptionHandler.ExceptionHandler
- uid: System.Reflection.Emit.ExceptionHandler.Equals*
  parent: System.Reflection.Emit.ExceptionHandler
  isExternal: false
  name: Equals
  nameWithType: ExceptionHandler.Equals
- uid: System.Reflection.Emit.ExceptionHandler.ExceptionTypeToken*
  parent: System.Reflection.Emit.ExceptionHandler
  isExternal: false
  name: ExceptionTypeToken
  nameWithType: ExceptionHandler.ExceptionTypeToken
- uid: System.Reflection.Emit.ExceptionHandler.FilterOffset*
  parent: System.Reflection.Emit.ExceptionHandler
  isExternal: false
  name: FilterOffset
  nameWithType: ExceptionHandler.FilterOffset
- uid: System.Reflection.Emit.ExceptionHandler.GetHashCode*
  parent: System.Reflection.Emit.ExceptionHandler
  isExternal: false
  name: GetHashCode
  nameWithType: ExceptionHandler.GetHashCode
- uid: System.Reflection.Emit.ExceptionHandler.HandlerLength*
  parent: System.Reflection.Emit.ExceptionHandler
  isExternal: false
  name: HandlerLength
  nameWithType: ExceptionHandler.HandlerLength
- uid: System.Reflection.Emit.ExceptionHandler.HandlerOffset*
  parent: System.Reflection.Emit.ExceptionHandler
  isExternal: false
  name: HandlerOffset
  nameWithType: ExceptionHandler.HandlerOffset
- uid: System.Reflection.Emit.ExceptionHandler.Kind*
  parent: System.Reflection.Emit.ExceptionHandler
  isExternal: false
  name: Kind
  nameWithType: ExceptionHandler.Kind
- uid: System.Reflection.Emit.ExceptionHandler.op_Equality*
  parent: System.Reflection.Emit.ExceptionHandler
  isExternal: false
  name: op_Equality
  nameWithType: ExceptionHandler.op_Equality
- uid: System.Reflection.Emit.ExceptionHandler.op_Inequality*
  parent: System.Reflection.Emit.ExceptionHandler
  isExternal: false
  name: op_Inequality
  nameWithType: ExceptionHandler.op_Inequality
- uid: System.Reflection.Emit.ExceptionHandler.TryLength*
  parent: System.Reflection.Emit.ExceptionHandler
  isExternal: false
  name: TryLength
  nameWithType: ExceptionHandler.TryLength
- uid: System.Reflection.Emit.ExceptionHandler.TryOffset*
  parent: System.Reflection.Emit.ExceptionHandler
  isExternal: false
  name: TryOffset
  nameWithType: ExceptionHandler.TryOffset
