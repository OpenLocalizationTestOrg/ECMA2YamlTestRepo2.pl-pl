### YamlMime:ManagedReference
items:
- uid: System.Net.Security.NegotiateStream
  id: NegotiateStream
  children:
  - System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)
  - System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)
  - System.Net.Security.NegotiateStream.AuthenticateAsClient
  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)
  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsServer
  - System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  - System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.CanRead
  - System.Net.Security.NegotiateStream.CanSeek
  - System.Net.Security.NegotiateStream.CanTimeout
  - System.Net.Security.NegotiateStream.CanWrite
  - System.Net.Security.NegotiateStream.Dispose(System.Boolean)
  - System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)
  - System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)
  - System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)
  - System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)
  - System.Net.Security.NegotiateStream.Flush
  - System.Net.Security.NegotiateStream.ImpersonationLevel
  - System.Net.Security.NegotiateStream.IsAuthenticated
  - System.Net.Security.NegotiateStream.IsEncrypted
  - System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
  - System.Net.Security.NegotiateStream.IsServer
  - System.Net.Security.NegotiateStream.IsSigned
  - System.Net.Security.NegotiateStream.Length
  - System.Net.Security.NegotiateStream.Position
  - System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.Net.Security.NegotiateStream.ReadTimeout
  - System.Net.Security.NegotiateStream.RemoteIdentity
  - System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.Net.Security.NegotiateStream.SetLength(System.Int64)
  - System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.Net.Security.NegotiateStream.WriteTimeout
  langs:
  - csharp
  name: NegotiateStream
  nameWithType: NegotiateStream
  fullName: System.Net.Security.NegotiateStream
  type: Class
  summary: "Zapewnia strumienia, który wykorzystuje protokół negocjacji zabezpieczeń na potrzeby uwierzytelniania klienta i opcjonalnie serwera, w ramach komunikacji klient serwer."
  remarks: "Do uwierzytelniania i ułatwiającym ochronę informacji przesyłanych między klientem serwerem, należy użyć klasy NegotiateStream. Przy użyciu NegotiateStream, można wykonaj następujące czynności.      — Wyślij poświadczenia klienta na serwerze dla Personifikacja lub delegowanie.      -Żądania uwierzytelniania serwera.      -Szyfrowania i/lub podpisać danych przed przesłaniem.       Uwierzytelnianie odbywa się przed przesłaniem informacji. Klienci żądają uwierzytelnianie przy użyciu synchronicznej <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>metod, które blokują dopiero po zakończeniu uwierzytelniania, lub asynchroniczną <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>metody, które nie blokują podczas oczekiwania na ukończenie uwierzytelniania.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> Serwery żądania uwierzytelniania przy użyciu synchronicznej <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>lub asynchroniczne <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metody.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> Klient oraz opcjonalnie serwera, jest uwierzytelniany przy użyciu protokołu zabezpieczeń Negotiate. W systemach Windows 95/98 Windows NT LAN Manager (NTLM) to protokół używany do uwierzytelniania. Na innych platformach protokołu Kerberos jest używany protokół uwierzytelniania Jeśli zarówno klient, jak i serwer obsługują w przeciwnym razie uwierzytelnianie NTLM jest używany. Aby uzyskać szczegółowe opisy tych protokołów w dokumentacji zestawu SDK platformy w witrynie MSDN, w msdn.microsoft.com/library/. Klasa NegotiateStream przeprowadza uwierzytelnianie za pomocą interfejsu dostawcy obsługi zabezpieczeń (SSPI).       Gdy uwierzytelnianie zakończy się powodzeniem, należy zaznaczyć <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>i <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Właściwości, aby ustalić, jakie usługi zabezpieczeń będą używane przez NegotiateStream do zabezpieczania danych podczas przesyłania.</xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>Właściwości w celu określenia, czy wystąpiły uwierzytelnianie wzajemne.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> Możesz uzyskać informacje na temat zdalnego klienta lub serwera przy użyciu <xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A>Właściwości.</xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A>       Jeśli uwierzytelnianie nie powiedzie się, zostanie wyświetlony <xref:System.Security.Authentication.AuthenticationException>lub <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń.       Wysyłanie danych przy użyciu synchronicznej <xref:System.Net.Security.NegotiateStream.Write%2A>lub asynchroniczne <xref:System.Net.Security.NegotiateStream.BeginWrite%2A>metody.</xref:System.Net.Security.NegotiateStream.BeginWrite%2A> </xref:System.Net.Security.NegotiateStream.Write%2A> Odbieranie danych przy użyciu synchronicznej <xref:System.Net.Security.NegotiateStream.Read%2A>lub asynchroniczne <xref:System.Net.Security.NegotiateStream.BeginRead%2A>metody.</xref:System.Net.Security.NegotiateStream.BeginRead%2A> </xref:System.Net.Security.NegotiateStream.Read%2A> Jeśli zabezpieczeń usług, takich jak podpisywania lub szyfrowania są włączone, są one automatycznie stosowane do danych przez NegotiateStream.       NegotiateStream przesyła dane przy użyciu wprowadzona podczas tworzenia NegotiateStream strumienia. Jeśli podasz to zasadniczy strumień masz możliwość określenia, czy też zamknięcia NegotiateStream zamyka zasadniczy strumień."
  example:
  - "The following code example demonstrates the client side of a client-server connection that uses the NegotiateStream. The client authenticates and sends a message to the server asynchronously.  \n  \n [!code-cpp[NclNegoAsyncClient#0](~/add/codesnippet/cpp/t-system.net.security.ne_1.cpp)]\n [!code-cs[NclNegoAsyncClient#0](~/add/codesnippet/csharp/t-system.net.security.ne_1.cs)]  \n  \n The following code example demonstrates the server side of a client-server connection that uses the NegotiateStream to authenticate the client and read a message sent by the client.  \n  \n [!code-cs[NclNegoAsyncServer#0](~/add/codesnippet/csharp/t-system.net.security.ne_2.cs)]\n [!code-cpp[NclNegoAsyncServer#0](~/add/codesnippet/cpp/t-system.net.security.ne_2.cpp)]"
  syntax:
    content: 'public class NegotiateStream : System.Net.Security.AuthenticatedStream'
  inheritance:
  - System.IO.Stream
  - System.Net.Security.AuthenticatedStream
  implements: []
  inheritedMembers:
  - System.Net.Security.AuthenticatedStream.InnerStream
  - System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: NegotiateStream(Stream)
  nameWithType: NegotiateStream.NegotiateStream(Stream)
  fullName: System.Net.Security.NegotiateStream.NegotiateStream(Stream)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> przy użyciu określonego <xref:System.IO.Stream>.</xref:System.IO.Stream>"
  remarks: ''
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cs[NclNegoSyncClient#3](~/add/codesnippet/csharp/m-system.net.security.ne_1_1.cs)]\n [!code-cpp[NclNegoSyncClient#3](~/add/codesnippet/cpp/m-system.net.security.ne_1_1.cpp)]"
  syntax:
    content: public NegotiateStream (System.IO.Stream innerStream);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "A <xref:System.IO.Stream>obiekt używany przez <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> do wysyłania i odbierania danych.</xref:System.IO.Stream>"
  overload: System.Net.Security.NegotiateStream.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Boolean)'
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: NegotiateStream(Stream,Boolean)
  nameWithType: NegotiateStream.NegotiateStream(Stream,Boolean)
  fullName: System.Net.Security.NegotiateStream.NegotiateStream(Stream,Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> przy użyciu określonego <xref:System.IO.Stream>i przesyłania strumieniowego zachowanie zamknięcia.</xref:System.IO.Stream>"
  remarks: "Po określeniu `true` dla `leaveStreamOpen` parametru zamknięcia <xref:System.Net.Security.NegotiateStream>nie ma wpływu `innerStream` strumienia; należy jawnie zamknąć `innerStream` potrzebne już nim</xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates calling this constructor. This code example is part of a larger example provided for the <xref:System.Net.Security.NegotiateStream> class.  \n  \n [!code-cpp[NclNegoAsyncClient#1](~/add/codesnippet/cpp/m-system.net.security.ne_4_1.cpp)]\n [!code-cs[NclNegoAsyncClient#1](~/add/codesnippet/csharp/m-system.net.security.ne_4_1.cs)]"
  syntax:
    content: public NegotiateStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "A <xref:System.IO.Stream>obiekt używany przez <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> do wysyłania i odbierania danych.</xref:System.IO.Stream>"
    - id: leaveInnerStreamOpen
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby wskazać, że zamknięcia, to <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> nie ma wpływu `innerstream`; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> aby wskazać, że zamknięcia, to <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> również zamyka `innerStream`. Zobacz sekcję uwag, aby uzyskać więcej informacji."
  overload: System.Net.Security.NegotiateStream.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>innerStream</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>innerStream</code> is equal to <xref:System.IO.Stream.Null>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient
  id: AuthenticateAsClient
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClient()
  nameWithType: NegotiateStream.AuthenticateAsClient()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Metoda wywoływana przez klientów do uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer."
  remarks: "Uwierzytelnianie przy użyciu <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> klienta Nie nazwy usługi (SPN) jest określona dla serwera. Poziom personifikacji <xref:System.Security.Principal.TokenImpersonationLevel>, poziom zabezpieczeń jest <xref:System.Net.Security.ProtectionLevel>, i wymagane jest uwierzytelnianie wzajemne.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> <xref:System.Net.Security.NegotiateStream>Klasy utworzy główną nazwę usługi, używany do wzajemnego uwierzytelniania.</xref:System.Net.Security.NegotiateStream>       Jeśli uwierzytelnianie się powiedzie, możesz sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>i <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>Właściwości w celu określenia, czy wystąpiły uwierzytelnianie wzajemne.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Jeśli uwierzytelnianie nie powiedzie się, pojawi się <xref:System.Security.Authentication.AuthenticationException>lub <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń."
  syntax:
    content: public virtual void AuthenticateAsClient ();
    parameters: []
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Ten obiekt został zamknięty."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)
  id: AuthenticateAsClient(System.Net.NetworkCredential,System.String)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClient(NetworkCredential,String)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Metoda wywoływana przez klientów do uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer. Proces uwierzytelniania używa poświadczeń określonego klienta."
  remarks: "Poziom personifikacji <xref:System.Security.Principal.TokenImpersonationLevel>, poziom zabezpieczeń jest <xref:System.Net.Security.ProtectionLevel>, i wymagane jest uwierzytelnianie wzajemne.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> <xref:System.Net.Security.NegotiateStream>Klasy utworzy główną nazwę usługi, używany do wzajemnego uwierzytelniania.</xref:System.Net.Security.NegotiateStream>       Jeśli uwierzytelnianie się powiedzie, możesz sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>i <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>Właściwości w celu określenia, czy wystąpiły uwierzytelnianie wzajemne.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>"
  syntax:
    content: public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "<xref:System.Net.NetworkCredential>Używany do ustalenia tożsamości klienta.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "Nazwy usługi (SPN), który unikatowo identyfikuje uwierzytelniania serwera."
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Ten obiekt został zamknięty."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  id: AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Metoda wywoływana przez klientów do uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer. Proces uwierzytelniania używa poświadczeń określonego klienta i powiązania kanału."
  remarks: "Poziom personifikacji <xref:System.Security.Principal.TokenImpersonationLevel>, poziom zabezpieczeń jest <xref:System.Net.Security.ProtectionLevel>, i wymagane jest uwierzytelnianie wzajemne.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> <xref:System.Net.Security.NegotiateStream>Klasy utworzy główną nazwę usługi, używany do wzajemnego uwierzytelniania.</xref:System.Net.Security.NegotiateStream>       <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>Używane do ochrony rozszerzonej, który jest przekazywany do metody w `binding` parametru może być pobierane przez aplikację z <xref:System.Net.Security.SslStream.TransportContext%2A>właściwości skojarzonych <xref:System.Net.Security.SslStream>.</xref:System.Net.Security.SslStream> </xref:System.Net.Security.SslStream.TransportContext%2A> </xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>       Jeśli uwierzytelnianie się powiedzie, możesz sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>i <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>Właściwości w celu określenia, czy wystąpiły uwierzytelnianie wzajemne.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>"
  syntax:
    content: public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "<xref:System.Net.NetworkCredential>Używany do ustalenia tożsamości klienta.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "<xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>Używany do ochrony rozszerzonej.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "Nazwy usługi (SPN), który unikatowo identyfikuje uwierzytelniania serwera."
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Ten obiekt został zamknięty."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Metoda wywoływana przez klientów do uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer. Proces uwierzytelniania używa określonych poświadczeń i opcje uwierzytelniania."
  remarks: "Użyj `requiredProtectionLevel` parametr żądania usługi zabezpieczeń dla danych przesyłanych za pomocą uwierzytelnionych strumienia. Na przykład, aby dane zaszyfrowana i podpisana, należy określić <xref:System.Net.Security.ProtectionLevel>wartość.</xref:System.Net.Security.ProtectionLevel> Pomyślne uwierzytelnienie nie gwarantuje, że żądanie <xref:System.Net.Security.ProtectionLevel>udzielono.</xref:System.Net.Security.ProtectionLevel> Należy sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>i <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Jeśli uwierzytelnianie nie powiedzie się, pojawi się <xref:System.Security.Authentication.AuthenticationException>lub <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń."
  syntax:
    content: public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "<xref:System.Net.NetworkCredential>Używany do ustalenia tożsamości klienta.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "Nazwy usługi (SPN), który unikatowo identyfikuje uwierzytelniania serwera."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Jeden z <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> wartości, wskazując usługi zabezpieczeń dla tego strumienia."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Jeden z <xref:System.Security.Principal.TokenImpersonationLevel>wartości i wskazujący, jak użyć poświadczenia klienta do dostępu do zasobów serwera.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>allowedImpersonationLevel</code>nie jest prawidłową wartością."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code>ma wartość null."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Ten obiekt został zamknięty."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Metoda wywoływana przez klientów do uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer. Proces uwierzytelniania używa określonego poświadczenia, opcje uwierzytelniania i powiązania kanału."
  remarks: "Użyj `requiredProtectionLevel` parametr żądania usługi zabezpieczeń dla danych przesyłanych za pomocą uwierzytelnionych strumienia. Na przykład, aby dane zaszyfrowana i podpisana, należy określić <xref:System.Net.Security.ProtectionLevel>wartość.</xref:System.Net.Security.ProtectionLevel> Pomyślne uwierzytelnienie nie gwarantuje, że żądanie <xref:System.Net.Security.ProtectionLevel>udzielono.</xref:System.Net.Security.ProtectionLevel> Należy sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>i <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>Używane do ochrony rozszerzonej, który jest przekazywany do metody w `binding` parametru może być pobierane przez aplikację z <xref:System.Net.Security.SslStream.TransportContext%2A>właściwości skojarzonych <xref:System.Net.Security.SslStream>.</xref:System.Net.Security.SslStream> </xref:System.Net.Security.SslStream.TransportContext%2A> </xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>       Jeśli uwierzytelnianie nie powiedzie się, pojawi się <xref:System.Security.Authentication.AuthenticationException>lub <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń."
  syntax:
    content: public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "<xref:System.Net.NetworkCredential>Używany do ustalenia tożsamości klienta.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "<xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>Używany do ochrony rozszerzonej.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "Nazwy usługi (SPN), który unikatowo identyfikuje uwierzytelniania serwera."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Jeden z <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> wartości, wskazując usługi zabezpieczeń dla tego strumienia."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Jeden z <xref:System.Security.Principal.TokenImpersonationLevel>wartości i wskazujący, jak użyć poświadczenia klienta do dostępu do zasobów serwera.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>allowedImpersonationLevel</code>nie jest prawidłową wartością."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Ten obiekt został zamknięty."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync
  id: AuthenticateAsClientAsync
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync()
  nameWithType: NegotiateStream.AuthenticateAsClientAsync()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Metoda wywoływana przez klientów do uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer jako operację asynchroniczną."
  remarks: "Uwierzytelnianie przy użyciu <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> klienta Nie nazwy usługi (SPN) jest określona dla serwera. Poziom personifikacji <xref:System.Security.Principal.TokenImpersonationLevel>, poziom zabezpieczeń jest <xref:System.Net.Security.ProtectionLevel>, i wymagane jest uwierzytelnianie wzajemne.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> <xref:System.Net.Security.NegotiateStream>Klasy utworzy główną nazwę usługi, używany do wzajemnego uwierzytelniania.</xref:System.Net.Security.NegotiateStream>       Jeśli uwierzytelnianie się powiedzie, możesz sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>i <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>Właściwości w celu określenia, czy wystąpiły uwierzytelnianie wzajemne.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Jeśli uwierzytelnianie nie powiedzie się, pojawi się <xref:System.Security.Authentication.AuthenticationException>lub <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task
      description: "Zwraca <xref:System.Threading.Tasks.Task>obiekt zadania reprezentujący operację asynchroniczną.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Ten obiekt został zamknięty."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)
  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync(NetworkCredential,String)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Metoda wywoływana przez klientów do uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer jako operację asynchroniczną. Proces uwierzytelniania używa poświadczeń określonego klienta."
  remarks: "Poziom personifikacji <xref:System.Security.Principal.TokenImpersonationLevel>, poziom zabezpieczeń jest <xref:System.Net.Security.ProtectionLevel>, i wymagane jest uwierzytelnianie wzajemne.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> <xref:System.Net.Security.NegotiateStream>Klasy utworzy główną nazwę usługi, używany do wzajemnego uwierzytelniania.</xref:System.Net.Security.NegotiateStream>       Jeśli uwierzytelnianie się powiedzie, możesz sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>i <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>Właściwości w celu określenia, czy wystąpiły uwierzytelnianie wzajemne.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>"
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "<xref:System.Net.NetworkCredential>Używany do ustalenia tożsamości klienta.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "Nazwy usługi (SPN), który unikatowo identyfikuje uwierzytelniania serwera."
    return:
      type: System.Threading.Tasks.Task
      description: "Zwraca <xref:System.Threading.Tasks.Task>obiekt zadania reprezentujący operację asynchroniczną.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Ten obiekt został zamknięty."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Metoda wywoływana przez klientów do uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer jako operację asynchroniczną. Proces uwierzytelniania używa poświadczeń określonego klienta i powiązania kanału."
  remarks: "Poziom personifikacji <xref:System.Security.Principal.TokenImpersonationLevel>, poziom zabezpieczeń jest <xref:System.Net.Security.ProtectionLevel>, i wymagane jest uwierzytelnianie wzajemne.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> <xref:System.Net.Security.NegotiateStream>Klasy utworzy główną nazwę usługi, używany do wzajemnego uwierzytelniania.</xref:System.Net.Security.NegotiateStream>       <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>Używane do ochrony rozszerzonej, który jest przekazywany do metody w `binding` parametru może być pobierane przez aplikację z <xref:System.Net.Security.SslStream.TransportContext%2A>właściwości skojarzonych <xref:System.Net.Security.SslStream>.</xref:System.Net.Security.SslStream> </xref:System.Net.Security.SslStream.TransportContext%2A> </xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>       Jeśli uwierzytelnianie się powiedzie, możesz sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>i <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>Właściwości w celu określenia, czy wystąpiły uwierzytelnianie wzajemne.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>"
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "<xref:System.Net.NetworkCredential>Używany do ustalenia tożsamości klienta.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "<xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>Używany do ochrony rozszerzonej.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "Nazwy usługi (SPN), który unikatowo identyfikuje uwierzytelniania serwera."
    return:
      type: System.Threading.Tasks.Task
      description: "Zwraca <xref:System.Threading.Tasks.Task>obiekt zadania reprezentujący operację asynchroniczną.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Ten obiekt został zamknięty."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Metoda wywoływana przez klientów do uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer jako operację asynchroniczną. Proces uwierzytelniania używa określonych poświadczeń i opcje uwierzytelniania."
  remarks: "Użyj `requiredProtectionLevel` parametr żądania usługi zabezpieczeń dla danych przesyłanych za pomocą uwierzytelnionych strumienia. Na przykład, aby dane zaszyfrowana i podpisana, należy określić <xref:System.Net.Security.ProtectionLevel>wartość.</xref:System.Net.Security.ProtectionLevel> Pomyślne uwierzytelnienie nie gwarantuje, że żądanie <xref:System.Net.Security.ProtectionLevel>udzielono.</xref:System.Net.Security.ProtectionLevel> Należy sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>i <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Jeśli uwierzytelnianie nie powiedzie się, pojawi się <xref:System.Security.Authentication.AuthenticationException>lub <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "<xref:System.Net.NetworkCredential>Używany do ustalenia tożsamości klienta.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "Nazwy usługi (SPN), który unikatowo identyfikuje uwierzytelniania serwera."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Jeden z <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> wartości, wskazując usługi zabezpieczeń dla tego strumienia."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Jeden z <xref:System.Security.Principal.TokenImpersonationLevel>wartości i wskazujący, jak użyć poświadczenia klienta do dostępu do zasobów serwera.</xref:System.Security.Principal.TokenImpersonationLevel>"
    return:
      type: System.Threading.Tasks.Task
      description: "Zwraca <xref:System.Threading.Tasks.Task>obiekt zadania reprezentujący operację asynchroniczną.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>allowedImpersonationLevel</code>nie jest prawidłową wartością."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code>ma wartość null."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Ten obiekt został zamknięty."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Metoda wywoływana przez klientów do uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer jako operację asynchroniczną. Proces uwierzytelniania używa określonego poświadczenia, opcje uwierzytelniania i powiązania kanału."
  remarks: "Użyj `requiredProtectionLevel` parametr żądania usługi zabezpieczeń dla danych przesyłanych za pomocą uwierzytelnionych strumienia. Na przykład, aby dane zaszyfrowana i podpisana, należy określić <xref:System.Net.Security.ProtectionLevel>wartość.</xref:System.Net.Security.ProtectionLevel> Pomyślne uwierzytelnienie nie gwarantuje, że żądanie <xref:System.Net.Security.ProtectionLevel>udzielono.</xref:System.Net.Security.ProtectionLevel> Należy sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>i <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>Używane do ochrony rozszerzonej, który jest przekazywany do metody w `binding` parametru może być pobierane przez aplikację z <xref:System.Net.Security.SslStream.TransportContext%2A>właściwości skojarzonych <xref:System.Net.Security.SslStream>.</xref:System.Net.Security.SslStream> </xref:System.Net.Security.SslStream.TransportContext%2A> </xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>       Jeśli uwierzytelnianie nie powiedzie się, pojawi się <xref:System.Security.Authentication.AuthenticationException>lub <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "<xref:System.Net.NetworkCredential>Używany do ustalenia tożsamości klienta.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "<xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>Używany do ochrony rozszerzonej.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "Nazwy usługi (SPN), który unikatowo identyfikuje uwierzytelniania serwera."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Jeden z <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> wartości, wskazując usługi zabezpieczeń dla tego strumienia."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Jeden z <xref:System.Security.Principal.TokenImpersonationLevel>wartości i wskazujący, jak użyć poświadczenia klienta do dostępu do zasobów serwera.</xref:System.Security.Principal.TokenImpersonationLevel>"
    return:
      type: System.Threading.Tasks.Task
      description: "Zwraca <xref:System.Threading.Tasks.Task>obiekt zadania reprezentujący operację asynchroniczną.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>allowedImpersonationLevel</code>nie jest prawidłową wartością."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Ten obiekt został zamknięty."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer
  id: AuthenticateAsServer
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServer()
  nameWithType: NegotiateStream.AuthenticateAsServer()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Metoda wywoływana przez klienta do uwierzytelniania serwerów i opcjonalnie serwera, w przypadku połączenia klient serwer."
  remarks: "Uwierzytelnianie przy użyciu <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> serwera Nie nazwy usługi (SPN) jest określona dla serwera. Poziom personifikacji <xref:System.Security.Principal.TokenImpersonationLevel>, a poziom zabezpieczeń jest <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       Jeśli uwierzytelnianie się powiedzie, możesz sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>i <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>Właściwości w celu określenia, czy wystąpiły uwierzytelnianie wzajemne.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Ta metoda umożliwia blokowanie przed zakończeniem operacji. Aby uniknąć zablokowania przed zakończeniem operacji, użyj jednej z <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>przeciążenia metody.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>       Jeśli uwierzytelnianie nie powiedzie się, pojawi się <xref:System.Security.Authentication.AuthenticationException>lub <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń."
  syntax:
    content: public virtual void AuthenticateAsServer ();
    parameters: []
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Ten obiekt został zamknięty."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "System operacyjny Windows 95 i Windows 98 nie są obsługiwane."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  id: AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServer(ExtendedProtectionPolicy)
  nameWithType: NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Metoda wywoływana przez klienta do uwierzytelniania serwerów i opcjonalnie serwera, w przypadku połączenia klient serwer. Proces uwierzytelniania używa zasad określonym rozszerzonej ochrony."
  remarks: "Uwierzytelnianie przy użyciu <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> serwera Nie nazwy usługi (SPN) jest określona dla serwera. Poziom personifikacji <xref:System.Security.Principal.TokenImpersonationLevel>, a poziom zabezpieczeń jest <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       Jeśli `policy` parametr jest `null`, używana rozszerzona zasada ochrony ma <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>ustawioną wartość <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       Jeśli uwierzytelnianie się powiedzie, możesz sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>i <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>Właściwości w celu określenia, czy wystąpiły uwierzytelnianie wzajemne.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Ta metoda umożliwia blokowanie przed zakończeniem operacji. Aby uniknąć zablokowania przed zakończeniem operacji, użyj jednej z <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>przeciążenia metody.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>       Jeśli uwierzytelnianie nie powiedzie się, pojawi się <xref:System.Security.Authentication.AuthenticationException>lub <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń."
  syntax:
    content: public virtual void AuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);
    parameters:
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "<xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> Używany do ochrony rozszerzonej."
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<> </> *> I <> </> *> na zasady ochrony rozszerzonej przekazano <code> policy </code> znajdują się parametr <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "System operacyjny Windows 95 i Windows 98 nie są obsługiwane."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Ten obiekt został zamknięty."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "<code> policy </code> Ustawiono parametr <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> na platformie, która nie obsługuje ochrony rozszerzonej."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Metoda wywoływana przez klienta do uwierzytelniania serwerów i opcjonalnie serwera, w przypadku połączenia klient serwer. Proces uwierzytelniania używa poświadczeń określonego serwera i opcje uwierzytelniania."
  remarks: "Jeśli uwierzytelnianie się powiedzie, możesz sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>i <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>Właściwości w celu określenia, czy wystąpiły uwierzytelnianie wzajemne.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Ta metoda umożliwia blokowanie przed zakończeniem operacji. Aby uniknąć zablokowania przed zakończeniem operacji, użyj jednej z <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>przeciążenia metody.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>       Jeśli uwierzytelnianie nie powiedzie się, pojawi się <xref:System.Security.Authentication.AuthenticationException>lub <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń."
  syntax:
    content: public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "<xref:System.Net.NetworkCredential>Używany do ustalenia tożsamości serwera.</xref:System.Net.NetworkCredential>"
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Jeden z <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> wartości, wskazując usługi zabezpieczeń dla tego strumienia."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Jeden z <xref:System.Security.Principal.TokenImpersonationLevel>wartości i wskazujący, jak użyć poświadczenia klienta do dostępu do zasobów serwera.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Uwierzytelnianie nie powiodło się. Ten obiekt służy do próby uwierzytelnienia r."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Ten obiekt został zamknięty."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "System operacyjny Windows 95 i Windows 98 nie są obsługiwane."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Metoda wywoływana przez klienta do uwierzytelniania serwerów i opcjonalnie serwera, w przypadku połączenia klient serwer. Proces uwierzytelniania używa poświadczeń określonego serwera, opcje uwierzytelniania i zasady ochrony rozszerzonej."
  remarks: "Jeśli `policy` parametr jest `null`, używana rozszerzona zasada ochrony ma <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>ustawioną wartość <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       Jeśli uwierzytelnianie się powiedzie, możesz sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>i <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>Właściwości w celu określenia, czy wystąpiły uwierzytelnianie wzajemne.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Ta metoda umożliwia blokowanie przed zakończeniem operacji. Aby uniknąć zablokowania przed zakończeniem operacji, użyj jednej z <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>przeciążenia metody.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>       Jeśli uwierzytelnianie nie powiedzie się, pojawi się <xref:System.Security.Authentication.AuthenticationException>lub <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń."
  syntax:
    content: public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "<xref:System.Net.NetworkCredential>Używany do ustalenia tożsamości klienta.</xref:System.Net.NetworkCredential>"
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "<xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> Używany do ochrony rozszerzonej."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Jeden z <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> wartości, wskazując usługi zabezpieczeń dla tego strumienia."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Jeden z <xref:System.Security.Principal.TokenImpersonationLevel>wartości i wskazujący, jak użyć poświadczenia klienta do dostępu do zasobów serwera.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<> </> *> I <> </> *> na zasady ochrony rozszerzonej przekazano <code> policy </code> znajdują się parametr <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Uwierzytelnianie nie powiodło się. Ten obiekt służy do próby uwierzytelnienia r."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "System operacyjny Windows 95 i Windows 98 nie są obsługiwane."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Ten obiekt został zamknięty."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "<code> policy </code> Ustawiono parametr <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> na platformie, która nie obsługuje ochrony rozszerzonej."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync
  id: AuthenticateAsServerAsync
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServerAsync()
  nameWithType: NegotiateStream.AuthenticateAsServerAsync()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Metoda wywoływana przez klienta do uwierzytelniania serwerów i opcjonalnie serwera, w przypadku połączenia klient serwer jako operację asynchroniczną."
  remarks: "Uwierzytelnianie przy użyciu <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> serwera Nie nazwy usługi (SPN) jest określona dla serwera. Poziom personifikacji <xref:System.Security.Principal.TokenImpersonationLevel>, a poziom zabezpieczeń jest <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       Jeśli uwierzytelnianie się powiedzie, możesz sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>i <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>Właściwości w celu określenia, czy wystąpiły uwierzytelnianie wzajemne.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Jeśli uwierzytelnianie nie powiedzie się, pojawi się <xref:System.Security.Authentication.AuthenticationException>lub <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task
      description: "Zwraca <xref:System.Threading.Tasks.Task>obiekt zadania reprezentujący operację asynchroniczną.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Ten obiekt został zamknięty."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "System operacyjny Windows 95 i Windows 98 nie są obsługiwane."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  id: AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Metoda wywoływana przez klienta do uwierzytelniania serwerów i opcjonalnie serwera, w przypadku połączenia klient serwer jako operację asynchroniczną. Proces uwierzytelniania używa zasad określonym rozszerzonej ochrony."
  remarks: "Uwierzytelnianie przy użyciu <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> serwera Nie nazwy usługi (SPN) jest określona dla serwera. Poziom personifikacji <xref:System.Security.Principal.TokenImpersonationLevel>, a poziom zabezpieczeń jest <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       Jeśli `policy` parametr jest `null`, używana rozszerzona zasada ochrony ma <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>ustawioną wartość <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       Jeśli uwierzytelnianie się powiedzie, możesz sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>i <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>Właściwości w celu określenia, czy wystąpiły uwierzytelnianie wzajemne.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Jeśli uwierzytelnianie nie powiedzie się, pojawi się <xref:System.Security.Authentication.AuthenticationException>lub <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);
    parameters:
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "<xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> Używany do ochrony rozszerzonej."
    return:
      type: System.Threading.Tasks.Task
      description: "Zwraca <xref:System.Threading.Tasks.Task>obiekt zadania reprezentujący operację asynchroniczną.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<> </> *> I <> </> *> na zasady ochrony rozszerzonej przekazano <code> policy </code> znajdują się parametr <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "System operacyjny Windows 95 i Windows 98 nie są obsługiwane."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Ten obiekt został zamknięty."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "<code> policy </code> Ustawiono parametr <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> na platformie, która nie obsługuje ochrony rozszerzonej."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Metoda wywoływana przez klienta do uwierzytelniania serwerów i opcjonalnie serwera, w przypadku połączenia klient serwer jako operację asynchroniczną. Proces uwierzytelniania używa poświadczeń określonego serwera i opcje uwierzytelniania."
  remarks: "Jeśli uwierzytelnianie się powiedzie, możesz sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>i <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>Właściwości w celu określenia, czy wystąpiły uwierzytelnianie wzajemne.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Jeśli uwierzytelnianie nie powiedzie się, pojawi się <xref:System.Security.Authentication.AuthenticationException>lub <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "<xref:System.Net.NetworkCredential>Używany do ustalenia tożsamości serwera.</xref:System.Net.NetworkCredential>"
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Jeden z <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> wartości, wskazując usługi zabezpieczeń dla tego strumienia."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Jeden z <xref:System.Security.Principal.TokenImpersonationLevel>wartości i wskazujący, jak użyć poświadczenia klienta do dostępu do zasobów serwera.</xref:System.Security.Principal.TokenImpersonationLevel>"
    return:
      type: System.Threading.Tasks.Task
      description: "Zwraca <xref:System.Threading.Tasks.Task>obiekt zadania reprezentujący operację asynchroniczną.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Uwierzytelnianie nie powiodło się. Ten obiekt służy do próby uwierzytelnienia r."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Ten obiekt został zamknięty."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "System operacyjny Windows 95 i Windows 98 nie są obsługiwane."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Metoda wywoływana przez klienta do uwierzytelniania serwerów i opcjonalnie serwera, w przypadku połączenia klient serwer jako operację asynchroniczną. Proces uwierzytelniania używa poświadczeń określonego serwera, opcje uwierzytelniania i zasady ochrony rozszerzonej."
  remarks: "Jeśli `policy` parametr jest `null`, używana rozszerzona zasada ochrony ma <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>ustawioną wartość <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       Jeśli uwierzytelnianie się powiedzie, możesz sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>i <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>Właściwości w celu określenia, czy wystąpiły uwierzytelnianie wzajemne.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Jeśli uwierzytelnianie nie powiedzie się, pojawi się <xref:System.Security.Authentication.AuthenticationException>lub <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "<xref:System.Net.NetworkCredential>Używany do ustalenia tożsamości klienta.</xref:System.Net.NetworkCredential>"
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "<xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> Używany do ochrony rozszerzonej."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Jeden z <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> wartości, wskazując usługi zabezpieczeń dla tego strumienia."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Jeden z <xref:System.Security.Principal.TokenImpersonationLevel>wartości i wskazujący, jak użyć poświadczenia klienta do dostępu do zasobów serwera.</xref:System.Security.Principal.TokenImpersonationLevel>"
    return:
      type: System.Threading.Tasks.Task
      description: "Zwraca <xref:System.Threading.Tasks.Task>obiekt zadania reprezentujący operację asynchroniczną.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<> </> *> I <> </> *> na zasady ochrony rozszerzonej przekazano <code> policy </code> znajdują się parametr <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Uwierzytelnianie nie powiodło się. Ten obiekt służy do próby uwierzytelnienia r."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "System operacyjny Windows 95 i Windows 98 nie są obsługiwane."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Ten obiekt został zamknięty."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "<code> policy </code> Ustawiono parametr <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> na platformie, która nie obsługuje ochrony rozszerzonej."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Metoda wywoływana przez klientów, aby rozpocząć operację asynchroniczną na potrzeby uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer. Ta metoda nie są blokowane."
  remarks: "Uwierzytelnianie przy użyciu <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> klienta Nie nazwy usługi (SPN) jest określona dla serwera. Poziom personifikacji <xref:System.Security.Principal.TokenImpersonationLevel>, a poziom zabezpieczeń jest <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> <xref:System.Net.Security.NegotiateStream>Klasy utworzy główną nazwę usługi, używany do wzajemnego uwierzytelniania.</xref:System.Net.Security.NegotiateStream>       Ta metoda jest asynchroniczne i nie są blokowane podczas operacji. Aby zablokować przed zakończeniem operacji, użyj jednej z <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>przeciążenia metody.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       Należy ukończyć operację asynchroniczną uwierzytelniania przez wywołanie metody <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>metody.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> Zazwyczaj metoda jest wywoływana przez `asyncCallback` delegowanie. Aby uzyskać szczegółowe informacje o korzystaniu z modelem programowania asynchronicznego, zobacz [wywołanie asynchroniczne synchroniczne metody](~/add/includes/ajax-current-ext-md.md) Jeśli uwierzytelnianie nie powiedzie się, pojawi się <xref:System.Security.Authentication.AuthenticationException>lub <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń."
  example:
  - "The following code example demonstrates calling this method to begin an asynchronous authentication for the client.  \n  \n [!code-cpp[NclNegoAsyncClient#2](~/add/codesnippet/cpp/66fdfed9-ce77-41e0-af55-_1.cpp)]\n [!code-cs[NclNegoAsyncClient#2](~/add/codesnippet/csharp/66fdfed9-ce77-41e0-af55-_1.cs)]"
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: asyncCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>Delegata, który odwołuje się do metody do wywołania po zakończeniu uwierzytelniania.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Zdefiniowane przez użytkownika obiekt zawierający informacje na temat operacji. Ten obiekt jest przekazywany do `asyncCallback` delegować po zakończeniu operacji."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Obiekt wskazujący stan operacji asynchronicznej.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Ten obiekt został zamknięty."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Metoda wywoływana przez klientów, aby rozpocząć operację asynchroniczną na potrzeby uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer. Proces uwierzytelniania korzysta z określonych poświadczeń. Ta metoda nie są blokowane."
  remarks: "Ta metoda jest asynchroniczne i nie są blokowane podczas operacji. Aby zablokować przed zakończeniem operacji, użyj jednej z <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>przeciążenia metody.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       Należy ukończyć operację asynchroniczną uwierzytelniania przez wywołanie metody <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>metody.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> Zazwyczaj metoda jest wywoływana przez `asyncCallback` delegowanie. Aby uzyskać szczegółowe informacje o korzystaniu z modelem programowania asynchronicznego, zobacz [wywołanie asynchroniczne synchroniczne metody](~/add/includes/ajax-current-ext-md.md) Jeśli uwierzytelnianie nie powiedzie się, pojawi się <xref:System.Security.Authentication.AuthenticationException>lub <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "<xref:System.Net.NetworkCredential>Używany do ustalenia tożsamości klienta.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "Nazwy usługi (SPN), który unikatowo identyfikuje uwierzytelniania serwera."
    - id: asyncCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>Delegata, który odwołuje się do metody do wywołania po zakończeniu uwierzytelniania.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Zdefiniowane przez użytkownika obiekt zawierający informacje o operacji zapisu. Ten obiekt jest przekazywany do `asyncCallback` delegować po zakończeniu operacji."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Obiekt wskazujący stan operacji asynchronicznej.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Ten obiekt został zamknięty."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Metoda wywoływana przez klientów, aby rozpocząć operację asynchroniczną na potrzeby uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer. Proces uwierzytelniania używa określone poświadczenia i powiązania kanału. Ta metoda nie są blokowane."
  remarks: "Ta metoda jest asynchroniczne i nie są blokowane podczas operacji. Aby zablokować przed zakończeniem operacji, użyj jednej z <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>przeciążenia metody.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       Należy ukończyć operację asynchroniczną uwierzytelniania przez wywołanie metody <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>metody.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> Zazwyczaj metoda jest wywoływana przez `asyncCallback` delegowanie. Aby uzyskać szczegółowe informacje o korzystaniu z modelem programowania asynchronicznego, zobacz [wywołanie asynchroniczne synchroniczne metody](~/add/includes/ajax-current-ext-md.md) Jeśli uwierzytelnianie nie powiedzie się, pojawi się <xref:System.Security.Authentication.AuthenticationException>lub <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "<xref:System.Net.NetworkCredential>Używany do ustalenia tożsamości klienta.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "<xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>Używany do ochrony rozszerzonej.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "Nazwy usługi (SPN), który unikatowo identyfikuje uwierzytelniania serwera."
    - id: asyncCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>Delegata, który odwołuje się do metody do wywołania po zakończeniu uwierzytelniania.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Zdefiniowane przez użytkownika obiekt zawierający informacje o operacji zapisu. Ten obiekt jest przekazywany do `asyncCallback` delegować po zakończeniu operacji."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Obiekt wskazujący stan operacji asynchronicznej.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Ten obiekt został zamknięty."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Metoda wywoływana przez klientów, aby rozpocząć operację asynchroniczną na potrzeby uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer. Proces uwierzytelniania używa określonych poświadczeń i opcje uwierzytelniania. Ta metoda nie są blokowane."
  remarks: "Użyj `requiredProtectionLevel` parametr żądania usługi zabezpieczeń dla danych przesyłanych za pomocą uwierzytelnionych strumienia. Na przykład, aby dane zaszyfrowana i podpisana, należy określić <xref:System.Net.Security.ProtectionLevel>wartość.</xref:System.Net.Security.ProtectionLevel> Pomyślne uwierzytelnienie nie gwarantuje, że żądanie <xref:System.Net.Security.ProtectionLevel>udzielono.</xref:System.Net.Security.ProtectionLevel> Należy sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>i <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Ta metoda jest asynchroniczne i nie są blokowane podczas operacji. Aby zablokować przed zakończeniem operacji, użyj jednej z <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>przeciążenia metody.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       Należy ukończyć operację asynchroniczną uwierzytelniania przez wywołanie metody <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>metody.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> Zazwyczaj metoda jest wywoływana przez `asyncCallback` delegowanie. Aby uzyskać szczegółowe informacje o korzystaniu z modelem programowania asynchronicznego, zobacz [wywołanie asynchroniczne synchroniczne metody](~/add/includes/ajax-current-ext-md.md) Jeśli uwierzytelnianie nie powiedzie się, pojawi się <xref:System.Security.Authentication.AuthenticationException>lub <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "<xref:System.Net.NetworkCredential>Używany do ustalenia tożsamości klienta.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "Nazwy usługi (SPN), który unikatowo identyfikuje uwierzytelniania serwera."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Jeden z <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> wartości, wskazując usługi zabezpieczeń dla tego strumienia."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Jeden z <xref:System.Security.Principal.TokenImpersonationLevel>wartości i wskazujący, jak użyć poświadczenia klienta do dostępu do zasobów serwera.</xref:System.Security.Principal.TokenImpersonationLevel>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>Delegata, który odwołuje się do metody do wywołania po zakończeniu uwierzytelniania.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Zdefiniowane przez użytkownika obiekt zawierający informacje o operacji zapisu. Ten obiekt jest przekazywany do `asyncCallback` delegować po zakończeniu operacji."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Obiekt wskazujący stan operacji asynchronicznej.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Ten obiekt został zamknięty."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Metoda wywoływana przez klientów, aby rozpocząć operację asynchroniczną na potrzeby uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer. Proces uwierzytelniania używa określone poświadczenia, opcje uwierzytelniania i powiązania kanału. Ta metoda nie są blokowane."
  remarks: "Użyj `requiredProtectionLevel` parametr żądania usługi zabezpieczeń dla danych przesyłanych za pomocą uwierzytelnionych strumienia. Na przykład, aby dane zaszyfrowana i podpisana, należy określić <xref:System.Net.Security.ProtectionLevel>wartość.</xref:System.Net.Security.ProtectionLevel> Pomyślne uwierzytelnienie nie gwarantuje, że żądanie <xref:System.Net.Security.ProtectionLevel>udzielono.</xref:System.Net.Security.ProtectionLevel> Należy sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>i <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Ta metoda jest asynchroniczne i nie są blokowane podczas operacji. Aby zablokować przed zakończeniem operacji, użyj jednej z <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>przeciążenia metody.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       Należy ukończyć operację asynchroniczną uwierzytelniania przez wywołanie metody <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>metody.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> Zazwyczaj metoda jest wywoływana przez `asyncCallback` delegowanie. Aby uzyskać szczegółowe informacje o korzystaniu z modelem programowania asynchronicznego, zobacz [wywołanie asynchroniczne synchroniczne metody](~/add/includes/ajax-current-ext-md.md) Jeśli uwierzytelnianie nie powiedzie się, pojawi się <xref:System.Security.Authentication.AuthenticationException>lub <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "<xref:System.Net.NetworkCredential>Używany do ustalenia tożsamości klienta.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "<xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>Używany do ochrony rozszerzonej.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "Nazwy usługi (SPN), który unikatowo identyfikuje uwierzytelniania serwera."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Jeden z <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> wartości, wskazując usługi zabezpieczeń dla tego strumienia."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Jeden z <xref:System.Security.Principal.TokenImpersonationLevel>wartości i wskazujący, jak użyć poświadczenia klienta do dostępu do zasobów serwera.</xref:System.Security.Principal.TokenImpersonationLevel>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>Delegata, który odwołuje się do metody do wywołania po zakończeniu uwierzytelniania.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Zdefiniowane przez użytkownika obiekt zawierający informacje o operacji zapisu. Ten obiekt jest przekazywany do `asyncCallback` delegować po zakończeniu operacji."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Obiekt wskazujący stan operacji asynchronicznej.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Ten obiekt został zamknięty."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsServer(System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsServer(AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Metoda wywoływana przez serwery, aby rozpocząć operację asynchroniczną do uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer. Ta metoda nie są blokowane."
  remarks: "Uwierzytelnianie przy użyciu <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> serwera Nie nazwy usługi (SPN) jest określona dla serwera. Poziom personifikacji ma <xref:System.Security.Principal.TokenImpersonationLevel>,</xref:System.Security.Principal.TokenImpersonationLevel> poziom zabezpieczeń jest <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel>       Jeśli uwierzytelnianie się powiedzie, możesz sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>i <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>Właściwości w celu określenia, czy wystąpiły uwierzytelnianie wzajemne.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Aby zablokować przed zakończeniem operacji, użyj jednej z <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>przeciążenia metody.</xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>       Jeśli uwierzytelnianie nie powiedzie się, pojawi się <xref:System.Security.Authentication.AuthenticationException>lub <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsServer (AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: asyncCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>Delegata, który odwołuje się do metody do wywołania po zakończeniu uwierzytelniania.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Zdefiniowane przez użytkownika obiekt zawierający informacje na temat operacji. Ten obiekt jest przekazywany do `asyncCallback` delegować po zakończeniu operacji."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Obiekt wskazujący stan operacji asynchronicznej.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Ten obiekt został zamknięty."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "System operacyjny Windows 95 i Windows 98 nie są obsługiwane."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Metoda wywoływana przez serwery, aby rozpocząć operację asynchroniczną do uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer. Proces uwierzytelniania używa zasad określonym rozszerzonej ochrony. Ta metoda nie są blokowane."
  remarks: "Uwierzytelnianie przy użyciu <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> serwera Nie nazwy usługi (SPN) jest określona dla serwera. Poziom personifikacji ma <xref:System.Security.Principal.TokenImpersonationLevel>,</xref:System.Security.Principal.TokenImpersonationLevel> poziom zabezpieczeń jest <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel>       Jeśli `policy` parametr jest `null`, używana rozszerzona zasada ochrony ma <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>ustawioną wartość <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       Jeśli uwierzytelnianie się powiedzie, możesz sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>i <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>Właściwości w celu określenia, czy wystąpiły uwierzytelnianie wzajemne.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Aby zablokować przed zakończeniem operacji, użyj jednej z <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>przeciążenia metody.</xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>       Jeśli uwierzytelnianie nie powiedzie się, pojawi się <xref:System.Security.Authentication.AuthenticationException>lub <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "<xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> Używany do ochrony rozszerzonej."
    - id: asyncCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>Delegata, który odwołuje się do metody do wywołania po zakończeniu uwierzytelniania.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Zdefiniowane przez użytkownika obiekt zawierający informacje o operacji zapisu. Ten obiekt jest przekazywany do `asyncCallback` delegować po zakończeniu operacji."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Obiekt wskazujący stan operacji asynchronicznej.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<> </> *> I <> </> *> na zasady ochrony rozszerzonej przekazano <code> policy </code> znajdują się parametr <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "System operacyjny Windows 95 i Windows 98 nie są obsługiwane."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Ten obiekt został zamknięty."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "<code> policy </code> Ustawiono parametr <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> na platformie, która nie obsługuje ochrony rozszerzonej."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Metoda wywoływana przez serwery, aby rozpocząć operację asynchroniczną do uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer. Proces uwierzytelniania używa poświadczeń określonego serwera i opcje uwierzytelniania. Ta metoda nie są blokowane."
  remarks: "Użyj `requiredProtectionLevel` parametr żądania usługi zabezpieczeń dla danych przesyłanych za pomocą uwierzytelnionych strumienia. Na przykład, aby dane zaszyfrowana i podpisana, należy określić <xref:System.Net.Security.ProtectionLevel>wartość.</xref:System.Net.Security.ProtectionLevel> Pomyślne uwierzytelnienie nie gwarantuje, że żądanie <xref:System.Net.Security.ProtectionLevel>udzielono.</xref:System.Net.Security.ProtectionLevel> Należy sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>i <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Ta metoda jest asynchroniczne i nie są blokowane podczas operacji. Aby zablokować przed zakończeniem operacji, użyj jednej z <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>przeciążenia metody.</xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>       Należy ukończyć operację asynchroniczną uwierzytelniania przez wywołanie metody <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A>metody.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> Zazwyczaj metoda jest wywoływana przez `asyncCallback` delegowanie. Aby uzyskać szczegółowe informacje o korzystaniu z modelem programowania asynchronicznego, zobacz [wywołanie asynchroniczne synchroniczne metody](~/add/includes/ajax-current-ext-md.md) Jeśli uwierzytelnianie nie powiedzie się, pojawi się <xref:System.Security.Authentication.AuthenticationException>lub <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "<xref:System.Net.NetworkCredential>Używany do ustalenia tożsamości klienta.</xref:System.Net.NetworkCredential>"
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Jeden z <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> wartości, wskazując usługi zabezpieczeń dla tego strumienia."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Jeden z <xref:System.Security.Principal.TokenImpersonationLevel>wartości i wskazujący, jak użyć poświadczenia klienta do dostępu do zasobów serwera.</xref:System.Security.Principal.TokenImpersonationLevel>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>Delegata, który odwołuje się do metody do wywołania po zakończeniu uwierzytelniania.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Zdefiniowane przez użytkownika obiekt zawierający informacje na temat operacji. Ten obiekt jest przekazywany do `asyncCallback` delegować po zakończeniu operacji."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Obiekt wskazujący stan operacji asynchronicznej.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Ten obiekt został zamknięty."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "System operacyjny Windows 95 i Windows 98 nie są obsługiwane."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Metoda wywoływana przez serwery, aby rozpocząć operację asynchroniczną do uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer. Proces uwierzytelniania używa poświadczeń określonego serwera, opcje uwierzytelniania i zasady ochrony rozszerzonej. Ta metoda nie są blokowane."
  remarks: "Użyj `requiredProtectionLevel` parametr żądania usługi zabezpieczeń dla danych przesyłanych za pomocą uwierzytelnionych strumienia. Na przykład, aby dane zaszyfrowana i podpisana, należy określić <xref:System.Net.Security.ProtectionLevel>wartość.</xref:System.Net.Security.ProtectionLevel> Pomyślne uwierzytelnienie nie gwarantuje, że żądanie <xref:System.Net.Security.ProtectionLevel>udzielono.</xref:System.Net.Security.ProtectionLevel> Należy sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>i <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Jeśli `policy` parametr jest `null`, używana rozszerzona zasada ochrony ma <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>ustawioną wartość <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       Ta metoda jest asynchroniczne i nie są blokowane podczas operacji. Aby zablokować przed zakończeniem operacji, użyj jednej z <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>przeciążenia metody.</xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>       Należy ukończyć operację asynchroniczną uwierzytelniania przez wywołanie metody <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A>metody.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> Zazwyczaj metoda jest wywoływana przez `asyncCallback` delegowanie. Aby uzyskać szczegółowe informacje o korzystaniu z modelem programowania asynchronicznego, zobacz [wywołanie asynchroniczne synchroniczne metody](~/add/includes/ajax-current-ext-md.md) Jeśli uwierzytelnianie nie powiedzie się, pojawi się <xref:System.Security.Authentication.AuthenticationException>lub <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "<xref:System.Net.NetworkCredential>Używany do ustalenia tożsamości klienta.</xref:System.Net.NetworkCredential>"
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "<xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> Używany do ochrony rozszerzonej."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Jeden z <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> wartości, wskazując usługi zabezpieczeń dla tego strumienia."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Jeden z <xref:System.Security.Principal.TokenImpersonationLevel>wartości i wskazujący, jak użyć poświadczenia klienta do dostępu do zasobów serwera.</xref:System.Security.Principal.TokenImpersonationLevel>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>Delegata, który odwołuje się do metody do wywołania po zakończeniu uwierzytelniania.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Zdefiniowane przez użytkownika obiekt zawierający informacje o operacji zapisu. Ten obiekt jest przekazywany do `asyncCallback` delegować po zakończeniu operacji."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Obiekt wskazujący stan operacji asynchronicznej.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<> </> *> I <> </> *> na zasady ochrony rozszerzonej przekazano <code> policy </code> znajdują się parametr <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "System operacyjny Windows 95 i Windows 98 nie są obsługiwane."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Ten obiekt został zamknięty."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "<code> policy </code> Ustawiono parametr <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> na platformie, która nie obsługuje ochrony rozszerzonej."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Rozpoczyna operację asynchroniczną odczytu, która odczytuje dane ze strumienia i zapisuje go w określonej tablicy."
  remarks: "Po włączeniu szyfrowania, podpisywania, lub szyfrowania i podpisywania, operacji odczytu odczytuje dane z podstawowego strumienia, sprawdza integralność danych i odszyfrowuje je. Jeśli żadne dodatkowe zabezpieczenia usług, takich jak podpisywania lub szyfrowania danych są używane, ta metoda uruchamia asynchronicznych operacji odczytu na źródłowego strumienia.       Ta metoda jest asynchroniczne i nie są blokowane podczas operacji. Aby zablokować przed zakończeniem operacji, należy użyć <xref:System.Net.Security.NegotiateStream.Read%2A>metody.</xref:System.Net.Security.NegotiateStream.Read%2A>       Operacja odczytu asynchronicznego musi wykonać wywołanie <xref:System.Net.Security.NegotiateStream.EndRead%2A>metody.</xref:System.Net.Security.NegotiateStream.EndRead%2A> Zazwyczaj metoda jest wywoływana przez `asyncCallback` delegowanie. Aby uzyskać szczegółowe informacje o korzystaniu z modelem programowania asynchronicznego, zobacz [wywołanie asynchroniczne synchroniczne metody](~/add/includes/ajax-current-ext-md.md) <xref:System.Net.Security.NegotiateStream>Klasa nie obsługuje wiele równoczesnych operacji odczytu.</xref:System.Net.Security.NegotiateStream> Jeśli podjęto próbę uruchomienia operacji odczytu podczas odczytywania innej operacji jest już wykonywane na ten sam strumień <xref:System.NotSupportedException>zostanie wygenerowany wyjątek.</xref:System.NotSupportedException>       Nie można wywołać tej metody, dopóki pomyślnym uwierzytelnieniu. W celu uwierzytelnienia wywoływanie jednego z <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, lub <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metody.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>"
  example:
  - "The following code example demonstrates starting an asynchronous read operation. This code example is part of a larger example provided for the <xref:System.Net.Security.NegotiateStream> class.  \n  \n [!code-cs[NclNegoAsyncServer#1](~/add/codesnippet/csharp/45085c2d-bb14-48e7-a75f-_1.cs)]\n [!code-cpp[NclNegoAsyncServer#1](~/add/codesnippet/cpp/45085c2d-bb14-48e7-a75f-_1.cpp)]"
  syntax:
    content: public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "A <xref:System.Byte>odczytać tablicy, która odbiera bajtów ze strumienia.</xref:System.Byte>"
    - id: offset
      type: System.Int32
      description: "Liczony od zera lokalizacja w `buffer` rozpoczęcia przechowywania danych przeczytanie tego strumienia."
    - id: count
      type: System.Int32
      description: "Maksymalna liczba bajtów do odczytania ze strumienia."
    - id: asyncCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>Delegata, który odwołuje się do metody do wywołania po zakończeniu operacji odczytu.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Zdefiniowane przez użytkownika obiekt zawierający informacje o operacji odczytu. Ten obiekt jest przekazywany do `asyncCallback` delegować po zakończeniu operacji."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Obiekt wskazujący stan operacji asynchronicznej.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginRead*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code> is less than 0.  \n  \n \\- or -  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n \\- or -  \n  \n <code>offset</code> plus <code>count</code> is greater than the length of <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The read operation failed.  \n  \n \\- or -  \n  \n Encryption is in use, but the data could not be decrypted."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Istnieje już operacja odczytu w toku."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Ten obiekt został zamknięty."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Nie przeprowadzono uwierzytelniania."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Rozpoczyna operację asynchronicznego zapisu, która zapisuje <xref:System.Byte>s z określonego bufora do strumienia.</xref:System.Byte>"
  remarks: "Po włączeniu szyfrowania, podpisywania, lub szyfrowania i podpisywania, ta metoda odczytuje dane z bufora, są szyfrowane, znaki, lub szyfruje podpisuje go i przesyła je przy użyciu podstawowego strumienia. Jeśli żadne dodatkowe zabezpieczenia usług, takich jak podpisywania lub szyfrowania danych są używane, ta metoda uruchamiania operacji zapis asynchroniczny w strumieniu podstawowym.       Ta metoda jest asynchroniczne i nie są blokowane podczas operacji. Aby zablokować przed zakończeniem operacji, należy użyć <xref:System.Net.Security.NegotiateStream.Read%2A>metody.</xref:System.Net.Security.NegotiateStream.Read%2A>       Operacja odczytu asynchronicznego musi wykonać wywołanie <xref:System.Net.Security.NegotiateStream.EndWrite%2A>metody.</xref:System.Net.Security.NegotiateStream.EndWrite%2A> Zazwyczaj metoda jest wywoływana przez `asyncCallback` delegowanie. Aby uzyskać szczegółowe informacje o korzystaniu z modelem programowania asynchronicznego, zobacz [wywołanie asynchroniczne synchroniczne metody](~/add/includes/ajax-current-ext-md.md) <xref:System.Net.Security.NegotiateStream>Klasa nie obsługuje wiele równoczesnych zapisu.</xref:System.Net.Security.NegotiateStream> Jeśli podjęto próbę uruchomienia operacji zapisu, gdy inna operacja zapisu jest już wykonywane na ten sam strumień <xref:System.NotSupportedException>zostanie wygenerowany wyjątek.</xref:System.NotSupportedException>       Nie można wywołać tej metody, dopóki pomyślnym uwierzytelnieniu. W celu uwierzytelnienia wywoływanie jednego z <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, lub <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metody.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>"
  example:
  - "The following code example demonstrates beginning an asynchronous write operation.  \n  \n [!code-cpp[NclNegoAsyncClient#3](~/add/codesnippet/cpp/5748c807-4e74-4d4c-a4e4-_1.cpp)]\n [!code-cs[NclNegoAsyncClient#3](~/add/codesnippet/csharp/5748c807-4e74-4d4c-a4e4-_1.cs)]  \n  \n The following method is called when the operation completes.  \n  \n [!code-cpp[NclNegoAsyncClient#4](~/add/codesnippet/cpp/5748c807-4e74-4d4c-a4e4-_2.cpp)]\n [!code-cs[NclNegoAsyncClient#4](~/add/codesnippet/csharp/5748c807-4e74-4d4c-a4e4-_2.cs)]"
  syntax:
    content: public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "A <xref:System.Byte>Tablica, która dostarcza bajtów do zapisania w strumieniu.</xref:System.Byte>"
    - id: offset
      type: System.Int32
      description: "Liczony od zera lokalizacja w `buffer` w której ma zostać rozpoczęte odczytywanie bajtów do zapisania w strumieniu."
    - id: count
      type: System.Int32
      description: "<xref:System.Int32>Wartość, która określa liczbę bajtów do odczytu z `buffer`.</xref:System.Int32>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>Delegata, który odwołuje się do metody do wywołania po ukończeniu operacji zapisu.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Zdefiniowane przez użytkownika obiekt zawierający informacje o operacji zapisu. Ten obiekt jest przekazywany do `asyncCallback` delegować po zakończeniu operacji."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Obiekt wskazujący stan operacji asynchronicznej.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginWrite*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset is less than 0</code>.  \n  \n \\- or -  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n \\- or -  \n  \n <code>offset</code> plus count is greater than the length of <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The write operation failed.  \n  \n \\- or -  \n  \n Encryption is in use, but the data could not be encrypted."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Istnieje już w toku operacji zapisu."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Ten obiekt został zamknięty."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Nie przeprowadzono uwierzytelniania."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.CanRead
  id: CanRead
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: CanRead
  nameWithType: NegotiateStream.CanRead
  fullName: System.Net.Security.NegotiateStream.CanRead
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Pobiera <xref:System.Boolean>wartość, która wskazuje, czy zasadniczy strumień jest czytelna.</xref:System.Boolean>"
  remarks: "W przypadku pomyślnego uwierzytelnienia, ta właściwość zwraca wartość zwrócona przez wywołanie <xref:System.IO.Stream.CanRead%2A>Właściwość źródłowego strumienia.</xref:System.IO.Stream.CanRead%2A> Zasadniczy strumień został określony podczas tworzenia wystąpienia <xref:System.Net.Security.NegotiateStream>klasy.</xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_4_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_4_1.cpp)]"
  syntax:
    content: public override bool CanRead { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli podczas uwierzytelniania i zasadniczy strumień jest możliwy do odczytu; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.CanRead*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.CanSeek
  id: CanSeek
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: CanSeek
  nameWithType: NegotiateStream.CanSeek
  fullName: System.Net.Security.NegotiateStream.CanSeek
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Pobiera <xref:System.Boolean>wartość, która wskazuje, czy wyszukiwać źródłowego strumienia.</xref:System.Boolean>"
  remarks: "Nie należy próbować ustawiać pozycja <xref:System.Net.Security.NegotiateStream>obiektu lub jego źródłowego strumienia.</xref:System.Net.Security.NegotiateStream> Zasadniczy strumień został określony podczas tworzenia wystąpienia <xref:System.Net.Security.NegotiateStream>klasy.</xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_3_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_3_1.cpp)]"
  syntax:
    content: public override bool CanSeek { get; }
    return:
      type: System.Boolean
      description: "Ta właściwość zawsze zwraca <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.CanSeek*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.CanTimeout
  id: CanTimeout
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: CanTimeout
  nameWithType: NegotiateStream.CanTimeout
  fullName: System.Net.Security.NegotiateStream.CanTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Pobiera <xref:System.Boolean>wartość, która wskazuje, czy zasadniczy strumień obsługuje limity czasu.</xref:System.Boolean>"
  remarks: "Ta właściwość zwraca wartość zwrócona przez wywołanie <xref:System.IO.Stream.CanTimeout%2A>Właściwość źródłowego strumienia.</xref:System.IO.Stream.CanTimeout%2A> Zasadniczy strumień został określony podczas tworzenia wystąpienia <xref:System.Net.Security.NegotiateStream>klasy.</xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_2_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_2_1.cpp)]"
  syntax:
    content: public override bool CanTimeout { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli zasadniczy strumień obsługuje limity czasu; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.CanTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.CanWrite
  id: CanWrite
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: CanWrite
  nameWithType: NegotiateStream.CanWrite
  fullName: System.Net.Security.NegotiateStream.CanWrite
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Pobiera <xref:System.Boolean>wartość, która wskazuje, czy zasadniczy strumień jest zapisywalna.</xref:System.Boolean>"
  remarks: "W przypadku pomyślnego uwierzytelnienia, ta właściwość zwraca wartość zwrócona przez wywołanie <xref:System.IO.Stream.CanWrite%2A>Właściwość źródłowego strumienia.</xref:System.IO.Stream.CanWrite%2A> Zasadniczy strumień został określony podczas tworzenia wystąpienia <xref:System.Net.Security.NegotiateStream>klasy.</xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_6_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_6_1.cpp)]"
  syntax:
    content: public override bool CanWrite { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli podczas uwierzytelniania i zasadniczy strumień jest zapisywalny; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.CanWrite*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: NegotiateStream.Dispose(Boolean)
  fullName: System.Net.Security.NegotiateStream.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Zwalnia zasoby niezarządzane używane przez <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> i opcjonalnie zwalnia zasoby zarządzane."
  remarks: "Ta metoda jest wywoływana przez metodę publiczną `Dispose()`— metoda i <xref:System.Object.Finalize%2A>metody.</xref:System.Object.Finalize%2A> `Dispose()`wywołuje chronioną metodę `Dispose(Boolean)` metody z `disposing` ustawiono parametr `true`. <xref:System.Object.Finalize%2A>wywołuje `Dispose` z `disposing` ustawioną `false`.</xref:System.Object.Finalize%2A>       Gdy `disposing` parametr ma wartość true, ta metoda zwalnia wszystkie zasoby zajmowane przez wszelkie obiekty zarządzane przez to <xref:System.Net.Security.NegotiateStream>odwołań.</xref:System.Net.Security.NegotiateStream> Ta metoda wywołuje `Dispose()` metody każdego odwołuje się do obiektu."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby zwolnić zasoby zarządzane i niezarządzane; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> aby zwolnić tylko zasoby niezarządzane."
  overload: System.Net.Security.NegotiateStream.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)
  id: EndAuthenticateAsClient(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: EndAuthenticateAsClient(IAsyncResult)
  nameWithType: NegotiateStream.EndAuthenticateAsClient(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndAuthenticateAsClient(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Kończy operację uwierzytelniania oczekujących asynchronicznych klienta, który został uruchomiony z wywołania <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*>.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*>"
  remarks: "Jeśli działanie nie zostało ukończone, ta metoda blokuje, dopóki nie robi. Gdy uwierzytelnienie zakończy się powodzeniem, możesz sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>i <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>Właściwości w celu określenia, czy wystąpiły uwierzytelnianie wzajemne.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Jeśli uwierzytelnianie nie powiedzie się, pojawi się <xref:System.Security.Authentication.AuthenticationException>lub <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń.       Aby wykonać tę operację synchronicznie, użyj jednej z <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>metody.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>"
  syntax:
    content: public virtual void EndAuthenticateAsClient (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Wystąpienie zwracane przez wywołanie do <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*>.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*> </xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.EndAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>nie została utworzona przez wywołanie do <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Uwierzytelnianie nie jest oczekujący klienta do wykonania."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)
  id: EndAuthenticateAsServer(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: EndAuthenticateAsServer(IAsyncResult)
  nameWithType: NegotiateStream.EndAuthenticateAsServer(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndAuthenticateAsServer(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Kończy operację uwierzytelniania oczekujących asynchronicznych klienta, który został uruchomiony z wywołania <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*>.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*>"
  remarks: "Jeśli działanie nie zostało ukończone, ta metoda blokuje, dopóki nie robi.       Jeśli uwierzytelnianie się powiedzie, możesz sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>i <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>Właściwości w celu określenia, czy wystąpiły uwierzytelnianie wzajemne.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Jeśli uwierzytelnianie nie powiedzie się, pojawi się <xref:System.Security.Authentication.AuthenticationException>lub <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń.       Aby wykonać tę operację synchronicznie, użyj <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>metody.</xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>"
  syntax:
    content: public virtual void EndAuthenticateAsServer (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Wystąpienie zwracane przez wywołanie do <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*>.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*> </xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.EndAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>nie została utworzona przez wywołanie do <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Uwierzytelnianie nie jest oczekiwanie na zakończenie."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)
  id: EndRead(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: EndRead(IAsyncResult)
  nameWithType: NegotiateStream.EndRead(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndRead(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Kończy się asynchronicznych operacji odczytu, które zostało uruchomione z wywołania <xref:System.Net.Security.NegotiateStream.BeginRead*>.</xref:System.Net.Security.NegotiateStream.BeginRead*>"
  remarks: "Jeśli działanie nie zostało ukończone, ta metoda blokuje, dopóki nie robi.       Aby wykonać tę operację synchronicznie, użyj <xref:System.Net.Security.NegotiateStream.Read%2A>metody.</xref:System.Net.Security.NegotiateStream.Read%2A>       Nie można wywołać tej metody, dopóki pomyślnym uwierzytelnieniu. W celu uwierzytelnienia wywoływanie jednego z <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, lub <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metody.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>"
  example:
  - "The following code example demonstrates ending an asynchronous read operation. For an example that demonstrates starting the operation, see <xref:System.Net.Security.NegotiateStream.BeginRead%2A>.  \n  \n [!code-cs[NclNegoAsyncServer#3](~/add/codesnippet/csharp/m-system.net.security.ne_2_1.cs)]\n [!code-cpp[NclNegoAsyncServer#3](~/add/codesnippet/cpp/m-system.net.security.ne_2_1.cpp)]"
  syntax:
    content: public override int EndRead (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Wystąpienia zwrócony przez wywołanie do <xref:System.Net.Security.NegotiateStream.BeginRead*></xref:System.Net.Security.NegotiateStream.BeginRead*> </xref:System.IAsyncResult>"
    return:
      type: System.Int32
      description: "A <xref:System.Int32>wartość, która określa liczbę bajtów do odczytu strumienia podstawowego.</xref:System.Int32>"
  overload: System.Net.Security.NegotiateStream.EndRead*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "AsyncResult nie została utworzona przez wywołanie do <xref:System.Net.Security.NegotiateStream.BeginRead*>.</xref:System.Net.Security.NegotiateStream.BeginRead*>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Nie przeprowadzono uwierzytelniania."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Operacja odczytu nie powiodła się."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)
  id: EndWrite(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: EndWrite(IAsyncResult)
  nameWithType: NegotiateStream.EndWrite(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndWrite(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Kończy operację asynchronicznego zapisu, które zostało uruchomione z wywołania <xref:System.Net.Security.NegotiateStream.BeginWrite*>.</xref:System.Net.Security.NegotiateStream.BeginWrite*>"
  remarks: "Jeśli działanie nie zostało ukończone, ta metoda blokuje, dopóki nie robi.       Nie można wywołać tej metody, dopóki pomyślnym uwierzytelnieniu. W celu uwierzytelnienia wywoływanie jednego z <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, lub <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metody.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       Aby wykonać tę operację synchronicznie, użyj <xref:System.Net.Security.NegotiateStream.Write%2A>metody.</xref:System.Net.Security.NegotiateStream.Write%2A>"
  example:
  - "The following code example demonstrates a method that is called to complete the asynchronous write operation. For an example that demonstrates starting the operation, see <xref:System.Net.Security.NegotiateStream.BeginWrite%2A>.  \n  \n [!code-cpp[NclNegoAsyncClient#4](~/add/codesnippet/cpp/m-system.net.security.ne_0_1.cpp)]\n [!code-cs[NclNegoAsyncClient#4](~/add/codesnippet/csharp/m-system.net.security.ne_0_1.cs)]"
  syntax:
    content: public override void EndWrite (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Wystąpienia zwrócony przez wywołanie do <xref:System.Net.Security.NegotiateStream.BeginWrite*></xref:System.Net.Security.NegotiateStream.BeginWrite*> </xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.EndWrite*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "AsyncResult nie została utworzona przez wywołanie do <xref:System.Net.Security.NegotiateStream.BeginWrite*>.</xref:System.Net.Security.NegotiateStream.BeginWrite*>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Nie przeprowadzono uwierzytelniania."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Operacja zapisu nie powiodła się."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Flush
  id: Flush
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Flush()
  nameWithType: NegotiateStream.Flush()
  fullName: System.Net.Security.NegotiateStream.Flush()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Powoduje, że wszystkie buforowane dane są zapisywane w podstawowej urządzenia."
  remarks: "Ta metoda wywołuje <xref:System.IO.Stream.Flush%2A>w strumieniu podstawowym.</xref:System.IO.Stream.Flush%2A>"
  example:
  - "The following code example demonstrates flushing the stream.  \n  \n [!code-cs[NclNegoSyncClient#4](~/add/codesnippet/csharp/m-system.net.security.ne_3_1.cs)]\n [!code-cpp[NclNegoSyncClient#4](~/add/codesnippet/cpp/m-system.net.security.ne_3_1.cpp)]"
  syntax:
    content: public override void Flush ();
    parameters: []
  overload: System.Net.Security.NegotiateStream.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.ImpersonationLevel
  id: ImpersonationLevel
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: ImpersonationLevel
  nameWithType: NegotiateStream.ImpersonationLevel
  fullName: System.Net.Security.NegotiateStream.ImpersonationLevel
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Pobiera wartość wskazującą, jaki serwer może za pomocą poświadczeń klienta."
  remarks: "Należy pomyślnie uwierzytelnić przed wywołaniem tej metody. Klienci określić poziom personifikacji, gdy będą one żądać uwierzytelniania przez wywoływanie jednej z <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>lub <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>metody.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> Jeśli uwierzytelnianie bez określania <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>jest używany.</xref:System.Security.Principal.TokenImpersonationLevel> </xref:System.Security.Principal.TokenImpersonationLevel>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_5_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_5_1.cpp)]"
  syntax:
    content: public virtual System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; }
    return:
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Jeden z <xref:System.Security.Principal.TokenImpersonationLevel>wartości.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Security.NegotiateStream.ImpersonationLevel*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Uwierzytelnianie nie powiodło się lub nie przeprowadzono."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.IsAuthenticated
  id: IsAuthenticated
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: IsAuthenticated
  nameWithType: NegotiateStream.IsAuthenticated
  fullName: System.Net.Security.NegotiateStream.IsAuthenticated
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Pobiera <xref:System.Boolean>wartość, która wskazuje, czy uwierzytelnianie zakończyło się powodzeniem.</xref:System.Boolean>"
  remarks: "Uwierzytelnianie klientów przez wywołanie metody <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>lub <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>metody.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> Serwery uwierzytelniania przez wywołanie metody <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>lub <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metody.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_10_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_10_1.cpp)]"
  syntax:
    content: public override bool IsAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli wystąpiły pomyślne uwierzytelnienie; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.IsAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.IsEncrypted
  id: IsEncrypted
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: IsEncrypted
  nameWithType: NegotiateStream.IsEncrypted
  fullName: System.Net.Security.NegotiateStream.IsEncrypted
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Pobiera <xref:System.Boolean>wartość wskazującą, czy to <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> używa szyfrowania danych.</xref:System.Boolean>"
  remarks: "Szyfrowanie pomaga chronić prywatność danych. ułatwia to znaczy, upewnij się, że gdy dane są przesyłane go nie może być odszyfrowywane przez osoby trzecie."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_8_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_8_1.cpp)]"
  syntax:
    content: public override bool IsEncrypted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli dane są szyfrowane przed przesyłanych za pośrednictwem sieci i odszyfrować po osiągnięciu zdalny punkt końcowy; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.IsEncrypted*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
  id: IsMutuallyAuthenticated
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: IsMutuallyAuthenticated
  nameWithType: NegotiateStream.IsMutuallyAuthenticated
  fullName: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Pobiera <xref:System.Boolean>wartość, która wskazuje, czy zarówno serwer, jak i klienta zostały uwierzytelnione.</xref:System.Boolean>"
  remarks: "Wzajemne uwierzytelnianie jest określony przez klienta, gdy klient oczekuje, że serwer o podanie poświadczeń dla uwierzytelniania. Domyślnie klienci żądają wzajemnego uwierzytelniania.       Protokół negocjacji wybiera protokołu NTLM lub Kerberos w zależności od protokołów zabezpieczeń obsługiwane przez klienta i serwera. Uwierzytelnianie NTLM nie obsługuje uwierzytelniania wzajemnego."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_7_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_7_1.cpp)]"
  syntax:
    content: public override bool IsMutuallyAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli serwer został uwierzytelniony; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.IsServer
  id: IsServer
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: IsServer
  nameWithType: NegotiateStream.IsServer
  fullName: System.Net.Security.NegotiateStream.IsServer
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Pobiera <xref:System.Boolean>wartość, która wskazuje, czy lokalny strony połączenia używane przez to <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> został uwierzytelniony jako serwer.</xref:System.Boolean>"
  remarks: "Jeśli uwierzytelnianie nie powiodło się lub nie zostało przeprowadzone, ta właściwość zwraca `false`.       Na potrzeby uwierzytelniania, co serwer, należy wywołać <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>lub <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metody.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_0_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_0_1.cpp)]"
  syntax:
    content: public override bool IsServer { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli lokalny punkt końcowy został pomyślnie uwierzytelniony jako po stronie serwera uwierzytelnionego połączenia; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.IsServer*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.IsSigned
  id: IsSigned
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: IsSigned
  nameWithType: NegotiateStream.IsSigned
  fullName: System.Net.Security.NegotiateStream.IsSigned
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Pobiera <xref:System.Boolean>wartość, która wskazuje, czy dane wysyłane przy użyciu tego strumienia jest podpisany.</xref:System.Boolean>"
  remarks: "Podpisywanie danych zapewnia ochronę integralności danych. to znaczy pomaga odbiorcy określić, czy dane została naruszona przesyłane."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_13_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_13_1.cpp)]"
  syntax:
    content: public override bool IsSigned { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli dane podpisu przed przesyłanych; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.IsSigned*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Length
  id: Length
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Length
  nameWithType: NegotiateStream.Length
  fullName: System.Net.Security.NegotiateStream.Length
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Pobiera długość strumienia podstawowego."
  remarks: "Ta właściwość zwraca wartość zwrócona przez wywołanie <xref:System.IO.Stream.Length%2A>Właściwość źródłowego strumienia.</xref:System.IO.Stream.Length%2A> Jeśli nie można wyszukać zasadniczy strumień, ta właściwość zazwyczaj spowoduje zgłoszenie wyjątku. Typ środowiska wykonawczego zasadniczy strumień określa typu run-time wyjątku, który jest generowany."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_9_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_9_1.cpp)]"
  syntax:
    content: public override long Length { get; }
    return:
      type: System.Int64
      description: "A <xref:System.Int64>, który określa długość strumienia podstawowego.</xref:System.Int64>"
  overload: System.Net.Security.NegotiateStream.Length*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Pobieranie wartości tej właściwości nie jest obsługiwane, gdy strumień podstawowy <xref href=&quot;System.Net.Sockets.NetworkStream&quot;> </xref>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Position
  id: Position
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Position
  nameWithType: NegotiateStream.Position
  fullName: System.Net.Security.NegotiateStream.Position
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Pobiera lub ustawia bieżącą pozycję w strumieniu podstawowym."
  remarks: "Ta właściwość zwraca wartość zwrócona przez wywołanie <xref:System.IO.Stream.Position%2A>Właściwość źródłowego strumienia.</xref:System.IO.Stream.Position%2A> Jeśli nie można wyszukać zasadniczy strumień, ta właściwość zazwyczaj spowoduje zgłoszenie wyjątku. Typ środowiska wykonawczego zasadniczy strumień określa typu run-time wyjątku, który jest generowany."
  syntax:
    content: public override long Position { get; set; }
    return:
      type: System.Int64
      description: "A <xref:System.Int64>, który określa bieżącą pozycję w strumieniu podstawowym.</xref:System.Int64>"
  overload: System.Net.Security.NegotiateStream.Position*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Setting this property is not supported.  \n  \n \\- or -  \n  \n Getting the value of this property is not supported when the underlying stream is a <xref href=\"System.Net.Sockets.NetworkStream\"></xref>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Read(Byte[],Int32,Int32)
  nameWithType: NegotiateStream.Read(Byte[],Int32,Int32)
  fullName: System.Net.Security.NegotiateStream.Read(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Odczytuje dane z tego strumienia i zapisuje go w określonej tablicy."
  remarks: "Metoda odczytuje maksymalnie `count` bajtów z bieżącego strumienia i przechowuje je w `buffer` począwszy od `offset`.       Nie można wywołać tej metody, dopóki pomyślnym uwierzytelnieniu. W celu uwierzytelnienia wywoływanie jednego z <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, lub <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metody.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       Aby wykonać tę operację asynchronicznie, użyj <xref:System.Net.Security.NegotiateStream.BeginRead%2A>metody.</xref:System.Net.Security.NegotiateStream.BeginRead%2A>"
  example:
  - "The following code example demonstrates reading from a <xref:System.Net.Security.NegotiateStream>.  \n  \n [!code-cs[NclNegoSyncServer#1](~/add/codesnippet/csharp/e81792fe-7974-494d-8076-_1.cs)]\n [!code-cpp[NclNegoSyncServer#1](~/add/codesnippet/cpp/e81792fe-7974-494d-8076-_1.cpp)]"
  syntax:
    content: public override int Read (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "A <xref:System.Byte>odczytać tablicy, która odbiera bajtów ze strumienia.</xref:System.Byte>"
    - id: offset
      type: System.Int32
      description: "A <xref:System.Int32>zawierający liczony od zera lokalizacja w `buffer` rozpoczęcia przechowywania danych przeczytanie tego strumienia.</xref:System.Int32>"
    - id: count
      type: System.Int32
      description: "A <xref:System.Int32>zawierający maksymalną liczbę bajtów do odczytania ze strumienia.</xref:System.Int32>"
    return:
      type: System.Int32
      description: "A <xref:System.Int32>wartość, która określa liczbę bajtów do odczytu strumienia podstawowego.</xref:System.Int32> Jeśli nie ma więcej danych do odczytu, zwraca wartość 0."
  overload: System.Net.Security.NegotiateStream.Read*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Operacja odczytu nie powiodła się."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Nie przeprowadzono uwierzytelniania."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Operacja odczytu jest już w toku."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.ReadTimeout
  id: ReadTimeout
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: ReadTimeout
  nameWithType: NegotiateStream.ReadTimeout
  fullName: System.Net.Security.NegotiateStream.ReadTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Pobiera lub ustawia czas operacji odczytu blokuje oczekiwanie na dane."
  remarks: "Ta właściwość zwraca wartość zwrócona przez wywołanie <xref:System.IO.Stream.ReadTimeout%2A>Właściwość źródłowego strumienia.</xref:System.IO.Stream.ReadTimeout%2A> W przypadku ustawienia tej właściwości <xref:System.IO.Stream.ReadTimeout%2A>wartość w podstawowym strumieniu jest równa określonej wartości.</xref:System.IO.Stream.ReadTimeout%2A>       Jeśli strumień podstawowy <xref:System.Net.Sockets.NetworkStream>, ReadTimeout jest (w milisekundach) i ma ustawioną wartość <xref:System.Threading.Timeout.Infinite>Domyślnie, który odczytywać operacji, czy nie upłynął limit czasu.</xref:System.Threading.Timeout.Infinite> </xref:System.Net.Sockets.NetworkStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_12_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_12_1.cpp)]"
  syntax:
    content: public override int ReadTimeout { get; set; }
    return:
      type: System.Int32
      description: "A <xref:System.Int32>, który określa czas, jaki upłynie przed niepowodzenia operacji odczytu.</xref:System.Int32>"
  overload: System.Net.Security.NegotiateStream.ReadTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.RemoteIdentity
  id: RemoteIdentity
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: RemoteIdentity
  nameWithType: NegotiateStream.RemoteIdentity
  fullName: System.Net.Security.NegotiateStream.RemoteIdentity
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Pobiera informacje o tożsamości strona zdalna udostępniania tego uwierzytelnionego strumienia."
  remarks: "Podczas dostępu do klienta, ta właściwość zwraca <xref:System.Security.Principal.GenericIdentity>zawierające główną nazwę usługi (SPN) serwera i protokołu uwierzytelniania.</xref:System.Security.Principal.GenericIdentity> Podczas dostępu do serwera, ta właściwość zwraca <xref:System.Security.Principal.WindowsIdentity>klienta, który opisuje.</xref:System.Security.Principal.WindowsIdentity> Jeśli <xref:System.Security.Principal.WindowsIdentity>jest niedostępny, informacje o kliencie zwrócony do serwera w <xref:System.Security.Principal.GenericIdentity>.</xref:System.Security.Principal.GenericIdentity> </xref:System.Security.Principal.WindowsIdentity>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoAsyncServer#2](~/add/codesnippet/csharp/p-system.net.security.ne_1_1.cs)]\n [!code-cpp[NclNegoAsyncServer#2](~/add/codesnippet/cpp/p-system.net.security.ne_1_1.cpp)]"
  syntax:
    content: public virtual System.Security.Principal.IIdentity RemoteIdentity { get; }
    return:
      type: System.Security.Principal.IIdentity
      description: "<xref:System.Security.Principal.IIdentity>Obiektu, który opisuje tożsamość zdalnego punktu końcowego.</xref:System.Security.Principal.IIdentity>"
  overload: System.Net.Security.NegotiateStream.RemoteIdentity*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Uwierzytelnianie nie powiodło się lub nie przeprowadzono."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Seek(Int64,SeekOrigin)
  nameWithType: NegotiateStream.Seek(Int64,SeekOrigin)
  fullName: System.Net.Security.NegotiateStream.Seek(Int64,SeekOrigin)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Zgłasza wyjątek <xref:System.NotSupportedException>.</xref:System.NotSupportedException>"
  remarks: "Nie wywołuj tej metody. Jest dziedziczone, ale nie jest obsługiwana przez <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream>"
  syntax:
    content: public override long Seek (long offset, System.IO.SeekOrigin origin);
    parameters:
    - id: offset
      type: System.Int64
      description: "Ta wartość jest ignorowana."
    - id: origin
      type: System.IO.SeekOrigin
      description: "Ta wartość jest ignorowana."
    return:
      type: System.Int64
      description: "Zawsze zwraca <xref:System.NotSupportedException>.</xref:System.NotSupportedException>"
  overload: System.Net.Security.NegotiateStream.Seek*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Wyszukiwanie nie jest obsługiwana w <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: SetLength(Int64)
  nameWithType: NegotiateStream.SetLength(Int64)
  fullName: System.Net.Security.NegotiateStream.SetLength(Int64)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Ustawia długość strumienia podstawowego."
  syntax:
    content: public override void SetLength (long value);
    parameters:
    - id: value
      type: System.Int64
      description: "<xref:System.Int64>Wartość określająca długość strumienia.</xref:System.Int64>"
  overload: System.Net.Security.NegotiateStream.SetLength*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Write(Byte[],Int32,Int32)
  nameWithType: NegotiateStream.Write(Byte[],Int32,Int32)
  fullName: System.Net.Security.NegotiateStream.Write(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Zapis do określonej liczby miejsc <xref:System.Byte>s do źródłowego strumienia, używając określonego bufora i przesunięcie.</xref:System.Byte>"
  remarks: "Po włączeniu szyfrowania, podpisywania, lub szyfrowania i podpisywania, ta metoda odczytuje dane z bufora, są szyfrowane, znaki, lub szyfruje podpisuje go i przesyła je przy użyciu podstawowego strumienia. Jeśli żadne dodatkowe zabezpieczenia usług, takich jak podpisywania lub szyfrowania danych są używane, ta metoda wywołuje <xref:System.IO.Stream.Write%2A>w strumieniu podstawowym.</xref:System.IO.Stream.Write%2A>       Ta metoda umożliwia blokowanie podczas operacji zapisu. Aby zapobiec blokowanie zakończy działanie, należy użyć metody zapisu.       Nie można wywołać tej metody, dopóki pomyślnym uwierzytelnieniu. W celu uwierzytelnienia wywoływanie jednego z <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, lub <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metody.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       <xref:System.Net.Security.NegotiateStream>Klasa nie obsługuje wiele równoczesnych zapisu.</xref:System.Net.Security.NegotiateStream> Jeśli podjęto próbę uruchomienia operacji zapisu, gdy inna operacja zapisu jest już wykonywane na ten sam strumień <xref:System.NotSupportedException>zostanie wygenerowany wyjątek.</xref:System.NotSupportedException>"
  example:
  - "The following code example demonstrates writing to a <xref:System.Net.Security.NegotiateStream>.  \n  \n [!code-cs[NclNegoSyncClient#4](~/add/codesnippet/csharp/1536316b-fecf-4b4a-b33a-_1.cs)]\n [!code-cpp[NclNegoSyncClient#4](~/add/codesnippet/cpp/1536316b-fecf-4b4a-b33a-_1.cpp)]"
  syntax:
    content: public override void Write (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "A <xref:System.Byte>Tablica, która dostarcza zapisanych w strumieniu bajtów.</xref:System.Byte>"
    - id: offset
      type: System.Int32
      description: "<xref:System.Int32>Zawierający liczony od zera lokalizacja w `buffer` w której ma zostać rozpoczęte odczytywanie bajtów do zapisania w strumieniu.</xref:System.Int32>"
    - id: count
      type: System.Int32
      description: "A <xref:System.Int32>zawierającą liczbę bajtów do odczytania ze `buffer`.</xref:System.Int32>"
  overload: System.Net.Security.NegotiateStream.Write*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset is less than 0</code>.  \n  \n \\- or -  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n \\- or -  \n  \n <code>offset</code> plus count is greater than the length of <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The write operation failed.  \n  \n \\- or -  \n  \n Encryption is in use, but the data could not be encrypted."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Istnieje już w toku operacji zapisu."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Ten obiekt został zamknięty."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Nie przeprowadzono uwierzytelniania."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.WriteTimeout
  id: WriteTimeout
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: WriteTimeout
  nameWithType: NegotiateStream.WriteTimeout
  fullName: System.Net.Security.NegotiateStream.WriteTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Pobiera lub ustawia czas operacji zapisu blokuje oczekiwanie na dane."
  remarks: "Ta właściwość zwraca wartość zwrócona przez wywołanie <xref:System.IO.Stream.WriteTimeout%2A>Właściwość źródłowego strumienia.</xref:System.IO.Stream.WriteTimeout%2A> Operacje na zestawie określona wartość Określa <xref:System.IO.Stream.WriteTimeout%2A>wartość w strumieniu podstawowym.</xref:System.IO.Stream.WriteTimeout%2A>       Jeśli strumień podstawowy <xref:System.Net.Sockets.NetworkStream>, WriteTimeout jest (w milisekundach) i ma ustawioną wartość <xref:System.Threading.Timeout.Infinite>Domyślnie, które zapisują operacji, czy nie upłynął limit czasu.</xref:System.Threading.Timeout.Infinite> </xref:System.Net.Sockets.NetworkStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_11_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_11_1.cpp)]"
  syntax:
    content: public override int WriteTimeout { get; set; }
    return:
      type: System.Int32
      description: "A <xref:System.Int32>, który określa czas, jaki upłynie przed operacja zapisu nie powiedzie się.</xref:System.Int32>"
  overload: System.Net.Security.NegotiateStream.WriteTimeout*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: System.Net.Security.AuthenticatedStream
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Authentication.AuthenticationException
  parent: System.Security.Authentication
  isExternal: false
  name: AuthenticationException
  nameWithType: AuthenticationException
  fullName: System.Security.Authentication.AuthenticationException
- uid: System.Security.Authentication.InvalidCredentialException
  parent: System.Security.Authentication
  isExternal: false
  name: InvalidCredentialException
  nameWithType: InvalidCredentialException
  fullName: System.Security.Authentication.InvalidCredentialException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: NegotiateStream(Stream)
  nameWithType: NegotiateStream.NegotiateStream(Stream)
  fullName: System.Net.Security.NegotiateStream.NegotiateStream(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: NegotiateStream(Stream,Boolean)
  nameWithType: NegotiateStream.NegotiateStream(Stream,Boolean)
  fullName: System.Net.Security.NegotiateStream.NegotiateStream(Stream,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient()
  nameWithType: NegotiateStream.AuthenticateAsClient()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient()
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient(NetworkCredential,String)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,String)
- uid: System.Net.NetworkCredential
  parent: System.Net
  isExternal: true
  name: NetworkCredential
  nameWithType: NetworkCredential
  fullName: System.Net.NetworkCredential
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
- uid: System.Security.Authentication.ExtendedProtection.ChannelBinding
  parent: System.Security.Authentication.ExtendedProtection
  isExternal: true
  name: ChannelBinding
  nameWithType: ChannelBinding
  fullName: System.Security.Authentication.ExtendedProtection.ChannelBinding
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.ProtectionLevel
  parent: System.Net.Security
  isExternal: false
  name: ProtectionLevel
  nameWithType: ProtectionLevel
  fullName: System.Net.Security.ProtectionLevel
- uid: System.Security.Principal.TokenImpersonationLevel
  parent: System.Security.Principal
  isExternal: true
  name: TokenImpersonationLevel
  nameWithType: TokenImpersonationLevel
  fullName: System.Security.Principal.TokenImpersonationLevel
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync()
  nameWithType: NegotiateStream.AuthenticateAsClientAsync()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync()
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync(NetworkCredential,String)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServer()
  nameWithType: NegotiateStream.AuthenticateAsServer()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer()
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServer(ExtendedProtectionPolicy)
  nameWithType: NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)
- uid: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
  parent: System.Security.Authentication.ExtendedProtection
  isExternal: false
  name: ExtendedProtectionPolicy
  nameWithType: ExtendedProtectionPolicy
  fullName: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServerAsync()
  nameWithType: NegotiateStream.AuthenticateAsServerAsync()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync()
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient(AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsServer(AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.CanRead
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanRead
  nameWithType: NegotiateStream.CanRead
  fullName: System.Net.Security.NegotiateStream.CanRead
- uid: System.Net.Security.NegotiateStream.CanSeek
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanSeek
  nameWithType: NegotiateStream.CanSeek
  fullName: System.Net.Security.NegotiateStream.CanSeek
- uid: System.Net.Security.NegotiateStream.CanTimeout
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanTimeout
  nameWithType: NegotiateStream.CanTimeout
  fullName: System.Net.Security.NegotiateStream.CanTimeout
- uid: System.Net.Security.NegotiateStream.CanWrite
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanWrite
  nameWithType: NegotiateStream.CanWrite
  fullName: System.Net.Security.NegotiateStream.CanWrite
- uid: System.Net.Security.NegotiateStream.Dispose(System.Boolean)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: NegotiateStream.Dispose(Boolean)
  fullName: System.Net.Security.NegotiateStream.Dispose(Boolean)
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndAuthenticateAsClient(IAsyncResult)
  nameWithType: NegotiateStream.EndAuthenticateAsClient(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndAuthenticateAsClient(IAsyncResult)
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndAuthenticateAsServer(IAsyncResult)
  nameWithType: NegotiateStream.EndAuthenticateAsServer(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndAuthenticateAsServer(IAsyncResult)
- uid: System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndRead(IAsyncResult)
  nameWithType: NegotiateStream.EndRead(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndRead(IAsyncResult)
- uid: System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndWrite(IAsyncResult)
  nameWithType: NegotiateStream.EndWrite(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndWrite(IAsyncResult)
- uid: System.Net.Security.NegotiateStream.Flush
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Flush()
  nameWithType: NegotiateStream.Flush()
  fullName: System.Net.Security.NegotiateStream.Flush()
- uid: System.Net.Security.NegotiateStream.ImpersonationLevel
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: ImpersonationLevel
  nameWithType: NegotiateStream.ImpersonationLevel
  fullName: System.Net.Security.NegotiateStream.ImpersonationLevel
- uid: System.Net.Security.NegotiateStream.IsAuthenticated
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsAuthenticated
  nameWithType: NegotiateStream.IsAuthenticated
  fullName: System.Net.Security.NegotiateStream.IsAuthenticated
- uid: System.Net.Security.NegotiateStream.IsEncrypted
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsEncrypted
  nameWithType: NegotiateStream.IsEncrypted
  fullName: System.Net.Security.NegotiateStream.IsEncrypted
- uid: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsMutuallyAuthenticated
  nameWithType: NegotiateStream.IsMutuallyAuthenticated
  fullName: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
- uid: System.Net.Security.NegotiateStream.IsServer
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsServer
  nameWithType: NegotiateStream.IsServer
  fullName: System.Net.Security.NegotiateStream.IsServer
- uid: System.Net.Security.NegotiateStream.IsSigned
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsSigned
  nameWithType: NegotiateStream.IsSigned
  fullName: System.Net.Security.NegotiateStream.IsSigned
- uid: System.Net.Security.NegotiateStream.Length
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Length
  nameWithType: NegotiateStream.Length
  fullName: System.Net.Security.NegotiateStream.Length
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Net.Security.NegotiateStream.Position
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Position
  nameWithType: NegotiateStream.Position
  fullName: System.Net.Security.NegotiateStream.Position
- uid: System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Read(Byte[],Int32,Int32)
  nameWithType: NegotiateStream.Read(Byte[],Int32,Int32)
  fullName: System.Net.Security.NegotiateStream.Read(Byte[],Int32,Int32)
- uid: System.Net.Security.NegotiateStream.ReadTimeout
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: ReadTimeout
  nameWithType: NegotiateStream.ReadTimeout
  fullName: System.Net.Security.NegotiateStream.ReadTimeout
- uid: System.Net.Security.NegotiateStream.RemoteIdentity
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: RemoteIdentity
  nameWithType: NegotiateStream.RemoteIdentity
  fullName: System.Net.Security.NegotiateStream.RemoteIdentity
- uid: System.Security.Principal.IIdentity
  parent: System.Security.Principal
  isExternal: true
  name: IIdentity
  nameWithType: IIdentity
  fullName: System.Security.Principal.IIdentity
- uid: System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Seek(Int64,SeekOrigin)
  nameWithType: NegotiateStream.Seek(Int64,SeekOrigin)
  fullName: System.Net.Security.NegotiateStream.Seek(Int64,SeekOrigin)
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: true
  name: SeekOrigin
  nameWithType: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.Net.Security.NegotiateStream.SetLength(System.Int64)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: SetLength(Int64)
  nameWithType: NegotiateStream.SetLength(Int64)
  fullName: System.Net.Security.NegotiateStream.SetLength(Int64)
- uid: System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Write(Byte[],Int32,Int32)
  nameWithType: NegotiateStream.Write(Byte[],Int32,Int32)
  fullName: System.Net.Security.NegotiateStream.Write(Byte[],Int32,Int32)
- uid: System.Net.Security.NegotiateStream.WriteTimeout
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: WriteTimeout
  nameWithType: NegotiateStream.WriteTimeout
  fullName: System.Net.Security.NegotiateStream.WriteTimeout
- uid: System.Net.Security.NegotiateStream.#ctor*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: NegotiateStream
  nameWithType: NegotiateStream.NegotiateStream
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient
  nameWithType: NegotiateStream.AuthenticateAsClient
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync
  nameWithType: NegotiateStream.AuthenticateAsClientAsync
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServer
  nameWithType: NegotiateStream.AuthenticateAsServer
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServerAsync
  nameWithType: NegotiateStream.AuthenticateAsServerAsync
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient
  nameWithType: NegotiateStream.BeginAuthenticateAsClient
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsServer
  nameWithType: NegotiateStream.BeginAuthenticateAsServer
- uid: System.Net.Security.NegotiateStream.BeginRead*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginRead
  nameWithType: NegotiateStream.BeginRead
- uid: System.Net.Security.NegotiateStream.BeginWrite*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginWrite
  nameWithType: NegotiateStream.BeginWrite
- uid: System.Net.Security.NegotiateStream.CanRead*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanRead
  nameWithType: NegotiateStream.CanRead
- uid: System.Net.Security.NegotiateStream.CanSeek*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanSeek
  nameWithType: NegotiateStream.CanSeek
- uid: System.Net.Security.NegotiateStream.CanTimeout*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanTimeout
  nameWithType: NegotiateStream.CanTimeout
- uid: System.Net.Security.NegotiateStream.CanWrite*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanWrite
  nameWithType: NegotiateStream.CanWrite
- uid: System.Net.Security.NegotiateStream.Dispose*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Dispose
  nameWithType: NegotiateStream.Dispose
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsClient*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndAuthenticateAsClient
  nameWithType: NegotiateStream.EndAuthenticateAsClient
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsServer*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndAuthenticateAsServer
  nameWithType: NegotiateStream.EndAuthenticateAsServer
- uid: System.Net.Security.NegotiateStream.EndRead*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndRead
  nameWithType: NegotiateStream.EndRead
- uid: System.Net.Security.NegotiateStream.EndWrite*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndWrite
  nameWithType: NegotiateStream.EndWrite
- uid: System.Net.Security.NegotiateStream.Flush*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Flush
  nameWithType: NegotiateStream.Flush
- uid: System.Net.Security.NegotiateStream.ImpersonationLevel*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: ImpersonationLevel
  nameWithType: NegotiateStream.ImpersonationLevel
- uid: System.Net.Security.NegotiateStream.IsAuthenticated*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsAuthenticated
  nameWithType: NegotiateStream.IsAuthenticated
- uid: System.Net.Security.NegotiateStream.IsEncrypted*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsEncrypted
  nameWithType: NegotiateStream.IsEncrypted
- uid: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsMutuallyAuthenticated
  nameWithType: NegotiateStream.IsMutuallyAuthenticated
- uid: System.Net.Security.NegotiateStream.IsServer*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsServer
  nameWithType: NegotiateStream.IsServer
- uid: System.Net.Security.NegotiateStream.IsSigned*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsSigned
  nameWithType: NegotiateStream.IsSigned
- uid: System.Net.Security.NegotiateStream.Length*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Length
  nameWithType: NegotiateStream.Length
- uid: System.Net.Security.NegotiateStream.Position*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Position
  nameWithType: NegotiateStream.Position
- uid: System.Net.Security.NegotiateStream.Read*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Read
  nameWithType: NegotiateStream.Read
- uid: System.Net.Security.NegotiateStream.ReadTimeout*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: ReadTimeout
  nameWithType: NegotiateStream.ReadTimeout
- uid: System.Net.Security.NegotiateStream.RemoteIdentity*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: RemoteIdentity
  nameWithType: NegotiateStream.RemoteIdentity
- uid: System.Net.Security.NegotiateStream.Seek*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Seek
  nameWithType: NegotiateStream.Seek
- uid: System.Net.Security.NegotiateStream.SetLength*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: SetLength
  nameWithType: NegotiateStream.SetLength
- uid: System.Net.Security.NegotiateStream.Write*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Write
  nameWithType: NegotiateStream.Write
- uid: System.Net.Security.NegotiateStream.WriteTimeout*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: WriteTimeout
  nameWithType: NegotiateStream.WriteTimeout
