### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.ExecutedRoutedEventArgs
  id: ExecutedRoutedEventArgs
  children:
  - System.Windows.Input.ExecutedRoutedEventArgs.Command
  - System.Windows.Input.ExecutedRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  - System.Windows.Input.ExecutedRoutedEventArgs.Parameter
  langs:
  - csharp
  name: ExecutedRoutedEventArgs
  nameWithType: ExecutedRoutedEventArgs
  fullName: System.Windows.Input.ExecutedRoutedEventArgs
  type: Class
  summary: "Udostępnia dane dla <xref:System.Windows.Input.CommandManager.Executed>i <xref:System.Windows.Input.CommandManager.PreviewExecuted>zdarzenia rozsyłane.</xref:System.Windows.Input.CommandManager.PreviewExecuted> </xref:System.Windows.Input.CommandManager.Executed>"
  remarks: "<xref:System.Windows.Input.ExecutedRoutedEventHandler>reprezentuje metodę, która implementuje logiki polecenia <xref:System.Windows.Input.RoutedCommand>.</xref:System.Windows.Input.RoutedCommand></xref:System.Windows.Input.ExecutedRoutedEventHandler>  Oddzielanie logika implementacji polecenia umożliwia polecenie do wywołania z różnych źródeł i typów i umożliwia centralizacji logiki polecenia.       Ta klasa danych zdarzenia jest również używana i <xref:System.Windows.Input.CommandManager.Executed?displayProperty=fullName> <xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=fullName>.</xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=fullName> </xref:System.Windows.Input.CommandManager.Executed?displayProperty=fullName> Ale obsługi najbardziej praktyczne będzie obsługiwać <xref:System.Windows.Input.CommandBinding.Executed>zdarzenia z określonego <xref:System.Windows.Input.CommandBinding>, zamiast niż działania na <xref:System.Windows.Input.CommandManager>poziom.</xref:System.Windows.Input.CommandManager> </xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding.Executed>       Aby uzyskać więcej informacji na wydawanie poleceń, zobacz [droższe omówienie](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example creates an <xref:System.Windows.Input.ExecutedRoutedEventHandler> that opens a <xref:System.Windows.MessageBox> when the command is executed.  \n  \n [!code-cs[commandwithhandler#CommandHandlerExecutedHandler](~/add/codesnippet/csharp/commandWithHandler/Window1.xaml.cs#commandhandlerexecutedhandler)]\n [!code-vb[commandwithhandler#CommandHandlerExecutedHandler](~/add/codesnippet/visualbasic/commandWithHandler/Window1.xaml.vb#commandhandlerexecutedhandler)]"
  syntax:
    content: 'public sealed class ExecutedRoutedEventArgs : System.Windows.RoutedEventArgs'
  inheritance:
  - System.EventArgs
  - System.Windows.RoutedEventArgs
  implements: []
  inheritedMembers:
  - System.Windows.RoutedEventArgs.Handled
  - System.Windows.RoutedEventArgs.OnSetSource(System.Object)
  - System.Windows.RoutedEventArgs.OriginalSource
  - System.Windows.RoutedEventArgs.RoutedEvent
  - System.Windows.RoutedEventArgs.Source
  platform:
  - net462
- uid: System.Windows.Input.ExecutedRoutedEventArgs.Command
  id: Command
  parent: System.Windows.Input.ExecutedRoutedEventArgs
  langs:
  - csharp
  name: Command
  nameWithType: ExecutedRoutedEventArgs.Command
  fullName: System.Windows.Input.ExecutedRoutedEventArgs.Command
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Pobiera polecenie został wywołany."
  remarks: "Polecenie skojarzone ze zdarzeniem mogą być rzutowane na określonej implementacji <xref:System.Windows.Input.ICommand>, takich jak <xref:System.Windows.Input.RoutedCommand>, jeśli jest znany typ.</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.ICommand>"
  example:
  - "The following example creates an <xref:System.Windows.Input.ExecutedRoutedEventHandler> that handles multiple commands. The handler checks the Command property on the <xref:System.Windows.Input.ExecutedRoutedEventArgs> to determine which method to call.  \n  \n [!code-cs[commandingoverviewsnippets#CommandingOverviewMultipleCmdHander](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewmultiplecmdhander)]\n [!code-vb[commandingoverviewsnippets#CommandingOverviewMultipleCmdHander](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewmultiplecmdhander)]"
  syntax:
    content: public System.Windows.Input.ICommand Command { get; }
    return:
      type: System.Windows.Input.ICommand
      description: "Polecenie skojarzone z tym zdarzeniem."
  overload: System.Windows.Input.ExecutedRoutedEventArgs.Command*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ExecutedRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  id: InvokeEventHandler(System.Delegate,System.Object)
  parent: System.Windows.Input.ExecutedRoutedEventArgs
  langs:
  - csharp
  name: InvokeEventHandler(Delegate,Object)
  nameWithType: ExecutedRoutedEventArgs.InvokeEventHandler(Delegate,Object)
  fullName: System.Windows.Input.ExecutedRoutedEventArgs.InvokeEventHandler(Delegate,Object)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  syntax:
    content: protected override void InvokeEventHandler (Delegate genericHandler, object target);
    parameters:
    - id: genericHandler
      type: System.Delegate
      description: "Do dodania."
    - id: target
      type: System.Object
      description: "Do dodania."
  overload: System.Windows.Input.ExecutedRoutedEventArgs.InvokeEventHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ExecutedRoutedEventArgs.Parameter
  id: Parameter
  parent: System.Windows.Input.ExecutedRoutedEventArgs
  langs:
  - csharp
  name: Parameter
  nameWithType: ExecutedRoutedEventArgs.Parameter
  fullName: System.Windows.Input.ExecutedRoutedEventArgs.Parameter
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Pobiera dane parametru polecenia."
  remarks: "Ta właściwość reprezentuje parametr danych typu ogólnego, który jest definiowana za pomocą określonego polecenia.       Jeśli ten parametr nie jest potrzebny, `null` mogą zostać przekazane.       Zazwyczaj parametr jest używany do przekazywania określonych informacji do polecenia po wykonaniu.  Typ danych jest zdefiniowany przez polecenie."
  example:
  - "The following example creates an <xref:System.Windows.Input.ExecutedRoutedEventHandler> for a custom <xref:System.Windows.Input.RoutedCommand>.  The handler updates a <xref:System.Windows.Controls.TextBox> with the current time and the <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> property of a <xref:System.Windows.Controls.Slider> control that is passed to the handler through the Parameter.  \n  \n [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleExecuted](~/add/codesnippet/visualbasic/invalidaterequerywithdispatchertimer/window1.xaml.vb#invalidatesampleexecuted)]\n [!code-cs[invalidaterequerywithdispatchertimer#InvalidateSampleExecuted](~/add/codesnippet/csharp/InvalidateRequeryWithDispatcherTimer/Window1.xaml.cs#invalidatesampleexecuted)]"
  syntax:
    content: public object Parameter { get; }
    return:
      type: System.Object
      description: "Dane specyficzne dla danego polecenia. Wartość domyślna to <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Input.ExecutedRoutedEventArgs.Parameter*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.RoutedEventArgs
  isExternal: false
  name: System.Windows.RoutedEventArgs
- uid: System.Windows.Input.ExecutedRoutedEventArgs.Command
  parent: System.Windows.Input.ExecutedRoutedEventArgs
  isExternal: false
  name: Command
  nameWithType: ExecutedRoutedEventArgs.Command
  fullName: System.Windows.Input.ExecutedRoutedEventArgs.Command
- uid: System.Windows.Input.ICommand
  parent: System.Windows.Input
  isExternal: true
  name: ICommand
  nameWithType: ICommand
  fullName: System.Windows.Input.ICommand
- uid: System.Windows.Input.ExecutedRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  parent: System.Windows.Input.ExecutedRoutedEventArgs
  isExternal: false
  name: InvokeEventHandler(Delegate,Object)
  nameWithType: ExecutedRoutedEventArgs.InvokeEventHandler(Delegate,Object)
  fullName: System.Windows.Input.ExecutedRoutedEventArgs.InvokeEventHandler(Delegate,Object)
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.ExecutedRoutedEventArgs.Parameter
  parent: System.Windows.Input.ExecutedRoutedEventArgs
  isExternal: false
  name: Parameter
  nameWithType: ExecutedRoutedEventArgs.Parameter
  fullName: System.Windows.Input.ExecutedRoutedEventArgs.Parameter
- uid: System.Windows.Input.ExecutedRoutedEventArgs.Command*
  parent: System.Windows.Input.ExecutedRoutedEventArgs
  isExternal: false
  name: Command
  nameWithType: ExecutedRoutedEventArgs.Command
- uid: System.Windows.Input.ExecutedRoutedEventArgs.InvokeEventHandler*
  parent: System.Windows.Input.ExecutedRoutedEventArgs
  isExternal: false
  name: InvokeEventHandler
  nameWithType: ExecutedRoutedEventArgs.InvokeEventHandler
- uid: System.Windows.Input.ExecutedRoutedEventArgs.Parameter*
  parent: System.Windows.Input.ExecutedRoutedEventArgs
  isExternal: false
  name: Parameter
  nameWithType: ExecutedRoutedEventArgs.Parameter
