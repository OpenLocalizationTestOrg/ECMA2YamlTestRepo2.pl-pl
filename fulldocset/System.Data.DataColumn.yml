### YamlMime:ManagedReference
items:
- uid: System.Data.DataColumn
  id: DataColumn
  children:
  - System.Data.DataColumn.#ctor
  - System.Data.DataColumn.#ctor(System.String)
  - System.Data.DataColumn.#ctor(System.String,System.Type)
  - System.Data.DataColumn.#ctor(System.String,System.Type,System.String)
  - System.Data.DataColumn.#ctor(System.String,System.Type,System.String,System.Data.MappingType)
  - System.Data.DataColumn.AllowDBNull
  - System.Data.DataColumn.AutoIncrement
  - System.Data.DataColumn.AutoIncrementSeed
  - System.Data.DataColumn.AutoIncrementStep
  - System.Data.DataColumn.Caption
  - System.Data.DataColumn.CheckNotAllowNull
  - System.Data.DataColumn.CheckUnique
  - System.Data.DataColumn.ColumnMapping
  - System.Data.DataColumn.ColumnName
  - System.Data.DataColumn.DataType
  - System.Data.DataColumn.DateTimeMode
  - System.Data.DataColumn.DefaultValue
  - System.Data.DataColumn.Expression
  - System.Data.DataColumn.ExtendedProperties
  - System.Data.DataColumn.MaxLength
  - System.Data.DataColumn.Namespace
  - System.Data.DataColumn.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  - System.Data.DataColumn.Ordinal
  - System.Data.DataColumn.Prefix
  - System.Data.DataColumn.RaisePropertyChanging(System.String)
  - System.Data.DataColumn.ReadOnly
  - System.Data.DataColumn.SetOrdinal(System.Int32)
  - System.Data.DataColumn.Table
  - System.Data.DataColumn.ToString
  - System.Data.DataColumn.Unique
  langs:
  - csharp
  name: DataColumn
  nameWithType: DataColumn
  fullName: System.Data.DataColumn
  type: Class
  summary: "Reprezentuje schemat kolumny <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "Element DataColumn jest podstawowym blokiem tworzenia schematu <xref:System.Data.DataTable>.</xref:System.Data.DataTable> Tworzenie schematu, dodając co najmniej jeden obiekt DataColumn do <xref:System.Data.DataColumnCollection>.</xref:System.Data.DataColumnCollection> Aby uzyskać więcej informacji, zobacz [Dodawanie kolumn do DataTable](~/add/includes/ajax-current-ext-md.md).       Każdy element DataColumn ma <xref:System.Data.DataColumn.DataType%2A>zawiera właściwość, która określa typ danych elementu DataColumn.</xref:System.Data.DataColumn.DataType%2A> Na przykład można ograniczyć typ danych liczb całkowitych, ciągi lub miejsc dziesiętnych. Ponieważ danych, który jest zawarty w <xref:System.Data.DataTable>zwykle scalonego wrócić do oryginalnego źródła danych muszą być zgodne typy danych do tych w źródle danych.</xref:System.Data.DataTable> Aby uzyskać więcej informacji, zobacz [mapowanie typu danych w ADO.NET](~/add/includes/ajax-current-ext-md.md).       Właściwości, takie jak <xref:System.Data.DataColumn.AllowDBNull%2A>, <xref:System.Data.DataColumn.Unique%2A>, i <xref:System.Data.DataColumn.ReadOnly%2A>put ograniczenia dotyczące wejścia i aktualizowanie danych, co pomaga zagwarantować spójność danych.</xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> Można również użyć <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, i <xref:System.Data.DataColumn.AutoIncrementStep%2A>Właściwości, aby kontrolować danych automatyczne generowanie.</xref:System.Data.DataColumn.AutoIncrementStep%2A> </xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrement%2A> Aby uzyskać więcej informacji na temat <xref:System.Data.DataColumn.AutoIncrement%2A>kolumn, zobacz [Tworzenie kolumny typu AutoIncrement](~/add/includes/ajax-current-ext-md.md).</xref:System.Data.DataColumn.AutoIncrement%2A> Aby uzyskać więcej informacji, zobacz [Definiowanie kluczy podstawowych](~/add/includes/ajax-current-ext-md.md).       Można również upewnić się, że wartości w kolumnie danych są unikatowe, tworząc <xref:System.Data.UniqueConstraint>i dodać go do <xref:System.Data.ConstraintCollection>z <xref:System.Data.DataTable>do której należy element DataColumn.</xref:System.Data.DataTable> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint> Aby uzyskać więcej informacji, zobacz [ograniczenia DataTable](~/add/includes/ajax-current-ext-md.md).       Aby utworzyć relacji między obiektami DataColumn, Utwórz <xref:System.Data.DataRelation>obiekt i dodaj go do <xref:System.Data.DataRelationCollection> <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRelationCollection> </xref:System.Data.DataRelation>       Można użyć <xref:System.Data.DataColumn.Expression%2A>Właściwości obiektu DataColumn do obliczania wartości w kolumnie lub Utwórz kolumnę agregacji.</xref:System.Data.DataColumn.Expression%2A> Aby uzyskać więcej informacji, zobacz [Tworzenie kolumn wyrażeń](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example creates a <xref:System.Data.DataTable> with several DataColumn objects.  \n  \n [!code-cs[Classic WebData DataColumn Example#1](~/add/codesnippet/csharp/t-system.data.datacolumn_1.cs)]\n [!code-vb[Classic WebData DataColumn Example#1](~/add/codesnippet/visualbasic/t-system.data.datacolumn_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultProperty("ColumnName")]

      [System.ComponentModel.DesignTimeVisible(false)]

      [System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DataColumnEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ComponentModel.ToolboxItem(false)]

      public class DataColumn : System.ComponentModel.MarshalByValueComponent
  inheritance:
  - System.Object
  - System.ComponentModel.MarshalByValueComponent
  implements: []
  inheritedMembers:
  - System.ComponentModel.MarshalByValueComponent.Container
  - System.ComponentModel.MarshalByValueComponent.DesignMode
  - System.ComponentModel.MarshalByValueComponent.Dispose
  - System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)
  - System.ComponentModel.MarshalByValueComponent.Disposed
  - System.ComponentModel.MarshalByValueComponent.Events
  - System.ComponentModel.MarshalByValueComponent.GetService(System.Type)
  - System.ComponentModel.MarshalByValueComponent.Site
  platform:
  - net462
- uid: System.Data.DataColumn.#ctor
  id: '#ctor'
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DataColumn()
  nameWithType: DataColumn.DataColumn()
  fullName: System.Data.DataColumn.DataColumn()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Data.DataColumn&quot;> </xref> klasy jako typu string."
  remarks: "Podczas tworzenia <xref:System.Data.DataColumn>obiektu nie ma domyślnego <xref:System.Data.DataColumn.ColumnName%2A>lub <xref:System.Data.DataColumn.Caption%2A>.</xref:System.Data.DataColumn.Caption%2A> </xref:System.Data.DataColumn.ColumnName%2A> </xref:System.Data.DataColumn> Podczas dodawania go <xref:System.Data.DataColumnCollection>Domyślna nazwa (&quot;Kolumna1&quot;, &quot;Kolumna2&quot; i tak dalej) zostanie wygenerowany, jeśli nazwa nie został przypisany do <xref:System.Data.DataColumn.ColumnName%2A>.</xref:System.Data.DataColumn.ColumnName%2A> </xref:System.Data.DataColumnCollection>"
  example:
  - "The following example creates a new <xref:System.Data.DataColumn>, sets various properties, and adds it to a <xref:System.Data.DataColumnCollection> for the <xref:System.Data.DataTable> object.  \n  \n [!code-vb[Classic WebData DataColumn.DataColumn Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_13_1.vb)]\n [!code-cs[Classic WebData DataColumn.DataColumn Example#1](~/add/codesnippet/csharp/m-system.data.datacolumn_13_1.cs)]"
  syntax:
    content: public DataColumn ();
    parameters: []
  overload: System.Data.DataColumn.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DataColumn(String)
  nameWithType: DataColumn.DataColumn(String)
  fullName: System.Data.DataColumn.DataColumn(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Data.DataColumn&quot;> </xref> klasy jako typu string, przy użyciu nazwy określonej kolumny."
  remarks: "Domyślnie staje się nazwa specyficzne dla kolumny <xref:System.Data.DataColumn.Caption%2A>wartości właściwości.</xref:System.Data.DataColumn.Caption%2A>"
  example:
  - "The following example creates a new <xref:System.Data.DataColumn> with a specified <xref:System.Data.DataColumn.ColumnName%2A>.  \n  \n [!code-vb[Classic WebData DataColumn.DataColumn1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_6_1.vb)]\n [!code-cs[Classic WebData DataColumn.DataColumn1 Example#1](~/add/codesnippet/csharp/m-system.data.datacolumn_6_1.cs)]"
  syntax:
    content: public DataColumn (string columnName);
    parameters:
    - id: columnName
      type: System.String
      description: "Ciąg, który reprezentuje nazwę kolumny, która ma zostać utworzony. Jeśli ustawiono <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> lub ciąg pusty (&quot;&quot;), podczas dodawania do kolekcji kolumn zostanie określona nazwa domyślna."
  overload: System.Data.DataColumn.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.#ctor(System.String,System.Type)
  id: '#ctor(System.String,System.Type)'
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DataColumn(String,Type)
  nameWithType: DataColumn.DataColumn(String,Type)
  fullName: System.Data.DataColumn.DataColumn(String,Type)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Data.DataColumn&quot;> </xref> przy użyciu określonej kolumny typu danych."
  remarks: ''
  example:
  - "The following example creates a new <xref:System.Data.DataColumn> with a specified <xref:System.Data.DataColumn.ColumnName%2A> and <xref:System.Data.DataColumn.DataType%2A>.  \n  \n [!code-cs[Classic WebData DataColumn.DataColumn2 Example#1](~/add/codesnippet/csharp/m-system.data.datacolumn_15_1.cs)]\n [!code-vb[Classic WebData DataColumn.DataColumn2 Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_15_1.vb)]"
  syntax:
    content: public DataColumn (string columnName, Type dataType);
    parameters:
    - id: columnName
      type: System.String
      description: "Ciąg, który reprezentuje nazwę kolumny, która ma zostać utworzony. Jeśli ustawiono <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> lub ciąg pusty (&quot;&quot;), podczas dodawania do kolekcji kolumn zostanie określona nazwa domyślna."
    - id: dataType
      type: System.Type
      description: "Obsługiwane <xref:System.Data.DataColumn.DataType*>.</xref:System.Data.DataColumn.DataType*>"
  overload: System.Data.DataColumn.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Nie <code> dataType </code> została określona."
  platform:
  - net462
- uid: System.Data.DataColumn.#ctor(System.String,System.Type,System.String)
  id: '#ctor(System.String,System.Type,System.String)'
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DataColumn(String,Type,String)
  nameWithType: DataColumn.DataColumn(String,Type,String)
  fullName: System.Data.DataColumn.DataColumn(String,Type,String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Data.DataColumn&quot;> </xref> przy użyciu określonej nazwy, typu danych i wyrażenie."
  remarks: ''
  example:
  - "The following example creates a computed column.  \n  \n [!code-vb[Classic WebData DataColumn.DataColumn3 Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_8_1.vb)]\n [!code-cs[Classic WebData DataColumn.DataColumn3 Example#1](~/add/codesnippet/csharp/m-system.data.datacolumn_8_1.cs)]"
  syntax:
    content: public DataColumn (string columnName, Type dataType, string expr);
    parameters:
    - id: columnName
      type: System.String
      description: "Ciąg, który reprezentuje nazwę kolumny, która ma zostać utworzony. Jeśli ustawiono <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> lub ciąg pusty (&quot;&quot;), podczas dodawania do kolekcji kolumn zostanie określona nazwa domyślna."
    - id: dataType
      type: System.Type
      description: "Obsługiwane <xref:System.Data.DataColumn.DataType*>.</xref:System.Data.DataColumn.DataType*>"
    - id: expr
      type: System.String
      description: "Wyrażenie użyte do utworzenia tej kolumny. Aby uzyskać więcej informacji, zobacz <xref:System.Data.DataColumn.Expression*>Właściwości.</xref:System.Data.DataColumn.Expression*>"
  overload: System.Data.DataColumn.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Nie <code> dataType </code> została określona."
  platform:
  - net462
- uid: System.Data.DataColumn.#ctor(System.String,System.Type,System.String,System.Data.MappingType)
  id: '#ctor(System.String,System.Type,System.String,System.Data.MappingType)'
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DataColumn(String,Type,String,MappingType)
  nameWithType: DataColumn.DataColumn(String,Type,String,MappingType)
  fullName: System.Data.DataColumn.DataColumn(String,Type,String,MappingType)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Data.DataColumn&quot;> </xref> przy użyciu określonej nazwy typu danych, wyrażenia i wartość, która określa, czy kolumna jest atrybutem."
  remarks: "The `type` argument sets the <xref:System.Data.DataColumn.ColumnMapping%2A> property. The property specifies how a <xref:System.Data.DataColumn> is mapped when a <xref:System.Data.DataSet> is transformed into an XML document. For example, if the column is named \"fName,\" and the value it contains is \"Bob,\" and `type` is set to `MappingType.Attribute`, the XML element would be as follows:  \n  \n \\<Name fName = 'Bob'/>  \n  \n For more information about how columns are mapped to elements or attributes, see the <xref:System.Data.DataColumn.ColumnMapping%2A> property."
  example:
  - "The following example constructs a computed column.  \n  \n [!code-cs[Classic WebData DataColumn.DataColumn4 Example#1](~/add/codesnippet/csharp/0bebed42-c35c-4bf3-9757-_1.cs)]\n [!code-vb[Classic WebData DataColumn.DataColumn4 Example#1](~/add/codesnippet/visualbasic/0bebed42-c35c-4bf3-9757-_1.vb)]"
  syntax:
    content: public DataColumn (string columnName, Type dataType, string expr, System.Data.MappingType type);
    parameters:
    - id: columnName
      type: System.String
      description: "Ciąg, który reprezentuje nazwę kolumny, która ma zostać utworzony. Jeśli ustawiono <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> lub ciąg pusty (&quot;&quot;), podczas dodawania do kolekcji kolumn zostanie określona nazwa domyślna."
    - id: dataType
      type: System.Type
      description: "Obsługiwane <xref:System.Data.DataColumn.DataType*>.</xref:System.Data.DataColumn.DataType*>"
    - id: expr
      type: System.String
      description: "Wyrażenie użyte do utworzenia tej kolumny. Aby uzyskać więcej informacji, zobacz <xref:System.Data.DataColumn.Expression*>Właściwości.</xref:System.Data.DataColumn.Expression*>"
    - id: type
      type: System.Data.MappingType
      description: "Jeden z <xref href=&quot;System.Data.MappingType&quot;> </xref> wartości."
  overload: System.Data.DataColumn.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Nie <code> dataType </code> została określona."
  platform:
  - net462
- uid: System.Data.DataColumn.AllowDBNull
  id: AllowDBNull
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: AllowDBNull
  nameWithType: DataColumn.AllowDBNull
  fullName: System.Data.DataColumn.AllowDBNull
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia wartość wskazującą, czy wartości null są dozwolone w tej kolumnie dla wierszy, które należą do tej tabeli."
  remarks: ''
  example:
  - "The following example creates a new <xref:System.Data.DataColumn> and sets its AllowDBNull property to `true`.  \n  \n [!code-vb[Classic WebData DataColumn.AllowDBNull Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_2_1.vb)]\n [!code-cs[Classic WebData DataColumn.AllowDBNull Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_2_1.cs)]"
  syntax:
    content: public bool AllowDBNull { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli wartości wartości null są dozwolone; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Wartość domyślna to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataColumn.AllowDBNull*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.AutoIncrement
  id: AutoIncrement
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: AutoIncrement
  nameWithType: DataColumn.AutoIncrement
  fullName: System.Data.DataColumn.AutoIncrement
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia wartość wskazującą, czy wartości w kolumnie zwiększają wartość kolumny dla nowych wierszy dodawanych do tabeli."
  remarks: "Jeśli typ tej kolumny nie jest Int16, Int32 lub Int64 gdy ta właściwość jest ustawiona, <xref:System.Data.DataColumn.DataType%2A>Właściwości jest traktowany jak Int32.</xref:System.Data.DataColumn.DataType%2A> Wyjątek jest generowany, jeśli jest to kolumna obliczana. <xref:System.Data.DataColumn.Expression%2A>Właściwość jest ustawiona.</xref:System.Data.DataColumn.Expression%2A> Wartość zwiększany jest używany tylko wtedy, gdy wartość wiersza dla tej kolumny, w przypadku dodania do kolekcji kolumn jest równa wartości domyślnej.       Można utworzyć nowego przy użyciu wiersza <xref:System.Data.DataRow.ItemArray%2A>Właściwość <xref:System.Data.DataRow>klasy i przekazywanie w tablicy wartości.</xref:System.Data.DataRow> </xref:System.Data.DataRow.ItemArray%2A> To potencjalny problem ustawioną kolumnę z jego AutoIncrement `true`, ponieważ jej wartość jest generowana automatycznie. Aby użyć <xref:System.Data.DataRow.ItemArray%2A>Właściwości, miejsce `null` w pozycji w kolumnie w tablicy.</xref:System.Data.DataRow.ItemArray%2A> Aby uzyskać więcej informacji zobacz <xref:System.Data.DataRow.ItemArray%2A>Właściwość <xref:System.Data.DataRow>klasy.</xref:System.Data.DataRow> </xref:System.Data.DataRow.ItemArray%2A>       Jeśli typem kolumny jest <xref:System.Data.SqlTypes.SqlInt16>lub <xref:System.Data.SqlTypes.SqlInt32>, nie będzie działać typu AutoIncrement.</xref:System.Data.SqlTypes.SqlInt32> </xref:System.Data.SqlTypes.SqlInt16> Zamiast tego użyj Int16 lub Int32.       Jeśli typem kolumny jest <xref:System.Data.SqlTypes.SqlInt64>lub <xref:System.Data.SqlTypes.SqlDecimal>, AutoIncrement tylko częściowo będzie działać.</xref:System.Data.SqlTypes.SqlDecimal> </xref:System.Data.SqlTypes.SqlInt64> Zamiast tego użyj Int64 lub Decimal.       Gdy <xref:System.Data.DataColumn.AutoIncrementStep%2A>wartość jest dodawana do bieżącej wartości jest pomijane sprawdzanie przepełnienia.</xref:System.Data.DataColumn.AutoIncrementStep%2A>"
  example:
  - "The following example sets the AutoIncrement, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, and <xref:System.Data.DataColumn.AutoIncrementStep%2A> properties.  \n  \n [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_13_1.vb)]\n [!code-cs[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_13_1.cs)]"
  syntax:
    content: public bool AutoIncrement { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli wartość kolumny zwiększa się automatycznie. w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Wartość domyślna to <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataColumn.AutoIncrement*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Kolumna jest kolumną obliczaną."
  platform:
  - net462
- uid: System.Data.DataColumn.AutoIncrementSeed
  id: AutoIncrementSeed
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: AutoIncrementSeed
  nameWithType: DataColumn.AutoIncrementSeed
  fullName: System.Data.DataColumn.AutoIncrementSeed
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia wartość początkową dla kolumny, która ma jego <xref:System.Data.DataColumn.AutoIncrement*>ustawioną właściwość <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.</xref:System.Data.DataColumn.AutoIncrement*> Wartość domyślna to 0."
  remarks: ''
  example:
  - "The following example sets the <xref:System.Data.DataColumn.AutoIncrement%2A>, AutoIncrementSeed, and <xref:System.Data.DataColumn.AutoIncrementStep%2A> properties.  \n  \n [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_15_1.vb)]\n [!code-cs[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_15_1.cs)]"
  syntax:
    content: public long AutoIncrementSeed { get; set; }
    return:
      type: System.Int64
      description: "Wartość początkową dla <xref:System.Data.DataColumn.AutoIncrement*>funkcji.</xref:System.Data.DataColumn.AutoIncrement*>"
  overload: System.Data.DataColumn.AutoIncrementSeed*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.AutoIncrementStep
  id: AutoIncrementStep
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: AutoIncrementStep
  nameWithType: DataColumn.AutoIncrementStep
  fullName: System.Data.DataColumn.AutoIncrementStep
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia przyrost używany w kolumnie z jego <xref:System.Data.DataColumn.AutoIncrement*>ustawioną właściwość <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.</xref:System.Data.DataColumn.AutoIncrement*>"
  remarks: ''
  example:
  - "The following example sets the <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, and AutoIncrementStep properties.  \n  \n [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_7_1.vb)]\n [!code-cs[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_7_1.cs)]"
  syntax:
    content: public long AutoIncrementStep { get; set; }
    return:
      type: System.Int64
      description: "Liczba, w którym wartość kolumny jest automatycznie zwiększany. Wartość domyślna to 1."
  overload: System.Data.DataColumn.AutoIncrementStep*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Podana wartość jest równa zero."
  platform:
  - net462
- uid: System.Data.DataColumn.Caption
  id: Caption
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Caption
  nameWithType: DataColumn.Caption
  fullName: System.Data.DataColumn.Caption
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia podpis dla kolumny."
  remarks: "Służy do wyświetlenia opisu lub przyjazną nazwę dla <xref:System.Data.DataColumn>.</xref:System.Data.DataColumn> właściwości podpisu"
  example:
  - "The following example creates a new <xref:System.Data.DataTable>. It then adds three <xref:System.Data.DataColumn> objects to a <xref:System.Data.DataColumnCollection> and sets the Caption property for each <xref:System.Data.DataColumn>.  \n  \n [!code-cs[Classic WebData DataColumn.Caption Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_5_1.cs)]\n [!code-vb[Classic WebData DataColumn.Caption Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_5_1.vb)]"
  syntax:
    content: public string Caption { get; set; }
    return:
      type: System.String
      description: "Podpis kolumny. Jeśli nie jest ustawiona, zwraca <xref:System.Data.DataColumn.ColumnName*>wartość.</xref:System.Data.DataColumn.ColumnName*>"
  overload: System.Data.DataColumn.Caption*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.CheckNotAllowNull
  id: CheckNotAllowNull
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: CheckNotAllowNull()
  nameWithType: DataColumn.CheckNotAllowNull()
  fullName: System.Data.DataColumn.CheckNotAllowNull()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ten element członkowski obsługuje infrastrukturę .NET Framework i nie jest przeznaczona do użycia bezpośrednio w kodzie."
  syntax:
    content: protected void CheckNotAllowNull ();
    parameters: []
  overload: System.Data.DataColumn.CheckNotAllowNull*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.CheckUnique
  id: CheckUnique
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: CheckUnique()
  nameWithType: DataColumn.CheckUnique()
  fullName: System.Data.DataColumn.CheckUnique()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ten element członkowski obsługuje infrastrukturę .NET Framework i nie jest przeznaczona do użycia bezpośrednio w kodzie."
  syntax:
    content: protected void CheckUnique ();
    parameters: []
  overload: System.Data.DataColumn.CheckUnique*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.ColumnMapping
  id: ColumnMapping
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: ColumnMapping
  nameWithType: DataColumn.ColumnMapping
  fullName: System.Data.DataColumn.ColumnMapping
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia <xref href=&quot;System.Data.MappingType&quot;> </xref> kolumny."
  remarks: "Określa właściwości ColumnMapping jak <xref:System.Data.DataColumn>jest mapowany po <xref:System.Data.DataSet>jest zapisywany jako dokument XML przy użyciu <xref:System.Data.DataSet.WriteXml%2A>metody.</xref:System.Data.DataSet.WriteXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataColumn>       Na przykład jeśli <xref:System.Data.DataColumn>nosi nazwę &quot;customerID&quot; i jego właściwości ColumnMapping właściwość jest ustawiona na `MappingType.Element`, wartość kolumny utworzy następujący kod XML: ```   <Customers>    <customerID>ALFKI</customerID>   ......    </Customers>    <Orders>    <OrderID>12345</OrderID>    <customerID>ALFKI</customerID>   ......    </Orders>   ``` jednak jeśli tej samej kolumnie jest mapowane na `MappingType.Attribute`, następujący kod XML jest generowany: ```   <Customers customerID=&quot;ALFKI&quot;........more attributes.....>    <Order orderID=&quot;1234&quot;....more attributes..../>    <Order orderID=&quot;1234&quot;....more attributes..../>   ...... More orders for this customer    </Customers>   ``` użyj <xref:System.Data.DataColumn.%23ctor%2A>Konstruktor, który zawiera `type` argument zdefiniuj jak <xref:System.Data.DataColumn>jest mapowany po jego <xref:System.Data.DataSet>jest przekształcana do dokumentu XML.</xref:System.Data.DataSet> </xref:System.Data.DataColumn> </xref:System.Data.DataColumn.%23ctor%2A> </xref:System.Data.DataColumn>       Właściwości ColumnMapping odnosi się do argumentu konstruktora `type`."
  example:
  - "The following example sets the ColumnMapping type property of new <xref:System.Data.DataColumn>.  \n  \n [!code-cs[Classic WebData DataColumn.ColumnMapping Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_9_1.cs)]\n [!code-vb[Classic WebData DataColumn.ColumnMapping Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_9_1.vb)]"
  syntax:
    content: public virtual System.Data.MappingType ColumnMapping { get; set; }
    return:
      type: System.Data.MappingType
      description: "Jeden z <xref href=&quot;System.Data.MappingType&quot;> </xref> wartości."
  overload: System.Data.DataColumn.ColumnMapping*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.ColumnName
  id: ColumnName
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: ColumnName
  nameWithType: DataColumn.ColumnName
  fullName: System.Data.DataColumn.ColumnName
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia nazwę kolumny w <xref href=&quot;System.Data.DataColumnCollection&quot;> </xref>."
  remarks: "Gdy <xref:System.Data.DataColumn>jest tworzony, go nie ma ColumnName wartości.</xref:System.Data.DataColumn> Jednakże, gdy <xref:System.Data.DataColumn>jest dodawany do <xref:System.Data.DataColumnCollection>dla <xref:System.Data.DataTable>obiektu, jest on podawany nazwę domyślną (&quot;Kolumna1&quot;, &quot;Kolumna2&quot; itd.).</xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> </xref:System.Data.DataColumn>       Domyślnie <xref:System.Data.DataColumn.Caption%2A>wartość ma ustawioną wartość ColumnName.</xref:System.Data.DataColumn.Caption%2A>"
  example:
  - "The following examples gets the ColumnName for every column in every table in a <xref:System.Data.DataSet>. The example also shows how to create a <xref:System.Data.DataColumn> with a new ColumnName.  \n  \n [!code-vb[Classic WebData DataColumn.ColumnName Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_8_1.vb)]\n [!code-cs[Classic WebData DataColumn.ColumnName Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_8_1.cs)]"
  syntax:
    content: public string ColumnName { get; set; }
    return:
      type: System.String
      description: "Nazwa kolumny."
  overload: System.Data.DataColumn.ColumnName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Właściwość jest ustawiona na <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> lub ciąg pusty i kolumnę, należy do kolekcji."
  - type: System.Data.DuplicateNameException
    commentId: T:System.Data.DuplicateNameException
    description: "Kolumna o tej samej nazwie już istnieje w kolekcji. Nazwa porównania nie jest uwzględniana wielkość liter."
  platform:
  - net462
- uid: System.Data.DataColumn.DataType
  id: DataType
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DataType
  nameWithType: DataColumn.DataType
  fullName: System.Data.DataColumn.DataType
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia typ danych przechowywanych w kolumnie."
  remarks: "Ustawienie wartości typu danych jest bardzo ważne, aby gwarantujących prawidłowe tworzenie i aktualizowanie danych w źródle danych.       Właściwość DataType obsługuje następujące typy podstawowe danych .NET Framework:- <xref:System.Boolean>- <xref:System.Byte>— <xref:System.Char>— <xref:System.DateTime>— <xref:System.Decimal>— <xref:System.Double>— <xref:System.Guid>— <xref:System.Int16>— <xref:System.Int32>— <xref:System.Int64>— <xref:System.SByte>— <xref:System.Single>— <xref:System.String>— <xref:System.TimeSpan>— <xref:System.UInt16>— <xref:System.UInt32>— <xref:System.UInt64>oraz następującego typu tablicy:- `Byte[]` wyjątek jest generowany, gdy zmiana tej właściwości po kolumnie rozpoczął zapisywanie danych.</xref:System.UInt64> </xref:System.UInt32> </xref:System.UInt16> </xref:System.TimeSpan> </xref:System.String> </xref:System.Single> </xref:System.SByte> </xref:System.Int64> </xref:System.Int32> </xref:System.Int16> </xref:System.Guid> </xref:System.Double> </xref:System.Decimal> </xref:System.DateTime> </xref:System.Char> </xref:System.Byte> </xref:System.Boolean>       Jeśli <xref:System.Data.DataColumn.AutoIncrement%2A>ustawiono `true` przed ustawieniem właściwości typu danych i spróbuj Ustaw typ jakikolwiek inny niż typu integer, zostanie wygenerowany wyjątek.</xref:System.Data.DataColumn.AutoIncrement%2A>      > [!NOTE] > Kolumną zawierającą dane typu `Byte[]` wymaga szczególnego traktowania w niektórych przypadkach, ponieważ w odróżnieniu od podstawowe typy danych .NET Framework jest typem danych odwołania. Jeśli z kolumną zawierającą dane typu `Byte[]` jest używany jako <xref:System.Data.DataTable.PrimaryKey%2A>, lub jako <xref:System.Data.DataView.Sort%2A>lub <xref:System.Data.DataView.RowFilter%2A>klucza dla <xref:System.Data.DataView>, wszelkie zmiany w wartości kolumny muszą obejmować przypisywanie `Byte[]` wartość kolumny do oddzielnie skonkretyzowanym `Byte[]` obiektu.</xref:System.Data.DataView> </xref:System.Data.DataView.RowFilter%2A> </xref:System.Data.DataView.Sort%2A> </xref:System.Data.DataTable.PrimaryKey%2A> To przypisanie jest wymagana do wyzwolenia aktualizacji indeksów wewnętrzny używany przez sortowanie, filtrowanie i operacje klucza podstawowego. Jest to zilustrowane na poniższym przykładzie: ```   byte[] columnValue = (byte[])myDataTable.Rows[0][0];   byte[] newValue = (byte[])columnValue.Clone();   newValue[1] = 2;   myDataTable.Rows[0][0] = newValue;   ```       >  [!NOTE] > mimo że można zdefiniować kolumnę wpisywania danych innych niż podstawowe typy danych .NET Framework i `Byte[]`, takiej kolumny będzie traktowany jako typ zdefiniowany przez użytkownika, mogą ulec następujące ograniczenia użycia. (Aby uzyskać więcej informacji dotyczących typów zdefiniowanych przez użytkownika, zobacz [tworzenie i typy Using User-Defined](http://msdn.microsoft.com/en-us/ec0266d2-7e5b-47e4-938a-85ac9d04fa40).)      -Kolumny nie może być częścią <xref:System.Data.DataView.RowFilter%2A>lub <xref:System.Data.DataTable.Select%2A>wyrażenia.</xref:System.Data.DataTable.Select%2A> </xref:System.Data.DataView.RowFilter%2A>      — Jeśli kolumna jest używana jako <xref:System.Data.DataTable.PrimaryKey%2A>, lub jako <xref:System.Data.DataView.Sort%2A>lub <xref:System.Data.DataView>, muszą być traktowane jak pole niezmienne; nie może zostać zmienione danych kolumny, gdy zostało ono dodane do tabeli.</xref:System.Data.DataView> </xref:System.Data.DataView.Sort%2A> </xref:System.Data.DataTable.PrimaryKey%2A>      -Jego <xref:System.Data.DataColumn.ColumnMapping%2A>można ustawić tylko na `MappingType.Element`.</xref:System.Data.DataColumn.ColumnMapping%2A>      -Klasa, która implementuje musi być typu danych kolumny muszą być oznaczone <xref:System.SerializableAttribute>, i w razie potrzeby Implementowanie <xref:System.Runtime.Serialization.ISerializable>lub <xref:System.Xml.Serialization.IXmlSerializable>interfejsu.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Runtime.Serialization.ISerializable> </xref:System.SerializableAttribute>      — Obsługa śledzenie zmian jest ograniczona. Korzystanie z <xref:System.Data.DataTable>mechanizmu śledzenia zmian dla klasy, klasy, która implementuje typ danych kolumny albo musi implementować <xref:System.ComponentModel.IChangeTracking>interfejsu lub Przejmij na odpowiedzialność za informowanie <xref:System.Data.DataRow>gdy wartość kolumny zostały zmodyfikowane przez wywołanie <xref:System.Data.DataRow.SetModified%2A>na wiersz lub przypisując obiektu wartości kolumny obiektu wartości kolumny oddzielnie skonkretyzowanym.</xref:System.Data.DataRow.SetModified%2A> </xref:System.Data.DataRow> </xref:System.ComponentModel.IChangeTracking> </xref:System.Data.DataTable>"
  example:
  - "The following example adds columns of several data types to a <xref:System.Data.DataTable>, and then adds one row to the table.  \n  \n [!code-cs[Classic WebData DataColumn.DataType Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_4_1.cs)]\n [!code-vb[Classic WebData DataColumn.DataType Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_4_1.vb)]"
  syntax:
    content: public Type DataType { get; set; }
    return:
      type: System.Type
      description: "A <xref:System.Type>obiekt, który reprezentuje typ danych kolumny.</xref:System.Type>"
  overload: System.Data.DataColumn.DataType*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Kolumna ma już przechowywanych danych."
  platform:
  - net462
- uid: System.Data.DataColumn.DateTimeMode
  id: DateTimeMode
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DateTimeMode
  nameWithType: DataColumn.DateTimeMode
  fullName: System.Data.DataColumn.DateTimeMode
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia <xref uid=&quot;langword_csharp_DateTimeMode&quot; name=&quot;DateTimeMode&quot; href=&quot;&quot;> </xref> dla kolumny."
  remarks: "Nie można zmodyfikować właściwość DateTimeMode, po dodaniu do wierszy <xref:System.Data.DataColumn>, z wyjątkiem modyfikowanie z <xref:System.Data.DataSetDateTime>i <xref:System.Data.DataSetDateTime>lub na odwrót.</xref:System.Data.DataSetDateTime> </xref:System.Data.DataSetDateTime> </xref:System.Data.DataColumn> Modyfikacja z `UnspecifiedLocal` do `Unspecified` i na odwrót jest dozwolony jako różnica między te dwie opcje jest tylko podczas serializacji i nie ma wpływu na magazynu."
  syntax:
    content: public System.Data.DataSetDateTime DateTimeMode { get; set; }
    return:
      type: System.Data.DataSetDateTime
      description: "<xref href=&quot;System.Data.DataSetDateTime&quot;> </xref> Dla określonej kolumny."
  overload: System.Data.DataColumn.DateTimeMode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.DefaultValue
  id: DefaultValue
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DefaultValue
  nameWithType: DataColumn.DefaultValue
  fullName: System.Data.DataColumn.DefaultValue
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia wartość domyślną dla kolumny, podczas tworzenia nowych wierszy."
  remarks: "Wartość domyślna to wartość, która jest automatycznie przypisywana do kolumny po <xref:System.Data.DataRow>jest tworzony (na przykład datę i godzinę <xref:System.Data.DataRow>został utworzony.</xref:System.Data.DataRow> </xref:System.Data.DataRow>       Gdy <xref:System.Data.DataColumn.AutoIncrement%2A>ma ustawioną wartość PRAWDA, nie mogą istnieć ma wartości domyślnej.</xref:System.Data.DataColumn.AutoIncrement%2A>       Można utworzyć nowego przy użyciu wiersza <xref:System.Data.DataRow.ItemArray%2A>Właściwość <xref:System.Data.DataRow>klasy i przekazywanie Metoda tablicy wartości.</xref:System.Data.DataRow> </xref:System.Data.DataRow.ItemArray%2A> Jest to potencjalny problem z wartości domyślnej dla kolumny, ponieważ jej wartość jest generowana automatycznie. Aby użyć <xref:System.Data.DataRow.ItemArray%2A>Właściwości z kolumny, umieść `null` w pozycji w kolumnie w tablicy.</xref:System.Data.DataRow.ItemArray%2A> Aby uzyskać więcej informacji, zobacz <xref:System.Data.DataRow.ItemArray%2A>Właściwości.</xref:System.Data.DataRow.ItemArray%2A>"
  example:
  - "The following example creates several <xref:System.Data.DataColumn> objects that have different data types, and sets appropriate default values to each column.  \n  \n [!code-vb[Classic WebData DataColumn.DefaultValue Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_0_1.vb)]"
  syntax:
    content: public object DefaultValue { get; set; }
    return:
      type: System.Object
      description: "Wartość odpowiednią do <xref:System.Data.DataColumn.DataType*>.</xref:System.Data.DataColumn.DataType*> kolumny"
  overload: System.Data.DataColumn.DefaultValue*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Podczas dodawania wiersza, wartość domyślna nie jest wystąpieniem typu danych kolumny."
  platform:
  - net462
- uid: System.Data.DataColumn.Expression
  id: Expression
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Expression
  nameWithType: DataColumn.Expression
  fullName: System.Data.DataColumn.Expression
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia wyrażenie używane do filtrowania wierszy, obliczania wartości w kolumnie lub Utwórz kolumnę agregacji."
  remarks: "One use of the Expression property is to create calculated columns. For example, to calculate a tax value, the unit price is multiplied by a tax rate of a specific region. Because tax rates vary from region to region, it would be impossible to put a single tax rate in a column; instead, the value is calculated using the Expression property, as shown in the Visual Basic code in the following section:  \n  \n DataSet1.Tables(\"Products\").Columns(\"tax\").Expression = \"UnitPrice * 0.086\"  \n  \n A second use is to create an aggregate column. Similar to a calculated value, an aggregate performs an operation based on the complete set of rows in the <xref:System.Data.DataTable>. A simple example is to count the number of rows returned in the set. This is the method you would use to count the number of transactions completed by a particular salesperson, as shown in this Visual Basic code:  \n  \n```  \nDataSet1.Tables(\"Orders\").Columns(\"OrderCount\").Expression = \"Count(OrderID)\"  \n```  \n  \n## Expression Syntax  \n When you create an expression, use the <xref:System.Data.DataColumn.ColumnName%2A> property to refer to columns. For example, if the <xref:System.Data.DataColumn.ColumnName%2A> for one column is \"UnitPrice\", and another \"Quantity\", the expression would be as follows:  \n  \n \"UnitPrice * Quantity\"  \n  \n> [!NOTE]\n>  If a column is used in an expression, then the expression is said to have a dependency on that column. If a dependent column is renamed or removed, no exception is thrown. An exception will be thrown when the now-broken expression column is accessed.  \n  \n When you create an expression for a filter, enclose strings with single quotation marks:  \n  \n \"LastName = 'Jones'\"  \n  \n If a column name contains any non-alphanumeric characters or starts with a digit or matches (case-insensitively) any of the following reserved words, it requires special handling, as described in the following paragraphs.  \n  \n And  \n  \n Between  \n  \n Child  \n  \n False  \n  \n In  \n  \n Is  \n  \n Like  \n  \n Not  \n  \n Null  \n  \n Or  \n  \n Parent  \n  \n True  \n  \n If a column name satisfies one of the above conditions, it must be wrapped in either square brackets or the \"`\" (grave accent) quotes. For example, to use a column named \"Column#\" in an expression, you would write either \"[Column#]\":  \n  \n Total * [Column#]  \n  \n or \"\\`Column#`\":  \n  \n Total * \\`Column#`  \n  \n If the column name is enclosed in square brackets then any ']' and '\\\\' characters (but not any other characters) in it must be escaped by prepending them with the backslash (\"\\\\\") character. If the column name is enclosed in grave accent characters then it must not contain any grave accent characters in it. For example, a column named \"Column[]\\\\\" would be written:  \n  \n Total * [Column[\\\\]\\\\\\\\]  \n  \n or  \n  \n Total * \\`Column[]\\\\`  \n  \n## User-Defined Values  \n User-defined values may be used within expressions to be compared with column values. String values should be enclosed within single quotation marks (and each single quotation character in a string value has to be escaped by prepending it with another single quotation character). Date values should be enclosed within pound signs (#) or single quotes (') based on the data provider. Decimals and scientific notation are permissible for numeric values. For example:  \n  \n \"FirstName = 'John'\"  \n  \n \"Price <= 50.00\"  \n  \n \"Birthdate < #1/31/82#\"  \n  \n For columns that contain enumeration values, cast the value to an integer data type. For example:  \n  \n \"EnumColumn = 5\"  \n  \n## Parsing Literal Expressions  \n All literal expressions must be expressed in the invariant culture locale. When `DataSet` parses and converts literal expressions, it always uses the invariant culture, not the current culture.  \n  \n String literals are identified when there are single quotes surrounding the value. For example:  \n  \n 'John'  \n  \n `Boolean` literals are true and false; they are not quoted in expressions.  \n  \n `Integer` literals [+-]?[0-9]+ are treated as `System.Int32`, `System.Int64` or `System.Double`. `System.Double` can lose precision depending on how large the number is. For example, if the number in the literal is 2147483650, `DataSet` will first attempt to parse the number as an `Int32`. This will not succeed because the number is too large. In this case `DataSet` will parse the number as an `Int64`, which will succeed. If the literal was a number larger than the maximum value of an Int64, `DataSet` will parse the literal using `Double`.  \n  \n Real literals using scientific notation, such as 4.42372E-30, are parsed using `System.Double`.  \n  \n Real literals without scientific notation, but with a decimal point, are treated as `System.Decimal`. If the number exceeds the maximum or minimum values supported by `System.Decimal`, then it is parsed as a `System.Double`. For example:  \n  \n 142526.144524 will be converted to a `Decimal`.  \n  \n 345262.78036719560925667 will be treated as a `Double`.  \n  \n## Operators  \n Concatenation is allowed using Boolean AND, OR, and NOT operators. You can use parentheses to group clauses and force precedence. The AND operator has precedence over other operators. For example:  \n  \n (LastName = 'Smith' OR LastName = 'Jones') AND FirstName = 'John'  \n  \n When you create comparison expressions, the following operators are allowed:  \n  \n <  \n  \n \\>  \n  \n <=  \n  \n \\>=  \n  \n <>  \n  \n =  \n  \n IN  \n  \n LIKE  \n  \n The following arithmetic operators are also supported in expressions:  \n  \n \\+ (addition)  \n  \n \\- (subtraction)  \n  \n \\* (multiplication)  \n  \n / (division)  \n  \n % (modulus)  \n  \n## String Operators  \n To concatenate a string, use the + character. The value of the <xref:System.Data.DataSet.CaseSensitive%2A> property of the <xref:System.Data.DataSet> class determines whether string comparisons are case-sensitive. However, you can override that value with the <xref:System.Data.DataTable.CaseSensitive%2A> property of the <xref:System.Data.DataTable> class.  \n  \n## Wildcard Characters  \n Both the * and % can be used interchangeably for wildcard characters in a LIKE comparison. If the string in a LIKE clause contains a \\* or %, those characters should be enclosed in brackets ([]). If a bracket is in the clause, each bracket character should be enclosed in brackets (for example [[] or []]). A wildcard is allowed at the start and end of a pattern, or at the end of a pattern, or at the start of a pattern. For example:  \n  \n \"ItemName LIKE '*product\\*'\"  \n  \n \"ItemName LIKE '*product'\"  \n  \n \"ItemName LIKE 'product*'\"  \n  \n Wildcard characters are not allowed in the middle of a string. For example, 'te*xt' is not allowed.  \n  \n## Parent/Child Relation Referencing  \n A parent table may be referenced in an expression by prepending the column name with `Parent`. For example, the `Parent.Price` references the parent table's column named `Price`.  \n  \n When a child has more than one parent row, use Parent(RelationName).ColumnName. For example, the Parent(RelationName).Price references the parent table’s column named Price via the relation.  \n  \n A column in a child table may be referenced in an expression by prepending the column name with `Child`. However, because child relationships may return multiple rows, you must include the reference to the child column in an aggregate function. For example, `Sum(Child.Price)` would return the sum of the column named `Price` in the child table.  \n  \n If a table has more than one child, the syntax is: `Child(RelationName)`. For example, if a table has two child tables named `Customers` and `Orders`, and the <xref:System.Data.DataRelation> object is named `Customers2Orders`, the reference would be as follows:  \n  \n Avg(Child(Customers2Orders).Quantity)  \n  \n## Aggregates  \n The following aggregate types are supported:  \n  \n Sum (Sum)  \n  \n Avg (Average)  \n  \n Min (Minimum)  \n  \n Max (Maximum)  \n  \n Count (Count)  \n  \n StDev (Statistical standard deviation)  \n  \n Var (Statistical variance).  \n  \n Aggregates are ordinarily performed along relationships. Create an aggregate expression by using one of the functions listed earlier and a child table column as detailed in Parent/Child Relation Referencing that was discussed earlier. For example:  \n  \n Avg(Child.Price)  \n  \n Avg(Child(Orders2Details).Price)  \n  \n An aggregate can also be performed on a single table. For example, to create a summary of figures in a column named \"Price\":  \n  \n Sum(Price)  \n  \n> [!NOTE]\n>  If you use a single table to create an aggregate, there would be no group-by functionality. Instead, all rows would display the same value in the column.  \n  \n If a table has no rows, the aggregate functions will return `null`.  \n  \n Data types can always be determined by examining the <xref:System.Data.DataColumn.DataType%2A> property of a column. You can also convert data types using the Convert function, shown in the following section.  \n  \n An aggregate can only be applied to a single column and no other expressions can be used inside the aggregate.  \n  \n## Functions  \n The following functions are also supported:  \n  \n `CONVERT`  \n  \n|||  \n|-|-|  \n|Description|Converts particular expression to a specified .NET Framework Type.|  \n|Syntax|Convert(`expression`, `type`)|  \n|Arguments|`expression` -- The expression to convert.<br /><br /> `type` -- The .NET Framework type to which the value will be converted.|  \n  \n Example: myDataColumn.Expression=\"Convert(total, 'System.Int32')\"  \n  \n All conversions are valid with the following exceptions: `Boolean` can be coerced to and from `Byte`, `SByte`, `Int16`, `Int32`, `Int64`, `UInt16`, `UInt32`, `UInt64`, `String` and itself only. `Char` can be coerced to and from `Int32`, `UInt32`, `String`, and itself only. `DateTime` can be coerced to and from `String` and itself only. `TimeSpan` can be coerced to and from `String` and itself only.  \n  \n `LEN`  \n  \n|||  \n|-|-|  \n|Description|Gets the length of a string|  \n|Syntax|LEN(`expression`)|  \n|Arguments|`expression` -- The string to be evaluated.|  \n  \n Example: myDataColumn.Expression=\"Len(ItemName)\"  \n  \n `ISNULL`  \n  \n|||  \n|-|-|  \n|Description|Checks an expression and either returns the checked expression or a replacement value.|  \n|Syntax|ISNULL(`expression`, `replacementvalue`)|  \n|Arguments|`expression` -- The expression to check.<br /><br /> `replacementvalue` -- If expression is `null`, `replacementvalue` is returned.|  \n  \n Example: myDataColumn.Expression=\"IsNull(price, -1)\"  \n  \n `IIF`  \n  \n|||  \n|-|-|  \n|Description|Gets one of two values depending on the result of a logical expression.|  \n|Syntax|IIF(`expr`, `truepart`, `falsepart`)|  \n|Arguments|`expr` -- The expression to evaluate.<br /><br /> `truepart` -- The value to return if the expression is true.<br /><br /> `falsepart` -- The value to return if the expression is false.|  \n  \n Example: myDataColumn.Expression = \"IIF(total>1000, 'expensive', 'dear')  \n  \n `TRIM`  \n  \n|||  \n|-|-|  \n|Description|Removes all leading and trailing blank characters like \\r, \\n, \\t, ' '|  \n|Syntax|TRIM(`expression`)|  \n|Arguments|`expression` -- The expression to trim.|  \n  \n `SUBSTRING`  \n  \n|||  \n|-|-|  \n|Description|Gets a sub-string of a specified length, starting at a specified point in the string.|  \n|Syntax|SUBSTRING(`expression`, `start`, `length`)|  \n|Arguments|`expression` -- The source string for the substring.<br /><br /> `start` -- Integer that specifies where the substring starts.<br /><br /> `length` -- Integer that specifies the length of the substring.|  \n  \n Example: myDataColumn.Expression = \"SUBSTRING(phone, 7, 8)\"  \n  \n> [!NOTE]\n>  You can reset the Expression property by assigning it a null value or empty string. If a default value is set on the expression column, all previously filled rows are assigned the default value after the Expression property is reset."
  example:
  - "The following example creates three columns in a <xref:System.Data.DataTable>. The second and third columns contain expressions; the second calculates tax using a variable tax rate, and the third adds the result of the calculation to the value of the first column. The resulting table is displayed in a <xref:System.Windows.Forms.DataGrid> control.  \n  \n [!code-cs[Classic WebData DataColumn.Expression Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_1_1.cs)]\n [!code-vb[Classic WebData DataColumn.Expression Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_1_1.vb)]"
  syntax:
    content: public string Expression { get; set; }
    return:
      type: System.String
      description: "Wyrażenie do obliczenia wartości kolumny lub Utwórz kolumnę agregacji. Zwracany typ wyrażenia jest określany przez <xref:System.Data.DataColumn.DataType*>kolumny.</xref:System.Data.DataColumn.DataType*>"
  overload: System.Data.DataColumn.Expression*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <>*> or <>*> property is set to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "Korzystając z funkcji konwersji, wyrażenie ciągu, ale ciąg nie zawiera reprezentację, który może zostać przekonwertowany na parametr typu."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Korzystając z funkcji konwersji, żądane rzutowanie jest niemożliwe. Zobacz opis funkcji konwersji w poniższej sekcji, aby uzyskać szczegółowe informacje o możliwych rzutowania."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Korzystając z funkcji SUBSTRING start argument jest spoza zakresu.       - Lub - korzystając z funkcji SUBSTRING, długość argumentu jest spoza zakresu."
  - type: System.Exception
    commentId: T:System.Exception
    description: "Korzystając z funkcji LEN lub PRZYCINANIA, wyrażenie nie zostało oszacowane jako ciąg. Dotyczy to również wyrażeń określających <xref:System.Char>.</xref:System.Char>"
  platform:
  - net462
- uid: System.Data.DataColumn.ExtendedProperties
  id: ExtendedProperties
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: ExtendedProperties
  nameWithType: DataColumn.ExtendedProperties
  fullName: System.Data.DataColumn.ExtendedProperties
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera kolekcję niestandardowe informacje użytkownika skojarzonego z <xref href=&quot;System.Data.DataColumn&quot;> </xref>."
  remarks: "Właściwości rozszerzone właściwości umożliwia przechowywania informacji niestandardowych z obiektem. Na przykład mogą być przechowywane przez czas, kiedy należy odświeżyć dane.       Rozszerzone właściwości musi być typu <xref:System.String>.</xref:System.String> Właściwości, które nie są typu <xref:System.String>nie są zachowywane podczas <xref:System.Data.DataColumn>jest zapisywany w formacie XML.</xref:System.Data.DataColumn> </xref:System.String>"
  example:
  - "The following example adds a custom property to the <xref:System.Data.PropertyCollection> returned by the ExtendedProperties property. The second example retrieves the custom property.  \n  \n [!code-cs[Classic WebData DataColumn.ExtendedProperties Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_10_1.cs)]\n [!code-vb[Classic WebData DataColumn.ExtendedProperties Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_10_1.vb)]"
  syntax:
    content: public System.Data.PropertyCollection ExtendedProperties { get; }
    return:
      type: System.Data.PropertyCollection
      description: "A <xref href=&quot;System.Data.PropertyCollection&quot;> </xref> niestandardowych informacji."
  overload: System.Data.DataColumn.ExtendedProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.MaxLength
  id: MaxLength
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: MaxLength
  nameWithType: DataColumn.MaxLength
  fullName: System.Data.DataColumn.MaxLength
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia maksymalną długość kolumny tekstowej."
  remarks: "Właściwości MaxLength jest ignorowany dla kolumn inną niż tekstowa. A <xref:System.ArgumentException>wyjątek jest zgłaszany po przypisaniu MaxLength z kolumną innych niż ciąg.</xref:System.ArgumentException>"
  syntax:
    content: public int MaxLength { get; set; }
    return:
      type: System.Int32
      description: "Maksymalna długość kolumny w znakach. Jeśli dana kolumna nie ma żadnych maksymalną długość, wartość -1 (ustawienie domyślne)."
  overload: System.Data.DataColumn.MaxLength*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.Namespace
  id: Namespace
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Namespace
  nameWithType: DataColumn.Namespace
  fullName: System.Data.DataColumn.Namespace
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia obszar nazw <xref href=&quot;System.Data.DataColumn&quot;> </xref>."
  remarks: "Właściwość Namespace jest używana podczas odczytywania i zapisywania XML dokumentu do <xref:System.Data.DataTable>w <xref:System.Data.DataSet>przy użyciu <xref:System.Data.DataSet.ReadXml%2A>, <xref:System.Data.DataSet.WriteXml%2A>, <xref:System.Data.DataSet.ReadXmlSchema%2A>, lub <xref:System.Data.DataSet.WriteXmlSchema%2A>metody.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataTable>       Przestrzeń nazw dokumentu XML służy do określania zakresu atrybuty i elementy odczytywana do <xref:System.Data.DataSet>.</xref:System.Data.DataSet> XML Na przykład <xref:System.Data.DataSet>zawiera schemat odczytu dokumentu zawierającego przestrzeni nazw &quot;Moja firma&quot;, a próby odczytu danych (z <xref:System.Data.DataSet.ReadXml%2A>metody) z dokumentu, który ma przestrzeń nazw &quot;theirCompany.&quot;</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> Dane, które nie odpowiadają istniejący schemat zostanie zignorowany."
  syntax:
    content: public string Namespace { get; set; }
    return:
      type: System.String
      description: "Przestrzeń nazw <xref href=&quot;System.Data.DataColumn&quot;> </xref>."
  overload: System.Data.DataColumn.Namespace*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Przestrzeń nazw zawiera już dane."
  platform:
  - net462
- uid: System.Data.DataColumn.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  id: OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataColumn.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataColumn.OnPropertyChanging(PropertyChangedEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ten element członkowski obsługuje infrastrukturę .NET Framework i nie jest przeznaczona do użycia bezpośrednio w kodzie."
  syntax:
    content: protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);
    parameters:
    - id: pcevent
      type: System.ComponentModel.PropertyChangedEventArgs
      description: "Odwołania do parametru."
  overload: System.Data.DataColumn.OnPropertyChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.Ordinal
  id: Ordinal
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Ordinal
  nameWithType: DataColumn.Ordinal
  fullName: System.Data.DataColumn.Ordinal
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera pozycję (liczony od zera) kolumny w <xref href=&quot;System.Data.DataColumnCollection&quot;> </xref> kolekcji."
  remarks: ''
  example:
  - "The following example returns the column name, ordinal, and data type of a column.  \n  \n [!code-vb[Classic WebData DataColumn.Ordinal Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_16_1.vb)]\n [!code-cs[Classic WebData DataColumn.Ordinal Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_16_1.cs)]"
  syntax:
    content: public int Ordinal { get; }
    return:
      type: System.Int32
      description: "Pozycja kolumny. Pobiera wartość -1, jeśli kolumna nie jest elementem członkowskim kolekcji."
  overload: System.Data.DataColumn.Ordinal*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.Prefix
  id: Prefix
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Prefix
  nameWithType: DataColumn.Prefix
  fullName: System.Data.DataColumn.Prefix
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia XML prefiks tego aliasów przestrzeni nazw <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "<xref:System.Data.DataTable.Prefix%2A>Jest używany w dokumencie XML, aby zidentyfikować elementy, które należą do przestrzeni nazw dla <xref:System.Data.DataSet>obiektu (jak ustawione przez <xref:System.Data.DataSet.Namespace%2A>Właściwości).</xref:System.Data.DataSet.Namespace%2A> </xref:System.Data.DataSet> </xref:System.Data.DataTable.Prefix%2A>"
  syntax:
    content: public string Prefix { get; set; }
    return:
      type: System.String
      description: "Prefiks XML <xref href=&quot;System.Data.DataTable&quot;> </xref> przestrzeni nazw."
  overload: System.Data.DataColumn.Prefix*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.RaisePropertyChanging(System.String)
  id: RaisePropertyChanging(System.String)
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: RaisePropertyChanging(String)
  nameWithType: DataColumn.RaisePropertyChanging(String)
  fullName: System.Data.DataColumn.RaisePropertyChanging(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ten element członkowski obsługuje infrastrukturę .NET Framework i nie jest przeznaczona do użycia bezpośrednio w kodzie."
  syntax:
    content: protected void RaisePropertyChanging (string name);
    parameters:
    - id: name
      type: System.String
      description: "Odwołania do parametru."
  overload: System.Data.DataColumn.RaisePropertyChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.ReadOnly
  id: ReadOnly
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: ReadOnly
  nameWithType: DataColumn.ReadOnly
  fullName: System.Data.DataColumn.ReadOnly
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia wartość wskazującą, czy kolumna zezwala na zmiany jak wiersz zostanie dodany do tabeli."
  remarks: ''
  example:
  - "The following example creates a <xref:System.Data.DataColumn> and sets its ReadOnly property `true`.  \n  \n [!code-vb[Classic WebData DataColumn.ReadOnly Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_12_1.vb)]\n [!code-cs[Classic WebData DataColumn.ReadOnly Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_12_1.cs)]"
  syntax:
    content: public bool ReadOnly { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli kolumna jest tylko do odczytu. w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Wartość domyślna to <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataColumn.ReadOnly*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Właściwość jest ustawiona na <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> dla kolumny obliczanej."
  platform:
  - net462
- uid: System.Data.DataColumn.SetOrdinal(System.Int32)
  id: SetOrdinal(System.Int32)
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: SetOrdinal(Int32)
  nameWithType: DataColumn.SetOrdinal(Int32)
  fullName: System.Data.DataColumn.SetOrdinal(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zmienia numer lub położenia <xref href=&quot;System.Data.DataColumn&quot;> </xref> do określonej liczby porządkowej lub pozycji."
  remarks: "Zmienia numer lub położenia <xref:System.Data.DataColumn>określonej liczby porządkowej lub położenie.</xref:System.Data.DataColumn> Jeśli numer porządkowy jest mniejsza niż 0 lub większa niż liczba istniejących kolumn – 1 (większy niż numer ostatniej kolumny) następnie nieprawidłową <xref:System.ArgumentException>jest generowany.</xref:System.ArgumentException>       Jeśli zmienisz numer kolumny kolumna zostanie przeniesiona do nowej pozycji w kolekcji kolumn. Kolumn między poprzedni i nowy numer będzie oznaczenie, aby dopasować nowy numer kolumny."
  syntax:
    content: public void SetOrdinal (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "Określona liczba porządkowa."
  overload: System.Data.DataColumn.SetOrdinal*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.Table
  id: Table
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Table
  nameWithType: DataColumn.Table
  fullName: System.Data.DataColumn.Table
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera <xref href=&quot;System.Data.DataTable&quot;> </xref> do której należy do kolumny."
  remarks: ''
  example:
  - "The following example returns the parent table of a <xref:System.Data.DataColumn> through its Table property.  \n  \n [!code-vb[Classic WebData DataColumn.Table Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_6_1.vb)]\n [!code-cs[Classic WebData DataColumn.Table Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_6_1.cs)]"
  syntax:
    content: public System.Data.DataTable Table { get; }
    return:
      type: System.Data.DataTable
      description: "<xref href=&quot;System.Data.DataTable&quot;> </xref> Który <xref href=&quot;System.Data.DataColumn&quot;> </xref> należy."
  overload: System.Data.DataColumn.Table*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.ToString
  id: ToString
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: ToString()
  nameWithType: DataColumn.ToString()
  fullName: System.Data.DataColumn.ToString()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera <xref:System.Data.DataColumn.Expression*>kolumny, jeśli taka istnieje.</xref:System.Data.DataColumn.Expression*>"
  remarks: ''
  example:
  - "The following example uses the ToString property to return the default string of each member of a collection of <xref:System.Data.DataColumn> objects.  \n  \n [!code-vb[Classic WebData DataColumn.ToString Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_1_1.vb)]\n [!code-cs[Classic WebData DataColumn.ToString Example#1](~/add/codesnippet/csharp/m-system.data.datacolumn_1_1.cs)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "<> </> *> Wartość, jeśli właściwość jest ustawiona, a w przeciwnym razie <> </> *> właściwości."
  overload: System.Data.DataColumn.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.Unique
  id: Unique
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Unique
  nameWithType: DataColumn.Unique
  fullName: System.Data.DataColumn.Unique
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia wartość wskazującą, czy wartości w każdym wierszu kolumny muszą być unikatowe."
  remarks: "Jak tej właściwości została zmieniona z false na true, unikatowego ograniczenia zostanie utworzona w tej kolumnie, aby upewnić się, że wartości są unikatowe."
  example:
  - "The following example creates new <xref:System.Data.DataColumn>, sets its properties, and adds it to a table's columns collection.  \n  \n [!code-cs[Classic WebData DataColumn.Unique Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_3_1.cs)]\n [!code-vb[Classic WebData DataColumn.Unique Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_3_1.vb)]"
  syntax:
    content: public bool Unique { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli wartość musi być unikatowa. w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Wartość domyślna to <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataColumn.Unique*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Kolumna jest kolumną obliczaną."
  platform:
  - net462
references:
- uid: System.ComponentModel.MarshalByValueComponent
  isExternal: false
  name: System.ComponentModel.MarshalByValueComponent
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.DuplicateNameException
  parent: System.Data
  isExternal: false
  name: DuplicateNameException
  nameWithType: DuplicateNameException
  fullName: System.Data.DuplicateNameException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.FormatException
  isExternal: true
  name: System.FormatException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.Data.DataColumn.#ctor
  parent: System.Data.DataColumn
  isExternal: false
  name: DataColumn()
  nameWithType: DataColumn.DataColumn()
  fullName: System.Data.DataColumn.DataColumn()
- uid: System.Data.DataColumn.#ctor(System.String)
  parent: System.Data.DataColumn
  isExternal: false
  name: DataColumn(String)
  nameWithType: DataColumn.DataColumn(String)
  fullName: System.Data.DataColumn.DataColumn(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.DataColumn.#ctor(System.String,System.Type)
  parent: System.Data.DataColumn
  isExternal: false
  name: DataColumn(String,Type)
  nameWithType: DataColumn.DataColumn(String,Type)
  fullName: System.Data.DataColumn.DataColumn(String,Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Data.DataColumn.#ctor(System.String,System.Type,System.String)
  parent: System.Data.DataColumn
  isExternal: false
  name: DataColumn(String,Type,String)
  nameWithType: DataColumn.DataColumn(String,Type,String)
  fullName: System.Data.DataColumn.DataColumn(String,Type,String)
- uid: System.Data.DataColumn.#ctor(System.String,System.Type,System.String,System.Data.MappingType)
  parent: System.Data.DataColumn
  isExternal: false
  name: DataColumn(String,Type,String,MappingType)
  nameWithType: DataColumn.DataColumn(String,Type,String,MappingType)
  fullName: System.Data.DataColumn.DataColumn(String,Type,String,MappingType)
- uid: System.Data.MappingType
  parent: System.Data
  isExternal: false
  name: MappingType
  nameWithType: MappingType
  fullName: System.Data.MappingType
- uid: System.Data.DataColumn.AllowDBNull
  parent: System.Data.DataColumn
  isExternal: false
  name: AllowDBNull
  nameWithType: DataColumn.AllowDBNull
  fullName: System.Data.DataColumn.AllowDBNull
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.DataColumn.AutoIncrement
  parent: System.Data.DataColumn
  isExternal: false
  name: AutoIncrement
  nameWithType: DataColumn.AutoIncrement
  fullName: System.Data.DataColumn.AutoIncrement
- uid: System.Data.DataColumn.AutoIncrementSeed
  parent: System.Data.DataColumn
  isExternal: false
  name: AutoIncrementSeed
  nameWithType: DataColumn.AutoIncrementSeed
  fullName: System.Data.DataColumn.AutoIncrementSeed
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Data.DataColumn.AutoIncrementStep
  parent: System.Data.DataColumn
  isExternal: false
  name: AutoIncrementStep
  nameWithType: DataColumn.AutoIncrementStep
  fullName: System.Data.DataColumn.AutoIncrementStep
- uid: System.Data.DataColumn.Caption
  parent: System.Data.DataColumn
  isExternal: false
  name: Caption
  nameWithType: DataColumn.Caption
  fullName: System.Data.DataColumn.Caption
- uid: System.Data.DataColumn.CheckNotAllowNull
  parent: System.Data.DataColumn
  isExternal: false
  name: CheckNotAllowNull()
  nameWithType: DataColumn.CheckNotAllowNull()
  fullName: System.Data.DataColumn.CheckNotAllowNull()
- uid: System.Data.DataColumn.CheckUnique
  parent: System.Data.DataColumn
  isExternal: false
  name: CheckUnique()
  nameWithType: DataColumn.CheckUnique()
  fullName: System.Data.DataColumn.CheckUnique()
- uid: System.Data.DataColumn.ColumnMapping
  parent: System.Data.DataColumn
  isExternal: false
  name: ColumnMapping
  nameWithType: DataColumn.ColumnMapping
  fullName: System.Data.DataColumn.ColumnMapping
- uid: System.Data.DataColumn.ColumnName
  parent: System.Data.DataColumn
  isExternal: false
  name: ColumnName
  nameWithType: DataColumn.ColumnName
  fullName: System.Data.DataColumn.ColumnName
- uid: System.Data.DataColumn.DataType
  parent: System.Data.DataColumn
  isExternal: false
  name: DataType
  nameWithType: DataColumn.DataType
  fullName: System.Data.DataColumn.DataType
- uid: System.Data.DataColumn.DateTimeMode
  parent: System.Data.DataColumn
  isExternal: false
  name: DateTimeMode
  nameWithType: DataColumn.DateTimeMode
  fullName: System.Data.DataColumn.DateTimeMode
- uid: System.Data.DataSetDateTime
  parent: System.Data
  isExternal: false
  name: DataSetDateTime
  nameWithType: DataSetDateTime
  fullName: System.Data.DataSetDateTime
- uid: System.Data.DataColumn.DefaultValue
  parent: System.Data.DataColumn
  isExternal: false
  name: DefaultValue
  nameWithType: DataColumn.DefaultValue
  fullName: System.Data.DataColumn.DefaultValue
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.DataColumn.Expression
  parent: System.Data.DataColumn
  isExternal: false
  name: Expression
  nameWithType: DataColumn.Expression
  fullName: System.Data.DataColumn.Expression
- uid: System.Data.DataColumn.ExtendedProperties
  parent: System.Data.DataColumn
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataColumn.ExtendedProperties
  fullName: System.Data.DataColumn.ExtendedProperties
- uid: System.Data.PropertyCollection
  parent: System.Data
  isExternal: false
  name: PropertyCollection
  nameWithType: PropertyCollection
  fullName: System.Data.PropertyCollection
- uid: System.Data.DataColumn.MaxLength
  parent: System.Data.DataColumn
  isExternal: false
  name: MaxLength
  nameWithType: DataColumn.MaxLength
  fullName: System.Data.DataColumn.MaxLength
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataColumn.Namespace
  parent: System.Data.DataColumn
  isExternal: false
  name: Namespace
  nameWithType: DataColumn.Namespace
  fullName: System.Data.DataColumn.Namespace
- uid: System.Data.DataColumn.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataColumn
  isExternal: false
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataColumn.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataColumn.OnPropertyChanging(PropertyChangedEventArgs)
- uid: System.ComponentModel.PropertyChangedEventArgs
  parent: System.ComponentModel
  isExternal: true
  name: PropertyChangedEventArgs
  nameWithType: PropertyChangedEventArgs
  fullName: System.ComponentModel.PropertyChangedEventArgs
- uid: System.Data.DataColumn.Ordinal
  parent: System.Data.DataColumn
  isExternal: false
  name: Ordinal
  nameWithType: DataColumn.Ordinal
  fullName: System.Data.DataColumn.Ordinal
- uid: System.Data.DataColumn.Prefix
  parent: System.Data.DataColumn
  isExternal: false
  name: Prefix
  nameWithType: DataColumn.Prefix
  fullName: System.Data.DataColumn.Prefix
- uid: System.Data.DataColumn.RaisePropertyChanging(System.String)
  parent: System.Data.DataColumn
  isExternal: false
  name: RaisePropertyChanging(String)
  nameWithType: DataColumn.RaisePropertyChanging(String)
  fullName: System.Data.DataColumn.RaisePropertyChanging(String)
- uid: System.Data.DataColumn.ReadOnly
  parent: System.Data.DataColumn
  isExternal: false
  name: ReadOnly
  nameWithType: DataColumn.ReadOnly
  fullName: System.Data.DataColumn.ReadOnly
- uid: System.Data.DataColumn.SetOrdinal(System.Int32)
  parent: System.Data.DataColumn
  isExternal: false
  name: SetOrdinal(Int32)
  nameWithType: DataColumn.SetOrdinal(Int32)
  fullName: System.Data.DataColumn.SetOrdinal(Int32)
- uid: System.Data.DataColumn.Table
  parent: System.Data.DataColumn
  isExternal: false
  name: Table
  nameWithType: DataColumn.Table
  fullName: System.Data.DataColumn.Table
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.DataColumn.ToString
  parent: System.Data.DataColumn
  isExternal: false
  name: ToString()
  nameWithType: DataColumn.ToString()
  fullName: System.Data.DataColumn.ToString()
- uid: System.Data.DataColumn.Unique
  parent: System.Data.DataColumn
  isExternal: false
  name: Unique
  nameWithType: DataColumn.Unique
  fullName: System.Data.DataColumn.Unique
- uid: System.Data.DataColumn.#ctor*
  parent: System.Data.DataColumn
  isExternal: false
  name: DataColumn
  nameWithType: DataColumn.DataColumn
- uid: System.Data.DataColumn.AllowDBNull*
  parent: System.Data.DataColumn
  isExternal: false
  name: AllowDBNull
  nameWithType: DataColumn.AllowDBNull
- uid: System.Data.DataColumn.AutoIncrement*
  parent: System.Data.DataColumn
  isExternal: false
  name: AutoIncrement
  nameWithType: DataColumn.AutoIncrement
- uid: System.Data.DataColumn.AutoIncrementSeed*
  parent: System.Data.DataColumn
  isExternal: false
  name: AutoIncrementSeed
  nameWithType: DataColumn.AutoIncrementSeed
- uid: System.Data.DataColumn.AutoIncrementStep*
  parent: System.Data.DataColumn
  isExternal: false
  name: AutoIncrementStep
  nameWithType: DataColumn.AutoIncrementStep
- uid: System.Data.DataColumn.Caption*
  parent: System.Data.DataColumn
  isExternal: false
  name: Caption
  nameWithType: DataColumn.Caption
- uid: System.Data.DataColumn.CheckNotAllowNull*
  parent: System.Data.DataColumn
  isExternal: false
  name: CheckNotAllowNull
  nameWithType: DataColumn.CheckNotAllowNull
- uid: System.Data.DataColumn.CheckUnique*
  parent: System.Data.DataColumn
  isExternal: false
  name: CheckUnique
  nameWithType: DataColumn.CheckUnique
- uid: System.Data.DataColumn.ColumnMapping*
  parent: System.Data.DataColumn
  isExternal: false
  name: ColumnMapping
  nameWithType: DataColumn.ColumnMapping
- uid: System.Data.DataColumn.ColumnName*
  parent: System.Data.DataColumn
  isExternal: false
  name: ColumnName
  nameWithType: DataColumn.ColumnName
- uid: System.Data.DataColumn.DataType*
  parent: System.Data.DataColumn
  isExternal: false
  name: DataType
  nameWithType: DataColumn.DataType
- uid: System.Data.DataColumn.DateTimeMode*
  parent: System.Data.DataColumn
  isExternal: false
  name: DateTimeMode
  nameWithType: DataColumn.DateTimeMode
- uid: System.Data.DataColumn.DefaultValue*
  parent: System.Data.DataColumn
  isExternal: false
  name: DefaultValue
  nameWithType: DataColumn.DefaultValue
- uid: System.Data.DataColumn.Expression*
  parent: System.Data.DataColumn
  isExternal: false
  name: Expression
  nameWithType: DataColumn.Expression
- uid: System.Data.DataColumn.ExtendedProperties*
  parent: System.Data.DataColumn
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataColumn.ExtendedProperties
- uid: System.Data.DataColumn.MaxLength*
  parent: System.Data.DataColumn
  isExternal: false
  name: MaxLength
  nameWithType: DataColumn.MaxLength
- uid: System.Data.DataColumn.Namespace*
  parent: System.Data.DataColumn
  isExternal: false
  name: Namespace
  nameWithType: DataColumn.Namespace
- uid: System.Data.DataColumn.OnPropertyChanging*
  parent: System.Data.DataColumn
  isExternal: false
  name: OnPropertyChanging
  nameWithType: DataColumn.OnPropertyChanging
- uid: System.Data.DataColumn.Ordinal*
  parent: System.Data.DataColumn
  isExternal: false
  name: Ordinal
  nameWithType: DataColumn.Ordinal
- uid: System.Data.DataColumn.Prefix*
  parent: System.Data.DataColumn
  isExternal: false
  name: Prefix
  nameWithType: DataColumn.Prefix
- uid: System.Data.DataColumn.RaisePropertyChanging*
  parent: System.Data.DataColumn
  isExternal: false
  name: RaisePropertyChanging
  nameWithType: DataColumn.RaisePropertyChanging
- uid: System.Data.DataColumn.ReadOnly*
  parent: System.Data.DataColumn
  isExternal: false
  name: ReadOnly
  nameWithType: DataColumn.ReadOnly
- uid: System.Data.DataColumn.SetOrdinal*
  parent: System.Data.DataColumn
  isExternal: false
  name: SetOrdinal
  nameWithType: DataColumn.SetOrdinal
- uid: System.Data.DataColumn.Table*
  parent: System.Data.DataColumn
  isExternal: false
  name: Table
  nameWithType: DataColumn.Table
- uid: System.Data.DataColumn.ToString*
  parent: System.Data.DataColumn
  isExternal: false
  name: ToString
  nameWithType: DataColumn.ToString
- uid: System.Data.DataColumn.Unique*
  parent: System.Data.DataColumn
  isExternal: false
  name: Unique
  nameWithType: DataColumn.Unique
