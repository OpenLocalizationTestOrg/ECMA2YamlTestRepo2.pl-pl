### YamlMime:ManagedReference
items:
- uid: System.Runtime.CompilerServices.RuntimeWrappedException
  id: RuntimeWrappedException
  children:
  - System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException
  langs:
  - csharp
  name: RuntimeWrappedException
  nameWithType: RuntimeWrappedException
  fullName: System.Runtime.CompilerServices.RuntimeWrappedException
  type: Class
  summary: "Opakowuje wyjątek, który nie pochodzi od <xref:System.Exception>klasy.</xref:System.Exception> Ta klasa nie może być dziedziczona."
  remarks: "Niektórych języków, takich jak C++, pozwala na zgłaszanie wyjątków dowolnego typu zarządzanego.  Wymagaj innych języków, takich jak Microsoft C# i Visual Basic, co zwrócony wyjątek być pochodną <xref:System.Exception>klasy.</xref:System.Exception>  Aby zapewnić zgodność między językami, środowisko uruchomieniowe języka wspólnego (CLR) opakowuje obiekty, które nie pochodzą z <xref:System.Exception>w obiekcie RuntimeWrappedException.</xref:System.Exception>       Można użyć <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute>klasę, aby określić, czy wyjątki mają pojawiać się opakowana wewnątrz bloków catch i filtry wyjątków dla zestawu.</xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute>  Wiele kompilatorów język, w tym Kompilatory języka Microsoft C# i Visual Basic, zastosowaniu tego atrybutu, aby określić zachowanie zawijania domyślnie.       Należy pamiętać, że środowisko uruchomieniowe nadal zawijany wyjątki, nawet jeśli używasz <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute>klasę, aby określić, że nie chcesz ich opakowana.</xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute>  W takim przypadku wyjątki są bez otoki tylko wewnątrz bloków catch lub filtry wyjątków."
  example:
  - "The following code example demonstrates how to throw a <xref:System.String> object as an exception in C++ and catch it using a RuntimeWrappedException object.  \n  \n [!code-cpp[System.Runtime.CompilerServices.RuntimeWrappedException#1](~/add/codesnippet/cpp/t-system.runtime.compile_12_1.cpp)]"
  syntax:
    content: 'public sealed class RuntimeWrappedException : Exception'
  inheritance:
  - System.Exception
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.CompilerServices.RuntimeWrappedException
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: RuntimeWrappedException.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.CompilerServices
  summary: "Ustawia <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> obiektu o informacje o wyjątku."
  remarks: "Ustawia metodę GetObjectData <xref:System.Runtime.Serialization.SerializationInfo>obiektu ze wszystkimi danymi obiektu wyjątków przeznaczone do serializacji.</xref:System.Runtime.Serialization.SerializationInfo> Podczas deserializacji, wyjątek jest odtworzonych z `SerializationInfo` przesyłane przez strumień."
  syntax:
    content: public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> Obiekt przechowujący dane zserializowanego obiektu dotyczące zgłaszanego wyjątku."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "<xref:System.Runtime.Serialization.StreamingContext>Obiekt zawierający informacje kontekstowe dotyczące źródła lub miejsca docelowego.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>info</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException
  id: WrappedException
  parent: System.Runtime.CompilerServices.RuntimeWrappedException
  langs:
  - csharp
  name: WrappedException
  nameWithType: RuntimeWrappedException.WrappedException
  fullName: System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.CompilerServices
  summary: "Pobiera obiekt, który został opakowany przez <xref href=&quot;System.Runtime.CompilerServices.RuntimeWrappedException&quot;> </xref> obiektu."
  remarks: "Właściwość WrappedException pobiera obiekt, który został zgłoszony wyjątek od języka, który umożliwia wyjątki, które nie pochodzi od <xref:System.Exception>klasy.</xref:System.Exception>"
  syntax:
    content: public object WrappedException { get; }
    return:
      type: System.Object
      description: "Obiekt, który został opakowany przez <xref href=&quot;System.Runtime.CompilerServices.RuntimeWrappedException&quot;> </xref> obiektu."
  overload: System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Exception
  isExternal: false
  name: System.Exception
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.CompilerServices.RuntimeWrappedException
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: RuntimeWrappedException.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException
  parent: System.Runtime.CompilerServices.RuntimeWrappedException
  isExternal: false
  name: WrappedException
  nameWithType: RuntimeWrappedException.WrappedException
  fullName: System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData*
  parent: System.Runtime.CompilerServices.RuntimeWrappedException
  isExternal: false
  name: GetObjectData
  nameWithType: RuntimeWrappedException.GetObjectData
- uid: System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException*
  parent: System.Runtime.CompilerServices.RuntimeWrappedException
  isExternal: false
  name: WrappedException
  nameWithType: RuntimeWrappedException.WrappedException
