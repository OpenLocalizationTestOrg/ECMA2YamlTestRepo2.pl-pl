### YamlMime:ManagedReference
items:
- uid: System.Reflection.ExceptionHandlingClauseOptions
  id: ExceptionHandlingClauseOptions
  children:
  - System.Reflection.ExceptionHandlingClauseOptions.Clause
  - System.Reflection.ExceptionHandlingClauseOptions.Fault
  - System.Reflection.ExceptionHandlingClauseOptions.Filter
  - System.Reflection.ExceptionHandlingClauseOptions.Finally
  langs:
  - csharp
  name: ExceptionHandlingClauseOptions
  nameWithType: ExceptionHandlingClauseOptions
  fullName: System.Reflection.ExceptionHandlingClauseOptions
  type: Enum
  summary: "Identyfikuje rodzaje klauzule obsługi wyjątków."
  remarks: "Aby zbadać klauzule obsługi wyjątków w metodzie, należy uzyskać <xref:System.Reflection.MethodInfo>obiekt i wywołanie <xref:System.Reflection.MethodBase.GetMethodBody%2A>metodę, aby uzyskać treści metody.</xref:System.Reflection.MethodBase.GetMethodBody%2A> </xref:System.Reflection.MethodInfo> Użyj <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A>właściwość, aby uzyskać listę <xref:System.Reflection.ExceptionHandlingClause>obiektów.</xref:System.Reflection.ExceptionHandlingClause> </xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A>      > [!NOTE] > Pracy z klauzule obsługi wyjątków wymaga dogłębnej wiedzy metadanych i formatów instrukcji języka pośredniego (MSIL) firmy Microsoft. Informacje można znaleźć w dokumentacji infrastruktury języka wspólnego (CLI), szczególnie &quot;Partycji II: metadane definicji i semantyki&quot; i &quot;Partycji III: CIL instrukcji Set&quot;. Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# i wspólne normy infrastruktury języka](http://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [standardowe ECMA-335 - infrastruktury języka wspólnego (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) w witrynie sieci Web międzynarodowej Ecma."
  example:
  - "The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.  \n  \n> [!NOTE]\n>  Not all computer languages can generate Filter clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \n  \n This code is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \n  \n [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/t-system.reflection.exce_1_1.cpp)]\n [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/t-system.reflection.exce_1_1.vb)]\n [!code-cs[MethodBody#2](~/add/codesnippet/csharp/t-system.reflection.exce_1_1.cs)]  \n[!code-cpp[MethodBody#4](~/add/codesnippet/cpp/t-system.reflection.exce_1_2.cpp)]\n[!code-vb[MethodBody#4](~/add/codesnippet/visualbasic/t-system.reflection.exce_1_2.vb)]\n[!code-cs[MethodBody#4](~/add/codesnippet/csharp/t-system.reflection.exce_1_2.cs)]  \n[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/t-system.reflection.exce_1_3.cpp)]\n[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/t-system.reflection.exce_1_3.vb)]\n[!code-cs[MethodBody#5](~/add/codesnippet/csharp/t-system.reflection.exce_1_3.cs)]  \n[!code-cpp[MethodBody#7](~/add/codesnippet/cpp/t-system.reflection.exce_1_4.cpp)]\n[!code-vb[MethodBody#7](~/add/codesnippet/visualbasic/t-system.reflection.exce_1_4.vb)]\n[!code-cs[MethodBody#7](~/add/codesnippet/csharp/t-system.reflection.exce_1_4.cs)]"
  syntax:
    content: >-
      [System.Flags]

      [System.Runtime.InteropServices.ComVisible(true)]

      public enum ExceptionHandlingClauseOptions
  inheritance:
  - System.Enum
  platform:
  - net462
- uid: System.Reflection.ExceptionHandlingClauseOptions.Clause
  id: Clause
  parent: System.Reflection.ExceptionHandlingClauseOptions
  langs:
  - csharp
  name: Clause
  nameWithType: ExceptionHandlingClauseOptions.Clause
  fullName: System.Reflection.ExceptionHandlingClauseOptions.Clause
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Klauzuli akceptuje wszystkie wyjątki, które pochodzą z określonego typu."
  syntax:
    content: Clause
    return:
      type: System.Reflection.ExceptionHandlingClauseOptions
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.ExceptionHandlingClauseOptions.Fault
  id: Fault
  parent: System.Reflection.ExceptionHandlingClauseOptions
  langs:
  - csharp
  name: Fault
  nameWithType: ExceptionHandlingClauseOptions.Fault
  fullName: System.Reflection.ExceptionHandlingClauseOptions.Fault
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Klauzuli jest wykonywana w przypadku wystąpienia wyjątku, ale nie po zakończeniu przepływu sterowania normalnego."
  syntax:
    content: Fault
    return:
      type: System.Reflection.ExceptionHandlingClauseOptions
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.ExceptionHandlingClauseOptions.Filter
  id: Filter
  parent: System.Reflection.ExceptionHandlingClauseOptions
  langs:
  - csharp
  name: Filter
  nameWithType: ExceptionHandlingClauseOptions.Filter
  fullName: System.Reflection.ExceptionHandlingClauseOptions.Filter
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Klauzuli zawiera instrukcje określone przez użytkownika, które określają wyjątek należy ją ignorować (czy wykonanie normalnej powinien wznowić), są obsługiwane przez skojarzony program obsługi, czy przekazywany do klauzuli dalej."
  syntax:
    content: Filter
    return:
      type: System.Reflection.ExceptionHandlingClauseOptions
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.ExceptionHandlingClauseOptions.Finally
  id: Finally
  parent: System.Reflection.ExceptionHandlingClauseOptions
  langs:
  - csharp
  name: Finally
  nameWithType: ExceptionHandlingClauseOptions.Finally
  fullName: System.Reflection.ExceptionHandlingClauseOptions.Finally
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Klauzula jest wykonywane przy każdym opuszcza blok try, czy za pośrednictwem przepływu sterowania normalne lub z powodu nieobsługiwanego wyjątku."
  syntax:
    content: Finally
    return:
      type: System.Reflection.ExceptionHandlingClauseOptions
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Enum
  isExternal: false
  name: System.Enum
- uid: System.Reflection.ExceptionHandlingClauseOptions.Clause
  parent: System.Reflection.ExceptionHandlingClauseOptions
  isExternal: false
  name: Clause
  nameWithType: ExceptionHandlingClauseOptions.Clause
  fullName: System.Reflection.ExceptionHandlingClauseOptions.Clause
- uid: System.Reflection.ExceptionHandlingClauseOptions
  parent: System.Reflection
  isExternal: false
  name: ExceptionHandlingClauseOptions
  nameWithType: ExceptionHandlingClauseOptions
  fullName: System.Reflection.ExceptionHandlingClauseOptions
- uid: System.Reflection.ExceptionHandlingClauseOptions.Fault
  parent: System.Reflection.ExceptionHandlingClauseOptions
  isExternal: false
  name: Fault
  nameWithType: ExceptionHandlingClauseOptions.Fault
  fullName: System.Reflection.ExceptionHandlingClauseOptions.Fault
- uid: System.Reflection.ExceptionHandlingClauseOptions.Filter
  parent: System.Reflection.ExceptionHandlingClauseOptions
  isExternal: false
  name: Filter
  nameWithType: ExceptionHandlingClauseOptions.Filter
  fullName: System.Reflection.ExceptionHandlingClauseOptions.Filter
- uid: System.Reflection.ExceptionHandlingClauseOptions.Finally
  parent: System.Reflection.ExceptionHandlingClauseOptions
  isExternal: false
  name: Finally
  nameWithType: ExceptionHandlingClauseOptions.Finally
  fullName: System.Reflection.ExceptionHandlingClauseOptions.Finally
