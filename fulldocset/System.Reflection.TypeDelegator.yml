### YamlMime:ManagedReference
items:
- uid: System.Reflection.TypeDelegator
  id: TypeDelegator
  children:
  - System.Reflection.TypeDelegator.#ctor
  - System.Reflection.TypeDelegator.#ctor(System.Type)
  - System.Reflection.TypeDelegator.Assembly
  - System.Reflection.TypeDelegator.AssemblyQualifiedName
  - System.Reflection.TypeDelegator.BaseType
  - System.Reflection.TypeDelegator.FullName
  - System.Reflection.TypeDelegator.GetAttributeFlagsImpl
  - System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)
  - System.Reflection.TypeDelegator.GetCustomAttributes(System.Boolean)
  - System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)
  - System.Reflection.TypeDelegator.GetElementType
  - System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)
  - System.Reflection.TypeDelegator.GetEvents
  - System.Reflection.TypeDelegator.GetEvents(System.Reflection.BindingFlags)
  - System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)
  - System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)
  - System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)
  - System.Reflection.TypeDelegator.GetInterfaceMap(System.Type)
  - System.Reflection.TypeDelegator.GetInterfaces
  - System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)
  - System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)
  - System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.TypeDelegator.GetMethods(System.Reflection.BindingFlags)
  - System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)
  - System.Reflection.TypeDelegator.GetNestedTypes(System.Reflection.BindingFlags)
  - System.Reflection.TypeDelegator.GetProperties(System.Reflection.BindingFlags)
  - System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.TypeDelegator.GUID
  - System.Reflection.TypeDelegator.HasElementTypeImpl
  - System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  - System.Reflection.TypeDelegator.IsArrayImpl
  - System.Reflection.TypeDelegator.IsAssignableFrom(System.Reflection.TypeInfo)
  - System.Reflection.TypeDelegator.IsByRefImpl
  - System.Reflection.TypeDelegator.IsCOMObjectImpl
  - System.Reflection.TypeDelegator.IsConstructedGenericType
  - System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)
  - System.Reflection.TypeDelegator.IsPointerImpl
  - System.Reflection.TypeDelegator.IsPrimitiveImpl
  - System.Reflection.TypeDelegator.IsValueTypeImpl
  - System.Reflection.TypeDelegator.MetadataToken
  - System.Reflection.TypeDelegator.Module
  - System.Reflection.TypeDelegator.Name
  - System.Reflection.TypeDelegator.Namespace
  - System.Reflection.TypeDelegator.TypeHandle
  - System.Reflection.TypeDelegator.typeImpl
  - System.Reflection.TypeDelegator.UnderlyingSystemType
  langs:
  - csharp
  name: TypeDelegator
  nameWithType: TypeDelegator
  fullName: System.Reflection.TypeDelegator
  type: Class
  summary: "Opakowuje &lt;xref:System.Type?displayProperty=fullName&gt; obiektu delegatów metody i który <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref>."
  remarks: "Pochodzić z tego typu i Przesłoń tylko tych członków, należy podać dostosowania w plus żadnych elementów członkowskich, które są wymagane przez program i nie jest już zaimplementowany przez TypeDelegator.       TypeDelegator pochodną <xref:System.Type?displayProperty=fullName>i implementuje większość właściwości i metod <xref:System.Type>.</xref:System.Type> </xref:System.Type?displayProperty=fullName> Dla każdego elementu członkowskiego implementuje, TypeDelegator automatycznie deleguje do odpowiedniego elementu członkowskiego wewnętrznego <xref:System.Type>obiektu, który jest ona podawana jako argument konstruktora.</xref:System.Type> Tym wewnętrzny <xref:System.Type>obiektu jest narażony na wyprowadzanie klas przez `protected` <xref:System.Reflection.TypeDelegator.typeImpl>pola.</xref:System.Reflection.TypeDelegator.typeImpl> </xref:System.Type>      > [!NOTE] > Niektóre elementy członkowskie TypeDelegator mieć implementacji, nawet jeśli samych członków po prostu są dziedziczone z <xref:System.Type>.</xref:System.Type> W takich przypadkach podano wykonania przez przesłoniętych `protected` metodę, która ma nazwę, która kończy się na &quot;Impl&quot;. Na przykład wdrożenia dla wszystkich przeciążeń <xref:System.Reflection.TypeDelegator.GetMethod%2A>metody jest dostarczany przez zastąpiona <xref:System.Reflection.TypeDelegator.GetMethodImpl%2A>— Metoda.</xref:System.Reflection.TypeDelegator.GetMethodImpl%2A> </xref:System.Reflection.TypeDelegator.GetMethod%2A> Wdrożenia dla dziedziczone właściwości, takie jak <xref:System.Type.IsPublic%2A>i <xref:System.Type.IsNestedAssembly%2A>jest dostarczany przez zastąpiona <xref:System.Reflection.TypeDelegator.GetAttributeFlagsImpl%2A>— Metoda.</xref:System.Reflection.TypeDelegator.GetAttributeFlagsImpl%2A> </xref:System.Type.IsNestedAssembly%2A> </xref:System.Type.IsPublic%2A>       Wyprowadzanie klas może zapewnić konstruktora publicznego, który przyjmuje <xref:System.Type>obiektu jako jego parametr i po prostu przekazuje, które do obiektu <xref:System.Reflection.TypeDelegator.%23ctor%28System.Type%29>konstruktora, lub można ustawić wewnętrznej <xref:System.Type>obiektu w inny sposób.</xref:System.Type> </xref:System.Reflection.TypeDelegator.%23ctor%28System.Type%29> </xref:System.Type>       Jeśli klasa pochodna używa elementu członkowskiego, który nie jest implementowana przez TypeDelegator, musi zastąpić ten element członkowski i zapewniać implementację. Najprostsza implementacja jest wywoływanie odpowiadającego mu członka w wewnętrznej <xref:System.Type>Obiekt udostępniany przez <xref:System.Reflection.TypeDelegator.typeImpl>pola, ale może zapewnić implementacji wymaganych przez aplikację.</xref:System.Reflection.TypeDelegator.typeImpl> </xref:System.Type> Nie jest konieczne do zastąpienia tych elementów członkowskich, jeśli nie są używane przez aplikację lub przez bibliotekę funkcji wywołania aplikacji (na przykład przez <xref:System.CodeDom.CodeTypeReference.%23ctor%28System.Type%29?displayProperty=fullName>konstruktora).</xref:System.CodeDom.CodeTypeReference.%23ctor%28System.Type%29?displayProperty=fullName>       Następujące metody wirtualne (`Overridable` metod w języku Visual Basic) z <xref:System.Type>nie są zaimplementowane przez TypeDelegator: <xref:System.Type.MakeGenericType%2A>, <xref:System.Type.GetGenericTypeDefinition%2A> <xref:System.Type.GetGenericArguments%2A>, <xref:System.Type.GetGenericParameterConstraints%2A> <xref:System.Type.MakeArrayType%2A>, <xref:System.Type.MakeByRefType%2A> <xref:System.Type.MakePointerType%2A>, <xref:System.Type.GetEnumNames%2A> <xref:System.Type.GetEnumValues%2A>, <xref:System.Type.GetEnumUnderlyingType%2A> <xref:System.Type.GetTypeCodeImpl%2A>, <xref:System.Type.IsEnumDefined%2A> <xref:System.Type.IsEquivalentTo%2A>.</xref:System.Type.IsEquivalentTo%2A> </xref:System.Type.IsEnumDefined%2A> </xref:System.Type.GetTypeCodeImpl%2A> </xref:System.Type.GetEnumUnderlyingType%2A> </xref:System.Type.GetEnumValues%2A> </xref:System.Type.GetEnumNames%2A> </xref:System.Type.MakePointerType%2A> </xref:System.Type.MakeByRefType%2A> </xref:System.Type.MakeArrayType%2A> </xref:System.Type.GetGenericParameterConstraints%2A> </xref:System.Type.GetGenericArguments%2A> </xref:System.Type.GetGenericTypeDefinition%2A> </xref:System.Type.MakeGenericType%2A> </xref:System.Type>       Następujące właściwości wirtualnych (`Overridable` właściwości w języku Visual Basic) z <xref:System.Type>nie są zaimplementowane przez TypeDelegator: <xref:System.Type.IsGenericType%2A>, <xref:System.Type.IsGenericTypeDefinition%2A> <xref:System.Type.IsGenericParameter%2A>, <xref:System.Type.ContainsGenericParameters%2A> <xref:System.Type.DeclaringMethod%2A>, <xref:System.Type.GenericParameterAttributes%2A> <xref:System.Type.GenericParameterPosition%2A>, <xref:System.Type.IsSecurityCritical%2A> <xref:System.Type.IsSecuritySafeCritical%2A>, <xref:System.Type.IsSecurityTransparent%2A>.</xref:System.Type.IsSecurityTransparent%2A> </xref:System.Type.IsSecuritySafeCritical%2A> </xref:System.Type.IsSecurityCritical%2A> </xref:System.Type.GenericParameterPosition%2A> </xref:System.Type.GenericParameterAttributes%2A> </xref:System.Type.DeclaringMethod%2A> </xref:System.Type.ContainsGenericParameters%2A> </xref:System.Type.IsGenericParameter%2A> </xref:System.Type.IsGenericTypeDefinition%2A> </xref:System.Type.IsGenericType%2A> </xref:System.Type>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class TypeDelegator : System.Reflection.TypeInfo
  inheritance:
  - System.Reflection.TypeInfo
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.#ctor
  id: '#ctor'
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: TypeDelegator()
  nameWithType: TypeDelegator.TypeDelegator()
  fullName: System.Reflection.TypeDelegator.TypeDelegator()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Reflection.TypeDelegator&quot;> </xref> klasy przy użyciu domyślnej właściwości."
  syntax:
    content: protected TypeDelegator ();
    parameters: []
  overload: System.Reflection.TypeDelegator.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.#ctor(System.Type)
  id: '#ctor(System.Type)'
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: TypeDelegator(Type)
  nameWithType: TypeDelegator.TypeDelegator(Type)
  fullName: System.Reflection.TypeDelegator.TypeDelegator(Type)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Reflection.TypeDelegator&quot;> </xref> określenie hermetyzowany wystąpienia klasy."
  remarks: "Ten konstruktor jest wywoływany z klasy do wygenerowania na podstawie delegata `Type` obiekt definiujący metody klasy."
  syntax:
    content: public TypeDelegator (Type delegatingType);
    parameters:
    - id: delegatingType
      type: System.Type
      description: "Wystąpienie klasy <xref:System.Type>która hermetyzuje wywołanie do metody obiektu.</xref:System.Type>"
  overload: System.Reflection.TypeDelegator.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>delegatingType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.Assembly
  id: Assembly
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: Assembly
  nameWithType: TypeDelegator.Assembly
  fullName: System.Reflection.TypeDelegator.Assembly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Pobiera zestaw implementowany typ."
  remarks: "Zestawy są jednostki wdrożenia w środowisku uruchomieniowym języka. Zestawy Ustanów przestrzeń nazw dla przetwarzanie żądań i określić, które zasoby są widoczne zewnętrznie i który jest dostępny w obrębie zestawu. Środowisko uruchomieniowe języka wspólnego można określić i zlokalizować zestawu dla każdego uruchomionego obiektu."
  syntax:
    content: public override System.Reflection.Assembly Assembly { get; }
    return:
      type: System.Reflection.Assembly
      description: "&lt;Xref:System.Reflection.Assembly?displayProperty=fullName&gt; reprezentujący zestaw implementowany typ obiektu."
  overload: System.Reflection.TypeDelegator.Assembly*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.AssemblyQualifiedName
  id: AssemblyQualifiedName
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: AssemblyQualifiedName
  nameWithType: TypeDelegator.AssemblyQualifiedName
  fullName: System.Reflection.TypeDelegator.AssemblyQualifiedName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Pobiera pełną nazwę zestawu."
  syntax:
    content: public override string AssemblyQualifiedName { get; }
    return:
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> zawierający w pełni kwalifikowana nazwa zestawu."
  overload: System.Reflection.TypeDelegator.AssemblyQualifiedName*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.BaseType
  id: BaseType
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: BaseType
  nameWithType: TypeDelegator.BaseType
  fullName: System.Reflection.TypeDelegator.BaseType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Pobiera typ bazowy dla bieżącego typu."
  remarks: "Typ podstawowy jest typem, po którym dziedziczy bezpośrednio tego typu. Ponieważ <xref:System.Object>typu klasy jest ostatecznym klasą podstawową innych typów, jest tylko typ, który nie ma typu podstawowego.</xref:System.Object> W takim przypadku `null` jest zwracana jako typ bazowy `Object` typu."
  syntax:
    content: public override Type BaseType { get; }
    return:
      type: System.Type
      description: "Typ podstawowy dla typu."
  overload: System.Reflection.TypeDelegator.BaseType*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.FullName
  id: FullName
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: FullName
  nameWithType: TypeDelegator.FullName
  fullName: System.Reflection.TypeDelegator.FullName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Pobiera pełną nazwę typu zaimplementowany."
  remarks: "Ciąg zawierający w pełni kwalifikowana nazwa bieżącego `TypeDelegator`."
  syntax:
    content: public override string FullName { get; }
    return:
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> zawierający w pełni kwalifikowana nazwa typu."
  overload: System.Reflection.TypeDelegator.FullName*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetAttributeFlagsImpl
  id: GetAttributeFlagsImpl
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetAttributeFlagsImpl()
  nameWithType: TypeDelegator.GetAttributeFlagsImpl()
  fullName: System.Reflection.TypeDelegator.GetAttributeFlagsImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Pobiera atrybuty przypisane do <xref uid=&quot;langword_csharp_TypeDelegator&quot; name=&quot;TypeDelegator&quot; href=&quot;&quot;> </xref>."
  remarks: "Ta metoda służy do określenia, czy `TypeDelegator` jest abstrakcyjna, publiczny i tak dalej."
  syntax:
    content: protected override System.Reflection.TypeAttributes GetAttributeFlagsImpl ();
    parameters: []
    return:
      type: System.Reflection.TypeAttributes
      description: "A <xref uid=&quot;langword_csharp_TypeAttributes&quot; name=&quot;TypeAttributes&quot; href=&quot;&quot;> </xref> obiekt reprezentujący flagi atrybutu implementacji."
  overload: System.Reflection.TypeDelegator.GetAttributeFlagsImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  id: GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  nameWithType: TypeDelegator.GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  fullName: System.Reflection.TypeDelegator.GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Pobiera konstruktora, który zaimplementowana <xref uid=&quot;langword_csharp_TypeDelegator&quot; name=&quot;TypeDelegator&quot; href=&quot;&quot;> </xref>."
  remarks: "`callConvention` Parametr wskazuje Konwencja wywoływania dla punktu wejścia. Jeśli nie Konwencja wywoływania jest określony, domyślnie <xref:System.Reflection.CallingConventions>wartość `Standard` jest używany.</xref:System.Reflection.CallingConventions>"
  syntax:
    content: protected override System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Maska bitów, które ma wpływ na sposób, w której jest przeprowadzane wyszukiwanie. Wartość jest kombinacją flag bitowych zero lub więcej z <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>."
    - id: binder
      type: System.Reflection.Binder
      description: "Obiekt, który umożliwia powiązanie koercja argumentu typy wywołania elementów członkowskich i pobieranie <xref uid=&quot;langword_csharp_MemberInfo&quot; name=&quot;MemberInfo&quot; href=&quot;&quot;> </xref> obiektów za pomocą odbicia. Jeśli `binder` jest <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, używany jest domyślny integrator."
    - id: callConvention
      type: System.Reflection.CallingConventions
      description: "Konwencje wywoływania."
    - id: types
      type: System.Type[]
      description: "Tablica typu <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref> zawierającego listę liczba parametrów, kolejność i typów. Typy nie mogą być <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>; Użyj odpowiedniego <xref uid=&quot;langword_csharp_GetMethod&quot; name=&quot;GetMethod&quot; href=&quot;&quot;> </xref> metody lub pusta tablica, aby wyszukać metody bez parametrów."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "Tablica typu <xref uid=&quot;langword_csharp_ParameterModifier&quot; name=&quot;ParameterModifier&quot; href=&quot;&quot;> </xref> mających taką samą długość jak `types` tablicy, której elementy reprezentuje atrybuty skojarzone z parametrami metody get."
    return:
      type: System.Reflection.ConstructorInfo
      description: "A <xref uid=&quot;langword_csharp_ConstructorInfo&quot; name=&quot;ConstructorInfo&quot; href=&quot;&quot;> </xref> obiektu metodę, która odpowiada określonym kryteriom lub <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Jeśli nie można odnaleźć dopasowania."
  overload: System.Reflection.TypeDelegator.GetConstructorImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)
  id: GetConstructors(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetConstructors(BindingFlags)
  nameWithType: TypeDelegator.GetConstructors(BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetConstructors(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Zwraca tablicę <xref:System.Reflection.ConstructorInfo>obiekty reprezentujące konstruktorów zdefiniowanych dla typu opakowane przez bieżący <xref href=&quot;System.Reflection.TypeDelegator&quot;> </xref>.</xref:System.Reflection.ConstructorInfo>"
  remarks: "Klasa inicjatory są dostępne tylko za pośrednictwem `GetMember`, `GetMembers`, `FindMembers`, i `GetConstructors`."
  syntax:
    content: public override System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Maska bitów, które ma wpływ na sposób, w której jest przeprowadzane wyszukiwanie. Wartość jest kombinacją flag bitowych zero lub więcej z <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>."
    return:
      type: System.Reflection.ConstructorInfo[]
      description: "Tablica typu <xref uid=&quot;langword_csharp_ConstructorInfo&quot; name=&quot;ConstructorInfo&quot; href=&quot;&quot;> </xref> zawierających określony konstruktorów zdefiniowanych dla tej klasy. Jeśli zdefiniowano ma konstruktorów, zwracana jest pusta tablica. W zależności od wartości podanego parametru tylko konstruktorów publicznych lub konstruktorów publicznych i niepublicznych zostaną zwrócone."
  overload: System.Reflection.TypeDelegator.GetConstructors*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetCustomAttributes(System.Boolean)
  id: GetCustomAttributes(System.Boolean)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetCustomAttributes(Boolean)
  nameWithType: TypeDelegator.GetCustomAttributes(Boolean)
  fullName: System.Reflection.TypeDelegator.GetCustomAttributes(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Zwraca wszystkie atrybuty niestandardowe zdefiniowane dla tego typu, określająca, czy przeszukać łańcuch dziedziczenia tego typu."
  syntax:
    content: public override object[] GetCustomAttributes (bool inherit);
    parameters:
    - id: inherit
      type: System.Boolean
      description: "Określa, czy przeszukać łańcuch dziedziczenia tego typu w celu znalezienia atrybutów."
    return:
      type: System.Object[]
      description: "Tablica zawierająca wszystkie atrybuty niestandardowe zdefiniowane dla tego typu obiektów."
  overload: System.Reflection.TypeDelegator.GetCustomAttributes*
  exceptions:
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "Nie można załadować typu atrybutu niestandardowego."
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)
  id: GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetCustomAttributes(Type,Boolean)
  nameWithType: TypeDelegator.GetCustomAttributes(Type,Boolean)
  fullName: System.Reflection.TypeDelegator.GetCustomAttributes(Type,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Zwraca tablicę identyfikowanych według typu atrybutów niestandardowych."
  syntax:
    content: public override object[] GetCustomAttributes (Type attributeType, bool inherit);
    parameters:
    - id: attributeType
      type: System.Type
      description: "Tablicę identyfikowanych według typu atrybutów niestandardowych."
    - id: inherit
      type: System.Boolean
      description: "Określa, czy przeszukać łańcuch dziedziczenia tego typu w celu znalezienia atrybutów."
    return:
      type: System.Object[]
      description: "Tablica obiektów zawierających atrybuty niestandardowe zdefiniowane w tym typie zgodne <code> attributeType </code> parametru określająca, czy przeszukać łańcuch dziedziczenia tego typu, lub <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Jeśli żadne atrybuty niestandardowe są zdefiniowane w tym typie."
  overload: System.Reflection.TypeDelegator.GetCustomAttributes*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>attributeType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "Nie można załadować typu atrybutu niestandardowego."
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetElementType
  id: GetElementType
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetElementType()
  nameWithType: TypeDelegator.GetElementType()
  fullName: System.Reflection.TypeDelegator.GetElementType()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Zwraca <xref:System.Type>obiektu ujęty lub odwołuje się do bieżącego tablicy, wskaźnika lub ByRef.</xref:System.Type>"
  syntax:
    content: public override Type GetElementType ();
    parameters: []
    return:
      type: System.Type
      description: "<xref:System.Type>Obiektu ujęty lub odwołuje się do bieżącego tablicy wskaźnika lub <xref uid=&quot;langword_csharp_ByRef&quot; name=&quot;ByRef&quot; href=&quot;&quot;> </xref>, lub <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Jeśli bieżące <xref:System.Type>nie jest tablicą, wskaźnika lub a <xref uid=&quot;langword_csharp_ByRef&quot; name=&quot;ByRef&quot; href=&quot;&quot;> </xref>.</xref:System.Type> </xref:System.Type>"
  overload: System.Reflection.TypeDelegator.GetElementType*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)
  id: GetEvent(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetEvent(String,BindingFlags)
  nameWithType: TypeDelegator.GetEvent(String,BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetEvent(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Zwraca określonego zdarzenia."
  remarks: "Jeśli `bindingAttr` jest <xref:System.Reflection.BindingFlags>.`IgnoreCase`, w przypadku `name` parametru jest ignorowana.</xref:System.Reflection.BindingFlags>"
  syntax:
    content: public override System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "Nazwa zdarzenia do pobrania."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Maska bitów, które ma wpływ na sposób, w której jest przeprowadzane wyszukiwanie. Wartość jest kombinacją flag bitowych zero lub więcej z <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>."
    return:
      type: System.Reflection.EventInfo
      description: "<xref:System.Reflection.EventInfo>Obiekt reprezentujący zdarzenie zadeklarowane lub dziedziczone przez ten typ o określonej nazwie.</xref:System.Reflection.EventInfo> Ta metoda zwraca <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> przypadku nieznalezienia Brak takiego zdarzenia."
  overload: System.Reflection.TypeDelegator.GetEvent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetEvents
  id: GetEvents
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetEvents()
  nameWithType: TypeDelegator.GetEvents()
  fullName: System.Reflection.TypeDelegator.GetEvents()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Zwraca tablicę <xref:System.Reflection.EventInfo>obiektów reprezentującą wszystkie zdarzenia publiczne zadeklarowany lub dziedziczone przez bieżący <xref uid=&quot;langword_csharp_TypeDelegator&quot; name=&quot;TypeDelegator&quot; href=&quot;&quot;> </xref>.</xref:System.Reflection.EventInfo>"
  syntax:
    content: public override System.Reflection.EventInfo[] GetEvents ();
    parameters: []
    return:
      type: System.Reflection.EventInfo[]
      description: "Zwraca tablicę typu <xref uid=&quot;langword_csharp_EventInfo&quot; name=&quot;EventInfo&quot; href=&quot;&quot;> </xref> zawierający wszystkie zdarzenia zadeklarowane lub dziedziczone przez bieżący typ. Jeśli nie ma żadnych zdarzeń, zwracana jest pusta tablica."
  overload: System.Reflection.TypeDelegator.GetEvents*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetEvents(System.Reflection.BindingFlags)
  id: GetEvents(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetEvents(BindingFlags)
  nameWithType: TypeDelegator.GetEvents(BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetEvents(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Zwraca zdarzenia określone w <code> bindingAttr </code> zadeklarowany lub dziedziczone przez bieżący <xref uid=&quot;langword_csharp_TypeDelegator&quot; name=&quot;TypeDelegator&quot; href=&quot;&quot;> </xref>."
  syntax:
    content: public override System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Maska bitów, które ma wpływ na sposób, w której jest przeprowadzane wyszukiwanie. Wartość jest kombinacją flag bitowych zero lub więcej z <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>."
    return:
      type: System.Reflection.EventInfo[]
      description: "Tablica typu <xref uid=&quot;langword_csharp_EventInfo&quot; name=&quot;EventInfo&quot; href=&quot;&quot;> </xref> zawierający zdarzenia określone w <code> bindingAttr </code>. Jeśli nie ma żadnych zdarzeń, zwracana jest pusta tablica."
  overload: System.Reflection.TypeDelegator.GetEvents*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)
  id: GetField(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetField(String,BindingFlags)
  nameWithType: TypeDelegator.GetField(String,BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetField(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Zwraca <xref:System.Reflection.FieldInfo>obiekt reprezentujący pole o określonej nazwie.</xref:System.Reflection.FieldInfo>"
  remarks: "Użyj `bindingAttr` z <xref:System.Reflection.BindingFlags>. NonPublic do zwrócenia wszystkich publicznych i niepublicznych pól.</xref:System.Reflection.BindingFlags> Użyj `BindingFlags.IgnoreCase` być ignorowana w przypadku pól, ponieważ wyszukiwanie jest domyślnie rozróżnia wielkość liter."
  syntax:
    content: public override System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "Nazwa pola można znaleźć."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Maska bitów, które ma wpływ na sposób, w której jest przeprowadzane wyszukiwanie. Wartość jest kombinacją flag bitowych zero lub więcej z <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>."
    return:
      type: System.Reflection.FieldInfo
      description: "A <xref uid=&quot;langword_csharp_FieldInfo&quot; name=&quot;FieldInfo&quot; href=&quot;&quot;> </xref> obiekt reprezentujący pole zadeklarowane lub dziedziczone przez to <xref uid=&quot;langword_csharp_TypeDelegator&quot; name=&quot;TypeDelegator&quot; href=&quot;&quot;> </xref> o określonej nazwie. Zwraca <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> przypadku nieznalezienia żadne z tych pól."
  overload: System.Reflection.TypeDelegator.GetField*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)
  id: GetFields(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetFields(BindingFlags)
  nameWithType: TypeDelegator.GetFields(BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetFields(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Zwraca tablicę <xref:System.Reflection.FieldInfo>obiektów reprezentujących pola danych zdefiniowana dla typu opakowane przez bieżący <xref href=&quot;System.Reflection.TypeDelegator&quot;> </xref>.</xref:System.Reflection.FieldInfo>"
  remarks: "GetFields — metoda nie zwraca pola w określonej kolejności, takich jak alfabetycznym lub deklaracji kolejności. Kodu nie zależy od kolejności, w którym pola są zwracane, że kolejność może się różnić.       Użyj `bindingAttr` z <xref:System.Reflection.BindingFlags>. NonPublic do zwrócenia wszystkich publicznych i niepublicznych pól.</xref:System.Reflection.BindingFlags>"
  syntax:
    content: public override System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Maska bitów, które ma wpływ na sposób, w której jest przeprowadzane wyszukiwanie. Wartość jest kombinacją flag bitowych zero lub więcej z <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>."
    return:
      type: System.Reflection.FieldInfo[]
      description: "Tablica typu <xref uid=&quot;langword_csharp_FieldInfo&quot; name=&quot;FieldInfo&quot; href=&quot;&quot;> </xref> zawierające pola zadeklarowane lub dziedziczone przez bieżący <xref uid=&quot;langword_csharp_TypeDelegator&quot; name=&quot;TypeDelegator&quot; href=&quot;&quot;> </xref>. Jeśli nie ma żadnych pól dopasowane, zwracana jest pusta tablica."
  overload: System.Reflection.TypeDelegator.GetFields*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)
  id: GetInterface(System.String,System.Boolean)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetInterface(String,Boolean)
  nameWithType: TypeDelegator.GetInterface(String,Boolean)
  fullName: System.Reflection.TypeDelegator.GetInterface(String,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Zwraca określony interfejs zaimplementowany przez typ opakowany przez bieżące <xref href=&quot;System.Reflection.TypeDelegator&quot;> </xref>."
  syntax:
    content: public override Type GetInterface (string name, bool ignoreCase);
    parameters:
    - id: name
      type: System.String
      description: "Pełna nazwa interfejsu implementowanego przez bieżącą klasę."
    - id: ignoreCase
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli wielkość liter jest ignorowane. w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Type
      description: "A <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref> obiekt reprezentujący interfejs implementowany (bezpośrednio lub pośrednio) przez bieżącą klasę z w pełni kwalifikowana nazwa o określonej nazwie. Jeśli żaden interfejs, który odpowiada nazwie znaleziony, wartość null jest zwracana."
  overload: System.Reflection.TypeDelegator.GetInterface*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetInterfaceMap(System.Type)
  id: GetInterfaceMap(System.Type)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetInterfaceMap(Type)
  nameWithType: TypeDelegator.GetInterfaceMap(Type)
  fullName: System.Reflection.TypeDelegator.GetInterfaceMap(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Zwraca interfejs mapowania dla typu określonego interfejsu."
  remarks: "Mapa interfejs oznacza odwzorowania interfejs do rzeczywistego metod w klasie, który implementuje ten interfejs."
  syntax:
    content: public override System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);
    parameters:
    - id: interfaceType
      type: System.Type
      description: "<xref:System.Type>Interfejsu do pobrania mapowanie.</xref:System.Type>"
    return:
      type: System.Reflection.InterfaceMapping
      description: "<xref:System.Reflection.InterfaceMapping>Obiekt reprezentujący mapowania interfejsu <code> interfaceType </code>.</xref:System.Reflection.InterfaceMapping>"
  overload: System.Reflection.TypeDelegator.GetInterfaceMap*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetInterfaces
  id: GetInterfaces
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetInterfaces()
  nameWithType: TypeDelegator.GetInterfaces()
  fullName: System.Reflection.TypeDelegator.GetInterfaces()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Zwraca wszystkie interfejsy zaimplementowane dla bieżącej klasy i jej klas podstawowych."
  syntax:
    content: public override Type[] GetInterfaces ();
    parameters: []
    return:
      type: System.Type[]
      description: "Tablica typu <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref> zawierający wszystkie interfejsy zaimplementowane dla bieżącej klasy i jej klas podstawowych. Jeśli nie są zdefiniowane, zwracana jest pusta tablica."
  overload: System.Reflection.TypeDelegator.GetInterfaces*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)
  id: GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetMember(String,MemberTypes,BindingFlags)
  nameWithType: TypeDelegator.GetMember(String,MemberTypes,BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetMember(String,MemberTypes,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Zwraca elementy członkowskie (właściwości, metody konstruktorów, pola, zdarzeń i zagnieżdżone typy) określone przez dany <code> name </code>, <code> type </code>, i <code> bindingAttr </code>."
  remarks: "If `bindingAttr` is <xref:System.Reflection.BindingFlags>. NonPublic, wszystkie elementy członkowskie będą uznawane za.</xref:System.Reflection.BindingFlags> Jeśli nie ma zgodnych wyników, zwracana jest pusta tablica."
  syntax:
    content: public override System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "Nazwa elementu członkowskiego do pobrania."
    - id: type
      type: System.Reflection.MemberTypes
      description: "Maska bitów, które ma wpływ na sposób, w której jest przeprowadzane wyszukiwanie. Wartość jest kombinacją flag bitowych zero lub więcej z <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Typ elementów członkowskich do pobrania."
    return:
      type: System.Reflection.MemberInfo[]
      description: "Tablica typu <xref uid=&quot;langword_csharp_MemberInfo&quot; name=&quot;MemberInfo&quot; href=&quot;&quot;> </xref> zawierający wszystkie elementy członkowskie klasy i jej klasa podstawowa spełniające określone kryteria."
  overload: System.Reflection.TypeDelegator.GetMember*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)
  id: GetMembers(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetMembers(BindingFlags)
  nameWithType: TypeDelegator.GetMembers(BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetMembers(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Zwraca określony przez elementy członkowskie <code> bindingAttr </code>."
  remarks: "If `bindingAttr` is <xref:System.Reflection.BindingFlags>. NonPublic, wszystkie elementy członkowskie będą uznawane za.</xref:System.Reflection.BindingFlags> Jeśli nie ma zgodnych wyników, zwracana jest pusta tablica."
  syntax:
    content: public override System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Maska bitów, które ma wpływ na sposób, w której jest przeprowadzane wyszukiwanie. Wartość jest kombinacją flag bitowych zero lub więcej z <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>."
    return:
      type: System.Reflection.MemberInfo[]
      description: "Tablica typu <xref uid=&quot;langword_csharp_MemberInfo&quot; name=&quot;MemberInfo&quot; href=&quot;&quot;> </xref> zawierający wszystkie elementy członkowskie klasy i jej klas podstawowych, które spełniają <code> bindingAttr </code> filtru."
  overload: System.Reflection.TypeDelegator.GetMembers*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  id: GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  nameWithType: TypeDelegator.GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  fullName: System.Reflection.TypeDelegator.GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Wyszukuje określonej metody, której parametry są zgodne określone typy argumentów i Modyfikatory korzystanie z określonymi ograniczeniami wiązania i określonej konwencji wywoływania."
  remarks: "`callConvention` Parametr wskazuje Konwencja wywoływania dla punktu wejścia. Jeśli nie <xref:System.Reflection.CallingConventions>jest określony, domyślnie `CallingConventions` wartość `Standard` jest używany.</xref:System.Reflection.CallingConventions>"
  syntax:
    content: protected override System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: name
      type: System.String
      description: "Nazwa metody."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Maska bitów, które ma wpływ na sposób, w której jest przeprowadzane wyszukiwanie. Wartość jest kombinacją flag bitowych zero lub więcej z <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>."
    - id: binder
      type: System.Reflection.Binder
      description: "Obiekt, który umożliwia powiązanie koercja argumentu typy wywołania elementów członkowskich i pobieranie <xref uid=&quot;langword_csharp_MemberInfo&quot; name=&quot;MemberInfo&quot; href=&quot;&quot;> </xref> obiektów za pomocą odbicia. Jeśli `binder` jest <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, używany jest domyślny integrator."
    - id: callConvention
      type: System.Reflection.CallingConventions
      description: "Konwencje wywoływania."
    - id: types
      type: System.Type[]
      description: "Tablica typu <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref> zawierającego listę liczba parametrów, kolejność i typów. Typy nie mogą być <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>; Użyj odpowiedniego <xref uid=&quot;langword_csharp_GetMethod&quot; name=&quot;GetMethod&quot; href=&quot;&quot;> </xref> metody lub pusta tablica, aby wyszukać metody bez parametrów."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "Tablica typu <xref uid=&quot;langword_csharp_ParameterModifier&quot; name=&quot;ParameterModifier&quot; href=&quot;&quot;> </xref> mających taką samą długość jak `types` tablicy, której elementy reprezentuje atrybuty skojarzone z parametrami metody get."
    return:
      type: System.Reflection.MethodInfo
      description: "A <xref uid=&quot;langword_csharp_MethodInfoInfo&quot; name=&quot;MethodInfoInfo&quot; href=&quot;&quot;> </xref> obiektu dla metody implementacji odpowiadającego określonym kryteriom lub <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Jeśli nie można odnaleźć dopasowania."
  overload: System.Reflection.TypeDelegator.GetMethodImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetMethods(System.Reflection.BindingFlags)
  id: GetMethods(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetMethods(BindingFlags)
  nameWithType: TypeDelegator.GetMethods(BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetMethods(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Zwraca tablicę <xref:System.Reflection.MethodInfo>obiekty reprezentujące określonych metod typu opakowane przez bieżący <xref href=&quot;System.Reflection.TypeDelegator&quot;> </xref>.</xref:System.Reflection.MethodInfo>"
  syntax:
    content: public override System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Maska bitów, które ma wpływ na sposób, w której jest przeprowadzane wyszukiwanie. Wartość jest kombinacją flag bitowych zero lub więcej z <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>."
    return:
      type: System.Reflection.MethodInfo[]
      description: "Tablica <xref uid=&quot;langword_csharp_MethodInfo&quot; name=&quot;MethodInfo&quot; href=&quot;&quot;> </xref> obiekty reprezentujące metody zdefiniowane w tym <xref uid=&quot;langword_csharp_TypeDelegator&quot; name=&quot;TypeDelegator&quot; href=&quot;&quot;> </xref>."
  overload: System.Reflection.TypeDelegator.GetMethods*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)
  id: GetNestedType(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetNestedType(String,BindingFlags)
  nameWithType: TypeDelegator.GetNestedType(String,BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetNestedType(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Zwraca zagnieżdżony typ określony przez <code> name </code> i <code> bindingAttr </code> zadeklarowany lub dziedziczone przez ten typ reprezentowany przez bieżący <xref href=&quot;System.Reflection.TypeDelegator&quot;> </xref>."
  syntax:
    content: public override Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "Nazwa typu zagnieżdżonego."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Maska bitów, które ma wpływ na sposób, w której jest przeprowadzane wyszukiwanie. Wartość jest kombinacją flag bitowych zero lub więcej z <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>."
    return:
      type: System.Type
      description: "A <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref> obiekt reprezentujący typu zagnieżdżonego."
  overload: System.Reflection.TypeDelegator.GetNestedType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetNestedTypes(System.Reflection.BindingFlags)
  id: GetNestedTypes(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetNestedTypes(BindingFlags)
  nameWithType: TypeDelegator.GetNestedTypes(BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetNestedTypes(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Zwraca zagnieżdżone typy określone w <code> bindingAttr </code> zadeklarowany lub dziedziczone przez ten typ opakowany przez bieżące <xref href=&quot;System.Reflection.TypeDelegator&quot;> </xref>."
  syntax:
    content: public override Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Maska bitów, które ma wpływ na sposób, w której jest przeprowadzane wyszukiwanie. Wartość jest kombinacją flag bitowych zero lub więcej z <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>."
    return:
      type: System.Type[]
      description: "Tablica typu <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref> zawierający typy zagnieżdżone."
  overload: System.Reflection.TypeDelegator.GetNestedTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetProperties(System.Reflection.BindingFlags)
  id: GetProperties(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetProperties(BindingFlags)
  nameWithType: TypeDelegator.GetProperties(BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetProperties(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Zwraca tablicę <xref:System.Reflection.PropertyInfo>obiekty reprezentujące właściwości typu opakowane przez bieżący <xref href=&quot;System.Reflection.TypeDelegator&quot;> </xref>.</xref:System.Reflection.PropertyInfo>"
  syntax:
    content: public override System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Maska bitów, które ma wpływ na sposób, w której jest przeprowadzane wyszukiwanie. Wartość jest kombinacją flag bitowych zero lub więcej z <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>."
    return:
      type: System.Reflection.PropertyInfo[]
      description: "Tablica <xref uid=&quot;langword_csharp_PropertyInfo&quot; name=&quot;PropertyInfo&quot; href=&quot;&quot;> </xref> obiekty reprezentujące właściwości zdefiniowane w tym <xref uid=&quot;langword_csharp_TypeDelegator&quot; name=&quot;TypeDelegator&quot; href=&quot;&quot;> </xref>."
  overload: System.Reflection.TypeDelegator.GetProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  id: GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GetPropertyImpl(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  nameWithType: TypeDelegator.GetPropertyImpl(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  fullName: System.Reflection.TypeDelegator.GetPropertyImpl(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "W przypadku przesłonięcia w klasie pochodnej, wyszukuje dla określonej właściwości, którego parametry są zgodne określone typy argumentów i Modyfikatory korzystanie z określonymi ograniczeniami wiązania."
  syntax:
    content: protected override System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: name
      type: System.String
      description: "Właściwości do pobrania."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Maska bitów, które ma wpływ na sposób, w której jest przeprowadzane wyszukiwanie. Wartość jest kombinacją flag bitowych zero lub więcej z <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>."
    - id: binder
      type: System.Reflection.Binder
      description: "Obiekt, który umożliwia powiązanie koercja argumentu typy wywołania elementów członkowskich i pobieranie <xref uid=&quot;langword_csharp_MemberInfo&quot; name=&quot;MemberInfo&quot; href=&quot;&quot;> </xref> obiektów za pomocą odbicia. Jeśli `binder` jest <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, używany jest domyślny integrator. See <xref href=&quot;System.Reflection.Binder&quot;></xref>."
    - id: returnType
      type: System.Type
      description: "Zwracany typ właściwości."
    - id: types
      type: System.Type[]
      description: "Lista typów parametrów. Lista reprezentuje numer zamówienia i typy parametrów. Typów nie może mieć wartości null; użyć odpowiednich <xref uid=&quot;langword_csharp_GetMethod&quot; name=&quot;GetMethod&quot; href=&quot;&quot;> </xref> metody lub pusta tablica, aby wyszukać metody bez parametrów."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "Tablica taką samą długość jak typy z elementami, które reprezentuje atrybuty skojarzone z parametrami metody get."
    return:
      type: System.Reflection.PropertyInfo
      description: "A <xref:System.Reflection.PropertyInfo>obiektu dla właściwości, który jest zgodny z określonymi kryteriami, lub wartość null, jeśli nie można odnaleźć dopasowania.</xref:System.Reflection.PropertyInfo>"
  overload: System.Reflection.TypeDelegator.GetPropertyImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.GUID
  id: GUID
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: GUID
  nameWithType: TypeDelegator.GUID
  fullName: System.Reflection.TypeDelegator.GUID
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Pobiera identyfikator GUID (unikatowy identyfikator globalny) zaimplementowanym typu."
  remarks: "Globalnie unikatowy identyfikator (GUID) jest ciągiem 128-bitowego Unikatowy identyfikator używany do identyfikowania klasą lub interfejsem. Jest szczególnie przydatne w przypadku współdziałanie Microsoft .NET Framework i modelu COM."
  syntax:
    content: public override Guid GUID { get; }
    return:
      type: System.Guid
      description: "IDENTYFIKATOR GUID."
  overload: System.Reflection.TypeDelegator.GUID*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.HasElementTypeImpl
  id: HasElementTypeImpl
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: HasElementTypeImpl()
  nameWithType: TypeDelegator.HasElementTypeImpl()
  fullName: System.Reflection.TypeDelegator.HasElementTypeImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Pobiera wartość wskazującą czy bieżące <xref:System.Type>obejmuje lub odwołuje się do innego typu; czy bieżący <xref:System.Type>jest tablicą, wskaźnika lub ByRef.</xref:System.Type> </xref:System.Type>"
  syntax:
    content: protected override bool HasElementTypeImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli <xref:System.Type>jest tablicą, wskaźnika lub ByRef; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Type>"
  overload: System.Reflection.TypeDelegator.HasElementTypeImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  id: InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  nameWithType: TypeDelegator.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  fullName: System.Reflection.TypeDelegator.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Wywołuje określony element członkowski. Metodę, która ma zostać wywołana musi być dostępna i udostępnia specyficzny dopasowania z określona lista argumentów, w obszarze ograniczenia określonych atrybutów integratora i wywołanie."
  remarks: "Metoda zostanie wywołany, gdy są spełnione oba poniższe warunki: - liczba parametrów w deklaracji metody jest równa liczbie argumentów określona lista argumentów (chyba że argumenty domyślne są zdefiniowane w elemencie członkowskim).      -Typ poszczególnych argumentów można przekonwertować przez obiekt wiążący z typem parametru.       Obiekt wiążący znajdzie zgodnego metody. Tych metod znajdują się oparte na typie powiązania żądanie (`BindingFlags.MethodInvoke`, `BindingFlags.GetProperties`i tak dalej). Zbiór metod są filtrowane według nazwy, liczba argumentów i zestaw Modyfikatory wyszukiwania zdefiniowane w obiekt wiążący.       Po wybraniu metody, zostanie wywołany. Ułatwienia dostępu, zostanie sprawdzony w tym momencie. Wyszukiwanie może kontrolować, które zestaw metod są przeszukiwane zależności atrybutu dostępności skojarzonego z metodą. <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=fullName>Metoda jest odpowiedzialna za wybranie wywoływanej metody.</xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=fullName> Domyślnego integratora wybierze najbardziej zgodne.      > [!NOTE] > Ograniczenia dostępu są ignorowane w przypadku całkowicie zaufanego kodu. Oznacza to konstruktory prywatne, pola, metody i właściwości są dostępne i wywoływane przy użyciu odbicia, jeśli kod jest w pełni zaufany.       Obecnie `InvokeMember` wykonuje semantyki odbicia Microsoft .NET Framework dla każdego typu obiektu.       Jeśli element określony przez nazwę jest tablicą i `BindingFlags.GetField` flaga jest ustawiona na `invokeAttr`, `args` tablicy określa elementy, których wartości, które mają zostać zwrócone. Na przykład następujące wywołanie za pośrednictwem `Type` obiektu `t` zwraca wartość pierwszego elementu tablicy ciągów MyArray, który jest elementem członkowskim obiektu wywołującego: `String ret = (String) t.InvokeMember (&quot;MyArray&quot;, BindingFlags.GetField, null, this, new Variant[]{0});` można użyć `InvokeMember` można ustawić co najmniej jeden element w tablicy elementu członkowskiego. Wszystkie elementy są ustawiane na tę samą wartość. `args` Tablicy muszą być sformatowane następująco: ```   {index1,       index2,, value}   ``` na przykład, aby ustawić pierwszy członek MyArray z poprzedniego przykładu, ma następującą składnię:```   t.InvokeMember (&quot;MyArray&quot;, BindingFlags.SetField, null, this, new       Variant[]{0,&quot;Updated&quot;});   ```"
  syntax:
    content: public override object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
    parameters:
    - id: name
      type: System.String
      description: "Nazwa elementu członkowskiego do wywołania. Może to być Konstruktor, metody, właściwości lub pola. Jeśli ciąg pusty (&quot;&quot;) jest przekazywana domyślny element członkowski jest wywoływany."
    - id: invokeAttr
      type: System.Reflection.BindingFlags
      description: 'Atrybut wywołania. This must be one of the following <xref href=&quot;System.Reflection.BindingFlags&quot;></xref> : <xref uid=&quot;langword_csharp_InvokeMethod&quot; name=&quot;InvokeMethod&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_CreateInstance&quot; name=&quot;CreateInstance&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Static&quot; name=&quot;Static&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_GetField&quot; name=&quot;GetField&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_SetField&quot; name=&quot;SetField&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_GetProperty&quot; name=&quot;GetProperty&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_SetProperty&quot; name=&quot;SetProperty&quot; href=&quot;&quot;></xref>. Należy określić atrybut odpowiedniego wywołania. Jeśli statyczny element członkowski ma zostać wywołana, <xref uid=&quot;langword_csharp_Static&quot; name=&quot;Static&quot; href=&quot;&quot;> </xref> musi zostać ustawiona flaga.'
    - id: binder
      type: System.Reflection.Binder
      description: "Obiekt, który umożliwia powiązanie koercja argumentu typy wywołania elementów członkowskich i pobieranie <xref uid=&quot;langword_csharp_MemberInfo&quot; name=&quot;MemberInfo&quot; href=&quot;&quot;> </xref> obiektów za pomocą odbicia. Jeśli `binder` jest <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, używany jest domyślny integrator. See <xref href=&quot;System.Reflection.Binder&quot;></xref>."
    - id: target
      type: System.Object
      description: "Obiekt do wywołania określonego elementu członkowskiego."
    - id: args
      type: System.Object[]
      description: "Tablica typu <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> zawiera liczby, kolejność i typy parametrów elementu członkowskiego, do wywołania. Jeśli `args` zawiera niezainicjowaną <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, będzie traktowane jako puste, które z domyślnego integratora można poszerzyć 0, 0,0 lub ciąg."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "Tablica typu <xref uid=&quot;langword_csharp_ParameterModifer&quot; name=&quot;ParameterModifer&quot; href=&quot;&quot;> </xref> czyli taką samą długość jak `args`, z elementami, które reprezentuje atrybuty skojarzone z argumentów elementu członkowskiego do wywołania. Parametr ma atrybuty skojarzone z nim w podpisie elementu członkowskiego. Dla elementu ByRef, użyj <xref uid=&quot;langword_csharp_ParameterModifer.ByRef&quot; name=&quot;ParameterModifer.ByRef&quot; href=&quot;&quot;> </xref>i none, użyj <xref uid=&quot;langword_csharp_ParameterModifer.None&quot; name=&quot;ParameterModifer.None&quot; href=&quot;&quot;> </xref>. Domyślny integrator dokładne dopasowywanie na te. Atrybuty, takie jak <xref uid=&quot;langword_csharp_In&quot; name=&quot;In&quot; href=&quot;&quot;> </xref> i <xref uid=&quot;langword_csharp_InOut&quot; name=&quot;InOut&quot; href=&quot;&quot;> </xref> nie są używane w powiązaniu i można je wyświetlać za pomocą <xref uid=&quot;langword_csharp_ParameterInfo&quot; name=&quot;ParameterInfo&quot; href=&quot;&quot;> </xref>."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "Wystąpienie <xref uid=&quot;langword_csharp_CultureInfo&quot; name=&quot;CultureInfo&quot; href=&quot;&quot;> </xref> używane do sterowania koercja typów. Jest to konieczne, na przykład można przekonwertować na ciąg przedstawiający 1000 do <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> wartości, ponieważ 1000 jest inaczej reprezentowany przez innych kultur. Jeśli `culture` jest <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_CultureInfo&quot; name=&quot;CultureInfo&quot; href=&quot;&quot;> </xref> dla bieżącego wątku <xref uid=&quot;langword_csharp_CultureInfo&quot; name=&quot;CultureInfo&quot; href=&quot;&quot;> </xref> jest używany."
    - id: namedParameters
      type: System.String[]
      description: "Tablica typu <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> zawierający nazwy parametrów, które są zgodne, zaczynając od zera, element z `args` tablicy. W tablicy musi być nie luk. If `args`. <xref uid=&quot;langword_csharp_Length&quot; name=&quot;Length&quot; href=&quot;&quot;></xref>jest większa niż `namedParameters`. <xref uid=&quot;langword_csharp_Length&quot; name=&quot;Length&quot; href=&quot;&quot;></xref>, pozostałe parametry są wypełnione w kolejności."
    return:
      type: System.Object
      description: "<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> Reprezentujący wartość zwracaną wywołany element członkowski."
  overload: System.Reflection.TypeDelegator.InvokeMember*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.IsArrayImpl
  id: IsArrayImpl
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: IsArrayImpl()
  nameWithType: TypeDelegator.IsArrayImpl()
  fullName: System.Reflection.TypeDelegator.IsArrayImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Zwraca wartość wskazującą, czy <xref:System.Type>jest tablicą.</xref:System.Type>"
  syntax:
    content: protected override bool IsArrayImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli <xref:System.Type>jest tablicą; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Type>"
  overload: System.Reflection.TypeDelegator.IsArrayImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.IsAssignableFrom(System.Reflection.TypeInfo)
  id: IsAssignableFrom(System.Reflection.TypeInfo)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: IsAssignableFrom(TypeInfo)
  nameWithType: TypeDelegator.IsAssignableFrom(TypeInfo)
  fullName: System.Reflection.TypeDelegator.IsAssignableFrom(TypeInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Zwraca wartość wskazującą, czy określony typ można przypisać do tego typu."
  syntax:
    content: public override bool IsAssignableFrom (System.Reflection.TypeInfo typeInfo);
    parameters:
    - id: typeInfo
      type: System.Reflection.TypeInfo
      description: "Typ do sprawdzenia."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli określony typ można przypisać do tego typu; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Reflection.TypeDelegator.IsAssignableFrom*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.IsByRefImpl
  id: IsByRefImpl
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: IsByRefImpl()
  nameWithType: TypeDelegator.IsByRefImpl()
  fullName: System.Reflection.TypeDelegator.IsByRefImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Zwraca wartość wskazującą, czy <xref:System.Type>jest przekazywana przez odwołanie.</xref:System.Type>"
  syntax:
    content: protected override bool IsByRefImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli <xref:System.Type>jest przekazywana przez odwołanie; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Type>"
  overload: System.Reflection.TypeDelegator.IsByRefImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.IsCOMObjectImpl
  id: IsCOMObjectImpl
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: IsCOMObjectImpl()
  nameWithType: TypeDelegator.IsCOMObjectImpl()
  fullName: System.Reflection.TypeDelegator.IsCOMObjectImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Zwraca wartość wskazującą, czy <xref:System.Type>jest obiektem COM..</xref:System.Type>"
  syntax:
    content: protected override bool IsCOMObjectImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli <xref:System.Type>obiektu modelu COM; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Type>"
  overload: System.Reflection.TypeDelegator.IsCOMObjectImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.IsConstructedGenericType
  id: IsConstructedGenericType
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: IsConstructedGenericType
  nameWithType: TypeDelegator.IsConstructedGenericType
  fullName: System.Reflection.TypeDelegator.IsConstructedGenericType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Pobiera wartość wskazującą, czy ten obiekt reprezentuje skonstruowanego typu ogólnego."
  syntax:
    content: public override bool IsConstructedGenericType { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli ten obiekt reprezentuje skonstruowanego typu ogólnego; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Reflection.TypeDelegator.IsConstructedGenericType*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)
  id: IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: IsDefined(Type,Boolean)
  nameWithType: TypeDelegator.IsDefined(Type,Boolean)
  fullName: System.Reflection.TypeDelegator.IsDefined(Type,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Wskazuje, czy oznaczona atrybutem niestandardowym <code> attributeType </code> jest zdefiniowany."
  syntax:
    content: public override bool IsDefined (Type attributeType, bool inherit);
    parameters:
    - id: attributeType
      type: System.Type
      description: "Określa, czy przeszukać łańcuch dziedziczenia tego typu w celu znalezienia atrybutów."
    - id: inherit
      type: System.Boolean
      description: "Tablicę identyfikowanych według typu atrybutów niestandardowych."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli zidentyfikowane przez atrybut niestandardowy <code> attributeType </code> jest zdefiniowana; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Reflection.TypeDelegator.IsDefined*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>attributeType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Reflection.ReflectionTypeLoadException
    commentId: T:System.Reflection.ReflectionTypeLoadException
    description: "Nie można załadować typu atrybutu niestandardowego."
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.IsPointerImpl
  id: IsPointerImpl
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: IsPointerImpl()
  nameWithType: TypeDelegator.IsPointerImpl()
  fullName: System.Reflection.TypeDelegator.IsPointerImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Zwraca wartość wskazującą, czy <xref:System.Type>wskaźnik.</xref:System.Type>"
  syntax:
    content: protected override bool IsPointerImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli <xref:System.Type>wskaźnik; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Type>"
  overload: System.Reflection.TypeDelegator.IsPointerImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.IsPrimitiveImpl
  id: IsPrimitiveImpl
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: IsPrimitiveImpl()
  nameWithType: TypeDelegator.IsPrimitiveImpl()
  fullName: System.Reflection.TypeDelegator.IsPrimitiveImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Zwraca wartość wskazującą, czy <xref:System.Type>jest jednym z typów pierwotnych.</xref:System.Type>"
  syntax:
    content: protected override bool IsPrimitiveImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli <xref:System.Type>jest jednym z typów pierwotnych; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Type>"
  overload: System.Reflection.TypeDelegator.IsPrimitiveImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.IsValueTypeImpl
  id: IsValueTypeImpl
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: IsValueTypeImpl()
  nameWithType: TypeDelegator.IsValueTypeImpl()
  fullName: System.Reflection.TypeDelegator.IsValueTypeImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Zwraca wartość wskazującą, czy typ jest typem wartości; oznacza to, że nie klasą lub interfejsem."
  syntax:
    content: protected override bool IsValueTypeImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli typem jest typ wartości; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Reflection.TypeDelegator.IsValueTypeImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.MetadataToken
  id: MetadataToken
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: MetadataToken
  nameWithType: TypeDelegator.MetadataToken
  fullName: System.Reflection.TypeDelegator.MetadataToken
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Pobiera wartość, która identyfikuje tej jednostki w metadanych."
  remarks: "Tokeny przy użyciu tej właściwości mogą być przekazywane do niezarządzanego odbicia interfejsu API. Aby uzyskać więcej informacji, zobacz [niezarządzanego API odbicia](http://msdn.microsoft.com/en-us/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)."
  syntax:
    content: public override int MetadataToken { get; }
    return:
      type: System.Int32
      description: "Wartość, która w połączeniu z modułem, unikatowo identyfikuje tej jednostki w metadanych."
  overload: System.Reflection.TypeDelegator.MetadataToken*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.Module
  id: Module
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: Module
  nameWithType: TypeDelegator.Module
  fullName: System.Reflection.TypeDelegator.Module
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Pobiera moduł, który zawiera typ implementowany."
  remarks: "Moduł jest obciążana jednostki, która może zawierać deklaracje typu i implementacji. Moduły zawiera wystarczających informacji do włączenia środowiska CLR zlokalizować wszystkie bity implementacji, gdy ładowany jest moduł."
  syntax:
    content: public override System.Reflection.Module Module { get; }
    return:
      type: System.Reflection.Module
      description: "A <xref:System.Reflection.Module>obiekt reprezentujący modułu implementowany typ.</xref:System.Reflection.Module>"
  overload: System.Reflection.TypeDelegator.Module*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.Name
  id: Name
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: Name
  nameWithType: TypeDelegator.Name
  fullName: System.Reflection.TypeDelegator.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Pobiera nazwę typu zaimplementowanym ze ścieżką usunięte."
  remarks: "Ciąg zawierający nazwę bieżącego `TypeDelegator`. Zwracany jest tylko nazwę proste, a nie nazwę FQDN. Aby uzyskać nazwę i ścieżkę, należy użyć <xref:System.Reflection.TypeDelegator.FullName%2A>.</xref:System.Reflection.TypeDelegator.FullName%2A>"
  syntax:
    content: public override string Name { get; }
    return:
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> zawierający typ innych niż nazwa kwalifikowana na poziomie."
  overload: System.Reflection.TypeDelegator.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.Namespace
  id: Namespace
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: Namespace
  nameWithType: TypeDelegator.Namespace
  fullName: System.Reflection.TypeDelegator.Namespace
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Pobiera obszar nazw typu zaimplementowany."
  remarks: "Ta właściwość pobiera ciąg zawierający przestrzeń nazw bieżącego `TypeDelegator`. Na przykład jeśli `TypeDelegator` jest <xref:System.Reflection.TypeFilter>zwracane przestrzeni nazw jest <xref:System.Reflection>.</xref:System.Reflection> </xref:System.Reflection.TypeFilter>"
  syntax:
    content: public override string Namespace { get; }
    return:
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> zawierający typ przestrzeni nazw."
  overload: System.Reflection.TypeDelegator.Namespace*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.TypeHandle
  id: TypeHandle
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: TypeHandle
  nameWithType: TypeDelegator.TypeHandle
  fullName: System.Reflection.TypeDelegator.TypeHandle
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Pobiera dojścia do reprezentacji wewnętrznej metadanych implementowany typ."
  remarks: "Dojście typu jest unikatowa wartość skojarzona z każdego typu. Dojście jest unikatowa w czasie wykonywania."
  syntax:
    content: public override RuntimeTypeHandle TypeHandle { get; }
    return:
      type: System.RuntimeTypeHandle
      description: "A <xref uid=&quot;langword_csharp_RuntimeTypeHandle&quot; name=&quot;RuntimeTypeHandle&quot; href=&quot;&quot;></xref> object."
  overload: System.Reflection.TypeDelegator.TypeHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.typeImpl
  id: typeImpl
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: typeImpl
  nameWithType: TypeDelegator.typeImpl
  fullName: System.Reflection.TypeDelegator.typeImpl
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Wartość określającą typu informacji."
  syntax:
    content: protected Type typeImpl;
    return:
      type: System.Type
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.TypeDelegator.UnderlyingSystemType
  id: UnderlyingSystemType
  parent: System.Reflection.TypeDelegator
  langs:
  - csharp
  name: UnderlyingSystemType
  nameWithType: TypeDelegator.UnderlyingSystemType
  fullName: System.Reflection.TypeDelegator.UnderlyingSystemType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Pobiera odpowiadającego <xref:System.Type>reprezentujący typ implementowany.</xref:System.Type>"
  syntax:
    content: public override Type UnderlyingSystemType { get; }
    return:
      type: System.Type
      description: "Typ podstawowy."
  overload: System.Reflection.TypeDelegator.UnderlyingSystemType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Reflection.TypeInfo
  isExternal: false
  name: System.Reflection.TypeInfo
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.TypeLoadException
  isExternal: true
  name: System.TypeLoadException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Reflection.ReflectionTypeLoadException
  isExternal: true
  name: System.Reflection.ReflectionTypeLoadException
- uid: System.Reflection.TypeDelegator.#ctor
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: TypeDelegator()
  nameWithType: TypeDelegator.TypeDelegator()
  fullName: System.Reflection.TypeDelegator.TypeDelegator()
- uid: System.Reflection.TypeDelegator.#ctor(System.Type)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: TypeDelegator(Type)
  nameWithType: TypeDelegator.TypeDelegator(Type)
  fullName: System.Reflection.TypeDelegator.TypeDelegator(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.TypeDelegator.Assembly
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: Assembly
  nameWithType: TypeDelegator.Assembly
  fullName: System.Reflection.TypeDelegator.Assembly
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Reflection.TypeDelegator.AssemblyQualifiedName
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: AssemblyQualifiedName
  nameWithType: TypeDelegator.AssemblyQualifiedName
  fullName: System.Reflection.TypeDelegator.AssemblyQualifiedName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.TypeDelegator.BaseType
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: BaseType
  nameWithType: TypeDelegator.BaseType
  fullName: System.Reflection.TypeDelegator.BaseType
- uid: System.Reflection.TypeDelegator.FullName
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: FullName
  nameWithType: TypeDelegator.FullName
  fullName: System.Reflection.TypeDelegator.FullName
- uid: System.Reflection.TypeDelegator.GetAttributeFlagsImpl
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetAttributeFlagsImpl()
  nameWithType: TypeDelegator.GetAttributeFlagsImpl()
  fullName: System.Reflection.TypeDelegator.GetAttributeFlagsImpl()
- uid: System.Reflection.TypeAttributes
  parent: System.Reflection
  isExternal: true
  name: TypeAttributes
  nameWithType: TypeAttributes
  fullName: System.Reflection.TypeAttributes
- uid: System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  nameWithType: TypeDelegator.GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  fullName: System.Reflection.TypeDelegator.GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: true
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: true
  name: CallingConventions
  nameWithType: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.ParameterModifier[]
  parent: System.Reflection
  isExternal: false
  name: ParameterModifier
  nameWithType: ParameterModifier
  fullName: System.Reflection.ParameterModifier[]
  spec.csharp:
  - uid: System.Reflection.ParameterModifier
    name: ParameterModifier
    nameWithType: ParameterModifier
    fullName: ParameterModifier[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetConstructors(BindingFlags)
  nameWithType: TypeDelegator.GetConstructors(BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetConstructors(BindingFlags)
- uid: System.Reflection.ConstructorInfo[]
  parent: System.Reflection
  isExternal: true
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo[]
  spec.csharp:
  - uid: System.Reflection.ConstructorInfo
    name: ConstructorInfo
    nameWithType: ConstructorInfo
    fullName: ConstructorInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.TypeDelegator.GetCustomAttributes(System.Boolean)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetCustomAttributes(Boolean)
  nameWithType: TypeDelegator.GetCustomAttributes(Boolean)
  fullName: System.Reflection.TypeDelegator.GetCustomAttributes(Boolean)
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetCustomAttributes(Type,Boolean)
  nameWithType: TypeDelegator.GetCustomAttributes(Type,Boolean)
  fullName: System.Reflection.TypeDelegator.GetCustomAttributes(Type,Boolean)
- uid: System.Reflection.TypeDelegator.GetElementType
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetElementType()
  nameWithType: TypeDelegator.GetElementType()
  fullName: System.Reflection.TypeDelegator.GetElementType()
- uid: System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetEvent(String,BindingFlags)
  nameWithType: TypeDelegator.GetEvent(String,BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetEvent(String,BindingFlags)
- uid: System.Reflection.EventInfo
  parent: System.Reflection
  isExternal: true
  name: EventInfo
  nameWithType: EventInfo
  fullName: System.Reflection.EventInfo
- uid: System.Reflection.TypeDelegator.GetEvents
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetEvents()
  nameWithType: TypeDelegator.GetEvents()
  fullName: System.Reflection.TypeDelegator.GetEvents()
- uid: System.Reflection.EventInfo[]
  parent: System.Reflection
  isExternal: true
  name: EventInfo
  nameWithType: EventInfo
  fullName: System.Reflection.EventInfo[]
  spec.csharp:
  - uid: System.Reflection.EventInfo
    name: EventInfo
    nameWithType: EventInfo
    fullName: EventInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.TypeDelegator.GetEvents(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetEvents(BindingFlags)
  nameWithType: TypeDelegator.GetEvents(BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetEvents(BindingFlags)
- uid: System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetField(String,BindingFlags)
  nameWithType: TypeDelegator.GetField(String,BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetField(String,BindingFlags)
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetFields(BindingFlags)
  nameWithType: TypeDelegator.GetFields(BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetFields(BindingFlags)
- uid: System.Reflection.FieldInfo[]
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo[]
  spec.csharp:
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: FieldInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetInterface(String,Boolean)
  nameWithType: TypeDelegator.GetInterface(String,Boolean)
  fullName: System.Reflection.TypeDelegator.GetInterface(String,Boolean)
- uid: System.Reflection.TypeDelegator.GetInterfaceMap(System.Type)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetInterfaceMap(Type)
  nameWithType: TypeDelegator.GetInterfaceMap(Type)
  fullName: System.Reflection.TypeDelegator.GetInterfaceMap(Type)
- uid: System.Reflection.InterfaceMapping
  parent: System.Reflection
  isExternal: true
  name: InterfaceMapping
  nameWithType: InterfaceMapping
  fullName: System.Reflection.InterfaceMapping
- uid: System.Reflection.TypeDelegator.GetInterfaces
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetInterfaces()
  nameWithType: TypeDelegator.GetInterfaces()
  fullName: System.Reflection.TypeDelegator.GetInterfaces()
- uid: System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetMember(String,MemberTypes,BindingFlags)
  nameWithType: TypeDelegator.GetMember(String,MemberTypes,BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetMember(String,MemberTypes,BindingFlags)
- uid: System.Reflection.MemberInfo[]
  parent: System.Reflection
  isExternal: true
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo[]
  spec.csharp:
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: MemberInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.MemberTypes
  parent: System.Reflection
  isExternal: false
  name: MemberTypes
  nameWithType: MemberTypes
  fullName: System.Reflection.MemberTypes
- uid: System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetMembers(BindingFlags)
  nameWithType: TypeDelegator.GetMembers(BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetMembers(BindingFlags)
- uid: System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  nameWithType: TypeDelegator.GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  fullName: System.Reflection.TypeDelegator.GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.TypeDelegator.GetMethods(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetMethods(BindingFlags)
  nameWithType: TypeDelegator.GetMethods(BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetMethods(BindingFlags)
- uid: System.Reflection.MethodInfo[]
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo[]
  spec.csharp:
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: MethodInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetNestedType(String,BindingFlags)
  nameWithType: TypeDelegator.GetNestedType(String,BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetNestedType(String,BindingFlags)
- uid: System.Reflection.TypeDelegator.GetNestedTypes(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetNestedTypes(BindingFlags)
  nameWithType: TypeDelegator.GetNestedTypes(BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetNestedTypes(BindingFlags)
- uid: System.Reflection.TypeDelegator.GetProperties(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetProperties(BindingFlags)
  nameWithType: TypeDelegator.GetProperties(BindingFlags)
  fullName: System.Reflection.TypeDelegator.GetProperties(BindingFlags)
- uid: System.Reflection.PropertyInfo[]
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo[]
  spec.csharp:
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: PropertyInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetPropertyImpl(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  nameWithType: TypeDelegator.GetPropertyImpl(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  fullName: System.Reflection.TypeDelegator.GetPropertyImpl(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Reflection.TypeDelegator.GUID
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GUID
  nameWithType: TypeDelegator.GUID
  fullName: System.Reflection.TypeDelegator.GUID
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Reflection.TypeDelegator.HasElementTypeImpl
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: HasElementTypeImpl()
  nameWithType: TypeDelegator.HasElementTypeImpl()
  fullName: System.Reflection.TypeDelegator.HasElementTypeImpl()
- uid: System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  nameWithType: TypeDelegator.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  fullName: System.Reflection.TypeDelegator.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.TypeDelegator.IsArrayImpl
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsArrayImpl()
  nameWithType: TypeDelegator.IsArrayImpl()
  fullName: System.Reflection.TypeDelegator.IsArrayImpl()
- uid: System.Reflection.TypeDelegator.IsAssignableFrom(System.Reflection.TypeInfo)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsAssignableFrom(TypeInfo)
  nameWithType: TypeDelegator.IsAssignableFrom(TypeInfo)
  fullName: System.Reflection.TypeDelegator.IsAssignableFrom(TypeInfo)
- uid: System.Reflection.TypeDelegator.IsByRefImpl
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsByRefImpl()
  nameWithType: TypeDelegator.IsByRefImpl()
  fullName: System.Reflection.TypeDelegator.IsByRefImpl()
- uid: System.Reflection.TypeDelegator.IsCOMObjectImpl
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsCOMObjectImpl()
  nameWithType: TypeDelegator.IsCOMObjectImpl()
  fullName: System.Reflection.TypeDelegator.IsCOMObjectImpl()
- uid: System.Reflection.TypeDelegator.IsConstructedGenericType
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsConstructedGenericType
  nameWithType: TypeDelegator.IsConstructedGenericType
  fullName: System.Reflection.TypeDelegator.IsConstructedGenericType
- uid: System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsDefined(Type,Boolean)
  nameWithType: TypeDelegator.IsDefined(Type,Boolean)
  fullName: System.Reflection.TypeDelegator.IsDefined(Type,Boolean)
- uid: System.Reflection.TypeDelegator.IsPointerImpl
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsPointerImpl()
  nameWithType: TypeDelegator.IsPointerImpl()
  fullName: System.Reflection.TypeDelegator.IsPointerImpl()
- uid: System.Reflection.TypeDelegator.IsPrimitiveImpl
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsPrimitiveImpl()
  nameWithType: TypeDelegator.IsPrimitiveImpl()
  fullName: System.Reflection.TypeDelegator.IsPrimitiveImpl()
- uid: System.Reflection.TypeDelegator.IsValueTypeImpl
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsValueTypeImpl()
  nameWithType: TypeDelegator.IsValueTypeImpl()
  fullName: System.Reflection.TypeDelegator.IsValueTypeImpl()
- uid: System.Reflection.TypeDelegator.MetadataToken
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: MetadataToken
  nameWithType: TypeDelegator.MetadataToken
  fullName: System.Reflection.TypeDelegator.MetadataToken
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.TypeDelegator.Module
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: Module
  nameWithType: TypeDelegator.Module
  fullName: System.Reflection.TypeDelegator.Module
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: true
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
- uid: System.Reflection.TypeDelegator.Name
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: Name
  nameWithType: TypeDelegator.Name
  fullName: System.Reflection.TypeDelegator.Name
- uid: System.Reflection.TypeDelegator.Namespace
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: Namespace
  nameWithType: TypeDelegator.Namespace
  fullName: System.Reflection.TypeDelegator.Namespace
- uid: System.Reflection.TypeDelegator.TypeHandle
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: TypeHandle
  nameWithType: TypeDelegator.TypeHandle
  fullName: System.Reflection.TypeDelegator.TypeHandle
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: true
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.Reflection.TypeDelegator.typeImpl
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: typeImpl
  nameWithType: TypeDelegator.typeImpl
  fullName: System.Reflection.TypeDelegator.typeImpl
- uid: System.Reflection.TypeDelegator.UnderlyingSystemType
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: UnderlyingSystemType
  nameWithType: TypeDelegator.UnderlyingSystemType
  fullName: System.Reflection.TypeDelegator.UnderlyingSystemType
- uid: System.Reflection.TypeDelegator.#ctor*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: TypeDelegator
  nameWithType: TypeDelegator.TypeDelegator
- uid: System.Reflection.TypeDelegator.Assembly*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: Assembly
  nameWithType: TypeDelegator.Assembly
- uid: System.Reflection.TypeDelegator.AssemblyQualifiedName*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: AssemblyQualifiedName
  nameWithType: TypeDelegator.AssemblyQualifiedName
- uid: System.Reflection.TypeDelegator.BaseType*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: BaseType
  nameWithType: TypeDelegator.BaseType
- uid: System.Reflection.TypeDelegator.FullName*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: FullName
  nameWithType: TypeDelegator.FullName
- uid: System.Reflection.TypeDelegator.GetAttributeFlagsImpl*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetAttributeFlagsImpl
  nameWithType: TypeDelegator.GetAttributeFlagsImpl
- uid: System.Reflection.TypeDelegator.GetConstructorImpl*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetConstructorImpl
  nameWithType: TypeDelegator.GetConstructorImpl
- uid: System.Reflection.TypeDelegator.GetConstructors*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetConstructors
  nameWithType: TypeDelegator.GetConstructors
- uid: System.Reflection.TypeDelegator.GetCustomAttributes*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetCustomAttributes
  nameWithType: TypeDelegator.GetCustomAttributes
- uid: System.Reflection.TypeDelegator.GetElementType*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetElementType
  nameWithType: TypeDelegator.GetElementType
- uid: System.Reflection.TypeDelegator.GetEvent*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetEvent
  nameWithType: TypeDelegator.GetEvent
- uid: System.Reflection.TypeDelegator.GetEvents*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetEvents
  nameWithType: TypeDelegator.GetEvents
- uid: System.Reflection.TypeDelegator.GetField*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetField
  nameWithType: TypeDelegator.GetField
- uid: System.Reflection.TypeDelegator.GetFields*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetFields
  nameWithType: TypeDelegator.GetFields
- uid: System.Reflection.TypeDelegator.GetInterface*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetInterface
  nameWithType: TypeDelegator.GetInterface
- uid: System.Reflection.TypeDelegator.GetInterfaceMap*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetInterfaceMap
  nameWithType: TypeDelegator.GetInterfaceMap
- uid: System.Reflection.TypeDelegator.GetInterfaces*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetInterfaces
  nameWithType: TypeDelegator.GetInterfaces
- uid: System.Reflection.TypeDelegator.GetMember*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetMember
  nameWithType: TypeDelegator.GetMember
- uid: System.Reflection.TypeDelegator.GetMembers*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetMembers
  nameWithType: TypeDelegator.GetMembers
- uid: System.Reflection.TypeDelegator.GetMethodImpl*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetMethodImpl
  nameWithType: TypeDelegator.GetMethodImpl
- uid: System.Reflection.TypeDelegator.GetMethods*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetMethods
  nameWithType: TypeDelegator.GetMethods
- uid: System.Reflection.TypeDelegator.GetNestedType*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetNestedType
  nameWithType: TypeDelegator.GetNestedType
- uid: System.Reflection.TypeDelegator.GetNestedTypes*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetNestedTypes
  nameWithType: TypeDelegator.GetNestedTypes
- uid: System.Reflection.TypeDelegator.GetProperties*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetProperties
  nameWithType: TypeDelegator.GetProperties
- uid: System.Reflection.TypeDelegator.GetPropertyImpl*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GetPropertyImpl
  nameWithType: TypeDelegator.GetPropertyImpl
- uid: System.Reflection.TypeDelegator.GUID*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: GUID
  nameWithType: TypeDelegator.GUID
- uid: System.Reflection.TypeDelegator.HasElementTypeImpl*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: HasElementTypeImpl
  nameWithType: TypeDelegator.HasElementTypeImpl
- uid: System.Reflection.TypeDelegator.InvokeMember*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: InvokeMember
  nameWithType: TypeDelegator.InvokeMember
- uid: System.Reflection.TypeDelegator.IsArrayImpl*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsArrayImpl
  nameWithType: TypeDelegator.IsArrayImpl
- uid: System.Reflection.TypeDelegator.IsAssignableFrom*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsAssignableFrom
  nameWithType: TypeDelegator.IsAssignableFrom
- uid: System.Reflection.TypeDelegator.IsByRefImpl*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsByRefImpl
  nameWithType: TypeDelegator.IsByRefImpl
- uid: System.Reflection.TypeDelegator.IsCOMObjectImpl*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsCOMObjectImpl
  nameWithType: TypeDelegator.IsCOMObjectImpl
- uid: System.Reflection.TypeDelegator.IsConstructedGenericType*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsConstructedGenericType
  nameWithType: TypeDelegator.IsConstructedGenericType
- uid: System.Reflection.TypeDelegator.IsDefined*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsDefined
  nameWithType: TypeDelegator.IsDefined
- uid: System.Reflection.TypeDelegator.IsPointerImpl*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsPointerImpl
  nameWithType: TypeDelegator.IsPointerImpl
- uid: System.Reflection.TypeDelegator.IsPrimitiveImpl*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsPrimitiveImpl
  nameWithType: TypeDelegator.IsPrimitiveImpl
- uid: System.Reflection.TypeDelegator.IsValueTypeImpl*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: IsValueTypeImpl
  nameWithType: TypeDelegator.IsValueTypeImpl
- uid: System.Reflection.TypeDelegator.MetadataToken*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: MetadataToken
  nameWithType: TypeDelegator.MetadataToken
- uid: System.Reflection.TypeDelegator.Module*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: Module
  nameWithType: TypeDelegator.Module
- uid: System.Reflection.TypeDelegator.Name*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: Name
  nameWithType: TypeDelegator.Name
- uid: System.Reflection.TypeDelegator.Namespace*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: Namespace
  nameWithType: TypeDelegator.Namespace
- uid: System.Reflection.TypeDelegator.TypeHandle*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: TypeHandle
  nameWithType: TypeDelegator.TypeHandle
- uid: System.Reflection.TypeDelegator.UnderlyingSystemType*
  parent: System.Reflection.TypeDelegator
  isExternal: false
  name: UnderlyingSystemType
  nameWithType: TypeDelegator.UnderlyingSystemType
