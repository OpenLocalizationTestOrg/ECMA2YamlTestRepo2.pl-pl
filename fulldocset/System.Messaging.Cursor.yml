### YamlMime:ManagedReference
items:
- uid: System.Messaging.Cursor
  id: Cursor
  children:
  - System.Messaging.Cursor.Close
  - System.Messaging.Cursor.Dispose
  langs:
  - csharp
  name: Cursor
  nameWithType: Cursor
  fullName: System.Messaging.Cursor
  type: Class
  summary: "Kursor jest używany w celu zachowania w określonej lokalizacji <xref href=&quot;System.Messaging.MessageQueue&quot;> </xref> podczas czytania wiadomości z kolejki."
  remarks: "Aby uzyskać kursora dla <xref:System.Messaging.MessageQueue>, wywołaj <xref:System.Messaging.MessageQueue.CreateCursor%2A>metody dla tej kolejki.</xref:System.Messaging.MessageQueue.CreateCursor%2A> </xref:System.Messaging.MessageQueue>       Kursor jest używany z tych metod jako <xref:System.Messaging.MessageQueue.Peek%28System.TimeSpan%2CSystem.Messaging.Cursor%2CSystem.Messaging.PeekAction%29>i <xref:System.Messaging.MessageQueue.Receive%28System.TimeSpan%2CSystem.Messaging.Cursor%29>konieczność odczytywać wiadomości, które nie są na początek kolejki.</xref:System.Messaging.MessageQueue.Receive%28System.TimeSpan%2CSystem.Messaging.Cursor%29> </xref:System.Messaging.MessageQueue.Peek%28System.TimeSpan%2CSystem.Messaging.Cursor%2CSystem.Messaging.PeekAction%29> Obejmuje to odczytywanie wiadomości synchronicznie lub asynchronicznie. Kursory nie trzeba używać odczytać tylko do pierwszej wiadomości w kolejce.       Podczas odczytywania wiadomości w obrębie transakcji, usługi kolejkowania komunikatów nie wycofać ruch kursora Jeśli transakcja została przerwana. Na przykład załóżmy, że istnieje kolejka z dwóch komunikatów A1 i A2. Jeśli usuniesz komunikat A1 znajduje się w transakcji usługi kolejkowania komunikatów przenosi kursor komunikat A2. Jednak jeśli transakcja jest przerywana jakiegokolwiek powodu, wskazujące komunikatów A2 pozostaje wiadomość A1 jest dodanych do kolejki, ale kursor.       Aby zamknąć kursora, należy wywołać <xref:System.Messaging.Cursor.Close%2A>.</xref:System.Messaging.Cursor.Close%2A>"
  syntax:
    content: 'public sealed class Cursor : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Messaging.Cursor.Close
  id: Close
  parent: System.Messaging.Cursor
  langs:
  - csharp
  name: Close()
  nameWithType: Cursor.Close()
  fullName: System.Messaging.Cursor.Close()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Zamyka kursora, umożliwiając zwolnić zasoby skojarzone usługi kolejkowania komunikatów."
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Messaging.Cursor.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.Cursor.Dispose
  id: Dispose
  parent: System.Messaging.Cursor
  langs:
  - csharp
  name: Dispose()
  nameWithType: Cursor.Dispose()
  fullName: System.Messaging.Cursor.Dispose()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Zwalnia wszelkie zasoby używane przez <xref href=&quot;System.Messaging.Cursor&quot;> </xref>."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Messaging.Cursor.Dispose*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Messaging.Cursor.Close
  parent: System.Messaging.Cursor
  isExternal: false
  name: Close()
  nameWithType: Cursor.Close()
  fullName: System.Messaging.Cursor.Close()
- uid: System.Messaging.Cursor.Dispose
  parent: System.Messaging.Cursor
  isExternal: false
  name: Dispose()
  nameWithType: Cursor.Dispose()
  fullName: System.Messaging.Cursor.Dispose()
- uid: System.Messaging.Cursor.Close*
  parent: System.Messaging.Cursor
  isExternal: false
  name: Close
  nameWithType: Cursor.Close
- uid: System.Messaging.Cursor.Dispose*
  parent: System.Messaging.Cursor
  isExternal: false
  name: Dispose
  nameWithType: Cursor.Dispose
