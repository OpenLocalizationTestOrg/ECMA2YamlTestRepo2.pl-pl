### YamlMime:ManagedReference
items:
- uid: System.Runtime.MemoryFailPoint
  id: MemoryFailPoint
  children:
  - System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  - System.Runtime.MemoryFailPoint.Dispose
  - System.Runtime.MemoryFailPoint.Finalize
  langs:
  - csharp
  name: MemoryFailPoint
  nameWithType: MemoryFailPoint
  fullName: System.Runtime.MemoryFailPoint
  type: Class
  summary: "Sprawdza, czy wystarczające zasoby pamięci przed wykonaniem operacji. Ta klasa nie może być dziedziczona."
  remarks: "> [!NOTE]> Tej klasy jest przeznaczony do użycia w zaawansowanych programowanie.       Tworzenie wystąpienia klasy MemoryFailPoint tworzy bramę pamięci. Brama pamięci sprawdza wystarczających zasobów przed zainicjowaniem działanie, które wymaga dużej ilości pamięci. Niepowodzenie sprawdzania powoduje <xref:System.InsufficientMemoryException>zgłaszanego wyjątku.</xref:System.InsufficientMemoryException> Ten wyjątek uniemożliwia uruchomienie operacji i zmniejsza prawdopodobieństwo wystąpienia błędu powodu braku zasobów. Umożliwia to zmniejszyć wydajność, aby uniknąć <xref:System.OutOfMemoryException>wyjątku i ewentualne uszkodzenia stanu, które mogą wynikać z nieprawidłowej obsługi wyjątków w dowolnej lokalizacji w kodzie.</xref:System.OutOfMemoryException>      > [!IMPORTANT] > Ten typ implementuje <xref:System.IDisposable>interfejsu.</xref:System.IDisposable> Po zakończeniu przy użyciu typu bezpośrednio lub pośrednio należy usunąć z niego. Aby usunąć typu, należy wywołać jej <xref:System.IDisposable.Dispose%2A>metody w `try` / `catch` bloku.</xref:System.IDisposable.Dispose%2A> Do usunięcia ich pośrednio, użyj konstrukcji języka takiego jak `using` (w języku C#) lub `Using` (w języku Visual Basic). Aby uzyskać więcej informacji, zobacz sekcję &quot;Przy użyciu obiektu który implementuje interfejs IDisposable&quot; w <xref:System.IDisposable>tematu interfejsu.</xref:System.IDisposable>       Przez zgłaszanie <xref:System.InsufficientMemoryException>wyjątek, aplikację można rozróżnić szacunkową operacji nie będzie mógł ukończyć i częściowo ukończoną operację, która może spowodować uszkodzenie stanu aplikacji.</xref:System.InsufficientMemoryException> Umożliwia to aplikacji zmniejszyć częstotliwość zasady eskalacji pesymistyczne, które mogą wymagać zwalnianie bieżącego <xref:System.AppDomain>lub odtwarzania procesu.</xref:System.AppDomain>       MemoryFailPoint sprawdza, czy są dostępne w wszystkich pamięci sterty wystarczającą ilość pamięci i kolejnych wirtualnej przestrzeni adresowej, a może zwiększyć rozmiar pliku wymiany.  MemoryFailPoint sprawia, że nie gwarancje dostępności długoterminowych pamięć przez cały okres istnienia bramy, ale elementy wywołujące powinny zawsze używać <xref:System.Runtime.MemoryFailPoint.Dispose%2A>metody, aby upewnić się, że zasoby skojarzone z MemoryFailPoint są wydawane.</xref:System.Runtime.MemoryFailPoint.Dispose%2A>       Aby użyć bramy pamięci, należy utworzyć obiekt MemoryFailPoint i określ liczbę megabajtów (MB) pamięci oczekiwanej do użycia w następnej operacji. Jeśli nie jest dostępna wystarczająca ilość pamięci <xref:System.InsufficientMemoryException>wyjątku.</xref:System.InsufficientMemoryException>       Parametr konstruktora musi być dodatnią liczbą całkowitą. Wartość ujemna powoduje <xref:System.ArgumentOutOfRangeException>wyjątek.</xref:System.ArgumentOutOfRangeException>       MemoryFailPoint operuje na poziom szczegółowości 16 MB. Wszystkie wartości mniejszej niż 16 MB są traktowane jako 16 MB, a inne wartości są traktowane jako największy dalej wielokrotnością 16 MB."
  example:
  - "MemoryFailPoint enables an application to slow itself to avoid running out of memory in a corrupting manner.  It should be used within a lexical scope.  The following example launches threads to process items in a work queue.  Before each thread is launched, the available memory resources are checked using MemoryFailPoint.  If an exception is thrown, the main method waits until memory is available before launching the next thread.  \n  \n [!code-cs[MemoryFailPoint#1](~/add/codesnippet/csharp/t-system.runtime.memoryf_1.cs)]"
  syntax:
    content: 'public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable'
  inheritance:
  - System.Object
  - System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: MemoryFailPoint(Int32)
  nameWithType: MemoryFailPoint.MemoryFailPoint(Int32)
  fullName: System.Runtime.MemoryFailPoint.MemoryFailPoint(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Runtime.MemoryFailPoint&quot;> </xref> klasy określania ilości pamięci wymaganej do pomyślnego wykonania."
  remarks: "Empirycznie można określić ilość pamięci używany przez aplikację do przetworzenia elementu roboczego.  Aby oszacować ilość pamięci tę aplikację do przetwarzania żądań, należy rozważyć użycie <xref:System.GC.GetTotalMemory%2A?displayProperty=fullName>metodę, aby określić ilość pamięci dostępnej przed i po wywołaniu metody, która przetwarza elementu roboczego.</xref:System.GC.GetTotalMemory%2A?displayProperty=fullName> Zobacz <xref:System.Runtime.MemoryFailPoint>klasy dla przykładowego kodu, który dynamicznie określa wartość `sizeInMegabytes` parametru.</xref:System.Runtime.MemoryFailPoint>"
  example:
  - "The following example demonstrates how to determine the amount of memory a method requires when executing. This code example is part of a larger example provided for the <xref:System.Runtime.MemoryFailPoint> class.  \n  \n [!code-cs[MemoryFailPoint#2](~/add/codesnippet/csharp/m-system.runtime.memoryf_1.cs)]"
  syntax:
    content: public MemoryFailPoint (int sizeInMegabytes);
    parameters:
    - id: sizeInMegabytes
      type: System.Int32
      description: "Rozmiar wymaganej pamięci w megabajtach. To musi być wartością dodatnią."
  overload: System.Runtime.MemoryFailPoint.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Określony rozmiar pamięci jest ujemna."
  - type: System.InsufficientMemoryException
    commentId: T:System.InsufficientMemoryException
    description: "Jest za mało pamięci, aby rozpocząć wykonywanie kodu chronione przez bramę."
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.Dispose
  id: Dispose
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: Dispose()
  nameWithType: MemoryFailPoint.Dispose()
  fullName: System.Runtime.MemoryFailPoint.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "Zwalnia wszelkie zasoby używane przez <xref href=&quot;System.Runtime.MemoryFailPoint&quot;> </xref>."
  remarks: "Wywołaj metodę Dispose po zakończeniu przy użyciu <xref:System.Runtime.MemoryFailPoint>.</xref:System.Runtime.MemoryFailPoint> Metoda Dispose pozostawia <xref:System.Runtime.MemoryFailPoint>w stanie uniemożliwiającym jego używanie.</xref:System.Runtime.MemoryFailPoint> Po wywołaniu <xref:System.Runtime.MemoryFailPoint>, konieczne jest zwolnienie wszystkich odwołań do <xref:System.Runtime.MemoryFailPoint>, moduł zbierający elementy bezużyteczne mógł odzyskać pamięć który <xref:System.Runtime.MemoryFailPoint>klasy.</xref:System.Runtime.MemoryFailPoint> </xref:System.Runtime.MemoryFailPoint> </xref:System.Runtime.MemoryFailPoint> Aby uzyskać więcej informacji, zobacz [czyszczenie zasobów niezarządzanych](~/add/includes/ajax-current-ext-md.md) i [implementacja metody Dispose](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Wywołania zawsze dysponować przed zwolnieniem ostatniego odwołania do <xref:System.Runtime.MemoryFailPoint>.</xref:System.Runtime.MemoryFailPoint> W przeciwnym razie używa zasobów nie zostanie zwolniona do wywołania modułu zbierającego elementy bezużyteczne <xref:System.Runtime.MemoryFailPoint>obiektu `Finalize` metody.</xref:System.Runtime.MemoryFailPoint>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Runtime.MemoryFailPoint.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.Finalize
  id: Finalize
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: Finalize()
  nameWithType: MemoryFailPoint.Finalize()
  fullName: System.Runtime.MemoryFailPoint.Finalize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "Gwarantuje, że zasoby są zwalniane i inne operacje oczyszczania są wykonywane, gdy moduł garbage collector zwraca <xref href=&quot;System.Runtime.MemoryFailPoint&quot;> </xref> obiektu."
  remarks: "Moduł zbierający elementy bezużyteczne wywołuje metodę Finalize, gdy bieżący obiekt jest gotowy do przetwarzania."
  syntax:
    content: ~MemoryFailPoint ();
    parameters: []
  overload: System.Runtime.MemoryFailPoint.Finalize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  isExternal: false
  name: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InsufficientMemoryException
  parent: System
  isExternal: false
  name: InsufficientMemoryException
  nameWithType: InsufficientMemoryException
  fullName: System.InsufficientMemoryException
- uid: System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: MemoryFailPoint(Int32)
  nameWithType: MemoryFailPoint.MemoryFailPoint(Int32)
  fullName: System.Runtime.MemoryFailPoint.MemoryFailPoint(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Runtime.MemoryFailPoint.Dispose
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Dispose()
  nameWithType: MemoryFailPoint.Dispose()
  fullName: System.Runtime.MemoryFailPoint.Dispose()
- uid: System.Runtime.MemoryFailPoint.Finalize
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Finalize()
  nameWithType: MemoryFailPoint.Finalize()
  fullName: System.Runtime.MemoryFailPoint.Finalize()
- uid: System.Runtime.MemoryFailPoint.#ctor*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: MemoryFailPoint
  nameWithType: MemoryFailPoint.MemoryFailPoint
- uid: System.Runtime.MemoryFailPoint.Dispose*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Dispose
  nameWithType: MemoryFailPoint.Dispose
- uid: System.Runtime.MemoryFailPoint.Finalize*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Finalize
  nameWithType: MemoryFailPoint.Finalize
