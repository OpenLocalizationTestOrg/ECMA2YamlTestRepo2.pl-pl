### YamlMime:ManagedReference
items:
- uid: System.Management.Instrumentation.InstrumentationManager
  id: InstrumentationManager
  children:
  - System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)
  - System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(System.Reflection.Assembly)
  - System.Management.Instrumentation.InstrumentationManager.RegisterType(System.Type)
  - System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)
  - System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(System.Reflection.Assembly)
  - System.Management.Instrumentation.InstrumentationManager.UnregisterType(System.Type)
  langs:
  - csharp
  name: InstrumentationManager
  nameWithType: InstrumentationManager
  fullName: System.Management.Instrumentation.InstrumentationManager
  type: Class
  summary: "Udostępnia metody zarządzające okres istnienia i z modelem użytym rozdzielonymi dostawców.       Uwaga: do bibliotek WMI .NET są teraz wziąć pod uwagę stanu końcowego, a nie dalszy rozwój, ulepszenia lub aktualizacje będą dostępne dla problemy związane z zabezpieczeniami wpływu na te biblioteki. [API MI](https://msdn.microsoft.com/en-us/library/jj152383%28v=vs.80%29.aspx) powinna być używana do wszystkich nowych wdrożeń."
  remarks: "Rozdzielonymi dostawców są obsługiwane przez aplikację. Dwie metody może służyć przez aplikację do udostępnienia wystąpienia klas usługi WMI: publikowanie/revoke lub metody wywołania zwrotnego. Używa metody wywołania zwrotnego <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A>i <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>metody.</xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A> </xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A>       W modelu publikowania/revoke infrastruktury WMI zawiera domyślne zachowanie dla wielu metod trzeba napisać samodzielnie w metody wywołania zwrotnego. Te obejmują wyliczenia i powiązać metody. W tym modelu aplikacja tworzy wystąpienia i je opublikował. Aplikacja jest odpowiedzialny za zapewnienie, że właściwości klucza klasy są przestrzegane. Aplikacja jest również odpowiedzialne za usuwanie instancji.       W modelu wywołania zwrotnego infrastruktury WMI oczekuje, że aplikacja ma metod, które wyliczenia, powiązania i inne metody wymagane do implementowania dostawcy. Wywołuje aplikację dla tej funkcji, a nie powiedzie się, jeśli nie istnieje lub nie została zaimplementowana właściwie. Aplikacja rejestruje typ z jej klas WMI przy użyciu infrastruktury przez wywołanie metody <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A>oraz wskazuje, że nie chce udostępniane przez wywołanie metody <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>.</xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A> klasy usługi WMI</xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A>"
  example:
  - "The following example demonstrates how to use the publish/revoke model. Two instances of the router class are created and published. They are later revoked.  \n  \n```  \npublic class Sample_InstanceProvider  \n{  \npublic int Main (string[] args)   \n{  \nRouter r_one = new Router ();  \nr_one.Name = \"one\";  \nInstrumentationManager.Publish(r_one);  \nRouter r_two = new Router ();  \nr_two.Name = \"two\";  \nInstrumentationManager.Publish(r_two);  \n// ....  \nInstrumentationManager.Revoke(r_one);  \nInstrumentationManager.Revoke(r_two);  \nreturn 0;  \n}  \n}  \n```  \n  \n In the next example, the callback method of registration is used to expose the RouterNew class.  \n  \n```  \npublic int MainNew(string[] args)   \n{  \n    InstrumentationManager.RegisterType(typeof(RouterNew));  \n    // ....  \n    InstrumentationManager.UnRegisterType(typeof(RouterNew));  \n    return 0;  \n}  \n```"
  syntax:
    content: public static class InstrumentationManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)
  id: Publish(System.Object)
  parent: System.Management.Instrumentation.InstrumentationManager
  langs:
  - csharp
  name: Publish(Object)
  nameWithType: InstrumentationManager.Publish(Object)
  fullName: System.Management.Instrumentation.InstrumentationManager.Publish(Object)
  type: Method
  assemblies:
  - System.Management.Instrumentation
  namespace: System.Management.Instrumentation
  summary: "Udostępnia wystąpienie dostawcy w ramach infrastruktury WMI."
  syntax:
    content: public static void Publish (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Wystąpienie klasy, która implementuje dostawcę, aby opublikować."
  overload: System.Management.Instrumentation.InstrumentationManager.Publish*
  exceptions: []
  platform:
  - net462
- uid: System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(System.Reflection.Assembly)
  id: RegisterAssembly(System.Reflection.Assembly)
  parent: System.Management.Instrumentation.InstrumentationManager
  langs:
  - csharp
  name: RegisterAssembly(Assembly)
  nameWithType: InstrumentationManager.RegisterAssembly(Assembly)
  fullName: System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(Assembly)
  type: Method
  assemblies:
  - System.Management.Instrumentation
  namespace: System.Management.Instrumentation
  summary: "Rejestruje zestawu przy użyciu infrastruktury WMI."
  syntax:
    content: public static void RegisterAssembly (System.Reflection.Assembly managementAssembly);
    parameters:
    - id: managementAssembly
      type: System.Reflection.Assembly
      description: "Zestaw do zarejestrowania."
  overload: System.Management.Instrumentation.InstrumentationManager.RegisterAssembly*
  exceptions: []
  platform:
  - net462
- uid: System.Management.Instrumentation.InstrumentationManager.RegisterType(System.Type)
  id: RegisterType(System.Type)
  parent: System.Management.Instrumentation.InstrumentationManager
  langs:
  - csharp
  name: RegisterType(Type)
  nameWithType: InstrumentationManager.RegisterType(Type)
  fullName: System.Management.Instrumentation.InstrumentationManager.RegisterType(Type)
  type: Method
  assemblies:
  - System.Management.Instrumentation
  namespace: System.Management.Instrumentation
  summary: "Rejestruje klasę z infrastruktury WMI."
  remarks: ''
  example:
  - "```  \nstatic int Main(string[] args)  \n{  \n   InstrumentationManager.RegisterType(typeof(MySampleProvider));  \n   return 0;  \n}  \n```"
  syntax:
    content: public static void RegisterType (Type managementType);
    parameters:
    - id: managementType
      type: System.Type
      description: "Typ klasy."
  overload: System.Management.Instrumentation.InstrumentationManager.RegisterType*
  exceptions: []
  platform:
  - net462
- uid: System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)
  id: Revoke(System.Object)
  parent: System.Management.Instrumentation.InstrumentationManager
  langs:
  - csharp
  name: Revoke(Object)
  nameWithType: InstrumentationManager.Revoke(Object)
  fullName: System.Management.Instrumentation.InstrumentationManager.Revoke(Object)
  type: Method
  assemblies:
  - System.Management.Instrumentation
  namespace: System.Management.Instrumentation
  summary: "Pobiera wystąpienia dostawcy obecnie dostępna i staje się niedostępny w ramach infrastruktury WMI."
  syntax:
    content: public static void Revoke (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Wystąpienie klasy, która implementuje dostawcę, aby można było odwołać."
  overload: System.Management.Instrumentation.InstrumentationManager.Revoke*
  exceptions: []
  platform:
  - net462
- uid: System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(System.Reflection.Assembly)
  id: UnregisterAssembly(System.Reflection.Assembly)
  parent: System.Management.Instrumentation.InstrumentationManager
  langs:
  - csharp
  name: UnregisterAssembly(Assembly)
  nameWithType: InstrumentationManager.UnregisterAssembly(Assembly)
  fullName: System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(Assembly)
  type: Method
  assemblies:
  - System.Management.Instrumentation
  namespace: System.Management.Instrumentation
  summary: "Wyrejestrowuje zestawu obecnie zarejestrowane przy użyciu infrastruktury WMI."
  syntax:
    content: public static void UnregisterAssembly (System.Reflection.Assembly managementAssembly);
    parameters:
    - id: managementAssembly
      type: System.Reflection.Assembly
      description: "Zestaw zarejestrowany wyrejestrować."
  overload: System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly*
  exceptions: []
  platform:
  - net462
- uid: System.Management.Instrumentation.InstrumentationManager.UnregisterType(System.Type)
  id: UnregisterType(System.Type)
  parent: System.Management.Instrumentation.InstrumentationManager
  langs:
  - csharp
  name: UnregisterType(Type)
  nameWithType: InstrumentationManager.UnregisterType(Type)
  fullName: System.Management.Instrumentation.InstrumentationManager.UnregisterType(Type)
  type: Method
  assemblies:
  - System.Management.Instrumentation
  namespace: System.Management.Instrumentation
  summary: "Wyrejestrowuje klasy zarejestrowana przy użyciu infrastruktury WMI."
  syntax:
    content: public static void UnregisterType (Type managementType);
    parameters:
    - id: managementType
      type: System.Type
      description: "Zarejestrowanego typu wyrejestrować."
  overload: System.Management.Instrumentation.InstrumentationManager.UnregisterType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: Publish(Object)
  nameWithType: InstrumentationManager.Publish(Object)
  fullName: System.Management.Instrumentation.InstrumentationManager.Publish(Object)
- uid: System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(System.Reflection.Assembly)
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: RegisterAssembly(Assembly)
  nameWithType: InstrumentationManager.RegisterAssembly(Assembly)
  fullName: System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(Assembly)
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Management.Instrumentation.InstrumentationManager.RegisterType(System.Type)
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: RegisterType(Type)
  nameWithType: InstrumentationManager.RegisterType(Type)
  fullName: System.Management.Instrumentation.InstrumentationManager.RegisterType(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: Revoke(Object)
  nameWithType: InstrumentationManager.Revoke(Object)
  fullName: System.Management.Instrumentation.InstrumentationManager.Revoke(Object)
- uid: System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(System.Reflection.Assembly)
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: UnregisterAssembly(Assembly)
  nameWithType: InstrumentationManager.UnregisterAssembly(Assembly)
  fullName: System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(Assembly)
- uid: System.Management.Instrumentation.InstrumentationManager.UnregisterType(System.Type)
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: UnregisterType(Type)
  nameWithType: InstrumentationManager.UnregisterType(Type)
  fullName: System.Management.Instrumentation.InstrumentationManager.UnregisterType(Type)
- uid: System.Management.Instrumentation.InstrumentationManager.Publish*
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: Publish
  nameWithType: InstrumentationManager.Publish
- uid: System.Management.Instrumentation.InstrumentationManager.RegisterAssembly*
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: RegisterAssembly
  nameWithType: InstrumentationManager.RegisterAssembly
- uid: System.Management.Instrumentation.InstrumentationManager.RegisterType*
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: RegisterType
  nameWithType: InstrumentationManager.RegisterType
- uid: System.Management.Instrumentation.InstrumentationManager.Revoke*
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: Revoke
  nameWithType: InstrumentationManager.Revoke
- uid: System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly*
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: UnregisterAssembly
  nameWithType: InstrumentationManager.UnregisterAssembly
- uid: System.Management.Instrumentation.InstrumentationManager.UnregisterType*
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: UnregisterType
  nameWithType: InstrumentationManager.UnregisterType
