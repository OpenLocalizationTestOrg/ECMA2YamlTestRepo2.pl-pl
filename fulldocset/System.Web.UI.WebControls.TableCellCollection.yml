### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.TableCellCollection
  id: TableCellCollection
  children:
  - System.Web.UI.WebControls.TableCellCollection.Add(System.Web.UI.WebControls.TableCell)
  - System.Web.UI.WebControls.TableCellCollection.AddAt(System.Int32,System.Web.UI.WebControls.TableCell)
  - System.Web.UI.WebControls.TableCellCollection.AddRange(System.Web.UI.WebControls.TableCell[])
  - System.Web.UI.WebControls.TableCellCollection.Clear
  - System.Web.UI.WebControls.TableCellCollection.CopyTo(System.Array,System.Int32)
  - System.Web.UI.WebControls.TableCellCollection.Count
  - System.Web.UI.WebControls.TableCellCollection.GetCellIndex(System.Web.UI.WebControls.TableCell)
  - System.Web.UI.WebControls.TableCellCollection.GetEnumerator
  - System.Web.UI.WebControls.TableCellCollection.IsReadOnly
  - System.Web.UI.WebControls.TableCellCollection.IsSynchronized
  - System.Web.UI.WebControls.TableCellCollection.Item(System.Int32)
  - System.Web.UI.WebControls.TableCellCollection.Remove(System.Web.UI.WebControls.TableCell)
  - System.Web.UI.WebControls.TableCellCollection.RemoveAt(System.Int32)
  - System.Web.UI.WebControls.TableCellCollection.SyncRoot
  - System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Add(System.Object)
  - System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Contains(System.Object)
  - System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#IndexOf(System.Object)
  - System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#IsFixedSize
  - System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Item(System.Int32)
  - System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Remove(System.Object)
  langs:
  - csharp
  name: TableCellCollection
  nameWithType: TableCellCollection
  fullName: System.Web.UI.WebControls.TableCellCollection
  type: Class
  summary: "Hermetyzuje kolekcję <xref href=&quot;System.Web.UI.WebControls.TableHeaderCell&quot;> </xref> i <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> obiektów, które tworzą wiersza w <xref href=&quot;System.Web.UI.WebControls.Table&quot;> </xref> formantu. Ta klasa nie może być dziedziczona."
  remarks: "Klasa używana do programowego zarządzania kolekcją <xref:System.Web.UI.WebControls.TableCell>obiektów, które tworzą wiersza w <xref:System.Web.UI.WebControls.Table>kontroli.</xref:System.Web.UI.WebControls.Table> </xref:System.Web.UI.WebControls.TableCell> Ta klasa jest najczęściej używany do dodawania lub usuwania komórek z wiersza w <xref:System.Web.UI.WebControls.Table>kontroli.</xref:System.Web.UI.WebControls.Table>      > [!NOTE] > A <xref:System.Web.UI.WebControls.Table>formant zawiera <xref:System.Web.UI.WebControls.Table.Rows%2A>kolekcji, która reprezentuje kolekcję <xref:System.Web.UI.WebControls.TableRow>obiektów.</xref:System.Web.UI.WebControls.TableRow> </xref:System.Web.UI.WebControls.Table.Rows%2A> </xref:System.Web.UI.WebControls.Table> Każdy <xref:System.Web.UI.WebControls.TableRow>reprezentuje pojedynczego wiersza w tabeli i zawiera <xref:System.Web.UI.WebControls.TableRow.Cells%2A>kolekcji, która reprezentuje kolekcję <xref:System.Web.UI.WebControls.TableCell>obiektów.</xref:System.Web.UI.WebControls.TableCell> </xref:System.Web.UI.WebControls.TableRow.Cells%2A> </xref:System.Web.UI.WebControls.TableRow> Te <xref:System.Web.UI.WebControls.TableCell>reprezentować pojedynczych komórek w tabeli.</xref:System.Web.UI.WebControls.TableCell> Aby uzyskać pojedynczych komórek, należy najpierw uzyskać <xref:System.Web.UI.WebControls.TableRow>z <xref:System.Web.UI.WebControls.Table.Rows%2A>Kolekcja <xref:System.Web.UI.WebControls.Table>kontroli.</xref:System.Web.UI.WebControls.Table> </xref:System.Web.UI.WebControls.Table.Rows%2A> </xref:System.Web.UI.WebControls.TableRow> Następnie można uzyskać <xref:System.Web.UI.WebControls.TableCell>z <xref:System.Web.UI.WebControls.TableRow.Cells%2A>kolekcji <xref:System.Web.UI.WebControls.TableRow>.</xref:System.Web.UI.WebControls.TableRow> </xref:System.Web.UI.WebControls.TableRow.Cells%2A> </xref:System.Web.UI.WebControls.TableCell>"
  example:
  - "The following example demonstrates how to programmatically fill a <xref:System.Web.UI.WebControls.Table> control. <xref:System.Web.UI.WebControls.TableCell> objects, which represent individual cells, are added to <xref:System.Web.UI.WebControls.TableRow> objects, which represent the individual rows, through the <xref:System.Web.UI.WebControls.TableRow.Cells%2A> property.  \n  \n [!code-cs[Classic TableCellCollection Example#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_221_1.aspx)]\n [!code-vb[Classic TableCellCollection Example#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_221_1.aspx)]"
  syntax:
    content: >-
      [System.ComponentModel.Editor("System.Web.UI.Design.WebControls.TableCellsCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]

      public sealed class TableCellCollection : System.Collections.IList
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.Add(System.Web.UI.WebControls.TableCell)
  id: Add(System.Web.UI.WebControls.TableCell)
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: Add(TableCell)
  nameWithType: TableCellCollection.Add(TableCell)
  fullName: System.Web.UI.WebControls.TableCellCollection.Add(TableCell)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Dołącza określony <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> na końcu <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref>."
  remarks: "Ta metoda umożliwia dodawanie określonego <xref:System.Web.UI.WebControls.TableCell>na końcu <xref:System.Web.UI.WebControls.TableCellCollection>.</xref:System.Web.UI.WebControls.TableCellCollection> </xref:System.Web.UI.WebControls.TableCell>"
  example:
  - "The following example demonstrates how to use the Add method to add a <xref:System.Web.UI.WebControls.TableCell> to a <xref:System.Web.UI.WebControls.TableCellCollection>. Note that in the example, the <xref:System.Web.UI.WebControls.TableRow.Cells%2A> property of the <xref:System.Web.UI.WebControls.TableRow> is an instance of the <xref:System.Web.UI.WebControls.TableCellCollection> class.  \n  \n [!code-cs[Classic TableCellCollection.Add Example#1](~/add/codesnippet/csharp/ee795911-b57c-473c-a40c-_1.aspx)]\n [!code-vb[Classic TableCellCollection.Add Example#1](~/add/codesnippet/visualbasic/ee795911-b57c-473c-a40c-_1.aspx)]"
  syntax:
    content: public int Add (System.Web.UI.WebControls.TableCell cell);
    parameters:
    - id: cell
      type: System.Web.UI.WebControls.TableCell
      description: "<xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> Do dodania do kolekcji."
    return:
      type: System.Int32
      description: "Numer indeksu <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref>."
  overload: System.Web.UI.WebControls.TableCellCollection.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.AddAt(System.Int32,System.Web.UI.WebControls.TableCell)
  id: AddAt(System.Int32,System.Web.UI.WebControls.TableCell)
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: AddAt(Int32,TableCell)
  nameWithType: TableCellCollection.AddAt(Int32,TableCell)
  fullName: System.Web.UI.WebControls.TableCellCollection.AddAt(Int32,TableCell)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Dodaje określony <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> do <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref> w określonej lokalizacji indeksu."
  remarks: "Użyj tej metody, aby wstawić określonego <xref:System.Web.UI.WebControls.TableCell>w <xref:System.Web.UI.WebControls.TableCellCollection>pod określonym indeksem.</xref:System.Web.UI.WebControls.TableCellCollection> </xref:System.Web.UI.WebControls.TableCell>"
  example:
  - "The following example demonstrates how to use the AddAt method to add a <xref:System.Web.UI.WebControls.TableCell> to the middle of a <xref:System.Web.UI.WebControls.TableCellCollection>. Note that in the example, the <xref:System.Web.UI.WebControls.TableRow.Cells%2A> property of the <xref:System.Web.UI.WebControls.TableRow> is an instance of the <xref:System.Web.UI.WebControls.TableCellCollection> class.  \n  \n [!code-cs[Classic TableCellCollection.AddAt Example#1](~/add/codesnippet/csharp/8b5e0b20-2dc9-4b2e-bd0c-_1.aspx)]\n [!code-vb[Classic TableCellCollection.AddAt Example#1](~/add/codesnippet/visualbasic/8b5e0b20-2dc9-4b2e-bd0c-_1.aspx)]"
  syntax:
    content: public void AddAt (int index, System.Web.UI.WebControls.TableCell cell);
    parameters:
    - id: index
      type: System.Int32
      description: "Lokalizacja w <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref> w której ma zostać dodany <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref>."
    - id: cell
      type: System.Web.UI.WebControls.TableCell
      description: "The <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;></xref> to add to the <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;></xref>."
  overload: System.Web.UI.WebControls.TableCellCollection.AddAt*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.AddRange(System.Web.UI.WebControls.TableCell[])
  id: AddRange(System.Web.UI.WebControls.TableCell[])
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: AddRange(TableCell[])
  nameWithType: TableCellCollection.AddRange(TableCell[])
  fullName: System.Web.UI.WebControls.TableCellCollection.AddRange(TableCell[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Dołącza <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> obiektów z określonej tablicy na końcu kolekcji."
  remarks: "Dołącz przy użyciu metody AddRange <xref:System.Web.UI.WebControls.TableCell>obiektów z określonej tablicy do kolekcji.</xref:System.Web.UI.WebControls.TableCell> Ta metoda jest często używana podczas są tworzenia wiersza tabeli. Aby utworzyć wiersza tabeli, należy najpierw utworzyć tablicę <xref:System.Web.UI.WebControls.TableCell>obiekty do reprezentowania komórek wiersza.</xref:System.Web.UI.WebControls.TableCell> Następnie użyj metody AddRange, przekazanie tablicy jako argument, aby dodać <xref:System.Web.UI.WebControls.TableCell>obiekty do kolekcji.</xref:System.Web.UI.WebControls.TableCell>"
  example:
  - "The following example demonstrates how to use the AddRange method to add the <xref:System.Web.UI.WebControls.TableCell> objects from an array to a <xref:System.Web.UI.WebControls.TableCellCollection>. Note that in the example, the <xref:System.Web.UI.WebControls.TableRow.Cells%2A> property of the <xref:System.Web.UI.WebControls.TableRow> is an instance of the <xref:System.Web.UI.WebControls.TableCellCollection> class.  \n  \n [!code-vb[TableCellCollection_AddRange#1](~/add/codesnippet/visualbasic/cc471817-21c7-41f0-a2b5-_1.aspx)]\n [!code-cs[TableCellCollection_AddRange#1](~/add/codesnippet/csharp/cc471817-21c7-41f0-a2b5-_1.aspx)]"
  syntax:
    content: public void AddRange (System.Web.UI.WebControls.TableCell[] cells);
    parameters:
    - id: cells
      type: System.Web.UI.WebControls.TableCell[]
      description: "Tablica zawierająca <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> obiekty do dodania do kolekcji."
  overload: System.Web.UI.WebControls.TableCellCollection.AddRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Wartość <code> cells </code> parametr jest <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.Clear
  id: Clear
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: Clear()
  nameWithType: TableCellCollection.Clear()
  fullName: System.Web.UI.WebControls.TableCellCollection.Clear()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Usuwa wszystkie <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> obiektów z <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref>."
  remarks: "Ta metoda służy do usuwania wszystkich <xref:System.Web.UI.WebControls.TableCell>obiektów z <xref:System.Web.UI.WebControls.TableCellCollection>i ustaw <xref:System.Web.UI.WebControls.TableCellCollection.Count%2A>Właściwości na 0.</xref:System.Web.UI.WebControls.TableCellCollection.Count%2A> </xref:System.Web.UI.WebControls.TableCellCollection> </xref:System.Web.UI.WebControls.TableCell>      > [!NOTE] > Ta metoda usuwa <xref:System.Web.UI.WebControls.TableCell>obiektów z <xref:System.Web.UI.WebControls.TableCellCollection>, ale nie powoduje usunięcia <xref:System.Web.UI.WebControls.TableRow>z <xref:System.Web.UI.WebControls.Table>kontroli.</xref:System.Web.UI.WebControls.Table> </xref:System.Web.UI.WebControls.TableRow> </xref:System.Web.UI.WebControls.TableCellCollection> </xref:System.Web.UI.WebControls.TableCell> Należy również usunąć <xref:System.Web.UI.WebControls.TableRow>Jeśli chcesz całkowicie usunąć wiersza z tabeli.</xref:System.Web.UI.WebControls.TableRow>"
  example:
  - "The following example demonstrates how to use the Clear method to remove all <xref:System.Web.UI.WebControls.TableCell> objects from the center row of the table and replace them with new <xref:System.Web.UI.WebControls.TableCell> objects.  \n  \n [!code-cs[Classic TableCellCollection.Clear Example#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_74_1.aspx)]\n [!code-vb[Classic TableCellCollection.Clear Example#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_74_1.aspx)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Web.UI.WebControls.TableCellCollection.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: TableCellCollection.CopyTo(Array,Int32)
  fullName: System.Web.UI.WebControls.TableCellCollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Kopiuje elementy z <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref> do określonego &lt;xref:System.Array?displayProperty=fullName&gt;, począwszy od określonego indeksu w &lt;xref:System.Array?displayProperty=fullName&gt;."
  remarks: "Ta metoda umożliwia skopiowanie zawartości <xref:System.Web.UI.WebControls.TableCellCollection>do określonego <xref:System.Array?displayProperty=fullName>zaczynając od określonego indeksu.</xref:System.Array?displayProperty=fullName> </xref:System.Web.UI.WebControls.TableCellCollection>      > [!NOTE] > `array` Parametr musi być liczony od zera <xref:System.Array?displayProperty=fullName>.</xref:System.Array?displayProperty=fullName>"
  example:
  - "The following example demonstrates how to use the CopyTo method to copy the items from the <xref:System.Web.UI.WebControls.TableCellCollection> into the specified array.  \n  \n [!code-vb[Classic TableCellCollection.CopyTo Example#1](~/add/codesnippet/visualbasic/bdea1b6d-8af6-40aa-a8be-_1.aspx)]\n [!code-cs[Classic TableCellCollection.CopyTo Example#1](~/add/codesnippet/csharp/bdea1b6d-8af6-40aa-a8be-_1.aspx)]"
  syntax:
    content: public void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "Liczony od zera &lt;xref:System.Array?displayProperty=fullName&gt; odbierająca skopiowane elementy z <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref>."
    - id: index
      type: System.Int32
      description: "Indeks pierwszego w określonym &lt;xref:System.Array?displayProperty=fullName&gt; do odbierania elementów."
  overload: System.Web.UI.WebControls.TableCellCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.Count
  id: Count
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: Count
  nameWithType: TableCellCollection.Count
  fullName: System.Web.UI.WebControls.TableCellCollection.Count
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Pobiera liczbę <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> obiekty w <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref>."
  remarks: "Ta właściwość umożliwia określenie liczby komórek w <xref:System.Web.UI.WebControls.TableCellCollection>.</xref:System.Web.UI.WebControls.TableCellCollection> Właściwość Count jest często używana do określenia górna granica podczas iteracji w kolekcji."
  example:
  - "The following example demonstrates how to use the Count property to determine the number of cells in the <xref:System.Web.UI.WebControls.TableCellCollection>. Note that in the example, the <xref:System.Web.UI.WebControls.TableRow.Cells%2A> property of the <xref:System.Web.UI.WebControls.TableRow> is an instance the <xref:System.Web.UI.WebControls.TableCellCollection> class.  \n  \n [!code-cs[Classic TableCellCollection.Count Example#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_107_1.cs)]\n [!code-vb[Classic TableCellCollection.Count Example#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_107_1.vb)]"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "Liczba <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> obiekty w <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref>. Wartość domyślna to 0."
  overload: System.Web.UI.WebControls.TableCellCollection.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.GetCellIndex(System.Web.UI.WebControls.TableCell)
  id: GetCellIndex(System.Web.UI.WebControls.TableCell)
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: GetCellIndex(TableCell)
  nameWithType: TableCellCollection.GetCellIndex(TableCell)
  fullName: System.Web.UI.WebControls.TableCellCollection.GetCellIndex(TableCell)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Zwraca wartość reprezentującą określony indeks <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> z <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref>."
  remarks: "Ta metoda służy do określenia indeksu z określonym <xref:System.Web.UI.WebControls.TableCell>w <xref:System.Web.UI.WebControls.TableCellCollection>.</xref:System.Web.UI.WebControls.TableCellCollection> </xref:System.Web.UI.WebControls.TableCell> Jeśli określony <xref:System.Web.UI.WebControls.TableCell>jest nie można odnaleźć indeksu-1 jest zwracana.</xref:System.Web.UI.WebControls.TableCell>"
  example:
  - "The following example demonstrates how to use the GetCellIndex property to display the column index of the selected cell.  \n  \n [!code-cs[Classic TableCellCollection.GetCellIndex Example#1](~/add/codesnippet/csharp/adbcd4ba-a31d-48e3-aca6-_1.aspx)]\n [!code-vb[Classic TableCellCollection.GetCellIndex Example#1](~/add/codesnippet/visualbasic/adbcd4ba-a31d-48e3-aca6-_1.aspx)]"
  syntax:
    content: public int GetCellIndex (System.Web.UI.WebControls.TableCell cell);
    parameters:
    - id: cell
      type: System.Web.UI.WebControls.TableCell
      description: "<xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> Uzyskać indeks w <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref>."
    return:
      type: System.Int32
      description: "Określony indeks <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> w <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref>. Wartość domyślna to -1, co oznacza, że nie wykryto dopasowania."
  overload: System.Web.UI.WebControls.TableCellCollection.GetCellIndex*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: TableCellCollection.GetEnumerator()
  fullName: System.Web.UI.WebControls.TableCellCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Zwraca &lt;xref:System.Collections.IEnumerator?displayProperty=fullName&gt; zaimplementowany obiekt, który zawiera wszystkie <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> obiekty w <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref>."
  remarks: "Ta metoda służy do tworzenia <xref:System.Collections.IEnumerator?displayProperty=fullName>obiektu, który można należy powtórzyć za pośrednictwem łatwe uzyskanie każdego elementu w <xref:System.Web.UI.WebControls.TableCellCollection>.</xref:System.Web.UI.WebControls.TableCellCollection> zaimplementowana</xref:System.Collections.IEnumerator?displayProperty=fullName>       Użyj <xref:System.Collections.IEnumerator.Current%2A?displayProperty=fullName>właściwości do pobrania elementu obecnie wskazywana w kolekcji.</xref:System.Collections.IEnumerator.Current%2A?displayProperty=fullName>       Użyj <xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=fullName>metody, aby przejść do następnego elementu w kolekcji.</xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=fullName>       Użyj <xref:System.Collections.IEnumerator.Reset%2A?displayProperty=fullName>metodę, aby przenieść moduł wyliczający z powrotem do pozycji początkowej.</xref:System.Collections.IEnumerator.Reset%2A?displayProperty=fullName>      > [!NOTE] > <xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=fullName>Metoda musi zostać wywołana po utworzeniu <xref:System.Collections.IEnumerator?displayProperty=fullName>zaimplementowany obiekt lub po użyciu <xref:System.Collections.IEnumerator.Reset%2A?displayProperty=fullName>metodę, aby przenieść modułu wyliczającego do pierwszego elementu w kolekcji.</xref:System.Collections.IEnumerator.Reset%2A?displayProperty=fullName> </xref:System.Collections.IEnumerator?displayProperty=fullName> </xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=fullName> W przeciwnym razie element reprezentowany przez <xref:System.Collections.IEnumerator.Current%2A?displayProperty=fullName>właściwość jest niezdefiniowana.</xref:System.Collections.IEnumerator.Current%2A?displayProperty=fullName>"
  example:
  - "The following example demonstrates how to use the GetEnumerator method to create a <xref:System.Collections.IEnumerator?displayProperty=fullName> implemented object. It is then iterated through to display the items in the selected row.  \n  \n [!code-cs[Classic TableCellCollection.GetEnumerator Example#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_188_1.aspx)]\n [!code-vb[Classic TableCellCollection.GetEnumerator Example#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_188_1.aspx)]"
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "A &lt;xref:System.Collections.IEnumerator?displayProperty=fullName&gt; zaimplementowany obiekt, który zawiera wszystkie <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> obiektów w ramach <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref>."
  overload: System.Web.UI.WebControls.TableCellCollection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.IsReadOnly
  id: IsReadOnly
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: TableCellCollection.IsReadOnly
  fullName: System.Web.UI.WebControls.TableCellCollection.IsReadOnly
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Pobiera wartość wskazującą czy <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref> jest tylko do odczytu."
  remarks: "Ta właściwość zawsze zwraca `false` z informacją, że <xref:System.Web.UI.WebControls.TableCellCollection>można zapisać we wszystkich przypadkach.</xref:System.Web.UI.WebControls.TableCellCollection>"
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>we wszystkich przypadkach."
  overload: System.Web.UI.WebControls.TableCellCollection.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.IsSynchronized
  id: IsSynchronized
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: TableCellCollection.IsSynchronized
  fullName: System.Web.UI.WebControls.TableCellCollection.IsSynchronized
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Pobiera wartość wskazującą czy uzyskują dostęp do <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref> jest zsynchronizowany (wątkowo)."
  remarks: "Ta właściwość jest określana na podstawie <xref:System.Collections.ICollection?displayProperty=fullName>i jest zastąpiona w celu zawsze zwracają `false`.</xref:System.Collections.ICollection?displayProperty=fullName>       Aby uzyskać więcej informacji na temat właściwości IsSynchronized, zobacz <xref:System.Collections.ICollection.IsSynchronized%2A?displayProperty=fullName>Właściwość <xref:System.Collections.ICollection?displayProperty=fullName>interfejsu.</xref:System.Collections.ICollection?displayProperty=fullName> </xref:System.Collections.ICollection.IsSynchronized%2A?displayProperty=fullName>"
  syntax:
    content: public bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>we wszystkich przypadkach."
  overload: System.Web.UI.WebControls.TableCellCollection.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: TableCellCollection.Item(Int32)
  fullName: System.Web.UI.WebControls.TableCellCollection.Item(Int32)
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Pobiera <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> z <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref> pod określonym indeksem."
  remarks: "Użyj tego indeksatora, aby pobrać osoba <xref:System.Web.UI.WebControls.TableCell>w <xref:System.Web.UI.WebControls.TableCellCollection>pod określonym indeksem za pomocą prostego tablicy notacji.</xref:System.Web.UI.WebControls.TableCellCollection> </xref:System.Web.UI.WebControls.TableCell>"
  example:
  - "The following example demonstrates how to use the indexer to get a <xref:System.Web.UI.WebControls.TableCell> from a <xref:System.Web.UI.WebControls.TableCellCollection>. Note that in the example, the <xref:System.Web.UI.WebControls.TableRow.Cells%2A> property of the <xref:System.Web.UI.WebControls.TableRow> is an instance of the <xref:System.Web.UI.WebControls.TableCellCollection> class.  \n  \n [!code-vb[Classic TableCellCollection.this Example#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_965_1.aspx)]\n [!code-cs[Classic TableCellCollection.this Example#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_965_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.TableCell this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: "Określa wartość indeksu porządkowej <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> do zwrócenia."
    return:
      type: System.Web.UI.WebControls.TableCell
      description: "A <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> reprezentujący element w <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref>."
  overload: System.Web.UI.WebControls.TableCellCollection.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.Remove(System.Web.UI.WebControls.TableCell)
  id: Remove(System.Web.UI.WebControls.TableCell)
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: Remove(TableCell)
  nameWithType: TableCellCollection.Remove(TableCell)
  fullName: System.Web.UI.WebControls.TableCellCollection.Remove(TableCell)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Usuwa określoną <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> z <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref>."
  remarks: "Ta metoda umożliwia usunięcie określonej <xref:System.Web.UI.WebControls.TableCell>z <xref:System.Web.UI.WebControls.TableCellCollection>.</xref:System.Web.UI.WebControls.TableCellCollection> </xref:System.Web.UI.WebControls.TableCell>"
  example:
  - "The following example demonstrates how use the Remove method to remove the center column from the table. Note that in the example, the <xref:System.Web.UI.WebControls.TableRow.Cells%2A> property of the <xref:System.Web.UI.WebControls.TableRow> is an instance of the <xref:System.Web.UI.WebControls.TableCellCollection> class.  \n  \n [!code-cs[Classic TableCellCollection.Remove Example#1](~/add/codesnippet/csharp/5661f8f5-48f6-4afd-9f95-_1.aspx)]\n [!code-vb[Classic TableCellCollection.Remove Example#1](~/add/codesnippet/visualbasic/5661f8f5-48f6-4afd-9f95-_1.aspx)]"
  syntax:
    content: public void Remove (System.Web.UI.WebControls.TableCell cell);
    parameters:
    - id: cell
      type: System.Web.UI.WebControls.TableCell
      description: "<xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> Do usunięcia z <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref>."
  overload: System.Web.UI.WebControls.TableCellCollection.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: TableCellCollection.RemoveAt(Int32)
  fullName: System.Web.UI.WebControls.TableCellCollection.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Usuwa <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> z <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref> pod określonym indeksem."
  remarks: "Ta metoda umożliwia usunięcie <xref:System.Web.UI.WebControls.TableCell>z <xref:System.Web.UI.WebControls.TableCellCollection>pod określonym indeksem.</xref:System.Web.UI.WebControls.TableCellCollection> </xref:System.Web.UI.WebControls.TableCell>"
  example:
  - "The following example demonstrates how use the RemoveAt method to remove the fourth column from the table. Note that in the example, the <xref:System.Web.UI.WebControls.TableRow.Cells%2A> property of the <xref:System.Web.UI.WebControls.TableRow> is an instance of the <xref:System.Web.UI.WebControls.TableCellCollection> class. Also note that the index of the <xref:System.Web.UI.WebControls.TableRow.Cells%2A> collection is zero-based.  \n  \n [!code-cs[Classic TableCellCollection.RemoveAt Example#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_147_1.aspx)]\n [!code-vb[Classic TableCellCollection.RemoveAt Example#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_147_1.aspx)]"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Indeks <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> do usunięcia z <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref>."
  overload: System.Web.UI.WebControls.TableCellCollection.RemoveAt*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.SyncRoot
  id: SyncRoot
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: SyncRoot
  nameWithType: TableCellCollection.SyncRoot
  fullName: System.Web.UI.WebControls.TableCellCollection.SyncRoot
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Pobiera obiekt, który może służyć do synchronizujący dostęp do <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref>."
  remarks: "Obiekt zwrócony w tej implementacji jest <xref:System.Web.UI.WebControls.TableCellCollection>samej siebie.</xref:System.Web.UI.WebControls.TableCellCollection>       Aby uzyskać więcej informacji na temat właściwości SyncRoot, zobacz <xref:System.Collections.ICollection.SyncRoot%2A?displayProperty=fullName>Właściwość <xref:System.Collections.ICollection?displayProperty=fullName>interfejsu.</xref:System.Collections.ICollection?displayProperty=fullName> </xref:System.Collections.ICollection.SyncRoot%2A?displayProperty=fullName>"
  syntax:
    content: public object SyncRoot { get; }
    return:
      type: System.Object
      description: "Obiekt, który może służyć do synchronizujący dostęp do kolekcji."
  overload: System.Web.UI.WebControls.TableCellCollection.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: System.Collections.IList.Add(Object)
  nameWithType: TableCellCollection.System.Collections.IList.Add(Object)
  fullName: System.Web.UI.WebControls.TableCellCollection.System.Collections.IList.Add(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Dodaje obiekt do kolekcji."
  remarks: "Zwykle należy używać <xref:System.Web.UI.WebControls.TableCellCollection.Add%2A?displayProperty=fullName>metody w celu dodania elementu do <xref:System.Web.UI.WebControls.TableCellCollection>obiektu.</xref:System.Web.UI.WebControls.TableCellCollection> </xref:System.Web.UI.WebControls.TableCellCollection.Add%2A?displayProperty=fullName>       Metody IList.Add jest jawną implementacją elementu interfejsu. Można go używać tylko wtedy, gdy <xref:System.Web.UI.WebControls.TableCellCollection>wystąpienia jest rzutowane na <xref:System.Collections.IList>interfejsu.</xref:System.Collections.IList> </xref:System.Web.UI.WebControls.TableCellCollection>"
  syntax:
    content: int IList.Add (object o);
    parameters:
    - id: o
      type: System.Object
      description: "Obiekt do dodania do kolekcji."
    return:
      type: System.Int32
      description: "Indeks, w którym obiekt został dodany do kolekcji."
  overload: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Add*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: System.Collections.IList.Contains(Object)
  nameWithType: TableCellCollection.System.Collections.IList.Contains(Object)
  fullName: System.Web.UI.WebControls.TableCellCollection.System.Collections.IList.Contains(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Określa, czy określony obiekt znajduje się w kolekcji."
  remarks: "Metoda IList.Contains jest jawną implementacją elementu interfejsu. Można go używać tylko wtedy, gdy <xref:System.Web.UI.WebControls.TableCellCollection>wystąpienia jest rzutowane na <xref:System.Collections.IList>interfejsu.</xref:System.Collections.IList> </xref:System.Web.UI.WebControls.TableCellCollection>"
  syntax:
    content: bool IList.Contains (object o);
    parameters:
    - id: o
      type: System.Object
      description: "Obiekt do zlokalizowania w kolekcji."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli obiekt jest w kolekcji; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: TableCellCollection.System.Collections.IList.IndexOf(Object)
  fullName: System.Web.UI.WebControls.TableCellCollection.System.Collections.IList.IndexOf(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Wyszukuje określony obiekt i zwraca liczony od zera indeks pierwszego wystąpienia w kolekcji."
  remarks: "Zwykle należy używać <xref:System.Web.UI.WebControls.TableCellCollection.GetCellIndex%2A>metody, aby uzyskać indeks elementu w <xref:System.Web.UI.WebControls.TableCellCollection>obiektu.</xref:System.Web.UI.WebControls.TableCellCollection> </xref:System.Web.UI.WebControls.TableCellCollection.GetCellIndex%2A>       Metoda IList.IndexOf jest jawną implementacją elementu interfejsu. Można go używać tylko wtedy, gdy <xref:System.Web.UI.WebControls.TableCellCollection>wystąpienia jest rzutowane na <xref:System.Collections.IList>interfejsu.</xref:System.Collections.IList> </xref:System.Web.UI.WebControls.TableCellCollection>"
  syntax:
    content: int IList.IndexOf (object o);
    parameters:
    - id: o
      type: System.Object
      description: "Obiekt do zlokalizowania w kolekcji."
    return:
      type: System.Int32
      description: "Liczony od zera indeks pierwszego wystąpienia obiektu w kolekcji; w przeciwnym razie wartość -1, jeśli obiekt nie jest w kolekcji."
  overload: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: TableCellCollection.System.Collections.IList.Insert(Int32,Object)
  fullName: System.Web.UI.WebControls.TableCellCollection.System.Collections.IList.Insert(Int32,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Wstawia obiektu do kolekcji pod określonym indeksem."
  remarks: "Zwykle należy używać <xref:System.Web.UI.WebControls.TableCellCollection.AddAt%2A>metody w celu dodania elementu do <xref:System.Web.UI.WebControls.TableCellCollection>obiektu.</xref:System.Web.UI.WebControls.TableCellCollection> </xref:System.Web.UI.WebControls.TableCellCollection.AddAt%2A>       Metoda IList.Insert jest jawną implementacją elementu interfejsu. Można go używać tylko wtedy, gdy <xref:System.Web.UI.WebControls.TableCellCollection>wystąpienia jest rzutowane na <xref:System.Collections.IList>interfejsu.</xref:System.Collections.IList> </xref:System.Web.UI.WebControls.TableCellCollection>"
  syntax:
    content: void IList.Insert (int index, object o);
    parameters:
    - id: index
      type: System.Int32
      description: "Liczony od zera indeks w kolekcji, w której mają zostać wstawione obiektu."
    - id: o
      type: System.Object
      description: "Obiekt do wstawienia do kolekcji."
  overload: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Insert*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: System.Collections.IList.IsFixedSize
  nameWithType: TableCellCollection.System.Collections.IList.IsFixedSize
  fullName: System.Web.UI.WebControls.TableCellCollection.System.Collections.IList.IsFixedSize
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Opis tego elementu członkowskiego zobacz <xref:System.Collections.IList.IsFixedSize*>.</xref:System.Collections.IList.IsFixedSize*>"
  remarks: "Ten element jest jawną implementacją elementu interfejsu. Można go używać tylko wtedy, gdy <xref:System.Web.UI.WebControls.TableCellCollection>wystąpienia jest rzutowane na <xref:System.Collections.IList>interfejsu.</xref:System.Collections.IList> </xref:System.Web.UI.WebControls.TableCellCollection>"
  syntax:
    content: bool System.Collections.IList.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli lista ma stały rozmiar; w przeciwnym razie wartość<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>"
  overload: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: System.Collections.IList.Item(Int32)
  nameWithType: TableCellCollection.System.Collections.IList.Item(Int32)
  fullName: System.Web.UI.WebControls.TableCellCollection.System.Collections.IList.Item(Int32)
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Opis tego elementu członkowskiego zobacz <xref:System.Collections.IList.Item*>.</xref:System.Collections.IList.Item*>"
  remarks: "Ten element jest jawną implementacją elementu interfejsu. Można go używać tylko wtedy, gdy <xref:System.Web.UI.WebControls.TableCellCollection>wystąpienia jest rzutowane na <xref:System.Collections.IList>interfejsu.</xref:System.Collections.IList> </xref:System.Web.UI.WebControls.TableCellCollection>"
  syntax:
    content: object System.Collections.IList.Item[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "Liczony od zera indeks elementu do pobrania lub ustawienia."
    return:
      type: System.Object
      description: "Element pod określonym indeksem."
  overload: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Item*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: System.Collections.IList.Remove(Object)
  nameWithType: TableCellCollection.System.Collections.IList.Remove(Object)
  fullName: System.Web.UI.WebControls.TableCellCollection.System.Collections.IList.Remove(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Usuwa obiekt z kolekcji."
  remarks: "Zwykle należy używać <xref:System.Web.UI.WebControls.TableCellCollection.Remove%2A?displayProperty=fullName>metodę, aby usunąć element z <xref:System.Web.UI.WebControls.TableCellCollection>obiektu.</xref:System.Web.UI.WebControls.TableCellCollection> </xref:System.Web.UI.WebControls.TableCellCollection.Remove%2A?displayProperty=fullName>       Metoda IList.Remove jest jawną implementacją elementu interfejsu. Można go używać tylko wtedy, gdy <xref:System.Web.UI.WebControls.TableCellCollection>wystąpienia jest rzutowane na <xref:System.Collections.IList>interfejsu.</xref:System.Collections.IList> </xref:System.Web.UI.WebControls.TableCellCollection>"
  syntax:
    content: void IList.Remove (object o);
    parameters:
    - id: o
      type: System.Object
      description: "Obiekt, który ma zostać usunięty z kolekcji."
  overload: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Remove*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Web.UI.WebControls.TableCellCollection.Add(System.Web.UI.WebControls.TableCell)
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: Add(TableCell)
  nameWithType: TableCellCollection.Add(TableCell)
  fullName: System.Web.UI.WebControls.TableCellCollection.Add(TableCell)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.UI.WebControls.TableCell
  parent: System.Web.UI.WebControls
  isExternal: false
  name: TableCell
  nameWithType: TableCell
  fullName: System.Web.UI.WebControls.TableCell
- uid: System.Web.UI.WebControls.TableCellCollection.AddAt(System.Int32,System.Web.UI.WebControls.TableCell)
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: AddAt(Int32,TableCell)
  nameWithType: TableCellCollection.AddAt(Int32,TableCell)
  fullName: System.Web.UI.WebControls.TableCellCollection.AddAt(Int32,TableCell)
- uid: System.Web.UI.WebControls.TableCellCollection.AddRange(System.Web.UI.WebControls.TableCell[])
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: AddRange(TableCell[])
  nameWithType: TableCellCollection.AddRange(TableCell[])
  fullName: System.Web.UI.WebControls.TableCellCollection.AddRange(TableCell[])
- uid: System.Web.UI.WebControls.TableCell[]
  parent: System.Web.UI.WebControls
  isExternal: false
  name: TableCell
  nameWithType: TableCell
  fullName: System.Web.UI.WebControls.TableCell[]
  spec.csharp:
  - uid: System.Web.UI.WebControls.TableCell
    name: TableCell
    nameWithType: TableCell
    fullName: TableCell[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.UI.WebControls.TableCellCollection.Clear
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: Clear()
  nameWithType: TableCellCollection.Clear()
  fullName: System.Web.UI.WebControls.TableCellCollection.Clear()
- uid: System.Web.UI.WebControls.TableCellCollection.CopyTo(System.Array,System.Int32)
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: TableCellCollection.CopyTo(Array,Int32)
  fullName: System.Web.UI.WebControls.TableCellCollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Web.UI.WebControls.TableCellCollection.Count
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: Count
  nameWithType: TableCellCollection.Count
  fullName: System.Web.UI.WebControls.TableCellCollection.Count
- uid: System.Web.UI.WebControls.TableCellCollection.GetCellIndex(System.Web.UI.WebControls.TableCell)
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: GetCellIndex(TableCell)
  nameWithType: TableCellCollection.GetCellIndex(TableCell)
  fullName: System.Web.UI.WebControls.TableCellCollection.GetCellIndex(TableCell)
- uid: System.Web.UI.WebControls.TableCellCollection.GetEnumerator
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: TableCellCollection.GetEnumerator()
  fullName: System.Web.UI.WebControls.TableCellCollection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Web.UI.WebControls.TableCellCollection.IsReadOnly
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: IsReadOnly
  nameWithType: TableCellCollection.IsReadOnly
  fullName: System.Web.UI.WebControls.TableCellCollection.IsReadOnly
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.TableCellCollection.IsSynchronized
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: IsSynchronized
  nameWithType: TableCellCollection.IsSynchronized
  fullName: System.Web.UI.WebControls.TableCellCollection.IsSynchronized
- uid: System.Web.UI.WebControls.TableCellCollection.Item(System.Int32)
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: Item(Int32)
  nameWithType: TableCellCollection.Item(Int32)
  fullName: System.Web.UI.WebControls.TableCellCollection.Item(Int32)
- uid: System.Web.UI.WebControls.TableCellCollection.Remove(System.Web.UI.WebControls.TableCell)
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: Remove(TableCell)
  nameWithType: TableCellCollection.Remove(TableCell)
  fullName: System.Web.UI.WebControls.TableCellCollection.Remove(TableCell)
- uid: System.Web.UI.WebControls.TableCellCollection.RemoveAt(System.Int32)
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: TableCellCollection.RemoveAt(Int32)
  fullName: System.Web.UI.WebControls.TableCellCollection.RemoveAt(Int32)
- uid: System.Web.UI.WebControls.TableCellCollection.SyncRoot
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: SyncRoot
  nameWithType: TableCellCollection.SyncRoot
  fullName: System.Web.UI.WebControls.TableCellCollection.SyncRoot
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Add(System.Object)
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: System.Collections.IList.Add(Object)
  nameWithType: TableCellCollection.System.Collections.IList.Add(Object)
  fullName: System.Web.UI.WebControls.TableCellCollection.System.Collections.IList.Add(Object)
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Contains(System.Object)
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: System.Collections.IList.Contains(Object)
  nameWithType: TableCellCollection.System.Collections.IList.Contains(Object)
  fullName: System.Web.UI.WebControls.TableCellCollection.System.Collections.IList.Contains(Object)
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#IndexOf(System.Object)
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: TableCellCollection.System.Collections.IList.IndexOf(Object)
  fullName: System.Web.UI.WebControls.TableCellCollection.System.Collections.IList.IndexOf(Object)
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: TableCellCollection.System.Collections.IList.Insert(Int32,Object)
  fullName: System.Web.UI.WebControls.TableCellCollection.System.Collections.IList.Insert(Int32,Object)
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#IsFixedSize
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: TableCellCollection.System.Collections.IList.IsFixedSize
  fullName: System.Web.UI.WebControls.TableCellCollection.System.Collections.IList.IsFixedSize
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Item(System.Int32)
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: System.Collections.IList.Item(Int32)
  nameWithType: TableCellCollection.System.Collections.IList.Item(Int32)
  fullName: System.Web.UI.WebControls.TableCellCollection.System.Collections.IList.Item(Int32)
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Remove(System.Object)
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: System.Collections.IList.Remove(Object)
  nameWithType: TableCellCollection.System.Collections.IList.Remove(Object)
  fullName: System.Web.UI.WebControls.TableCellCollection.System.Collections.IList.Remove(Object)
- uid: System.Web.UI.WebControls.TableCellCollection.Add*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: Add
  nameWithType: TableCellCollection.Add
- uid: System.Web.UI.WebControls.TableCellCollection.AddAt*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: AddAt
  nameWithType: TableCellCollection.AddAt
- uid: System.Web.UI.WebControls.TableCellCollection.AddRange*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: AddRange
  nameWithType: TableCellCollection.AddRange
- uid: System.Web.UI.WebControls.TableCellCollection.Clear*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: Clear
  nameWithType: TableCellCollection.Clear
- uid: System.Web.UI.WebControls.TableCellCollection.CopyTo*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: CopyTo
  nameWithType: TableCellCollection.CopyTo
- uid: System.Web.UI.WebControls.TableCellCollection.Count*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: Count
  nameWithType: TableCellCollection.Count
- uid: System.Web.UI.WebControls.TableCellCollection.GetCellIndex*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: GetCellIndex
  nameWithType: TableCellCollection.GetCellIndex
- uid: System.Web.UI.WebControls.TableCellCollection.GetEnumerator*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: TableCellCollection.GetEnumerator
- uid: System.Web.UI.WebControls.TableCellCollection.IsReadOnly*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: IsReadOnly
  nameWithType: TableCellCollection.IsReadOnly
- uid: System.Web.UI.WebControls.TableCellCollection.IsSynchronized*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: IsSynchronized
  nameWithType: TableCellCollection.IsSynchronized
- uid: System.Web.UI.WebControls.TableCellCollection.Item*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: Item
  nameWithType: TableCellCollection.Item
- uid: System.Web.UI.WebControls.TableCellCollection.Remove*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: Remove
  nameWithType: TableCellCollection.Remove
- uid: System.Web.UI.WebControls.TableCellCollection.RemoveAt*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: RemoveAt
  nameWithType: TableCellCollection.RemoveAt
- uid: System.Web.UI.WebControls.TableCellCollection.SyncRoot*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: SyncRoot
  nameWithType: TableCellCollection.SyncRoot
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Add*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: System.Collections.IList.Add
  nameWithType: TableCellCollection.System.Collections.IList.Add
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Contains*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: System.Collections.IList.Contains
  nameWithType: TableCellCollection.System.Collections.IList.Contains
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#IndexOf*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: System.Collections.IList.IndexOf
  nameWithType: TableCellCollection.System.Collections.IList.IndexOf
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Insert*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: System.Collections.IList.Insert
  nameWithType: TableCellCollection.System.Collections.IList.Insert
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#IsFixedSize*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: TableCellCollection.System.Collections.IList.IsFixedSize
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Item*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: System.Collections.IList.Item
  nameWithType: TableCellCollection.System.Collections.IList.Item
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Remove*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: System.Collections.IList.Remove
  nameWithType: TableCellCollection.System.Collections.IList.Remove
