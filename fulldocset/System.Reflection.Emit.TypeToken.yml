### YamlMime:ManagedReference
items:
- uid: System.Reflection.Emit.TypeToken
  id: TypeToken
  children:
  - System.Reflection.Emit.TypeToken.Empty
  - System.Reflection.Emit.TypeToken.Equals(System.Object)
  - System.Reflection.Emit.TypeToken.Equals(System.Reflection.Emit.TypeToken)
  - System.Reflection.Emit.TypeToken.GetHashCode
  - System.Reflection.Emit.TypeToken.op_Equality(System.Reflection.Emit.TypeToken,System.Reflection.Emit.TypeToken)
  - System.Reflection.Emit.TypeToken.op_Inequality(System.Reflection.Emit.TypeToken,System.Reflection.Emit.TypeToken)
  - System.Reflection.Emit.TypeToken.Token
  langs:
  - csharp
  name: TypeToken
  nameWithType: TypeToken
  fullName: System.Reflection.Emit.TypeToken
  type: Struct
  summary: "Reprezentuje <xref uid=&quot;langword_csharp_Token&quot; name=&quot;Token&quot; href=&quot;&quot;> </xref> zwrócony przez metadane do reprezentowania typu."
  remarks: "Typ obiektu jest nazywana klasy obiektu."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public struct TypeToken
  inheritance:
  - System.ValueType
  implements: []
  platform:
  - net462
- uid: System.Reflection.Emit.TypeToken.Empty
  id: Empty
  parent: System.Reflection.Emit.TypeToken
  langs:
  - csharp
  name: Empty
  nameWithType: TypeToken.Empty
  fullName: System.Reflection.Emit.TypeToken.Empty
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Wartość domyślna <xref uid=&quot;langword_csharp_TypeToken&quot; name=&quot;TypeToken&quot; href=&quot;&quot;> </xref> z <xref:System.Reflection.Emit.TypeToken.Token*>wartość 0.</xref:System.Reflection.Emit.TypeToken.Token*>"
  syntax:
    content: public static readonly System.Reflection.Emit.TypeToken Empty;
    return:
      type: System.Reflection.Emit.TypeToken
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.TypeToken.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.Emit.TypeToken
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: TypeToken.Equals(Object)
  fullName: System.Reflection.Emit.TypeToken.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Sprawdza, czy dany obiekt jest wystąpieniem <xref uid=&quot;langword_csharp_TypeToken&quot; name=&quot;TypeToken&quot; href=&quot;&quot;> </xref> i jest taki sam, jak to wystąpienie."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "Obiekt do porównania z tym elementu TypeToken."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli <code> obj </code> jest wystąpieniem <xref uid=&quot;langword_csharp_TypeToken&quot; name=&quot;TypeToken&quot; href=&quot;&quot;> </xref> i jest taki sam, jak ten obiekt, a w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Reflection.Emit.TypeToken.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.TypeToken.Equals(System.Reflection.Emit.TypeToken)
  id: Equals(System.Reflection.Emit.TypeToken)
  parent: System.Reflection.Emit.TypeToken
  langs:
  - csharp
  name: Equals(TypeToken)
  nameWithType: TypeToken.Equals(TypeToken)
  fullName: System.Reflection.Emit.TypeToken.Equals(TypeToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Wskazuje, czy bieżące wystąpienie jest równe określonej <xref href=&quot;System.Reflection.Emit.TypeToken&quot;> </xref>."
  syntax:
    content: public bool Equals (System.Reflection.Emit.TypeToken obj);
    parameters:
    - id: obj
      type: System.Reflection.Emit.TypeToken
      description: "<xref href=&quot;System.Reflection.Emit.TypeToken&quot;> </xref> Do porównania z bieżącym wystąpieniem."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli wartość <code> obj </code> wartość bieżącego wystąpienia, a w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Reflection.Emit.TypeToken.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.TypeToken.GetHashCode
  id: GetHashCode
  parent: System.Reflection.Emit.TypeToken
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: TypeToken.GetHashCode()
  fullName: System.Reflection.Emit.TypeToken.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Generuje wartość skrótu dla tego typu."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Zwraca wartość skrótu dla tego typu."
  overload: System.Reflection.Emit.TypeToken.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.TypeToken.op_Equality(System.Reflection.Emit.TypeToken,System.Reflection.Emit.TypeToken)
  id: op_Equality(System.Reflection.Emit.TypeToken,System.Reflection.Emit.TypeToken)
  parent: System.Reflection.Emit.TypeToken
  langs:
  - csharp
  name: op_Equality(TypeToken,TypeToken)
  nameWithType: TypeToken.op_Equality(TypeToken,TypeToken)
  fullName: System.Reflection.Emit.TypeToken.op_Equality(TypeToken,TypeToken)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Wskazuje, czy dwa <xref href=&quot;System.Reflection.Emit.TypeToken&quot;> </xref> struktury są takie same."
  syntax:
    content: public static bool op_Equality (System.Reflection.Emit.TypeToken a, System.Reflection.Emit.TypeToken b);
    parameters:
    - id: a
      type: System.Reflection.Emit.TypeToken
      description: "<xref href=&quot;System.Reflection.Emit.TypeToken&quot;> </xref> Do porównania `b`."
    - id: b
      type: System.Reflection.Emit.TypeToken
      description: "<xref href=&quot;System.Reflection.Emit.TypeToken&quot;> </xref> Do porównania `a`."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>a</code> is equal to <code>b</code>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Reflection.Emit.TypeToken.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.TypeToken.op_Inequality(System.Reflection.Emit.TypeToken,System.Reflection.Emit.TypeToken)
  id: op_Inequality(System.Reflection.Emit.TypeToken,System.Reflection.Emit.TypeToken)
  parent: System.Reflection.Emit.TypeToken
  langs:
  - csharp
  name: op_Inequality(TypeToken,TypeToken)
  nameWithType: TypeToken.op_Inequality(TypeToken,TypeToken)
  fullName: System.Reflection.Emit.TypeToken.op_Inequality(TypeToken,TypeToken)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Wskazuje, czy dwa <xref href=&quot;System.Reflection.Emit.TypeToken&quot;> </xref> struktur nie są takie same."
  syntax:
    content: public static bool op_Inequality (System.Reflection.Emit.TypeToken a, System.Reflection.Emit.TypeToken b);
    parameters:
    - id: a
      type: System.Reflection.Emit.TypeToken
      description: "<xref href=&quot;System.Reflection.Emit.TypeToken&quot;> </xref> Do porównania `b`."
    - id: b
      type: System.Reflection.Emit.TypeToken
      description: "<xref href=&quot;System.Reflection.Emit.TypeToken&quot;> </xref> Do porównania `a`."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>a</code> is not equal to <code>b</code>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Reflection.Emit.TypeToken.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.TypeToken.Token
  id: Token
  parent: System.Reflection.Emit.TypeToken
  langs:
  - csharp
  name: Token
  nameWithType: TypeToken.Token
  fullName: System.Reflection.Emit.TypeToken.Token
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Pobiera token metadanych dla tej klasy."
  syntax:
    content: public int Token { get; }
    return:
      type: System.Int32
      description: "Tylko do odczytu. Pobiera token metadanych tego typu."
  overload: System.Reflection.Emit.TypeToken.Token*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.Reflection.Emit.TypeToken.Empty
  parent: System.Reflection.Emit.TypeToken
  isExternal: false
  name: Empty
  nameWithType: TypeToken.Empty
  fullName: System.Reflection.Emit.TypeToken.Empty
- uid: System.Reflection.Emit.TypeToken
  parent: System.Reflection.Emit
  isExternal: false
  name: TypeToken
  nameWithType: TypeToken
  fullName: System.Reflection.Emit.TypeToken
- uid: System.Reflection.Emit.TypeToken.Equals(System.Object)
  parent: System.Reflection.Emit.TypeToken
  isExternal: false
  name: Equals(Object)
  nameWithType: TypeToken.Equals(Object)
  fullName: System.Reflection.Emit.TypeToken.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.Emit.TypeToken.Equals(System.Reflection.Emit.TypeToken)
  parent: System.Reflection.Emit.TypeToken
  isExternal: false
  name: Equals(TypeToken)
  nameWithType: TypeToken.Equals(TypeToken)
  fullName: System.Reflection.Emit.TypeToken.Equals(TypeToken)
- uid: System.Reflection.Emit.TypeToken.GetHashCode
  parent: System.Reflection.Emit.TypeToken
  isExternal: false
  name: GetHashCode()
  nameWithType: TypeToken.GetHashCode()
  fullName: System.Reflection.Emit.TypeToken.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.TypeToken.op_Equality(System.Reflection.Emit.TypeToken,System.Reflection.Emit.TypeToken)
  parent: System.Reflection.Emit.TypeToken
  isExternal: false
  name: op_Equality(TypeToken,TypeToken)
  nameWithType: TypeToken.op_Equality(TypeToken,TypeToken)
  fullName: System.Reflection.Emit.TypeToken.op_Equality(TypeToken,TypeToken)
- uid: System.Reflection.Emit.TypeToken.op_Inequality(System.Reflection.Emit.TypeToken,System.Reflection.Emit.TypeToken)
  parent: System.Reflection.Emit.TypeToken
  isExternal: false
  name: op_Inequality(TypeToken,TypeToken)
  nameWithType: TypeToken.op_Inequality(TypeToken,TypeToken)
  fullName: System.Reflection.Emit.TypeToken.op_Inequality(TypeToken,TypeToken)
- uid: System.Reflection.Emit.TypeToken.Token
  parent: System.Reflection.Emit.TypeToken
  isExternal: false
  name: Token
  nameWithType: TypeToken.Token
  fullName: System.Reflection.Emit.TypeToken.Token
- uid: System.Reflection.Emit.TypeToken.Equals*
  parent: System.Reflection.Emit.TypeToken
  isExternal: false
  name: Equals
  nameWithType: TypeToken.Equals
- uid: System.Reflection.Emit.TypeToken.GetHashCode*
  parent: System.Reflection.Emit.TypeToken
  isExternal: false
  name: GetHashCode
  nameWithType: TypeToken.GetHashCode
- uid: System.Reflection.Emit.TypeToken.op_Equality*
  parent: System.Reflection.Emit.TypeToken
  isExternal: false
  name: op_Equality
  nameWithType: TypeToken.op_Equality
- uid: System.Reflection.Emit.TypeToken.op_Inequality*
  parent: System.Reflection.Emit.TypeToken
  isExternal: false
  name: op_Inequality
  nameWithType: TypeToken.op_Inequality
- uid: System.Reflection.Emit.TypeToken.Token*
  parent: System.Reflection.Emit.TypeToken
  isExternal: false
  name: Token
  nameWithType: TypeToken.Token
