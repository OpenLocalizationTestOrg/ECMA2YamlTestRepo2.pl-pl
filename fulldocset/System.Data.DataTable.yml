### YamlMime:ManagedReference
items:
- uid: System.Data.DataTable
  id: DataTable
  children:
  - System.Data.DataTable.#ctor
  - System.Data.DataTable.#ctor(System.String)
  - System.Data.DataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataTable.#ctor(System.String,System.String)
  - System.Data.DataTable.AcceptChanges
  - System.Data.DataTable.BeginInit
  - System.Data.DataTable.BeginLoadData
  - System.Data.DataTable.CaseSensitive
  - System.Data.DataTable.ChildRelations
  - System.Data.DataTable.Clear
  - System.Data.DataTable.Clone
  - System.Data.DataTable.ColumnChanged
  - System.Data.DataTable.ColumnChanging
  - System.Data.DataTable.Columns
  - System.Data.DataTable.Compute(System.String,System.String)
  - System.Data.DataTable.Constraints
  - System.Data.DataTable.Copy
  - System.Data.DataTable.CreateDataReader
  - System.Data.DataTable.CreateInstance
  - System.Data.DataTable.DataSet
  - System.Data.DataTable.DefaultView
  - System.Data.DataTable.DisplayExpression
  - System.Data.DataTable.EndInit
  - System.Data.DataTable.EndLoadData
  - System.Data.DataTable.ExtendedProperties
  - System.Data.DataTable.fInitInProgress
  - System.Data.DataTable.GetChanges
  - System.Data.DataTable.GetChanges(System.Data.DataRowState)
  - System.Data.DataTable.GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)
  - System.Data.DataTable.GetErrors
  - System.Data.DataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataTable.GetRowType
  - System.Data.DataTable.GetSchema
  - System.Data.DataTable.HasErrors
  - System.Data.DataTable.ImportRow(System.Data.DataRow)
  - System.Data.DataTable.Initialized
  - System.Data.DataTable.IsInitialized
  - System.Data.DataTable.Load(System.Data.IDataReader)
  - System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)
  - System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)
  - System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)
  - System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)
  - System.Data.DataTable.Locale
  - System.Data.DataTable.Merge(System.Data.DataTable)
  - System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)
  - System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  - System.Data.DataTable.MinimumCapacity
  - System.Data.DataTable.Namespace
  - System.Data.DataTable.NewRow
  - System.Data.DataTable.NewRowArray(System.Int32)
  - System.Data.DataTable.NewRowFromBuilder(System.Data.DataRowBuilder)
  - System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)
  - System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)
  - System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  - System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)
  - System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)
  - System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)
  - System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)
  - System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)
  - System.Data.DataTable.OnTableCleared(System.Data.DataTableClearEventArgs)
  - System.Data.DataTable.OnTableClearing(System.Data.DataTableClearEventArgs)
  - System.Data.DataTable.OnTableNewRow(System.Data.DataTableNewRowEventArgs)
  - System.Data.DataTable.ParentRelations
  - System.Data.DataTable.Prefix
  - System.Data.DataTable.PrimaryKey
  - System.Data.DataTable.ReadXml(System.IO.Stream)
  - System.Data.DataTable.ReadXml(System.IO.TextReader)
  - System.Data.DataTable.ReadXml(System.String)
  - System.Data.DataTable.ReadXml(System.Xml.XmlReader)
  - System.Data.DataTable.ReadXmlSchema(System.IO.Stream)
  - System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)
  - System.Data.DataTable.ReadXmlSchema(System.String)
  - System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)
  - System.Data.DataTable.ReadXmlSerializable(System.Xml.XmlReader)
  - System.Data.DataTable.RejectChanges
  - System.Data.DataTable.RemotingFormat
  - System.Data.DataTable.Reset
  - System.Data.DataTable.RowChanged
  - System.Data.DataTable.RowChanging
  - System.Data.DataTable.RowDeleted
  - System.Data.DataTable.RowDeleting
  - System.Data.DataTable.Rows
  - System.Data.DataTable.Select
  - System.Data.DataTable.Select(System.String)
  - System.Data.DataTable.Select(System.String,System.String)
  - System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)
  - System.Data.DataTable.Site
  - System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection
  - System.Data.DataTable.System#ComponentModel#IListSource#GetList
  - System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema
  - System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  - System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  - System.Data.DataTable.TableCleared
  - System.Data.DataTable.TableClearing
  - System.Data.DataTable.TableName
  - System.Data.DataTable.TableNewRow
  - System.Data.DataTable.ToString
  - System.Data.DataTable.WriteXml(System.IO.Stream)
  - System.Data.DataTable.WriteXml(System.IO.TextWriter)
  - System.Data.DataTable.WriteXml(System.String)
  - System.Data.DataTable.WriteXml(System.Xml.XmlWriter)
  - System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)
  - System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  - System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)
  - System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  - System.Data.DataTable.WriteXml(System.String,System.Boolean)
  - System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)
  - System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)
  - System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  - System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)
  - System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)
  - System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)
  - System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)
  - System.Data.DataTable.WriteXmlSchema(System.IO.Stream)
  - System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)
  - System.Data.DataTable.WriteXmlSchema(System.String)
  - System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)
  - System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)
  - System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)
  - System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)
  - System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)
  langs:
  - csharp
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
  type: Class
  summary: "Reprezentuje jedna tabela danych w pamięci."
  remarks: "Element DataTable jest obiektem centralnej w bibliotece programu ADO.NET. Innych obiektów, które DataTable obejmują <xref:System.Data.DataSet>i <xref:System.Data.DataView>.</xref:System.Data.DataView> </xref:System.Data.DataSet>       Podczas uzyskiwania dostępu do obiektów DataTable, należy pamiętać, że są one warunkowo z uwzględnieniem wielkości liter. Na przykład jeśli jeden element DataTable o nazwie &quot;mydatatable&quot; i drugiego o nazwie &quot;Mydatatable&quot;, ciąg używany do wyszukiwania dla jednej z tabel jest traktowany jako wielkość liter. Jednak jeśli istnieje &quot;mydatatable&quot; i &quot;Mydatatable&quot; nie ma, ciąg wyszukiwania jest traktowany jako bez uwzględniania wielkości liter. A <xref:System.Data.DataSet>może zawierać dwóch DataTable — obiekty o tej samej <xref:System.Data.DataTable.TableName%2A>wartość właściwości, ale o różnych <xref:System.Data.DataTable.Namespace%2A>wartości właściwości.</xref:System.Data.DataTable.Namespace%2A> </xref:System.Data.DataTable.TableName%2A> </xref:System.Data.DataSet> Aby uzyskać więcej informacji na temat pracy z obiektami DataTable, zobacz [tworzenie DataTable](~/add/includes/ajax-current-ext-md.md).       Jeśli tworzysz DataTable programowo, należy najpierw zdefiniować schematem przez dodanie <xref:System.Data.DataColumn>obiekty do <xref:System.Data.DataColumnCollection>(dostępnej za pośrednictwem <xref:System.Data.DataTable.Columns%2A>Właściwości).</xref:System.Data.DataTable.Columns%2A> </xref:System.Data.DataColumnCollection> </xref:System.Data.DataColumn> Aby uzyskać więcej informacji o dodawaniu <xref:System.Data.DataColumn>obiekty, zobacz [Dodawanie kolumn do DataTable](~/add/includes/ajax-current-ext-md.md).</xref:System.Data.DataColumn>       Aby dodać wierszy do DataTable, należy najpierw użyć <xref:System.Data.DataTable.NewRow%2A>metodę, aby zwrócić nowe <xref:System.Data.DataRow>obiektu.</xref:System.Data.DataRow> </xref:System.Data.DataTable.NewRow%2A> <xref:System.Data.DataTable.NewRow%2A>Metoda zwraca wartość na wiersz z schematu obiektu DataTable, zgodnie z definicją <xref:System.Data.DataColumnCollection>.</xref:System.Data.DataColumnCollection> tabeli</xref:System.Data.DataTable.NewRow%2A> Maksymalna liczba wierszy, które mogą być przechowywane DataTable to 16,777,216. Aby uzyskać więcej informacji, zobacz [Dodawanie danych do elementu DataTable](~/add/includes/ajax-current-ext-md.md).       Element DataTable również zawiera kolekcję <xref:System.Data.Constraint>obiektów, które mogą służyć do zapewnienia integralności danych.</xref:System.Data.Constraint> Aby uzyskać więcej informacji, zobacz [ograniczenia DataTable](~/add/includes/ajax-current-ext-md.md).       Istnieje wiele zdarzeń DataTable, które mogą służyć do określenia, kiedy zmian w tabeli. Obejmują one <xref:System.Data.DataTable.RowChanged>, <xref:System.Data.DataTable.RowChanging>, <xref:System.Data.DataTable.RowDeleting>i <xref:System.Data.DataTable.RowDeleted>.</xref:System.Data.DataTable.RowDeleted> </xref:System.Data.DataTable.RowDeleting> </xref:System.Data.DataTable.RowChanging> </xref:System.Data.DataTable.RowChanged> Aby uzyskać więcej informacji o zdarzeniach, które mogą być używane z elementu DataTable, zobacz [obsługi zdarzeń DataTable](~/add/includes/ajax-current-ext-md.md).       Gdy tworzone jest wystąpienie elementu DataTable, niektóre właściwości odczytu/zapisu są ustawiane na wartości początkowe. Aby uzyskać listę tych wartości, zobacz <xref:System.Data.DataTable.%23ctor%2A?displayProperty=fullName>tematu konstruktora.</xref:System.Data.DataTable.%23ctor%2A?displayProperty=fullName>      > [!NOTE] > <xref:System.Data.DataSet>I DataTable — obiekty dziedziczyć <xref:System.ComponentModel.MarshalByValueComponent>i obsługuje <xref:System.Runtime.Serialization.ISerializable>interfejs dla niego komunikację zdalną środowiska .NET Framework.</xref:System.Runtime.Serialization.ISerializable> </xref:System.ComponentModel.MarshalByValueComponent> </xref:System.Data.DataSet> Są to jedyne obiekty ADO.NET, używanych do komunikacji zdalnej .NET Framework."
  example:
  - "The following example creates two DataTable objects and one <xref:System.Data.DataRelation> object, and adds the new objects to a <xref:System.Data.DataSet>. The tables are then displayed in a <xref:System.Windows.Forms.DataGridView> control.  \n  \n [!code-vb[Classic WebData DataTable Example#1](~/add/codesnippet/visualbasic/t-system.data.datatable_1.vb)]\n [!code-cs[Classic WebData DataTable Example#1](~/add/codesnippet/csharp/t-system.data.datatable_1.cs)]  \n  \n This sample demonstrates how to create a DataTable manually with specific schema definitions:  \n  \n-   Create multiple DataTables and define the initial columns.  \n  \n-   Create the table constraints.  \n  \n-   Insert the values and display the tables.  \n  \n-   Create the expression columns and display the tables.  \n  \n C# and Visual Basic projects with this code sample can be found on [Developer Code Samples](http://code.msdn.microsoft.com/How-to-create-DataTable-7abb4914).  \n  \n [!code-cs[Classic WebData DataTable Example2#1](~/add/codesnippet/csharp/t-system.data.datatable_2.cs)]\n [!code-vb[Classic WebData DataTable Example2#1](~/add/codesnippet/visualbasic/t-system.data.datatable_2.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("RowChanging")]

      [System.ComponentModel.DefaultProperty("TableName")]

      [System.ComponentModel.DesignTimeVisible(false)]

      [System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DataTableEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ComponentModel.ToolboxItem(false)]

      [System.Xml.Serialization.XmlSchemaProvider("GetDataTableSchema")]

      public class DataTable : System.ComponentModel.MarshalByValueComponent, System.ComponentModel.IListSource, System.ComponentModel.ISupportInitializeNotification, System.Runtime.Serialization.ISerializable, System.Xml.Serialization.IXmlSerializable
  inheritance:
  - System.Object
  - System.ComponentModel.MarshalByValueComponent
  implements:
  - System.ComponentModel.IListSource
  - System.ComponentModel.ISupportInitializeNotification
  - System.Runtime.Serialization.ISerializable
  - System.Xml.Serialization.IXmlSerializable
  inheritedMembers:
  - System.ComponentModel.MarshalByValueComponent.Container
  - System.ComponentModel.MarshalByValueComponent.DesignMode
  - System.ComponentModel.MarshalByValueComponent.Dispose
  - System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)
  - System.ComponentModel.MarshalByValueComponent.Disposed
  - System.ComponentModel.MarshalByValueComponent.Events
  - System.ComponentModel.MarshalByValueComponent.GetService(System.Type)
  platform:
  - net462
- uid: System.Data.DataTable.#ctor
  id: '#ctor'
  parent: System.Data.DataTable
  langs:
  - csharp
  name: DataTable()
  nameWithType: DataTable.DataTable()
  fullName: System.Data.DataTable.DataTable()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Data.DataTable&quot;> </xref> klasy bez argumentów."
  remarks: "Konstruktor ustawia wartości początkowe dla wszystkich właściwości <xref:System.Data.DataTable>obiektu.</xref:System.Data.DataTable> W poniższej tabeli przedstawiono właściwości i ich wartości domyślne. Gdy wystąpienie klasy <xref:System.Data.DataTable>utworzono następujące właściwości są ustawione na wartości początkowe odczytu/zapisu.</xref:System.Data.DataTable>      | Właściwość | Wartość domyślna |   |--------------|-------------------|   | **CaseSensitive**| Taki sam jak element nadrzędny <xref:System.Data.DataSet>, jeśli należy do jednej.</xref:System.Data.DataSet> W przeciwnym razie `false`. |   | **DisplayExpression**| Pusty ciąg (&quot;&quot;) |   | **Locale**| Taka sama jak nadrzędnego <xref:System.Data.DataSet>obiektu <xref:System.Globalization.CultureInfo>(zwracanym przez właściwość <xref:System.Data.DataSet.Locale%2A>); Jeśli nadrzędny nie istnieje, domyślnym jest bieżący system <xref:System.Globalization.CultureInfo>. |   | **Element MinimumCapacity**|&50; wierszy. |       Można zmienić wartości dla żadnego z tych właściwości, za pomocą oddzielnego wywołania do właściwości.</xref:System.Globalization.CultureInfo> </xref:System.Data.DataSet.Locale%2A> </xref:System.Globalization.CultureInfo> </xref:System.Data.DataSet>"
  example:
  - "The following example creates a new <xref:System.Data.DataTable> with <xref:System.Data.DataColumn> and <xref:System.Data.DataRow>, and displays it in a <xref:System.Windows.Forms.DataGridView> control.  \n  \n [!code-vb[Classic WebData DataTable.DataTable Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._0_1.vb)]\n [!code-cs[Classic WebData DataTable.DataTable Example#1](~/add/codesnippet/csharp/m-system.data.datatable._0_1.cs)]"
  syntax:
    content: public DataTable ();
    parameters: []
  overload: System.Data.DataTable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.DataTable
  langs:
  - csharp
  name: DataTable(String)
  nameWithType: DataTable.DataTable(String)
  fullName: System.Data.DataTable.DataTable(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Data.DataTable&quot;> </xref> klasy o nazwie określonej tabeli."
  remarks: ''
  example:
  - "The following example creates a <xref:System.Data.DataTable> and displays it in a <xref:System.Windows.Forms.DataGridView> control.  \n  \n [!code-cs[Classic WebData DataTable.DataTable1 Example#1](~/add/codesnippet/csharp/m-system.data.datatable._21_1.cs)]\n [!code-vb[Classic WebData DataTable.DataTable1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._21_1.vb)]"
  syntax:
    content: public DataTable (string tableName);
    parameters:
    - id: tableName
      type: System.String
      description: "Nazwa umożliwiają tabeli. Jeśli `tableName` jest <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> lub pusty ciąg, domyślna nazwa znajduje się po dodaniu do <xref href=&quot;System.Data.DataTableCollection&quot;> </xref>."
  overload: System.Data.DataTable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Data.DataTable
  langs:
  - csharp
  name: DataTable(SerializationInfo,StreamingContext)
  nameWithType: DataTable.DataTable(SerializationInfo,StreamingContext)
  fullName: System.Data.DataTable.DataTable(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Data.DataTable&quot;> </xref> klasy z <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> i <xref:System.Runtime.Serialization.StreamingContext>.</xref:System.Runtime.Serialization.StreamingContext>"
  remarks: "Ta implementacja <xref:System.Data.DataTable>jest wymagany dla <xref:System.Runtime.Serialization.ISerializable>.</xref:System.Runtime.Serialization.ISerializable> Konstruktor</xref:System.Data.DataTable>"
  syntax:
    content: protected DataTable (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Dane potrzebne do serializacji lub deserializacji obiektu."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Źródło i miejsce docelowe danego strumieniu serializowanym."
  overload: System.Data.DataTable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Data.DataTable
  langs:
  - csharp
  name: DataTable(String,String)
  nameWithType: DataTable.DataTable(String,String)
  fullName: System.Data.DataTable.DataTable(String,String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Data.DataTable&quot;> </xref> przy użyciu nazwy określonej tabeli i przestrzeni nazw."
  syntax:
    content: public DataTable (string tableName, string tableNamespace);
    parameters:
    - id: tableName
      type: System.String
      description: "Nazwa umożliwiają tabeli. Jeśli `tableName` jest <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> lub pusty ciąg, domyślna nazwa znajduje się po dodaniu do <xref href=&quot;System.Data.DataTableCollection&quot;> </xref>."
    - id: tableNamespace
      type: System.String
      description: "Obszar nazw XML reprezentację danych przechowywanych w <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataTable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.AcceptChanges
  id: AcceptChanges
  parent: System.Data.DataTable
  langs:
  - csharp
  name: AcceptChanges()
  nameWithType: DataTable.AcceptChanges()
  fullName: System.Data.DataTable.AcceptChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zatwierdza wszystkie zmiany wprowadzone w tej tabeli od czasu ostatniego AcceptChanges została wywołana."
  remarks: "Gdy metoda AcceptChanges jest wywoływana, wszelkie <xref:System.Data.DataRow>obiektu nadal w trybie edycji kończy się pomyślnie jego edycji.</xref:System.Data.DataRow> <xref:System.Data.DataRowState>Zmieniają się także: wszystkie `Added` i `Modified` wierszy stają się `Unchanged`, i `Deleted` wiersze zostaną usunięte.</xref:System.Data.DataRowState>       Zazwyczaj wywoływana jest metoda AcceptChanges na <xref:System.Data.DataTable>po próbę aktualizacji <xref:System.Data.DataSet>przy użyciu <xref:System.Data.Common.DbDataAdapter.Update%2A?displayProperty=fullName>metody.</xref:System.Data.Common.DbDataAdapter.Update%2A?displayProperty=fullName> </xref:System.Data.DataSet> </xref:System.Data.DataTable>"
  example:
  - "The following example tests each table for errors. If the table's errors can be reconciled (by passing it to an undefined function), AcceptChanges is called; otherwise, <xref:System.Data.DataTable.RejectChanges%2A> is called.  \n  \n [!code-vb[Classic WebData DataTable.AcceptChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._22_1.vb)]\n [!code-cs[Classic WebData DataTable.AcceptChanges Example#1](~/add/codesnippet/csharp/m-system.data.datatable._22_1.cs)]"
  syntax:
    content: public void AcceptChanges ();
    parameters: []
  overload: System.Data.DataTable.AcceptChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.BeginInit
  id: BeginInit
  parent: System.Data.DataTable
  langs:
  - csharp
  name: BeginInit()
  nameWithType: DataTable.BeginInit()
  fullName: System.Data.DataTable.BeginInit()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Rozpoczyna inicjowanie <xref href=&quot;System.Data.DataTable&quot;> </xref> który jest używany w formularzu lub używany przez inny składnik. Inicjowanie występuje w czasie wykonywania."
  remarks: "Środowisku projektowania programu Visual Studio .NET używa tej metody, aby rozpocząć inicjowanie składnik, który jest używany w formularzu lub używany przez inny składnik. <xref:System.Data.DataTable.EndInit%2A>Metoda kończy się inicjowania.</xref:System.Data.DataTable.EndInit%2A> Przy użyciu BeginInit i <xref:System.Data.DataTable.EndInit%2A>metody uniemożliwia użycie przed pełnym zainicjowaniem kontrolki.</xref:System.Data.DataTable.EndInit%2A>"
  syntax:
    content: public virtual void BeginInit ();
    parameters: []
  overload: System.Data.DataTable.BeginInit*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.BeginLoadData
  id: BeginLoadData
  parent: System.Data.DataTable
  langs:
  - csharp
  name: BeginLoadData()
  nameWithType: DataTable.BeginLoadData()
  fullName: System.Data.DataTable.BeginLoadData()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Powoduje wyłączenie powiadomień, indeks konserwacji i ograniczeń podczas ładowania danych."
  remarks: "Użyj BeginLoadData w połączeniu z <xref:System.Data.DataTable.LoadDataRow%2A>i <xref:System.Data.DataTable.EndLoadData%2A>.</xref:System.Data.DataTable.EndLoadData%2A> </xref:System.Data.DataTable.LoadDataRow%2A>"
  syntax:
    content: public void BeginLoadData ();
    parameters: []
  overload: System.Data.DataTable.BeginLoadData*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.CaseSensitive
  id: CaseSensitive
  parent: System.Data.DataTable
  langs:
  - csharp
  name: CaseSensitive
  nameWithType: DataTable.CaseSensitive
  fullName: System.Data.DataTable.CaseSensitive
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Wskazuje, czy porównywanie ciągów wewnątrz tabeli jest rozróżniana wielkość liter."
  remarks: "Właściwości CaseSensitive dotyczy porównywanie ciągów w sortowanie, wyszukiwanie i filtrowanie."
  example:
  - "The following example calls the <xref:System.Data.DataTable.Select%2A> method twice on a <xref:System.Data.DataTable>. The first time, the CaseSensitive property is set to `false`, the second, to `true`.  \n  \n [!code-cs[Classic WebData DataTable.CaseSensitive Example#1](~/add/codesnippet/csharp/p-system.data.datatable._0_1.cs)]\n [!code-vb[Classic WebData DataTable.CaseSensitive Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._0_1.vb)]"
  syntax:
    content: public bool CaseSensitive { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli wynikiem porównania jest rozróżniana wielkość liter; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Domyślnym ustawieniem jest nadrzędny <xref href=&quot;System.Data.DataSet&quot;> </xref> obiektu <xref:System.Data.DataSet.CaseSensitive*>Właściwości, lub <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> Jeśli <xref href=&quot;System.Data.DataTable&quot;> </xref> utworzono niezależnie od <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.Data.DataSet.CaseSensitive*>"
  overload: System.Data.DataTable.CaseSensitive*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ChildRelations
  id: ChildRelations
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ChildRelations
  nameWithType: DataTable.ChildRelations
  fullName: System.Data.DataTable.ChildRelations
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera kolekcję relacje podrzędne dla tej <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: 'A <xref:System.Data.DataRelation>definiuje relację między dwiema tabelami.</xref:System.Data.DataRelation> Zazwyczaj dwie tabele są połączone za pośrednictwem jednego pola, który zawiera te same dane. Na przykład tabeli, która zawiera dane adresów może mieć jedno pole zawierający kody, które reprezentują krajów i regionów. Druga tabela, która zawiera dane kraj/region będzie mieć jedno pole, który zawiera kod, który identyfikuje kraj/region, a jest ten kod, który jest wstawiany do odpowiednich pól w pierwszej tabeli. A <xref:System.Data.DataRelation>, następnie zawiera co najmniej cztery elementy informacji: (1) Nazwa pierwszej tabeli, (2) z nazwą kolumny w pierwszej tabeli, (3) nazwa drugiej tabeli i (4) Nazwa kolumny w drugiej tabeli.</xref:System.Data.DataRelation>'
  example:
  - "The following example uses the ChildRelations property to return each child <xref:System.Data.DataRelation> in a <xref:System.Data.DataTable>. Each relation is then used as an argument in the <xref:System.Data.DataRow.GetChildRows%2A> method of the <xref:System.Data.DataRow> to return an array of rows. The value of each column in the row is then printed.  \n  \n [!code-vb[Classic WebData DataTable.ChildRelations Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._13_1.vb)]\n [!code-cs[Classic WebData DataTable.ChildRelations Example#1](~/add/codesnippet/csharp/p-system.data.datatable._13_1.cs)]"
  syntax:
    content: public System.Data.DataRelationCollection ChildRelations { get; }
    return:
      type: System.Data.DataRelationCollection
      description: "A <xref href=&quot;System.Data.DataRelationCollection&quot;> </xref> zawiera relacje podrzędne dla tabeli. Zwracany jest pustą kolekcję, jeśli nie <xref href=&quot;System.Data.DataRelation&quot;> </xref> istnieją obiekty."
  overload: System.Data.DataTable.ChildRelations*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Clear
  id: Clear
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Clear()
  nameWithType: DataTable.Clear()
  fullName: System.Data.DataTable.Clear()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Czyści <xref href=&quot;System.Data.DataTable&quot;> </xref> wszystkie dane."
  remarks: "Zostaną usunięte wszystkie wiersze we wszystkich tabelach. Wyjątek jest generowany, jeśli tabela zawiera wszystkie relacje podrzędne wymuszone, powodujących wiersze podrzędne być oddzielony.       Jeśli <xref:System.Data.DataSet>jest powiązany <xref:System.Xml.XmlDataDocument> <xref:System.Data.DataSet.Clear%2A?displayProperty=fullName>lub wyczyść zgłasza <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.DataSet.Clear%2A?displayProperty=fullName> podczas wywoływania</xref:System.Xml.XmlDataDocument> </xref:System.Data.DataSet> Aby tego uniknąć, przechodzenie przez każdej tabeli, usunięcie każdego wiersza, w jednym naraz. Jeśli używasz <xref:System.Data.DataTable.NewRow%2A>Aby utworzyć nowe wiersze, wiersze muszą zostać przetworzone przed wywołaniem Wyczyść.</xref:System.Data.DataTable.NewRow%2A>"
  example:
  - "The following example clears the table of all data.  \n  \n [!code-cs[Classic WebData DataTable.Clear Example#1](~/add/codesnippet/csharp/m-system.data.datatable._20_1.cs)]\n [!code-vb[Classic WebData DataTable.Clear Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._20_1.vb)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Data.DataTable.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Clone
  id: Clone
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Clone()
  nameWithType: DataTable.Clone()
  fullName: System.Data.DataTable.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Struktura klonów <xref href=&quot;System.Data.DataTable&quot;> </xref>, wraz ze wszystkimi <xref href=&quot;System.Data.DataTable&quot;> </xref> schematy i ograniczeń."
  remarks: "Jeśli zostały uzyskane tych klas, klonu będzie również tej samej klasy pochodnej.       Tworzy nowy klon <xref:System.Data.DataTable>z taką samą strukturę co oryginalny <xref:System.Data.DataTable>, ale nie kopiuje danych (nowego <xref:System.Data.DataTable>nie będzie zawierać `DataRows`).</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataTable> Aby skopiować do nowego <xref:System.Data.DataTable>Użyj <xref:System.Data.DataTable.Copy%2A>.</xref:System.Data.DataTable.Copy%2A> </xref:System.Data.DataTable> struktury i danych"
  example:
  - "The following sample demonstrates how to update the structure and constraints of the destination table after you execute DataTable.Clone. The ClonedDataTable class will return a destination table and includes all the updating events. After the clone, structure changes in the source table won’t be reflected in the destination table. Specifically, this sample will:  \n  \n-   Update the changes of the columns in source table.  \n  \n-   Update the changes of the UniqueConstraint in source table.  \n  \n-   Update the changes of the ForeignKeyConstraint in source table.  \n  \n C# and Visual Basic projects with this code sample can be found on [Developer Code Samples](http://code.msdn.microsoft.com/site/search?f%5B0%5D.Type=SearchText&f%5B0%5D.Value=How%20to%20automically%20update%20the%20structure%20of%20a%20cloned%20DataTable).  \n  \n```  \nusing System;  \nusing System.Linq;  \nusing System.Data;  \nusing System.ComponentModel;  \n  \nclass Program {  \n   static void Main(string[] args) {  \n      DataTable courses = NewCourseDataTable();  \n      Console.WriteLine(\"This is the source table:\");  \n      WriteDataTable(courses);  \n  \n      ClonedDataTable clonedResult = new ClonedDataTable(courses);  \n      DataTable clonedCourses = clonedResult.DestinationTable;  \n      Console.WriteLine(\"This is the destination table:\");  \n      WriteDataTable(clonedCourses);  \n  \n      // Add the events of updating column collection into the source table.  \n      clonedResult.UpdateAddedColumn();  \n      clonedResult.UpdateDeletedColumn();  \n      // Add a DataColumn in source table.  \n      DataColumn columnCreidts = new DataColumn(\"Credits\", typeof(Int32));  \n      courses.Columns.Add(columnCreidts);  \n      Console.WriteLine(\"After add a column in source table, it's the result in the destination:\");  \n      WriteDataTable(clonedCourses);  \n  \n      // Add the event of updating UniqueConstraint into the source table.  \n      clonedResult.UpdateUniqueConstraint();  \n  \n      // Add the unique constraint in source table.  \n      UniqueConstraint uniqueConstraint = new UniqueConstraint(courses.Columns[\"CourseId\"]);  \n      courses.Constraints.Add(uniqueConstraint);  \n  \n      Console.WriteLine(@\"If we add the unique constraint in source table and then insert the duplicate   \nrows into the destination table, we will get the following error:\");  \n      InsertDuplicateData(clonedCourses);  \n      Console.WriteLine();  \n  \n      // Add the event of updating ForeignKeyConstraint into the source table.  \n      clonedResult.UpdateForeignKeyConstraint();  \n  \n      // Add the ForeignKeyConstraint into the source table.  \n      DataTable deparments = NewDeparmentDataTable();  \n      DataSet dataset = new DataSet();  \n  \n      dataset.Tables.Add(courses);  \n      dataset.Tables.Add(clonedCourses);  \n      dataset.Tables.Add(deparments);  \n  \n      ForeignKeyConstraint foreignKey = new ForeignKeyConstraint(deparments.Columns[\"DepartmentId\"], courses.Columns[\"DepartmentId\"]);  \n      courses.Constraints.Add(foreignKey);  \n  \n      Console.WriteLine(@\"If we add the foreign key constraint in source table and then insert a row   \nwithout the parent  into the destination table, we will get the following error:\");  \n      InsertNoParentRow(clonedCourses);  \n      Console.WriteLine();  \n  \n      Console.WriteLine(\"Please press any key to exit...\");  \n      Console.ReadKey();  \n   }  \n  \n   static private DataTable NewCourseDataTable() {  \n      DataTable newTable = new DataTable();  \n  \n      DataColumn[] columns ={   \n                                      new DataColumn(\"CourseId\", typeof(String)),  \n                                      new DataColumn(\"CourseName\",typeof(String)),                                        \n                                      new DataColumn(\"DepartmentId\", typeof(Int32))  \n                                  };  \n  \n      newTable.Columns.AddRange(columns);  \n  \n      newTable.Rows.Add(\"C1045\", \"Calculus\", 7);  \n      newTable.Rows.Add(\"C1061\", \"Physics\", 1);  \n      newTable.Rows.Add(\"C2021\", \"Composition\", 2);  \n      newTable.Rows.Add(\"C2042\", \"Literature\", 2);  \n  \n      return newTable;  \n   }  \n  \n   static private DataTable NewDeparmentDataTable() {  \n      DataTable newTable = new DataTable();  \n  \n      DataColumn[] columns ={   \n                                      new DataColumn(\"DepartmentId\", typeof(Int32)),  \n                                      new DataColumn(\"Name\",typeof(String)),  \n                                  };  \n  \n      newTable.Columns.AddRange(columns);  \n  \n      newTable.Rows.Add(1, \"Engineering\");  \n      newTable.Rows.Add(2, \"English\");  \n      newTable.Rows.Add(4, \"Economics\");  \n      newTable.Rows.Add(7, \"Mathematics\");  \n  \n      return newTable;  \n   }  \n  \n   static private void WriteDataTable(DataTable table) {  \n      if (table == null)  \n         return;  \n  \n      foreach (DataColumn column in table.Columns) {  \n         Console.Write(\"{0,-15}\", column.ColumnName);  \n      }  \n      Console.WriteLine();  \n  \n      foreach (DataRow row in table.Rows) {  \n         for (int i = 0; i < table.Columns.Count; i++)  \n            Console.Write(\"{0,-15}\", row[i].ToString());  \n         Console.WriteLine();  \n      }  \n  \n      Console.WriteLine();  \n   }  \n  \n   static private void InsertDuplicateData(DataTable table) {  \n      try {  \n         table.Rows.Add(\"C1045\", \"Calculus\", 7);  \n         table.Rows.Add(\"C1045\", \"Calculus\", 7);  \n      } catch (Exception e) {  \n         Console.WriteLine(\"\\\"\" + e.Message + \"\\\"\");  \n      }  \n   }  \n  \n   private static void InsertNoParentRow(DataTable table) {  \n      try {  \n         table.Rows.Add(\"C1061\", \"Physics\", 11);  \n      } catch (Exception e) {  \n         Console.WriteLine(\"\\\"\" + e.Message + \"\\\"\");  \n      }  \n   }  \n}  \n  \npublic class ClonedDataTable {  \n   private DataTable sourceTable;  \n   private DataTable destinationTable;  \n  \n   public ClonedDataTable(DataTable source) {  \n      sourceTable = source;  \n      // set the cloned result  \n      destinationTable = sourceTable.Clone();  \n   }  \n  \n   public void UpdateAddedColumn() {  \n      sourceTable.Columns.CollectionChanged += new CollectionChangeEventHandler(ColumnAdded);  \n   }  \n  \n   public void UpdateDeletedColumn() {  \n      sourceTable.Columns.CollectionChanged += new CollectionChangeEventHandler(ColumnDeleted);  \n   }  \n  \n   public void UpdateUniqueConstraint() {  \n      sourceTable.Constraints.CollectionChanged += new CollectionChangeEventHandler(UniqueConstraint_Changed);  \n   }  \n  \n   public void UpdateForeignKeyConstraint() {  \n      sourceTable.Constraints.CollectionChanged += new CollectionChangeEventHandler(ForeignKeyConstraint_Changed);  \n   }  \n  \n   // After the source table adds a column, the method will add the same column in the destination table.  \n   void ColumnAdded(object sender, System.ComponentModel.CollectionChangeEventArgs e) {  \n      if (e.Action == CollectionChangeAction.Add) {  \n         DataColumn column = e.Element as DataColumn;  \n  \n         if (column != null) {  \n            DataColumn newColumn = new DataColumn(column.ColumnName, column.DataType, column.Expression, column.ColumnMapping);  \n  \n            if (!destinationTable.Columns.Contains(newColumn.ColumnName))  \n               destinationTable.Columns.Add(newColumn);  \n         }  \n      }  \n   }  \n  \n   // After the source table deletes a column, the method will delete the same column in the destination table.  \n   void ColumnDeleted(object sender, CollectionChangeEventArgs e) {  \n      if (e.Action == CollectionChangeAction.Remove) {  \n         DataColumn column = e.Element as DataColumn;  \n  \n         if (column != null)  \n            if (destinationTable.Columns.Contains(column.ColumnName))  \n               destinationTable.Columns.Remove(column.ColumnName);  \n      }  \n   }  \n  \n   // After the source table changes the UniqueConstraint, this method changes the same UniqueConstraint in destination table.        \n   void UniqueConstraint_Changed(object sender, CollectionChangeEventArgs e) {  \n      UniqueConstraint constraint = e.Element as UniqueConstraint;  \n  \n      if (constraint == null)  \n         return;  \n  \n      String constraintName = constraint.ConstraintName;  \n  \n      if (e.Action == CollectionChangeAction.Add) {  \n         DataColumn[] columns = new DataColumn[constraint.Columns.Count()];  \n         Boolean isPrimaryKey = constraint.IsPrimaryKey;  \n  \n         // Get the columns used in new constraint from the destiantion table.  \n         for (Int32 i = 0; i < constraint.Columns.Count(); i++) {  \n            String columnName = constraint.Columns[i].ColumnName;  \n  \n            if (destinationTable.Columns.Contains(columnName))  \n               columns[i] = destinationTable.Columns[columnName];  \n            else  \n               return;  \n         }  \n  \n         UniqueConstraint newConstraint = new UniqueConstraint(constraintName, columns, isPrimaryKey);  \n  \n         if (!destinationTable.Constraints.Contains(constraintName))  \n            destinationTable.Constraints.Add(newConstraint);  \n  \n      } else if (e.Action == CollectionChangeAction.Remove)  \n         if (destinationTable.Constraints.Contains(constraintName))  \n            destinationTable.Constraints.Remove(constraintName);  \n   }  \n  \n   // After the source table changes the ForeignKeyConstraint, this method changes    \n   // the same ForeignKeyConstraint in the destination table.  \n   void ForeignKeyConstraint_Changed(object sender, CollectionChangeEventArgs e) {  \n      ForeignKeyConstraint constraint = e.Element as ForeignKeyConstraint;  \n  \n      if (constraint == null)  \n         return;  \n  \n      // If the source and destination are not in the same DataSet, don't change the ForeignKeyConstraint.  \n      if (sourceTable.DataSet != destinationTable.DataSet)  \n         return;  \n  \n      String constraintName = constraint.ConstraintName;  \n  \n      if (e.Action == CollectionChangeAction.Add) {  \n         DataColumn[] columns = new DataColumn[constraint.Columns.Count()];  \n         DataColumn[] parentColumns = constraint.RelatedColumns;  \n  \n         // Get the columns used in new constraint from the destination table.  \n         for (int i = 0; i < constraint.Columns.Count(); i++) {  \n            String columnName = constraint.Columns[i].ColumnName;  \n  \n            if (destinationTable.Columns.Contains(columnName))  \n               columns[i] = destinationTable.Columns[columnName];  \n            else  \n               return;  \n         }  \n  \n         ForeignKeyConstraint newConstraint = new ForeignKeyConstraint(constraintName, parentColumns, columns);  \n         newConstraint.AcceptRejectRule = constraint.AcceptRejectRule;  \n         newConstraint.DeleteRule = constraint.DeleteRule;  \n         newConstraint.UpdateRule = constraint.UpdateRule;  \n  \n         if (!destinationTable.Constraints.Contains(constraintName))  \n            destinationTable.Constraints.Add(newConstraint);  \n      } else if (e.Action == CollectionChangeAction.Remove)  \n         if (destinationTable.Constraints.Contains(constraintName))  \n            destinationTable.Constraints.Remove(constraintName);  \n   }  \n  \n   // return the destination table.  \n   public DataTable DestinationTable {  \n      get { return destinationTable; }  \n   }  \n}  \n```  \n  \n This sample shows how to modify data in a DataTable and update the data source.  \n  \n First, create a database:  \n  \n```  \nUSE [master]  \nGO  \n  \nCREATE DATABASE [MySchool]   \n  \nGO  \n  \nUSE [MySchool]  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nCREATE TABLE [dbo].[Course](~/add/includes/ajax-current-ext-md.md [nvarchar](10) NOT NULL,  \n[Year] [smallint] NOT NULL,  \n[Title] [nvarchar](100) NOT NULL,  \n[Credits] [int] NOT NULL,  \n[DepartmentID] [int] NOT NULL,  \n CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED   \n(  \n[CourseID] ASC,  \n[Year] ASC  \n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  \n  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nCREATE TABLE [dbo].[Department](~/add/includes/ajax-current-ext-md.md [int] IDENTITY(1,1) NOT NULL,  \n[Name] [nvarchar](50) NOT NULL,  \n[Budget] [money] NOT NULL,  \n[StartDate] [datetime] NOT NULL,  \n[Administrator] [int] NULL,  \n CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED   \n(  \n[DepartmentID] ASC  \n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  \n  \nGO  \n  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1045', 2012, N'Calculus', 4, 7)  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1061', 2012, N'Physics', 4, 1)  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2021', 2012, N'Composition', 3, 2)  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2042', 2012, N'Literature', 4, 2)  \n  \nSET IDENTITY_INSERT [dbo].[Department] ON   \n  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (1, N'Engineering', 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (2, N'English', 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (4, N'Economics', 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (7, N'Mathematics', 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)  \nSET IDENTITY_INSERT [dbo].[Department] OFF  \n  \nALTER TABLE [dbo].[Course]  WITH CHECK ADD  CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])  \nREFERENCES [dbo].[Department] ([DepartmentID])  \nGO  \nALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]  \nGO  \n```  \n  \n You can now compile and run the sample. [How to modify data in DataTable and update to the data source](http://code.msdn.microsoft.com/How-to-modify-data-in-c68d35f4) has Visual Basic and C# projects of this sample.  \n  \n```  \nusing System;  \nusing System.Data;  \nusing System.Data.SqlClient;  \n  \nclass Program {  \n   static void Main(string[] args) {  \n  \n   string MySchoolConnectionString = \"Data Source=(local);Initial Catalog=MySchool;Integrated Security=True\";  \n  \n      // Get Data  \n      String selectString =  \n       @\"Select [CourseID],[Year],[Title],[Credits],[DepartmentID] From [dbo].[Course];  \n               Select [DepartmentID],[Name],[Budget],[StartDate],[Administrator] From [dbo].[Department] \";  \n  \n      DataSet dataSet = new DataSet();  \n      DataTable course = dataSet.Tables.Add(\"Course\");  \n      DataTable department = dataSet.Tables.Add(\"Department\");  \n  \n      Console.WriteLine(\"Get data from database:\");  \n      GetDataTables(MySchoolConnectionString, selectString, dataSet, course, department);  \n      Console.WriteLine();  \n  \n      // Use DataTable Edits to edit the data  \n      String updateString =  \n              @\"Update [dbo].[Course] Set [Credits]=@Credits Where [CourseID]=@CourseID;\";  \n  \n      course.ColumnChanged += OnColumnChanged;  \n  \n      // Set the Credits of first row is negative value, and set the Credits of second row is plus.  \n      ChangeCredits(course, course.Rows[0], -1);  \n      ChangeCredits(course, course.Rows[1], 11);  \n  \n      UpdateDataTables(MySchoolConnectionString, updateString, dataSet, \"Course\",  \n          new SqlParameter(\"@CourseID\", SqlDbType.NVarChar, 10, \"CourseID\"),  \n          new SqlParameter(\"@Credits\", SqlDbType.Int, 4, \"Credits\"));  \n      Console.WriteLine(\"Only the Credits of second row is changed.\");  \n      ShowDataTable(course);  \n      Console.WriteLine();  \n  \n      // Delete and Remove from DataTable  \n      // Create the foreign key constraint, and set the DeleteRule with Cascade.  \n      ForeignKeyConstraint courseDepartFK = new ForeignKeyConstraint(\"CourseDepartFK\", department.Columns[\"DepartmentID\"], course.Columns[\"DepartmentID\"]);  \n      courseDepartFK.DeleteRule = Rule.Cascade;  \n      courseDepartFK.UpdateRule = Rule.Cascade;  \n      courseDepartFK.AcceptRejectRule = AcceptRejectRule.None;  \n      course.Constraints.Add(courseDepartFK);  \n  \n      String deleteString = @\"Delete From [dbo].[Course] Where [CourseID]=@CourseID;\";  \n  \n      department.Rows[0].Delete();  \n      Console.WriteLine(\"If One row in Department table is deleted, the related rows in Course table will also be deleted.\");  \n      Console.WriteLine(\"Department DataTable:\");  \n      ShowDataTable(department);  \n      Console.WriteLine();  \n      Console.WriteLine(\"Course DataTable:\");  \n      ShowDataTable(course);  \n      Console.WriteLine();  \n      // Update the delete operation  \n      DeleteDataTables(MySchoolConnectionString, deleteString, dataSet, \"Course\",  \n          new SqlParameter(\"@CourseID\", SqlDbType.NVarChar, 10, \"CourseID\"));  \n      Console.WriteLine(\"After delete operation:\");  \n      Console.WriteLine(\"Course DataTable:\");  \n      ShowDataTable(course);  \n      Console.WriteLine();  \n  \n      course.Rows.RemoveAt(0);  \n      Console.WriteLine(\"Now we remove one row from Course:\");  \n      ShowDataTable(course);  \n      DeleteDataTables(MySchoolConnectionString, deleteString, dataSet, \"Course\",  \n          new SqlParameter(\"@CourseID\", SqlDbType.NVarChar, 10, \"CourseID\"));  \n   }  \n  \n   // Use SqlDataAdapter to get data.  \n   private static void GetDataTables(String connectionString, String selectString,  \n       DataSet dataSet, params DataTable[] tables) {  \n      using (SqlDataAdapter adapter = new SqlDataAdapter()) {  \n         adapter.SelectCommand = new SqlCommand(selectString);  \n         adapter.SelectCommand.Connection = new SqlConnection(connectionString);  \n  \n         adapter.Fill(0, 0, tables);  \n  \n         foreach (DataTable table in dataSet.Tables) {  \n            Console.WriteLine(\"Data in {0}:\", table.TableName);  \n            ShowDataTable(table);  \n            Console.WriteLine();  \n         }  \n      }  \n   }  \n  \n   // Use SqlDataAdapter to update the updata operation.  \n   private static void UpdateDataTables(String connectionString, String updateString,  \n       DataSet dataSet, String tableName, params SqlParameter[] parameters) {  \n      using (SqlDataAdapter adapter = new SqlDataAdapter()) {  \n         adapter.UpdateCommand = new SqlCommand(updateString);  \n         adapter.UpdateCommand.Parameters.AddRange(parameters);  \n         adapter.UpdateCommand.Connection = new SqlConnection(connectionString);  \n  \n         adapter.Update(dataSet, tableName);  \n      }  \n   }  \n  \n   // Use SqlDataAdapter to update delete operation.  \n   private static void DeleteDataTables(String connectionString, String deleteString,  \n       DataSet dataSet, String tableName, params SqlParameter[] parameters) {  \n      using (SqlDataAdapter adapter = new SqlDataAdapter()) {  \n         adapter.DeleteCommand = new SqlCommand(deleteString);  \n         adapter.DeleteCommand.Parameters.AddRange(parameters);  \n         adapter.DeleteCommand.Connection = new SqlConnection(connectionString);  \n  \n         adapter.Update(dataSet, tableName);  \n      }  \n   }  \n  \n   // Use DataTable Edits to modify the data.  \n   private static void ChangeCredits(DataTable table, DataRow row, Int32 credits) {  \n      row.BeginEdit();  \n      Console.WriteLine(\"We change row {0}\", table.Rows.IndexOf(row));  \n      row[\"Credits\"] = credits;  \n      row.EndEdit();  \n   }  \n  \n   // The method will be invoked when the value in DataTable is changed.  \n   private static void OnColumnChanged(Object sender, DataColumnChangeEventArgs args) {  \n      Int32 credits = 0;  \n      // If Credits is changed and the value is negative, we'll cancel the edit.  \n      if ((args.Column.ColumnName == \"Credits\") &&  \n          (!Int32.TryParse(args.ProposedValue.ToString(), out credits) || credits < 0)) {  \n         Console.WriteLine(\"The value of Credits is invalid. Edit canceled.\");  \n         args.Row.CancelEdit();  \n      }  \n   }  \n  \n   // Display the column and value of DataTable.  \n   private static void ShowDataTable(DataTable table) {  \n      foreach (DataColumn col in table.Columns) {  \n         Console.Write(\"{0,-14}\", col.ColumnName);  \n      }  \n      Console.WriteLine(\"{0,-14}\", \"RowState\");  \n  \n      foreach (DataRow row in table.Rows) {  \n         if (row.RowState == DataRowState.Deleted) {  \n            foreach (DataColumn col in table.Columns) {  \n               if (col.DataType.Equals(typeof(DateTime)))  \n                  Console.Write(\"{0,-14:d}\", row[col, DataRowVersion.Original]);  \n               else if (col.DataType.Equals(typeof(Decimal)))  \n                  Console.Write(\"{0,-14:C}\", row[col, DataRowVersion.Original]);  \n               else  \n                  Console.Write(\"{0,-14}\", row[col, DataRowVersion.Original]);  \n            }  \n         }  \n         else {  \n            foreach (DataColumn col in table.Columns) {  \n               if (col.DataType.Equals(typeof(DateTime)))  \n                  Console.Write(\"{0,-14:d}\", row[col]);  \n               else if (col.DataType.Equals(typeof(Decimal)))  \n                  Console.Write(\"{0,-14:C}\", row[col]);  \n               else  \n                  Console.Write(\"{0,-14}\", row[col]);  \n            }  \n         }  \n         Console.WriteLine(\"{0,-14}\", row.RowState);  \n      }  \n   }  \n}  \n```"
  syntax:
    content: public virtual System.Data.DataTable Clone ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "Nowy <xref href=&quot;System.Data.DataTable&quot;> </xref> z tego samego schematu, ponieważ bieżący <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  overload: System.Data.DataTable.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ColumnChanged
  id: ColumnChanged
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ColumnChanged
  nameWithType: DataTable.ColumnChanged
  fullName: System.Data.DataTable.ColumnChanged
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Występuje po zmianie wartości dla określonego <xref href=&quot;System.Data.DataColumn&quot;> </xref> w <xref href=&quot;System.Data.DataRow&quot;> </xref>."
  remarks: "Aby uzyskać więcej informacji, zobacz [obsługi zdarzeń DataTable](~/add/includes/ajax-current-ext-md.md)."
  example:
  - >-
    [!code-vb[Classic WebData DataTable.ColumnChanged Example#1](~/add/codesnippet/visualbasic/e-system.data.datatable._4_1.vb)]
     [!code-cs[Classic WebData DataTable.ColumnChanged Example#1](~/add/codesnippet/csharp/e-system.data.datatable._4_1.cs)]
  syntax:
    content: public event System.Data.DataColumnChangeEventHandler ColumnChanged;
    return:
      type: System.Data.DataColumnChangeEventHandler
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ColumnChanging
  id: ColumnChanging
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ColumnChanging
  nameWithType: DataTable.ColumnChanging
  fullName: System.Data.DataTable.ColumnChanging
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Występuje po zmianie wartości dla określonego <xref href=&quot;System.Data.DataColumn&quot;> </xref> w <xref href=&quot;System.Data.DataRow&quot;> </xref>."
  remarks: "Aby uzyskać więcej informacji, zobacz [obsługi zdarzeń DataTable](~/add/includes/ajax-current-ext-md.md)."
  example:
  - >-
    [!code-cs[Classic WebData DataTable.ColumnChanging Example#1](~/add/codesnippet/csharp/e-system.data.datatable._5_1.cs)]
     [!code-vb[Classic WebData DataTable.ColumnChanging Example#1](~/add/codesnippet/visualbasic/e-system.data.datatable._5_1.vb)]
  syntax:
    content: public event System.Data.DataColumnChangeEventHandler ColumnChanging;
    return:
      type: System.Data.DataColumnChangeEventHandler
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Columns
  id: Columns
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Columns
  nameWithType: DataTable.Columns
  fullName: System.Data.DataTable.Columns
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera kolekcję kolumn, które należą do tej tabeli."
  remarks: "<xref:System.Data.DataColumnCollection>Określa schemat tabeli przez określenie typu danych każdej kolumny.</xref:System.Data.DataColumnCollection>"
  example:
  - "The following example prints each value of each row in a table using the Columns property.  \n  \n [!code-vb[Classic WebData DataTable.Columns Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._12_1.vb)]\n [!code-cs[Classic WebData DataTable.Columns Example#1](~/add/codesnippet/csharp/p-system.data.datatable._12_1.cs)]"
  syntax:
    content: public System.Data.DataColumnCollection Columns { get; }
    return:
      type: System.Data.DataColumnCollection
      description: "A <xref href=&quot;System.Data.DataColumnCollection&quot;> </xref> zawierający kolekcję <xref href=&quot;System.Data.DataColumn&quot;> </xref> obiektów dla tabeli. Zwracany jest pustą kolekcję, jeśli nie <xref href=&quot;System.Data.DataColumn&quot;> </xref> istnieją obiekty."
  overload: System.Data.DataTable.Columns*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Compute(System.String,System.String)
  id: Compute(System.String,System.String)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Compute(String,String)
  nameWithType: DataTable.Compute(String,String)
  fullName: System.Data.DataTable.Compute(String,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Oblicza danego wyrażenia na bieżącym wierszy, na które spełniać kryteria filtru."
  remarks: "`expression` Parametr wymaga funkcji agregującej. Na przykład następujące to wyrażenie prawne: `Count(Quantity)` , ale nie jest to wyrażenie: `Sum (Quantity * UnitPrice)` musi wykonać operację na dwóch lub więcej kolumn, należy utworzyć <xref:System.Data.DataColumn>, ustaw jej <xref:System.Data.DataColumn.Expression%2A>właściwości do odpowiedniego wyrażenia, a wyrażenie agregujące w kolumnie wynikowy.</xref:System.Data.DataColumn.Expression%2A> </xref:System.Data.DataColumn> W takim przypadku danego <xref:System.Data.DataColumn>z nazwy &quot;Suma&quot; i <xref:System.Data.DataColumn.Expression%2A>Właściwość to: `&quot;Quantity * UnitPrice&quot;` argument wyrażenia w metodzie obliczeń będzie wówczas to: `Sum(total)` drugi parametr `filter`, określa wiersze, które są używane w wyrażeniu.</xref:System.Data.DataColumn.Expression%2A> </xref:System.Data.DataColumn> Na przykład, jeśli tabela zawiera kolumnę dat o nazwie &quot;colDate&quot;, można ograniczyć wiersze z następującym wyrażeniem: `colDate > 1/1/99 AND colDate < 17/1/99` dla zasad dotyczących tworzenia wyrażenia w obydwu tych parametrów, zobacz <xref:System.Data.DataColumn.Expression%2A?displayProperty=fullName>Właściwości.</xref:System.Data.DataColumn.Expression%2A?displayProperty=fullName>"
  example:
  - "The following example sums the values of a column named \"Total\", for the salesperson whose identification number is five.  \n  \n [!code-cs[Classic WebData DataTable.Compute Example#1](~/add/codesnippet/csharp/m-system.data.datatable._24_1.cs)]\n [!code-vb[Classic WebData DataTable.Compute Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._24_1.vb)]"
  syntax:
    content: public object Compute (string expression, string filter);
    parameters:
    - id: expression
      type: System.String
      description: "Wyrażenie do obliczenia."
    - id: filter
      type: System.String
      description: "Filtr, aby ograniczyć liczbę wierszy, które oceny w wyrażeniu."
    return:
      type: System.Object
      description: "<xref:System.Object>, Ustaw dla wyniku obliczenia.</xref:System.Object> Jeśli wyrażenie ma wartość null, wartość zwracana będzie <xref href=&quot;System.DBNull.Value&quot;> </xref>."
  overload: System.Data.DataTable.Compute*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Constraints
  id: Constraints
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Constraints
  nameWithType: DataTable.Constraints
  fullName: System.Data.DataTable.Constraints
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera kolekcję ograniczenia obsługiwanego przez tej tabeli."
  remarks: "A <xref:System.Data.ForeignKeyConstraint>ogranicza akcję wykonaną gdy usunąć lub zaktualizować wartości w kolumnie (lub kolumny).</xref:System.Data.ForeignKeyConstraint> Takie ograniczenie jest przeznaczony do użycia z kolumn klucza podstawowego. W relacji nadrzędny/podrzędny między dwiema tabelami usunięcie wartość z tabeli nadrzędnej może wpłynąć na wiersze podrzędne w jednym z następujących sposobów.      Elementów podrzędnych wiersze mogą być również usuwane (Akcja kaskadowych).      -Wartości w kolumnie podrzędnej (lub kolumny) można ustawić wartości null.      -Wartości w kolumnie podrzędnej (lub kolumny) można ustawić wartości domyślne.      — Mogą być generowane Wystąpił wyjątek.       A <xref:System.Data.UniqueConstraint>staje się aktywny podczas ustawiania wartości klucza podstawowego nie jest unikatowa wartość.</xref:System.Data.UniqueConstraint>"
  example:
  - "The following example adds a <xref:System.Data.ForeignKeyConstraint> to the collection of constraints.  \n  \n [!code-vb[Classic WebData DataTable.Constraints Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._3_1.vb)]\n [!code-cs[Classic WebData DataTable.Constraints Example#1](~/add/codesnippet/csharp/p-system.data.datatable._3_1.cs)]"
  syntax:
    content: public System.Data.ConstraintCollection Constraints { get; }
    return:
      type: System.Data.ConstraintCollection
      description: "A <xref href=&quot;System.Data.ConstraintCollection&quot;> </xref> zawierający kolekcję <xref href=&quot;System.Data.Constraint&quot;> </xref> obiektów dla tabeli. Zwracany jest pustą kolekcję, jeśli nie <xref href=&quot;System.Data.Constraint&quot;> </xref> istnieją obiekty."
  overload: System.Data.DataTable.Constraints*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Copy
  id: Copy
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Copy()
  nameWithType: DataTable.Copy()
  fullName: System.Data.DataTable.Copy()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Kopiuje strukturę i dane dla tego <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: ''
  example:
  - "The following example uses the Copy method to create a copy of the original <xref:System.Data.DataTable>. The namespace name is not retained if it is inherited from a parent <xref:System.Data.DataTable> or <xref:System.Data.DataSet>.  \n  \n [!code-cs[Classic WebData DataTable.Copy Example#1](~/add/codesnippet/csharp/m-system.data.datatable._5_1.cs)]\n [!code-vb[Classic WebData DataTable.Copy Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._5_1.vb)]"
  syntax:
    content: public System.Data.DataTable Copy ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "Nowy <xref href=&quot;System.Data.DataTable&quot;> </xref> z taką samą strukturę (schematy tabeli i ograniczenia) oraz dane jako to <xref href=&quot;System.Data.DataTable&quot;> </xref>.       Jeśli zostały uzyskane tych klas, kopia będzie również tej samej klasy pochodnej.       Tworzy nową kopię <xref href=&quot;System.Data.DataTable&quot;> </xref> z taką samą strukturę oraz danych jak oryginał <xref href=&quot;System.Data.DataTable&quot;> </xref>. Kopiowanie struktury na nowe <xref href=&quot;System.Data.DataTable&quot;> </xref>, ale nie danych, użyj <xref:System.Data.DataTable.Clone*>.</xref:System.Data.DataTable.Clone*>"
  overload: System.Data.DataTable.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.CreateDataReader
  id: CreateDataReader
  parent: System.Data.DataTable
  langs:
  - csharp
  name: CreateDataReader()
  nameWithType: DataTable.CreateDataReader()
  fullName: System.Data.DataTable.CreateDataReader()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zwraca <xref href=&quot;System.Data.DataTableReader&quot;> </xref> odpowiadający danych w ramach tego <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: ''
  example:
  - "The following console application creates a <xref:System.Data.DataTable> instance. The example then passes the filled <xref:System.Data.DataTable>to a procedure that calls the CreateDataReader method, which iterates through the results contained within the <xref:System.Data.DataTableReader>.  \n  \n [!code-vb[DataWorks DataTable.CreateDataReader#1](~/add/codesnippet/visualbasic/m-system.data.datatable._9_1.vb)]\n [!code-cs[DataWorks DataTable.CreateDataReader#1](~/add/codesnippet/csharp/m-system.data.datatable._9_1.cs)]  \n  \n The example displays the following output in the console window:  \n  \n `1 Mary`  \n  \n `2 Andy`  \n  \n `3 Peter`  \n  \n `4 Russ`"
  syntax:
    content: public System.Data.DataTableReader CreateDataReader ();
    parameters: []
    return:
      type: System.Data.DataTableReader
      description: "A <xref href=&quot;System.Data.DataTableReader&quot;> </xref> zawierających jeden zestaw wyników, odpowiadający źródło <xref href=&quot;System.Data.DataTable&quot;> </xref> wystąpienia."
  overload: System.Data.DataTable.CreateDataReader*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.CreateInstance
  id: CreateInstance
  parent: System.Data.DataTable
  langs:
  - csharp
  name: CreateInstance()
  nameWithType: DataTable.CreateInstance()
  fullName: System.Data.DataTable.CreateInstance()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Tworzy nowe wystąpienie klasy <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  syntax:
    content: protected virtual System.Data.DataTable CreateInstance ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "Nowe wyrażenie."
  overload: System.Data.DataTable.CreateInstance*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.DataSet
  id: DataSet
  parent: System.Data.DataTable
  langs:
  - csharp
  name: DataSet
  nameWithType: DataTable.DataSet
  fullName: System.Data.DataTable.DataSet
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera <xref href=&quot;System.Data.DataSet&quot;> </xref> do której należy ta tabela."
  remarks: "Jeśli formant jest powiązany z danymi do <xref:System.Data.DataTable>, i tabela należy do <xref:System.Data.DataSet>, aby przejść do <xref:System.Data.DataSet>za pomocą tej właściwości.</xref:System.Data.DataSet> </xref:System.Data.DataSet> </xref:System.Data.DataTable>"
  example:
  - "The following example returns the parent <xref:System.Data.DataSet> of a given table through the DataSet property.  \n  \n [!code-vb[Classic WebData DataTable.DataSet Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._10_1.vb)]\n [!code-cs[Classic WebData DataTable.DataSet Example#1](~/add/codesnippet/csharp/p-system.data.datatable._10_1.cs)]"
  syntax:
    content: public System.Data.DataSet DataSet { get; }
    return:
      type: System.Data.DataSet
      description: "<xref href=&quot;System.Data.DataSet&quot;> </xref> Do której należy ta tabela."
  overload: System.Data.DataTable.DataSet*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.DefaultView
  id: DefaultView
  parent: System.Data.DataTable
  langs:
  - csharp
  name: DefaultView
  nameWithType: DataTable.DefaultView
  fullName: System.Data.DataTable.DefaultView
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera dostosowany widok tabeli, która może obejmować widok filtrowany lub pozycją kursora."
  remarks: "Zwraca właściwości DefaultView <xref:System.Data.DataView>można sortować i filtrować, wyszukiwanie <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataView>"
  example:
  - "The following example sets a property of the <xref:System.Data.DataTable> object's <xref:System.Data.DataView> through the DefaultView property. The example also shows the binding of a <xref:System.Windows.Forms.DataGridView> control to a <xref:System.Data.DataTable> named \"Suppliers\" that includes a column named \"CompanyName.\"  \n  \n [!code-cs[Classic WebData DataTable.DefaultView Example#1](~/add/codesnippet/csharp/p-system.data.datatable._11_1.cs)]\n [!code-vb[Classic WebData DataTable.DefaultView Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._11_1.vb)]"
  syntax:
    content: public System.Data.DataView DefaultView { get; }
    return:
      type: System.Data.DataView
      description: "<xref href=&quot;System.Data.DataView&quot;> </xref> Skojarzone z <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  overload: System.Data.DataTable.DefaultView*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.DisplayExpression
  id: DisplayExpression
  parent: System.Data.DataTable
  langs:
  - csharp
  name: DisplayExpression
  nameWithType: DataTable.DisplayExpression
  fullName: System.Data.DataTable.DisplayExpression
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia wyrażenie zwracające wartość używana do reprezentowania tej tabeli w interfejsie użytkownika. <xref uid=&quot;langword_csharp_DisplayExpression&quot; name=&quot;DisplayExpression&quot; href=&quot;&quot;> </xref> Właściwości umożliwia wyświetlanie nazwy tej tabeli w interfejsie użytkownika."
  syntax:
    content: public string DisplayExpression { get; set; }
    return:
      type: System.String
      description: "Wyświetlany ciąg."
  overload: System.Data.DataTable.DisplayExpression*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.EndInit
  id: EndInit
  parent: System.Data.DataTable
  langs:
  - csharp
  name: EndInit()
  nameWithType: DataTable.EndInit()
  fullName: System.Data.DataTable.EndInit()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Kończy się inicjowanie <xref href=&quot;System.Data.DataTable&quot;> </xref> który jest używany w formularzu lub używany przez inny składnik. Inicjowanie występuje w czasie wykonywania."
  remarks: "Środowisku projektowania programu Visual Studio .NET używa tej metody, aby zakończyć inicjowanie składnik, który jest używany w formularzu lub używany przez inny składnik. <xref:System.Data.DataTable.BeginInit%2A>Metoda uruchamia inicjowania.</xref:System.Data.DataTable.BeginInit%2A> Przy użyciu <xref:System.Data.DataTable.BeginInit%2A>i metody EndInit uniemożliwia użycie przed pełnym zainicjowaniem kontrolki.</xref:System.Data.DataTable.BeginInit%2A>"
  syntax:
    content: public virtual void EndInit ();
    parameters: []
  overload: System.Data.DataTable.EndInit*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.EndLoadData
  id: EndLoadData
  parent: System.Data.DataTable
  langs:
  - csharp
  name: EndLoadData()
  nameWithType: DataTable.EndLoadData()
  fullName: System.Data.DataTable.EndLoadData()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Włącza funkcję powiadomień, indeks konserwacji i ograniczenia po załadowaniu danych."
  remarks: "Użyj EndLoadData w połączeniu z <xref:System.Data.DataTable.LoadDataRow%2A>i <xref:System.Data.DataTable.BeginLoadData%2A>.</xref:System.Data.DataTable.BeginLoadData%2A> </xref:System.Data.DataTable.LoadDataRow%2A>"
  syntax:
    content: public void EndLoadData ();
    parameters: []
  overload: System.Data.DataTable.EndLoadData*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ExtendedProperties
  id: ExtendedProperties
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ExtendedProperties
  nameWithType: DataTable.ExtendedProperties
  fullName: System.Data.DataTable.ExtendedProperties
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera kolekcję informacji użytkownika."
  remarks: "Umożliwia dodawanie niestandardowych informacji do <xref:System.Data.DataTable>.</xref:System.Data.DataTable> właściwości rozszerzone Dodawanie informacji o `Add` metody. Pobieranie informacji z `Item` metody.       Rozszerzone właściwości musi być typu <xref:System.String>.</xref:System.String> Właściwości, które nie są typu ciąg nie są zachowywane podczas <xref:System.Data.DataTable>jest zapisywany w formacie XML.</xref:System.Data.DataTable>"
  example:
  - "The following example adds a timestamp value to the <xref:System.Data.DataTable> through the ExtendedProperties property.  \n  \n [!code-cs[Classic WebData DataTable.ExtendedProperties Example#1](~/add/codesnippet/csharp/p-system.data.datatable._7_1.cs)]\n [!code-vb[Classic WebData DataTable.ExtendedProperties Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._7_1.vb)]"
  syntax:
    content: public System.Data.PropertyCollection ExtendedProperties { get; }
    return:
      type: System.Data.PropertyCollection
      description: "A <xref href=&quot;System.Data.PropertyCollection&quot;> </xref> zawiera niestandardowe informacje użytkownika."
  overload: System.Data.DataTable.ExtendedProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.fInitInProgress
  id: fInitInProgress
  parent: System.Data.DataTable
  langs:
  - csharp
  name: fInitInProgress
  nameWithType: DataTable.fInitInProgress
  fullName: System.Data.DataTable.fInitInProgress
  type: Field
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Sprawdza, czy trwa inicjowanie. Inicjowanie występuje w czasie wykonywania."
  syntax:
    content: protected bool fInitInProgress;
    return:
      type: System.Boolean
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.GetChanges
  id: GetChanges
  parent: System.Data.DataTable
  langs:
  - csharp
  name: GetChanges()
  nameWithType: DataTable.GetChanges()
  fullName: System.Data.DataTable.GetChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera kopię <xref href=&quot;System.Data.DataTable&quot;> </xref> zawierający wszystkie zmiany wprowadzone od momentu załadowania lub <xref:System.Data.DataTable.AcceptChanges*>ostatniego została wywołana.</xref:System.Data.DataTable.AcceptChanges*>"
  remarks: "Tworzy nową <xref:System.Data.DataSet>zawierający kopię wszystkich wierszy w oryginalnym <xref:System.Data.DataSet>, która ma oczekujące zmiany.</xref:System.Data.DataSet> </xref:System.Data.DataSet> Ograniczenia relacji może spowodować dodatkowe wiersze bez zmian do dodania do nowej <xref:System.Data.DataSet>Jeśli niezmienione wiersze zawierają kluczy podstawowych odpowiadający klucze obce w zmienionych wierszy.</xref:System.Data.DataSet> Metoda zwraca `null` (`Nothing` w języku Visual Basic), jeśli nie ma żadnych wierszy w oryginalnym <xref:System.Data.DataSet>z oczekującymi zmianami.</xref:System.Data.DataSet>"
  example:
  - >-
    [!code-cs[Classic WebData DataTable.GetChanges Example#1](~/add/codesnippet/csharp/m-system.data.datatable._25_1.cs)]
     [!code-vb[Classic WebData DataTable.GetChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._25_1.vb)]
  syntax:
    content: public System.Data.DataTable GetChanges ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "Zmian z tego <xref href=&quot;System.Data.DataTable&quot;> </xref>, lub <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Jeśli żadne zmiany nie zostaną znalezione."
  overload: System.Data.DataTable.GetChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.GetChanges(System.Data.DataRowState)
  id: GetChanges(System.Data.DataRowState)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: GetChanges(DataRowState)
  nameWithType: DataTable.GetChanges(DataRowState)
  fullName: System.Data.DataTable.GetChanges(DataRowState)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera kopię <xref href=&quot;System.Data.DataTable&quot;> </xref> zawierający wszystkie zmiany wprowadzone od czasu ostatniego załadowania lub od <xref:System.Data.DataTable.AcceptChanges*>została wywołana, filtrowane według <xref href=&quot;System.Data.DataRowState&quot;> </xref>.</xref:System.Data.DataTable.AcceptChanges*>"
  remarks: "<xref:System.Data.DataTable.GetChanges%2A>Metoda jest używana do utworzenia drugiej <xref:System.Data.DataTable>obiekt, który zawiera tylko zmiany wprowadzone do oryginalnej.</xref:System.Data.DataTable> </xref:System.Data.DataTable.GetChanges%2A> Użyj `rowStates` argumentu, aby określić typ zmiany powinien zawierać nowy obiekt.       Ograniczenia relacji może spowodować wierszy nadrzędnych bez zmian, które zostaną uwzględnione."
  example:
  - >-
    [!code-cs[Classic WebData DataTable.GetChanges1 Example#1](~/add/codesnippet/csharp/m-system.data.datatable._15_1.cs)]
     [!code-vb[Classic WebData DataTable.GetChanges1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._15_1.vb)]
  syntax:
    content: public System.Data.DataTable GetChanges (System.Data.DataRowState rowStates);
    parameters:
    - id: rowStates
      type: System.Data.DataRowState
      description: "Jeden z <xref href=&quot;System.Data.DataRowState&quot;> </xref> wartości."
    return:
      type: System.Data.DataTable
      description: "Filtrowane kopię <xref href=&quot;System.Data.DataTable&quot;> </xref> zawierających akcje wykonać na nim i nowszych można scalić w <xref href=&quot;System.Data.DataTable&quot;> </xref> przy użyciu <xref:System.Data.DataSet.Merge*>.</xref:System.Data.DataSet.Merge*> Jeśli żadne wiersze z żądaną <xref href=&quot;System.Data.DataRowState&quot;> </xref> zostaną znalezione, metoda zwraca <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataTable.GetChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)
  id: GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: GetDataTableSchema(XmlSchemaSet)
  nameWithType: DataTable.GetDataTableSchema(XmlSchemaSet)
  fullName: System.Data.DataTable.GetDataTableSchema(XmlSchemaSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ta metoda zwraca <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> zawierające sieci Web Services Description Language (WSDL), który opisuje <xref href=&quot;System.Data.DataTable&quot;> </xref> dla usług sieci Web."
  syntax:
    content: public static System.Xml.Schema.XmlSchemaComplexType GetDataTableSchema (System.Xml.Schema.XmlSchemaSet schemaSet);
    parameters:
    - id: schemaSet
      type: System.Xml.Schema.XmlSchemaSet
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> Wystąpienia."
    return:
      type: System.Xml.Schema.XmlSchemaComplexType
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> Wystąpienia."
  overload: System.Data.DataTable.GetDataTableSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.GetErrors
  id: GetErrors
  parent: System.Data.DataTable
  langs:
  - csharp
  name: GetErrors()
  nameWithType: DataTable.GetErrors()
  fullName: System.Data.DataTable.GetErrors()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera tablicę <xref href=&quot;System.Data.DataRow&quot;> </xref> obiektów, które zawierają błędy."
  remarks: "Zwraca listę <xref:System.Data.DataRow>obiektów, które mają <xref:System.Data.DataRow.RowError%2A>ustawiony.</xref:System.Data.DataRow.RowError%2A> </xref:System.Data.DataRow> Na przykład mogą wystąpić błędy podczas wywoływania metody <xref:System.Data.Common.DataAdapter.Update%2A>z <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>ustawioną **true**.</xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> </xref:System.Data.Common.DataAdapter.Update%2A> Nie wywołuj <xref:System.Data.DataTable.AcceptChanges%2A>na <xref:System.Data.DataTable>dopóki Usuń wszystkie błędy i ponownie prześlij <xref:System.Data.DataSet>aktualizowania.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.DataTable.AcceptChanges%2A>"
  example:
  - "The following example uses the GetErrors method to return an array of <xref:System.Data.DataRow> objects that have errors.  \n  \n [!code-vb[Classic WebData DataTable.GetErrors Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._18_1.vb)]\n [!code-cs[Classic WebData DataTable.GetErrors Example#1](~/add/codesnippet/csharp/m-system.data.datatable._18_1.cs)]"
  syntax:
    content: public System.Data.DataRow[] GetErrors ();
    parameters: []
    return:
      type: System.Data.DataRow[]
      description: "Tablica <xref href=&quot;System.Data.DataRow&quot;> </xref> obiektów, które mają błędy."
  overload: System.Data.DataTable.GetErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: DataTable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Data.DataTable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Wypełnia obiekt informacje serializacji dane potrzebne do serializacji <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  syntax:
    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "A <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> obiekt przechowujący dane serializowane skojarzone z <xref href=&quot;System.Data.DataTable&quot;> </xref>."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "A <xref:System.Runtime.Serialization.StreamingContext>obiekt, który zawiera źródłowy i docelowy serializowanego strumienia skojarzonego z <xref href=&quot;System.Data.DataTable&quot;> </xref>.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Data.DataTable.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code> info </code> Parametr jest odwołanie o wartości null (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> w języku Visual Basic)."
  platform:
  - net462
- uid: System.Data.DataTable.GetRowType
  id: GetRowType
  parent: System.Data.DataTable
  langs:
  - csharp
  name: GetRowType()
  nameWithType: DataTable.GetRowType()
  fullName: System.Data.DataTable.GetRowType()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera typ wiersza."
  syntax:
    content: protected virtual Type GetRowType ();
    parameters: []
    return:
      type: System.Type
      description: "Zwraca typ <xref href=&quot;System.Data.DataRow&quot;> </xref>."
  overload: System.Data.DataTable.GetRowType*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.GetSchema
  id: GetSchema
  parent: System.Data.DataTable
  langs:
  - csharp
  name: GetSchema()
  nameWithType: DataTable.GetSchema()
  fullName: System.Data.DataTable.GetSchema()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Opis tego elementu członkowskiego, zobacz &lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName&gt;."
  syntax:
    content: protected virtual System.Xml.Schema.XmlSchema GetSchema ();
    parameters: []
    return:
      type: System.Xml.Schema.XmlSchema
      description: "<xref:System.Xml.Schema.XmlSchema>Opisujący reprezentację XML obiektu, który jest generowany przez <> </> *> — metoda i używane przez <> </> *> metody.</xref:System.Xml.Schema.XmlSchema>"
  overload: System.Data.DataTable.GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.HasErrors
  id: HasErrors
  parent: System.Data.DataTable
  langs:
  - csharp
  name: HasErrors
  nameWithType: DataTable.HasErrors
  fullName: System.Data.DataTable.HasErrors
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera wartość wskazującą, czy występują błędy w każdym wierszy w tych tabelach <xref href=&quot;System.Data.DataSet&quot;> </xref> do której należy tabeli."
  remarks: "Przez użytkowników podczas pracy w zestawie danych zawartych w <xref:System.Data.DataTable>, można oznaczyć każdej zmiany z powodu błędu, jeśli zmiana powoduje, że niektóre niepowodzenia weryfikacji.</xref:System.Data.DataTable> Można zaznaczyć cały <xref:System.Data.DataRow>z komunikat błędu przy użyciu <xref:System.Data.DataRow.RowError%2A>Właściwości.</xref:System.Data.DataRow.RowError%2A> </xref:System.Data.DataRow> Można również ustawić błędów w każdej kolumnie wiersz mający <xref:System.Data.DataRow.SetColumnError%2A>metody.</xref:System.Data.DataRow.SetColumnError%2A>       Przed zaktualizowaniem źródła danych <xref:System.Data.DataSet>zaleca się najpierw wywołaj <xref:System.Data.DataSet.GetChanges%2A>metodę w celu <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.GetChanges%2A> </xref:System.Data.DataSet> Metoda powoduje <xref:System.Data.DataSet>zawierający tylko zmiany wprowadzone w oryginalnej.</xref:System.Data.DataSet> Przed wysłaniem <xref:System.Data.DataSet>do aktualizowania źródła danych, sprawdź właściwość HasErrors każdej tabeli, aby zobaczyć, czy błędy zostały dołączone do wierszy lub kolumn w wierszach.</xref:System.Data.DataSet>       Po uzgodnieniu każdego błędu, usuń błędy występujące w <xref:System.Data.DataRow.ClearErrors%2A>metody `DataRow`.</xref:System.Data.DataRow.ClearErrors%2A>"
  example:
  - "The following example uses the HasErrors property to check if a table contains errors.  \n  \n [!code-cs[Classic WebData DataTable.HasErrors Example#1](~/add/codesnippet/csharp/p-system.data.datatable._8_1.cs)]\n [!code-vb[Classic WebData DataTable.HasErrors Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._8_1.vb)]"
  syntax:
    content: public bool HasErrors { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli występują błędy; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataTable.HasErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ImportRow(System.Data.DataRow)
  id: ImportRow(System.Data.DataRow)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ImportRow(DataRow)
  nameWithType: DataTable.ImportRow(DataRow)
  fullName: System.Data.DataTable.ImportRow(DataRow)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Kopie <xref href=&quot;System.Data.DataRow&quot;> </xref> do <xref href=&quot;System.Data.DataTable&quot;> </xref>, zachowując wszystkie ustawienia właściwości, a także oryginalny i bieżące wartości."
  remarks: "Wywołanie <xref:System.Data.DataTable.NewRow%2A>powoduje dodanie wiersza do tabeli przy użyciu istniejącego schematu tabeli, ale z wartościami domyślnymi dla wiersza i ustawia <xref:System.Data.DataRowState>do `Detached`.</xref:System.Data.DataRowState> </xref:System.Data.DataTable.NewRow%2A> Wywoływanie ImportRow zachowuje istniejące <xref:System.Data.DataRowState>oraz innych wartości w wierszu.</xref:System.Data.DataRowState> Jeśli `DataRow` przekazanego jako parametr jest w stanie odłączony, zostanie zignorowany, a nie wyjątek.       Nowy wiersz zostanie dodany na końcu tabeli danych.       Jeśli nowy wiersz narusza ograniczenie nie zostanie dodany do tabeli danych.       Możesz uzyskać indeks nowy wiersz z DataTable.Rows.Find i DataTable.Rows.IndexOf. Zobacz <xref:System.Data.DataRowCollection>i <xref:System.Data.DataTable.Rows%2A>Aby uzyskać więcej informacji.</xref:System.Data.DataTable.Rows%2A> </xref:System.Data.DataRowCollection>"
  syntax:
    content: public void ImportRow (System.Data.DataRow row);
    parameters:
    - id: row
      type: System.Data.DataRow
      description: "<xref href=&quot;System.Data.DataRow&quot;> </xref> Do zaimportowania."
  overload: System.Data.DataTable.ImportRow*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Initialized
  id: Initialized
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Initialized
  nameWithType: DataTable.Initialized
  fullName: System.Data.DataTable.Initialized
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Występuje po <xref href=&quot;System.Data.DataTable&quot;> </xref> został zainicjowany."
  remarks: "Aby uzyskać więcej informacji zobacz <xref:System.Data.DataTable.IsInitialized%2A>.</xref:System.Data.DataTable.IsInitialized%2A>"
  syntax:
    content: public event EventHandler Initialized;
    return:
      type: System.EventHandler
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.IsInitialized
  id: IsInitialized
  parent: System.Data.DataTable
  langs:
  - csharp
  name: IsInitialized
  nameWithType: DataTable.IsInitialized
  fullName: System.Data.DataTable.IsInitialized
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera wartość wskazującą, czy <xref href=&quot;System.Data.DataTable&quot;> </xref> został zainicjowany."
  remarks: "Zwraca stan <xref:System.Data.DataTable>podczas jego jest tworzona, na przykład przez program Visual Studio.</xref:System.Data.DataTable> <xref:System.Data.DataTable.BeginInit%2A>Metody ustawia ją na `false` i <xref:System.Data.DataTable.EndInit%2A>metody ustawia ją na `true`.</xref:System.Data.DataTable.EndInit%2A> </xref:System.Data.DataTable.BeginInit%2A>"
  syntax:
    content: public bool IsInitialized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby wskazać składnika została ukończona inicjowania; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataTable.IsInitialized*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Load(System.Data.IDataReader)
  id: Load(System.Data.IDataReader)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Load(IDataReader)
  nameWithType: DataTable.Load(IDataReader)
  fullName: System.Data.DataTable.Load(IDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Wypełnia <xref href=&quot;System.Data.DataTable&quot;> </xref> z wartości ze źródłem danych przy użyciu dostarczonego <xref href=&quot;System.Data.IDataReader&quot;> </xref>. Jeśli <xref href=&quot;System.Data.DataTable&quot;> </xref> już zawiera wiersze, dane przychodzące od źródła danych jest scalany z istniejących wierszy."
  remarks: "The Loadmethod consumes the first result set from the loaded <xref:System.Data.IDataReader>, and after successful completion, sets the reader's position to the next result set, if any. When converting data, the `Load` method uses the same conversion rules as the <xref:System.Data.Common.DbDataAdapter.Fill%2A?displayProperty=fullName> method.  \n  \n The Load method must take into account three specific issues when loading the data from an <xref:System.Data.IDataReader> instance: schema, data, and event operations. When working with the schema, the Load method may encounter conditions as described in the following table. The schema operations take place for all imported result sets, even those containing no data.  \n  \n|Condition|Behavior|  \n|---------------|--------------|  \n|The <xref:System.Data.DataTable> has no schema.|The Load method infers the schema based on the result set from the imported <xref:System.Data.IDataReader>.|  \n|The <xref:System.Data.DataTable> has a schema, but it is incompatible with the loaded schema.|The Load method throws an exception corresponding to the particular error that occurs when attempting to load data into the incompatible schema.|  \n|The schemas are compatible, but the loaded result set schema contains columns that do not exist in the <xref:System.Data.DataTable>.|The Load method adds the extra columns to `DataTable`'s schema. The method throws an exception if corresponding columns in the <xref:System.Data.DataTable> and the loaded result set are not value compatible. The method also retrieves constraint information from the result set for all added columns. Except for the case of Primary Key constraint, this constraint information is used only if the current <xref:System.Data.DataTable> does not contain any columns at the start of the load operation.|  \n|The schemas are compatible, but the loaded result set schema contains fewer columns than does the `DataTable`.|If a missing column has a default value defined or the column's data type is nullable, the Load method allows the rows to be added, substituting the default or `null` value for the missing column. If no default value or `null` can be used, then the `Load` method throws an exception. If no specific default value has been supplied, the `Load` method uses the `null` value as the implied default value.|  \n  \n Before considering the behavior of the `Load` method in terms of data operations, consider that each row within a <xref:System.Data.DataTable> maintains both the current value and the original value for each column. These values may be equivalent, or may be different if the data in the row has been changed since filling the `DataTable`.  For more information, see [Row States and Row Versions](~/add/includes/ajax-current-ext-md.md).  \n  \n This version of the `Load` method attempts to preserve the current values in each row, leaving the original value intact. (If you want finer control over the behavior of incoming data, see <xref:System.Data.DataTable.Load%2A?displayProperty=fullName>.) If the existing row and the incoming row contain corresponding primary key values, the row is processed using its current row state value, otherwise it's treated as a new row.  \n  \n In terms of event operations, the <xref:System.Data.DataTable.RowChanging> event occurs before each row is changed, and the <xref:System.Data.DataTable.RowChanged> event occurs after each row has been changed. In each case, the <xref:System.Data.DataRowChangeEventArgs.Action%2A> property of the <xref:System.Data.DataRowChangeEventArgs> instance passed to the event handler contains information about the particular action associated with the event. This action value depends on the state of the row before the load operation. In each case, both events occur, and the action is the same for each. The action may be applied to either the current or original version of each row, or both, depending on the current row state.  \n  \n The following table displays behavior for the `Load` method. The final row (labeled \"(Not present)\") describes the behavior for incoming rows that don't match any existing row. Each cell in this table describes the current and original value for a field within a row, along with the <xref:System.Data.DataRowState> for the value after the `Load` method has completed. In this case, the method doesn't allow you to indicate the load option, and uses the default, `PreserveChanges`.  \n  \n|Existing DataRowState|Values after `Load` method, and event action|  \n|---------------------------|--------------------------------------------------|  \n|Added|Current = \\<Existing><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Modified><br /><br /> RowAction = ChangeOriginal|  \n|Modified|Current = \\<Existing><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Modified><br /><br /> RowAction = ChangeOriginal|  \n|Deleted|Current = \\<Not available><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Deleted><br /><br /> RowAction = ChangeOriginal|  \n|Unchanged|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|  \n|(Not present)|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|  \n  \n Values in a <xref:System.Data.DataColumn> can be constrained through use of properties such as <xref:System.Data.DataColumn.ReadOnly%2A> and <xref:System.Data.DataColumn.AutoIncrement%2A>. The `Load` method handles such columns in a manner that is consistent with the behavior defined by the column's properties. The read only constraint on a <xref:System.Data.DataColumn> is applicable only for changes that occur in memory. The `Load` method's overwrites the read-only column values, if needed.  \n  \n To determine which version of the primary key field to use for comparing the current row with an incoming row, the `Load` method uses the original version of the primary key value within a row, if it exists. Otherwise, the `Load` method uses the current version of the primary key field."
  example:
  - "The following example demonstrates several of the issues involved with calling the Load method. First, the example focuses on schema issues, including inferring a schema from the loaded <xref:System.Data.IDataReader>, and then handling incompatible schemas, and schemas with missing or additional columns. The example then calls the `Load` method, displaying the data both before and after the load operation.  \n  \n [!code-cs[DataWorks DataTableLoad.IDataReader#1](~/add/codesnippet/csharp/m-system.data.datatable._13_1.cs)]\n [!code-vb[DataWorks DataTableLoad.IDataReader#1](~/add/codesnippet/visualbasic/m-system.data.datatable._13_1.vb)]"
  syntax:
    content: public void Load (System.Data.IDataReader reader);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "<xref href=&quot;System.Data.IDataReader&quot;> </xref> Udostępniająca zestaw wyników."
  overload: System.Data.DataTable.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)
  id: Load(System.Data.IDataReader,System.Data.LoadOption)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Load(IDataReader,LoadOption)
  nameWithType: DataTable.Load(IDataReader,LoadOption)
  fullName: System.Data.DataTable.Load(IDataReader,LoadOption)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Wypełnia <xref href=&quot;System.Data.DataTable&quot;> </xref> z wartości ze źródłem danych przy użyciu dostarczonego <xref href=&quot;System.Data.IDataReader&quot;> </xref>. Jeśli <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref> już zawiera wiersze, dane przychodzące od źródła danych jest scalany z istniejących wierszy, zgodnie z wartością <code> loadOption </code> parametru."
  remarks: "The `Load` method consumes the first result set from the loaded <xref:System.Data.IDataReader>, and after successful completion, sets the reader's position to the next result set, if any. When converting data, the `Load` method uses the same conversion rules as the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method.  \n  \n The `Load` method must take into account three specific issues when loading the data from an <xref:System.Data.IDataReader> instance: schema, data, and event operations. When working with the schema, the `Load` method may encounter conditions as described in the following table. The schema operations take place for all imported result sets, even those containing no data.  \n  \n|Condition|Behavior|  \n|---------------|--------------|  \n|The <xref:System.Data.DataTable> has no schema.|The `Load` method infers the schema based on the result set from the imported <xref:System.Data.IDataReader>.|  \n|The <xref:System.Data.DataTable> has a schema, but it is incompatible with the loaded schema.|The `Load` method throws an exception corresponding to the particular error that occurs when attempting to load data into the incompatible schema.|  \n|The schemas are compatible, but the loaded result set schema contains columns that don't exist in the `DataTable`.|The `Load` method adds the extra columns to `DataTable`’s schema. The method throws an exception if corresponding columns in the <xref:System.Data.DataTable> and the loaded result set are not value compatible. The method also retrieves constraint information from the result set for all added columns. Except for the case of Primary Key constraint, this constraint information is used only if the current <xref:System.Data.DataTable> does not contain any columns at the start of the load operation.|  \n|The schemas are compatible, but the loaded result set schema contains fewer columns than does the `DataTable`.|If a missing column has a default value defined or the column's data type is nullable, the `Load` method allows the rows to be added, substituting the default or null value for the missing column. If no default value or null can be used, then the `Load` method throws an exception. If no specific default value has been supplied, the `Load` method uses the null value as the implied default value.|  \n  \n Before considering the behavior of the `Load` method in terms of data operations, consider that each row within a <xref:System.Data.DataTable> maintains both the current value and the original value for each column. These values may be equivalent, or may be different if the data in the row has been changed since filling the `DataTable`. See [Row States and Row Versions](~/add/includes/ajax-current-ext-md.md) for more information.  \n  \n In this method call, the specified <xref:System.Data.LoadOption> parameter influences the processing of the incoming data. How should the Load method handle loading rows that have the same primary key as existing rows? Should it modify current values, original values, or both? These issues, and more, are controlled by the `loadOption` parameter.  \n  \n If the existing row and the incoming row contain corresponding primary key values, the row is processed using its current row state value, otherwise it's treated as a new row.  \n  \n In terms of event operations, the <xref:System.Data.DataTable.RowChanging> event occurs before each row is changed, and the <xref:System.Data.DataTable.RowChanged> event occurs after each row has been changed. In each case, the <xref:System.Data.DataRowChangeEventArgs.Action%2A> property of the <xref:System.Data.DataRowChangeEventArgs> instance passed to the event handler contains information about the particular action associated with the event. This action value varies, depending on the state of the row before the load operation. In each case, both events occur, and the action is the same for each. The action may be applied to either the current or original version of each row, or both, depending on the current row state.  \n  \n The following table displays behavior for the Load method when called with each of the `LoadOption` values, and also shows how the values interact with the row state for the row being loaded. The final row (labeled \"(Not present)\") describes the behavior for incoming rows that don't match any existing row. Each cell in this table describes the current and original value for a field within a row, along with the <xref:System.Data.DataRowState> for the value after the `Load` method has completed.  \n  \n|Existing DataRowState|Upsert|OverwriteChanges|PreserveChanges (Default behavior)|  \n|---------------------------|------------|----------------------|------------------------------------------|  \n|Added|Current = \\<Incoming><br /><br /> Original = -\\<Not available><br /><br /> State = \\<Added><br /><br /> RowAction = Change|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Existing><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Modified><br /><br /> RowAction = ChangeOriginal|  \n|Modified|Current = \\<Incoming><br /><br /> Original = \\<Existing><br /><br /> State = \\<Modified><br /><br /> RowAction = Change|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Existing><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Modified><br /><br /> RowAction =ChangeOriginal|  \neleted|(Load does not affect deleted rows)<br /><br /> Current = ---<br /><br /> Original = \\<Existing><br /><br /> State = \\<Deleted><br /><br /> (New row is added with the following characteristics)<br /><br /> Current = \\<Incoming><br /><br /> Original = \\<Not available><br /><br /> State = \\<Added><br /><br /> RowAction = Add|Undo delete and<br /><br /> Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Not available><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Deleted><br /><br /> RowAction = ChangeOriginal|  \n|Unchanged|Current = \\<Incoming><br /><br /> Original = \\<Existing><br /><br /> If new value is the same as the existing value then<br /><br /> State = \\<Unchanged><br /><br /> RowAction = Nothing<br /><br /> Else<br /><br /> State = \\<Modified><br /><br /> RowAction = Change|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|  \nNot present)|Current = \\<Incoming><br /><br /> Original = \\<Not available><br /><br /> State = \\<Added><br /><br /> RowAction = Add|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|  \n  \n Values in a <xref:System.Data.DataColumn> can be constrained through use of properties such as <xref:System.Data.DataColumn.ReadOnly%2A> and <xref:System.Data.DataColumn.AutoIncrement%2A>. The `Load` method handles such columns in a manner that is consistent with the behavior defined by the column's properties. The read only constraint on a <xref:System.Data.DataColumn> is applicable only for changes that occur in memory. The `Load` method's overwrites the read-only column values, if needed.  \n  \n If you specify the OverwriteChanges or PreserveChanges options when calling the `Load` method, then the assumption is made that the incoming data is coming from the `DataTable`'s primary data source, and the DataTable tracks changes and can propagate the changes back to the data source. If you select the Upsert option, it is assumed that the data is coming from one of a secondary data source, such as data provided by a middle-tier component, perhaps altered by a user. In this case, the assumption is that the intent is to aggregate data from one or more data sources in the `DataTable`, and then perhaps propagate the data back to the primary data source. The <xref:System.Data.LoadOption> parameter is used for determining the specific version of the row that is to be used for primary key comparison. The table below provides the details.  \n  \n|Load option|DataRow version used for primary key comparison|  \n|-----------------|-----------------------------------------------------|  \n|`OverwriteChanges`|Original version, if it exists, otherwise Current version|  \n|`PreserveChanges`|Original version, if it exists, otherwise Current version|  \n|`Upsert`|Current version, if it exists, otherwise Original version|"
  example:
  - "The following example demonstrates several of the issues involved with calling the Load method. First, the example focuses on schema issues, including inferring a schema from the loaded <xref:System.Data.IDataReader>, and then handling incompatible schemas, and schemas with missing or additional columns. The example then focuses on data issues, including handling the various loading options.  \n  \n [!code-cs[DataWorks DataTableLoad.LoadOption#1](~/add/codesnippet/csharp/m-system.data.datatable._29_1.cs)]\n [!code-vb[DataWorks DataTableLoad.LoadOption#1](~/add/codesnippet/visualbasic/m-system.data.datatable._29_1.vb)]"
  syntax:
    content: public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "<xref href=&quot;System.Data.IDataReader&quot;> </xref> Zapewnia jeden lub więcej zestawów wyników."
    - id: loadOption
      type: System.Data.LoadOption
      description: "Wartość z zakresu od <xref href=&quot;System.Data.LoadOption&quot;> </xref> wyliczenia, która wskazuje, jak wierszy znajdujących się w <xref href=&quot;System.Data.DataTable&quot;> </xref> są łączone z przychodzącego wierszy, które mają taki sam klucz podstawowy."
  overload: System.Data.DataTable.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)
  id: Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Load(IDataReader,LoadOption,FillErrorEventHandler)
  nameWithType: DataTable.Load(IDataReader,LoadOption,FillErrorEventHandler)
  fullName: System.Data.DataTable.Load(IDataReader,LoadOption,FillErrorEventHandler)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Wypełnia <xref href=&quot;System.Data.DataTable&quot;> </xref> z wartości ze źródłem danych przy użyciu dostarczonego <xref href=&quot;System.Data.IDataReader&quot;> </xref> za pomocą obiektu delegowanego obsługi błędów."
  remarks: "The `Load` method consumes the first result set from the loaded <xref:System.Data.IDataReader>, and after successful completion, sets the reader's position to the next result set, if any. When converting data, the `Load` method uses the same conversion rules as the <xref:System.Data.Common.DbDataAdapter.Fill%2A?displayProperty=fullName> method.  \n  \n The `Load` method must take into account three specific issues when loading the data from an <xref:System.Data.IDataReader> instance: schema, data, and event operations. When working with the schema, the `Load` method may encounter conditions as described in the following table. The schema operations take place for all imported result sets, even those containing no data.  \n  \n|Condition|Behavior|  \n|---------------|--------------|  \n|The <xref:System.Data.DataTable> has no schema.|The `Load` method infers the schema based on the result set from the imported <xref:System.Data.IDataReader>.|  \n|The <xref:System.Data.DataTable> has a schema, but it is incompatible with the loaded schema.|The `Load` method throws an exception corresponding to the particular error that occurs when attempting to load data into the incompatible schema.|  \n|The schemas are compatible, but the loaded result set schema contains columns that don't exist in the `DataTable`.|The `Load` method adds the extra column(s) to `DataTable`’s schema. The method throws an exception if corresponding columns in the <xref:System.Data.DataTable> and the loaded result set are not value compatible. The method also retrieves constraint information from the result set for all added columns. Except for the case of Primary Key constraint, this constraint information is used only if the current <xref:System.Data.DataTable> does not contain any columns at the start of the load operation.|  \n|The schemas are compatible, but the loaded result set schema contains fewer columns than does the `DataTable`.|If a missing column has a default value defined or the column's data type is nullable, the `Load` method allows the rows to be added, substituting the default or null value for the missing column. If no default value or null can be used, then the `Load` method throws an exception. If no specific default value has been supplied, the `Load` method uses the null value as the implied default value.|  \n  \n Before considering the behavior of the `Load` method in terms of data operations, consider that each row within a <xref:System.Data.DataTable> maintains both the current value and the original value for each column. These values may be equivalent, or may be different if the data in the row has been changed since filling the `DataTable`. See [Row States and Row Versions](~/add/includes/ajax-current-ext-md.md) for more information.  \n  \n In this method call, the specified <xref:System.Data.LoadOption> parameter influences the processing of the incoming data. How should the Load method handle loading rows that have the same primary key as existing rows? Should it modify current values, original values, or both? These issues, and more, are controlled by the `loadOption` parameter.  \n  \n If the existing row and the incoming row contain corresponding primary key values, the row is processed using its current row state value, otherwise it's treated as a new row.  \n  \n In terms of event operations, the <xref:System.Data.DataTable.RowChanging> event occurs before each row is changed, and the <xref:System.Data.DataTable.RowChanged> event occurs after each row has been changed. In each case, the <xref:System.Data.DataRowChangeEventArgs.Action%2A> property of the <xref:System.Data.DataRowChangeEventArgs> instance passed to the event handler contains information about the particular action associated with the event. This action value varies, depending on the state of the row before the load operation. In each case, both events occur, and the action is the same for each. The action may be applied to either the current or original version of each row, or both, depending on the current row state.  \n  \n The following table displays behavior for the Load method when called with each of the `LoadOption` values, and also shows how the values interact with the row state for the row being loaded. The final row (labeled \"(Not present)\") describes the behavior for incoming rows that don't match any existing row. Each cell in this table describes the current and original value for a field within a row, along with the <xref:System.Data.DataRowState> for the value after the `Load` method has completed.  \n  \n|Existing DataRowState|Upsert|OverwriteChanges|PreserveChanges (Default behavior)|  \n|---------------------------|------------|----------------------|------------------------------------------|  \n|Added|Current = \\<Incoming><br /><br /> Original = -\\<Not available><br /><br /> State = \\<Added><br /><br /> RowAction = Change|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Existing><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Modified><br /><br /> RowAction = ChangeOriginal|  \n|Modified|Current = \\<Incoming><br /><br /> Original = \\<Existing><br /><br /> State = \\<Modified><br /><br /> RowAction = Change|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Existing><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Modified><br /><br /> RowAction =ChangeOriginal|  \neleted|(Load does not affect deleted rows)<br /><br /> Current = ---<br /><br /> Original = \\<Existing><br /><br /> State = \\<Deleted><br /><br /> (New row is added with the following characteristics)<br /><br /> Current = \\<Incoming><br /><br /> Original = \\<Not available><br /><br /> State = \\<Added><br /><br /> RowAction = Add|Undo delete and<br /><br /> Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Not available><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Deleted><br /><br /> RowAction = ChangeOriginal|  \n|Unchanged|Current = \\<Incoming><br /><br /> Original = \\<Existing><br /><br /> If new value is the same as the existing value then<br /><br /> State = \\<Unchanged><br /><br /> RowAction = Nothing<br /><br /> Else<br /><br /> State = \\<Modified><br /><br /> RowAction = Change|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|  \nNot present)|Current = \\<Incoming><br /><br /> Original = \\<Not available><br /><br /> State = \\<Added><br /><br /> RowAction = Add|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|  \n  \n Values in a <xref:System.Data.DataColumn> can be constrained through use of properties such as <xref:System.Data.DataColumn.ReadOnly%2A> and <xref:System.Data.DataColumn.AutoIncrement%2A>. The `Load` method handles such columns in a manner that is consistent with the behavior defined by the column's properties. The read only constraint on a <xref:System.Data.DataColumn> is applicable only for changes that occur in memory. The `Load` method's overwrites the read-only column values, if needed.  \n  \n If you specify the OverwriteChanges or PreserveChanges options when calling the `Load` method, then the assumption is made that the incoming data is coming from the `DataTable`'s primary data source, and the DataTable tracks changes and can propagate the changes back to the data source. If you select the Upsert option, it is assumed that the data is coming from one of a secondary data source, such as data provided by a middle-tier component, perhaps altered by a user. In this case, the assumption is that the intent is to aggregate data from one or more data sources in the `DataTable`, and then perhaps propagate the data back to the primary data source. The <xref:System.Data.LoadOption> parameter is used for determining the specific version of the row that is to be used for primary key comparison. The table below provides the details.  \n  \n|Load option|DataRow version used for primary key comparison|  \n|-----------------|-----------------------------------------------------|  \n|`OverwriteChanges`|Original version, if it exists, otherwise Current version|  \n|`PreserveChanges`|Original version, if it exists, otherwise Current version|  \n|`Upsert`|Current version, if it exists, otherwise Original version|  \n  \n The `errorHandler` parameter is a <xref:System.Data.FillErrorEventHandler> delegate that refers to a procedure that is called when an error occurs while loading data. The <xref:System.Data.FillErrorEventArgs> parameter passed to the procedure provides properties that allow you to retrieve information about the error that occurred, the current row of data, and the <xref:System.Data.DataTable> being filled. Using this delegate mechanism, rather than a simpler try/catch block, allows you to determine the error, handle the situation, and continue processing if you like. The <xref:System.Data.FillErrorEventArgs> parameter supplies a <xref:System.Data.FillErrorEventArgs.Continue%2A> property: set this property to `true` to indicate that you have handled the error and wish to continue processing. Set the property to `false` to indicate that you wish to halt processing. Be aware that setting the property to `false` causes the code that triggered the problem to throw an exception."
  example:
  - >-
    [!code-vb[DataWorks DataTableLoad.ErrorEventHandler#1](~/add/codesnippet/visualbasic/e9f1029e-2520-490c-8397-_1.vb)]
     [!code-cs[DataWorks DataTableLoad.ErrorEventHandler#1](~/add/codesnippet/csharp/e9f1029e-2520-490c-8397-_1.cs)]
  syntax:
    content: public virtual void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.FillErrorEventHandler errorHandler);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "A <xref href=&quot;System.Data.IDataReader&quot;> </xref> udostępniająca zestaw wyników."
    - id: loadOption
      type: System.Data.LoadOption
      description: "Wartość z zakresu od <xref href=&quot;System.Data.LoadOption&quot;> </xref> wyliczenia, która wskazuje, jak wierszy znajdujących się w <xref href=&quot;System.Data.DataTable&quot;> </xref> są łączone z przychodzącego wierszy, które mają taki sam klucz podstawowy."
    - id: errorHandler
      type: System.Data.FillErrorEventHandler
      description: "A <xref href=&quot;System.Data.FillErrorEventHandler&quot;> </xref> delegata do wywołania, gdy wystąpi błąd podczas ładowania danych."
  overload: System.Data.DataTable.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)
  id: LoadDataRow(System.Object[],System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: LoadDataRow(Object[],Boolean)
  nameWithType: DataTable.LoadDataRow(Object[],Boolean)
  fullName: System.Data.DataTable.LoadDataRow(Object[],Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Wyszukuje i aktualizuje określonego wiersza. Jeśli zostanie znaleziony ma pasującego wiersza, nowy wiersz jest tworzony przy użyciu podanej wartości."
  remarks: "Metoda LoadDataRow pobiera tablicę wartości i znajduje dopasowywania wartości z kolumn klucza podstawowego.       Jeśli kolumna ma wartość domyślną, należy przekazać wartość null w tablicy, tak aby ustawiać domyślną wartość dla tej kolumny. Podobnie jeśli kolumna zawiera jego <xref:System.Data.DataColumn.AutoIncrement%2A>właściwości ustawiono wartość true, należy przekazać wartość null w tablicy można ustawić wartości automatycznie generowanego wiersza.</xref:System.Data.DataColumn.AutoIncrement%2A>       Jeśli `fAcceptChanges` parametr jest `true` lub nie jest określony, dodaje nowe dane, a następnie <xref:System.Data.DataTable.AcceptChanges%2A>jest wywoływana, aby zaakceptować wszystkie zmiany w <xref:System.Data.DataTable>; Jeśli wartością argumentu jest `false`, nowo dodanych wierszy są oznaczone jako wstawienia i zmian w istniejących wierszy są oznaczone jako modyfikacje.</xref:System.Data.DataTable> </xref:System.Data.DataTable.AcceptChanges%2A>       Wyjątki może również wystąpić podczas albo <xref:System.Data.DataTable.ColumnChanging>lub <xref:System.Data.DataTable.RowChanging>zdarzeń.</xref:System.Data.DataTable.RowChanging> </xref:System.Data.DataTable.ColumnChanging> Jeśli wystąpi wyjątek, wiersz nie został dodany do tabeli.       Użyj LoadDataRow w połączeniu z <xref:System.Data.DataTable.BeginLoadData%2A>i <xref:System.Data.DataTable.EndLoadData%2A>.</xref:System.Data.DataTable.EndLoadData%2A> </xref:System.Data.DataTable.BeginLoadData%2A>"
  example:
  - "The following example uses the LoadDataRow method to attempt to find a row. If no such row is found, the values are used to create a new row.  \n  \n [!code-vb[Classic WebData DataTable.LoadDataRow Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._23_1.vb)]\n [!code-cs[Classic WebData DataTable.LoadDataRow Example#1](~/add/codesnippet/csharp/m-system.data.datatable._23_1.cs)]"
  syntax:
    content: public System.Data.DataRow LoadDataRow (object[] values, bool fAcceptChanges);
    parameters:
    - id: values
      type: System.Object[]
      description: "Tablica wartości użyte do utworzenia nowego wiersza."
    - id: fAcceptChanges
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby zaakceptować zmiany. w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Data.DataRow
      description: "The new <xref href=&quot;System.Data.DataRow&quot;></xref>."
  overload: System.Data.DataTable.LoadDataRow*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Tablica jest większa niż liczba kolumn w tabeli."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Wartość nie pasuje do typu jego odpowiednich kolumn."
  - type: System.Data.ConstraintException
    commentId: T:System.Data.ConstraintException
    description: "Dodawanie wiersza unieważnia ograniczenia."
  - type: System.Data.NoNullAllowedException
    commentId: T:System.Data.NoNullAllowedException
    description: "Próba umieścić wartość null w kolumnie gdzie <xref:System.Data.DataColumn.AllowDBNull*>ma wartość false.</xref:System.Data.DataColumn.AllowDBNull*>"
  platform:
  - net462
- uid: System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)
  id: LoadDataRow(System.Object[],System.Data.LoadOption)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: LoadDataRow(Object[],LoadOption)
  nameWithType: DataTable.LoadDataRow(Object[],LoadOption)
  fullName: System.Data.DataTable.LoadDataRow(Object[],LoadOption)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Wyszukuje i aktualizuje określonego wiersza. Jeśli zostanie znaleziony ma pasującego wiersza, nowy wiersz jest tworzony przy użyciu podanej wartości."
  remarks: "<xref:System.Data.DataTable.LoadDataRow%2A>Metoda pobiera tablicę wartości i znajduje dopasowywania wartości z kolumn klucza podstawowego.</xref:System.Data.DataTable.LoadDataRow%2A>       Jeśli kolumna ma wartość domyślną, należy przekazać wartość null w tablicy, tak aby ustawiać domyślną wartość dla tej kolumny. Podobnie jeśli kolumna zawiera jego <xref:System.Data.DataColumn.AutoIncrement%2A>właściwości ustawiono wartość true, należy przekazać wartość null w tablicy można ustawić wartości automatycznie generowanego wiersza.</xref:System.Data.DataColumn.AutoIncrement%2A>       Wartość `loadOption` parametr jest używany do określenia sposobu wartości w tablicy są stosowane do istniejącego wiersza. Na przykład jeśli `loadOption` ustawiono `OverwriteChanges`, `Original` i `Current` wartości kolumn są zamieniane na wartości w wierszu przychodzące i `RowState` właściwość jest ustawiona na `Unchanged`.       Wyjątki może również wystąpić podczas albo <xref:System.Data.DataTable.ColumnChanging>lub <xref:System.Data.DataTable.RowChanging>zdarzeń.</xref:System.Data.DataTable.RowChanging> </xref:System.Data.DataTable.ColumnChanging> Jeśli wystąpi wyjątek, wiersz nie został dodany do tabeli.       Można używać <xref:System.Data.DataTable.LoadDataRow%2A>w połączeniu z <xref:System.Data.DataTable.BeginLoadData%2A>i <xref:System.Data.DataTable.EndLoadData%2A>.</xref:System.Data.DataTable.EndLoadData%2A> </xref:System.Data.DataTable.BeginLoadData%2A> </xref:System.Data.DataTable.LoadDataRow%2A>"
  syntax:
    content: public System.Data.DataRow LoadDataRow (object[] values, System.Data.LoadOption loadOption);
    parameters:
    - id: values
      type: System.Object[]
      description: "Tablica wartości użyte do utworzenia nowego wiersza."
    - id: loadOption
      type: System.Data.LoadOption
      description: "Używany do określania, jak wartości są stosowane do odpowiedniej wartości w istniejącym wierszu."
    return:
      type: System.Data.DataRow
      description: "The new <xref href=&quot;System.Data.DataRow&quot;></xref>."
  overload: System.Data.DataTable.LoadDataRow*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Locale
  id: Locale
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Locale
  nameWithType: DataTable.Locale
  fullName: System.Data.DataTable.Locale
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia informacje dotyczące ustawień regionalnych używanych do porównania ciągów wewnątrz tabeli."
  remarks: "A <xref:System.Globalization.CultureInfo>reprezentuje preferencje oprogramowania określonej kultury lub społeczności.</xref:System.Globalization.CultureInfo>       Gdy jest używany do porównywnania ciągów <xref:System.Globalization.CultureInfo>wpływa na filtrowanie i sortowanie porównania.</xref:System.Globalization.CultureInfo>      > [!NOTE] > W kolumnach, które zawierają wyrażenia, <xref:System.StringComparison>jest używany.</xref:System.StringComparison> <xref:System.StringComparison>Jest ignorowana.</xref:System.StringComparison>"
  example:
  - "The following example sets the <xref:System.Globalization.CultureInfo> through the Locale and prints the ISO language name.  \n  \n [!code-cs[Classic WebData DataTable.Locale Example#1](~/add/codesnippet/csharp/p-system.data.datatable._5_1.cs)]\n [!code-vb[Classic WebData DataTable.Locale Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._5_1.vb)]"
  syntax:
    content: public System.Globalization.CultureInfo Locale { get; set; }
    return:
      type: System.Globalization.CultureInfo
      description: "A <xref:System.Globalization.CultureInfo>zawierający dane dotyczące ustawień regionalnych komputera użytkownika.</xref:System.Globalization.CultureInfo> Wartość domyślna to <xref href=&quot;System.Data.DataSet&quot;> </xref> obiektu <xref:System.Globalization.CultureInfo>(zwrócony przez <xref:System.Data.DataSet.Locale*>Właściwości) do której <xref href=&quot;System.Data.DataTable&quot;> </xref> należy; Jeśli tabeli nie należy do <xref href=&quot;System.Data.DataSet&quot;> </xref>, wartość domyślna to bieżący system <xref:System.Globalization.CultureInfo>.</xref:System.Globalization.CultureInfo> </xref:System.Data.DataSet.Locale*> </xref:System.Globalization.CultureInfo>"
  overload: System.Data.DataTable.Locale*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Merge(System.Data.DataTable)
  id: Merge(System.Data.DataTable)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Merge(DataTable)
  nameWithType: DataTable.Merge(DataTable)
  fullName: System.Data.DataTable.Merge(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scal określonego <xref href=&quot;System.Data.DataTable&quot;> </xref> z bieżącym <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "Merge — metoda jest używana do scalenia dwa <xref:System.Data.DataTable>obiektów, które mają schematów w znacznym stopniu podobne.</xref:System.Data.DataTable> Scalanie jest zwykle używana w aplikacji klienta do zastosować ostatnie zmiany ze źródła danych w istniejącej <xref:System.Data.DataTable>.</xref:System.Data.DataTable> Umożliwia to aplikacji klienta odświeżyć <xref:System.Data.DataTable>przy użyciu najnowszych danych ze źródła danych.</xref:System.Data.DataTable>       Operacja scalania uwzględnia oryginalnej tabeli, a tabela, która ma być scalone. Nie dotyczy lub częścią tabele podrzędne. Jeśli tabela ma co najmniej jednej tabeli podrzędnej definiowane jako część relacji każdej tabeli podrzędnej muszą zostać połączone pojedynczo.       `Merge` Zazwyczaj wywoływana jest metoda na końcu szereg procedur weryfikacji zmian, uzgadnianie błędy, aktualizowanie źródła danych ze zmianami i na koniec odświeżanie istniejącego <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Podczas przeprowadzania scalania, zmiany wprowadzone w istniejących danych przed scaleniem są zachowywane domyślnie podczas operacji scalania. Deweloperzy można modyfikować tego zachowania wywołaniem inne przeciążenia tej metody, a następnie określając wartość false dla `preserveChanges` parametru.       W aplikacji klienckiej jest zwykle ma jednego przycisku, który użytkownik może kliknąć zbiera dane zmienione, a następnie zweryfikuje go przed wysłaniem go z powrotem do składników warstwy środkowej. W tym scenariuszu <xref:System.Data.DataTable.GetChanges%2A>pierwszego wywołania metody.</xref:System.Data.DataTable.GetChanges%2A> Metoda zwraca wartość drugiej <xref:System.Data.DataTable>zoptymalizowane pod kątem sprawdzania poprawności i scalanie.</xref:System.Data.DataTable> Ten drugi <xref:System.Data.DataTable>obiekt zawiera tylko te <xref:System.Data.DataRow>obiekty, które zmieniono, wynikające z podzbioru original <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataRow> </xref:System.Data.DataTable> Ten podzestaw jest zwykle mniejsze i w związku z tym wydajniej przekazywane z powrotem do składników warstwy środkowej. Składnik warstwy środkowej następnie aktualizuje oryginalne źródło danych zmiany za pomocą procedur składowanych. Warstwy środkowej może wysyłać kopii albo nowy <xref:System.Data.DataTable>zawierającą oryginalnych danych oraz najnowsze dane ze źródła danych (przez ponowne uruchomienie oryginalnego zapytania) lub Wyślij ponownie podzbiór o zmianach, które zostały wprowadzone do niej ze źródła danych.</xref:System.Data.DataTable> (Na przykład, jeśli źródło danych automatycznie tworzy unikatowe wartości kluczy podstawowych, te wartości można propagowane do aplikacji klienckiej.) W obu przypadkach zwróconego <xref:System.Data.DataTable>mogą być scalone aplikacji klienckiej, oryginalne <xref:System.Data.DataTable>metodą scalania.</xref:System.Data.DataTable> </xref:System.Data.DataTable>       Podczas scalania nowe źródło <xref:System.Data.DataTable>do obiektu docelowego, każde źródło wiersze z <xref:System.Data.DataRowState>wartość `Unchanged`, `Modified`, lub `Deleted`, jest dopasowywany do docelowego wierszy z tej samej wartości klucza podstawowego.</xref:System.Data.DataRowState> </xref:System.Data.DataTable> Źródło wiersze z <xref:System.Data.DataRowState>wartość `Added` są dopasowywane do nowych wierszy docelowych z tej samej wartości klucza podstawowego jako nowe wiersze źródła.</xref:System.Data.DataRowState>"
  example:
  - "The following console application creates a simple <xref:System.Data.DataTable> and adds data to the table. The example then creates a copy of the table, adding rows to the copy. Finally, the example calls the Merge method to merge the data in the second table with the data in the first table.  \n  \n [!code-vb[DataWorks DataTable.Merge#1](~/add/codesnippet/visualbasic/m-system.data.datatable._4_1.vb)]\n [!code-cs[DataWorks DataTable.Merge#1](~/add/codesnippet/csharp/m-system.data.datatable._4_1.cs)]"
  syntax:
    content: public void Merge (System.Data.DataTable table);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "<xref href=&quot;System.Data.DataTable&quot;> </xref> Do scalenia z bieżącym <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  overload: System.Data.DataTable.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)
  id: Merge(System.Data.DataTable,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Merge(DataTable,Boolean)
  nameWithType: DataTable.Merge(DataTable,Boolean)
  fullName: System.Data.DataTable.Merge(DataTable,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scal określonego <xref href=&quot;System.Data.DataTable&quot;> </xref> z bieżącym <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref>, wskazującą, czy chcesz zachować zmiany w bieżącym <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref>."
  remarks: "Merge — metoda jest używana do scalenia dwa <xref:System.Data.DataTable>obiektów, które mają schematów w znacznym stopniu podobne.</xref:System.Data.DataTable> Scalanie jest zwykle używana w aplikacji klienta do zastosować ostatnie zmiany ze źródła danych w istniejącej <xref:System.Data.DataTable>.</xref:System.Data.DataTable> Umożliwia to aplikacji klienta odświeżyć <xref:System.Data.DataTable>przy użyciu najnowszych danych ze źródła danych.</xref:System.Data.DataTable>       Operacja scalania uwzględnia oryginalnej tabeli, a tabela, która ma być scalone. Nie dotyczy lub częścią tabele podrzędne. Jeśli tabela ma co najmniej jednej tabeli podrzędnej definiowane jako część relacji każdej tabeli podrzędnej muszą zostać połączone pojedynczo.       `Merge` Zazwyczaj wywoływana jest metoda na końcu szereg procedur weryfikacji zmian, uzgadnianie błędy, aktualizowanie źródła danych ze zmianami i na koniec odświeżanie istniejącego <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Podczas scalania, zmiany wprowadzone w istniejących danych przed scaleniem są zachowywane podczas operacji scalania, chyba że deweloper określa wartość false dla `preserveChanges` parametru. Jeśli `preserveChanges` ustawiono parametr `true`, wartości przychodzących nie zastępują istniejące wartości w bieżącej wersji wierszy istniejącego wiersza. Jeśli `preserveChanges` ustawiono parametr `false`, wartości przychodzących zastąpić istniejące wartości w bieżącej wersji wierszy istniejącego wiersza. Aby uzyskać więcej informacji dotyczących wersji wierszy, zobacz [stany wiersza i wersje wiersza](~/add/includes/ajax-current-ext-md.md).       W aplikacji klienckiej jest zwykle ma jednego przycisku, który użytkownik może kliknąć zbiera dane zmienione, a następnie zweryfikuje go przed wysłaniem go z powrotem do składników warstwy środkowej. W tym scenariuszu <xref:System.Data.DataTable.GetChanges%2A>pierwszego wywołania metody.</xref:System.Data.DataTable.GetChanges%2A> Metoda zwraca wartość drugiej <xref:System.Data.DataTable>zoptymalizowane pod kątem sprawdzania poprawności i scalanie.</xref:System.Data.DataTable> Ten drugi <xref:System.Data.DataTable>obiekt zawiera tylko <xref:System.Data.DataTable>i <xref:System.Data.DataRow>obiekty, które zmieniono, wynikające z podzbioru oryginalnej <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataRow> </xref:System.Data.DataTable> </xref:System.Data.DataTable> Ten podzestaw jest zwykle mniejsze, a zatem ten podzestaw wydajniej jest przekazywane z powrotem do składników warstwy środkowej. Składnik warstwy środkowej następnie aktualizuje oryginalne źródło danych zmiany za pomocą procedur składowanych. Warstwy środkowej może wysyłać kopii albo nowy <xref:System.Data.DataTable>zawierającą oryginalnych danych oraz najnowsze dane ze źródła danych (przez ponowne uruchomienie oryginalnego zapytania) lub Wyślij ponownie podzbiór o zmianach, które zostały wprowadzone do niej ze źródła danych.</xref:System.Data.DataTable> (Na przykład, jeśli źródło danych automatycznie tworzy unikatowe wartości kluczy podstawowych, te wartości można propagowane do aplikacji klienckiej.) W obu przypadkach zwróconego <xref:System.Data.DataTable>mogą być scalone aplikacji klienckiej, oryginalne <xref:System.Data.DataTable>z <xref:System.Data.DataTable.Merge%2A>metody.</xref:System.Data.DataTable.Merge%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable>       Podczas scalania nowe źródło <xref:System.Data.DataTable>do obiektu docelowego, każde źródło wiersze z <xref:System.Data.DataRowState>wartość `Unchanged`, `Modified`, lub `Deleted` są dopasowywane do docelowego wierszy z tej samej wartości klucza podstawowego.</xref:System.Data.DataRowState> </xref:System.Data.DataTable> Źródło wiersze z <xref:System.Data.DataRowState>wartość `Added` są dopasowywane do nowych wierszy docelowych z tej samej wartości klucza podstawowego jako nowe wiersze źródła.</xref:System.Data.DataRowState>"
  example:
  - "The following console application creates a <xref:System.Data.DataTable> containing rows, modifies some of the data in those rows, and attempts to merge data from a different <xref:System.Data.DataTable>. The example demonstrates the different behaviors for the `preserveChanges` parameter.  \n  \n [!code-vb[DataWorks DataTable.MergePreserveChanges#1](~/add/codesnippet/visualbasic/m-system.data.datatable._2_1.vb)]\n [!code-cs[DataWorks DataTable.MergePreserveChanges#1](~/add/codesnippet/csharp/m-system.data.datatable._2_1.cs)]"
  syntax:
    content: public void Merge (System.Data.DataTable table, bool preserveChanges);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "<xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref> Do scalenia z bieżącym <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref>."
    - id: preserveChanges
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, aby zachować zmiany w bieżącym <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref>; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.<xref uid=&quot;langword_csharp_&quot; name=&quot;&quot; href=&quot;&quot;></xref>"
  overload: System.Data.DataTable.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  id: Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Merge(DataTable,Boolean,MissingSchemaAction)
  nameWithType: DataTable.Merge(DataTable,Boolean,MissingSchemaAction)
  fullName: System.Data.DataTable.Merge(DataTable,Boolean,MissingSchemaAction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scal określonego <xref href=&quot;System.Data.DataTable&quot;> </xref> z bieżącym <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref>, wskazującą, czy chcesz zachować zmiany i sposób obsługi Brak schematu w bieżącym <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref>."
  remarks: "`Merge` Metoda jest używana do scalenia dwa <xref:System.Data.DataTable>obiektów, które mają schematów w znacznym stopniu podobne.</xref:System.Data.DataTable> Scalanie jest zwykle używana w aplikacji klienta do zastosować ostatnie zmiany ze źródła danych w istniejącej <xref:System.Data.DataTable>.</xref:System.Data.DataTable> Umożliwia to aplikacji klienta odświeżyć <xref:System.Data.DataTable>przy użyciu najnowszych danych ze źródła danych.</xref:System.Data.DataTable>       Operacja scalania uwzględnia oryginalnej tabeli, a tabela, która ma być scalone. Nie dotyczy lub częścią tabele podrzędne. Jeśli tabela ma co najmniej jednej tabeli podrzędnej definiowane jako część relacji każdej tabeli podrzędnej muszą zostać połączone pojedynczo.       `Merge` Zazwyczaj wywoływana jest metoda na końcu szereg procedur weryfikacji zmian, uzgadnianie błędy, aktualizowanie źródła danych ze zmianami i na koniec odświeżanie istniejącego <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Podczas scalania, zmiany wprowadzone w istniejących danych przed scaleniem są zachowywane podczas operacji scalania, chyba że deweloper określa wartość false dla `preserveChanges` parametru. Jeśli `preserveChanges` ustawiono parametr `true`, wartości przychodzących nie zastępują istniejące wartości w bieżącej wersji wierszy istniejącego wiersza. Jeśli `preserveChanges` ustawiono parametr `false`, wartości przychodzących zastąpić istniejące wartości w bieżącej wersji wierszy istniejącego wiersza. Aby uzyskać więcej informacji dotyczących wersji wierszy, zobacz [stany wiersza i wersje wiersza](~/add/includes/ajax-current-ext-md.md).       W aplikacji klienckiej jest zwykle ma jednego przycisku, który użytkownik może kliknąć zbiera dane zmienione, a następnie zweryfikuje go przed wysłaniem go z powrotem do składników warstwy środkowej. W tym scenariuszu <xref:System.Data.DataTable.GetChanges%2A>pierwszego wywołania metody.</xref:System.Data.DataTable.GetChanges%2A> Metoda zwraca wartość drugiej <xref:System.Data.DataTable>zoptymalizowane pod kątem sprawdzania poprawności i scalanie.</xref:System.Data.DataTable> Ten drugi <xref:System.Data.DataTable>obiekt zawiera tylko <xref:System.Data.DataTable>i <xref:System.Data.DataRow>obiekty, które zmieniono, wynikające z podzbioru oryginalnej <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataRow> </xref:System.Data.DataTable> </xref:System.Data.DataTable> Ten podzestaw jest zwykle mniejsze, a zatem ten podzestaw wydajniej jest przekazywane z powrotem do składników warstwy środkowej. Składnik warstwy środkowej następnie aktualizuje oryginalne źródło danych zmiany za pomocą procedur składowanych. Warstwy środkowej może wysyłać kopii albo nowy <xref:System.Data.DataTable>zawierającą oryginalnych danych oraz najnowsze dane ze źródła danych (przez ponowne uruchomienie oryginalnego zapytania) lub Wyślij ponownie podzbiór o zmianach, które zostały wprowadzone do niej ze źródła danych.</xref:System.Data.DataTable> (Na przykład, jeśli źródło danych automatycznie tworzy unikatowe wartości kluczy podstawowych, te wartości można propagowane do aplikacji klienckiej.) W obu przypadkach zwróconego <xref:System.Data.DataTable>mogą być scalone aplikacji klienckiej, oryginalne <xref:System.Data.DataTable>z <xref:System.Data.DataTable.Merge%2A>metody.</xref:System.Data.DataTable.Merge%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable>       Gdy <xref:System.Data.DataTable.Merge%2A>Metoda jest wywoływana, schematów dwa <xref:System.Data.DataTable>obiekty są porównywane, ponieważ jest to możliwe, że schematy mogły zostać zmienione.</xref:System.Data.DataTable> </xref:System.Data.DataTable.Merge%2A> Na przykład w przypadku business-to-business, nowe kolumny może zostały dodane do schematu XML przez zautomatyzowany proces. Jeśli źródło <xref:System.Data.DataTable>zawiera elementy schematu (dodany <xref:System.Data.DataColumn>obiektów) brakuje w miejscu docelowym, elementy schematu mogą zostać dodane do obiektu docelowego, ustawiając `missingSchemaAction` argument `MissingSchemaAction.Add`.</xref:System.Data.DataColumn> </xref:System.Data.DataTable> W takim przypadku scalonych <xref:System.Data.DataTable>zawiera dodany schemat i dane.</xref:System.Data.DataTable>       Po scaleniu schematów, scalania danych.       Podczas scalania nowe źródło <xref:System.Data.DataTable>do obiektu docelowego, każde źródło wiersze z <xref:System.Data.DataRowState>wartość `Unchanged`, `Modified`, lub `Deleted` są dopasowywane do docelowego wierszy z tej samej wartości klucza podstawowego.</xref:System.Data.DataRowState> </xref:System.Data.DataTable> Źródło wiersze z <xref:System.Data.DataRowState>wartość `Added` są dopasowywane do nowych wierszy docelowych z tej samej wartości klucza podstawowego jako nowe wiersze źródła.</xref:System.Data.DataRowState>"
  example:
  - "The following console application demonstrates the behavior of the `missingSchemaAction` parameter of the Merge method. This example creates two versions of the same table, modifying the schema for the second version. The code then attempts to merge the second table into the first.  \n  \n [!code-cs[DataWorks DataTable.MergeMissingSchemaAction#1](~/add/codesnippet/csharp/0a34dc2a-14c3-4d65-b78d-_1.cs)]\n [!code-vb[DataWorks DataTable.MergeMissingSchemaAction#1](~/add/codesnippet/visualbasic/0a34dc2a-14c3-4d65-b78d-_1.vb)]"
  syntax:
    content: public void Merge (System.Data.DataTable table, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "<xref href=&quot;System.Data.DataTable&quot;> </xref> Do scalenia z bieżącym <xref href=&quot;System.Data.DataTable&quot;> </xref>."
    - id: preserveChanges
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, aby zachować zmiany w bieżącym <xref href=&quot;System.Data.DataTable&quot;> </xref>; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: missingSchemaAction
      type: System.Data.MissingSchemaAction
      description: "Jeden z <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref> wartości."
  overload: System.Data.DataTable.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.MinimumCapacity
  id: MinimumCapacity
  parent: System.Data.DataTable
  langs:
  - csharp
  name: MinimumCapacity
  nameWithType: DataTable.MinimumCapacity
  fullName: System.Data.DataTable.MinimumCapacity
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia początkowy rozmiar tej tabeli."
  remarks: "Element MinimumCapacity umożliwi systemowi Utwórz odpowiedni zestaw zasobów przed pobieranie danych. W sytuacji, gdy ma kluczowe znaczenie, ustawienie dla tej właściwości można zoptymalizować wydajność."
  example:
  - "The following example sets the MinimumCapacity of a <xref:System.Data.DataTable>.  \n  \n [!code-vb[Classic WebData DataTable.MinimumCapacity Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._6_1.vb)]\n [!code-cs[Classic WebData DataTable.MinimumCapacity Example#1](~/add/codesnippet/csharp/p-system.data.datatable._6_1.cs)]"
  syntax:
    content: public int MinimumCapacity { get; set; }
    return:
      type: System.Int32
      description: "Początkowy rozmiar początkowy w wiersze tej tabeli. Wartością domyślną jest 50."
  overload: System.Data.DataTable.MinimumCapacity*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Namespace
  id: Namespace
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Namespace
  nameWithType: DataTable.Namespace
  fullName: System.Data.DataTable.Namespace
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia obszar nazw XML reprezentację danych przechowywanych w <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  syntax:
    content: public string Namespace { get; set; }
    return:
      type: System.String
      description: "Przestrzeń nazw <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  overload: System.Data.DataTable.Namespace*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.NewRow
  id: NewRow
  parent: System.Data.DataTable
  langs:
  - csharp
  name: NewRow()
  nameWithType: DataTable.NewRow()
  fullName: System.Data.DataTable.NewRow()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Tworzy nowy <xref href=&quot;System.Data.DataRow&quot;> </xref> ze schematem tej samej tabeli."
  remarks: "Aby utworzyć nowe <xref:System.Data.DataRow>obiekty z tym samym schematem co <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataRow> należy użyć metody NewRow Po utworzeniu <xref:System.Data.DataRow>, można dodać go do <xref:System.Data.DataRowCollection>, za pomocą <xref:System.Data.DataTable>obiektu <xref:System.Data.DataTable.Rows%2A>Właściwości.</xref:System.Data.DataTable.Rows%2A> </xref:System.Data.DataTable> </xref:System.Data.DataRowCollection> </xref:System.Data.DataRow> Gdy używasz NewRow do tworzenia nowych wierszy wierszy musi być dodany do lub usunięty z tabeli danych przed wywołaniem <xref:System.Data.DataTable.Clear%2A>.</xref:System.Data.DataTable.Clear%2A>"
  example:
  - "The following example creates a <xref:System.Data.DataTable>, adds two <xref:System.Data.DataColumn> objects that determine the table's schema, and creates several new <xref:System.Data.DataRow> objects using the NewRow method. Those <xref:System.Data.DataRow> objects are then added to the <xref:System.Data.DataRowCollection> using the <xref:System.Data.DataRowCollection.Add%2A> method.  \n  \n [!code-vb[Classic WebData DataTable.NewRow Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._27_1.vb)]\n [!code-cs[Classic WebData DataTable.NewRow Example#1](~/add/codesnippet/csharp/m-system.data.datatable._27_1.cs)]"
  syntax:
    content: public System.Data.DataRow NewRow ();
    parameters: []
    return:
      type: System.Data.DataRow
      description: "A <xref href=&quot;System.Data.DataRow&quot;> </xref> z tym samym schematem co <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  overload: System.Data.DataTable.NewRow*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.NewRowArray(System.Int32)
  id: NewRowArray(System.Int32)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: NewRowArray(Int32)
  nameWithType: DataTable.NewRowArray(Int32)
  fullName: System.Data.DataTable.NewRowArray(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zwraca tablicę <xref href=&quot;System.Data.DataRow&quot;> </xref>."
  syntax:
    content: protected System.Data.DataRow[] NewRowArray (int size);
    parameters:
    - id: size
      type: System.Int32
      description: "A <xref:System.Int32>wartość, która opisuje rozmiar tablicy.</xref:System.Int32>"
    return:
      type: System.Data.DataRow[]
      description: "Nowej tablicy."
  overload: System.Data.DataTable.NewRowArray*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.NewRowFromBuilder(System.Data.DataRowBuilder)
  id: NewRowFromBuilder(System.Data.DataRowBuilder)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: NewRowFromBuilder(DataRowBuilder)
  nameWithType: DataTable.NewRowFromBuilder(DataRowBuilder)
  fullName: System.Data.DataTable.NewRowFromBuilder(DataRowBuilder)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Tworzy nowy wiersz na podstawie istniejącego wiersza."
  syntax:
    content: protected virtual System.Data.DataRow NewRowFromBuilder (System.Data.DataRowBuilder builder);
    parameters:
    - id: builder
      type: System.Data.DataRowBuilder
      description: "A <xref href=&quot;System.Data.DataRowBuilder&quot;></xref> object."
    return:
      type: System.Data.DataRow
      description: "A <xref href=&quot;System.Data.DataRow&quot;> </xref> klasy."
  overload: System.Data.DataTable.NewRowFromBuilder*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)
  id: OnColumnChanged(System.Data.DataColumnChangeEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnColumnChanged(DataColumnChangeEventArgs)
  nameWithType: DataTable.OnColumnChanged(DataColumnChangeEventArgs)
  fullName: System.Data.DataTable.OnColumnChanged(DataColumnChangeEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zgłasza <xref href=&quot;System.Data.DataTable.ColumnChanged&quot;> </xref> zdarzeń."
  remarks: 'Wywoływanie zdarzeń wywołuje program obsługi zdarzeń za pośrednictwem pełnomocnika. Aby uzyskać ogólne informacje, zobacz [NIB: wywoływanie zdarzeń](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnColumnChanged (System.Data.DataColumnChangeEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataColumnChangeEventArgs
      description: "A <xref href=&quot;System.Data.DataColumnChangeEventArgs&quot;> </xref> zawierający dane zdarzenia."
  overload: System.Data.DataTable.OnColumnChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)
  id: OnColumnChanging(System.Data.DataColumnChangeEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnColumnChanging(DataColumnChangeEventArgs)
  nameWithType: DataTable.OnColumnChanging(DataColumnChangeEventArgs)
  fullName: System.Data.DataTable.OnColumnChanging(DataColumnChangeEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zgłasza <xref href=&quot;System.Data.DataTable.ColumnChanging&quot;> </xref> zdarzeń."
  remarks: 'Wywoływanie zdarzeń wywołuje program obsługi zdarzeń za pośrednictwem pełnomocnika. Aby uzyskać ogólne informacje, zobacz [NIB: wywoływanie zdarzeń](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnColumnChanging (System.Data.DataColumnChangeEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataColumnChangeEventArgs
      description: "A <xref href=&quot;System.Data.DataColumnChangeEventArgs&quot;> </xref> zawierający dane zdarzenia."
  overload: System.Data.DataTable.OnColumnChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  id: OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataTable.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataTable.OnPropertyChanging(PropertyChangedEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zgłasza <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged>zdarzeń.</xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged>"
  remarks: 'Wywoływanie zdarzeń wywołuje program obsługi zdarzeń za pośrednictwem pełnomocnika. Aby uzyskać ogólne informacje, zobacz [NIB: wywoływanie zdarzeń](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);
    parameters:
    - id: pcevent
      type: System.ComponentModel.PropertyChangedEventArgs
      description: "A <xref:System.ComponentModel.PropertyChangedEventArgs>zawierający dane zdarzenia.</xref:System.ComponentModel.PropertyChangedEventArgs>"
  overload: System.Data.DataTable.OnPropertyChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)
  id: OnRemoveColumn(System.Data.DataColumn)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnRemoveColumn(DataColumn)
  nameWithType: DataTable.OnRemoveColumn(DataColumn)
  fullName: System.Data.DataTable.OnRemoveColumn(DataColumn)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Powiadamia <xref href=&quot;System.Data.DataTable&quot;> </xref> który <xref href=&quot;System.Data.DataColumn&quot;> </xref> jest usuwana."
  remarks: 'Wywoływanie zdarzeń wywołuje program obsługi zdarzeń za pośrednictwem pełnomocnika. Aby uzyskać więcej informacji, zobacz [NIB: wywoływanie zdarzeń](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRemoveColumn (System.Data.DataColumn column);
    parameters:
    - id: column
      type: System.Data.DataColumn
      description: "<xref href=&quot;System.Data.DataColumn&quot;> </xref> Usuwana."
  overload: System.Data.DataTable.OnRemoveColumn*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)
  id: OnRowChanged(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnRowChanged(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowChanged(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowChanged(DataRowChangeEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zgłasza <xref href=&quot;System.Data.DataTable.RowChanged&quot;> </xref> zdarzeń."
  remarks: 'Wywoływanie zdarzeń wywołuje program obsługi zdarzeń za pośrednictwem pełnomocnika. Aby uzyskać ogólne informacje, zobacz [NIB: wywoływanie zdarzeń](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRowChanged (System.Data.DataRowChangeEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataRowChangeEventArgs
      description: "A <xref href=&quot;System.Data.DataRowChangeEventArgs&quot;> </xref> zawierający dane zdarzenia."
  overload: System.Data.DataTable.OnRowChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)
  id: OnRowChanging(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnRowChanging(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowChanging(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowChanging(DataRowChangeEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zgłasza <xref href=&quot;System.Data.DataTable.RowChanging&quot;> </xref> zdarzeń."
  remarks: 'Wywoływanie zdarzeń wywołuje program obsługi zdarzeń za pośrednictwem pełnomocnika. Aby uzyskać ogólne informacje, zobacz [NIB: wywoływanie zdarzeń](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRowChanging (System.Data.DataRowChangeEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataRowChangeEventArgs
      description: "A <xref href=&quot;System.Data.DataRowChangeEventArgs&quot;> </xref> zawierający dane zdarzenia."
  overload: System.Data.DataTable.OnRowChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)
  id: OnRowDeleted(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnRowDeleted(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowDeleted(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowDeleted(DataRowChangeEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zgłasza <xref href=&quot;System.Data.DataTable.RowDeleted&quot;> </xref> zdarzeń."
  remarks: 'Wywoływanie zdarzeń wywołuje program obsługi zdarzeń za pośrednictwem pełnomocnika. Aby uzyskać ogólne informacje, zobacz [NIB: wywoływanie zdarzeń](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRowDeleted (System.Data.DataRowChangeEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataRowChangeEventArgs
      description: "A <xref href=&quot;System.Data.DataRowChangeEventArgs&quot;> </xref> zawierający dane zdarzenia."
  overload: System.Data.DataTable.OnRowDeleted*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)
  id: OnRowDeleting(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnRowDeleting(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowDeleting(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowDeleting(DataRowChangeEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zgłasza <xref href=&quot;System.Data.DataTable.RowDeleting&quot;> </xref> zdarzeń."
  remarks: 'Wywoływanie zdarzeń wywołuje program obsługi zdarzeń za pośrednictwem pełnomocnika. Aby uzyskać ogólne informacje, zobacz [NIB: wywoływanie zdarzeń](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRowDeleting (System.Data.DataRowChangeEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataRowChangeEventArgs
      description: "A <xref href=&quot;System.Data.DataRowChangeEventArgs&quot;> </xref> zawierający dane zdarzenia."
  overload: System.Data.DataTable.OnRowDeleting*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnTableCleared(System.Data.DataTableClearEventArgs)
  id: OnTableCleared(System.Data.DataTableClearEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnTableCleared(DataTableClearEventArgs)
  nameWithType: DataTable.OnTableCleared(DataTableClearEventArgs)
  fullName: System.Data.DataTable.OnTableCleared(DataTableClearEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zgłasza <xref href=&quot;System.Data.DataTable.TableCleared&quot;> </xref> zdarzeń."
  remarks: "Zgłasza <xref:System.Data.DataTable.TableCleared>zdarzeń, który jest uruchamiany natychmiast po wszystkie wiersze zostały pomyślnie wyczyszczone ale przed wysłaniem <xref:System.Data.DataTable.Clear%2A>Metoda zwraca sterowanie do obiektu wywołującego.</xref:System.Data.DataTable.Clear%2A> </xref:System.Data.DataTable.TableCleared>       Wywoływanie zdarzeń wywołuje program obsługi zdarzeń za pośrednictwem pełnomocnika. Aby uzyskać ogólne informacje, zobacz [NIB: wywoływanie zdarzeń](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."
  syntax:
    content: protected virtual void OnTableCleared (System.Data.DataTableClearEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataTableClearEventArgs
      description: "A <xref href=&quot;System.Data.DataTableClearEventArgs&quot;> </xref> zawierający dane zdarzenia."
  overload: System.Data.DataTable.OnTableCleared*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnTableClearing(System.Data.DataTableClearEventArgs)
  id: OnTableClearing(System.Data.DataTableClearEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnTableClearing(DataTableClearEventArgs)
  nameWithType: DataTable.OnTableClearing(DataTableClearEventArgs)
  fullName: System.Data.DataTable.OnTableClearing(DataTableClearEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zgłasza <xref href=&quot;System.Data.DataTable.TableClearing&quot;> </xref> zdarzeń."
  remarks: "Zgłasza <xref:System.Data.DataTable.TableClearing>zdarzenie, które jest wywoływane przed przetwarzania <xref:System.Data.DataTable.Clear%2A>rozpocznie się wykonywanie operacji.</xref:System.Data.DataTable.Clear%2A> </xref:System.Data.DataTable.TableClearing>       Wywoływanie zdarzeń wywołuje program obsługi zdarzeń za pośrednictwem pełnomocnika. Aby uzyskać ogólne informacje, zobacz [NIB: wywoływanie zdarzeń](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."
  syntax:
    content: protected virtual void OnTableClearing (System.Data.DataTableClearEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataTableClearEventArgs
      description: "A <xref href=&quot;System.Data.DataTableClearEventArgs&quot;> </xref> zawierający dane zdarzenia."
  overload: System.Data.DataTable.OnTableClearing*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnTableNewRow(System.Data.DataTableNewRowEventArgs)
  id: OnTableNewRow(System.Data.DataTableNewRowEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnTableNewRow(DataTableNewRowEventArgs)
  nameWithType: DataTable.OnTableNewRow(DataTableNewRowEventArgs)
  fullName: System.Data.DataTable.OnTableNewRow(DataTableNewRowEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zgłasza <xref href=&quot;System.Data.DataTable.TableNewRow&quot;> </xref> zdarzeń."
  remarks: "Zgłasza <xref:System.Data.DataTable.TableNewRow>zdarzenie, które uruchamia się po nowe <xref:System.Data.DataRow>został utworzony przy użyciu <xref:System.Data.DataTable.NewRow%2A>.</xref:System.Data.DataTable.NewRow%2A> </xref:System.Data.DataRow> </xref:System.Data.DataTable.TableNewRow>       Wywoływanie zdarzeń wywołuje program obsługi zdarzeń za pośrednictwem pełnomocnika. Aby uzyskać ogólne informacje, zobacz [NIB: wywoływanie zdarzeń](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."
  syntax:
    content: protected virtual void OnTableNewRow (System.Data.DataTableNewRowEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataTableNewRowEventArgs
      description: "A <xref href=&quot;System.Data.DataTableNewRowEventArgs&quot;> </xref> zawierający dane zdarzenia."
  overload: System.Data.DataTable.OnTableNewRow*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ParentRelations
  id: ParentRelations
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ParentRelations
  nameWithType: DataTable.ParentRelations
  fullName: System.Data.DataTable.ParentRelations
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera kolekcję relacji nadrzędny tego <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: ''
  example:
  - "The following example uses the ParentRelations property to return each parent <xref:System.Data.DataRelation> in a <xref:System.Data.DataTable>. Each relation is then used as an argument in the <xref:System.Data.DataRow.GetParentRows%2A> method of the <xref:System.Data.DataRow> to return an array of rows. The value of each column in the row is then printed.  \n  \n [!code-cs[Classic WebData DataTable.ParentRelations Example#1](~/add/codesnippet/csharp/p-system.data.datatable._9_1.cs)]\n [!code-vb[Classic WebData DataTable.ParentRelations Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._9_1.vb)]"
  syntax:
    content: public System.Data.DataRelationCollection ParentRelations { get; }
    return:
      type: System.Data.DataRelationCollection
      description: "A <xref href=&quot;System.Data.DataRelationCollection&quot;> </xref> zawiera relacje nadrzędne dla tabeli. Zwracany jest pustą kolekcję, jeśli nie <xref href=&quot;System.Data.DataRelation&quot;> </xref> istnieją obiekty."
  overload: System.Data.DataTable.ParentRelations*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Prefix
  id: Prefix
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Prefix
  nameWithType: DataTable.Prefix
  fullName: System.Data.DataTable.Prefix
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia obszar nazw XML reprezentację danych przechowywanych w <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  syntax:
    content: public string Prefix { get; set; }
    return:
      type: System.String
      description: "Prefiks <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  overload: System.Data.DataTable.Prefix*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.PrimaryKey
  id: PrimaryKey
  parent: System.Data.DataTable
  langs:
  - csharp
  name: PrimaryKey
  nameWithType: DataTable.PrimaryKey
  fullName: System.Data.DataTable.PrimaryKey
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia tablicę kolumn tej funkcji jako kluczy podstawowych w tabeli danych."
  remarks: "Klucz podstawowy tabeli muszą być unikatowe do identyfikowania rekordu w tabeli. Jest również możliwe z składają się z dwóch lub więcej kolumn klucza podstawowego tabeli. Dzieje się tak, gdy pojedyncza kolumna nie zawiera wystarczającej liczby unikatowych wartości. Na przykład dwie kolumny klucza podstawowego może obejmować kolumny &quot;Imię&quot; i &quot;Nazwisko&quot;. Ponieważ kluczy podstawowych może składać się z więcej niż jedną kolumnę, właściwość PrimaryKey składa się z tablicą <xref:System.Data.DataColumn>obiektów.</xref:System.Data.DataColumn>"
  example:
  - "The first example shows how to return the primary key columns for a <xref:System.Data.DataTable> displayed in a `DataGrid`. The second example demonstrates how to set the primary key columns for a <xref:System.Data.DataTable>.  \n  \n [!code-cs[Classic WebData DataTable.PrimaryKey Example#1](~/add/codesnippet/csharp/p-system.data.datatable._4_1.cs)]\n [!code-vb[Classic WebData DataTable.PrimaryKey Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._4_1.vb)]"
  syntax:
    content: public System.Data.DataColumn[] PrimaryKey { get; set; }
    return:
      type: System.Data.DataColumn[]
      description: "Tablica <xref href=&quot;System.Data.DataColumn&quot;> </xref> obiektów."
  overload: System.Data.DataTable.PrimaryKey*
  exceptions:
  - type: System.Data.DataException
    commentId: T:System.Data.DataException
    description: "Klucz jest kluczem obcym."
  platform:
  - net462
- uid: System.Data.DataTable.ReadXml(System.IO.Stream)
  id: ReadXml(System.IO.Stream)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXml(Stream)
  nameWithType: DataTable.ReadXml(Stream)
  fullName: System.Data.DataTable.ReadXml(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Odczytuje XML: schemat i dane do <xref href=&quot;System.Data.DataTable&quot;> </xref> przy użyciu określonego <xref:System.IO.Stream>.</xref:System.IO.Stream>"
  remarks: "Bieżące <xref:System.Data.DataTable>i jego elementów podrzędnych są ładowane przy użyciu danych z dostarczonego <xref:System.IO.Stream>.</xref:System.IO.Stream> </xref:System.Data.DataTable> Zachowanie tej metody jest identyczna ze <xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName>metody, z wyjątkiem danych to w tym przypadku jest załadowany tylko dla bieżącej tabeli i jego obiektów podrzędnych.</xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName>       Metoda ReadXml zapewnia sposób dane tylko do odczytu lub danych i schematu do <xref:System.Data.DataTable>z dokumentu XML, natomiast <xref:System.Data.DataTable.ReadXmlSchema%2A>Metoda odczytuje tylko schemat.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable>       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataTable.WriteXml%2A>i <xref:System.Data.DataTable.WriteXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable.WriteXml%2A> Można zapisać danych XML lub schemat i dane z `DataTable`, użyj `WriteXml` metody. Aby zapisać tylko schemat, należy użyć `WriteXmlSchema` metody.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Jeśli określono schemat w tekście, schematu w wierszu służy do rozszerzania istniejącej struktury relacyjne przed załadowaniem danych. Jeśli występują konflikty (na przykład tej samej kolumny w tej samej tabeli zdefiniowane przy użyciu różnych typów danych) jest wyjątek.       Jeśli schemat nie-line jest określony, struktura relacyjnej został rozszerzony za pośrednictwem wnioskowania odpowiednio do potrzeb zgodnie ze struktury dokumentu XML. Jeśli schemat nie może zostać rozszerzony za pomocą wnioskowania, aby udostępnić wszystkie dane, jest wyjątek.      > [!NOTE] > `DataSet` Nie wiąże — element XML z odpowiadającymi mu dostawcami `DataColumn` lub `DataTable` po prawidłowe znaki XML, takich jak (&quot;_&quot;) są anulowane w serializacji XML. `DataSet` Się tylko specjalne niedozwolone znaki XML w nazwach elementów XML i dlatego tylko zajmowane są takie same. Gdy będą miały zmienione znaczenie prawidłowe znaki w nazwie elementu XML, element jest ignorowany podczas przetwarzania."
  example:
  - "The following example creates a <xref:System.Data.DataTable> containing two columns and ten rows. The example writes the <xref:System.Data.DataTable> schema and data to a memory stream, by invoking the <xref:System.Data.DataTable.WriteXml%2A> method. The example creates a second <xref:System.Data.DataTable> and calls the ReadXml method to fill it with schema and data.  \n  \n [!code-cs[DataWorks DataTable.ReadXml#1](~/add/codesnippet/csharp/m-system.data.datatable._19_1.cs)]\n [!code-vb[DataWorks DataTable.ReadXml#1](~/add/codesnippet/visualbasic/m-system.data.datatable._19_1.vb)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Obiekt, który jest pochodną<xref:System.IO.Stream></xref:System.IO.Stream>"
    return:
      type: System.Data.XmlReadMode
      description: "<xref href=&quot;System.Data.XmlReadMode&quot;> </xref> Używany do odczytu danych."
  overload: System.Data.DataTable.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXml(System.IO.TextReader)
  id: ReadXml(System.IO.TextReader)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXml(TextReader)
  nameWithType: DataTable.ReadXml(TextReader)
  fullName: System.Data.DataTable.ReadXml(TextReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Odczytuje XML: schemat i dane do <xref href=&quot;System.Data.DataTable&quot;> </xref> przy użyciu określonego <xref:System.IO.TextReader>.</xref:System.IO.TextReader>"
  remarks: "Bieżące <xref:System.Data.DataTable>i jego elementów podrzędnych są ładowane przy użyciu danych z dostarczonego <xref:System.IO.TextReader>.</xref:System.IO.TextReader> </xref:System.Data.DataTable> Zachowanie tej metody jest identyczna ze <xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName>metody, z wyjątkiem danych to w tym przypadku jest załadowany tylko dla bieżącej tabeli i jego obiektów podrzędnych.</xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName>       Metoda ReadXml zapewnia sposób dane tylko do odczytu lub danych i schematu do <xref:System.Data.DataTable>z dokumentu XML, natomiast <xref:System.Data.DataTable.ReadXmlSchema%2A>Metoda odczytuje tylko schemat.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable>       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataTable.WriteXml%2A>i <xref:System.Data.DataTable.WriteXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable.WriteXml%2A> Można zapisać danych XML lub schemat i dane z `DataTable`, użyj `WriteXml` metody. Aby zapisać tylko schemat, należy użyć `WriteXmlSchema` metody.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Jeśli określono schemat w tekście, schematu w wierszu służy do rozszerzania istniejącej struktury relacyjne przed załadowaniem danych. Jeśli występują konflikty (na przykład tej samej kolumny w tej samej tabeli zdefiniowane przy użyciu różnych typów danych) jest wyjątek.       Jeśli schemat nie-line jest określony, struktura relacyjnej został rozszerzony za pośrednictwem wnioskowania odpowiednio do potrzeb zgodnie ze struktury dokumentu XML. Jeśli schemat nie może zostać rozszerzony za pomocą wnioskowania, aby udostępnić wszystkie dane, jest wyjątek.      > [!NOTE] > `DataSet` Nie wiąże — element XML z odpowiadającymi mu dostawcami `DataColumn` lub `DataTable` po prawidłowe znaki XML, takich jak (&quot;_&quot;) są anulowane w serializacji XML. `DataSet` Się tylko specjalne niedozwolone znaki XML w nazwach elementów XML i dlatego tylko zajmowane są takie same. Gdy będą miały zmienione znaczenie prawidłowe znaki w nazwie elementu XML, element jest ignorowany podczas przetwarzania."
  example:
  - "The following example creates a <xref:System.Data.DataTable> containing two columns and ten rows. The example writes the <xref:System.Data.DataTable> schema and data to a memory stream, by invoking the <xref:System.Data.DataTable.WriteXml%2A> method. The example creates a second <xref:System.Data.DataTable> and calls the ReadXml method to fill it with schema and data.  \n  \n [!code-vb[DataWorks DataTable.ReadXmlText#1](~/add/codesnippet/visualbasic/m-system.data.datatable._26_1.vb)]\n [!code-cs[DataWorks DataTable.ReadXmlText#1](~/add/codesnippet/csharp/m-system.data.datatable._26_1.cs)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "<xref:System.IO.TextReader>Które będą używane do odczytywania danych.</xref:System.IO.TextReader>"
    return:
      type: System.Data.XmlReadMode
      description: "<xref href=&quot;System.Data.XmlReadMode&quot;> </xref> Używany do odczytu danych."
  overload: System.Data.DataTable.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXml(System.String)
  id: ReadXml(System.String)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXml(String)
  nameWithType: DataTable.ReadXml(String)
  fullName: System.Data.DataTable.ReadXml(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Odczytuje XML: schemat i dane do <xref href=&quot;System.Data.DataTable&quot;> </xref> z określonego pliku."
  remarks: "Bieżące <xref:System.Data.DataTable>i jego elementów podrzędnych są ładowane przy użyciu danych z pliku o nazwie dostarczony <xref:System.String>.</xref:System.String> </xref:System.Data.DataTable> Zachowanie tej metody jest identyczna ze <xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName>metody, z wyjątkiem danych to w tym przypadku jest załadowany tylko dla bieżącej tabeli i jego obiektów podrzędnych.</xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName>       Metoda ReadXml zapewnia sposób dane tylko do odczytu lub danych i schematu do <xref:System.Data.DataTable>z dokumentu XML, natomiast <xref:System.Data.DataTable.ReadXmlSchema%2A>Metoda odczytuje tylko schemat.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable>       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataTable.WriteXml%2A>i <xref:System.Data.DataTable.WriteXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable.WriteXml%2A> Można zapisać danych XML lub schemat i dane z `DataTable`, użyj `WriteXml` metody. Aby zapisać tylko schemat, należy użyć `WriteXmlSchema` metody.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Jeśli określono schemat w tekście, schematu w wierszu służy do rozszerzania istniejącej struktury relacyjne przed załadowaniem danych. Jeśli występują konflikty (na przykład tej samej kolumny w tej samej tabeli zdefiniowane przy użyciu różnych typów danych) jest wyjątek.       Jeśli schemat nie-line jest określony, struktura relacyjnej został rozszerzony za pośrednictwem wnioskowania odpowiednio do potrzeb zgodnie ze struktury dokumentu XML. Jeśli schemat nie może zostać rozszerzony za pomocą wnioskowania, aby udostępnić wszystkie dane, jest wyjątek.      > [!NOTE] > `DataSet` Nie wiąże — element XML z odpowiadającymi mu dostawcami `DataColumn` lub `DataTable` po prawidłowe znaki XML, takich jak (&quot;_&quot;) są anulowane w serializacji XML. `DataSet` Się tylko specjalne niedozwolone znaki XML w nazwach elementów XML i dlatego tylko zajmowane są takie same. Gdy będą miały zmienione znaczenie prawidłowe znaki w nazwie elementu XML, element jest ignorowany podczas przetwarzania.      ```   using System.Data;   public class A {      static void Main(string[] args) {         DataTable tabl = new DataTable(&quot;mytable&quot;);         tabl.Columns.Add(new DataColumn(&quot;id&quot;, typeof(int)));         for (int i = 0; i < 10; i++) {            DataRow row = tabl.NewRow();            row[&quot;id&quot;] = i;            tabl.Rows.Add(row);         }         tabl.WriteXml(&quot;f.xml&quot;, XmlWriteMode.WriteSchema);         DataTable newt = new DataTable();         newt.ReadXml(&quot;f.xml&quot;);      }   }   ```"
  example:
  - "The following example creates a <xref:System.Data.DataTable> containing two columns and ten rows. The example writes the <xref:System.Data.DataTable> schema and data to disk. The example creates a second <xref:System.Data.DataTable> and calls the ReadXml method to fill it with schema and data.  \n  \n [!code-cs[DataWorks DataTable.ReadXmlString#1](~/add/codesnippet/csharp/m-system.data.datatable._14_1.cs)]\n [!code-vb[DataWorks DataTable.ReadXmlString#1](~/add/codesnippet/visualbasic/m-system.data.datatable._14_1.vb)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "Nazwa pliku, z której mają być odczytywane dane."
    return:
      type: System.Data.XmlReadMode
      description: "<xref href=&quot;System.Data.XmlReadMode&quot;> </xref> Używany do odczytu danych."
  overload: System.Data.DataTable.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXml(System.Xml.XmlReader)
  id: ReadXml(System.Xml.XmlReader)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXml(XmlReader)
  nameWithType: DataTable.ReadXml(XmlReader)
  fullName: System.Data.DataTable.ReadXml(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Odczytuje XML: schemat i dane do <xref href=&quot;System.Data.DataTable&quot;> </xref> przy użyciu określonego <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  remarks: "Bieżące <xref:System.Data.DataTable>i jego elementów podrzędnych są ładowane przy użyciu danych z pliku o nazwie dostarczony <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader> </xref:System.Data.DataTable> Zachowanie tej metody jest identyczna jak metoda ReadXml, ale w takim przypadku dane są ładowane tylko dla bieżącej tabeli i jego obiektów podrzędnych.       Metoda ReadXml zapewnia sposób dane tylko do odczytu lub danych i schematu do <xref:System.Data.DataTable>z dokumentu XML, natomiast <xref:System.Data.DataTable.ReadXmlSchema%2A>Metoda odczytuje tylko schemat.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable>       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataTable.WriteXml%2A>i <xref:System.Data.DataTable.WriteXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable.WriteXml%2A> Można zapisać danych XML lub schemat i dane z `DataTable`, użyj `WriteXml` metody. Aby zapisać tylko schemat, należy użyć `WriteXmlSchema` metody.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Jeśli określono schemat w tekście, schematu w wierszu służy do rozszerzania istniejącej struktury relacyjne przed załadowaniem danych. Jeśli występują konflikty (na przykład tej samej kolumny w tej samej tabeli zdefiniowane przy użyciu różnych typów danych) jest wyjątek.       Jeśli schemat nie-line jest określony, struktura relacyjnej został rozszerzony za pośrednictwem wnioskowania odpowiednio do potrzeb zgodnie ze struktury dokumentu XML. Jeśli schemat nie może zostać rozszerzony za pomocą wnioskowania, aby udostępnić wszystkie dane, jest wyjątek.      > [!NOTE] > `DataSet` Nie wiąże — element XML z odpowiadającymi mu dostawcami `DataColumn` lub `DataTable` po prawidłowe znaki XML, takich jak (&quot;_&quot;) są anulowane w serializacji XML. `DataSet` Się tylko specjalne niedozwolone znaki XML w nazwach elementów XML i dlatego tylko zajmowane są takie same. Gdy będą miały zmienione znaczenie prawidłowe znaki w nazwie elementu XML, element jest ignorowany podczas przetwarzania."
  example:
  - "The following example creates a <xref:System.Data.DataTable> containing two columns and ten rows. The example writes the <xref:System.Data.DataTable> schema and data to an <xref:System.Xml.XmlReader>. The example creates a second <xref:System.Data.DataTable> and calls the ReadXml method to fill it with schema and data from the <xref:System.Xml.XmlReader> instance.  \n  \n [!code-cs[DataWorks DataTable.ReadXmlXmlReader#1](~/add/codesnippet/csharp/m-system.data.datatable._10_1.cs)]\n [!code-vb[DataWorks DataTable.ReadXmlXmlReader#1](~/add/codesnippet/visualbasic/m-system.data.datatable._10_1.vb)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>Które będą używane do odczytywania danych.</xref:System.Xml.XmlReader>"
    return:
      type: System.Data.XmlReadMode
      description: "<xref href=&quot;System.Data.XmlReadMode&quot;> </xref> Używany do odczytu danych."
  overload: System.Data.DataTable.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXmlSchema(System.IO.Stream)
  id: ReadXmlSchema(System.IO.Stream)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXmlSchema(Stream)
  nameWithType: DataTable.ReadXmlSchema(Stream)
  fullName: System.Data.DataTable.ReadXmlSchema(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Odczytuje schematu XML w <xref href=&quot;System.Data.DataTable&quot;> </xref> przy użyciu określonego strumienia."
  remarks: "Tworzenie schematu dla <xref:System.Data.DataTable>.</xref:System.Data.DataTable> przy użyciu metody ReadXmlSchema Schemat zawiera definicji tabeli, relacji i ograniczenia.       Aby zapisać schemat dokumentu XML, użyj <xref:System.Data.DataTable.WriteXmlSchema%2A>metody.</xref:System.Data.DataTable.WriteXmlSchema%2A>       Schemat XML jest interpretowany zgodnie ze standardowych XSD.       Jeśli msdata:DataType i typy xs:type nie są zgodne, może spowodować uszkodzenie danych. Nie zostanie wygenerowany wyjątek.       `ReadXmlSchema` Zazwyczaj wywoływana jest metoda przed wywołaniem <xref:System.Data.DataTable.ReadXml%2A>metody, które są używane do wypełnienia <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.ReadXml%2A>       Aby utworzyć relacji zagnieżdżonej przy użyciu schematu XML, użyj niejawne elementów zagnieżdżonych. Można również skonfigurować relacji zagnieżdżonej można używać nazw kolumn jawnego. Elementy musi być niejawnie zagnieżdżone, aby odpowiednie DataTables brać udziału w relacji zagnieżdżonej."
  example:
  - "The following console application creates a new <xref:System.Data.DataTable>, and writes the schema for that table to a <xref:System.IO.MemoryStream>. Then, the example creates a new <xref:System.Data.DataTable> and reads its schema from the saved XML schema.  \n  \n [!code-cs[DataWorks DataTable.ReadXmlIOStream#1](~/add/codesnippet/csharp/m-system.data.datatable._8_1.cs)]\n [!code-vb[DataWorks DataTable.ReadXmlIOStream#1](~/add/codesnippet/visualbasic/m-system.data.datatable._8_1.vb)]"
  syntax:
    content: public void ReadXmlSchema (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Strumień używany do odczytu schematu."
  overload: System.Data.DataTable.ReadXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)
  id: ReadXmlSchema(System.IO.TextReader)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXmlSchema(TextReader)
  nameWithType: DataTable.ReadXmlSchema(TextReader)
  fullName: System.Data.DataTable.ReadXmlSchema(TextReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Odczytuje schematu XML w <xref href=&quot;System.Data.DataTable&quot;> </xref> przy użyciu określonego <xref:System.IO.TextReader>.</xref:System.IO.TextReader>"
  remarks: "Tworzenie schematu dla <xref:System.Data.DataTable>.</xref:System.Data.DataTable> przy użyciu metody ReadXmlSchema Schemat zawiera definicji tabeli, relacji i ograniczenia.       Aby zapisać schemat dokumentu XML, użyj <xref:System.Data.DataTable.WriteXmlSchema%2A>metody.</xref:System.Data.DataTable.WriteXmlSchema%2A>       Schemat XML jest interpretowany zgodnie ze standardowych XSD.       Jeśli msdata:DataType i typy xs:type nie są zgodne, może spowodować uszkodzenie danych. Nie zostanie wygenerowany wyjątek.       `ReadXmlSchema` Zazwyczaj wywoływana jest metoda przed wywołaniem <xref:System.Data.DataTable.ReadXml%2A>metody, które są używane do wypełnienia <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.ReadXml%2A>       Aby utworzyć relacji zagnieżdżonej przy użyciu schematu XML, użyj niejawne elementów zagnieżdżonych. Można także ponownie skonfigurować relacji zagnieżdżonej można używać nazw kolumn jawnego. Elementy musi być niejawnie zagnieżdżone, aby odpowiednie DataTables brać udziału w relacji zagnieżdżonej."
  example:
  - "The following console application creates a new <xref:System.Data.DataTable>, and writes the schema for that table to a <xref:System.IO.MemoryStream>. Then, the example creates a new <xref:System.Data.DataTable> and reads its schema from the saved XML schema, using a <xref:System.IO.StreamReader> (which inherits from <xref:System.IO.TextReader>) as its source.  \n  \n [!code-cs[DataWorks DataTable.ReadXmlSchema#1](~/add/codesnippet/csharp/m-system.data.datatable._12_1.cs)]\n [!code-vb[DataWorks DataTable.ReadXmlSchema#1](~/add/codesnippet/visualbasic/m-system.data.datatable._12_1.vb)]"
  syntax:
    content: public void ReadXmlSchema (System.IO.TextReader reader);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "<xref:System.IO.TextReader>Używany do odczytu informacji o schemacie.</xref:System.IO.TextReader>"
  overload: System.Data.DataTable.ReadXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXmlSchema(System.String)
  id: ReadXmlSchema(System.String)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXmlSchema(String)
  nameWithType: DataTable.ReadXmlSchema(String)
  fullName: System.Data.DataTable.ReadXmlSchema(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Odczytuje schematu XML w <xref href=&quot;System.Data.DataTable&quot;> </xref> z określonego pliku."
  remarks: "Tworzenie schematu dla <xref:System.Data.DataTable>.</xref:System.Data.DataTable> przy użyciu metody ReadXmlSchema Schemat zawiera definicji tabeli, relacji i ograniczenia.       Aby zapisać schemat dokumentu XML, użyj <xref:System.Data.DataTable.WriteXmlSchema%2A>metody.</xref:System.Data.DataTable.WriteXmlSchema%2A>       Schemat XML jest interpretowany zgodnie ze standardowych XSD.       Jeśli msdata:DataType i typy xs:type nie są zgodne, może spowodować uszkodzenie danych. Nie zostanie wygenerowany wyjątek.       `ReadXmlSchema` Zazwyczaj wywoływana jest metoda przed wywołaniem <xref:System.Data.DataTable.ReadXml%2A>metodę, która jest używany do wypełniania `DataTable`.</xref:System.Data.DataTable.ReadXml%2A>       Aby utworzyć relacji zagnieżdżonej przy użyciu schematu XML, użyj niejawne elementów zagnieżdżonych. Można także ponownie skonfigurować relacji zagnieżdżonej można używać nazw kolumn jawnego. Elementy musi być niejawnie zagnieżdżone, aby odpowiednie DataTables brać udziału w relacji zagnieżdżonej."
  example:
  - "The following console application creates a new <xref:System.Data.DataTable>, and writes the schema for that table to a file. Then, the example creates a new <xref:System.Data.DataTable> and reads its schema from the saved XML schema, using the file as its source.  \n  \n [!code-cs[DataWorks DataTable.ReadXmlSchemaString#1](~/add/codesnippet/csharp/m-system.data.datatable._16_1.cs)]\n [!code-vb[DataWorks DataTable.ReadXmlSchemaString#1](~/add/codesnippet/visualbasic/m-system.data.datatable._16_1.vb)]"
  syntax:
    content: public void ReadXmlSchema (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "Nazwa pliku, z którego można odczytać informacji o schemacie."
  overload: System.Data.DataTable.ReadXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)
  id: ReadXmlSchema(System.Xml.XmlReader)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXmlSchema(XmlReader)
  nameWithType: DataTable.ReadXmlSchema(XmlReader)
  fullName: System.Data.DataTable.ReadXmlSchema(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Odczytuje schematu XML w <xref href=&quot;System.Data.DataTable&quot;> </xref> przy użyciu określonego <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  remarks: "Tworzenie schematu dla <xref:System.Data.DataTable>.</xref:System.Data.DataTable> przy użyciu metody ReadXmlSchema Schemat zawiera definicji tabeli, relacji i ograniczenia.       Aby zapisać schemat dokumentu XML, użyj <xref:System.Data.DataTable.WriteXmlSchema%2A>metody.</xref:System.Data.DataTable.WriteXmlSchema%2A>       Schemat XML jest interpretowany zgodnie ze standardowych XSD.       Jeśli msdata:DataType i typy xs:type nie są zgodne, może spowodować uszkodzenie danych. Nie zostanie wygenerowany wyjątek.       `ReadXmlSchema` Zazwyczaj wywoływana jest metoda przed wywołaniem <xref:System.Data.DataTable.ReadXml%2A>metody, które są używane do wypełnienia <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.ReadXml%2A>      > [!NOTE] > Sposobem tworzenia relacji zagnieżdżonej przy użyciu schematu XML ma niejawne elementów zagnieżdżonych. Ponadto można ponownie przewodowej, aby używać nazw kolumn jawne relacji zagnieżdżonej. Jest to konieczne dla elementów być niejawnie zagnieżdżony odpowiedniego DataTables brać udziału w relacji zagnieżdżonej."
  example:
  - "The following console application creates a new <xref:System.Data.DataTable>, and writes the schema for that table to a <xref:System.IO.MemoryStream>. Then, the example creates a new <xref:System.Data.DataTable> and reads its schema from the saved XML schema, using a <xref:System.Xml.XmlTextReader> (which inherits from <xref:System.Xml.XmlReader>) as its source.  \n  \n [!code-cs[DataWorks DataTable.ReadXmlSchemaReader#1](~/add/codesnippet/csharp/m-system.data.datatable._17_1.cs)]\n [!code-vb[DataWorks DataTable.ReadXmlSchemaReader#1](~/add/codesnippet/visualbasic/m-system.data.datatable._17_1.vb)]"
  syntax:
    content: public void ReadXmlSchema (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>Używany do odczytu informacji o schemacie.</xref:System.Xml.XmlReader>"
  overload: System.Data.DataTable.ReadXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXmlSerializable(System.Xml.XmlReader)
  id: ReadXmlSerializable(System.Xml.XmlReader)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXmlSerializable(XmlReader)
  nameWithType: DataTable.ReadXmlSerializable(XmlReader)
  fullName: System.Data.DataTable.ReadXmlSerializable(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Odczytuje dane ze strumienia XML."
  syntax:
    content: protected virtual void ReadXmlSerializable (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "A <xref:System.Xml.XmlReader>obiektu.</xref:System.Xml.XmlReader>"
  overload: System.Data.DataTable.ReadXmlSerializable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.RejectChanges
  id: RejectChanges
  parent: System.Data.DataTable
  langs:
  - csharp
  name: RejectChanges()
  nameWithType: DataTable.RejectChanges()
  fullName: System.Data.DataTable.RejectChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Wycofuje wszystkie zmiany wprowadzone do tabeli, ponieważ została załadowana lub czas ostatniego <xref:System.Data.DataTable.AcceptChanges*>została wywołana.</xref:System.Data.DataTable.AcceptChanges*>"
  remarks: "Gdy RejectChanges jest wywoływana, wszelkie <xref:System.Data.DataRow>obiektów, które są nadal w trybie edycji Anuluj ich edycji.</xref:System.Data.DataRow> Nowe wiersze zostaną usunięte. Wiersze z <xref:System.Data.DataRowState>ustawioną `Modified` lub `Deleted` zwrotu z powrotem do pierwotnego stanu.</xref:System.Data.DataRowState>"
  example:
  - "The following example makes several changes to a <xref:System.Data.DataTable>, but rejects the changes by invoking the RejectChanges method.  \n  \n [!code-cs[Classic WebData DataTable.RejectChanges Example#1](~/add/codesnippet/csharp/m-system.data.datatable._3_1.cs)]\n [!code-vb[Classic WebData DataTable.RejectChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._3_1.vb)]"
  syntax:
    content: public void RejectChanges ();
    parameters: []
  overload: System.Data.DataTable.RejectChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.RemotingFormat
  id: RemotingFormat
  parent: System.Data.DataTable
  langs:
  - csharp
  name: RemotingFormat
  nameWithType: DataTable.RemotingFormat
  fullName: System.Data.DataTable.RemotingFormat
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia format serializacji."
  syntax:
    content: public System.Data.SerializationFormat RemotingFormat { get; set; }
    return:
      type: System.Data.SerializationFormat
      description: "A <xref href=&quot;System.Data.SerializationFormat&quot;> </xref> wyliczenie opisujące albo <xref uid=&quot;langword_csharp_Binary&quot; name=&quot;Binary&quot; href=&quot;&quot;> </xref> lub <xref uid=&quot;langword_csharp_Xml&quot; name=&quot;Xml&quot; href=&quot;&quot;> </xref> szeregowanie."
  overload: System.Data.DataTable.RemotingFormat*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Reset
  id: Reset
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Reset()
  nameWithType: DataTable.Reset()
  fullName: System.Data.DataTable.Reset()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Resetuje <xref href=&quot;System.Data.DataTable&quot;> </xref> do stanu pierwotnego. Resetowanie usuwa wszystkie dane, indeksy relacje i kolumn tabeli. Jeśli zestaw danych zawiera element DataTable, tabeli nadal będzie częścią elementu DataSet po zresetowaniu tabeli."
  syntax:
    content: public virtual void Reset ();
    parameters: []
  overload: System.Data.DataTable.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.RowChanged
  id: RowChanged
  parent: System.Data.DataTable
  langs:
  - csharp
  name: RowChanged
  nameWithType: DataTable.RowChanged
  fullName: System.Data.DataTable.RowChanged
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Występuje po <xref href=&quot;System.Data.DataRow&quot;> </xref> został pomyślnie zmieniony."
  remarks: "Aby uzyskać więcej informacji, zobacz [obsługi zdarzeń DataTable](~/add/includes/ajax-current-ext-md.md)."
  example:
  - >-
    [!code-vb[Classic WebData DataTable.RowChanged Example#1](~/add/codesnippet/visualbasic/e-system.data.datatable._0_1.vb)]
     [!code-cs[Classic WebData DataTable.RowChanged Example#1](~/add/codesnippet/csharp/e-system.data.datatable._0_1.cs)]
  syntax:
    content: public event System.Data.DataRowChangeEventHandler RowChanged;
    return:
      type: System.Data.DataRowChangeEventHandler
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.RowChanging
  id: RowChanging
  parent: System.Data.DataTable
  langs:
  - csharp
  name: RowChanging
  nameWithType: DataTable.RowChanging
  fullName: System.Data.DataTable.RowChanging
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Występuje, gdy <xref href=&quot;System.Data.DataRow&quot;> </xref> jest zmieniany."
  remarks: "Aby uzyskać więcej informacji, zobacz [obsługi zdarzeń DataTable](~/add/includes/ajax-current-ext-md.md)."
  example:
  - >-
    [!code-cs[Classic WebData DataTable.RowChanging Example#1](~/add/codesnippet/csharp/e-system.data.datatable._1_1.cs)]
     [!code-vb[Classic WebData DataTable.RowChanging Example#1](~/add/codesnippet/visualbasic/e-system.data.datatable._1_1.vb)]
  syntax:
    content: public event System.Data.DataRowChangeEventHandler RowChanging;
    return:
      type: System.Data.DataRowChangeEventHandler
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.RowDeleted
  id: RowDeleted
  parent: System.Data.DataTable
  langs:
  - csharp
  name: RowDeleted
  nameWithType: DataTable.RowDeleted
  fullName: System.Data.DataTable.RowDeleted
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Występuje po usunięciu wiersza w tabeli."
  remarks: "Aby uzyskać więcej informacji, zobacz [obsługi zdarzeń DataTable](~/add/includes/ajax-current-ext-md.md)."
  example:
  - >-
    [!code-vb[Classic WebData DataTable.RowDeleted Example#1](~/add/codesnippet/visualbasic/e-system.data.datatable._3_1.vb)]
     [!code-cs[Classic WebData DataTable.RowDeleted Example#1](~/add/codesnippet/csharp/e-system.data.datatable._3_1.cs)]
  syntax:
    content: public event System.Data.DataRowChangeEventHandler RowDeleted;
    return:
      type: System.Data.DataRowChangeEventHandler
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.RowDeleting
  id: RowDeleting
  parent: System.Data.DataTable
  langs:
  - csharp
  name: RowDeleting
  nameWithType: DataTable.RowDeleting
  fullName: System.Data.DataTable.RowDeleting
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Występuje przed wiersza w tabeli ma zostać usunięty."
  remarks: "Aby uzyskać więcej informacji, zobacz [obsługi zdarzeń DataTable](~/add/includes/ajax-current-ext-md.md)."
  example:
  - >-
    [!code-cs[Classic WebData DataTable.RowDeleting Example#1](~/add/codesnippet/csharp/e-system.data.datatable._2_1.cs)]
     [!code-vb[Classic WebData DataTable.RowDeleting Example#1](~/add/codesnippet/visualbasic/e-system.data.datatable._2_1.vb)]
  syntax:
    content: public event System.Data.DataRowChangeEventHandler RowDeleting;
    return:
      type: System.Data.DataRowChangeEventHandler
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Rows
  id: Rows
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Rows
  nameWithType: DataTable.Rows
  fullName: System.Data.DataTable.Rows
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera kolekcję wierszy, które należą do tej tabeli."
  remarks: "Aby utworzyć nową <xref:System.Data.DataRow>, należy użyć <xref:System.Data.DataTable.NewRow%2A>Metoda zwraca nowy obiekt.</xref:System.Data.DataTable.NewRow%2A> </xref:System.Data.DataRow> Taki obiekt jest automatycznie konfigurowany schemat zdefiniowane dla <xref:System.Data.DataTable>za pośrednictwem jego Kolekcja <xref:System.Data.DataColumn>obiektów.</xref:System.Data.DataColumn> </xref:System.Data.DataTable> Po utworzeniu nowego wiersza i ustawianie wartości dla każdej kolumny w wierszu, Dodaj wiersz, aby <xref:System.Data.DataRowCollection>przy użyciu `Add` metody.</xref:System.Data.DataRowCollection>       Każdy <xref:System.Data.DataRow>w kolekcji reprezentuje wiersz danych w tabeli.</xref:System.Data.DataRow> Aby zatwierdzić zmiany w wartości kolumny w wierszu, należy wywołać <xref:System.Data.DataTable.AcceptChanges%2A>metody.</xref:System.Data.DataTable.AcceptChanges%2A>"
  example:
  - "The following shows two examples of returning and setting rows. The first example uses the Rows property and prints the value of each column for every row. The second example uses the <xref:System.Data.DataTable> object's <xref:System.Data.DataTable.NewRow%2A> method to create a new <xref:System.Data.DataRow> object with the schema of the <xref:System.Data.DataTable>. After setting the row values, the row is added to the <xref:System.Data.DataRowCollection> through the `Add` method.  \n  \n [!code-cs[Classic WebData DataTable.Rows Example#1](~/add/codesnippet/csharp/p-system.data.datatable._1_1.cs)]\n [!code-vb[Classic WebData DataTable.Rows Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._1_1.vb)]"
  syntax:
    content: public System.Data.DataRowCollection Rows { get; }
    return:
      type: System.Data.DataRowCollection
      description: "A <xref href=&quot;System.Data.DataRowCollection&quot;> </xref> zawierający <xref href=&quot;System.Data.DataRow&quot;> </xref> obiekty; w przeciwnym razie wartość null, jeśli nie <xref href=&quot;System.Data.DataRow&quot;> </xref> istnieją obiekty."
  overload: System.Data.DataTable.Rows*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Select
  id: Select
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Select()
  nameWithType: DataTable.Select()
  fullName: System.Data.DataTable.Select()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera tablicę wszystkich <xref href=&quot;System.Data.DataRow&quot;> </xref> obiektów."
  remarks: "W celu zapewnienia prawidłowego sortowania, określ kryteria sortowania lub <xref:System.Data.DataTable.Select%2A> <xref:System.Data.DataTable.Select%2A>.</xref:System.Data.DataTable.Select%2A> </xref:System.Data.DataTable.Select%2A>"
  example:
  - "The following example returns an array of <xref:System.Data.DataRow> objects through the Select method.  \n  \n [!code-cs[Classic WebData DataTable.Select Example#1](~/add/codesnippet/csharp/m-system.data.datatable._6_1.cs)]\n [!code-vb[Classic WebData DataTable.Select Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._6_1.vb)]"
  syntax:
    content: public System.Data.DataRow[] Select ();
    parameters: []
    return:
      type: System.Data.DataRow[]
      description: "Tablica <xref href=&quot;System.Data.DataRow&quot;> </xref> obiektów."
  overload: System.Data.DataTable.Select*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Select(System.String)
  id: Select(System.String)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Select(String)
  nameWithType: DataTable.Select(String)
  fullName: System.Data.DataTable.Select(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera tablicę wszystkich <xref href=&quot;System.Data.DataRow&quot;> </xref> obiektów spełniających kryteria filtrowania."
  remarks: "Aby utworzyć `filterExpression` argumentu, użyj tego samego reguły, które są stosowane do <xref:System.Data.DataColumn>klasy <xref:System.Data.DataColumn.Expression%2A>wartości właściwości dla tworzenia filtrów.</xref:System.Data.DataColumn.Expression%2A> </xref:System.Data.DataColumn>       W celu zapewnienia prawidłowego sortowania, określ kryteria sortowania lub <xref:System.Data.DataTable.Select%2A> <xref:System.Data.DataTable.Select%2A>.</xref:System.Data.DataTable.Select%2A> </xref:System.Data.DataTable.Select%2A>       Jeśli kolumna w filtrze zawiera wartość null, nie będzie częścią wyniku."
  example:
  - "The following example uses a filter expression to return an array of <xref:System.Data.DataRow> objects.  \n  \n [!code-cs[Classic WebData DataTable.Select1 Example#1](~/add/codesnippet/csharp/m-system.data.datatable._7_1.cs)]\n [!code-vb[Classic WebData DataTable.Select1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._7_1.vb)]"
  syntax:
    content: public System.Data.DataRow[] Select (string filterExpression);
    parameters:
    - id: filterExpression
      type: System.String
      description: "Kryteria służące do filtrowania wierszy. Przykłady dotyczące do filtru wierszy, zobacz [składni RowFilter DataView \\[C#\\]](http://www.csharp-examples.net/dataview-rowfilter/)."
    return:
      type: System.Data.DataRow[]
      description: "Tablica <xref href=&quot;System.Data.DataRow&quot;> </xref> obiektów."
  overload: System.Data.DataTable.Select*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Select(System.String,System.String)
  id: Select(System.String,System.String)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Select(String,String)
  nameWithType: DataTable.Select(String,String)
  fullName: System.Data.DataTable.Select(String,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera tablicę wszystkich <xref href=&quot;System.Data.DataRow&quot;> </xref> obiektów spełniających kryteria filtru w określonej kolejności."
  remarks: "Do formularza `filterExpression` argumentu, użyj tego samego reguł do utworzenia <xref:System.Data.DataColumn>klasy <xref:System.Data.DataColumn.Expression%2A>wartości właściwości.</xref:System.Data.DataColumn.Expression%2A> </xref:System.Data.DataColumn> `Sort` Argument również używa tego samego reguł do tworzenia klasy <xref:System.Data.DataColumn.Expression%2A>ciągów.</xref:System.Data.DataColumn.Expression%2A>       Jeśli kolumna w filtrze zawiera wartość null, nie będzie częścią wyniku."
  example:
  - "The following example uses a filter expression to return an array of <xref:System.Data.DataRow> objects.  \n  \n [!code-cs[Classic WebData DataTable.Select2 Example#1](~/add/codesnippet/csharp/m-system.data.datatable._11_1.cs)]\n [!code-vb[Classic WebData DataTable.Select2 Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._11_1.vb)]"
  syntax:
    content: public System.Data.DataRow[] Select (string filterExpression, string sort);
    parameters:
    - id: filterExpression
      type: System.String
      description: "Kryteria służące do filtrowania wierszy. Przykłady dotyczące do filtru wierszy, zobacz [składni RowFilter DataView \\[C#\\]](http://www.csharp-examples.net/dataview-rowfilter/)."
    - id: sort
      type: System.String
      description: "Ciąg określający kierunku kolumny i sortowania."
    return:
      type: System.Data.DataRow[]
      description: "Tablica <xref href=&quot;System.Data.DataRow&quot;> </xref> obiektów spełniających wyrażenia filtru."
  overload: System.Data.DataTable.Select*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)
  id: Select(System.String,System.String,System.Data.DataViewRowState)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Select(String,String,DataViewRowState)
  nameWithType: DataTable.Select(String,String,DataViewRowState)
  fullName: System.Data.DataTable.Select(String,String,DataViewRowState)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera tablicę wszystkich <xref href=&quot;System.Data.DataRow&quot;> </xref> obiekty spełniające kryteria filtru, kolejności sortowania, które odpowiadają określonego stanu."
  remarks: "Do formularza `filterExpression` argumentu, użyj tego samego reguł do utworzenia <xref:System.Data.DataColumn>klasy <xref:System.Data.DataColumn.Expression%2A>wartości właściwości.</xref:System.Data.DataColumn.Expression%2A> </xref:System.Data.DataColumn> `Sort` Argument również używa tego samego reguł do tworzenia klasy <xref:System.Data.DataColumn.Expression%2A>ciągów.</xref:System.Data.DataColumn.Expression%2A>       Jeśli kolumna w filtrze zawiera wartość null, nie będzie częścią wyniku."
  example:
  - "The following example uses a filter expression and record state to return an array of <xref:System.Data.DataRow> objects.  \n  \n [!code-cs[Classic WebData DataTable.Select3 Example#1](~/add/codesnippet/csharp/c72cdab9-f58a-41a1-a322-_1.cs)]\n [!code-vb[Classic WebData DataTable.Select3 Example#1](~/add/codesnippet/visualbasic/c72cdab9-f58a-41a1-a322-_1.vb)]"
  syntax:
    content: public System.Data.DataRow[] Select (string filterExpression, string sort, System.Data.DataViewRowState recordStates);
    parameters:
    - id: filterExpression
      type: System.String
      description: "Kryteria służące do filtrowania wierszy. Przykłady dotyczące do filtru wierszy, zobacz [składni RowFilter DataView \\[C#\\]](http://www.csharp-examples.net/dataview-rowfilter/)."
    - id: sort
      type: System.String
      description: "Ciąg określający kierunku kolumny i sortowania."
    - id: recordStates
      type: System.Data.DataViewRowState
      description: "Jeden z <xref href=&quot;System.Data.DataViewRowState&quot;> </xref> wartości."
    return:
      type: System.Data.DataRow[]
      description: "Tablica <xref href=&quot;System.Data.DataRow&quot;> </xref> obiektów."
  overload: System.Data.DataTable.Select*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Site
  id: Site
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Site
  nameWithType: DataTable.Site
  fullName: System.Data.DataTable.Site
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia <xref href=&quot;System.ComponentModel.ISite&quot;> </xref> dla <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "Powiązania witryny <xref:System.ComponentModel.Component>do <xref:System.ComponentModel.Container>i umożliwić komunikację między nimi, a także umożliwiają kontener, aby zarządzać jego składniki.</xref:System.ComponentModel.Container> </xref:System.ComponentModel.Component>"
  syntax:
    content: public override System.ComponentModel.ISite Site { get; set; }
    return:
      type: System.ComponentModel.ISite
      description: "An <xref href=&quot;System.ComponentModel.ISite&quot;></xref> for the <xref href=&quot;System.Data.DataTable&quot;></xref>."
  overload: System.Data.DataTable.Site*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection
  id: System#ComponentModel#IListSource#ContainsListCollection
  isEii: true
  parent: System.Data.DataTable
  langs:
  - csharp
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: DataTable.System.ComponentModel.IListSource.ContainsListCollection
  fullName: System.Data.DataTable.System.ComponentModel.IListSource.ContainsListCollection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Opis tego elementu członkowskiego, zobacz &lt;xref:System.ComponentModel.IListSource.ContainsListCollection%2A?displayProperty=fullName&gt;."
  remarks: "Ten element jest jawną implementacją elementu interfejsu. Można go używać tylko wtedy, gdy <xref:System.Data.DataTable>wystąpienia jest rzutowane na <xref:System.ComponentModel.IListSource>interfejsu.</xref:System.ComponentModel.IListSource> </xref:System.Data.DataTable>"
  syntax:
    content: bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli kolekcja jest kolekcją <xref:System.Collections.IList>obiekty; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Collections.IList>"
  overload: System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.System#ComponentModel#IListSource#GetList
  id: System#ComponentModel#IListSource#GetList
  isEii: true
  parent: System.Data.DataTable
  langs:
  - csharp
  name: System.ComponentModel.IListSource.GetList()
  nameWithType: DataTable.System.ComponentModel.IListSource.GetList()
  fullName: System.Data.DataTable.System.ComponentModel.IListSource.GetList()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Opis tego elementu członkowskiego, zobacz &lt;xref:System.ComponentModel.IListSource.GetList%2A?displayProperty=fullName&gt;."
  remarks: "Ten element jest jawną implementacją elementu interfejsu. Można go używać tylko wtedy, gdy <xref:System.Data.DataTable>wystąpienia jest rzutowane na <xref:System.ComponentModel.IListSource>interfejsu.</xref:System.ComponentModel.IListSource> </xref:System.Data.DataTable>"
  syntax:
    content: System.Collections.IList IListSource.GetList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>Który może być powiązana ze źródłem danych z obiektu.</xref:System.Collections.IList>"
  overload: System.Data.DataTable.System#ComponentModel#IListSource#GetList*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema
  id: System#Xml#Serialization#IXmlSerializable#GetSchema
  isEii: true
  parent: System.Data.DataTable
  langs:
  - csharp
  name: System.Xml.Serialization.IXmlSerializable.GetSchema()
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.GetSchema()
  fullName: System.Data.DataTable.System.Xml.Serialization.IXmlSerializable.GetSchema()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Opis tego elementu członkowskiego, zobacz &lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName&gt;."
  remarks: "Ten element jest jawną implementacją elementu interfejsu. Można go używać tylko wtedy, gdy <xref:System.Data.DataSet>wystąpienia jest rzutowane na <xref:System.Xml.Serialization.IXmlSerializable>interfejsu.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Data.DataSet>"
  syntax:
    content: System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();
    parameters: []
    return:
      type: System.Xml.Schema.XmlSchema
      description: "<xref:System.Xml.Schema.XmlSchema>Opisujący reprezentację XML obiektu, który jest generowany przez <> </> *> — metoda i używane przez <> </> *> metody.</xref:System.Xml.Schema.XmlSchema>"
  overload: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  id: System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  isEii: true
  parent: System.Data.DataTable
  langs:
  - csharp
  name: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Data.DataTable.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Opis tego elementu członkowskiego, zobacz &lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A?displayProperty=fullName&gt;."
  remarks: "Ten element jest jawną implementacją elementu interfejsu. Można go używać tylko wtedy, gdy <xref:System.Data.DataSet>wystąpienia jest rzutowane na <xref:System.Xml.Serialization.IXmlSerializable>interfejsu.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Data.DataSet>"
  syntax:
    content: void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Element XmlReader."
  overload: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  id: System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  isEii: true
  parent: System.Data.DataTable
  langs:
  - csharp
  name: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Data.DataTable.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Opis tego elementu członkowskiego, zobacz &lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A?displayProperty=fullName&gt;."
  remarks: "Ten element jest jawną implementacją elementu interfejsu. Można go używać tylko wtedy, gdy <xref:System.Data.DataSet>wystąpienia jest rzutowane na <xref:System.Xml.Serialization.IXmlSerializable>interfejsu.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Data.DataSet>"
  syntax:
    content: void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "Element XmlWriter."
  overload: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.TableCleared
  id: TableCleared
  parent: System.Data.DataTable
  langs:
  - csharp
  name: TableCleared
  nameWithType: DataTable.TableCleared
  fullName: System.Data.DataTable.TableCleared
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Występuje po <xref href=&quot;System.Data.DataTable&quot;> </xref> jest wyczyszczone."
  remarks: "Zdarzenie TableCleared jest uruchamiane natychmiast po wszystkie wiersze zostały pomyślnie wyczyszczone ale przed wysłaniem <xref:System.Data.DataTable.Clear%2A>Metoda zwraca sterowanie do obiektu wywołującego.</xref:System.Data.DataTable.Clear%2A> Zdarzenie TableCleared nie jest uruchamiany, jeśli ma żadnych wyjątków podczas operacji Wyczyść."
  syntax:
    content: public event System.Data.DataTableClearEventHandler TableCleared;
    return:
      type: System.Data.DataTableClearEventHandler
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.TableClearing
  id: TableClearing
  parent: System.Data.DataTable
  langs:
  - csharp
  name: TableClearing
  nameWithType: DataTable.TableClearing
  fullName: System.Data.DataTable.TableClearing
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Występuje, gdy <xref href=&quot;System.Data.DataTable&quot;> </xref> jest wyczyszczone."
  remarks: "TableClearing zdarzenie jest wywoływane przed przetwarzania <xref:System.Data.DataTable.Clear%2A>rozpocznie się wykonywanie operacji.</xref:System.Data.DataTable.Clear%2A> To zdarzenie jest wywoływane zawsze, gdy <xref:System.Data.DataTable.Clear%2A>wywoływana jest metoda, nawet jeśli tabela nie zawiera żadnych wierszy.</xref:System.Data.DataTable.Clear%2A>"
  syntax:
    content: public event System.Data.DataTableClearEventHandler TableClearing;
    return:
      type: System.Data.DataTableClearEventHandler
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.TableName
  id: TableName
  parent: System.Data.DataTable
  langs:
  - csharp
  name: TableName
  nameWithType: DataTable.TableName
  fullName: System.Data.DataTable.TableName
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera lub ustawia nazwę <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "Właściwość TableName służy do zwracania tabeli z obiektu nadrzędnego <xref:System.Data.DataSet>obiektu <xref:System.Data.DataTableCollection>(zwrócony przez <xref:System.Data.DataSet.Tables%2A>Właściwości).</xref:System.Data.DataSet.Tables%2A> </xref:System.Data.DataTableCollection> </xref:System.Data.DataSet>"
  example:
  - "The following example prints the TableName for each table in a collection of <xref:System.Data.DataTable> objects.  \n  \n [!code-cs[Classic WebData DataTable.TableName Example#1](~/add/codesnippet/csharp/p-system.data.datatable._2_1.cs)]\n [!code-vb[Classic WebData DataTable.TableName Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._2_1.vb)]"
  syntax:
    content: public string TableName { get; set; }
    return:
      type: System.String
      description: "Nazwa <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  overload: System.Data.DataTable.TableName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>lub jest pustym ciągiem (&quot;&quot;) jest przekazywany w i tej tabeli należy do kolekcji."
  - type: System.Data.DuplicateNameException
    commentId: T:System.Data.DuplicateNameException
    description: "Tabela należy do kolekcji, która już istnieje tabela o takiej samej nazwie. (Porównanie jest rozróżniana wielkość liter)."
  platform:
  - net462
- uid: System.Data.DataTable.TableNewRow
  id: TableNewRow
  parent: System.Data.DataTable
  langs:
  - csharp
  name: TableNewRow
  nameWithType: DataTable.TableNewRow
  fullName: System.Data.DataTable.TableNewRow
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Występuje, gdy nowy <xref href=&quot;System.Data.DataRow&quot;> </xref> dodaje się."
  remarks: "Uruchamiany po nowe <xref:System.Data.DataRow>został utworzony przy użyciu <xref:System.Data.DataTable.NewRow%2A>.</xref:System.Data.DataTable.NewRow%2A> </xref:System.Data.DataRow> To zdarzenie jest wywoływane przed wywołanej `NewRow` zwraca metody. Nowe <xref:System.Data.DataRow>Odłączono wystąpienia; nie został dodany do kolekcji.</xref:System.Data.DataRow>"
  syntax:
    content: public event System.Data.DataTableNewRowEventHandler TableNewRow;
    return:
      type: System.Data.DataTableNewRowEventHandler
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ToString
  id: ToString
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ToString()
  nameWithType: DataTable.ToString()
  fullName: System.Data.DataTable.ToString()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Pobiera <> </> *> i <> </> *>, jeśli są określone jako połączony ciąg."
  remarks: "Pobiera <xref:System.Data.DataTable.TableName%2A>i <xref:System.Data.DataTable.DisplayExpression%2A>dla <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.DisplayExpression%2A> </xref:System.Data.DataTable.TableName%2A>"
  example:
  - "The following example returns the <xref:System.Data.DataTable.TableName%2A> and <xref:System.Data.DataTable.DisplayExpression%2A> using the ToString method.  \n  \n [!code-cs[Classic WebData DataTable.ToString Example#1](~/add/codesnippet/csharp/m-system.data.datatable._28_1.cs)]\n [!code-vb[Classic WebData DataTable.ToString Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._28_1.vb)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "Ciąg zawierający <> </> *> i <> </> *> wartości."
  overload: System.Data.DataTable.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.Stream)
  id: WriteXml(System.IO.Stream)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(Stream)
  nameWithType: DataTable.WriteXml(Stream)
  fullName: System.Data.DataTable.WriteXml(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżącą zawartość <xref href=&quot;System.Data.DataTable&quot;> </xref> jako XML przy użyciu określonego <xref:System.IO.Stream>.</xref:System.IO.Stream>"
  remarks: "<xref:System.Data.DataTable.WriteXml%2A>Metoda zapewnia sposób można zapisać tylko dane lub zarówno danych i schemat z <xref:System.Data.DataTable>do dokumentu XML, podczas gdy <xref:System.Data.DataTable.WriteXmlSchema%2A>Metoda zapisuje tylko schemat.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Aby napisać zarówno danych, jak i schematu, użyj jednego z przeciążeń, które obejmuje <xref:System.Data.XmlWriteMode>parametru i ustaw dla niego wartość `WriteSchema`.</xref:System.Data.XmlWriteMode>       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataTable.ReadXml%2A>i <xref:System.Data.DataTable.ReadXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Mają być odczytywane dane XML lub schemat i dane do `DataTable`, użyj `ReadXml` metody. Aby odczytać tylko schemat, należy użyć `ReadXmlSchema` metody.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Strumień, z którym będą zapisywane dane."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter)
  id: WriteXml(System.IO.TextWriter)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(TextWriter)
  nameWithType: DataTable.WriteXml(TextWriter)
  fullName: System.Data.DataTable.WriteXml(TextWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżącą zawartość <xref href=&quot;System.Data.DataTable&quot;> </xref> jako XML przy użyciu określonego <xref:System.IO.TextWriter>.</xref:System.IO.TextWriter>"
  remarks: "<xref:System.Data.DataTable.WriteXml%2A>Metoda zapewnia sposób można zapisać tylko dane lub zarówno danych i schemat z <xref:System.Data.DataTable>do dokumentu XML, podczas gdy <xref:System.Data.DataTable.WriteXmlSchema%2A>Metoda zapisuje tylko schemat.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Aby napisać zarówno danych, jak i schematu, użyj jednego z przeciążeń, które obejmuje <xref:System.Data.XmlWriteMode>parametru i ustaw dla niego wartość `WriteSchema`.</xref:System.Data.XmlWriteMode>       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataTable.ReadXml%2A>i <xref:System.Data.DataTable.ReadXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Mają być odczytywane dane XML lub schemat i dane do `DataTable`, użyj `ReadXml` metody. Aby odczytać tylko schemat, należy użyć `ReadXmlSchema` metody.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.IO.TextWriter writer);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "<xref:System.IO.TextWriter>z którym można zapisać zawartości.</xref:System.IO.TextWriter>"
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.String)
  id: WriteXml(System.String)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(String)
  nameWithType: DataTable.WriteXml(String)
  fullName: System.Data.DataTable.WriteXml(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżącą zawartość <xref href=&quot;System.Data.DataTable&quot;> </xref> jako XML przy użyciu określonego pliku."
  remarks: "<xref:System.Data.DataTable.WriteXml%2A>Metoda zapewnia sposób można zapisać tylko dane lub zarówno danych i schemat z <xref:System.Data.DataTable>do dokumentu XML, podczas gdy <xref:System.Data.DataTable.WriteXmlSchema%2A>Metoda zapisuje tylko schemat.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Aby napisać zarówno danych, jak i schematu, użyj jednego z przeciążeń, które obejmuje <xref:System.Data.XmlWriteMode>parametru i ustaw dla niego wartość `WriteSchema`.</xref:System.Data.XmlWriteMode>       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataTable.ReadXml%2A>i <xref:System.Data.DataTable.ReadXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Mają być odczytywane dane XML lub schemat i dane do `DataTable`, użyj `ReadXml` metody. Aby odczytać tylko schemat, należy użyć `ReadXmlSchema` metody.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "Plik, do którego można zapisać danych XML."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter)
  id: WriteXml(System.Xml.XmlWriter)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(XmlWriter)
  nameWithType: DataTable.WriteXml(XmlWriter)
  fullName: System.Data.DataTable.WriteXml(XmlWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżącą zawartość <xref href=&quot;System.Data.DataTable&quot;> </xref> jako XML przy użyciu określonego <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  remarks: "<xref:System.Data.DataTable.WriteXml%2A>Metoda zapewnia sposób można zapisać tylko dane lub zarówno danych i schemat z <xref:System.Data.DataTable>do dokumentu XML, podczas gdy <xref:System.Data.DataTable.WriteXmlSchema%2A>Metoda zapisuje tylko schemat.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Aby napisać zarówno danych, jak i schematu, użyj jednego z przeciążeń, które obejmują <xref:System.Data.XmlWriteMode>parametru i ustaw dla niego wartość `WriteSchema`.</xref:System.Data.XmlWriteMode>       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataTable.ReadXml%2A>i <xref:System.Data.DataTable.ReadXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Mają być odczytywane dane XML lub schemat i dane do `DataTable`, użyj `ReadXml` metody. Aby odczytać tylko schemat, należy użyć `ReadXmlSchema` metody.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>Umożliwiające zapisanie zawartości.</xref:System.Xml.XmlWriter>"
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)
  id: WriteXml(System.IO.Stream,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(Stream,Boolean)
  nameWithType: DataTable.WriteXml(Stream,Boolean)
  fullName: System.Data.DataTable.WriteXml(Stream,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżącą zawartość <xref href=&quot;System.Data.DataTable&quot;> </xref> jako XML przy użyciu określonego <xref:System.IO.Stream>.</xref:System.IO.Stream> Aby zapisać dane dla tabeli i wszystkich jego elementów podrzędnych, ustawić <code> writeHierarchy </code> parametr <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Użyj <xref:System.Data.DataTable.WriteXmlSchema%2A>metodę, aby zapisać schematu <xref:System.Data.DataTable>do dokumentu XML.</xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXmlSchema%2A> Schemat zawiera definicji tabeli, relacji i ograniczenia.       Schemat XML jest zapisywany przy użyciu standardu XSD.       Aby zapisać dane dokumentu XML, użyj <xref:System.Data.DataTable.WriteXml%2A>metody.</xref:System.Data.DataTable.WriteXml%2A>       Zwykle `WriteXml` metody zapisuje dane tylko dla bieżącej tabeli. Można zapisać danych w bieżącej tabeli i wszystkich jego obiektu podrzędnego powiązane tabele, wywołaj metodę z `writeHierarchy` ustawiono parametr `true`.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.IO.Stream stream, bool writeHierarchy);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Strumień, z którym będą zapisywane dane."
    - id: writeHierarchy
      type: System.Boolean
      description: "Jeśli <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, zapisywanie zawartości w bieżącej tabeli i wszystkich jego elementów podrzędnych. Jeśli <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (wartość domyślna), zapis danych dla bieżącej tabeli."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  id: WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(Stream,XmlWriteMode)
  nameWithType: DataTable.WriteXml(Stream,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(Stream,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżące dane i opcjonalnie schematu dla <xref href=&quot;System.Data.DataTable&quot;> </xref> do określonego pliku przy użyciu określonego <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>. Aby napisać schemat, należy ustawić wartość <code> mode </code> parametr <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>."
  remarks: "<xref:System.Data.DataTable.WriteXml%2A>Metoda zapewnia sposób można zapisać tylko dane lub zarówno danych i schemat z <xref:System.Data.DataTable>do dokumentu XML, podczas gdy <xref:System.Data.DataTable.WriteXmlSchema%2A>Metoda zapisuje tylko schemat.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Aby napisać zarówno danych, jak i schematu, użyj jednego z przeciążeń, które obejmuje <xref:System.Data.XmlWriteMode>parametru i ustaw dla niego wartość `WriteSchema`.</xref:System.Data.XmlWriteMode>       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataTable.ReadXml%2A>i <xref:System.Data.DataTable.ReadXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Mają być odczytywane dane XML lub schemat i dane do `DataTable`, użyj `ReadXml` metody. Aby odczytać tylko schemat, należy użyć `ReadXmlSchema` metody.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Strumień, z którym będą zapisywane dane."
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Jeden z <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> wartości."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)
  id: WriteXml(System.IO.TextWriter,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(TextWriter,Boolean)
  nameWithType: DataTable.WriteXml(TextWriter,Boolean)
  fullName: System.Data.DataTable.WriteXml(TextWriter,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżącą zawartość <xref href=&quot;System.Data.DataTable&quot;> </xref> jako XML przy użyciu określonego <xref:System.IO.TextWriter>.</xref:System.IO.TextWriter> Aby zapisać dane dla tabeli i wszystkich jego elementów podrzędnych, ustawić <code> writeHierarchy </code> parametr <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "<xref:System.Data.DataTable.WriteXml%2A>Metoda zapewnia sposób można zapisać tylko dane lub zarówno danych i schemat z <xref:System.Data.DataTable>do dokumentu XML, podczas gdy <xref:System.Data.DataTable.WriteXmlSchema%2A>Metoda zapisuje tylko schemat.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Aby napisać zarówno danych, jak i schematu, użyj jednego z przeciążeń, które obejmuje <xref:System.Data.XmlWriteMode>parametru i ustaw dla niego wartość `WriteSchema`.</xref:System.Data.XmlWriteMode>       Zwykle `WriteXml` metody zapisuje dane tylko dla bieżącej tabeli. Można zapisać danych do bieżącej tabeli i wszystkich jego elementów podrzędnych, powiązane tabele, wywołaj metodę z `writeHierarchy` ustawiono parametr `true`.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  example:
  - "The following console application creates two <xref:System.Data.DataTable> instances, adds each to a <xref:System.Data.DataSet>, creates a <xref:System.Data.DataRelation> relating the two tables, and then uses the WriteXml method to write the data contained within the parent table to a <xref:System.IO.TextWriter>. The example demonstrates the behavior when setting the `writeHierarchy` parameter to `true`.  \n  \n [!code-cs[DataWorks DataTable.WriteXml#1](~/add/codesnippet/csharp/m-system.data.datatable._1_1.cs)]\n [!code-vb[DataWorks DataTable.WriteXml#1](~/add/codesnippet/visualbasic/m-system.data.datatable._1_1.vb)]"
  syntax:
    content: public void WriteXml (System.IO.TextWriter writer, bool writeHierarchy);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "<xref:System.IO.TextWriter>z którym można zapisać zawartości.</xref:System.IO.TextWriter>"
    - id: writeHierarchy
      type: System.Boolean
      description: "Jeśli <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, zapisywanie zawartości w bieżącej tabeli i wszystkich jego elementów podrzędnych. Jeśli <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (wartość domyślna), zapis danych dla bieżącej tabeli."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  id: WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(TextWriter,XmlWriteMode)
  nameWithType: DataTable.WriteXml(TextWriter,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(TextWriter,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżące dane i opcjonalnie schematu dla <xref href=&quot;System.Data.DataTable&quot;> </xref> przy użyciu określonego <xref:System.IO.TextWriter>i <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>.</xref:System.IO.TextWriter> Aby napisać schemat, należy ustawić wartość <code> mode </code> parametr <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>."
  remarks: "<xref:System.Data.DataTable.WriteXml%2A>Metoda zapewnia sposób można zapisać tylko dane lub zarówno danych i schemat z <xref:System.Data.DataTable>do dokumentu XML, podczas gdy <xref:System.Data.DataTable.WriteXmlSchema%2A>Metoda zapisuje tylko schemat.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Aby napisać zarówno danych, jak i schematu, użyj jednego z przeciążeń, które obejmuje <xref:System.Data.XmlWriteMode>parametru i ustaw dla niego wartość `WriteSchema`.</xref:System.Data.XmlWriteMode>       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataTable.ReadXml%2A>i <xref:System.Data.DataTable.ReadXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Mają być odczytywane dane XML lub schemat i dane do `DataTable`, użyj `ReadXml` metody. Aby odczytać tylko schemat, należy użyć `ReadXmlSchema` metody.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "<xref:System.IO.TextWriter>Używany do zapisywania dokumentu.</xref:System.IO.TextWriter>"
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Jeden z <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> wartości."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.String,System.Boolean)
  id: WriteXml(System.String,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(String,Boolean)
  nameWithType: DataTable.WriteXml(String,Boolean)
  fullName: System.Data.DataTable.WriteXml(String,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżącą zawartość <xref href=&quot;System.Data.DataTable&quot;> </xref> jako XML przy użyciu określonego pliku. Aby zapisać dane dla tabeli i wszystkich jego elementów podrzędnych, ustawić <code> writeHierarchy </code> parametr <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "<xref:System.Data.DataTable.WriteXml%2A>Metoda zapewnia sposób można zapisać tylko dane lub zarówno danych i schemat z <xref:System.Data.DataTable>do dokumentu XML, podczas gdy <xref:System.Data.DataTable.WriteXmlSchema%2A>Metoda zapisuje tylko schemat.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Aby napisać zarówno danych, jak i schematu, użyj jednego z przeciążeń, które obejmuje <xref:System.Data.XmlWriteMode>parametru i ustaw dla niego wartość `WriteSchema`.</xref:System.Data.XmlWriteMode>       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataTable.ReadXml%2A>i <xref:System.Data.DataTable.ReadXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Mają być odczytywane dane XML lub schemat i dane do `DataTable`, użyj `ReadXml` metody. Aby odczytać tylko schemat, należy użyć `ReadXmlSchema` metody.       Zwykle `WriteXml` metody zapisuje dane tylko dla bieżącej tabeli. Można zapisać danych w bieżącej tabeli i wszystkich jego obiektu podrzędnego powiązane tabele, wywołaj metodę z `writeHierarchy` ustawiono parametr `true`.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (string fileName, bool writeHierarchy);
    parameters:
    - id: fileName
      type: System.String
      description: "Plik, do którego można zapisać danych XML."
    - id: writeHierarchy
      type: System.Boolean
      description: "Jeśli <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, zapisywanie zawartości w bieżącej tabeli i wszystkich jego elementów podrzędnych. Jeśli <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (wartość domyślna), zapis danych dla bieżącej tabeli."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)
  id: WriteXml(System.String,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(String,XmlWriteMode)
  nameWithType: DataTable.WriteXml(String,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(String,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżące dane i opcjonalnie schematu dla <xref href=&quot;System.Data.DataTable&quot;> </xref> przy użyciu określonego pliku i <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>. Aby napisać schemat, należy ustawić wartość <code> mode </code> parametr <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>."
  remarks: "<xref:System.Data.DataTable.WriteXml%2A>Metoda zapewnia sposób można zapisać tylko dane lub zarówno danych i schemat z <xref:System.Data.DataTable>do dokumentu XML, podczas gdy <xref:System.Data.DataTable.WriteXmlSchema%2A>Metoda zapisuje tylko schemat.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Aby napisać zarówno danych, jak i schematu, użyj jednego z przeciążeń, które obejmują <xref:System.Data.XmlWriteMode>parametru i ustaw dla niego wartość `WriteSchema`.</xref:System.Data.XmlWriteMode>       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataTable.ReadXml%2A>i <xref:System.Data.DataTable.ReadXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Mają być odczytywane dane XML lub schemat i dane do `DataTable`, użyj `ReadXml` metody. Aby odczytać tylko schemat, należy użyć `ReadXmlSchema` metody.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (string fileName, System.Data.XmlWriteMode mode);
    parameters:
    - id: fileName
      type: System.String
      description: "Nazwa pliku, do którego zostaną zapisane dane."
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Jeden z <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> wartości."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)
  id: WriteXml(System.Xml.XmlWriter,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(XmlWriter,Boolean)
  nameWithType: DataTable.WriteXml(XmlWriter,Boolean)
  fullName: System.Data.DataTable.WriteXml(XmlWriter,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżącą zawartość <xref href=&quot;System.Data.DataTable&quot;> </xref> jako XML przy użyciu określonego <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  remarks: "<xref:System.Data.DataTable.WriteXml%2A>Metoda zapewnia sposób można zapisać tylko dane lub zarówno danych i schemat z <xref:System.Data.DataTable>do dokumentu XML, podczas gdy <xref:System.Data.DataTable.WriteXmlSchema%2A>Metoda zapisuje tylko schemat.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Aby napisać zarówno danych, jak i schematu, użyj jednego z przeciążeń, które obejmują <xref:System.Data.XmlWriteMode>parametru i ustaw dla niego wartość `WriteSchema`.</xref:System.Data.XmlWriteMode>       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataTable.ReadXml%2A>i <xref:System.Data.DataTable.ReadXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Mają być odczytywane dane XML lub schemat i dane do `DataTable`, użyj `ReadXml` metody. Aby odczytać tylko schemat, należy użyć `ReadXmlSchema` metody.       Zwykle `WriteXml` metody zapisuje dane tylko dla bieżącej tabeli. Można zapisać danych do bieżącej tabeli i jego całą podrzędne, powiązane tabele, wywołaj metodę z `writeHierarchy` ustawiono parametr `true`.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.Xml.XmlWriter writer, bool writeHierarchy);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>Umożliwiające zapisanie zawartości.</xref:System.Xml.XmlWriter>"
    - id: writeHierarchy
      type: System.Boolean
      description: "Jeśli <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, zapisywanie zawartości w bieżącej tabeli i wszystkich jego elementów podrzędnych. Jeśli <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (wartość domyślna), zapis danych dla bieżącej tabeli."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  id: WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(XmlWriter,XmlWriteMode)
  nameWithType: DataTable.WriteXml(XmlWriter,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(XmlWriter,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżące dane i opcjonalnie schematu dla <xref href=&quot;System.Data.DataTable&quot;> </xref> przy użyciu określonego <xref:System.Xml.XmlWriter>i <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>.</xref:System.Xml.XmlWriter> Aby napisać schemat, należy ustawić wartość <code> mode </code> parametr <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>."
  remarks: "<xref:System.Data.DataTable.WriteXml%2A>Metoda zapewnia sposób można zapisać tylko dane lub zarówno danych i schemat z <xref:System.Data.DataTable>do dokumentu XML, podczas gdy <xref:System.Data.DataTable.WriteXmlSchema%2A>Metoda zapisuje tylko schemat.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Aby napisać zarówno danych, jak i schematu, użyj jednego z przeciążeń, które obejmują <xref:System.Data.XmlWriteMode>parametru i ustaw dla niego wartość `WriteSchema`.</xref:System.Data.XmlWriteMode>       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataTable.ReadXml%2A>i <xref:System.Data.DataTable.ReadXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Mają być odczytywane dane XML lub schemat i dane do `DataTable`, użyj `ReadXml` metody. Aby odczytać tylko schemat, należy użyć `ReadXmlSchema` metody.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>Używany do zapisywania dokumentu.</xref:System.Xml.XmlWriter>"
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Jeden z <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> wartości."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)
  id: WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(Stream,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(Stream,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(Stream,XmlWriteMode,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżące dane i opcjonalnie schematu dla <xref href=&quot;System.Data.DataTable&quot;> </xref> do określonego pliku przy użyciu określonego <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>. Aby napisać schemat, należy ustawić wartość <code> mode </code> parametr <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>. Aby zapisać dane dla tabeli i wszystkich jego elementów podrzędnych, ustawić <code> writeHierarchy </code> parametr <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "<xref:System.Data.DataTable.WriteXml%2A>Metoda zapewnia sposób można zapisać tylko dane lub zarówno danych i schemat z `DataTable` do dokumentu XML, podczas gdy <xref:System.Data.DataTable.WriteXmlSchema%2A>Metoda zapisuje tylko schemat.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable.WriteXml%2A> Aby napisać zarówno danych, jak i schematu, użyj jednego z przeciążeń, które obejmuje `XmlWriteMode` parametru i ustaw dla niego wartość `WriteSchema`.       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataTable.ReadXml%2A>i <xref:System.Data.DataTable.ReadXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Mają być odczytywane dane XML lub schemat i dane do `DataTable`, użyj `ReadXml` metody. Aby odczytać tylko schemat, należy użyć `ReadXmlSchema` metody.       Zwykle `WriteXml` metoda zapisuje dane tylko dla bieżącej tabeli. `WriteXml` Metoda zapewnia sposób można zapisać tylko dane lub zarówno danych i schemat z `DataTable` do dokumentu XML, podczas gdy `WriteXmlSchema` metoda zapisuje tylko schemat. Aby napisać zarówno danych, jak i schematu, użyj jednego z przeciążeń, które obejmuje `XmlWriteMode` parametru i ustaw dla niego wartość `WriteSchema`.       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataTable.ReadXml%2A>i <xref:System.Data.DataTable.ReadXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Mają być odczytywane dane XML lub schemat i dane do `DataTable`, użyj `ReadXml` metody. Aby odczytać tylko schemat, należy użyć `ReadXmlSchema` metody.       Zwykle `WriteXml` metody zapisuje dane tylko dla bieżącej tabeli. Można zapisać danych w bieżącej tabeli i wszystkich jego obiektu podrzędnego powiązane tabele, wywołaj metodę z `writeHierarchy` ustawiono parametr `true`.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode, bool writeHierarchy);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Strumień, z którym będą zapisywane dane."
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Jeden z <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> wartości."
    - id: writeHierarchy
      type: System.Boolean
      description: "Jeśli <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, zapisywanie zawartości w bieżącej tabeli i wszystkich jego elementów podrzędnych. Jeśli <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (wartość domyślna), zapis danych dla bieżącej tabeli."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)
  id: WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(TextWriter,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(TextWriter,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(TextWriter,XmlWriteMode,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżące dane i opcjonalnie schematu dla <xref href=&quot;System.Data.DataTable&quot;> </xref> przy użyciu określonego <xref:System.IO.TextWriter>i <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>.</xref:System.IO.TextWriter> Aby napisać schemat, należy ustawić wartość <code> mode </code> parametr <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>. Aby zapisać dane dla tabeli i wszystkich jego elementów podrzędnych, ustawić <code> writeHierarchy </code> parametr <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "<xref:System.Data.DataTable.WriteXml%2A>Metoda zapewnia sposób można zapisać tylko dane lub zarówno danych i schemat z <xref:System.Data.DataTable>do dokumentu XML, podczas gdy <xref:System.Data.DataTable.WriteXmlSchema%2A>Metoda zapisuje tylko schemat.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Aby napisać zarówno danych, jak i schematu, użyj jednego z przeciążeń, które obejmuje <xref:System.Data.XmlWriteMode>parametru i ustaw dla niego wartość `WriteSchema`.</xref:System.Data.XmlWriteMode>       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataTable.ReadXml%2A>i <xref:System.Data.DataTable.ReadXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Mają być odczytywane dane XML lub schemat i dane do `DataTable`, użyj `ReadXml` metody. Aby odczytać tylko schemat, należy użyć `ReadXmlSchema` metody.       Zwykle `WriteXml` metoda zapisuje dane tylko dla bieżącej tabeli. <xref:System.Data.DataTable.WriteXml%2A>Metoda zapewnia sposób można zapisać tylko dane lub zarówno danych i schemat z <xref:System.Data.DataTable>do dokumentu XML, podczas gdy <xref:System.Data.DataTable.WriteXmlSchema%2A>Metoda zapisuje tylko schemat.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Aby napisać zarówno danych, jak i schematu, użyj jednego z przeciążeń, które obejmuje <xref:System.Data.XmlWriteMode>parametru i ustaw dla niego wartość `WriteSchema`.</xref:System.Data.XmlWriteMode>       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataTable.ReadXml%2A>i <xref:System.Data.DataTable.ReadXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Mają być odczytywane dane XML lub schemat i dane do `DataTable`, użyj `ReadXml` metody. Aby odczytać tylko schemat, należy użyć `ReadXmlSchema` metody.       Zwykle `WriteXml` metody zapisuje dane tylko dla bieżącej tabeli. Można zapisać danych w bieżącej tabeli i wszystkich jego obiektu podrzędnego powiązane tabele, wywołaj metodę z `writeHierarchy` ustawiono parametr `true`.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  example:
  - "The following console application creates two <xref:System.Data.DataTable> instances, adds each to a <xref:System.Data.DataSet>, creates a <xref:System.Data.DataRelation> relating the two tables, and then uses the WriteXml method to write the data contained within the parent table to a <xref:System.IO.TextWriter>. The example demonstrates the behavior when setting the `writeHierarchy` parameter to each of its values.  \n  \n [!code-cs[DataWorks DataTable.WriteXmlIO#1](~/add/codesnippet/csharp/a21e26c1-61d0-4d79-88a3-_1.cs)]\n [!code-vb[DataWorks DataTable.WriteXmlIO#1](~/add/codesnippet/visualbasic/a21e26c1-61d0-4d79-88a3-_1.vb)]  \n  \n The example displays the following output in the console window:  \n  \n```  \n==============================  \nCustomer table, without hierarchy  \n==============================  \n<NewDataSet>  \n  <xs:schema id=\"NewDataSet\" xmlns=\"\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema  \n\" xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">  \n    <xs:element name=\"NewDataSet\" msdata:IsDataSet=\"true\" msdata:MainDataTable=\"Table1\">  \n      <xs:complexType>  \n        <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">  \n          <xs:element name=\"Table1\">  \n            <xs:complexType>  \n              <xs:sequence>  \n                <xs:element name=\"ID\" type=\"xs:int\" />  \n                <xs:element name=\"Name\" type=\"xs:string\" minOccurs=\"0\" />  \n              </xs:sequence>  \n            </xs:complexType>  \n          </xs:element>  \n        </xs:choice>  \n      </xs:complexType>  \n      <xs:unique name=\"Constraint1\" msdata:PrimaryKey=\"true\">  \n        <xs:selector xpath=\".//Table1\" />  \n        <xs:field xpath=\"ID\" />  \n      </xs:unique>  \n    </xs:element>  \n  </xs:schema>  \n  <Table1>  \n    <ID>1</ID>  \n    <Name>Mary</Name>  \n  </Table1>  \n  <Table1>  \n    <ID>2</ID>  \n    <Name>Andy</Name>  \n  </Table1>  \n  <Table1>  \n    <ID>3</ID>  \n    <Name>Peter</Name>  \n  </Table1>  \n  <Table1>  \n    <ID>4</ID>  \n    <Name>Russ</Name>  \n  </Table1>  \n</NewDataSet>  \n==============================  \nCustomer table, with hierarchy  \n==============================  \n<NewDataSet>  \n  <xs:schema id=\"NewDataSet\" xmlns=\"\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema  \n\" xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">  \n    <xs:element name=\"NewDataSet\" msdata:IsDataSet=\"true\" msdata:MainDataTable=\"Table1\">  \n      <xs:complexType>  \n        <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">  \n          <xs:element name=\"Table1\">  \n            <xs:complexType>  \n              <xs:sequence>  \n                <xs:element name=\"ID\" type=\"xs:int\" />  \n                <xs:element name=\"Name\" type=\"xs:string\" minOccurs=\"0\" />  \n              </xs:sequence>  \n            </xs:complexType>  \n          </xs:element>  \n          <xs:element name=\"Table2\">  \n            <xs:complexType>  \n              <xs:sequence>  \n                <xs:element name=\"OrderID\" type=\"xs:int\" />  \n                <xs:element name=\"CustomerID\" type=\"xs:int\" minOccurs=\"0\" />  \n                <xs:element name=\"OrderDate\" type=\"xs:dateTime\" minOccurs=\"0\" />  \n  \n              </xs:sequence>  \n            </xs:complexType>  \n          </xs:element>  \n        </xs:choice>  \n      </xs:complexType>  \n      <xs:unique name=\"Constraint1\" msdata:PrimaryKey=\"true\">  \n        <xs:selector xpath=\".//Table1\" />  \n        <xs:field xpath=\"ID\" />  \n      </xs:unique>  \n      <xs:unique name=\"Table2_Constraint1\" msdata:ConstraintName=\"Constraint1\" m  \nsdata:PrimaryKey=\"true\">  \n        <xs:selector xpath=\".//Table2\" />  \n        <xs:field xpath=\"OrderID\" />  \n      </xs:unique>  \n      <xs:keyref name=\"CustomerOrder\" refer=\"Constraint1\">  \n        <xs:selector xpath=\".//Table2\" />  \n        <xs:field xpath=\"CustomerID\" />  \n      </xs:keyref>  \n    </xs:element>  \n  </xs:schema>  \n  <Table1>  \n    <ID>1</ID>  \n    <Name>Mary</Name>  \n  </Table1>  \n  <Table1>  \n    <ID>2</ID>  \n    <Name>Andy</Name>  \n  </Table1>  \n  <Table1>  \n    <ID>3</ID>  \n    <Name>Peter</Name>  \n  </Table1>  \n  <Table1>  \n    <ID>4</ID>  \n    <Name>Russ</Name>  \n  </Table1>  \n  <Table2>  \n    <OrderID>1</OrderID>  \n    <CustomerID>1</CustomerID>  \n    <OrderDate>2003-12-02T00:00:00.0000000-08:00</OrderDate>  \n  </Table2>  \n  <Table2>  \n    <OrderID>2</OrderID>  \n    <CustomerID>1</CustomerID>  \n    <OrderDate>2004-01-03T00:00:00.0000000-08:00</OrderDate>  \n  </Table2>  \n  <Table2>  \n    <OrderID>3</OrderID>  \n    <CustomerID>2</CustomerID>  \n    <OrderDate>2004-11-13T00:00:00.0000000-08:00</OrderDate>  \n  </Table2>  \n  <Table2>  \n    <OrderID>4</OrderID>  \n    <CustomerID>3</CustomerID>  \n    <OrderDate>2004-05-16T00:00:00.0000000-07:00</OrderDate>  \n  </Table2>  \n  <Table2>  \n    <OrderID>5</OrderID>  \n    <CustomerID>3</CustomerID>  \n    <OrderDate>2004-05-22T00:00:00.0000000-07:00</OrderDate>  \n  </Table2>  \n  <Table2>  \n    <OrderID>6</OrderID>  \n    <CustomerID>4</CustomerID>  \n    <OrderDate>2004-06-15T00:00:00.0000000-07:00</OrderDate>  \n  </Table2>  \n</NewDataSet>  \n```"
  syntax:
    content: public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode, bool writeHierarchy);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "<xref:System.IO.TextWriter>Używany do zapisywania dokumentu.</xref:System.IO.TextWriter>"
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Jeden z <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> wartości."
    - id: writeHierarchy
      type: System.Boolean
      description: "Jeśli <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, zapisywanie zawartości w bieżącej tabeli i wszystkich jego elementów podrzędnych. Jeśli <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (wartość domyślna), zapis danych dla bieżącej tabeli."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)
  id: WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(String,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(String,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(String,XmlWriteMode,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżące dane i opcjonalnie schematu dla <xref href=&quot;System.Data.DataTable&quot;> </xref> przy użyciu określonego pliku i <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>. Aby napisać schemat, należy ustawić wartość <code> mode </code> parametr <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>. Aby zapisać dane dla tabeli i wszystkich jego elementów podrzędnych, ustawić <code> writeHierarchy </code> parametr <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "<xref:System.Data.DataTable.WriteXml%2A>Metoda zapewnia sposób można zapisać tylko dane lub zarówno danych i schemat z <xref:System.Data.DataTable>do dokumentu XML, podczas gdy <xref:System.Data.DataTable.WriteXmlSchema%2A>Metoda zapisuje tylko schemat.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Aby napisać zarówno danych, jak i schematu, użyj jednego z przeciążeń, które obejmują <xref:System.Data.XmlWriteMode>parametru i ustaw dla niego wartość `WriteSchema`.</xref:System.Data.XmlWriteMode>       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataTable.ReadXml%2A>i <xref:System.Data.DataTable.ReadXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Mają być odczytywane dane XML lub schemat i dane do `DataTable`, użyj `ReadXml` metody. Aby odczytać tylko schemat, należy użyć `ReadXmlSchema` metody.       Zwykle `WriteXml` metoda zapisuje dane tylko dla bieżącej tabeli. Jeśli chcesz zapisać dane w bieżącej tabeli i wszystkich schematu, <xref:System.Data.DataTable.WriteXml%2A>metoda zapewnia sposób można zapisać tylko dane lub zarówno danych i schemat z <xref:System.Data.DataTable>w dokumencie XML natomiast <xref:System.Data.DataTable.WriteXmlSchema%2A>Metoda zapisuje tylko schemat.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Aby napisać zarówno danych, jak i schematu, użyj jednego z przeciążeń, które obejmują <xref:System.Data.XmlWriteMode>parametru i ustaw dla niego wartość `WriteSchema`.</xref:System.Data.XmlWriteMode>       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataTable.ReadXml%2A>i <xref:System.Data.DataTable.ReadXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Mają być odczytywane dane XML lub schemat i dane do `DataTable`, użyj `ReadXml` metody. Aby odczytać tylko schemat, należy użyć `ReadXmlSchema` metody.       Zwykle `WriteXml` metody zapisuje dane tylko dla bieżącej tabeli. Można zapisać danych do bieżącej tabeli i wszystkie podrzędne, powiązane tabele, wywołaj metodę z `writeHierarchy` ustawiono parametr `true`.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (string fileName, System.Data.XmlWriteMode mode, bool writeHierarchy);
    parameters:
    - id: fileName
      type: System.String
      description: "Nazwa pliku, do którego zostaną zapisane dane."
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Jeden z <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> wartości."
    - id: writeHierarchy
      type: System.Boolean
      description: "Jeśli <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, zapisywanie zawartości w bieżącej tabeli i wszystkich jego elementów podrzędnych. Jeśli <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (wartość domyślna), zapis danych dla bieżącej tabeli."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)
  id: WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(XmlWriter,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(XmlWriter,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(XmlWriter,XmlWriteMode,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżące dane i opcjonalnie schematu dla <xref href=&quot;System.Data.DataTable&quot;> </xref> przy użyciu określonego <xref:System.Xml.XmlWriter>i <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>.</xref:System.Xml.XmlWriter> Aby napisać schemat, należy ustawić wartość <code> mode </code> parametr <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>. Aby zapisać dane dla tabeli i wszystkich jego elementów podrzędnych, ustawić <code> writeHierarchy </code> parametr <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "<xref:System.Data.DataTable.WriteXml%2A>Metoda zapewnia sposób można zapisać tylko dane lub zarówno danych i schemat z <xref:System.Data.DataTable>do dokumentu XML, podczas gdy <xref:System.Data.DataTable.WriteXmlSchema%2A>Metoda zapisuje tylko schemat.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Aby napisać zarówno danych, jak i schematu, użyj jednego z przeciążeń, które obejmują <xref:System.Data.XmlWriteMode>parametru i ustaw dla niego wartość `WriteSchema`.</xref:System.Data.XmlWriteMode>       Należy pamiętać, że to samo dotyczy dla <xref:System.Data.DataTable.ReadXml%2A>i <xref:System.Data.DataTable.ReadXmlSchema%2A>metod, odpowiednio.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Mają być odczytywane dane XML lub schemat i dane do `DataTable`, użyj `ReadXml` metody. Aby odczytać tylko schemat, należy użyć `ReadXmlSchema` metody.       Zwykle `WriteXml` metody zapisuje dane tylko dla bieżącej tabeli. Można zapisać danych do bieżącej tabeli i jego całą podrzędne, powiązane tabele, wywołaj metodę z `writeHierarchy` ustawiono parametr `true`.      > [!NOTE] > <xref:System.InvalidOperationException>Zostanie wygenerowany, jeśli typ kolumny w `DataRow` trwa zapisu lub odczytu z implements <xref:System.Dynamic.IDynamicMetaObjectProvider>i nie implementuje <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode, bool writeHierarchy);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>Używany do zapisywania dokumentu.</xref:System.Xml.XmlWriter>"
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Jeden z <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> wartości."
    - id: writeHierarchy
      type: System.Boolean
      description: "Jeśli <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, zapisywanie zawartości w bieżącej tabeli i wszystkich jego elementów podrzędnych. Jeśli <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (wartość domyślna), zapis danych dla bieżącej tabeli."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.Stream)
  id: WriteXmlSchema(System.IO.Stream)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(Stream)
  nameWithType: DataTable.WriteXmlSchema(Stream)
  fullName: System.Data.DataTable.WriteXmlSchema(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżący struktury danych <xref href=&quot;System.Data.DataTable&quot;> </xref> jako schematu XML do określonego strumienia."
  remarks: "Użyj <xref:System.Data.DataTable.WriteXmlSchema%2A>metodę, aby zapisać schematu <xref:System.Data.DataTable>do dokumentu XML.</xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXmlSchema%2A> Schemat zawiera definicji tabeli, relacji i ograniczenia.       Schemat XML jest zapisywany przy użyciu standardu XSD.       Aby zapisać dane dokumentu XML, użyj <xref:System.Data.DataTable.WriteXml%2A>metody.</xref:System.Data.DataTable.WriteXml%2A>"
  syntax:
    content: public void WriteXmlSchema (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Strumień, do której zostanie zapisany schemat XML."
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)
  id: WriteXmlSchema(System.IO.TextWriter)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(TextWriter)
  nameWithType: DataTable.WriteXmlSchema(TextWriter)
  fullName: System.Data.DataTable.WriteXmlSchema(TextWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżący struktury danych <xref href=&quot;System.Data.DataTable&quot;> </xref> jako schematu XML przy użyciu określonego <xref:System.IO.TextWriter>.</xref:System.IO.TextWriter>"
  remarks: "Użyj <xref:System.Data.DataTable.WriteXmlSchema%2A>metodę, aby zapisać schematu <xref:System.Data.DataTable>do dokumentu XML.</xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXmlSchema%2A> Schemat zawiera definicji tabeli, relacji i ograniczenia.       Schemat XML jest zapisywany przy użyciu standardu XSD.       Aby zapisać dane dokumentu XML, użyj <xref:System.Data.DataTable.WriteXml%2A>metody.</xref:System.Data.DataTable.WriteXml%2A>"
  syntax:
    content: public void WriteXmlSchema (System.IO.TextWriter writer);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "<xref:System.IO.TextWriter>z jakim zostanie zapisane.</xref:System.IO.TextWriter>"
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.String)
  id: WriteXmlSchema(System.String)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(String)
  nameWithType: DataTable.WriteXmlSchema(String)
  fullName: System.Data.DataTable.WriteXmlSchema(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżący struktury danych <xref href=&quot;System.Data.DataTable&quot;> </xref> jako schematu XML do określonego pliku."
  remarks: "Użyj <xref:System.Data.DataTable.WriteXmlSchema%2A>metodę, aby zapisać schematu <xref:System.Data.DataTable>do dokumentu XML.</xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXmlSchema%2A> Schemat zawiera definicji tabeli, relacji i ograniczenia.       Schemat XML jest zapisywany przy użyciu standardu XSD.       Aby zapisać dane dokumentu XML, użyj <xref:System.Data.DataTable.WriteXml%2A>metody.</xref:System.Data.DataTable.WriteXml%2A>"
  syntax:
    content: public void WriteXmlSchema (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "Nazwa pliku do użycia."
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)
  id: WriteXmlSchema(System.Xml.XmlWriter)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(XmlWriter)
  nameWithType: DataTable.WriteXmlSchema(XmlWriter)
  fullName: System.Data.DataTable.WriteXmlSchema(XmlWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżący struktury danych <xref href=&quot;System.Data.DataTable&quot;> </xref> jako schematu XML przy użyciu określonego <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  remarks: "Użyj <xref:System.Data.DataTable.WriteXmlSchema%2A>metodę, aby zapisać schematu <xref:System.Data.DataTable>do dokumentu XML.</xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXmlSchema%2A> Schemat zawiera definicji tabeli, relacji i ograniczenia.       Schemat XML jest zapisywany przy użyciu standardu XSD.       Aby zapisać dane dokumentu XML, użyj <xref:System.Data.DataTable.WriteXml%2A>metody.</xref:System.Data.DataTable.WriteXml%2A>"
  syntax:
    content: public void WriteXmlSchema (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>Do użycia.</xref:System.Xml.XmlWriter>"
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)
  id: WriteXmlSchema(System.IO.Stream,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(Stream,Boolean)
  nameWithType: DataTable.WriteXmlSchema(Stream,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(Stream,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżący struktury danych <xref href=&quot;System.Data.DataTable&quot;> </xref> jako schematu XML do określonego strumienia. Aby zapisać schematu dla tabeli i wszystkich jego elementów podrzędnych, ustawić <code> writeHierarchy </code> parametr <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Użyj <xref:System.Data.DataTable.WriteXmlSchema%2A>metodę, aby zapisać schematu <xref:System.Data.DataTable>do dokumentu XML.</xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXmlSchema%2A> Schemat zawiera definicji tabeli, relacji i ograniczenia.       Schemat XML jest zapisywany przy użyciu standardu XSD.       Aby zapisać dane dokumentu XML, użyj <xref:System.Data.DataTable.WriteXml%2A>metody.</xref:System.Data.DataTable.WriteXml%2A>       Zwykle `WriteXmlSchema` metoda zapisuje schemat tylko dla bieżącej tabeli. Aby napisać schematu dla bieżącej tabeli i jego całą tabele podrzędne, powiązane, należy wywołać metodę z `writeHierarchy` ustawiono parametr `true`."
  syntax:
    content: public void WriteXmlSchema (System.IO.Stream stream, bool writeHierarchy);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Strumień, do której zostanie zapisany schemat XML."
    - id: writeHierarchy
      type: System.Boolean
      description: "Jeśli <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, zapisać schematu bieżącej tabeli i wszystkich jego elementów podrzędnych. Jeśli <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (wartość domyślna), zapisać schematu dla bieżącej tabeli."
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)
  id: WriteXmlSchema(System.IO.TextWriter,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(TextWriter,Boolean)
  nameWithType: DataTable.WriteXmlSchema(TextWriter,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(TextWriter,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżący struktury danych <xref href=&quot;System.Data.DataTable&quot;> </xref> jako schematu XML przy użyciu określonego <xref:System.IO.TextWriter>.</xref:System.IO.TextWriter> Aby zapisać schematu dla tabeli i wszystkich jego elementów podrzędnych, ustawić <code> writeHierarchy </code> parametr <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Użyj <xref:System.Data.DataTable.WriteXmlSchema%2A>metodę, aby zapisać schematu <xref:System.Data.DataTable>do dokumentu XML.</xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXmlSchema%2A> Schemat zawiera definicji tabeli, relacji i ograniczenia.       Schemat XML jest zapisywany przy użyciu standardu XSD.       Aby zapisać dane dokumentu XML, użyj <xref:System.Data.DataTable.WriteXml%2A>metody.</xref:System.Data.DataTable.WriteXml%2A>       Zwykle `WriteXmlSchema` metoda zapisuje schemat tylko dla bieżącej tabeli. Aby napisać schematu dla bieżącej tabeli i jego całą tabele podrzędne, powiązane, należy wywołać metodę z `writeHierarchy` ustawiono parametr `true`."
  example:
  - "The following console application creates two <xref:System.Data.DataTable> instances, adds each to a <xref:System.Data.DataSet>, creates a <xref:System.Data.DataRelation> relating the two tables, and then uses the WriteXmlSchema method to write the data contained within the parent table to a <xref:System.IO.TextWriter>. The example demonstrates the behavior when setting the `writeHierarchy` parameter to each of its values.  \n  \n [!code-cs[DataWorks DataTable.WriteXmlSchema#1](~/add/codesnippet/csharp/m-system.data.datatable._30_1.cs)]\n [!code-vb[DataWorks DataTable.WriteXmlSchema#1](~/add/codesnippet/visualbasic/m-system.data.datatable._30_1.vb)]  \n  \n The example displays the following output in the console window:  \n  \n```  \n==============================  \nCustomer table, without hierarchy  \n==============================  \n<?xml version=\"1.0\" encoding=\"utf-16\"?>  \n<xs:schema id=\"NewDataSet\" xmlns=\"\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"  \nxmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">  \n  <xs:element name=\"NewDataSet\" msdata:IsDataSet=\"true\" msdata:MainDataTable=\"Ta  \nble1\">  \n    <xs:complexType>  \n      <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">  \n        <xs:element name=\"Table1\">  \n          <xs:complexType>  \n            <xs:sequence>  \n              <xs:element name=\"ID\" type=\"xs:int\" />  \n              <xs:element name=\"Name\" type=\"xs:string\" minOccurs=\"0\" />  \n            </xs:sequence>  \n          </xs:complexType>  \n        </xs:element>  \n      </xs:choice>  \n    </xs:complexType>  \n    <xs:unique name=\"Constraint1\" msdata:PrimaryKey=\"true\">  \n      <xs:selector xpath=\".//Table1\" />  \n      <xs:field xpath=\"ID\" />  \n    </xs:unique>  \n  </xs:element>  \n</xs:schema>  \n==============================  \nCustomer table, with hierarchy  \n==============================  \n<?xml version=\"1.0\" encoding=\"utf-16\"?>  \n<xs:schema id=\"NewDataSet\" xmlns=\"\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"  \nxmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">  \n  <xs:element name=\"NewDataSet\" msdata:IsDataSet=\"true\" msdata:MainDataTable=\"Table1\">  \n    <xs:complexType>  \n      <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">  \n        <xs:element name=\"Table1\">  \n          <xs:complexType>  \n            <xs:sequence>  \n              <xs:element name=\"ID\" type=\"xs:int\" />  \n              <xs:element name=\"Name\" type=\"xs:string\" minOccurs=\"0\" />  \n            </xs:sequence>  \n          </xs:complexType>  \n        </xs:element>  \n        <xs:element name=\"Table2\">  \n          <xs:complexType>  \n            <xs:sequence>  \n              <xs:element name=\"OrderID\" type=\"xs:int\" />  \n              <xs:element name=\"CustomerID\" type=\"xs:int\" minOccurs=\"0\" />  \n              <xs:element name=\"OrderDate\" type=\"xs:dateTime\" minOccurs=\"0\" />  \n            </xs:sequence>  \n          </xs:complexType>  \n        </xs:element>  \n      </xs:choice>  \n    </xs:complexType>  \n    <xs:unique name=\"Constraint1\" msdata:PrimaryKey=\"true\">  \n      <xs:selector xpath=\".//Table1\" />  \n      <xs:field xpath=\"ID\" />  \n    </xs:unique>  \n    <xs:unique name=\"Table2_Constraint1\" msdata:ConstraintName=\"Constraint1\" msdata:PrimaryKey=\"true\">  \n      <xs:selector xpath=\".//Table2\" />  \n      <xs:field xpath=\"OrderID\" />  \n    </xs:unique>  \n    <xs:keyref name=\"CustomerOrder\" refer=\"Constraint1\">  \n      <xs:selector xpath=\".//Table2\" />  \n      <xs:field xpath=\"CustomerID\" />  \n    </xs:keyref>  \n  </xs:element>  \n</xs:schema>  \n```"
  syntax:
    content: public void WriteXmlSchema (System.IO.TextWriter writer, bool writeHierarchy);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "<xref:System.IO.TextWriter>z jakim zostanie zapisane.</xref:System.IO.TextWriter>"
    - id: writeHierarchy
      type: System.Boolean
      description: "Jeśli <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, zapisać schematu bieżącej tabeli i wszystkich jego elementów podrzędnych. Jeśli <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (wartość domyślna), zapisać schematu dla bieżącej tabeli."
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)
  id: WriteXmlSchema(System.String,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(String,Boolean)
  nameWithType: DataTable.WriteXmlSchema(String,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(String,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżący struktury danych <xref href=&quot;System.Data.DataTable&quot;> </xref> jako schematu XML do określonego pliku. Aby zapisać schematu dla tabeli i wszystkich jego elementów podrzędnych, ustawić <code> writeHierarchy </code> parametr <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Użyj <xref:System.Data.DataTable.WriteXmlSchema%2A>metodę, aby zapisać schematu <xref:System.Data.DataTable>do dokumentu XML.</xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXmlSchema%2A> Schemat zawiera definicji tabeli, relacji i ograniczenia.       Schemat XML jest zapisywany przy użyciu standardu XSD.       Aby zapisać dane dokumentu XML, użyj <xref:System.Data.DataTable.WriteXml%2A>metody.</xref:System.Data.DataTable.WriteXml%2A>       Zwykle `WriteXmlSchema` metoda zapisuje schemat tylko dla bieżącej tabeli. Aby napisać schematu dla bieżącej tabeli i jego całą tabele podrzędne, powiązane, należy wywołać metodę z `writeHierarchy` ustawiono parametr `true`."
  syntax:
    content: public void WriteXmlSchema (string fileName, bool writeHierarchy);
    parameters:
    - id: fileName
      type: System.String
      description: "Nazwa pliku do użycia."
    - id: writeHierarchy
      type: System.Boolean
      description: "Jeśli <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, zapisać schematu bieżącej tabeli i wszystkich jego elementów podrzędnych. Jeśli <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (wartość domyślna), zapisać schematu dla bieżącej tabeli."
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)
  id: WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(XmlWriter,Boolean)
  nameWithType: DataTable.WriteXmlSchema(XmlWriter,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(XmlWriter,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Zapisuje bieżący struktury danych <xref href=&quot;System.Data.DataTable&quot;> </xref> jako schematu XML przy użyciu określonego <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter> Aby zapisać schematu dla tabeli i wszystkich jego elementów podrzędnych, ustawić <code> writeHierarchy </code> parametr <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Użyj <xref:System.Data.DataTable.WriteXmlSchema%2A>metodę, aby zapisać schematu <xref:System.Data.DataTable>do dokumentu XML.</xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXmlSchema%2A> Schemat zawiera definicji tabeli, relacji i ograniczenia.       Schemat XML jest zapisywany przy użyciu standardu XSD.       Aby zapisać dane dokumentu XML, użyj <xref:System.Data.DataTable.WriteXml%2A>metody.</xref:System.Data.DataTable.WriteXml%2A>       Zwykle `WriteXmlSchema` metoda zapisuje schemat tylko dla bieżącej tabeli. Aby napisać schematu dla bieżącej tabeli i jego całą tabele podrzędne, powiązane, należy wywołać metodę z `writeHierarchy` ustawiono parametr `true`."
  syntax:
    content: public void WriteXmlSchema (System.Xml.XmlWriter writer, bool writeHierarchy);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>Używany do zapisywania dokumentu.</xref:System.Xml.XmlWriter>"
    - id: writeHierarchy
      type: System.Boolean
      description: "Jeśli <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, zapisać schematu bieżącej tabeli i wszystkich jego elementów podrzędnych. Jeśli <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (wartość domyślna), zapisać schematu dla bieżącej tabeli."
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.MarshalByValueComponent
  isExternal: false
  name: System.ComponentModel.MarshalByValueComponent
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Data.ConstraintException
  parent: System.Data
  isExternal: false
  name: ConstraintException
  nameWithType: ConstraintException
  fullName: System.Data.ConstraintException
- uid: System.Data.NoNullAllowedException
  parent: System.Data
  isExternal: false
  name: NoNullAllowedException
  nameWithType: NoNullAllowedException
  fullName: System.Data.NoNullAllowedException
- uid: System.Data.DataException
  parent: System.Data
  isExternal: false
  name: DataException
  nameWithType: DataException
  fullName: System.Data.DataException
- uid: System.Data.DuplicateNameException
  parent: System.Data
  isExternal: false
  name: DuplicateNameException
  nameWithType: DuplicateNameException
  fullName: System.Data.DuplicateNameException
- uid: System.Data.DataTable.#ctor
  parent: System.Data.DataTable
  isExternal: false
  name: DataTable()
  nameWithType: DataTable.DataTable()
  fullName: System.Data.DataTable.DataTable()
- uid: System.Data.DataTable.#ctor(System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: DataTable(String)
  nameWithType: DataTable.DataTable(String)
  fullName: System.Data.DataTable.DataTable(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.DataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataTable
  isExternal: false
  name: DataTable(SerializationInfo,StreamingContext)
  nameWithType: DataTable.DataTable(SerializationInfo,StreamingContext)
  fullName: System.Data.DataTable.DataTable(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Data.DataTable.#ctor(System.String,System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: DataTable(String,String)
  nameWithType: DataTable.DataTable(String,String)
  fullName: System.Data.DataTable.DataTable(String,String)
- uid: System.Data.DataTable.AcceptChanges
  parent: System.Data.DataTable
  isExternal: false
  name: AcceptChanges()
  nameWithType: DataTable.AcceptChanges()
  fullName: System.Data.DataTable.AcceptChanges()
- uid: System.Data.DataTable.BeginInit
  parent: System.Data.DataTable
  isExternal: false
  name: BeginInit()
  nameWithType: DataTable.BeginInit()
  fullName: System.Data.DataTable.BeginInit()
- uid: System.Data.DataTable.BeginLoadData
  parent: System.Data.DataTable
  isExternal: false
  name: BeginLoadData()
  nameWithType: DataTable.BeginLoadData()
  fullName: System.Data.DataTable.BeginLoadData()
- uid: System.Data.DataTable.CaseSensitive
  parent: System.Data.DataTable
  isExternal: false
  name: CaseSensitive
  nameWithType: DataTable.CaseSensitive
  fullName: System.Data.DataTable.CaseSensitive
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.DataTable.ChildRelations
  parent: System.Data.DataTable
  isExternal: false
  name: ChildRelations
  nameWithType: DataTable.ChildRelations
  fullName: System.Data.DataTable.ChildRelations
- uid: System.Data.DataRelationCollection
  parent: System.Data
  isExternal: false
  name: DataRelationCollection
  nameWithType: DataRelationCollection
  fullName: System.Data.DataRelationCollection
- uid: System.Data.DataTable.Clear
  parent: System.Data.DataTable
  isExternal: false
  name: Clear()
  nameWithType: DataTable.Clear()
  fullName: System.Data.DataTable.Clear()
- uid: System.Data.DataTable.Clone
  parent: System.Data.DataTable
  isExternal: false
  name: Clone()
  nameWithType: DataTable.Clone()
  fullName: System.Data.DataTable.Clone()
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.DataTable.ColumnChanged
  parent: System.Data.DataTable
  isExternal: false
  name: ColumnChanged
  nameWithType: DataTable.ColumnChanged
  fullName: System.Data.DataTable.ColumnChanged
- uid: System.Data.DataColumnChangeEventHandler
  parent: System.Data
  isExternal: false
  name: DataColumnChangeEventHandler
  nameWithType: DataColumnChangeEventHandler
  fullName: System.Data.DataColumnChangeEventHandler
- uid: System.Data.DataTable.ColumnChanging
  parent: System.Data.DataTable
  isExternal: false
  name: ColumnChanging
  nameWithType: DataTable.ColumnChanging
  fullName: System.Data.DataTable.ColumnChanging
- uid: System.Data.DataTable.Columns
  parent: System.Data.DataTable
  isExternal: false
  name: Columns
  nameWithType: DataTable.Columns
  fullName: System.Data.DataTable.Columns
- uid: System.Data.DataColumnCollection
  parent: System.Data
  isExternal: false
  name: DataColumnCollection
  nameWithType: DataColumnCollection
  fullName: System.Data.DataColumnCollection
- uid: System.Data.DataTable.Compute(System.String,System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: Compute(String,String)
  nameWithType: DataTable.Compute(String,String)
  fullName: System.Data.DataTable.Compute(String,String)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.DataTable.Constraints
  parent: System.Data.DataTable
  isExternal: false
  name: Constraints
  nameWithType: DataTable.Constraints
  fullName: System.Data.DataTable.Constraints
- uid: System.Data.ConstraintCollection
  parent: System.Data
  isExternal: false
  name: ConstraintCollection
  nameWithType: ConstraintCollection
  fullName: System.Data.ConstraintCollection
- uid: System.Data.DataTable.Copy
  parent: System.Data.DataTable
  isExternal: false
  name: Copy()
  nameWithType: DataTable.Copy()
  fullName: System.Data.DataTable.Copy()
- uid: System.Data.DataTable.CreateDataReader
  parent: System.Data.DataTable
  isExternal: false
  name: CreateDataReader()
  nameWithType: DataTable.CreateDataReader()
  fullName: System.Data.DataTable.CreateDataReader()
- uid: System.Data.DataTableReader
  parent: System.Data
  isExternal: false
  name: DataTableReader
  nameWithType: DataTableReader
  fullName: System.Data.DataTableReader
- uid: System.Data.DataTable.CreateInstance
  parent: System.Data.DataTable
  isExternal: false
  name: CreateInstance()
  nameWithType: DataTable.CreateInstance()
  fullName: System.Data.DataTable.CreateInstance()
- uid: System.Data.DataTable.DataSet
  parent: System.Data.DataTable
  isExternal: false
  name: DataSet
  nameWithType: DataTable.DataSet
  fullName: System.Data.DataTable.DataSet
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.DataTable.DefaultView
  parent: System.Data.DataTable
  isExternal: false
  name: DefaultView
  nameWithType: DataTable.DefaultView
  fullName: System.Data.DataTable.DefaultView
- uid: System.Data.DataView
  parent: System.Data
  isExternal: false
  name: DataView
  nameWithType: DataView
  fullName: System.Data.DataView
- uid: System.Data.DataTable.DisplayExpression
  parent: System.Data.DataTable
  isExternal: false
  name: DisplayExpression
  nameWithType: DataTable.DisplayExpression
  fullName: System.Data.DataTable.DisplayExpression
- uid: System.Data.DataTable.EndInit
  parent: System.Data.DataTable
  isExternal: false
  name: EndInit()
  nameWithType: DataTable.EndInit()
  fullName: System.Data.DataTable.EndInit()
- uid: System.Data.DataTable.EndLoadData
  parent: System.Data.DataTable
  isExternal: false
  name: EndLoadData()
  nameWithType: DataTable.EndLoadData()
  fullName: System.Data.DataTable.EndLoadData()
- uid: System.Data.DataTable.ExtendedProperties
  parent: System.Data.DataTable
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataTable.ExtendedProperties
  fullName: System.Data.DataTable.ExtendedProperties
- uid: System.Data.PropertyCollection
  parent: System.Data
  isExternal: false
  name: PropertyCollection
  nameWithType: PropertyCollection
  fullName: System.Data.PropertyCollection
- uid: System.Data.DataTable.fInitInProgress
  parent: System.Data.DataTable
  isExternal: false
  name: fInitInProgress
  nameWithType: DataTable.fInitInProgress
  fullName: System.Data.DataTable.fInitInProgress
- uid: System.Data.DataTable.GetChanges
  parent: System.Data.DataTable
  isExternal: false
  name: GetChanges()
  nameWithType: DataTable.GetChanges()
  fullName: System.Data.DataTable.GetChanges()
- uid: System.Data.DataTable.GetChanges(System.Data.DataRowState)
  parent: System.Data.DataTable
  isExternal: false
  name: GetChanges(DataRowState)
  nameWithType: DataTable.GetChanges(DataRowState)
  fullName: System.Data.DataTable.GetChanges(DataRowState)
- uid: System.Data.DataRowState
  parent: System.Data
  isExternal: false
  name: DataRowState
  nameWithType: DataRowState
  fullName: System.Data.DataRowState
- uid: System.Data.DataTable.GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)
  parent: System.Data.DataTable
  isExternal: false
  name: GetDataTableSchema(XmlSchemaSet)
  nameWithType: DataTable.GetDataTableSchema(XmlSchemaSet)
  fullName: System.Data.DataTable.GetDataTableSchema(XmlSchemaSet)
- uid: System.Xml.Schema.XmlSchemaComplexType
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaComplexType
  nameWithType: XmlSchemaComplexType
  fullName: System.Xml.Schema.XmlSchemaComplexType
- uid: System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Data.DataTable.GetErrors
  parent: System.Data.DataTable
  isExternal: false
  name: GetErrors()
  nameWithType: DataTable.GetErrors()
  fullName: System.Data.DataTable.GetErrors()
- uid: System.Data.DataRow[]
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow[]
  spec.csharp:
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: DataRow[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataTable
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: DataTable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Data.DataTable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Data.DataTable.GetRowType
  parent: System.Data.DataTable
  isExternal: false
  name: GetRowType()
  nameWithType: DataTable.GetRowType()
  fullName: System.Data.DataTable.GetRowType()
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Data.DataTable.GetSchema
  parent: System.Data.DataTable
  isExternal: false
  name: GetSchema()
  nameWithType: DataTable.GetSchema()
  fullName: System.Data.DataTable.GetSchema()
- uid: System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Data.DataTable.HasErrors
  parent: System.Data.DataTable
  isExternal: false
  name: HasErrors
  nameWithType: DataTable.HasErrors
  fullName: System.Data.DataTable.HasErrors
- uid: System.Data.DataTable.ImportRow(System.Data.DataRow)
  parent: System.Data.DataTable
  isExternal: false
  name: ImportRow(DataRow)
  nameWithType: DataTable.ImportRow(DataRow)
  fullName: System.Data.DataTable.ImportRow(DataRow)
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.DataTable.Initialized
  parent: System.Data.DataTable
  isExternal: false
  name: Initialized
  nameWithType: DataTable.Initialized
  fullName: System.Data.DataTable.Initialized
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Data.DataTable.IsInitialized
  parent: System.Data.DataTable
  isExternal: false
  name: IsInitialized
  nameWithType: DataTable.IsInitialized
  fullName: System.Data.DataTable.IsInitialized
- uid: System.Data.DataTable.Load(System.Data.IDataReader)
  parent: System.Data.DataTable
  isExternal: false
  name: Load(IDataReader)
  nameWithType: DataTable.Load(IDataReader)
  fullName: System.Data.DataTable.Load(IDataReader)
- uid: System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)
  parent: System.Data.DataTable
  isExternal: false
  name: Load(IDataReader,LoadOption)
  nameWithType: DataTable.Load(IDataReader,LoadOption)
  fullName: System.Data.DataTable.Load(IDataReader,LoadOption)
- uid: System.Data.LoadOption
  parent: System.Data
  isExternal: false
  name: LoadOption
  nameWithType: LoadOption
  fullName: System.Data.LoadOption
- uid: System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)
  parent: System.Data.DataTable
  isExternal: false
  name: Load(IDataReader,LoadOption,FillErrorEventHandler)
  nameWithType: DataTable.Load(IDataReader,LoadOption,FillErrorEventHandler)
  fullName: System.Data.DataTable.Load(IDataReader,LoadOption,FillErrorEventHandler)
- uid: System.Data.FillErrorEventHandler
  parent: System.Data
  isExternal: false
  name: FillErrorEventHandler
  nameWithType: FillErrorEventHandler
  fullName: System.Data.FillErrorEventHandler
- uid: System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: LoadDataRow(Object[],Boolean)
  nameWithType: DataTable.LoadDataRow(Object[],Boolean)
  fullName: System.Data.DataTable.LoadDataRow(Object[],Boolean)
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)
  parent: System.Data.DataTable
  isExternal: false
  name: LoadDataRow(Object[],LoadOption)
  nameWithType: DataTable.LoadDataRow(Object[],LoadOption)
  fullName: System.Data.DataTable.LoadDataRow(Object[],LoadOption)
- uid: System.Data.DataTable.Locale
  parent: System.Data.DataTable
  isExternal: false
  name: Locale
  nameWithType: DataTable.Locale
  fullName: System.Data.DataTable.Locale
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Data.DataTable.Merge(System.Data.DataTable)
  parent: System.Data.DataTable
  isExternal: false
  name: Merge(DataTable)
  nameWithType: DataTable.Merge(DataTable)
  fullName: System.Data.DataTable.Merge(DataTable)
- uid: System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: Merge(DataTable,Boolean)
  nameWithType: DataTable.Merge(DataTable,Boolean)
  fullName: System.Data.DataTable.Merge(DataTable,Boolean)
- uid: System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataTable
  isExternal: false
  name: Merge(DataTable,Boolean,MissingSchemaAction)
  nameWithType: DataTable.Merge(DataTable,Boolean,MissingSchemaAction)
  fullName: System.Data.DataTable.Merge(DataTable,Boolean,MissingSchemaAction)
- uid: System.Data.MissingSchemaAction
  parent: System.Data
  isExternal: false
  name: MissingSchemaAction
  nameWithType: MissingSchemaAction
  fullName: System.Data.MissingSchemaAction
- uid: System.Data.DataTable.MinimumCapacity
  parent: System.Data.DataTable
  isExternal: false
  name: MinimumCapacity
  nameWithType: DataTable.MinimumCapacity
  fullName: System.Data.DataTable.MinimumCapacity
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataTable.Namespace
  parent: System.Data.DataTable
  isExternal: false
  name: Namespace
  nameWithType: DataTable.Namespace
  fullName: System.Data.DataTable.Namespace
- uid: System.Data.DataTable.NewRow
  parent: System.Data.DataTable
  isExternal: false
  name: NewRow()
  nameWithType: DataTable.NewRow()
  fullName: System.Data.DataTable.NewRow()
- uid: System.Data.DataTable.NewRowArray(System.Int32)
  parent: System.Data.DataTable
  isExternal: false
  name: NewRowArray(Int32)
  nameWithType: DataTable.NewRowArray(Int32)
  fullName: System.Data.DataTable.NewRowArray(Int32)
- uid: System.Data.DataTable.NewRowFromBuilder(System.Data.DataRowBuilder)
  parent: System.Data.DataTable
  isExternal: false
  name: NewRowFromBuilder(DataRowBuilder)
  nameWithType: DataTable.NewRowFromBuilder(DataRowBuilder)
  fullName: System.Data.DataTable.NewRowFromBuilder(DataRowBuilder)
- uid: System.Data.DataRowBuilder
  parent: System.Data
  isExternal: false
  name: DataRowBuilder
  nameWithType: DataRowBuilder
  fullName: System.Data.DataRowBuilder
- uid: System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnColumnChanged(DataColumnChangeEventArgs)
  nameWithType: DataTable.OnColumnChanged(DataColumnChangeEventArgs)
  fullName: System.Data.DataTable.OnColumnChanged(DataColumnChangeEventArgs)
- uid: System.Data.DataColumnChangeEventArgs
  parent: System.Data
  isExternal: false
  name: DataColumnChangeEventArgs
  nameWithType: DataColumnChangeEventArgs
  fullName: System.Data.DataColumnChangeEventArgs
- uid: System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnColumnChanging(DataColumnChangeEventArgs)
  nameWithType: DataTable.OnColumnChanging(DataColumnChangeEventArgs)
  fullName: System.Data.DataTable.OnColumnChanging(DataColumnChangeEventArgs)
- uid: System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataTable.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataTable.OnPropertyChanging(PropertyChangedEventArgs)
- uid: System.ComponentModel.PropertyChangedEventArgs
  parent: System.ComponentModel
  isExternal: true
  name: PropertyChangedEventArgs
  nameWithType: PropertyChangedEventArgs
  fullName: System.ComponentModel.PropertyChangedEventArgs
- uid: System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)
  parent: System.Data.DataTable
  isExternal: false
  name: OnRemoveColumn(DataColumn)
  nameWithType: DataTable.OnRemoveColumn(DataColumn)
  fullName: System.Data.DataTable.OnRemoveColumn(DataColumn)
- uid: System.Data.DataColumn
  parent: System.Data
  isExternal: false
  name: DataColumn
  nameWithType: DataColumn
  fullName: System.Data.DataColumn
- uid: System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowChanged(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowChanged(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowChanged(DataRowChangeEventArgs)
- uid: System.Data.DataRowChangeEventArgs
  parent: System.Data
  isExternal: false
  name: DataRowChangeEventArgs
  nameWithType: DataRowChangeEventArgs
  fullName: System.Data.DataRowChangeEventArgs
- uid: System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowChanging(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowChanging(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowChanging(DataRowChangeEventArgs)
- uid: System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowDeleted(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowDeleted(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowDeleted(DataRowChangeEventArgs)
- uid: System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowDeleting(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowDeleting(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowDeleting(DataRowChangeEventArgs)
- uid: System.Data.DataTable.OnTableCleared(System.Data.DataTableClearEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnTableCleared(DataTableClearEventArgs)
  nameWithType: DataTable.OnTableCleared(DataTableClearEventArgs)
  fullName: System.Data.DataTable.OnTableCleared(DataTableClearEventArgs)
- uid: System.Data.DataTableClearEventArgs
  parent: System.Data
  isExternal: false
  name: DataTableClearEventArgs
  nameWithType: DataTableClearEventArgs
  fullName: System.Data.DataTableClearEventArgs
- uid: System.Data.DataTable.OnTableClearing(System.Data.DataTableClearEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnTableClearing(DataTableClearEventArgs)
  nameWithType: DataTable.OnTableClearing(DataTableClearEventArgs)
  fullName: System.Data.DataTable.OnTableClearing(DataTableClearEventArgs)
- uid: System.Data.DataTable.OnTableNewRow(System.Data.DataTableNewRowEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnTableNewRow(DataTableNewRowEventArgs)
  nameWithType: DataTable.OnTableNewRow(DataTableNewRowEventArgs)
  fullName: System.Data.DataTable.OnTableNewRow(DataTableNewRowEventArgs)
- uid: System.Data.DataTableNewRowEventArgs
  parent: System.Data
  isExternal: false
  name: DataTableNewRowEventArgs
  nameWithType: DataTableNewRowEventArgs
  fullName: System.Data.DataTableNewRowEventArgs
- uid: System.Data.DataTable.ParentRelations
  parent: System.Data.DataTable
  isExternal: false
  name: ParentRelations
  nameWithType: DataTable.ParentRelations
  fullName: System.Data.DataTable.ParentRelations
- uid: System.Data.DataTable.Prefix
  parent: System.Data.DataTable
  isExternal: false
  name: Prefix
  nameWithType: DataTable.Prefix
  fullName: System.Data.DataTable.Prefix
- uid: System.Data.DataTable.PrimaryKey
  parent: System.Data.DataTable
  isExternal: false
  name: PrimaryKey
  nameWithType: DataTable.PrimaryKey
  fullName: System.Data.DataTable.PrimaryKey
- uid: System.Data.DataColumn[]
  parent: System.Data
  isExternal: false
  name: DataColumn
  nameWithType: DataColumn
  fullName: System.Data.DataColumn[]
  spec.csharp:
  - uid: System.Data.DataColumn
    name: DataColumn
    nameWithType: DataColumn
    fullName: DataColumn[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataTable.ReadXml(System.IO.Stream)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXml(Stream)
  nameWithType: DataTable.ReadXml(Stream)
  fullName: System.Data.DataTable.ReadXml(Stream)
- uid: System.Data.XmlReadMode
  parent: System.Data
  isExternal: false
  name: XmlReadMode
  nameWithType: XmlReadMode
  fullName: System.Data.XmlReadMode
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Data.DataTable.ReadXml(System.IO.TextReader)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXml(TextReader)
  nameWithType: DataTable.ReadXml(TextReader)
  fullName: System.Data.DataTable.ReadXml(TextReader)
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Data.DataTable.ReadXml(System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXml(String)
  nameWithType: DataTable.ReadXml(String)
  fullName: System.Data.DataTable.ReadXml(String)
- uid: System.Data.DataTable.ReadXml(System.Xml.XmlReader)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXml(XmlReader)
  nameWithType: DataTable.ReadXml(XmlReader)
  fullName: System.Data.DataTable.ReadXml(XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Data.DataTable.ReadXmlSchema(System.IO.Stream)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXmlSchema(Stream)
  nameWithType: DataTable.ReadXmlSchema(Stream)
  fullName: System.Data.DataTable.ReadXmlSchema(Stream)
- uid: System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXmlSchema(TextReader)
  nameWithType: DataTable.ReadXmlSchema(TextReader)
  fullName: System.Data.DataTable.ReadXmlSchema(TextReader)
- uid: System.Data.DataTable.ReadXmlSchema(System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXmlSchema(String)
  nameWithType: DataTable.ReadXmlSchema(String)
  fullName: System.Data.DataTable.ReadXmlSchema(String)
- uid: System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXmlSchema(XmlReader)
  nameWithType: DataTable.ReadXmlSchema(XmlReader)
  fullName: System.Data.DataTable.ReadXmlSchema(XmlReader)
- uid: System.Data.DataTable.ReadXmlSerializable(System.Xml.XmlReader)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXmlSerializable(XmlReader)
  nameWithType: DataTable.ReadXmlSerializable(XmlReader)
  fullName: System.Data.DataTable.ReadXmlSerializable(XmlReader)
- uid: System.Data.DataTable.RejectChanges
  parent: System.Data.DataTable
  isExternal: false
  name: RejectChanges()
  nameWithType: DataTable.RejectChanges()
  fullName: System.Data.DataTable.RejectChanges()
- uid: System.Data.DataTable.RemotingFormat
  parent: System.Data.DataTable
  isExternal: false
  name: RemotingFormat
  nameWithType: DataTable.RemotingFormat
  fullName: System.Data.DataTable.RemotingFormat
- uid: System.Data.SerializationFormat
  parent: System.Data
  isExternal: false
  name: SerializationFormat
  nameWithType: SerializationFormat
  fullName: System.Data.SerializationFormat
- uid: System.Data.DataTable.Reset
  parent: System.Data.DataTable
  isExternal: false
  name: Reset()
  nameWithType: DataTable.Reset()
  fullName: System.Data.DataTable.Reset()
- uid: System.Data.DataTable.RowChanged
  parent: System.Data.DataTable
  isExternal: false
  name: RowChanged
  nameWithType: DataTable.RowChanged
  fullName: System.Data.DataTable.RowChanged
- uid: System.Data.DataRowChangeEventHandler
  parent: System.Data
  isExternal: false
  name: DataRowChangeEventHandler
  nameWithType: DataRowChangeEventHandler
  fullName: System.Data.DataRowChangeEventHandler
- uid: System.Data.DataTable.RowChanging
  parent: System.Data.DataTable
  isExternal: false
  name: RowChanging
  nameWithType: DataTable.RowChanging
  fullName: System.Data.DataTable.RowChanging
- uid: System.Data.DataTable.RowDeleted
  parent: System.Data.DataTable
  isExternal: false
  name: RowDeleted
  nameWithType: DataTable.RowDeleted
  fullName: System.Data.DataTable.RowDeleted
- uid: System.Data.DataTable.RowDeleting
  parent: System.Data.DataTable
  isExternal: false
  name: RowDeleting
  nameWithType: DataTable.RowDeleting
  fullName: System.Data.DataTable.RowDeleting
- uid: System.Data.DataTable.Rows
  parent: System.Data.DataTable
  isExternal: false
  name: Rows
  nameWithType: DataTable.Rows
  fullName: System.Data.DataTable.Rows
- uid: System.Data.DataRowCollection
  parent: System.Data
  isExternal: false
  name: DataRowCollection
  nameWithType: DataRowCollection
  fullName: System.Data.DataRowCollection
- uid: System.Data.DataTable.Select
  parent: System.Data.DataTable
  isExternal: false
  name: Select()
  nameWithType: DataTable.Select()
  fullName: System.Data.DataTable.Select()
- uid: System.Data.DataTable.Select(System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: Select(String)
  nameWithType: DataTable.Select(String)
  fullName: System.Data.DataTable.Select(String)
- uid: System.Data.DataTable.Select(System.String,System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: Select(String,String)
  nameWithType: DataTable.Select(String,String)
  fullName: System.Data.DataTable.Select(String,String)
- uid: System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)
  parent: System.Data.DataTable
  isExternal: false
  name: Select(String,String,DataViewRowState)
  nameWithType: DataTable.Select(String,String,DataViewRowState)
  fullName: System.Data.DataTable.Select(String,String,DataViewRowState)
- uid: System.Data.DataViewRowState
  parent: System.Data
  isExternal: false
  name: DataViewRowState
  nameWithType: DataViewRowState
  fullName: System.Data.DataViewRowState
- uid: System.Data.DataTable.Site
  parent: System.Data.DataTable
  isExternal: false
  name: Site
  nameWithType: DataTable.Site
  fullName: System.Data.DataTable.Site
- uid: System.ComponentModel.ISite
  parent: System.ComponentModel
  isExternal: false
  name: ISite
  nameWithType: ISite
  fullName: System.ComponentModel.ISite
- uid: System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection
  parent: System.Data.DataTable
  isExternal: false
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: DataTable.System.ComponentModel.IListSource.ContainsListCollection
  fullName: System.Data.DataTable.System.ComponentModel.IListSource.ContainsListCollection
- uid: System.Data.DataTable.System#ComponentModel#IListSource#GetList
  parent: System.Data.DataTable
  isExternal: false
  name: System.ComponentModel.IListSource.GetList()
  nameWithType: DataTable.System.ComponentModel.IListSource.GetList()
  fullName: System.Data.DataTable.System.ComponentModel.IListSource.GetList()
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema
  parent: System.Data.DataTable
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.GetSchema()
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.GetSchema()
  fullName: System.Data.DataTable.System.Xml.Serialization.IXmlSerializable.GetSchema()
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  parent: System.Data.DataTable
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Data.DataTable.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  parent: System.Data.DataTable
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Data.DataTable.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Data.DataTable.TableCleared
  parent: System.Data.DataTable
  isExternal: false
  name: TableCleared
  nameWithType: DataTable.TableCleared
  fullName: System.Data.DataTable.TableCleared
- uid: System.Data.DataTableClearEventHandler
  parent: System.Data
  isExternal: false
  name: DataTableClearEventHandler
  nameWithType: DataTableClearEventHandler
  fullName: System.Data.DataTableClearEventHandler
- uid: System.Data.DataTable.TableClearing
  parent: System.Data.DataTable
  isExternal: false
  name: TableClearing
  nameWithType: DataTable.TableClearing
  fullName: System.Data.DataTable.TableClearing
- uid: System.Data.DataTable.TableName
  parent: System.Data.DataTable
  isExternal: false
  name: TableName
  nameWithType: DataTable.TableName
  fullName: System.Data.DataTable.TableName
- uid: System.Data.DataTable.TableNewRow
  parent: System.Data.DataTable
  isExternal: false
  name: TableNewRow
  nameWithType: DataTable.TableNewRow
  fullName: System.Data.DataTable.TableNewRow
- uid: System.Data.DataTableNewRowEventHandler
  parent: System.Data
  isExternal: false
  name: DataTableNewRowEventHandler
  nameWithType: DataTableNewRowEventHandler
  fullName: System.Data.DataTableNewRowEventHandler
- uid: System.Data.DataTable.ToString
  parent: System.Data.DataTable
  isExternal: false
  name: ToString()
  nameWithType: DataTable.ToString()
  fullName: System.Data.DataTable.ToString()
- uid: System.Data.DataTable.WriteXml(System.IO.Stream)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(Stream)
  nameWithType: DataTable.WriteXml(Stream)
  fullName: System.Data.DataTable.WriteXml(Stream)
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(TextWriter)
  nameWithType: DataTable.WriteXml(TextWriter)
  fullName: System.Data.DataTable.WriteXml(TextWriter)
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Data.DataTable.WriteXml(System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(String)
  nameWithType: DataTable.WriteXml(String)
  fullName: System.Data.DataTable.WriteXml(String)
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(XmlWriter)
  nameWithType: DataTable.WriteXml(XmlWriter)
  fullName: System.Data.DataTable.WriteXml(XmlWriter)
- uid: System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(Stream,Boolean)
  nameWithType: DataTable.WriteXml(Stream,Boolean)
  fullName: System.Data.DataTable.WriteXml(Stream,Boolean)
- uid: System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(Stream,XmlWriteMode)
  nameWithType: DataTable.WriteXml(Stream,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(Stream,XmlWriteMode)
- uid: System.Data.XmlWriteMode
  parent: System.Data
  isExternal: false
  name: XmlWriteMode
  nameWithType: XmlWriteMode
  fullName: System.Data.XmlWriteMode
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(TextWriter,Boolean)
  nameWithType: DataTable.WriteXml(TextWriter,Boolean)
  fullName: System.Data.DataTable.WriteXml(TextWriter,Boolean)
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(TextWriter,XmlWriteMode)
  nameWithType: DataTable.WriteXml(TextWriter,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(TextWriter,XmlWriteMode)
- uid: System.Data.DataTable.WriteXml(System.String,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(String,Boolean)
  nameWithType: DataTable.WriteXml(String,Boolean)
  fullName: System.Data.DataTable.WriteXml(String,Boolean)
- uid: System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(String,XmlWriteMode)
  nameWithType: DataTable.WriteXml(String,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(String,XmlWriteMode)
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(XmlWriter,Boolean)
  nameWithType: DataTable.WriteXml(XmlWriter,Boolean)
  fullName: System.Data.DataTable.WriteXml(XmlWriter,Boolean)
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(XmlWriter,XmlWriteMode)
  nameWithType: DataTable.WriteXml(XmlWriter,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(XmlWriter,XmlWriteMode)
- uid: System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(Stream,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(Stream,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(Stream,XmlWriteMode,Boolean)
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(TextWriter,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(TextWriter,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(TextWriter,XmlWriteMode,Boolean)
- uid: System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(String,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(String,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(String,XmlWriteMode,Boolean)
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(XmlWriter,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(XmlWriter,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(XmlWriter,XmlWriteMode,Boolean)
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.Stream)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(Stream)
  nameWithType: DataTable.WriteXmlSchema(Stream)
  fullName: System.Data.DataTable.WriteXmlSchema(Stream)
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(TextWriter)
  nameWithType: DataTable.WriteXmlSchema(TextWriter)
  fullName: System.Data.DataTable.WriteXmlSchema(TextWriter)
- uid: System.Data.DataTable.WriteXmlSchema(System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(String)
  nameWithType: DataTable.WriteXmlSchema(String)
  fullName: System.Data.DataTable.WriteXmlSchema(String)
- uid: System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(XmlWriter)
  nameWithType: DataTable.WriteXmlSchema(XmlWriter)
  fullName: System.Data.DataTable.WriteXmlSchema(XmlWriter)
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(Stream,Boolean)
  nameWithType: DataTable.WriteXmlSchema(Stream,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(Stream,Boolean)
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(TextWriter,Boolean)
  nameWithType: DataTable.WriteXmlSchema(TextWriter,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(TextWriter,Boolean)
- uid: System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(String,Boolean)
  nameWithType: DataTable.WriteXmlSchema(String,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(String,Boolean)
- uid: System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(XmlWriter,Boolean)
  nameWithType: DataTable.WriteXmlSchema(XmlWriter,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(XmlWriter,Boolean)
- uid: System.Data.DataTable.#ctor*
  parent: System.Data.DataTable
  isExternal: false
  name: DataTable
  nameWithType: DataTable.DataTable
- uid: System.Data.DataTable.AcceptChanges*
  parent: System.Data.DataTable
  isExternal: false
  name: AcceptChanges
  nameWithType: DataTable.AcceptChanges
- uid: System.Data.DataTable.BeginInit*
  parent: System.Data.DataTable
  isExternal: false
  name: BeginInit
  nameWithType: DataTable.BeginInit
- uid: System.Data.DataTable.BeginLoadData*
  parent: System.Data.DataTable
  isExternal: false
  name: BeginLoadData
  nameWithType: DataTable.BeginLoadData
- uid: System.Data.DataTable.CaseSensitive*
  parent: System.Data.DataTable
  isExternal: false
  name: CaseSensitive
  nameWithType: DataTable.CaseSensitive
- uid: System.Data.DataTable.ChildRelations*
  parent: System.Data.DataTable
  isExternal: false
  name: ChildRelations
  nameWithType: DataTable.ChildRelations
- uid: System.Data.DataTable.Clear*
  parent: System.Data.DataTable
  isExternal: false
  name: Clear
  nameWithType: DataTable.Clear
- uid: System.Data.DataTable.Clone*
  parent: System.Data.DataTable
  isExternal: false
  name: Clone
  nameWithType: DataTable.Clone
- uid: System.Data.DataTable.Columns*
  parent: System.Data.DataTable
  isExternal: false
  name: Columns
  nameWithType: DataTable.Columns
- uid: System.Data.DataTable.Compute*
  parent: System.Data.DataTable
  isExternal: false
  name: Compute
  nameWithType: DataTable.Compute
- uid: System.Data.DataTable.Constraints*
  parent: System.Data.DataTable
  isExternal: false
  name: Constraints
  nameWithType: DataTable.Constraints
- uid: System.Data.DataTable.Copy*
  parent: System.Data.DataTable
  isExternal: false
  name: Copy
  nameWithType: DataTable.Copy
- uid: System.Data.DataTable.CreateDataReader*
  parent: System.Data.DataTable
  isExternal: false
  name: CreateDataReader
  nameWithType: DataTable.CreateDataReader
- uid: System.Data.DataTable.CreateInstance*
  parent: System.Data.DataTable
  isExternal: false
  name: CreateInstance
  nameWithType: DataTable.CreateInstance
- uid: System.Data.DataTable.DataSet*
  parent: System.Data.DataTable
  isExternal: false
  name: DataSet
  nameWithType: DataTable.DataSet
- uid: System.Data.DataTable.DefaultView*
  parent: System.Data.DataTable
  isExternal: false
  name: DefaultView
  nameWithType: DataTable.DefaultView
- uid: System.Data.DataTable.DisplayExpression*
  parent: System.Data.DataTable
  isExternal: false
  name: DisplayExpression
  nameWithType: DataTable.DisplayExpression
- uid: System.Data.DataTable.EndInit*
  parent: System.Data.DataTable
  isExternal: false
  name: EndInit
  nameWithType: DataTable.EndInit
- uid: System.Data.DataTable.EndLoadData*
  parent: System.Data.DataTable
  isExternal: false
  name: EndLoadData
  nameWithType: DataTable.EndLoadData
- uid: System.Data.DataTable.ExtendedProperties*
  parent: System.Data.DataTable
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataTable.ExtendedProperties
- uid: System.Data.DataTable.GetChanges*
  parent: System.Data.DataTable
  isExternal: false
  name: GetChanges
  nameWithType: DataTable.GetChanges
- uid: System.Data.DataTable.GetDataTableSchema*
  parent: System.Data.DataTable
  isExternal: false
  name: GetDataTableSchema
  nameWithType: DataTable.GetDataTableSchema
- uid: System.Data.DataTable.GetErrors*
  parent: System.Data.DataTable
  isExternal: false
  name: GetErrors
  nameWithType: DataTable.GetErrors
- uid: System.Data.DataTable.GetObjectData*
  parent: System.Data.DataTable
  isExternal: false
  name: GetObjectData
  nameWithType: DataTable.GetObjectData
- uid: System.Data.DataTable.GetRowType*
  parent: System.Data.DataTable
  isExternal: false
  name: GetRowType
  nameWithType: DataTable.GetRowType
- uid: System.Data.DataTable.GetSchema*
  parent: System.Data.DataTable
  isExternal: false
  name: GetSchema
  nameWithType: DataTable.GetSchema
- uid: System.Data.DataTable.HasErrors*
  parent: System.Data.DataTable
  isExternal: false
  name: HasErrors
  nameWithType: DataTable.HasErrors
- uid: System.Data.DataTable.ImportRow*
  parent: System.Data.DataTable
  isExternal: false
  name: ImportRow
  nameWithType: DataTable.ImportRow
- uid: System.Data.DataTable.IsInitialized*
  parent: System.Data.DataTable
  isExternal: false
  name: IsInitialized
  nameWithType: DataTable.IsInitialized
- uid: System.Data.DataTable.Load*
  parent: System.Data.DataTable
  isExternal: false
  name: Load
  nameWithType: DataTable.Load
- uid: System.Data.DataTable.LoadDataRow*
  parent: System.Data.DataTable
  isExternal: false
  name: LoadDataRow
  nameWithType: DataTable.LoadDataRow
- uid: System.Data.DataTable.Locale*
  parent: System.Data.DataTable
  isExternal: false
  name: Locale
  nameWithType: DataTable.Locale
- uid: System.Data.DataTable.Merge*
  parent: System.Data.DataTable
  isExternal: false
  name: Merge
  nameWithType: DataTable.Merge
- uid: System.Data.DataTable.MinimumCapacity*
  parent: System.Data.DataTable
  isExternal: false
  name: MinimumCapacity
  nameWithType: DataTable.MinimumCapacity
- uid: System.Data.DataTable.Namespace*
  parent: System.Data.DataTable
  isExternal: false
  name: Namespace
  nameWithType: DataTable.Namespace
- uid: System.Data.DataTable.NewRow*
  parent: System.Data.DataTable
  isExternal: false
  name: NewRow
  nameWithType: DataTable.NewRow
- uid: System.Data.DataTable.NewRowArray*
  parent: System.Data.DataTable
  isExternal: false
  name: NewRowArray
  nameWithType: DataTable.NewRowArray
- uid: System.Data.DataTable.NewRowFromBuilder*
  parent: System.Data.DataTable
  isExternal: false
  name: NewRowFromBuilder
  nameWithType: DataTable.NewRowFromBuilder
- uid: System.Data.DataTable.OnColumnChanged*
  parent: System.Data.DataTable
  isExternal: false
  name: OnColumnChanged
  nameWithType: DataTable.OnColumnChanged
- uid: System.Data.DataTable.OnColumnChanging*
  parent: System.Data.DataTable
  isExternal: false
  name: OnColumnChanging
  nameWithType: DataTable.OnColumnChanging
- uid: System.Data.DataTable.OnPropertyChanging*
  parent: System.Data.DataTable
  isExternal: false
  name: OnPropertyChanging
  nameWithType: DataTable.OnPropertyChanging
- uid: System.Data.DataTable.OnRemoveColumn*
  parent: System.Data.DataTable
  isExternal: false
  name: OnRemoveColumn
  nameWithType: DataTable.OnRemoveColumn
- uid: System.Data.DataTable.OnRowChanged*
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowChanged
  nameWithType: DataTable.OnRowChanged
- uid: System.Data.DataTable.OnRowChanging*
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowChanging
  nameWithType: DataTable.OnRowChanging
- uid: System.Data.DataTable.OnRowDeleted*
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowDeleted
  nameWithType: DataTable.OnRowDeleted
- uid: System.Data.DataTable.OnRowDeleting*
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowDeleting
  nameWithType: DataTable.OnRowDeleting
- uid: System.Data.DataTable.OnTableCleared*
  parent: System.Data.DataTable
  isExternal: false
  name: OnTableCleared
  nameWithType: DataTable.OnTableCleared
- uid: System.Data.DataTable.OnTableClearing*
  parent: System.Data.DataTable
  isExternal: false
  name: OnTableClearing
  nameWithType: DataTable.OnTableClearing
- uid: System.Data.DataTable.OnTableNewRow*
  parent: System.Data.DataTable
  isExternal: false
  name: OnTableNewRow
  nameWithType: DataTable.OnTableNewRow
- uid: System.Data.DataTable.ParentRelations*
  parent: System.Data.DataTable
  isExternal: false
  name: ParentRelations
  nameWithType: DataTable.ParentRelations
- uid: System.Data.DataTable.Prefix*
  parent: System.Data.DataTable
  isExternal: false
  name: Prefix
  nameWithType: DataTable.Prefix
- uid: System.Data.DataTable.PrimaryKey*
  parent: System.Data.DataTable
  isExternal: false
  name: PrimaryKey
  nameWithType: DataTable.PrimaryKey
- uid: System.Data.DataTable.ReadXml*
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXml
  nameWithType: DataTable.ReadXml
- uid: System.Data.DataTable.ReadXmlSchema*
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXmlSchema
  nameWithType: DataTable.ReadXmlSchema
- uid: System.Data.DataTable.ReadXmlSerializable*
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXmlSerializable
  nameWithType: DataTable.ReadXmlSerializable
- uid: System.Data.DataTable.RejectChanges*
  parent: System.Data.DataTable
  isExternal: false
  name: RejectChanges
  nameWithType: DataTable.RejectChanges
- uid: System.Data.DataTable.RemotingFormat*
  parent: System.Data.DataTable
  isExternal: false
  name: RemotingFormat
  nameWithType: DataTable.RemotingFormat
- uid: System.Data.DataTable.Reset*
  parent: System.Data.DataTable
  isExternal: false
  name: Reset
  nameWithType: DataTable.Reset
- uid: System.Data.DataTable.Rows*
  parent: System.Data.DataTable
  isExternal: false
  name: Rows
  nameWithType: DataTable.Rows
- uid: System.Data.DataTable.Select*
  parent: System.Data.DataTable
  isExternal: false
  name: Select
  nameWithType: DataTable.Select
- uid: System.Data.DataTable.Site*
  parent: System.Data.DataTable
  isExternal: false
  name: Site
  nameWithType: DataTable.Site
- uid: System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection*
  parent: System.Data.DataTable
  isExternal: false
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: DataTable.System.ComponentModel.IListSource.ContainsListCollection
- uid: System.Data.DataTable.System#ComponentModel#IListSource#GetList*
  parent: System.Data.DataTable
  isExternal: false
  name: System.ComponentModel.IListSource.GetList
  nameWithType: DataTable.System.ComponentModel.IListSource.GetList
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema*
  parent: System.Data.DataTable
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.GetSchema
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml*
  parent: System.Data.DataTable
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.ReadXml
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.ReadXml
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml*
  parent: System.Data.DataTable
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.WriteXml
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.WriteXml
- uid: System.Data.DataTable.TableName*
  parent: System.Data.DataTable
  isExternal: false
  name: TableName
  nameWithType: DataTable.TableName
- uid: System.Data.DataTable.ToString*
  parent: System.Data.DataTable
  isExternal: false
  name: ToString
  nameWithType: DataTable.ToString
- uid: System.Data.DataTable.WriteXml*
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml
  nameWithType: DataTable.WriteXml
- uid: System.Data.DataTable.WriteXmlSchema*
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema
  nameWithType: DataTable.WriteXmlSchema
