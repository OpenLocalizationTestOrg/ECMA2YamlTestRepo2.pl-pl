### YamlMime:ManagedReference
items:
- uid: System.Windows.DependencyPropertyKey
  id: DependencyPropertyKey
  children:
  - System.Windows.DependencyPropertyKey.DependencyProperty
  - System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)
  langs:
  - csharp
  name: DependencyPropertyKey
  nameWithType: DependencyPropertyKey
  fullName: System.Windows.DependencyPropertyKey
  type: Class
  summary: "Zapewnia ograniczony dostęp zapisu do właściwości tylko do odczytu zależności identyfikatora właściwości zależności."
  remarks: "DependencyPropertyKey wystąpienia są uzyskiwane jako wartość zwracaną przez wywołanie rejestracji właściwości zależności przy użyciu metody <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A>lub <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A> </xref:System.Windows.DependencyProperty.RegisterReadOnly%2A>       Typy, które Zarejestruj właściwości zależności można użyć DependencyPropertyKey w wywołaniach <xref:System.Windows.DependencyObject.SetValue%2A>i <xref:System.Windows.DependencyObject.ClearValue%2A>który dostosowanie wartości właściwości jako część logiki klasy.</xref:System.Windows.DependencyObject.ClearValue%2A> </xref:System.Windows.DependencyObject.SetValue%2A> Jeśli dozwolone przez poziom dostępu do klucza, powiązanymi klasami również użyć klucza i właściwości zależności. Na przykład można zadeklarować klucz jako wewnętrzne i innych typów w ramach tego samego zestawu można również ustawić tej właściwości zależności.       DependencyPropertyKey zwrócony przez rejestracji właściwości tylko do odczytu zależności nie należy publiczne, ponieważ udostępnianie klucz sprawia, że właściwość można ustawić, w związku z tym defeating punktu rejestrując go jako właściwość zależności tylko do odczytu. Również udostępnianie klucz powoduje niezgodność między dostępne zależności zachowania właściwości i jego [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] implementacji otoki właściwości, które jest zła projektowania.       Zamiast udostępnianie samego klucza, zamiast tego powinny ujawniać <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A>wartość DependencyPropertyKey jako `public static readonly` <xref:System.Windows.DependencyProperty>w Twojej klasie.</xref:System.Windows.DependencyProperty> </xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> Dzięki temu właściwości do zwrócenia zależności nieprawidłowy identyfikator właściwości dla niektórych właściwości systemu operacji, takich jak lokalnie wyliczania zestaw wartości. Jednak identyfikator uzyskanych w związku z tym nie ma w pełni możliwości <xref:System.Windows.DependencyProperty>na wiele właściwości systemu operacji.</xref:System.Windows.DependencyProperty>"
  example:
  - "The following example registers a read-only dependency property, and also uses the key for two purposes in other class members: implementing the get \"wrapper\", and as the identifier for a protected determination operation that sets the value based on calculations of other property values.  \n  \n [!code-cs[WPFAquariumSln#RODP](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#rodp)]\n [!code-vb[WPFAquariumSln#RODP](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#rodp)]"
  syntax:
    content: public sealed class DependencyPropertyKey
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.DependencyPropertyKey.DependencyProperty
  id: DependencyProperty
  parent: System.Windows.DependencyPropertyKey
  langs:
  - csharp
  name: DependencyProperty
  nameWithType: DependencyPropertyKey.DependencyProperty
  fullName: System.Windows.DependencyPropertyKey.DependencyProperty
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Pobiera identyfikator właściwości zależności, które są skojarzone z identyfikatorem właściwość specjalne zależności tylko do odczytu."
  remarks: "Wartość właściwości DependencyProperty włącza identyfikator właściwości tylko do odczytu do udziału wspólnych właściwości operacje systemu za pomocą niektóre z tych samych interfejsów jako używane dla właściwości zależności odczytu i zapisu.       Aby mogła implementować metody dostępu właściwości get dla właściwości tylko do odczytu zależności, należy utworzyć i uwidocznić <xref:System.Windows.DependencyProperty>identyfikatora klasy użytkownika.</xref:System.Windows.DependencyProperty> Służy do dwóch celów: — Twoja klasa musi być właścicielem <xref:System.Windows.DependencyProperty>identyfikator, aby mogła implementować metody dostępu get dla właściwości otoki.</xref:System.Windows.DependencyProperty> Możesz użyć <xref:System.Windows.DependencyProperty>jako parametru dla <xref:System.Windows.DependencyObject.GetValue%2A>wywołania, który implementuje metody dostępu get.</xref:System.Windows.DependencyObject.GetValue%2A> </xref:System.Windows.DependencyProperty>      - <xref:System.Windows.DependencyProperty>identyfikatory uwidocznienie z właściwości zależności w systemie właściwości, dzięki czemu innych metod, które opierają się na metadanych do niego dostęp w formie standardowej.</xref:System.Windows.DependencyProperty> Na przykład jeśli wywołujesz <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A>na niektórych <xref:System.Windows.DependencyObject>i pobierane wyliczenie lokalnie zestawu właściwości (wartości i identyfikatorów), identyfikator zwrócona dla właściwości tylko do odczytu zależności będą Twojej <xref:System.Windows.DependencyProperty>wartość zamiast klucza.</xref:System.Windows.DependencyProperty> </xref:System.Windows.DependencyObject> </xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> Udostępnianie nie <xref:System.Windows.DependencyProperty>Identyfikator nie zwiększenie bezpieczeństwa sieci właściwości tylko do odczytu zależności w dowolny sposób, ale tylko operacji związanych z właściwości więcej nieodpowiednich zarówno dla kolejnych klas pochodnych i wystąpień klas.</xref:System.Windows.DependencyProperty>       Aby udostępnić <xref:System.Windows.DependencyProperty>identyfikatora klasy, należy wywołać element DependencyProperty bezpośrednio na klucz.</xref:System.Windows.DependencyProperty> Użyj tej wartości, aby utworzyć `public static readonly` <xref:System.Windows.DependencyProperty>Identyfikator klasy, która równoleżnikami <xref:System.Windows.DependencyPropertyKey>.</xref:System.Windows.DependencyPropertyKey> </xref:System.Windows.DependencyProperty>"
  example:
  - "The following example calls DependencyProperty to expose the <xref:System.Windows.DependencyProperty> identifier (`AquariumGraphicProperty`) for the `AquariumGraphic` read-only dependency property on a class. The example also shows the <xref:System.Windows.DependencyPropertyKey> creation (as an internal member) and the get accessor for `AquariumGraphic`.  \n  \n [!code-cs[WPFAquariumSln#RODP](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#rodp)]\n [!code-vb[WPFAquariumSln#RODP](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#rodp)]"
  syntax:
    content: public System.Windows.DependencyProperty DependencyProperty { get; }
    return:
      type: System.Windows.DependencyProperty
      description: "Identyfikator właściwości odpowiednich zależności."
  overload: System.Windows.DependencyPropertyKey.DependencyProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)
  id: OverrideMetadata(System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyPropertyKey
  langs:
  - csharp
  name: OverrideMetadata(Type,PropertyMetadata)
  nameWithType: DependencyPropertyKey.OverrideMetadata(Type,PropertyMetadata)
  fullName: System.Windows.DependencyPropertyKey.OverrideMetadata(Type,PropertyMetadata)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Zastępuje metadane właściwości tylko do odczytu zależności reprezentowanego przez ten identyfikator właściwości zależności."
  remarks: "Zastępowanie metadanych dla właściwości tylko do odczytu zależności odbywa się podobnych przyczyn jako Zastępowanie metadanych dla właściwości zależności odczytu i zapisu i jest ograniczony do dostęp na poziomie klucza, ponieważ określony w metadanych zachowania można zmienić zachowanie zestawu (wartość domyślna, na przykład).       Jako właściwości zależności odczytu i zapisu, zastępowanie metadanych dla właściwości tylko do odczytu zależności powinno być wykonane przed tą właściwością zostanie umieszczona w użycia przez system właściwości (to jest równa godzinę, o której tworzone są określone wystąpienia obiektów, które rejestrują właściwości). Wywołania metody OverrideMetadata powinny zostać wykonane tylko w konstruktorów statycznych typu, który udostępnia siebie jako `forType` parametru tej metody, lub równoważne inicjowania dla tej klasy.       Ta metoda skutecznie przekazuje do <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>jest metoda <xref:System.Windows.DependencyPropertyKey>wystąpienia jako parametr klucza.</xref:System.Windows.DependencyPropertyKey> </xref:System.Windows.DependencyProperty.OverrideMetadata%2A>"
  example:
  - "The following example overrides metadata for an existing read-only dependency property that a class inherits. In this case, the scenario goal was to add a coerce value callback that the base property metadata did not have. You could also override metadata for any of the other reasons that overriding metadata is typically appropriate (changing default value, adding <xref:System.Windows.FrameworkPropertyMetadataOptions> values, etc.)  \n  \n [!code-cs[WPFAquariumSln#RODPOverride](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#rodpoverride)]\n [!code-vb[WPFAquariumSln#RODPOverride](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#rodpoverride)]"
  syntax:
    content: public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);
    parameters:
    - id: forType
      type: System.Type
      description: "Typ, na którym ta właściwość zależności istnieje i powinna zostać zastąpiona w metadanych."
    - id: typeMetadata
      type: System.Windows.PropertyMetadata
      description: "Metadane podane dla tego typu."
  overload: System.Windows.DependencyPropertyKey.OverrideMetadata*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Próba metadane zastępcze dla właściwości zależności odczytu i zapisu (nie można wykonać za pomocą tego podpisu)."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Metadane już zostało ustanowione dla właściwości, ponieważ znajduje się na udostępnionego typu."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.DependencyPropertyKey.DependencyProperty
  parent: System.Windows.DependencyPropertyKey
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyPropertyKey.DependencyProperty
  fullName: System.Windows.DependencyPropertyKey.DependencyProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyPropertyKey
  isExternal: false
  name: OverrideMetadata(Type,PropertyMetadata)
  nameWithType: DependencyPropertyKey.OverrideMetadata(Type,PropertyMetadata)
  fullName: System.Windows.DependencyPropertyKey.OverrideMetadata(Type,PropertyMetadata)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.PropertyMetadata
  parent: System.Windows
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
- uid: System.Windows.DependencyPropertyKey.DependencyProperty*
  parent: System.Windows.DependencyPropertyKey
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyPropertyKey.DependencyProperty
- uid: System.Windows.DependencyPropertyKey.OverrideMetadata*
  parent: System.Windows.DependencyPropertyKey
  isExternal: false
  name: OverrideMetadata
  nameWithType: DependencyPropertyKey.OverrideMetadata
