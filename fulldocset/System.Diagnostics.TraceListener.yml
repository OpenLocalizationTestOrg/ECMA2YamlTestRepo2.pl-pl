### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.TraceListener
  id: TraceListener
  children:
  - System.Diagnostics.TraceListener.#ctor
  - System.Diagnostics.TraceListener.#ctor(System.String)
  - System.Diagnostics.TraceListener.Attributes
  - System.Diagnostics.TraceListener.Close
  - System.Diagnostics.TraceListener.Dispose
  - System.Diagnostics.TraceListener.Dispose(System.Boolean)
  - System.Diagnostics.TraceListener.Fail(System.String)
  - System.Diagnostics.TraceListener.Fail(System.String,System.String)
  - System.Diagnostics.TraceListener.Filter
  - System.Diagnostics.TraceListener.Flush
  - System.Diagnostics.TraceListener.GetSupportedAttributes
  - System.Diagnostics.TraceListener.IndentLevel
  - System.Diagnostics.TraceListener.IndentSize
  - System.Diagnostics.TraceListener.IsThreadSafe
  - System.Diagnostics.TraceListener.Name
  - System.Diagnostics.TraceListener.NeedIndent
  - System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  - System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  - System.Diagnostics.TraceListener.TraceOutputOptions
  - System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  - System.Diagnostics.TraceListener.Write(System.Object)
  - System.Diagnostics.TraceListener.Write(System.String)
  - System.Diagnostics.TraceListener.Write(System.Object,System.String)
  - System.Diagnostics.TraceListener.Write(System.String,System.String)
  - System.Diagnostics.TraceListener.WriteIndent
  - System.Diagnostics.TraceListener.WriteLine(System.Object)
  - System.Diagnostics.TraceListener.WriteLine(System.String)
  - System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
  - System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
  langs:
  - csharp
  name: TraceListener
  nameWithType: TraceListener
  fullName: System.Diagnostics.TraceListener
  type: Class
  summary: "Udostępnia <xref uid=&quot;langword_csharp_abstract&quot; name=&quot;abstract&quot; href=&quot;&quot;> </xref> klasa podstawowa dla odbiorniki monitorującym śledzenia i debugowania."
  remarks: "For examples of how to implement a TraceListener, see the <xref:System.Diagnostics.DefaultTraceListener>, <xref:System.Diagnostics.TextWriterTraceListener> and the <xref:System.Diagnostics.EventLogTraceListener> classes.  \n  \n You must enable tracing or debugging to use a trace listener. The following syntax is compiler specific. If you use compilers other than C# or Visual Basic, refer to the documentation for your compiler.  \n  \n-   To enable debugging in C#, add the `/d:DEBUG` flag to the compiler command line when you compile your code, or you can add `#define DEBUG` to the top of your file. In Visual Basic, add the `/d:DEBUG=True` flag to the compiler command line.  \n  \n-   To enable tracing in C#, add the `/d:TRACE` flag to the compiler command line when you compile your code, or add `#define TRACE` to the top of your file. In Visual Basic, add the `/d:TRACE=True` flag to the compiler command line.  \n  \n To add a trace listener, edit the configuration file that corresponds to the name of your application. Within this file, you can add a listener, set its type and set its parameter, remove a listener, or clear all the listeners previously set by the application. The configuration file should be formatted similar to the following example.  \n  \n```  \n<configuration>  \n  <system.diagnostics>  \n    <trace autoflush=\"false\" indentsize=\"4\">  \n      <listeners>  \n        <add name=\"myListener\" type=\"System.Diagnostics.TextWriterTraceListener\" initializeData=\"TextWriterOutput.log\" />  \n        <remove name=\"Default\" />  \n      </listeners>  \n    </trace>  \n  </system.diagnostics>  \n</configuration>  \n```  \n  \n For more information on using configuration files for tracing, see [\\&lt;system.diagnostics\\&gt;](../Topic/%3Csystem.diagnostics%3E%20Element.md)."
  syntax:
    content: 'public abstract class TraceListener : MarshalByRefObject, IDisposable'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.#ctor
  id: '#ctor'
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceListener()
  nameWithType: TraceListener.TraceListener()
  fullName: System.Diagnostics.TraceListener.TraceListener()
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> klasy."
  remarks: "W poniższej tabeli przedstawiono początkowe wartości właściwości dla wystąpienia <xref:System.Diagnostics.TraceListener>.</xref:System.Diagnostics.TraceListener>      | Właściwość | Wartość domyślna |   |--------------|-------------------|   | Nazwa | Ciąg pusty (&quot;&quot;). | | Wcięcie | Zero. |   | IndentSize | Czterech spacji. |"
  syntax:
    content: protected TraceListener ();
    parameters: []
  overload: System.Diagnostics.TraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceListener(String)
  nameWithType: TraceListener.TraceListener(String)
  fullName: System.Diagnostics.TraceListener.TraceListener(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> jako odbiornik przy użyciu określonej nazwy."
  syntax:
    content: protected TraceListener (string name);
    parameters:
    - id: name
      type: System.String
      description: "Nazwa <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref>."
  overload: System.Diagnostics.TraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Attributes
  id: Attributes
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Attributes
  nameWithType: TraceListener.Attributes
  fullName: System.Diagnostics.TraceListener.Attributes
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Pobiera atrybuty odbiornika śledzenia niestandardowe zdefiniowane w pliku konfiguracyjnym aplikacji."
  remarks: "Klasy, które dziedziczą z <xref:System.Diagnostics.TraceListener>klasy można dodawać atrybuty niestandardowe przez zastąpienie <xref:System.Diagnostics.TraceListener.GetSupportedAttributes%2A>— Metoda i zwracanie tablica ciągów nazw atrybutu niestandardowego.</xref:System.Diagnostics.TraceListener.GetSupportedAttributes%2A> </xref:System.Diagnostics.TraceListener> Właściwość atrybuty identyfikuje atrybutów niestandardowych, które są wymienione w pliku konfiguracji aplikacji. Na przykład w poniższym fragmencie pliku konfiguracji <xref:System.Diagnostics.DelimitedListTraceListener>odwołuje się do atrybutu niestandardowego &quot;ogranicznika&quot;.</xref:System.Diagnostics.DelimitedListTraceListener> W takim przypadku właściwość atrybutów zwraca <xref:System.Collections.Specialized.StringDictionary>zawierający ciąg &quot;ogranicznika&quot;.</xref:System.Collections.Specialized.StringDictionary>      ```   <listeners>     <add name=&quot;delimitedListener&quot;        type=&quot;System.Diagnostics.DelimitedListTraceListener&quot;        delimiter=&quot;:&quot;        initializeData=&quot;delimitedOutput.txt&quot;        traceOutputOptions=&quot;ProcessId, DateTime&quot; />     <remove name=&quot;Default&quot; />   </listeners>   ```Nieużywane atrybutów niestandardowych, które nie są wyliczone.  Aby uzyskać więcej informacji, zobacz <xref:System.Diagnostics.TraceListener.GetSupportedAttributes%2A>metody.</xref:System.Diagnostics.TraceListener.GetSupportedAttributes%2A>"
  syntax:
    content: public System.Collections.Specialized.StringDictionary Attributes { get; }
    return:
      type: System.Collections.Specialized.StringDictionary
      description: "A <xref href=&quot;System.Collections.Specialized.StringDictionary&quot;> </xref> zawierający atrybuty niestandardowe dla obiektu nasłuchującego śledzenia."
  overload: System.Diagnostics.TraceListener.Attributes*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Close
  id: Close
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Close()
  nameWithType: TraceListener.Close()
  fullName: System.Diagnostics.TraceListener.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "W przypadku przesłonięcia w klasie pochodnej, zamyka strumienia wyjściowego, więc nie będzie już otrzymywać dane wyjściowe śledzenia i debugowania."
  remarks: "Użyj tej metody, gdy dane wyjściowe przechodzi do pliku, takich jak do <xref:System.Diagnostics.TextWriterTraceListener>.</xref:System.Diagnostics.TextWriterTraceListener> Po wywołaniu tej metody należy ponownie zainicjować obiektu."
  syntax:
    content: public virtual void Close ();
    parameters: []
  overload: System.Diagnostics.TraceListener.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Dispose
  id: Dispose
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Dispose()
  nameWithType: TraceListener.Dispose()
  fullName: System.Diagnostics.TraceListener.Dispose()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zwalnia wszelkie zasoby używane przez <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref>."
  remarks: "Wywołanie metody Dispose umożliwia zasoby używane przez <xref:System.Diagnostics.TraceListener>odbiorczego do innych celów.</xref:System.Diagnostics.TraceListener> Aby uzyskać więcej informacji na temat usuwania, zobacz [czyszczenie zasobów niezarządzanych](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Diagnostics.TraceListener.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: TraceListener.Dispose(Boolean)
  fullName: System.Diagnostics.TraceListener.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zwalnia zasoby niezarządzane używane przez <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> i opcjonalnie zwalnia zasoby zarządzane."
  remarks: "Ta metoda jest wywoływana przez metodę publiczną <xref:System.Diagnostics.TraceListener.Dispose%2A>— Metoda i <xref:System.Object.Finalize%2A>metody.</xref:System.Object.Finalize%2A> </xref:System.Diagnostics.TraceListener.Dispose%2A> `Dispose`wywołuje chronioną metodę <xref:System.Diagnostics.TraceListener.Dispose%2A>metody z `disposing` ustawiona `true`.</xref:System.Diagnostics.TraceListener.Dispose%2A> <xref:System.Object.Finalize%2A>wywołuje `Dispose` z `disposing` ustawioną `false`.</xref:System.Object.Finalize%2A>       Gdy `disposing` parametr jest `true`, ta metoda zwalnia wszystkie zasoby zajmowane przez wszelkie obiekty zarządzane przez to <xref:System.Diagnostics.TraceListener>odwołań.</xref:System.Diagnostics.TraceListener> Ta metoda wywołuje `Dispose` metody każdego odwołuje się do obiektu."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby zwolnić zasoby zarządzane i niezarządzane; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> aby zwolnić tylko zasoby niezarządzane."
  overload: System.Diagnostics.TraceListener.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Fail(System.String)
  id: Fail(System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Fail(String)
  nameWithType: TraceListener.Fail(String)
  fullName: System.Diagnostics.TraceListener.Fail(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Emituje komunikat o błędzie do odbiornika tworzenia podczas implementowania <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> klasy."
  remarks: "Domyślnym zachowaniem jest wyświetlany określony komunikat w oknie komunikatu, gdy aplikacja działa w trybie interfejsu użytkownika, a w <xref:System.Diagnostics.TraceListener>wystąpień w <xref:System.Diagnostics.TraceListenerCollection>kolekcji.</xref:System.Diagnostics.TraceListenerCollection> </xref:System.Diagnostics.TraceListener> Domyślnie <xref:System.Diagnostics.TraceListenerCollection>kolekcji znajduje się wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener> </xref:System.Diagnostics.TraceListenerCollection> To zachowanie można dostosować, dodając <xref:System.Diagnostics.TraceListener>do lub usuwanie z kolekcji.</xref:System.Diagnostics.TraceListener>"
  syntax:
    content: public virtual void Fail (string message);
    parameters:
    - id: message
      type: System.String
      description: "Komunikat emisji."
  overload: System.Diagnostics.TraceListener.Fail*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Fail(System.String,System.String)
  id: Fail(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Fail(String,String)
  nameWithType: TraceListener.Fail(String,String)
  fullName: System.Diagnostics.TraceListener.Fail(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Wystąpił błąd emituje komunikat i szczegółowy komunikat o błędzie do odbiornika tworzenia podczas implementowania <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> klasy."
  remarks: "Domyślnym zachowaniem jest wyświetlany komunikat i szczegółowy komunikat w oknie komunikatu, gdy aplikacja działa w trybie interfejsu użytkownika, a w <xref:System.Diagnostics.TraceListener>wystąpień w <xref:System.Diagnostics.TraceListenerCollection>kolekcji.</xref:System.Diagnostics.TraceListenerCollection> </xref:System.Diagnostics.TraceListener> Domyślnie <xref:System.Diagnostics.TraceListenerCollection>kolekcji znajduje się wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener> </xref:System.Diagnostics.TraceListenerCollection> To zachowanie można dostosować, dodając <xref:System.Diagnostics.TraceListener>do lub usuwanie z kolekcji.</xref:System.Diagnostics.TraceListener>"
  syntax:
    content: public virtual void Fail (string message, string detailMessage);
    parameters:
    - id: message
      type: System.String
      description: "Komunikat emisji."
    - id: detailMessage
      type: System.String
      description: "Szczegółowy komunikat do wysyłania."
  overload: System.Diagnostics.TraceListener.Fail*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Filter
  id: Filter
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Filter
  nameWithType: TraceListener.Filter
  fullName: System.Diagnostics.TraceListener.Filter
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Pobiera i ustawia filtr śledzenia dla obiektu nasłuchującego śledzenia."
  remarks: "Można dodać filtr śledzenia w odbiorniku śledzenia, aby zapewnić warstwę osłaniania spoza źródła przez przełączniki. Na przykład <xref:System.Diagnostics.EventTypeFilter>mogą być dodawane do nasłuchującego śledzenia do kontrolowania typy zdarzeń, które są danymi wyjściowymi przez odbiornik.</xref:System.Diagnostics.EventTypeFilter>  Odbiorniki, które są nazywane, ponieważ są spełnione kryteria przełącznika można badać ich filtru, jeśli jest obecny, aby określić, czy śledzenie jest przesyłany do danych wyjściowych."
  example:
  - "The following code example shows how to use the Filter property to add a source filter to a console trace listener. This code example is part of a larger example provided for the <xref:System.Diagnostics.TraceSource> class.  \n  \n [!code-cs[System.Diagnostics.TraceSource2#28](~/add/codesnippet/csharp/p-system.diagnostics.tra_6_1.cs)]\n [!code-vb[System.Diagnostics.TraceSource2#28](~/add/codesnippet/visualbasic/p-system.diagnostics.tra_6_1.vb)]"
  syntax:
    content: public System.Diagnostics.TraceFilter Filter { get; set; }
    return:
      type: System.Diagnostics.TraceFilter
      description: "Obiekt pochodną <xref href=&quot;System.Diagnostics.TraceFilter&quot;> </xref> klasy podstawowej."
  overload: System.Diagnostics.TraceListener.Filter*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Flush
  id: Flush
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Flush()
  nameWithType: TraceListener.Flush()
  fullName: System.Diagnostics.TraceListener.Flush()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "W przypadku przesłonięcia w klasie pochodnej, opróżnia bufor wyjściowy."
  syntax:
    content: public virtual void Flush ();
    parameters: []
  overload: System.Diagnostics.TraceListener.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.GetSupportedAttributes
  id: GetSupportedAttributes
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: GetSupportedAttributes()
  nameWithType: TraceListener.GetSupportedAttributes()
  fullName: System.Diagnostics.TraceListener.GetSupportedAttributes()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Pobiera atrybuty niestandardowe obsługiwane przez odbiornik śledzenia."
  remarks: "Zwraca domyślną implementację dla GetSupportedAttributes `null`."
  example:
  - "The following code sample shows an override of the GetSupportedAttributes method for a custom trace listener.  \n  \n [!code-cs[System.Diagnostics.TraceListener.CustomAttributes#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_22_1.cs)]\n [!code-vb[System.Diagnostics.TraceListener.CustomAttributes#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_22_1.vb)]"
  syntax:
    content: protected virtual string[] GetSupportedAttributes ();
    parameters: []
    return:
      type: System.String[]
      description: "Tablica ciągów nazw atrybutów niestandardowych, obsługiwane przez odbiornik śledzenia lub <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> , jeśli nie ma żadnych atrybutów niestandardowych."
  overload: System.Diagnostics.TraceListener.GetSupportedAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.IndentLevel
  id: IndentLevel
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: IndentLevel
  nameWithType: TraceListener.IndentLevel
  fullName: System.Diagnostics.TraceListener.IndentLevel
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Pobiera lub ustawia poziom wcięcia."
  remarks: "Właściwość IndentLevel reprezentuje liczbę wcięcie określony przez <xref:System.Diagnostics.TraceListener.IndentSize%2A>właściwość jest stosowana.</xref:System.Diagnostics.TraceListener.IndentSize%2A> Ta właściwość jest przechowywane na podstawie wątku/na — żądań."
  syntax:
    content: public int IndentLevel { get; set; }
    return:
      type: System.Int32
      description: "Poziom wcięcia. Wartość domyślna to zero."
  overload: System.Diagnostics.TraceListener.IndentLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.IndentSize
  id: IndentSize
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: IndentSize
  nameWithType: TraceListener.IndentSize
  fullName: System.Diagnostics.TraceListener.IndentSize
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Pobiera lub ustawia liczbę spacji w wcięcia."
  remarks: "Właściwość jest przechowywana na podstawie wątku/na — żądań."
  syntax:
    content: public int IndentSize { get; set; }
    return:
      type: System.Int32
      description: "Liczba spacji w wcięcia. Wartość domyślna to czterech spacji."
  overload: System.Diagnostics.TraceListener.IndentSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Operacja Set nie powiodła się, ponieważ wartość jest mniejsza od zera."
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.IsThreadSafe
  id: IsThreadSafe
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: IsThreadSafe
  nameWithType: TraceListener.IsThreadSafe
  fullName: System.Diagnostics.TraceListener.IsThreadSafe
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Pobiera wartość wskazującą, czy odbiornik śledzenia jest wątku bezpieczne."
  remarks: "Wartość IsThreadSafe służy do określenia, czy użyć globalne blokady podczas zapisywania do odbiornika. Jeśli wartość IsThreadSafe jest `false`, globalne blokady jest używany niezależnie od wartości <xref:System.Diagnostics.Trace.UseGlobalLock%2A>.</xref:System.Diagnostics.Trace.UseGlobalLock%2A> Globalne blokady nie jest używany tylko wtedy, gdy wartość IsThreadSafe `true` i wartość <xref:System.Diagnostics.Trace.UseGlobalLock%2A>jest `false`.</xref:System.Diagnostics.Trace.UseGlobalLock%2A> Domyślnym zachowaniem jest użycie globalnej zablokować przy każdym zapisywania do odbiornika."
  syntax:
    content: public virtual bool IsThreadSafe { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli odbiornik śledzenia jest wielowątkowość; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Wartość domyślna to <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.TraceListener.IsThreadSafe*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Name
  id: Name
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Name
  nameWithType: TraceListener.Name
  fullName: System.Diagnostics.TraceListener.Name
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Pobiera lub ustawia nazwę dla tego <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref>."
  remarks: "Nazwa może być używana do organizowania i dostępu do obiektów nasłuchujących w <xref:System.Diagnostics.TraceListenerCollection>kolekcji.</xref:System.Diagnostics.TraceListenerCollection>"
  syntax:
    content: public virtual string Name { get; set; }
    return:
      type: System.String
      description: "Nazwa tego <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref>. Wartość domyślna to ciąg pusty (&quot;&quot;)."
  overload: System.Diagnostics.TraceListener.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.NeedIndent
  id: NeedIndent
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: NeedIndent
  nameWithType: TraceListener.NeedIndent
  fullName: System.Diagnostics.TraceListener.NeedIndent
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Pobiera lub ustawia wartość wskazującą, czy zwiększyć wcięcie dane wyjściowe."
  remarks: '**Uwaga** <xref:System.Diagnostics.TraceListener.WriteIndent%2A>metody wywoływane przez <xref:System.Diagnostics.DefaultTraceListener>i <xref:System.Diagnostics.TextWriterTraceListener>klas, ustawia wartości właściwości NeedIndent `false` zapobiegające później, wcięcia niepotrzebne.</xref:System.Diagnostics.TextWriterTraceListener> </xref:System.Diagnostics.DefaultTraceListener> </xref:System.Diagnostics.TraceListener.WriteIndent%2A> Można ustawić właściwości NeedIndent `true` zawsze chcesz zwiększyć wcięcie danych wyjściowych śledzenia.'
  syntax:
    content: protected bool NeedIndent { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli dane wyjściowe powinny być wcięta; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.TraceListener.NeedIndent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: System.Diagnostics.TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje śledzenia informacje, informacje danych obiektu lub zdarzenia do określonych danych wyjściowych odbiornika."
  remarks: "> [!IMPORTANT]> Ta metoda nie jest przeznaczona do wywoływania bezpośrednio przez kod aplikacji, ale przez członków <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, i <xref:System.Diagnostics.TraceSource>klasy, aby zapisywać danych wyjściowych śledzenia.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       Zapisy implementacji domyślnej `eventCache`, `source`, `eventType` i `id` parametrów w nagłówku i stopce śledzenia. `data` Parametr są zapisywane jako treść komunikatu śledzenia. `ToString` Metoda obiektu danych służy do konwersji obiektu do <xref:System.String>.</xref:System.String>"
  syntax:
    content: public virtual void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "A <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref> obiekt, który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śledzeniu na stosie."
    - id: source
      type: System.String
      description: "Nazwa używana do identyfikowania dane wyjściowe, zwykle nazwa aplikacji, która wygenerowała zdarzenie śledzenia."
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "Jeden z <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> wartości określający typ zdarzenia, który spowodował śledzenia."
    - id: id
      type: System.Int32
      description: "Identyfikator numeryczny dla zdarzenia."
    - id: data
      type: System.Object
      description: "Dane śledzenia do emisji."
  overload: System.Diagnostics.TraceListener.TraceData*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: System.Diagnostics.TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje śledzenia informacji, tablicę obiektów danych i informacji o zdarzeniu do określonych danych wyjściowych odbiornika."
  remarks: "> [!IMPORTANT]> Ta metoda nie jest przeznaczona do wywoływania bezpośrednio przez kod aplikacji, ale przez członków <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, i <xref:System.Diagnostics.TraceSource>klasy, aby zapisywać danych wyjściowych śledzenia.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       Domyślna implementacja zapisuje wartości `source`, `eventType` i `id` parametrów jako nagłówek. Obiekty danych są konwertowane na ciągów za pomocą `ToString` metody każdego obiektu. `eventCache` Dane są zapisywane jako stopkę, rodzaj danych wyjściowych jest zależny od wartości <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>Właściwości.</xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>"
  syntax:
    content: public virtual void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object[] data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "A <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref> obiekt, który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śledzeniu na stosie."
    - id: source
      type: System.String
      description: "Nazwa używana do identyfikowania dane wyjściowe, zwykle nazwa aplikacji, która wygenerowała zdarzenie śledzenia."
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "Jeden z <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> wartości określający typ zdarzenia, który spowodował śledzenia."
    - id: id
      type: System.Int32
      description: "Identyfikator numeryczny dla zdarzenia."
    - id: data
      type: System.Object[]
      description: "Tablica obiektów, aby emitować jako dane."
  overload: System.Diagnostics.TraceListener.TraceData*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32)
  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32)
  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisy śledzenia informacji i zdarzeń do określonych danych wyjściowych odbiornika."
  remarks: "> [!IMPORTANT]> Ta metoda nie jest przeznaczona do wywoływania bezpośrednio przez kod aplikacji, ale przez członków <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, i <xref:System.Diagnostics.TraceSource>klasy, aby zapisywać danych wyjściowych śledzenia.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       Domyślna implementacja zapisuje wartości `source`, `eventType` i `id` parametrów jako nagłówek. `eventCache` Dane są zapisywane jako stopkę, rodzaj danych wyjściowych jest zależny od wartości <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>Właściwości.</xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>"
  syntax:
    content: public virtual void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "A <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref> obiekt, który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śledzeniu na stosie."
    - id: source
      type: System.String
      description: "Nazwa używana do identyfikowania dane wyjściowe, zwykle nazwa aplikacji, która wygenerowała zdarzenie śledzenia."
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "Jeden z <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> wartości określający typ zdarzenia, który spowodował śledzenia."
    - id: id
      type: System.Int32
      description: "Identyfikator numeryczny dla zdarzenia."
  overload: System.Diagnostics.TraceListener.TraceEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje śledzenia informacji, wiadomości i informacji o zdarzeniu do określonych danych wyjściowych odbiornika."
  remarks: "> [!IMPORTANT]> Ta metoda nie jest przeznaczona do wywoływania bezpośrednio przez kod aplikacji, ale przez członków <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, i <xref:System.Diagnostics.TraceSource>klasy, aby zapisywać danych wyjściowych śledzenia.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       Domyślna implementacja zapisuje wartości `source`, `eventType` i `id` parametrów jako nagłówek, a następnie `message` danych. `eventCache` Dane są zapisywane jako stopkę, rodzaj danych wyjściowych jest zależny od wartości <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>Właściwości.</xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>"
  syntax:
    content: public virtual void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "A <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref> obiekt, który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śledzeniu na stosie."
    - id: source
      type: System.String
      description: "Nazwa używana do identyfikowania dane wyjściowe, zwykle nazwa aplikacji, która wygenerowała zdarzenie śledzenia."
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "Jeden z <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> wartości określający typ zdarzenia, który spowodował śledzenia."
    - id: id
      type: System.Int32
      description: "Identyfikator numeryczny dla zdarzenia."
    - id: message
      type: System.String
      description: "Komunikat do zapisania."
  overload: System.Diagnostics.TraceListener.TraceEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje śledzenia informacji, sformatowany tablicę obiektów i informacji o zdarzeniu do określonych danych wyjściowych odbiornika."
  remarks: "> [!IMPORTANT]> Ta metoda nie jest przeznaczona do wywoływania bezpośrednio przez kod aplikacji, ale przez członków <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, i <xref:System.Diagnostics.TraceSource>klasy, aby zapisywać danych wyjściowych śledzenia.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       Domyślna implementacja zapisuje wartości `source`, `eventType` i `id` parametrów jako nagłówek. `args` Tablicę obiektów jest konwertowana na ciąg za pomocą <xref:System.String.Format%2A>jest metoda `format` ciągu i `args` tablicy do formatu ciągu jako część komunikatów śledzenia.</xref:System.String.Format%2A> `eventCache` Dane są zapisywane jako stopkę, rodzaj danych wyjściowych jest zależny od wartości <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>Właściwości.</xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>"
  syntax:
    content: public virtual void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, object[] args);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "A <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref> obiekt, który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śledzeniu na stosie."
    - id: source
      type: System.String
      description: "Nazwa używana do identyfikowania dane wyjściowe, zwykle nazwa aplikacji, która wygenerowała zdarzenie śledzenia."
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "Jeden z <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> wartości określający typ zdarzenia, który spowodował śledzenia."
    - id: id
      type: System.Int32
      description: "Identyfikator numeryczny dla zdarzenia."
    - id: format
      type: System.String
      description: "Ciąg formatu, który zawiera zero lub więcej elementów formatu, które odnoszą się do obiektów w `args` tablicy."
    - id: args
      type: System.Object[]
      description: "<xref uid=&quot;langword_csharp_object&quot; name=&quot;object&quot; href=&quot;&quot;> </xref> Tablicę zawierającą zero lub więcej obiektów do formatowania."
  overload: System.Diagnostics.TraceListener.TraceEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceOutputOptions
  id: TraceOutputOptions
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceOutputOptions
  nameWithType: TraceListener.TraceOutputOptions
  fullName: System.Diagnostics.TraceListener.TraceOutputOptions
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Pobiera lub ustawia opcje danych wyjściowych śledzenia."
  remarks: "Właściwość TraceOutputOptions określa opcjonalne zawartości danych wyjściowych śledzenia. Właściwość można ustawić w pliku konfiguracji lub programowo podczas wykonywania uwzględnienie dodatkowych danych specjalnie z myślą o sekcji kodu. Na przykład można ustawić właściwości TraceOutputOptions dla obiektu nasłuchującego śledzenia konsoli do <xref:System.Diagnostics.TraceOptions?displayProperty=fullName>można dodać informacje stosu wywołań do danych wyjściowych śledzenia.</xref:System.Diagnostics.TraceOptions?displayProperty=fullName>       <xref:System.Diagnostics.TraceOptions>Wyliczenie nie jest używana przez następujące klasy i metody:- <xref:System.Diagnostics.EventLogTraceListener>klasy, ponieważ może spowodować duże ilości danych są zapisywane w dzienniku</xref:System.Diagnostics.EventLogTraceListener> </xref:System.Diagnostics.TraceOptions>      - `Write` i `WriteLine` metody <xref:System.Diagnostics.ConsoleTraceListener>, <xref:System.Diagnostics.DefaultTraceListener>, i <xref:System.Diagnostics.TextWriterTraceListener>klasy.</xref:System.Diagnostics.TextWriterTraceListener> </xref:System.Diagnostics.DefaultTraceListener> </xref:System.Diagnostics.ConsoleTraceListener>      - <xref:System.Diagnostics.TraceListener.Write%2A>i <xref:System.Diagnostics.TraceListener.WriteLine%2A>metody <xref:System.Diagnostics.TraceListener>klasy, gdy nie są nadpisywane w klasie pochodnej.</xref:System.Diagnostics.TraceListener> </xref:System.Diagnostics.TraceListener.WriteLine%2A> </xref:System.Diagnostics.TraceListener.Write%2A>"
  example:
  - "The following example shows the setting of the TraceOutputOptions property for a console trace listener. The console trace listener is one of the listeners enumerated in the <xref:System.Diagnostics.TraceSource.Listeners%2A> property of a trace source. This code example is part of a larger example provided for the <xref:System.Diagnostics.TraceSource> class.  \n  \n [!code-cs[System.Diagnostics.TraceSource2#16](~/add/codesnippet/csharp/p-system.diagnostics.tra_9_1.cs)]\n [!code-vb[System.Diagnostics.TraceSource2#16](~/add/codesnippet/visualbasic/p-system.diagnostics.tra_9_1.vb)]"
  syntax:
    content: public System.Diagnostics.TraceOptions TraceOutputOptions { get; set; }
    return:
      type: System.Diagnostics.TraceOptions
      description: "Bitowe połączenie wartości wyliczenia. Wartość domyślna to <xref href=&quot;System.Diagnostics.TraceOptions&quot;> </xref>."
  overload: System.Diagnostics.TraceListener.TraceOutputOptions*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Operacja Set nie powiodła się, ponieważ wartość jest nieprawidłowa."
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  id: TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceTransfer(TraceEventCache,String,Int32,String,Guid)
  nameWithType: TraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)
  fullName: System.Diagnostics.TraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje informacje o śledzeniu, komunikat informacje pokrewne działania tożsamości i zdarzeń do określonych danych wyjściowych odbiornika."
  remarks: "> [!IMPORTANT]> Ta metoda nie jest przeznaczona do wywoływania bezpośrednio przez kod aplikacji, ale przez członków <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, i <xref:System.Diagnostics.TraceSource>klasy, aby zapisywać danych wyjściowych śledzenia.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A>Metoda jest używana dla korelacji powiązanych śladów.</xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A> Wywołania metody TraceTransfer <xref:System.Diagnostics.TraceListener.TraceEvent%2A>metody w celu przetworzenia wywołania z ustawienie poziomu eventType <xref:System.Diagnostics.TraceEventType>i `relatedActivityId` <xref:System.Guid>jako ciąg dołączany do wiadomości.</xref:System.Guid> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.TraceListener.TraceEvent%2A>"
  syntax:
    content: public virtual void TraceTransfer (System.Diagnostics.TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "A <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref> obiekt, który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śledzeniu na stosie."
    - id: source
      type: System.String
      description: "Nazwa używana do identyfikowania dane wyjściowe, zwykle nazwa aplikacji, która wygenerowała zdarzenie śledzenia."
    - id: id
      type: System.Int32
      description: "Identyfikator numeryczny dla zdarzenia."
    - id: message
      type: System.String
      description: "Komunikat do zapisania."
    - id: relatedActivityId
      type: System.Guid
      description: "A <xref:System.Guid>obiektu identyfikowanie powiązane działania.</xref:System.Guid>"
  overload: System.Diagnostics.TraceListener.TraceTransfer*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Write(System.Object)
  id: Write(System.Object)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Write(Object)
  nameWithType: TraceListener.Write(Object)
  fullName: System.Diagnostics.TraceListener.Write(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje wartość obiektu <xref:System.Object.ToString*>metody do odbiornika utworzyć podczas implementowania <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> klasy</xref:System.Object.ToString*>"
  syntax:
    content: public virtual void Write (object o);
    parameters:
    - id: o
      type: System.Object
      description: "<xref:System.Object>Którego pełni kwalifikowaną nazwę klasy mają zostać zapisane.</xref:System.Object>"
  overload: System.Diagnostics.TraceListener.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Write(System.String)
  id: Write(System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Write(String)
  nameWithType: TraceListener.Write(String)
  fullName: System.Diagnostics.TraceListener.Write(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "W przypadku przesłonięcia w klasie pochodnej, zapisuje określony komunikat do odbiornika tworzenia w klasie pochodnej."
  syntax:
    content: public abstract void Write (string message);
    parameters:
    - id: message
      type: System.String
      description: "Komunikat do zapisania."
  overload: System.Diagnostics.TraceListener.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Write(System.Object,System.String)
  id: Write(System.Object,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Write(Object,String)
  nameWithType: TraceListener.Write(Object,String)
  fullName: System.Diagnostics.TraceListener.Write(Object,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Nazwa kategorii i wartość obiektu <xref:System.Object.ToString*>metody do odbiornika utworzyć podczas implementowania <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> klasy</xref:System.Object.ToString*>"
  syntax:
    content: public virtual void Write (object o, string category);
    parameters:
    - id: o
      type: System.Object
      description: "<xref:System.Object>Którego pełni kwalifikowaną nazwę klasy mają zostać zapisane.</xref:System.Object>"
    - id: category
      type: System.String
      description: "Nazwa kategorii, używane do organizowania danych wyjściowych."
  overload: System.Diagnostics.TraceListener.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Write(System.String,System.String)
  id: Write(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Write(String,String)
  nameWithType: TraceListener.Write(String,String)
  fullName: System.Diagnostics.TraceListener.Write(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje nazwę kategorii i komunikat do odbiornika utworzyć podczas implementowania <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> klasy."
  syntax:
    content: public virtual void Write (string message, string category);
    parameters:
    - id: message
      type: System.String
      description: "Komunikat do zapisania."
    - id: category
      type: System.String
      description: "Nazwa kategorii, używane do organizowania danych wyjściowych."
  overload: System.Diagnostics.TraceListener.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.WriteIndent
  id: WriteIndent
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: WriteIndent()
  nameWithType: TraceListener.WriteIndent()
  fullName: System.Diagnostics.TraceListener.WriteIndent()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje wcięcie odbiornika podczas implementowania tej klasy i resetuje <xref:System.Diagnostics.TraceListener.NeedIndent*>właściwości <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Diagnostics.TraceListener.NeedIndent*>"
  remarks: "Ta metoda zapisuje wcięcie i resetuje <xref:System.Diagnostics.TraceListener.NeedIndent%2A>właściwości `false`.</xref:System.Diagnostics.TraceListener.NeedIndent%2A> Wywołanie tej metody, jeśli <xref:System.Diagnostics.TraceListener.NeedIndent%2A>jest `true` kiedy są zastępowanie <xref:System.Diagnostics.TraceListener.Write%2A>i <xref:System.Diagnostics.TraceListener.WriteLine%2A>metody.</xref:System.Diagnostics.TraceListener.WriteLine%2A> </xref:System.Diagnostics.TraceListener.Write%2A> </xref:System.Diagnostics.TraceListener.NeedIndent%2A> Domyślnie ta metoda używa spacji dla wcięć. Rozmiar wcięcie jest określany przez wartości <xref:System.Diagnostics.TraceListener.IndentSize%2A>i <xref:System.Diagnostics.TraceListener.IndentLevel%2A>Właściwości.</xref:System.Diagnostics.TraceListener.IndentLevel%2A> </xref:System.Diagnostics.TraceListener.IndentSize%2A> <xref:System.Diagnostics.TraceListener.IndentLevel%2A>Właściwość reprezentuje liczbę wcięcie rozmiar określony przez <xref:System.Diagnostics.TraceListener.IndentSize%2A>właściwość jest stosowana.</xref:System.Diagnostics.TraceListener.IndentSize%2A> </xref:System.Diagnostics.TraceListener.IndentLevel%2A> Ta metoda jest wywoływana przez <xref:System.Diagnostics.DefaultTraceListener>i <xref:System.Diagnostics.TextWriterTraceListener>klasy.</xref:System.Diagnostics.TextWriterTraceListener> </xref:System.Diagnostics.DefaultTraceListener>"
  syntax:
    content: protected virtual void WriteIndent ();
    parameters: []
  overload: System.Diagnostics.TraceListener.WriteIndent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.WriteLine(System.Object)
  id: WriteLine(System.Object)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: WriteLine(Object)
  nameWithType: TraceListener.WriteLine(Object)
  fullName: System.Diagnostics.TraceListener.WriteLine(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje wartość obiektu <xref:System.Object.ToString*>metody do odbiornika utworzyć podczas implementowania <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> klasy, a następnie terminator wiersza.</xref:System.Object.ToString*>"
  remarks: "Terminator wiersza typowe, które mogą zaimplementować jest znak powrotu karetki następuje wysuwu wiersza (\\r)."
  syntax:
    content: public virtual void WriteLine (object o);
    parameters:
    - id: o
      type: System.Object
      description: "<xref:System.Object>Którego pełni kwalifikowaną nazwę klasy mają zostać zapisane.</xref:System.Object>"
  overload: System.Diagnostics.TraceListener.WriteLine*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.WriteLine(System.String)
  id: WriteLine(System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: WriteLine(String)
  nameWithType: TraceListener.WriteLine(String)
  fullName: System.Diagnostics.TraceListener.WriteLine(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "W przypadku przesłonięcia w klasie pochodnej, zapisuje komunikat do odbiornika tworzenia klasy pochodnej, a następnie terminator wiersza."
  remarks: "Terminator wiersza typowe, które mogą zaimplementować jest znak powrotu karetki następuje wysuwu wiersza (\\r)."
  syntax:
    content: public abstract void WriteLine (string message);
    parameters:
    - id: message
      type: System.String
      description: "Komunikat do zapisania."
  overload: System.Diagnostics.TraceListener.WriteLine*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
  id: WriteLine(System.Object,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: WriteLine(Object,String)
  nameWithType: TraceListener.WriteLine(Object,String)
  fullName: System.Diagnostics.TraceListener.WriteLine(Object,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Nazwa kategorii i wartość obiektu <xref:System.Object.ToString*>metody do odbiornika utworzyć podczas implementowania <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> klasy, a następnie terminator wiersza.</xref:System.Object.ToString*>"
  remarks: "Terminator wiersza typowe, które mogą zaimplementować jest znak powrotu karetki następuje wysuwu wiersza (\\r)."
  syntax:
    content: public virtual void WriteLine (object o, string category);
    parameters:
    - id: o
      type: System.Object
      description: "<xref:System.Object>Którego pełni kwalifikowaną nazwę klasy mają zostać zapisane.</xref:System.Object>"
    - id: category
      type: System.String
      description: "Nazwa kategorii, używane do organizowania danych wyjściowych."
  overload: System.Diagnostics.TraceListener.WriteLine*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
  id: WriteLine(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: WriteLine(String,String)
  nameWithType: TraceListener.WriteLine(String,String)
  fullName: System.Diagnostics.TraceListener.WriteLine(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Zapisuje nazwę kategorii i komunikat do odbiornika utworzyć podczas implementowania <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> klasy, a następnie terminator wiersza."
  remarks: "Terminator wiersza typowe, które mogą zaimplementować jest znak powrotu karetki następuje wysuwu wiersza (\\r)."
  syntax:
    content: public virtual void WriteLine (string message, string category);
    parameters:
    - id: message
      type: System.String
      description: "Komunikat do zapisania."
    - id: category
      type: System.String
      description: "Nazwa kategorii, używane do organizowania danych wyjściowych."
  overload: System.Diagnostics.TraceListener.WriteLine*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Diagnostics.TraceListener.#ctor
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceListener()
  nameWithType: TraceListener.TraceListener()
  fullName: System.Diagnostics.TraceListener.TraceListener()
- uid: System.Diagnostics.TraceListener.#ctor(System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceListener(String)
  nameWithType: TraceListener.TraceListener(String)
  fullName: System.Diagnostics.TraceListener.TraceListener(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.TraceListener.Attributes
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Attributes
  nameWithType: TraceListener.Attributes
  fullName: System.Diagnostics.TraceListener.Attributes
- uid: System.Collections.Specialized.StringDictionary
  parent: System.Collections.Specialized
  isExternal: false
  name: StringDictionary
  nameWithType: StringDictionary
  fullName: System.Collections.Specialized.StringDictionary
- uid: System.Diagnostics.TraceListener.Close
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Close()
  nameWithType: TraceListener.Close()
  fullName: System.Diagnostics.TraceListener.Close()
- uid: System.Diagnostics.TraceListener.Dispose
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Dispose()
  nameWithType: TraceListener.Dispose()
  fullName: System.Diagnostics.TraceListener.Dispose()
- uid: System.Diagnostics.TraceListener.Dispose(System.Boolean)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: TraceListener.Dispose(Boolean)
  fullName: System.Diagnostics.TraceListener.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.TraceListener.Fail(System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Fail(String)
  nameWithType: TraceListener.Fail(String)
  fullName: System.Diagnostics.TraceListener.Fail(String)
- uid: System.Diagnostics.TraceListener.Fail(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Fail(String,String)
  nameWithType: TraceListener.Fail(String,String)
  fullName: System.Diagnostics.TraceListener.Fail(String,String)
- uid: System.Diagnostics.TraceListener.Filter
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Filter
  nameWithType: TraceListener.Filter
  fullName: System.Diagnostics.TraceListener.Filter
- uid: System.Diagnostics.TraceFilter
  parent: System.Diagnostics
  isExternal: false
  name: TraceFilter
  nameWithType: TraceFilter
  fullName: System.Diagnostics.TraceFilter
- uid: System.Diagnostics.TraceListener.Flush
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Flush()
  nameWithType: TraceListener.Flush()
  fullName: System.Diagnostics.TraceListener.Flush()
- uid: System.Diagnostics.TraceListener.GetSupportedAttributes
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: GetSupportedAttributes()
  nameWithType: TraceListener.GetSupportedAttributes()
  fullName: System.Diagnostics.TraceListener.GetSupportedAttributes()
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.TraceListener.IndentLevel
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: IndentLevel
  nameWithType: TraceListener.IndentLevel
  fullName: System.Diagnostics.TraceListener.IndentLevel
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.TraceListener.IndentSize
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: IndentSize
  nameWithType: TraceListener.IndentSize
  fullName: System.Diagnostics.TraceListener.IndentSize
- uid: System.Diagnostics.TraceListener.IsThreadSafe
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: IsThreadSafe
  nameWithType: TraceListener.IsThreadSafe
  fullName: System.Diagnostics.TraceListener.IsThreadSafe
- uid: System.Diagnostics.TraceListener.Name
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Name
  nameWithType: TraceListener.Name
  fullName: System.Diagnostics.TraceListener.Name
- uid: System.Diagnostics.TraceListener.NeedIndent
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: NeedIndent
  nameWithType: TraceListener.NeedIndent
  fullName: System.Diagnostics.TraceListener.NeedIndent
- uid: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: System.Diagnostics.TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
- uid: System.Diagnostics.TraceEventCache
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventCache
  nameWithType: TraceEventCache
  fullName: System.Diagnostics.TraceEventCache
- uid: System.Diagnostics.TraceEventType
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventType
  nameWithType: TraceEventType
  fullName: System.Diagnostics.TraceEventType
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: System.Diagnostics.TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32)
  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32)
  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32)
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
- uid: System.Diagnostics.TraceListener.TraceOutputOptions
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceOutputOptions
  nameWithType: TraceListener.TraceOutputOptions
  fullName: System.Diagnostics.TraceListener.TraceOutputOptions
- uid: System.Diagnostics.TraceOptions
  parent: System.Diagnostics
  isExternal: false
  name: TraceOptions
  nameWithType: TraceOptions
  fullName: System.Diagnostics.TraceOptions
- uid: System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceTransfer(TraceEventCache,String,Int32,String,Guid)
  nameWithType: TraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)
  fullName: System.Diagnostics.TraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Diagnostics.TraceListener.Write(System.Object)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Write(Object)
  nameWithType: TraceListener.Write(Object)
  fullName: System.Diagnostics.TraceListener.Write(Object)
- uid: System.Diagnostics.TraceListener.Write(System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Write(String)
  nameWithType: TraceListener.Write(String)
  fullName: System.Diagnostics.TraceListener.Write(String)
- uid: System.Diagnostics.TraceListener.Write(System.Object,System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Write(Object,String)
  nameWithType: TraceListener.Write(Object,String)
  fullName: System.Diagnostics.TraceListener.Write(Object,String)
- uid: System.Diagnostics.TraceListener.Write(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Write(String,String)
  nameWithType: TraceListener.Write(String,String)
  fullName: System.Diagnostics.TraceListener.Write(String,String)
- uid: System.Diagnostics.TraceListener.WriteIndent
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteIndent()
  nameWithType: TraceListener.WriteIndent()
  fullName: System.Diagnostics.TraceListener.WriteIndent()
- uid: System.Diagnostics.TraceListener.WriteLine(System.Object)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteLine(Object)
  nameWithType: TraceListener.WriteLine(Object)
  fullName: System.Diagnostics.TraceListener.WriteLine(Object)
- uid: System.Diagnostics.TraceListener.WriteLine(System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteLine(String)
  nameWithType: TraceListener.WriteLine(String)
  fullName: System.Diagnostics.TraceListener.WriteLine(String)
- uid: System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteLine(Object,String)
  nameWithType: TraceListener.WriteLine(Object,String)
  fullName: System.Diagnostics.TraceListener.WriteLine(Object,String)
- uid: System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteLine(String,String)
  nameWithType: TraceListener.WriteLine(String,String)
  fullName: System.Diagnostics.TraceListener.WriteLine(String,String)
- uid: System.Diagnostics.TraceListener.#ctor*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceListener
  nameWithType: TraceListener.TraceListener
- uid: System.Diagnostics.TraceListener.Attributes*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Attributes
  nameWithType: TraceListener.Attributes
- uid: System.Diagnostics.TraceListener.Close*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Close
  nameWithType: TraceListener.Close
- uid: System.Diagnostics.TraceListener.Dispose*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Dispose
  nameWithType: TraceListener.Dispose
- uid: System.Diagnostics.TraceListener.Fail*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Fail
  nameWithType: TraceListener.Fail
- uid: System.Diagnostics.TraceListener.Filter*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Filter
  nameWithType: TraceListener.Filter
- uid: System.Diagnostics.TraceListener.Flush*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Flush
  nameWithType: TraceListener.Flush
- uid: System.Diagnostics.TraceListener.GetSupportedAttributes*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: GetSupportedAttributes
  nameWithType: TraceListener.GetSupportedAttributes
- uid: System.Diagnostics.TraceListener.IndentLevel*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: IndentLevel
  nameWithType: TraceListener.IndentLevel
- uid: System.Diagnostics.TraceListener.IndentSize*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: IndentSize
  nameWithType: TraceListener.IndentSize
- uid: System.Diagnostics.TraceListener.IsThreadSafe*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: IsThreadSafe
  nameWithType: TraceListener.IsThreadSafe
- uid: System.Diagnostics.TraceListener.Name*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Name
  nameWithType: TraceListener.Name
- uid: System.Diagnostics.TraceListener.NeedIndent*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: NeedIndent
  nameWithType: TraceListener.NeedIndent
- uid: System.Diagnostics.TraceListener.TraceData*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceData
  nameWithType: TraceListener.TraceData
- uid: System.Diagnostics.TraceListener.TraceEvent*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceEvent
  nameWithType: TraceListener.TraceEvent
- uid: System.Diagnostics.TraceListener.TraceOutputOptions*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceOutputOptions
  nameWithType: TraceListener.TraceOutputOptions
- uid: System.Diagnostics.TraceListener.TraceTransfer*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceTransfer
  nameWithType: TraceListener.TraceTransfer
- uid: System.Diagnostics.TraceListener.Write*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Write
  nameWithType: TraceListener.Write
- uid: System.Diagnostics.TraceListener.WriteIndent*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteIndent
  nameWithType: TraceListener.WriteIndent
- uid: System.Diagnostics.TraceListener.WriteLine*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteLine
  nameWithType: TraceListener.WriteLine
