### YamlMime:ManagedReference
items:
- uid: System.Runtime.Hosting.ApplicationActivator
  id: ApplicationActivator
  children:
  - System.Runtime.Hosting.ApplicationActivator.#ctor
  - System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)
  - System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])
  - System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)
  langs:
  - csharp
  name: ApplicationActivator
  nameWithType: ApplicationActivator
  fullName: System.Runtime.Hosting.ApplicationActivator
  type: Class
  summary: "Udostępnia klasę podstawową dla aktywacji opartej na manifest zestawów."
  remarks: "Jest pojedynczym wystąpieniem wyznaczonych klasy ApplicationActivator w każdym <xref:System.AppDomain>które aktywacji wszystkich wywołań są kierowane.</xref:System.AppDomain> <xref:System.AppDomainManager>Dla bieżącego <xref:System.AppDomain>zapewniają własne niestandardowe ApplicationActivator w tym celu.</xref:System.AppDomain> </xref:System.AppDomainManager> Jeśli nie podano ApplicationActivator niestandardowych, domyślnych ApplicationActivator tworzone jest wystąpienie.       W poniższych krokach opisano zachowanie domyślne <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A>implementacji metody: 1.</xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A>  Sprawdza, czy <xref:System.ActivationContext>dodatków być aktywowana dopasowań <xref:System.ActivationContext>bieżącej domeny; w przeciwnym razie będzie kontynuowane do kroku 2.</xref:System.ActivationContext> </xref:System.ActivationContext> W przeciwnym razie wykonuje zestaw i zwraca wynik otoczona dojścia obiektu.      2.  Aktywuje nowe <xref:System.AppDomain>.</xref:System.AppDomain> dodatku Należy podjąć następujące kroki zainicjować nowe <xref:System.AppDomain>przy użyciu <xref:System.Runtime.Hosting.ActivationArguments>dla dodatek</xref:System.Runtime.Hosting.ActivationArguments> </xref:System.AppDomain>          1.  Tworzy nowy <xref:System.AppDomainSetup>obiekt przy użyciu <xref:System.Runtime.Hosting.ActivationArguments>obiektu zawierającego kontekst aktywacji dodatek</xref:System.Runtime.Hosting.ActivationArguments> </xref:System.AppDomainSetup>          2.  Wywołania <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>metodę w celu utworzenia nowej domeny za pomocą <xref:System.AppDomainSetup>obiektu.</xref:System.AppDomainSetup> </xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>          3.  <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>Metoda wywołuje <xref:System.Security.HostSecurityManager.DetermineApplicationTrust%2A?displayProperty=fullName>metodę, aby uzyskać <xref:System.Security.Policy.ApplicationTrust>obiekt dodatek</xref:System.Security.Policy.ApplicationTrust> </xref:System.Security.HostSecurityManager.DetermineApplicationTrust%2A?displayProperty=fullName> </xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> Jeśli <xref:System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun%2A>zwraca `true`, dodatek jest wykonywany.</xref:System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun%2A> Jeśli nie, <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>zgłasza <xref:System.Security.Policy.PolicyException>wskazujący, że nie można uzyskać uprawnienia do wykonywania.</xref:System.Security.Policy.PolicyException> </xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>          4.  Jeśli dodatek jest zaufany do uruchomienia, a następnie nowy <xref:System.AppDomain>został utworzony i skonfigurowany do <xref:System.ActivationContext>dodatków, i dodatek jest załadowany i wykonano.</xref:System.ActivationContext> </xref:System.AppDomain>          5.  Wynik aktywacji dodatek jest zwracana w dojścia obiektu.       Niestandardowe aktywatora można dostosować aktywacji dodatek do określonego zestawu okolicznościach. Na przykład aktywatora niestandardowych można znaleźć istniejącego <xref:System.AppDomain>aktywować tego dodatku zamiast tworzenia nowej domeny zawsze.</xref:System.AppDomain>       W poniższych krokach opisano zachowanie ApplicationActivator niestandardowego, który uaktywnia dodatku w istniejącym <xref:System.AppDomain>: 1.</xref:System.AppDomain>  Niestandardowe aktywatora znajduje domeny, który ma taką samą <xref:System.ActivationContext>jako dodatek, który jest aktywowane.</xref:System.ActivationContext>      2.  Jeśli <xref:System.ActivationContext>nigdy nie zarejestrowano przed w procesie, niestandardowe aktywatora tworzy nowy <xref:System.AppDomain>dla tej <xref:System.ActivationContext>przez wywołanie <xref:System.AppDomain.CreateDomain%2A>metody bezpośrednio, lub delegowanie działanie <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>w klasie podstawowej.</xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> </xref:System.AppDomain.CreateDomain%2A> </xref:System.ActivationContext> </xref:System.AppDomain> </xref:System.ActivationContext>      3.  W przypadku istniejącej domeny o tej samej <xref:System.ActivationContext>, a następnie można oddelegować aktywatora <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A>Wywołanie metody ApplicationActivator w domenie docelowej.</xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A> </xref:System.ActivationContext> Należy pamiętać, że będzie to wywołanie międzydomenowego ApplicationActivator, który znajduje się w lokalizacji docelowej <xref:System.AppDomain>.</xref:System.AppDomain>"
  example:
  - "The following code example shows how to obtain an ApplicationActivator object from the current <xref:System.AppDomain.DomainManager%2A> for a manifest-based application.  \n  \n [!code-vb[System.Runtime.Hosting.ApplicationActivator#1](~/add/codesnippet/visualbasic/t-system.runtime.hosting_0_1.vb)]\n [!code-cs[System.Runtime.Hosting.ApplicationActivator#1](~/add/codesnippet/csharp/t-system.runtime.hosting_0_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class ApplicationActivator
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.Hosting.ApplicationActivator.#ctor
  id: '#ctor'
  parent: System.Runtime.Hosting.ApplicationActivator
  langs:
  - csharp
  name: ApplicationActivator()
  nameWithType: ApplicationActivator.ApplicationActivator()
  fullName: System.Runtime.Hosting.ApplicationActivator.ApplicationActivator()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime.Hosting
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Runtime.Hosting.ApplicationActivator&quot;> </xref> klasy."
  syntax:
    content: public ApplicationActivator ();
    parameters: []
  overload: System.Runtime.Hosting.ApplicationActivator.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)
  id: CreateInstance(System.ActivationContext)
  parent: System.Runtime.Hosting.ApplicationActivator
  langs:
  - csharp
  name: CreateInstance(ActivationContext)
  nameWithType: ApplicationActivator.CreateInstance(ActivationContext)
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstance(ActivationContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Hosting
  summary: "Tworzy wystąpienie aplikacji do aktywacji, przy użyciu kontekstu aktywacji określony."
  remarks: "Ta metoda jest przeznaczona dla aktywacji na podstawie manifestu aplikacji."
  syntax:
    content: public virtual System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext);
    parameters:
    - id: activationContext
      type: System.ActivationContext
      description: "<xref href=&quot;System.ActivationContext&quot;> </xref> , Które identyfikują aplikacji, aby aktywować."
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: "<xref href=&quot;System.Runtime.Remoting.ObjectHandle&quot;> </xref> Czyli otoki dla wartości zwracanej wykonywania aplikacji. Zwracana wartość musi być odkodowany dostępu do rzeczywistego obiektu."
  overload: System.Runtime.Hosting.ApplicationActivator.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>activationContext</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])
  id: CreateInstance(System.ActivationContext,System.String[])
  parent: System.Runtime.Hosting.ApplicationActivator
  langs:
  - csharp
  name: CreateInstance(ActivationContext,String[])
  nameWithType: ApplicationActivator.CreateInstance(ActivationContext,String[])
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstance(ActivationContext,String[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Hosting
  summary: "Tworzy wystąpienie aplikacji do aktywacji, używając kontekstu aktywacji określonej i danych niestandardowych aktywacji."
  remarks: "Ta metoda jest przeznaczona dla aktywacji na podstawie manifestu aplikacji. Dane aktywacji składa się z informacje, takie jak część ciągu zapytania adresu URL."
  syntax:
    content: public virtual System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext, string[] activationCustomData);
    parameters:
    - id: activationContext
      type: System.ActivationContext
      description: "<xref href=&quot;System.ActivationContext&quot;> </xref> , Które identyfikują aplikacji, aby aktywować."
    - id: activationCustomData
      type: System.String[]
      description: "Dane niestandardowe aktywacji."
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: "<xref href=&quot;System.Runtime.Remoting.ObjectHandle&quot;> </xref> Czyli otoki dla wartości zwracanej wykonywania aplikacji. Zwracana wartość musi być odkodowany dostępu do rzeczywistego obiektu."
  overload: System.Runtime.Hosting.ApplicationActivator.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>activationContext</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)
  id: CreateInstanceHelper(System.AppDomainSetup)
  parent: System.Runtime.Hosting.ApplicationActivator
  langs:
  - csharp
  name: CreateInstanceHelper(AppDomainSetup)
  nameWithType: ApplicationActivator.CreateInstanceHelper(AppDomainSetup)
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(AppDomainSetup)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Hosting
  summary: "Tworzy wystąpienie aplikacji przy użyciu określonego <xref href=&quot;System.AppDomainSetup&quot;> </xref> obiektu."
  remarks: "Ta metoda jest przeznaczona dla aktywacji na podstawie manifestu aplikacji."
  syntax:
    content: protected static System.Runtime.Remoting.ObjectHandle CreateInstanceHelper (AppDomainSetup adSetup);
    parameters:
    - id: adSetup
      type: System.AppDomainSetup
      description: "<xref href=&quot;System.AppDomainSetup&quot;> </xref> Którego <xref:System.AppDomainSetup.ActivationArguments*>Właściwości identyfikuje aplikację do aktywowania.</xref:System.AppDomainSetup.ActivationArguments*>"
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: "<xref href=&quot;System.Runtime.Remoting.ObjectHandle&quot;> </xref> Czyli otoki dla wartości zwracanej wykonywania aplikacji. Zwracana wartość musi być odkodowany dostępu do rzeczywistego obiektu."
  overload: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref:System.AppDomainSetup.ActivationArguments*> property of <code>adSetup </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.</xref:System.AppDomainSetup.ActivationArguments*>"
  - type: System.Security.Policy.PolicyException
    commentId: T:System.Security.Policy.PolicyException
    description: "Wystąpienie aplikacji nie można wykonać operacji, ponieważ ustawienia zasad w bieżącej domenie aplikacji nie zostaną określone uprawnienia dla tej aplikacji do uruchamiania."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Policy.PolicyException
  parent: System.Security.Policy
  isExternal: false
  name: PolicyException
  nameWithType: PolicyException
  fullName: System.Security.Policy.PolicyException
- uid: System.Runtime.Hosting.ApplicationActivator.#ctor
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: ApplicationActivator()
  nameWithType: ApplicationActivator.ApplicationActivator()
  fullName: System.Runtime.Hosting.ApplicationActivator.ApplicationActivator()
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: CreateInstance(ActivationContext)
  nameWithType: ApplicationActivator.CreateInstance(ActivationContext)
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstance(ActivationContext)
- uid: System.Runtime.Remoting.ObjectHandle
  parent: System.Runtime.Remoting
  isExternal: false
  name: ObjectHandle
  nameWithType: ObjectHandle
  fullName: System.Runtime.Remoting.ObjectHandle
- uid: System.ActivationContext
  parent: System
  isExternal: false
  name: ActivationContext
  nameWithType: ActivationContext
  fullName: System.ActivationContext
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: CreateInstance(ActivationContext,String[])
  nameWithType: ApplicationActivator.CreateInstance(ActivationContext,String[])
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstance(ActivationContext,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: CreateInstanceHelper(AppDomainSetup)
  nameWithType: ApplicationActivator.CreateInstanceHelper(AppDomainSetup)
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(AppDomainSetup)
- uid: System.AppDomainSetup
  parent: System
  isExternal: false
  name: AppDomainSetup
  nameWithType: AppDomainSetup
  fullName: System.AppDomainSetup
- uid: System.Runtime.Hosting.ApplicationActivator.#ctor*
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: ApplicationActivator
  nameWithType: ApplicationActivator.ApplicationActivator
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstance*
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: CreateInstance
  nameWithType: ApplicationActivator.CreateInstance
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper*
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: CreateInstanceHelper
  nameWithType: ApplicationActivator.CreateInstanceHelper
