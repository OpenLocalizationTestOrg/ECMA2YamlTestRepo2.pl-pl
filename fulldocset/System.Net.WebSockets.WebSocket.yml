### YamlMime:ManagedReference
items:
- uid: System.Net.WebSockets.WebSocket
  id: WebSocket
  children:
  - System.Net.WebSockets.WebSocket.#ctor
  - System.Net.WebSockets.WebSocket.Abort
  - System.Net.WebSockets.WebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  - System.Net.WebSockets.WebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  - System.Net.WebSockets.WebSocket.CloseStatus
  - System.Net.WebSockets.WebSocket.CloseStatusDescription
  - System.Net.WebSockets.WebSocket.CreateClientBuffer(System.Int32,System.Int32)
  - System.Net.WebSockets.WebSocket.CreateClientWebSocket(System.IO.Stream,System.String,System.Int32,System.Int32,System.TimeSpan,System.Boolean,System.ArraySegment{System.Byte})
  - System.Net.WebSockets.WebSocket.CreateServerBuffer(System.Int32)
  - System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval
  - System.Net.WebSockets.WebSocket.Dispose
  - System.Net.WebSockets.WebSocket.IsApplicationTargeting45
  - System.Net.WebSockets.WebSocket.IsStateTerminal(System.Net.WebSockets.WebSocketState)
  - System.Net.WebSockets.WebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  - System.Net.WebSockets.WebSocket.RegisterPrefixes
  - System.Net.WebSockets.WebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  - System.Net.WebSockets.WebSocket.State
  - System.Net.WebSockets.WebSocket.SubProtocol
  - System.Net.WebSockets.WebSocket.ThrowOnInvalidState(System.Net.WebSockets.WebSocketState,System.Net.WebSockets.WebSocketState[])
  langs:
  - csharp
  name: WebSocket
  nameWithType: WebSocket
  fullName: System.Net.WebSockets.WebSocket
  type: Class
  summary: "Klasa WebSocket umożliwia aplikacjom wysyłać i odbierać dane, po zakończeniu uaktualnienia obiektu WebSocket."
  remarks: "Niektóre z klas w <xref:System.Net.WebSockets>przestrzeni nazw są obsługiwane w systemie Windows 7, Windows Vista z dodatkiem SP2 i Windows Server 2008.</xref:System.Net.WebSockets> Jednak tylko publiczne implementacji klienta i serwera Websocket są obsługiwane w systemie Windows 8 i Windows Server 2012. Klasy i elementy klasy w <xref:System.Net.WebSockets>przestrzeni nazw, które są obsługiwane w systemie Windows 7, Windows Vista z dodatkiem SP2 i Windows Server 2008 są klas abstrakcyjnych.</xref:System.Net.WebSockets> Dzięki temu deweloper aplikacji dziedziczyć i rozszerzyć tych klas abstrakcyjnych z rzeczywista implementacja klienta Websocket."
  syntax:
    content: 'public abstract class WebSocket : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.#ctor
  id: '#ctor'
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: WebSocket()
  nameWithType: WebSocket.WebSocket()
  fullName: System.Net.WebSockets.WebSocket.WebSocket()
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Tworzy wystąpienie <xref href=&quot;System.Net.WebSockets.WebSocket&quot;> </xref> klasy."
  syntax:
    content: protected WebSocket ();
    parameters: []
  overload: System.Net.WebSockets.WebSocket.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.Abort
  id: Abort
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: Abort()
  nameWithType: WebSocket.Abort()
  fullName: System.Net.WebSockets.WebSocket.Abort()
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Przerywa połączenie WebSocket i anuluje wszystkie oczekujące operacje We/Wy."
  syntax:
    content: public abstract void Abort ();
    parameters: []
  overload: System.Net.WebSockets.WebSocket.Abort*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  id: CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: WebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Zamyka połączenie WebSocket jako operację asynchroniczną za pomocą procedury uzgadniania zamknięcia zdefiniowane w [Specyfikacja protokołu WebSocket](http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-06) sekcji 7."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócona <xref:System.Threading.Tasks.Task>obiektu ukończy po zamknięciu protokołu WebSocket.</xref:System.Threading.Tasks.Task>       Ta metoda powoduje zamknięcie połączenia obiektu WebSocket za pomocą procedury uzgadniania zamknięcia zdefiniowane w [Specyfikacja protokołu WebSocket](http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-06) sekcji 7."
  syntax:
    content: public abstract System.Threading.Tasks.Task CloseAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: closeStatus
      type: System.Net.WebSockets.WebSocketCloseStatus
      description: "Określa przyczynę zamknięcia połączenia obiektu WebSocket."
    - id: statusDescription
      type: System.String
      description: "Określa człowieka czytelny wyjaśnieniem przyczyny połączenie jest zamknięte."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Token, który może służyć do propagacji powiadomień operacje powinny być anulowane."
    return:
      type: System.Threading.Tasks.Task
      description: "Zwraca <xref:System.Threading.Tasks.Task>.</xref:System.Threading.Tasks.Task>       Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.WebSockets.WebSocket.CloseAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  id: CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: WebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Inicjuje lub zakończeniu procedury uzgadniania zamknięcia zdefiniowane w [Specyfikacja protokołu WebSocket sekcji 7](http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-06)."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócona <xref:System.Threading.Tasks.Task>obiektu ukończy po zamknięciu dane wyjściowe w protokołu WebSocket.</xref:System.Threading.Tasks.Task>"
  syntax:
    content: public abstract System.Threading.Tasks.Task CloseOutputAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: closeStatus
      type: System.Net.WebSockets.WebSocketCloseStatus
      description: "Określa przyczynę zamknięcia połączenia obiektu WebSocket."
    - id: statusDescription
      type: System.String
      description: "Umożliwia aplikacjom określenie człowieka czytelny wyjaśnieniem przyczyny połączenie jest zamknięte."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Token, który może służyć do propagacji powiadomień operacje powinny być anulowane."
    return:
      type: System.Threading.Tasks.Task
      description: "Zwraca <xref:System.Threading.Tasks.Task>.</xref:System.Threading.Tasks.Task>       Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.WebSockets.WebSocket.CloseOutputAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.CloseStatus
  id: CloseStatus
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: CloseStatus
  nameWithType: WebSocket.CloseStatus
  fullName: System.Net.WebSockets.WebSocket.CloseStatus
  type: Property
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Wskazuje przyczyny, dlaczego zdalny punkt końcowy zainicjował procedury uzgadniania zamknięcia."
  remarks: "Jeśli nie została jeszcze zainicjowana procedury uzgadniania zamknięcia, zwracany jest WebSocketCloseStatus.None."
  syntax:
    content: public abstract Nullable<System.Net.WebSockets.WebSocketCloseStatus> CloseStatus { get; }
    return:
      type: System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}
      description: "Returns <xref href=&quot;System.Net.WebSockets.WebSocketCloseStatus&quot;></xref>."
  overload: System.Net.WebSockets.WebSocket.CloseStatus*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.CloseStatusDescription
  id: CloseStatusDescription
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: CloseStatusDescription
  nameWithType: WebSocket.CloseStatusDescription
  fullName: System.Net.WebSockets.WebSocket.CloseStatusDescription
  type: Property
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Umożliwia zdalny punkt końcowy opisujący przyczynę, dlaczego połączenie zostało zamknięte."
  syntax:
    content: public abstract string CloseStatusDescription { get; }
    return:
      type: System.String
      description: "Zwraca <xref:System.String>.</xref:System.String>"
  overload: System.Net.WebSockets.WebSocket.CloseStatusDescription*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.CreateClientBuffer(System.Int32,System.Int32)
  id: CreateClientBuffer(System.Int32,System.Int32)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: CreateClientBuffer(Int32,Int32)
  nameWithType: WebSocket.CreateClientBuffer(Int32,Int32)
  fullName: System.Net.WebSockets.WebSocket.CreateClientBuffer(Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Tworzenie klienta buforów do użycia z tym <xref href=&quot;System.Net.WebSockets.WebSocket&quot;> </xref> wystąpienia."
  syntax:
    content: public static ArraySegment<byte> CreateClientBuffer (int receiveBufferSize, int sendBufferSize);
    parameters:
    - id: receiveBufferSize
      type: System.Int32
      description: "Rozmiar w bajtach klienta bufor odbioru."
    - id: sendBufferSize
      type: System.Int32
      description: "Rozmiar w bajtach buforu wysyłania."
    return:
      type: System.ArraySegment{System.Byte}
      description: "Zwraca &lt;xref:System.ArraySegment%601&gt;.       Tablica z buforów klienta."
  overload: System.Net.WebSockets.WebSocket.CreateClientBuffer*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.CreateClientWebSocket(System.IO.Stream,System.String,System.Int32,System.Int32,System.TimeSpan,System.Boolean,System.ArraySegment{System.Byte})
  id: CreateClientWebSocket(System.IO.Stream,System.String,System.Int32,System.Int32,System.TimeSpan,System.Boolean,System.ArraySegment{System.Byte})
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: CreateClientWebSocket(Stream,String,Int32,Int32,TimeSpan,Boolean,ArraySegment<Byte>)
  nameWithType: WebSocket.CreateClientWebSocket(Stream,String,Int32,Int32,TimeSpan,Boolean,ArraySegment<Byte>)
  fullName: System.Net.WebSockets.WebSocket.CreateClientWebSocket(Stream,String,Int32,Int32,TimeSpan,Boolean,ArraySegment<Byte>)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Ten interfejs API obsługuje infrastrukturę .NET Framework i nie jest przeznaczona do użycia bezpośrednio w kodzie.       Umożliwia wywoływania można utworzyć klasy WebSocket po stronie klienta, który będzie używany WSPC do celów ramek."
  syntax:
    content: public static System.Net.WebSockets.WebSocket CreateClientWebSocket (System.IO.Stream innerStream, string subProtocol, int receiveBufferSize, int sendBufferSize, TimeSpan keepAliveInterval, bool useZeroMaskingKey, ArraySegment<byte> internalBuffer);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "Połączenie do użycia dla operacji We/Wy."
    - id: subProtocol
      type: System.String
      description: "Podprotokół zaakceptowane przez klienta."
    - id: receiveBufferSize
      type: System.Int32
      description: "Bufor odbioru rozmiar w bajtach obiektu WebSocket klienta."
    - id: sendBufferSize
      type: System.Int32
      description: "Rozmiar w bajtach obiektu WebSocket klienta wysłać buforu."
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "Określa, jak regularnie ramki jest wysyłany przez połączenie jako keep-alive. Ma zastosowanie tylko wtedy, gdy połączenie jest bezczynne."
    - id: useZeroMaskingKey
      type: System.Boolean
      description: "Wskazuje, czy losowy klucz lub klucz statyczne (tylko zera) powinien być używany dla protokołu WebSocket maskowania."
    - id: internalBuffer
      type: System.ArraySegment{System.Byte}
      description: "Będzie służyć jako wewnętrznego buforu w czy funkcja WPC. Rozmiar musi być co najmniej `2 * ReceiveBufferSize + SendBufferSize + 256 + 20 (16 on 32-bit)`."
    return:
      type: System.Net.WebSockets.WebSocket
      description: "Returns <xref href=&quot;System.Net.WebSockets.WebSocket&quot;></xref>."
  overload: System.Net.WebSockets.WebSocket.CreateClientWebSocket*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.CreateServerBuffer(System.Int32)
  id: CreateServerBuffer(System.Int32)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: CreateServerBuffer(Int32)
  nameWithType: WebSocket.CreateServerBuffer(Int32)
  fullName: System.Net.WebSockets.WebSocket.CreateServerBuffer(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Tworzy buforu serwera protokołu WebSocket."
  syntax:
    content: public static ArraySegment<byte> CreateServerBuffer (int receiveBufferSize);
    parameters:
    - id: receiveBufferSize
      type: System.Int32
      description: "Rozmiar w bajtach żądanego bufora."
    return:
      type: System.ArraySegment{System.Byte}
      description: "Zwraca &lt;xref:System.ArraySegment%601&gt;."
  overload: System.Net.WebSockets.WebSocket.CreateServerBuffer*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval
  id: DefaultKeepAliveInterval
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: DefaultKeepAliveInterval
  nameWithType: WebSocket.DefaultKeepAliveInterval
  fullName: System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval
  type: Property
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Pobiera domyślny WebSocket protokołu keep-alive interwał w milisekundach."
  syntax:
    content: public static TimeSpan DefaultKeepAliveInterval { get; }
    return:
      type: System.TimeSpan
      description: "Zwraca <xref:System.TimeSpan>.</xref:System.TimeSpan>       Domyślny WebSocket protokołu keep-alive interwał w milisekundach. Typowa wartość dla tego interwału wynosi 30 sekund."
  overload: System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.Dispose
  id: Dispose
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: Dispose()
  nameWithType: WebSocket.Dispose()
  fullName: System.Net.WebSockets.WebSocket.Dispose()
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Umożliwia czyszczenie zasobów niezarządzanych dla siebie implementacji i platformy ASP.NET."
  syntax:
    content: public abstract void Dispose ();
    parameters: []
  overload: System.Net.WebSockets.WebSocket.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.IsApplicationTargeting45
  id: IsApplicationTargeting45
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: IsApplicationTargeting45()
  nameWithType: WebSocket.IsApplicationTargeting45()
  fullName: System.Net.WebSockets.WebSocket.IsApplicationTargeting45()
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Zwraca wartość wskazującą, czy instancja WebSocket jest docelowo [!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]."
  syntax:
    content: public static bool IsApplicationTargeting45 ();
    parameters: []
    return:
      type: System.Boolean
      description: "Zwraca <xref:System.Boolean>.</xref:System.Boolean>       <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli <xref href=&quot;System.Net.WebSockets.WebSocket&quot;> </xref> jest docelowo [!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.WebSockets.WebSocket.IsApplicationTargeting45*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.IsStateTerminal(System.Net.WebSockets.WebSocketState)
  id: IsStateTerminal(System.Net.WebSockets.WebSocketState)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: IsStateTerminal(WebSocketState)
  nameWithType: WebSocket.IsStateTerminal(WebSocketState)
  fullName: System.Net.WebSockets.WebSocket.IsStateTerminal(WebSocketState)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Zwraca wartość wskazującą, czy stan wystąpienia obiektu WebSocket jest zamknięty lub zostało przerwane."
  syntax:
    content: protected static bool IsStateTerminal (System.Net.WebSockets.WebSocketState state);
    parameters:
    - id: state
      type: System.Net.WebSockets.WebSocketState
      description: "Bieżący stan protokołu WebSocket."
    return:
      type: System.Boolean
      description: "Zwraca <xref:System.Boolean>.</xref:System.Boolean>       <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli <xref href=&quot;System.Net.WebSockets.WebSocket&quot;> </xref> jest zamknięty lub przerwane; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.WebSockets.WebSocket.IsStateTerminal*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  id: ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  nameWithType: WebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Odbiera dane z <xref href=&quot;System.Net.WebSockets.WebSocket&quot;> </xref> połączenia asynchronicznego."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócony <xref:System.Threading.Tasks.Task%601>obiekt ukończy po otrzymaniu dane na <xref:System.Net.WebSockets.WebSocket>.</xref:System.Net.WebSockets.WebSocket> </xref:System.Threading.Tasks.Task%601>       Dokładnie jeden wysyłania i jeden odbierania jest obsługiwane na każdym <xref:System.Net.WebSockets.WebSocket>obiektu równolegle.</xref:System.Net.WebSockets.WebSocket>"
  syntax:
    content: public abstract System.Threading.Tasks.Task<System.Net.WebSockets.WebSocketReceiveResult> ReceiveAsync (ArraySegment<byte> buffer, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.ArraySegment{System.Byte}
      description: "Odwołuje się do buforu aplikacji, który jest lokalizacja magazynu dla odebranych danych."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Propaguje powiadomienie, że operacje powinny być anulowane."
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}
      description: "Zwraca &lt;xref:System.Threading.Tasks.Task%601&gt;.       Obiekt zadania reprezentujący operację asynchroniczną. &lt;Xref:System.Threading.Tasks.Task%601.Result%2A&gt; zwraca właściwości dla obiektu task <xref:System.Byte>Tablica zawierająca odebranych danych.</xref:System.Byte>"
  overload: System.Net.WebSockets.WebSocket.ReceiveAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.RegisterPrefixes
  id: RegisterPrefixes
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: RegisterPrefixes()
  nameWithType: WebSocket.RegisterPrefixes()
  fullName: System.Net.WebSockets.WebSocket.RegisterPrefixes()
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Ten interfejs API obsługuje infrastrukturę .NET Framework i nie jest przeznaczona do użycia bezpośrednio w kodzie. Umożliwia wywoływania zarejestrować prefiksów dla żądania protokołu WebSocket (ws i programu wss)."
  syntax:
    content: public static void RegisterPrefixes ();
    parameters: []
  overload: System.Net.WebSockets.WebSocket.RegisterPrefixes*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  id: SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  nameWithType: WebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Wysyła dane przez <xref href=&quot;System.Net.WebSockets.WebSocket&quot;> </xref> połączenia asynchronicznego."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócony <xref:System.Threading.Tasks.Task>obiekt ukończy po wysłaniu danych na <xref:System.Net.WebSockets.WebSocket>.</xref:System.Net.WebSockets.WebSocket> </xref:System.Threading.Tasks.Task>       Dokładnie jeden wysyłania i jeden odbierania jest obsługiwane na każdym <xref:System.Net.WebSockets.WebSocket>obiektu równolegle.</xref:System.Net.WebSockets.WebSocket>"
  syntax:
    content: public abstract System.Threading.Tasks.Task SendAsync (ArraySegment<byte> buffer, System.Net.WebSockets.WebSocketMessageType messageType, bool endOfMessage, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.ArraySegment{System.Byte}
      description: "Bufor do wysłania przez połączenie."
    - id: messageType
      type: System.Net.WebSockets.WebSocketMessageType
      description: "Wskazuje, czy aplikacja wysyła dane binarne lub tekst wiadomości."
    - id: endOfMessage
      type: System.Boolean
      description: "Wskazuje, czy dane w &quot;buforu&quot; jest ostatniej części wiadomości."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Token, który propaguje powiadomienie, że operacje powinny być anulowane."
    return:
      type: System.Threading.Tasks.Task
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.WebSockets.WebSocket.SendAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.State
  id: State
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: State
  nameWithType: WebSocket.State
  fullName: System.Net.WebSockets.WebSocket.State
  type: Property
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Zwraca bieżący stan połączenia obiektu WebSocket."
  syntax:
    content: public abstract System.Net.WebSockets.WebSocketState State { get; }
    return:
      type: System.Net.WebSockets.WebSocketState
      description: "Returns <xref href=&quot;System.Net.WebSockets.WebSocketState&quot;></xref>."
  overload: System.Net.WebSockets.WebSocket.State*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.SubProtocol
  id: SubProtocol
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: SubProtocol
  nameWithType: WebSocket.SubProtocol
  fullName: System.Net.WebSockets.WebSocket.SubProtocol
  type: Property
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Podprotokół wynegocjowanym podczas uzgadniania otwierania."
  syntax:
    content: public abstract string SubProtocol { get; }
    return:
      type: System.String
      description: "Zwraca <xref:System.String>.</xref:System.String>"
  overload: System.Net.WebSockets.WebSocket.SubProtocol*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.ThrowOnInvalidState(System.Net.WebSockets.WebSocketState,System.Net.WebSockets.WebSocketState[])
  id: ThrowOnInvalidState(System.Net.WebSockets.WebSocketState,System.Net.WebSockets.WebSocketState[])
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: ThrowOnInvalidState(WebSocketState,WebSocketState[])
  nameWithType: WebSocket.ThrowOnInvalidState(WebSocketState,WebSocketState[])
  fullName: System.Net.WebSockets.WebSocket.ThrowOnInvalidState(WebSocketState,WebSocketState[])
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Sprawdza, czy połączenie jest w oczekiwanym stanem."
  syntax:
    content: protected static void ThrowOnInvalidState (System.Net.WebSockets.WebSocketState state, System.Net.WebSockets.WebSocketState[] validStates);
    parameters:
    - id: state
      type: System.Net.WebSockets.WebSocketState
      description: "Bieżący stan obiektu WebSocket do sprawdzenia z listą prawidłowe stany."
    - id: validStates
      type: System.Net.WebSockets.WebSocketState[]
      description: "Lista stanów prawidłowe połączenie."
  overload: System.Net.WebSockets.WebSocket.ThrowOnInvalidState*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Net.WebSockets.WebSocket.#ctor
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: WebSocket()
  nameWithType: WebSocket.WebSocket()
  fullName: System.Net.WebSockets.WebSocket.WebSocket()
- uid: System.Net.WebSockets.WebSocket.Abort
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: Abort()
  nameWithType: WebSocket.Abort()
  fullName: System.Net.WebSockets.WebSocket.Abort()
- uid: System.Net.WebSockets.WebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: WebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Net.WebSockets.WebSocketCloseStatus
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketCloseStatus
  nameWithType: WebSocketCloseStatus
  fullName: System.Net.WebSockets.WebSocketCloseStatus
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Net.WebSockets.WebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: WebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
- uid: System.Net.WebSockets.WebSocket.CloseStatus
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseStatus
  nameWithType: WebSocket.CloseStatus
  fullName: System.Net.WebSockets.WebSocket.CloseStatus
- uid: System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}
  parent: System
  isExternal: true
  name: Nullable<WebSocketCloseStatus>
  nameWithType: Nullable<WebSocketCloseStatus>
  fullName: System.Nullable<System.Net.WebSockets.WebSocketCloseStatus>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: Nullable<System.Net.WebSockets.WebSocketCloseStatus>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.WebSockets.WebSocketCloseStatus
    name: WebSocketCloseStatus
    nameWithType: WebSocketCloseStatus
    fullName: WebSocketCloseStatus
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.WebSockets.WebSocket.CloseStatusDescription
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseStatusDescription
  nameWithType: WebSocket.CloseStatusDescription
  fullName: System.Net.WebSockets.WebSocket.CloseStatusDescription
- uid: System.Net.WebSockets.WebSocket.CreateClientBuffer(System.Int32,System.Int32)
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CreateClientBuffer(Int32,Int32)
  nameWithType: WebSocket.CreateClientBuffer(Int32,Int32)
  fullName: System.Net.WebSockets.WebSocket.CreateClientBuffer(Int32,Int32)
- uid: System.ArraySegment{System.Byte}
  parent: System
  isExternal: true
  name: ArraySegment<Byte>
  nameWithType: ArraySegment<Byte>
  fullName: System.ArraySegment<System.Byte>
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment<System.Byte>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.WebSockets.WebSocket.CreateClientWebSocket(System.IO.Stream,System.String,System.Int32,System.Int32,System.TimeSpan,System.Boolean,System.ArraySegment{System.Byte})
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CreateClientWebSocket(Stream,String,Int32,Int32,TimeSpan,Boolean,ArraySegment<Byte>)
  nameWithType: WebSocket.CreateClientWebSocket(Stream,String,Int32,Int32,TimeSpan,Boolean,ArraySegment<Byte>)
  fullName: System.Net.WebSockets.WebSocket.CreateClientWebSocket(Stream,String,Int32,Int32,TimeSpan,Boolean,ArraySegment<Byte>)
- uid: System.Net.WebSockets.WebSocket
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocket
  nameWithType: WebSocket
  fullName: System.Net.WebSockets.WebSocket
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.WebSockets.WebSocket.CreateServerBuffer(System.Int32)
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CreateServerBuffer(Int32)
  nameWithType: WebSocket.CreateServerBuffer(Int32)
  fullName: System.Net.WebSockets.WebSocket.CreateServerBuffer(Int32)
- uid: System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: DefaultKeepAliveInterval
  nameWithType: WebSocket.DefaultKeepAliveInterval
  fullName: System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval
- uid: System.Net.WebSockets.WebSocket.Dispose
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: Dispose()
  nameWithType: WebSocket.Dispose()
  fullName: System.Net.WebSockets.WebSocket.Dispose()
- uid: System.Net.WebSockets.WebSocket.IsApplicationTargeting45
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: IsApplicationTargeting45()
  nameWithType: WebSocket.IsApplicationTargeting45()
  fullName: System.Net.WebSockets.WebSocket.IsApplicationTargeting45()
- uid: System.Net.WebSockets.WebSocket.IsStateTerminal(System.Net.WebSockets.WebSocketState)
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: IsStateTerminal(WebSocketState)
  nameWithType: WebSocket.IsStateTerminal(WebSocketState)
  fullName: System.Net.WebSockets.WebSocket.IsStateTerminal(WebSocketState)
- uid: System.Net.WebSockets.WebSocketState
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketState
  nameWithType: WebSocketState
  fullName: System.Net.WebSockets.WebSocketState
- uid: System.Net.WebSockets.WebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  nameWithType: WebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<WebSocketReceiveResult>
  nameWithType: Task<WebSocketReceiveResult>
  fullName: System.Threading.Tasks.Task<System.Net.WebSockets.WebSocketReceiveResult>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.WebSockets.WebSocketReceiveResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.WebSockets.WebSocketReceiveResult
    name: WebSocketReceiveResult
    nameWithType: WebSocketReceiveResult
    fullName: WebSocketReceiveResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.WebSockets.WebSocket.RegisterPrefixes
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: RegisterPrefixes()
  nameWithType: WebSocket.RegisterPrefixes()
  fullName: System.Net.WebSockets.WebSocket.RegisterPrefixes()
- uid: System.Net.WebSockets.WebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  nameWithType: WebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
- uid: System.Net.WebSockets.WebSocketMessageType
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketMessageType
  nameWithType: WebSocketMessageType
  fullName: System.Net.WebSockets.WebSocketMessageType
- uid: System.Net.WebSockets.WebSocket.State
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: State
  nameWithType: WebSocket.State
  fullName: System.Net.WebSockets.WebSocket.State
- uid: System.Net.WebSockets.WebSocket.SubProtocol
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: SubProtocol
  nameWithType: WebSocket.SubProtocol
  fullName: System.Net.WebSockets.WebSocket.SubProtocol
- uid: System.Net.WebSockets.WebSocket.ThrowOnInvalidState(System.Net.WebSockets.WebSocketState,System.Net.WebSockets.WebSocketState[])
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: ThrowOnInvalidState(WebSocketState,WebSocketState[])
  nameWithType: WebSocket.ThrowOnInvalidState(WebSocketState,WebSocketState[])
  fullName: System.Net.WebSockets.WebSocket.ThrowOnInvalidState(WebSocketState,WebSocketState[])
- uid: System.Net.WebSockets.WebSocketState[]
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketState
  nameWithType: WebSocketState
  fullName: System.Net.WebSockets.WebSocketState[]
  spec.csharp:
  - uid: System.Net.WebSockets.WebSocketState
    name: WebSocketState
    nameWithType: WebSocketState
    fullName: WebSocketState[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.WebSockets.WebSocket.#ctor*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: WebSocket
  nameWithType: WebSocket.WebSocket
- uid: System.Net.WebSockets.WebSocket.Abort*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: Abort
  nameWithType: WebSocket.Abort
- uid: System.Net.WebSockets.WebSocket.CloseAsync*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseAsync
  nameWithType: WebSocket.CloseAsync
- uid: System.Net.WebSockets.WebSocket.CloseOutputAsync*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseOutputAsync
  nameWithType: WebSocket.CloseOutputAsync
- uid: System.Net.WebSockets.WebSocket.CloseStatus*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseStatus
  nameWithType: WebSocket.CloseStatus
- uid: System.Net.WebSockets.WebSocket.CloseStatusDescription*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseStatusDescription
  nameWithType: WebSocket.CloseStatusDescription
- uid: System.Net.WebSockets.WebSocket.CreateClientBuffer*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CreateClientBuffer
  nameWithType: WebSocket.CreateClientBuffer
- uid: System.Net.WebSockets.WebSocket.CreateClientWebSocket*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CreateClientWebSocket
  nameWithType: WebSocket.CreateClientWebSocket
- uid: System.Net.WebSockets.WebSocket.CreateServerBuffer*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CreateServerBuffer
  nameWithType: WebSocket.CreateServerBuffer
- uid: System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: DefaultKeepAliveInterval
  nameWithType: WebSocket.DefaultKeepAliveInterval
- uid: System.Net.WebSockets.WebSocket.Dispose*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: Dispose
  nameWithType: WebSocket.Dispose
- uid: System.Net.WebSockets.WebSocket.IsApplicationTargeting45*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: IsApplicationTargeting45
  nameWithType: WebSocket.IsApplicationTargeting45
- uid: System.Net.WebSockets.WebSocket.IsStateTerminal*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: IsStateTerminal
  nameWithType: WebSocket.IsStateTerminal
- uid: System.Net.WebSockets.WebSocket.ReceiveAsync*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: ReceiveAsync
  nameWithType: WebSocket.ReceiveAsync
- uid: System.Net.WebSockets.WebSocket.RegisterPrefixes*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: RegisterPrefixes
  nameWithType: WebSocket.RegisterPrefixes
- uid: System.Net.WebSockets.WebSocket.SendAsync*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: SendAsync
  nameWithType: WebSocket.SendAsync
- uid: System.Net.WebSockets.WebSocket.State*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: State
  nameWithType: WebSocket.State
- uid: System.Net.WebSockets.WebSocket.SubProtocol*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: SubProtocol
  nameWithType: WebSocket.SubProtocol
- uid: System.Net.WebSockets.WebSocket.ThrowOnInvalidState*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: ThrowOnInvalidState
  nameWithType: WebSocket.ThrowOnInvalidState
