### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.HMAC
  id: HMAC
  children:
  - System.Security.Cryptography.HMAC.#ctor
  - System.Security.Cryptography.HMAC.BlockSizeValue
  - System.Security.Cryptography.HMAC.Create
  - System.Security.Cryptography.HMAC.Create(System.String)
  - System.Security.Cryptography.HMAC.Dispose(System.Boolean)
  - System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.HashFinal
  - System.Security.Cryptography.HMAC.HashName
  - System.Security.Cryptography.HMAC.Initialize
  - System.Security.Cryptography.HMAC.Key
  langs:
  - csharp
  name: HMAC
  nameWithType: HMAC
  fullName: System.Security.Cryptography.HMAC
  type: Class
  summary: "Reprezentuje klasy abstrakcyjnej, z którego muszą pochodzić wszystkich implementacji programu Hash-based kodu uwierzytelniania wiadomości (HMAC)."
  remarks: "Hash-based wiadomości kod uwierzytelniania (HMAC) może służyć do określenia, czy została naruszona komunikatu wysłanego za pośrednictwem niezabezpieczonego kanału, pod warunkiem, że nadawca i odbiorca udostępnić klucz tajny. Nadawca oblicza wartość skrótu dla oryginalnych danych i wysyła zarówno oryginalnych danych i HMAC jako pojedynczym komunikacie. Odbiornik ponownie oblicza wartość skrótu dla odebranego komunikatu i sprawdza, czy obliczona wartość skrótu zgodna z wartością skrótu przesyłane.       Metoda HMAC może służyć z dowolną funkcją iteracyjną skrót kryptograficzny, takich jak MD5 lub SHA-1, w połączeniu z tajnego klucza wspólnego. Siła kryptograficzna HMAC zależy od właściwości funkcji mieszania.       Każda zmiana danych lub wartość skrótu powoduje niezgodność, ponieważ wiedzy klucz tajny musi zmienić komunikat i Odtwórz wartość skrótu poprawne. W związku z tym jeśli wartości skrótu oryginalny i obliczona zgodne, wiadomość została uwierzytelniona."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class HMAC : System.Security.Cryptography.KeyedHashAlgorithm
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  - System.Security.Cryptography.KeyedHashAlgorithm
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: HMAC()
  nameWithType: HMAC.HMAC()
  fullName: System.Security.Cryptography.HMAC.HMAC()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Security.Cryptography.HMAC&quot;> </xref> klasy."
  syntax:
    content: protected HMAC ();
    parameters: []
  overload: System.Security.Cryptography.HMAC.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.BlockSizeValue
  id: BlockSizeValue
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: BlockSizeValue
  nameWithType: HMAC.BlockSizeValue
  fullName: System.Security.Cryptography.HMAC.BlockSizeValue
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Pobiera lub ustawia rozmiar bloku do użycia w wartości skrótu."
  remarks: "Hash-based wiadomości kod uwierzytelniania (HMAC) używa funkcji skrótu, gdzie wartość skrótu danych przez iteracja funkcja kompresji podstawowe na bloki danych. BlockSizeValue jest rozmiar w bajtach takie bloku. Jego wartość wynosi 64 bajtów."
  syntax:
    content: protected int BlockSizeValue { get; set; }
    return:
      type: System.Int32
      description: "Rozmiar bloku do użycia w wartości skrótu."
  overload: System.Security.Cryptography.HMAC.BlockSizeValue*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.Create
  id: Create
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: Create()
  nameWithType: HMAC.Create()
  fullName: System.Security.Cryptography.HMAC.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Tworzy wystąpienie Domyślna implementacja elementu Hash-based kodu (metoda HMAC Message Authentication)."
  remarks: "Domyślnie to przeciążenie używa algorytmu SHA-1 stosowania HMAC. Jeśli chcesz określić inną implementację, użyj <xref:System.Security.Cryptography.HMAC.Create%28System.String%29>przeciążenia, które pozwalają określić nazwę algorytmu zamiast.</xref:System.Security.Cryptography.HMAC.Create%28System.String%29>"
  syntax:
    content: public static System.Security.Cryptography.HMAC Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.HMAC
      description: "Wystąpienie nowego algorytmu SHA-1, chyba że zostały zmienione ustawienia domyślne przy użyciu [ &lt;cryptoclass —&gt; elementu](../Topic/%3CcryptoClass%3E%20Element.md)."
  overload: System.Security.Cryptography.HMAC.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: Create(String)
  nameWithType: HMAC.Create(String)
  fullName: System.Security.Cryptography.HMAC.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Tworzy wystąpienie określonego wdrożenia z Hash-based kodu (metoda HMAC Message Authentication)."
  remarks: "Metoda HMAC obsługuje wiele algorytmów wyznaczania wartości skrótu, w tym MD5, SHA-1, SHA-256 i RIPEMD160. Aby uzyskać pełną listę, zobacz obsługiwane wartości `algorithmName` parametru."
  syntax:
    content: public static System.Security.Cryptography.HMAC Create (string algorithmName);
    parameters:
    - id: algorithmName
      type: System.String
      description: "Implementacja HMAC do użycia. W poniższej tabeli przedstawiono prawidłowe wartości dla `algorithmName` parametr i algorytmy są one wykonywane na.       <table><thead><tr><th> Wartość parametru       </th><th> Implementuje       </th></tr></thead><tbody><tr><td> System.Security.Cryptography.HMAC       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref></td></tr><tr><td> System.Security.Cryptography.KeyedHashAlgorithm       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref></td></tr><tr><td> HMACMD5       </td><td><xref href=&quot;System.Security.Cryptography.HMACMD5&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACMD5       </td><td><xref href=&quot;System.Security.Cryptography.HMACMD5&quot;></xref></td></tr><tr><td> HMACRIPEMD160       </td><td><xref href=&quot;System.Security.Cryptography.HMACRIPEMD160&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACRIPEMD160       </td><td><xref href=&quot;System.Security.Cryptography.HMACRIPEMD160&quot;></xref></td></tr><tr><td> HMACSHA1       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA1       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref></td></tr><tr><td> HMACSHA256       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA256&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA256       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA256&quot;></xref></td></tr><tr><td> HMACSHA384       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA384&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA384       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA384&quot;></xref></td></tr><tr><td> HMACSHA512       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA512&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA512       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA512&quot;></xref></td></tr><tr><td> MACTripleDES       </td><td><xref href=&quot;System.Security.Cryptography.MACTripleDES&quot;></xref></td></tr><tr><td> System.Security.Cryptography.MACTripleDES       </td><td><xref href=&quot;System.Security.Cryptography.MACTripleDES&quot;></xref></td></tr></tbody></table>"
    return:
      type: System.Security.Cryptography.HMAC
      description: "Nowe wystąpienie klasy określonej implementacji HMAC."
  overload: System.Security.Cryptography.HMAC.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HMAC.Dispose(Boolean)
  fullName: System.Security.Cryptography.HMAC.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Zwalnia zasoby niezarządzane używane przez <xref href=&quot;System.Security.Cryptography.HMAC&quot;> </xref> klasy podczas zmiany klucza jest autentyczny i opcjonalnie zwalnia zasoby zarządzane."
  remarks: "Ta metoda jest wywoływana przez metodę publiczną `Dispose()` — metoda i `Finalize` metody. `Dispose()`wywołuje chronioną metodę `Dispose(Boolean)` metody z `disposing` ustawiono parametr `true`. `Finalize`wywołuje `Dispose` z `disposing` ustawioną `false`.       Gdy `disposing` parametr jest `true`, ta metoda zwalnia wszystkie zasoby zajmowane przez wszelkie obiekty zarządzane przez to <xref:System.Security.Cryptography.HMAC>odwołań.</xref:System.Security.Cryptography.HMAC> Ta metoda wywołuje `Dispose()` metody każdego odwołuje się do obiektu."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby zwolnić zasoby zarządzane i niezarządzane; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> aby zwolnić tylko zasoby niezarządzane."
  overload: System.Security.Cryptography.HMAC.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
  id: HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: HashCore(Byte[],Int32,Int32)
  nameWithType: HMAC.HashCore(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.HMAC.HashCore(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "W przypadku przesłonięcia w klasie pochodnej, kieruje dane zapisywane do obiektu w domyślnej <xref href=&quot;System.Security.Cryptography.HMAC&quot;> </xref> algorytmu wyznaczania wartości skrótu do obliczania wartości skrótu."
  remarks: "Ta metoda nie jest wywoływany przez kod aplikacji.       Ta metoda abstrakcyjna wykonuje obliczenia wyznaczania wartości skrótu. Każdego zapisu do obiektu strumienia kryptograficznego przekazuje dane za pomocą tej metody. Dla każdego bloku danych ta metoda aktualizacji stanu obiektu skrótu, aby wartość skrótu poprawne jest zwracana na koniec strumienia danych."
  syntax:
    content: protected override void HashCore (byte[] rgb, int ib, int cb);
    parameters:
    - id: rgb
      type: System.Byte[]
      description: "Dane wejściowe."
    - id: ib
      type: System.Int32
      description: "Przesunięcie do tablicy typu byte, z którego można rozpocząć korzystanie z danych."
    - id: cb
      type: System.Int32
      description: "Liczba bajtów w tablicy, która ma być używana jako dane."
  overload: System.Security.Cryptography.HMAC.HashCore*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.HashFinal
  id: HashFinal
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: HashFinal()
  nameWithType: HMAC.HashFinal()
  fullName: System.Security.Cryptography.HMAC.HashFinal()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "W przypadku przesłonięcia w klasie pochodnej, kończenie znajdujących się w obliczania skrótu po przetworzeniu ostatniego danych przez obiekt strumienia kryptograficznego."
  remarks: "Ta metoda nie jest wywoływany przez kod aplikacji. Ta metoda Kończenie znajdujących się w dowolnej częściowe obliczeń i zwraca wartość skrótu poprawne strumienia danych."
  syntax:
    content: protected override byte[] HashFinal ();
    parameters: []
    return:
      type: System.Byte[]
      description: "Kod obliczoną wartość mieszania w tablicy bajtów."
  overload: System.Security.Cryptography.HMAC.HashFinal*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.HashName
  id: HashName
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: HashName
  nameWithType: HMAC.HashName
  fullName: System.Security.Cryptography.HMAC.HashName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Pobiera lub ustawia nazwę algorytmu wyznaczania wartości skrótu do użycia na potrzeby wyznaczania wartości skrótu."
  syntax:
    content: public string HashName { get; set; }
    return:
      type: System.String
      description: "Nazwa algorytmu wyznaczania wartości skrótu."
  overload: System.Security.Cryptography.HMAC.HashName*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Nie można zmienić bieżącego algorytmu wyznaczania wartości skrótu."
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.Initialize
  id: Initialize
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: Initialize()
  nameWithType: HMAC.Initialize()
  fullName: System.Security.Cryptography.HMAC.Initialize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inicjuje wystąpienie klasy Domyślna implementacja <xref href=&quot;System.Security.Cryptography.HMAC&quot;> </xref>."
  remarks: "Hash-based wiadomości kod uwierzytelniania (HMAC) może służyć do określenia, czy została naruszona komunikatu wysłanego za pośrednictwem niezabezpieczonego kanału, pod warunkiem, że nadawca i odbiorca udostępnić klucz tajny. Nadawca oblicza wartość skrótu dla oryginalnych danych i wysyła zarówno oryginalnych danych i HMAC jako pojedynczym komunikacie. Odbiornik ponownie oblicza wartość skrótu dla odebranego komunikatu i sprawdza, czy obliczona wartość skrótu zgodna z wartością skrótu przesyłane.       Metoda HMAC może służyć z dowolną funkcją iteracyjną skrót kryptograficzny, takich jak MD5 lub SHA-1, w połączeniu z tajnego klucza wspólnego. Siła kryptograficzna HMAC zależy od właściwości funkcji mieszania.       Każda zmiana danych lub wartość skrótu spowoduje niezgodność, ponieważ wiedzy klucz tajny musi zmienić komunikat i Odtwórz wartość skrótu poprawne. W związku z tym jeśli wartości skrótu oryginalny i obliczona zgodne, wiadomość została uwierzytelniona."
  syntax:
    content: public override void Initialize ();
    parameters: []
  overload: System.Security.Cryptography.HMAC.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.Key
  id: Key
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: Key
  nameWithType: HMAC.Key
  fullName: System.Security.Cryptography.HMAC.Key
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Pobiera lub ustawia klucz do użycia w algorytmu wyznaczania wartości skrótu."
  remarks: "Ta właściwość jest kluczem dla algorytmu skrótu z kluczem.       Hash-based wiadomości kod uwierzytelniania (HMAC) może służyć do określenia, czy została naruszona komunikatu wysłanego za pośrednictwem niezabezpieczonego kanału, pod warunkiem, że nadawca i odbiorca udostępnić klucz tajny. Nadawca oblicza wartość skrótu dla oryginalnych danych i wysyła zarówno oryginalnych danych i HMAC jako pojedynczym komunikacie. Odbiornik ponownie oblicza wartość skrótu dla odebranego komunikatu i sprawdza, czy obliczona wartość skrótu zgodna z wartością skrótu przesyłane.       Metoda HMAC może służyć z dowolną funkcją iteracyjną skrót kryptograficzny, takich jak MD5 lub SHA-1, w połączeniu z tajnego klucza wspólnego. Siła kryptograficzna HMAC zależy od właściwości funkcji mieszania.       Każda zmiana danych lub wartość skrótu powoduje niezgodność, ponieważ wiedzy klucz tajny musi zmienić komunikat i Odtwórz wartość skrótu poprawne. W związku z tym jeśli wartości skrótu oryginalny i obliczona zgodne, wiadomość została uwierzytelniona."
  syntax:
    content: public override byte[] Key { get; set; }
    return:
      type: System.Byte[]
      description: "Klucz do użycia w algorytmu wyznaczania wartości skrótu."
  overload: System.Security.Cryptography.HMAC.Key*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Aby zmienić właściwości klucza, po rozpoczęciu tworzenia skrótów podejmowana jest próba."
  platform:
  - net462
references:
- uid: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: System.Security.Cryptography.KeyedHashAlgorithm
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.Security.Cryptography.HMAC.#ctor
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HMAC()
  nameWithType: HMAC.HMAC()
  fullName: System.Security.Cryptography.HMAC.HMAC()
- uid: System.Security.Cryptography.HMAC.BlockSizeValue
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: BlockSizeValue
  nameWithType: HMAC.BlockSizeValue
  fullName: System.Security.Cryptography.HMAC.BlockSizeValue
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.HMAC.Create
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Create()
  nameWithType: HMAC.Create()
  fullName: System.Security.Cryptography.HMAC.Create()
- uid: System.Security.Cryptography.HMAC
  parent: System.Security.Cryptography
  isExternal: false
  name: HMAC
  nameWithType: HMAC
  fullName: System.Security.Cryptography.HMAC
- uid: System.Security.Cryptography.HMAC.Create(System.String)
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Create(String)
  nameWithType: HMAC.Create(String)
  fullName: System.Security.Cryptography.HMAC.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.HMAC.Dispose(System.Boolean)
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HMAC.Dispose(Boolean)
  fullName: System.Security.Cryptography.HMAC.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HashCore(Byte[],Int32,Int32)
  nameWithType: HMAC.HashCore(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.HMAC.HashCore(Byte[],Int32,Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.HMAC.HashFinal
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HashFinal()
  nameWithType: HMAC.HashFinal()
  fullName: System.Security.Cryptography.HMAC.HashFinal()
- uid: System.Security.Cryptography.HMAC.HashName
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HashName
  nameWithType: HMAC.HashName
  fullName: System.Security.Cryptography.HMAC.HashName
- uid: System.Security.Cryptography.HMAC.Initialize
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Initialize()
  nameWithType: HMAC.Initialize()
  fullName: System.Security.Cryptography.HMAC.Initialize()
- uid: System.Security.Cryptography.HMAC.Key
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Key
  nameWithType: HMAC.Key
  fullName: System.Security.Cryptography.HMAC.Key
- uid: System.Security.Cryptography.HMAC.#ctor*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HMAC
  nameWithType: HMAC.HMAC
- uid: System.Security.Cryptography.HMAC.BlockSizeValue*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: BlockSizeValue
  nameWithType: HMAC.BlockSizeValue
- uid: System.Security.Cryptography.HMAC.Create*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Create
  nameWithType: HMAC.Create
- uid: System.Security.Cryptography.HMAC.Dispose*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Dispose
  nameWithType: HMAC.Dispose
- uid: System.Security.Cryptography.HMAC.HashCore*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HashCore
  nameWithType: HMAC.HashCore
- uid: System.Security.Cryptography.HMAC.HashFinal*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HashFinal
  nameWithType: HMAC.HashFinal
- uid: System.Security.Cryptography.HMAC.HashName*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HashName
  nameWithType: HMAC.HashName
- uid: System.Security.Cryptography.HMAC.Initialize*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Initialize
  nameWithType: HMAC.Initialize
- uid: System.Security.Cryptography.HMAC.Key*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Key
  nameWithType: HMAC.Key
