### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Interaction
  id: Interaction
  children:
  - Microsoft.VisualBasic.Interaction.AppActivate(System.Int32)
  - Microsoft.VisualBasic.Interaction.AppActivate(System.String)
  - Microsoft.VisualBasic.Interaction.Beep
  - Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])
  - Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])
  - Microsoft.VisualBasic.Interaction.Command
  - Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)
  - Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)
  - Microsoft.VisualBasic.Interaction.Environ(System.Int32)
  - Microsoft.VisualBasic.Interaction.Environ(System.String)
  - Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)
  - Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)
  - Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)
  - Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)
  - Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)
  - Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)
  - Microsoft.VisualBasic.Interaction.Partition(System.Int64,System.Int64,System.Int64,System.Int64)
  - Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)
  - Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)
  - Microsoft.VisualBasic.Interaction.Switch(System.Object[])
  langs:
  - csharp
  name: Interaction
  nameWithType: Interaction
  fullName: Microsoft.VisualBasic.Interaction
  type: Class
  summary: "<xref uid=&quot;langword_csharp_Interaction&quot; name=&quot;Interaction&quot; href=&quot;&quot;> </xref> Moduł zawiera procedury służy do interakcji z obiektami, aplikacji i systemów."
  remarks: "Ten moduł obsługuje słów kluczowych języka Visual Basic i elementy członkowskie biblioteki wykonawczej, które uruchomić inne programy, wywołanie metody lub właściwości dźwiękowej Sygnalizuj z komputera, podać parametry wiersza polecenia, modyfikowania obiektów COM i kontrolować okien dialogowych."
  example:
  - "The following example uses the `Shell` function to run an application specified by the user. Specifying <xref:Microsoft.VisualBasic.AppWinStyle?displayProperty=fullName> as the second argument opens the application in normal size and gives it the focus.  \n  \n```  \nDim procID As Integer  \n' Run calculator.  \nprocID = Shell(\"C:\\Windows\\system32\\calc.exe\", AppWinStyle.NormalFocus)  \n' The preceding path is for Windows XP.  \n' The Windows 2000 path is C:\\WINNT\\system32\\calc.exe.  \n```"
  syntax:
    content: >-
      [Microsoft.VisualBasic.CompilerServices.StandardModule]

      public sealed class Interaction
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.AppActivate(System.Int32)
  id: AppActivate(System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: AppActivate(Int32)
  nameWithType: Interaction.AppActivate(Int32)
  fullName: Microsoft.VisualBasic.Interaction.AppActivate(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Aktywuje aplikację, która jest już uruchomiona."
  remarks: "Możesz użyć `AppActivate` do zapewnienia aktywnego okna aplikacji fokus. Może nie mieć dojście lub odwołanie do aktywnego okna lub nawet wiedzieć, który okno jest aktywne w danym momencie. W takim przypadku nie można użyć <xref:System.Windows.Forms.Control.Focus%2A>metody.</xref:System.Windows.Forms.Control.Focus%2A>       `AppActivate` Funkcji zmiany fokusu do okna lub aplikacji o nazwie, ale nie ma wpływu na czy zminimalizowane lub zmaksymalizowane. Poza oknem aktywowana aplikacja przenosi fokus, gdy użytkownik wykona akcję do fokusu lub zamknąć okno. Można użyć `Shell` funkcji, aby uruchomić aplikację i ustaw styl okna.       Jeśli używasz `Title` parametru `AppActivate` porównania bez uwzględniania wielkości liter, ale w przeciwnym razie wymaga dokładnego dopasowania z zawartością paska tytułu. Najpierw wyszukiwana za pomocą okien najwyższego poziomy, a następnie za pomocą okien podrzędnych. Jeśli nie można odnaleźć dopasowania, zgłasza <xref:System.ArgumentException>.</xref:System.ArgumentException>       Można użyć `AppActivate` tylko z procesów, które posiadają systemu windows. Większość aplikacji konsoli nie ma systemu windows, co oznacza, że nie są wyświetlane na liście procesów, które `AppActivate` wyszukiwania. Podczas uruchamiania z aplikacji konsoli, system tworzy osobnych procesach, aby uruchomić aplikację i zwraca wyniki do procesu konsoli. W związku z tym gdy użytkownik żąda bieżący identyfikator procesu, otrzymasz identyfikator procesu tego procesu oddzielne zamiast identyfikatora procesu aplikacji konsoli.       W czasie wykonywania `AppActivate` funkcja aktywuje żadnych działającej aplikacji o tytule, który odpowiada `Title` lub za pomocą Identyfikatora procesu, który odpowiada `ProcessId`. Jeśli nie brak dokładnego dopasowania, zostaje uaktywniony dowolnej aplikacji, których ciąg tytułu kończy się wyrazem `Title`. Jeśli istnieje więcej niż jedną aplikację o nazwie `Title`, `AppActivate` funkcja arbitralnie wybiera jeden do aktywacji.      > [!NOTE] > `AppActivate` Wymaga funkcji `UIPermission` na <xref:System.Security.Permissions.UIPermissionWindow>poziomu, który może mieć wpływ na jej wykonanie w sytuacjach częściowym zaufaniu.</xref:System.Security.Permissions.UIPermissionWindow> Aby uzyskać więcej informacji zobacz <xref:System.Security.Permissions.UIPermission>.</xref:System.Security.Permissions.UIPermission>"
  example:
  - "This example illustrates various uses of the `AppActivate` function to activate an application window. If a Notepad process is not running, the example throws an <xref:System.ArgumentException>. The `Shell` procedure assumes the applications are in the paths specified.  \n  \n [!code-vb[VbVbalrCatRef#11](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._135_1.vb)]"
  syntax:
    content: public static void AppActivate (int ProcessId);
    parameters:
    - id: ProcessId
      type: System.Int32
      description: "<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>Określanie identyfikator procesu Win32 przypisane do tego procesu. Można użyć Identyfikatora zwróconego przez <xref:Microsoft.VisualBasic.Interaction.Shell*>, o ile nie jest zerowy.</xref:Microsoft.VisualBasic.Interaction.Shell*>"
  overload: Microsoft.VisualBasic.Interaction.AppActivate*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.AppActivate(System.String)
  id: AppActivate(System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: AppActivate(String)
  nameWithType: Interaction.AppActivate(String)
  fullName: Microsoft.VisualBasic.Interaction.AppActivate(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Aktywuje aplikację, która jest już uruchomiona."
  remarks: "Możesz użyć `AppActivate` do zapewnienia aktywnego okna aplikacji fokus. Może nie mieć dojście lub odwołanie do aktywnego okna lub nawet wiedzieć, który okno jest aktywne w danym momencie. W takim przypadku nie można użyć <xref:System.Windows.Forms.Control.Focus%2A>metody.</xref:System.Windows.Forms.Control.Focus%2A>       `AppActivate` Funkcji zmiany fokusu do okna lub aplikacji o nazwie, ale nie ma wpływu na czy zminimalizowane lub zmaksymalizowane. Poza oknem aktywowana aplikacja przenosi fokus, gdy użytkownik wykona akcję do fokusu lub zamknąć okno. Można użyć `Shell` funkcji, aby uruchomić aplikację i ustaw styl okna.       Jeśli używasz `Title` parametru `AppActivate` porównania bez uwzględniania wielkości liter, ale w przeciwnym razie wymaga dokładnego dopasowania z zawartością paska tytułu. Najpierw wyszukiwana za pomocą okien najwyższego poziomy, a następnie za pomocą okien podrzędnych. Jeśli nie można odnaleźć dopasowania, zgłasza <xref:System.ArgumentException>.</xref:System.ArgumentException>       Można użyć `AppActivate` tylko z procesów, które posiadają systemu windows. Większość aplikacji konsoli nie ma systemu windows, co oznacza, że nie są wyświetlane na liście procesów, które `AppActivate` wyszukiwania. Podczas uruchamiania z aplikacji konsoli, system tworzy osobnych procesach, aby uruchomić aplikację i zwraca wyniki do procesu konsoli. W związku z tym gdy użytkownik żąda bieżący identyfikator procesu, otrzymasz identyfikator procesu tego procesu oddzielne zamiast identyfikatora procesu aplikacji konsoli.       W czasie wykonywania `AppActivate` funkcja aktywuje żadnych działającej aplikacji o tytule, który odpowiada `Title` lub za pomocą Identyfikatora procesu, który odpowiada `ProcessId`. Jeśli nie brak dokładnego dopasowania, zostaje uaktywniony dowolnej aplikacji, których ciąg tytułu kończy się wyrazem `Title`. Jeśli istnieje więcej niż jedną aplikację o nazwie `Title`, `AppActivate` funkcja arbitralnie wybiera jeden do aktywacji.      > [!NOTE] > `AppActivate` Wymaga funkcji `UIPermission` na <xref:System.Security.Permissions.UIPermissionWindow>poziomu, który może mieć wpływ na jej wykonanie w sytuacjach częściowym zaufaniu.</xref:System.Security.Permissions.UIPermissionWindow> Aby uzyskać więcej informacji zobacz <xref:System.Security.Permissions.UIPermission>.</xref:System.Security.Permissions.UIPermission>"
  example:
  - "This example illustrates various uses of the `AppActivate` function to activate an application window. If a Notepad process is not running, the example throws an <xref:System.ArgumentException>. The `Shell` procedure assumes the applications are in the paths specified.  \n  \n [!code-vb[VbVbalrCatRef#11](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._229_1.vb)]"
  syntax:
    content: public static void AppActivate (string Title);
    parameters:
    - id: Title
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>wyrażenie określające tytuł na pasku tytułu aplikacji, którą chcesz aktywować. Można użyć nazwy przypisane do aplikacji, gdy została ona uruchomiona."
  overload: Microsoft.VisualBasic.Interaction.AppActivate*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Beep
  id: Beep
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Beep()
  nameWithType: Interaction.Beep()
  fullName: Microsoft.VisualBasic.Interaction.Beep()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Dźwięki sygnał przez osoby mówiącej komputera."
  remarks: "Gęstość i czas trwania dźwięku zależą od sprzętu i systemu oprogramowania i w związku z tym różnią się między komputerami.      > [!NOTE] > `Beep` Wymaga funkcji `UIPermission` na <xref:System.Security.Permissions.UIPermissionWindow>poziomu, który może mieć wpływ na jej wykonanie w sytuacjach częściowym zaufaniu.</xref:System.Security.Permissions.UIPermissionWindow> Aby uzyskać więcej informacji zobacz <xref:System.Security.Permissions.UIPermission>.</xref:System.Security.Permissions.UIPermission>"
  example:
  - "This example uses the `Beep` function to sound a tone through the computer's speaker.  \n  \n [!code-vb[VbVbalrCatRef#59](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._129_1.vb)]"
  syntax:
    content: public static void Beep ();
    parameters: []
  overload: Microsoft.VisualBasic.Interaction.Beep*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])
  id: CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: CallByName(Object,String,CallType,Object[])
  nameWithType: Interaction.CallByName(Object,String,CallType,Object[])
  fullName: Microsoft.VisualBasic.Interaction.CallByName(Object,String,CallType,Object[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Wykonuje metodę obiektu lub ustawia lub zwraca wartość właściwości w obiekcie."
  remarks: "`CallByName` Funkcja jest używana w czasie wykonywania, Pobierz właściwość, ustaw właściwość lub wywołanie metody."
  example:
  - "In the following example, the first line uses `CallByName` to set the `Text` property of a text box, the second line retrieves the value of the `Text` property, and the third line invokes the `Move` method to move the text box.  \n  \n [!code-vb[VbVbalrFunctions#99](~/add/codesnippet/visualbasic/4d9384f0-535e-442c-920a-_1.vb)]  \n  \n [!code-vb[VbVbalrFunctions#20](~/add/codesnippet/visualbasic/4d9384f0-535e-442c-920a-_2.vb)]  \n  \n The next example uses the `CallByName` function to invoke the `Add` and `Item` methods of a collection object.  \n  \n [!code-vb[VbVbalrFunctions#21](~/add/codesnippet/visualbasic/4d9384f0-535e-442c-920a-_3.vb)]"
  syntax:
    content: public static object CallByName (object ObjectRef, string ProcName, Microsoft.VisualBasic.CallType UseCallType, object[] Args);
    parameters:
    - id: ObjectRef
      type: System.Object
      description: "Wymagany. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>. Wskaźnik do obiektu udostępnianie właściwości lub metody."
    - id: ProcName
      type: System.String
      description: "Wymagany. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Wyrażenia ciągu zawierającego nazwę właściwości lub metody obiektu."
    - id: UseCallType
      type: Microsoft.VisualBasic.CallType
      description: "Wymagany. Element członkowski wyliczenia typu <xref href=&quot;Microsoft.VisualBasic.CallType&quot;> </xref> reprezentujący typ procedury. The value of <xref uid=&quot;langword_csharp_CallType&quot; name=&quot;CallType&quot; href=&quot;&quot;></xref> can be <xref uid=&quot;langword_csharp_Method&quot; name=&quot;Method&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Get&quot; name=&quot;Get&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Set&quot; name=&quot;Set&quot; href=&quot;&quot;></xref>."
    - id: Args
      type: System.Object[]
      description: "Opcjonalny. <xref uid=&quot;langword_csharp_ParamArray&quot; name=&quot;ParamArray&quot; href=&quot;&quot;></xref>. Tablica parametrów zawierający argumenty do przekazania do właściwości lub metody."
    return:
      type: System.Object
      description: "Wykonuje metodę obiektu lub ustawia lub zwraca wartość właściwości w obiekcie."
  overload: Microsoft.VisualBasic.Interaction.CallByName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Invalid <code>UseCallType</code> value; must be <xref uid=&quot;langword_csharp_Method&quot; name=&quot;Method&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Get&quot; name=&quot;Get&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Set&quot; name=&quot;Set&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])
  id: Choose(System.Double,System.Object[])
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Choose(Double,Object[])
  nameWithType: Interaction.Choose(Double,Object[])
  fullName: Microsoft.VisualBasic.Interaction.Choose(Double,Object[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Wybiera i zwraca wartość z listy argumentów."
  remarks: "`Choose` Funkcja zwraca element członkowski listy przekazano `Choice()`, na podstawie wartości z `Index`. Wybrano pierwszego elementu członkowskiego listy podczas `Index` 1. Wybrano ostatniego członka listy podczas `Index` jest `UBound`(`Choice()`). Jeśli `Index` znajduje się poza tymi limitami `Choose` zwraca `Nothing`.       Jeśli `Index` nie jest liczbą całkowitą, zostanie zaokrąglony do najbliższej liczby całkowitej przed rozpoczęciem przetwarzania.       Można użyć `Choose` wartość na liście możliwości.      > [!NOTE] > Wyrażenia na liście argument może zawierać wywołania funkcji. W ramach przygotowania do listy argumentów dla wywołania `Choose`, kompilator Visual Basic wywołuje funkcję co w każdym wyrażeniu. Oznacza to, że nie może zależeć konkretną funkcję nie wywoływana zaznaczenie innego wyrażenia przez `Index`."
  example:
  - "This example uses the `Choose` function to display a name in response to an index passed into the procedure in the `Ind` parameter.  \n  \n [!code-vb[VbVbalrFunctions#22](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._248_1.vb)]"
  syntax:
    content: public static object Choose (double Index, object[] Choice);
    parameters:
    - id: Index
      type: System.Double
      description: "Wymagany. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>. Przekazano wyrażenia liczbowego, których wynikiem jest wartość z zakresu od 1 do liczby elementów `Choice` argumentu."
    - id: Choice
      type: System.Object[]
      description: "Wymagany. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>Tablica parametrów. Można podać zmiennej lub wyrażenie obliczane do <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> typu danych, aby uzyskać listę <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> zmiennych lub wyrażeń oddzielonych przecinkami lub tablicy jednowymiarowej <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> elementów."
    return:
      type: System.Object
      description: "Wybiera i zwraca wartość z listy argumentów."
  overload: Microsoft.VisualBasic.Interaction.Choose*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Command
  id: Command
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Command()
  nameWithType: Interaction.Command()
  fullName: Microsoft.VisualBasic.Interaction.Command()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca część argumentu wiersza polecenia używane do uruchamiania programu Visual Basic lub program wykonywalny utworzonych w języku Visual Basic. <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> Funkcja zapewnia większą wydajność i wydajność niż <xref uid=&quot;langword_csharp_Command &quot; name=&quot;Command &quot; href=&quot;&quot;> </xref>funkcji. Aby uzyskać więcej informacji zobacz <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs*>.</xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs*>"
  remarks: "Po zwróceniu argumenty, możesz wyszukać ograniczniki, takie jak spacje, ukośniki wstecz lub do przodu, łączniki lub znaki cudzysłowu, aby podzielić lub wyszukaj ciąg dla poszczególnych parametrów.       W przypadku aplikacji utworzonych w języku Visual Basic i kompilowane do plików .exe `Command` funkcja zwraca argumenty, które są wyświetlane po nazwie aplikacji w wierszu polecenia, w tym formularzu: `MyApp(cmdlineargs)`."
  example:
  - "This example uses the `Command` function to return the command-line arguments in an object that contains an array.  \n  \n [!code-vb[VbVbalrCatRef#58](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._185_1.vb)]"
  syntax:
    content: public static string Command ();
    parameters: []
    return:
      type: System.String
      description: "Zwraca część argumentu wiersza polecenia używane do uruchamiania programu Visual Basic lub program wykonywalny utworzonych w języku Visual Basic.       <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> Funkcja zapewnia większą wydajność i wydajność niż <xref uid=&quot;langword_csharp_Command &quot; name=&quot;Command &quot; href=&quot;&quot;> </xref>funkcji. Aby uzyskać więcej informacji zobacz <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs*>.</xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs*>"
  overload: Microsoft.VisualBasic.Interaction.Command*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)
  id: CreateObject(System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: CreateObject(String,String)
  nameWithType: Interaction.CreateObject(String,String)
  fullName: Microsoft.VisualBasic.Interaction.CreateObject(String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Tworzy i zwraca odwołanie do obiektu COM. <xref uid=&quot;langword_csharp_CreateObject&quot; name=&quot;CreateObject&quot; href=&quot;&quot;></xref>Nie można użyć do utworzenia wystąpienia klas w języku Visual Basic, chyba że te klasy jawnie są widoczne jako składniki COM."
  remarks: "To create an instance of a COM component, assign the object returned by `CreateObject` to an object variable:  \n  \n```vb#  \nSub CreateADODB()  \n   Dim adoApp As Object  \n   adoApp = CreateObject(\"ADODB.Connection\")  \nEnd Sub  \n```  \n  \n The type of object variable you use to store the returned object can affect your application's performance. Declaring an object variable with the `As Object` clause creates a variable that can contain a reference to any type of object. However, access to the object through that variable is *late-bound*, that is, the binding occurs when your program runs. There are many reasons you should avoid late binding, including slower application performance.  \n  \n You can create an object variable that results in early binding—that is, binding when the program is compiled. To do so, add a reference to the type library for your object from the **COM** tab of the **Add Reference** dialog box on the **Project** menu. Then declare the object variable of the specific type of your object. In most cases, it is more efficient to use the `Dim` statement and a primary interop assembly to create objects than it is to use the `CreateObject` function.  \n  \n## Interacting with Unmanaged Code  \n Another issue is that COM objects use unmanaged code — code without the benefit of the common language runtime. There is a fair degree of complexity involved in mixing the managed code of Visual Basic with unmanaged code from COM. When you add a reference to a COM object, Visual Basic searches for a primary interop assembly (PIA) for that library; if it finds one, then it uses it. If it does not find a PIA, then it creates an interoperability assembly that contains local interoperability classes for each class in the COM library. For more information, see [COM Interoperability in .NET Framework Applications](~/add/includes/ajax-current-ext-md.md).  \n  \n You should generally use strongly bound objects and primary interop assemblies whenever possible. The examples below use the `CreateObject` function with Microsoft Office objects for demonstration purposes only. However, these objects are easier to use and more reliable when used with the appropriate primary interop assembly.  \n  \n## Creating an Object on a Remote Computer  \n You can create an object on a remote networked computer by passing the name of the computer to the `ServerName` argument of the `CreateObject` function. That name is the same as the Machine Name portion of a share name: for a share named \"\\\\\\MyServer\\Public,\" `ServerName` is \"MyServer.\"  \n  \n> [!NOTE]\n>  Refer to COM documentation (see Microsoft Developer Network) for additional information on making an application accessible on a remote networked computer. You may need to add a registry key for your application.  \n  \n The following code returns the version number of an instance of Excel running on a remote computer named `MyServer`:  \n  \n```vb#  \nSub CreateRemoteExcelObj()  \n    Dim xlApp As Object  \n    ' Replace string \"\\\\MyServer\" with name of the remote computer.  \n    xlApp = CreateObject(\"Excel.Application\", \"\\\\MyServer\")  \n    MsgBox(xlApp.Version)  \nEnd Sub  \n```  \n  \n If the remote server name is incorrect, or if it is unavailable, a run-time error occurs.  \n  \n> [!NOTE]\n>  Use `CreateObject` when there is no current instance of the object. If an instance of the object is already running, a new instance is started, and an object of the specified type is created. To use the current instance, or to start the application and have it load a file, use the `GetObject` function. If an object has registered itself as a single-instance object, only one instance of the object is created, no matter how many times `CreateObject` is executed.  \n  \n## Creating Framework Objects  \n You can use the `CreateObject` function only to create a COM object. While there is no exact equivalent mechanism for creating a .NET Framework object, the <xref:System.Activator> in the <xref:System> namespace contains methods to create local or remote objects. In particular, the <xref:System.Activator.CreateInstance%2A> method or the <xref:System.Activator.CreateInstanceFrom%2A> method might be useful.  \n  \n> [!IMPORTANT]\n>  The `CreateObject` function requires unmanaged code permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)."
  example:
  - "The following example uses the `CreateObject` function to create a Microsoft Excel worksheet and saves the worksheet to a file. To use this example, Excel must be installed on the computer where this program runs. Also, you must add a reference to the type library from the **COM** tab of the **Add Reference** dialog box on the **Project** menu. The name of the type library varies depending on the version of Excel installed on your computer. For example, the type library for Microsoft Excel 2002 is named **Microsoft Excel 10.0 Object Library**.  \n  \n [!code-vb[VbVbalrExcelObject#1](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._59_1.vb)]"
  syntax:
    content: public static object CreateObject (string ProgId, string ServerName = "");
    parameters:
    - id: ProgId
      type: System.String
      description: "Wymagany. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Identyfikator programu obiektu do utworzenia."
    - id: ServerName
      type: System.String
      description: "Opcjonalny. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Nazwa serwera sieci, gdzie można utworzyć obiektu. Jeśli `ServerName` to ciąg pusty (&quot;&quot;), używany jest komputer lokalny."
    return:
      type: System.Object
      description: "Tworzy i zwraca odwołanie do obiektu COM. <xref uid=&quot;langword_csharp_CreateObject&quot; name=&quot;CreateObject&quot; href=&quot;&quot;></xref>Nie można użyć do utworzenia wystąpienia klas w języku Visual Basic, chyba że te klasy jawnie są widoczne jako składniki COM."
  overload: Microsoft.VisualBasic.Interaction.CreateObject*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "Serwer jest niedostępny"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "Nie istnieje żaden obiekt określonego typu"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)
  id: DeleteSetting(System.String,System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: DeleteSetting(String,String,String)
  nameWithType: Interaction.DeleteSetting(String,String,String)
  fullName: Microsoft.VisualBasic.Interaction.DeleteSetting(String,String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Usuwa sekcji lub ustawienie klucza z wpisu aplikacji w rejestrze systemu Windows. <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> Funkcja zapewnia większą wydajność i wydajności podczas wykonywania operacji rejestru niż <xref uid=&quot;langword_csharp_DeleteSetting &quot; name=&quot;DeleteSetting &quot; href=&quot;&quot;> </xref>funkcji. Aby uzyskać więcej informacji zobacz <xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>.</xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>"
  remarks: "If all arguments are provided, the specified setting is deleted. A run-time error occurs if you attempt to use `DeleteSetting` on a nonexistent section or key setting.  \n  \n `DeleteSetting` requires that a user be logged on since it operates under the `HKEY_LOCAL_USER` registry key, which is not active until a user logs on interactively.  \n  \n Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the `HKEY_LOCAL_MACHINE\\Software\\` or the `HKEY_USER\\DEFAULT\\Software` registry keys."
  example:
  - "The following example first uses the `SaveSetting` procedure to make entries in the Windows registry for the `MyApp` application, and then uses the `DeleteSetting` function to remove them. Because no `Key` argument is specified, the whole `Startup` section is deleted, including the section name and all of its keys.  \n  \n [!code-vb[VbVbalrCatRef#45](~/add/codesnippet/visualbasic/e195f0a5-815a-4af5-b672-_1.vb)]"
  syntax:
    content: public static void DeleteSetting (string AppName, string Section = null, string Key = null);
    parameters:
    - id: AppName
      type: System.String
      description: "Wymagany. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>w wyrażeniu zawierającym nazwę aplikacji lub projektu, do którego stosuje się ustawienia sekcji lub klucza."
    - id: Section
      type: System.String
      description: "Wymagany. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>w wyrażeniu zawierającym nazwę sekcji, z którego jest usuwany ustawienie klucza. Jeśli tylko `AppName` i `Section` są dostarczane, określona sekcja jest usuwany wraz ze wszystkich powiązanych ustawień klucza."
    - id: Key
      type: System.String
      description: "Opcjonalny. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>w wyrażeniu zawierającym nazwę ustawienia klucza usuwany."
  overload: Microsoft.VisualBasic.Interaction.DeleteSetting*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Użytkownik nie jest zalogowany."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Environ(System.Int32)
  id: Environ(System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Environ(Int32)
  nameWithType: Interaction.Environ(Int32)
  fullName: Microsoft.VisualBasic.Interaction.Environ(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca ciąg, skojarzone ze zmienną środowiskową systemu operacyjnego."
  remarks: "Jeśli `Expression` zawiera ciąg, <xref:Microsoft.VisualBasic.Interaction.Environ%2A>funkcja zwraca tekst przypisany do określonego środowiska ciąg — to znaczy tekst po znaku równości (=) w tabeli ciągów środowiska dla tej zmiennej środowiskowej.</xref:Microsoft.VisualBasic.Interaction.Environ%2A> Jeśli ciąg w `Expression` nie można znaleźć w tabeli ciągów środowiska ciąg o zerowej długości (&quot;&quot;) jest zwracany.       Jeśli `Expression` zawiera liczba całkowita, ciąg zajmujące, zwracany jest pozycji liczbowych w tabeli ciągów środowiska. W takim przypadku <xref:Microsoft.VisualBasic.Interaction.Environ%2A>zwraca cały tekst, łącznie z nazwą zmiennej środowiskowej.</xref:Microsoft.VisualBasic.Interaction.Environ%2A> Jeśli w określonej pozycji nie ma ciągu środowiska <xref:Microsoft.VisualBasic.Interaction.Environ%2A>zwraca ciąg o zerowej długości.</xref:Microsoft.VisualBasic.Interaction.Environ%2A>      > [!IMPORTANT] > <xref:Microsoft.VisualBasic.Interaction.Environ%2A>Funkcja wymaga środowiska uprawnienia, które mogą mieć wpływ na jej wykonanie w sytuacjach częściowego zaufania.</xref:Microsoft.VisualBasic.Interaction.Environ%2A> Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.SecurityPermission>i [uprawnienia dostępu do kodu](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).</xref:System.Security.Permissions.SecurityPermission>"
  example:
  - "This example uses the <xref:Microsoft.VisualBasic.Interaction.Environ%2A> function to supply the entry number and length of the `PATH` statement from the environment-string table.  \n  \n [!code-vb[VbVbalrCatRef#28](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._74_1.vb)]"
  syntax:
    content: public static string Environ (int Expression);
    parameters:
    - id: Expression
      type: System.Int32
      description: "Wymagany. Wyrażenie obliczane albo ciąg zawierający nazwę zmiennej środowiskowej lub integer odpowiadającego kolejności numerycznej ciągu środowiska w tabeli ciągów środowiska."
    return:
      type: System.String
      description: "Zwraca ciąg, skojarzone ze zmienną środowiskową systemu operacyjnego."
  overload: Microsoft.VisualBasic.Interaction.Environ*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Expression</code>Brak."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Environ(System.String)
  id: Environ(System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Environ(String)
  nameWithType: Interaction.Environ(String)
  fullName: Microsoft.VisualBasic.Interaction.Environ(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca ciąg, skojarzone ze zmienną środowiskową systemu operacyjnego."
  remarks: "Jeśli `Expression` zawiera ciąg Environ, funkcja zwraca tekst przypisany do określonego środowiska ciąg — to znaczy tekst po znaku równości (=) w tabeli ciągów środowiska dla tej zmiennej środowiskowej. Jeśli ciąg w `Expression` nie można znaleźć w tabeli ciągów środowiska ciąg o zerowej długości (&quot;&quot;) jest zwracany.       Jeśli `Expression` zawiera liczba całkowita, ciąg zajmujące, zwracany jest pozycji liczbowych w tabeli ciągów środowiska. W takim przypadku Environ zwraca cały tekst, łącznie z nazwą zmiennej środowiskowej. Jeśli w określonej pozycji nie ma żadnych ciągu środowiska, Environ zwraca ciąg o zerowej długości.      > [!IMPORTANT] > Environ — funkcja wymaga środowiska uprawnienia, które mogą mieć wpływ na jej wykonanie w sytuacjach częściowego zaufania. Aby uzyskać więcej informacji, zobacz <xref:System.Security.Permissions.SecurityPermission>i [uprawnienia dostępu do kodu](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).</xref:System.Security.Permissions.SecurityPermission>"
  example:
  - "This example uses the Environ function to supply the entry number and length of the `PATH` statement from the environment-string table.  \n  \n [!code-vb[VbVbalrCatRef#28](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._35_1.vb)]"
  syntax:
    content: public static string Environ (string Expression);
    parameters:
    - id: Expression
      type: System.String
      description: "Wymagany. Wyrażenie obliczane albo ciąg zawierający nazwę zmiennej środowiskowej lub integer odpowiadającego kolejności numerycznej ciągu środowiska w tabeli ciągów środowiska."
    return:
      type: System.String
      description: "Zwraca ciąg, skojarzone ze zmienną środowiskową systemu operacyjnego."
  overload: Microsoft.VisualBasic.Interaction.Environ*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Expression</code>Brak."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)
  id: GetAllSettings(System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: GetAllSettings(String,String)
  nameWithType: Interaction.GetAllSettings(String,String)
  fullName: Microsoft.VisualBasic.Interaction.GetAllSettings(String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca listę ustawień klucza i odpowiadających im wartości (pierwotnie utworzone <xref uid=&quot;langword_csharp_SaveSetting&quot; name=&quot;SaveSetting&quot; href=&quot;&quot;> </xref>) z wpisu aplikacji w rejestrze systemu Windows. Przy użyciu <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> funkcja zapewnia większą wydajność i wydajności podczas wykonywania operacji rejestru niż <xref uid=&quot;langword_csharp_GetAllSettings&quot; name=&quot;GetAllSettings&quot; href=&quot;&quot;> </xref>. Aby uzyskać więcej informacji zobacz <xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>.</xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>"
  remarks: "`GetAllSettings` returns an uninitialized `Object` if either `AppName` or `Section` does not exist.  \n  \n Because it operates under the `HKEY_LOCAL_USER` registry key, which is not active until a user logs on interactively, `GetAllSettings` requires that a user be logged on.  \n  \n Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the `HKEY_LOCAL_MACHINE\\Software\\` or the `HKEY_USER\\DEFAULT\\Software` registry keys."
  example:
  - "This example first uses the `SaveSetting` function to make entries in the Windows registry for the application specified as `AppName`, then uses the `GetAllSettings` function to display the settings. Note that application names and `Section` names cannot be retrieved with `GetAllSettings`. Finally, the `DeleteSetting` function removes the application's entries.  \n  \n [!code-vb[VbVbalrCatRef#68](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._40_1.vb)]"
  syntax:
    content: public static string[,] GetAllSettings (string AppName, string Section);
    parameters:
    - id: AppName
      type: System.String
      description: "Wymagany. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>w wyrażeniu zawierającym nazwę aplikacji lub projektu, którego ustawienia klucza są wymagane."
    - id: Section
      type: System.String
      description: "Wymagany. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>w wyrażeniu zawierającym nazwę sekcji, w których ustawień klucza są wymagane. <xref uid=&quot;langword_csharp_GetAllSettings&quot; name=&quot;GetAllSettings&quot; href=&quot;&quot;></xref>Zwraca obiekt, który zawiera dwuwymiarowa tablicy ciągów. Ciągi zawiera wszystkie ustawienia kluczy w określonej sekcji, a także ich wartości."
    return:
      type: System.String[,]
      description: "Zwraca listę ustawień klucza i odpowiadających im wartości (pierwotnie utworzone <xref uid=&quot;langword_csharp_SaveSetting&quot; name=&quot;SaveSetting&quot; href=&quot;&quot;> </xref>) z wpisu aplikacji w rejestrze systemu Windows.       Przy użyciu <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> funkcja zapewnia większą wydajność i wydajności podczas wykonywania operacji rejestru niż <xref uid=&quot;langword_csharp_GetAllSettings&quot; name=&quot;GetAllSettings&quot; href=&quot;&quot;> </xref>. Aby uzyskać więcej informacji zobacz <xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>.</xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>"
  overload: Microsoft.VisualBasic.Interaction.GetAllSettings*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Użytkownik nie jest zalogowany."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)
  id: GetObject(System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: GetObject(String,String)
  nameWithType: Interaction.GetObject(String,String)
  fullName: Microsoft.VisualBasic.Interaction.GetObject(String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca odwołanie do obiektu dostarczonego przez składnik COM."
  remarks: "Use the `GetObject` function to load an instance of a COM component from a file. The following example illustrates this.  \n  \n```vb#  \nDim CADObject As Object  \nCADObject = GetObject(\"C:\\CAD\\schema.cad\")  \n```  \n  \n When this code runs, the application associated with the specified `PathName` is started and the object in the specified file is activated.  \n  \n## Default Cases  \n If `PathName` is a zero-length string (`\"\"`), `GetObject` returns a new object instance of the specified class type. If the `PathName` argument is omitted, `GetObject` returns a currently active object of the class type specified in `Class`. If no object of the specified type exists, an error occurs.  \n  \n## Accessing a Subobject  \n Some applications allow you to activate a subobject associated with a file. To do this, add an exclamation point (`!`) to the end of the file name and follow it with a string that identifies the part of the file you want to activate. For information on how to create this string, see the documentation for the application that created the object.  \n  \n For example, in a drawing application you might have multiple layers to a drawing stored in a file. You could use the following code to activate a layer within a drawing called `schema.cad`.  \n  \n```vb#  \nlayerObject = GetObject(\"C:\\CAD\\schema.cad!Layer3\")  \n```  \n  \n## Specifying a Class  \n If you do not specify the object's `Class`, Automation determines the application to start and the object to activate, based on the file name you provide. Some files, however, can support more than one class of object. For example, a drawing might support three different types of objects: an `Application` object, a `Drawing` object, and a `Toolbar` object, all of which are part of the same file. To specify which object in a file you want to activate, use the optional `Class` argument. The following example illustrates this.  \n  \n```vb#  \nDim drawObj As Object  \ndrawObj = GetObject(\"C:\\Drawings\\sample.drw\", \"Figment.Drawing\")  \n```  \n  \n In the preceding example, `Figment` is the name of a drawing application and `Drawing` is one of the object types it supports.  \n  \n## Using the Object  \n Once an object is activated, you refer to it in code using the object variable you declared. In the preceding example, you access properties and methods of the new object using the object variable `drawObj`. The following example illustrates this.  \n  \n```vb#  \ndrawObj.Line(9, 90)  \ndrawObj.InsertText(9, 100, \"Hello, world.\")  \ndrawObj.SaveAs(\"C:\\Drawings\\sample.drw\")  \n```  \n  \n> [!NOTE]\n>  Use the `GetObject` function when there is a current instance of the object or if you want to create the object with a file loaded. If there is no current instance, and you do not want the object started with a file loaded, use the <xref:Microsoft.VisualBasic.Interaction.CreateObject%2A> function.  \n>   \n>  If an object has registered itself as an ActiveX single-instance object, only one instance of the object is created, no matter how many times `CreateObject` is called. With a single-instance object, `GetObject` always returns the same instance when called with the zero-length string (`\"\"`) syntax, and it causes an error if the `PathName` argument is omitted. You cannot use `GetObject` to obtain a reference to a class created with Visual Basic.  \n  \n> [!IMPORTANT]\n>  The `GetObject` function requires unmanaged code permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)."
  example:
  - "The following example uses the `GetObject` function to obtain a reference to a specific Microsoft Excel worksheet (`excelObj`). It uses the worksheet's `Application` property to make Excel visible, to close it, and to perform other actions. Using two API calls, the `detectExcel` procedure looks for Excel, and if it is running, enters it in the Running Object table. The first call to `GetObject` causes an error if Excel is not already running, which in this example causes the `excelWasNotRunning` flag to be set to `True`. The second call to `GetObject` specifies a file to open. If Excel is not already running, the second call starts it and returns a reference to the worksheet represented by the specified file, `test.xls`. The file must exist in the specified location; otherwise, Visual Basic throws a <xref:System.IO.FileNotFoundException>. Next, the example code makes both Excel and the window containing the specified worksheet visible.  \n  \n This example requires `Option Strict Off` because it uses late binding, where objects are assigned to variables of type `Object`. You can specify `Option Strict On` and declare objects of specific object types if you add a reference to the Excel type library from the **COM** tab of the **Add Reference** dialog box of the **Project** menu in Visual Studio.  \n  \n [!code-vb[VbVbalrExcelObject#2](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._196_1.vb)]  \n  \n [!code-vb[VbVbalrExcelObject#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._196_2.vb)]  \n  \n [!code-vb[VbVbalrExcelObject#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._196_3.vb)]  \n  \n When you call the `getExcel` function, a check is made to see if Excel is already running. If it is not, then an instance is created.  \n  \n> [!IMPORTANT]\n>  For simplicity, the preceding example assumes that any window called `XLMAIN` belongs to an instance of Microsoft Excel. If another object, possibly launched by illicit tampering, created a window with that name, it would receive all the messages you intended for Excel. In an application to be used for production, you should include some more rigorous testing to verify that `XLMAIN` really belongs to Excel."
  syntax:
    content: public static object GetObject (string PathName = null, string Class = null);
    parameters:
    - id: PathName
      type: System.String
      description: "Opcjonalny. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Pełna ścieżka i nazwa pliku zawierającego obiekt do pobrania. Jeśli `PathName` zostanie pominięty, `Class` jest wymagana."
    - id: Class
      type: System.String
      description: "Jeśli wymagane `PathName` nie jest dostarczony. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Ciąg reprezentujący klasę obiektu. `Class` Argument ma następujące składni i części: `appname` `.` `objecttype` [1 |&1;] parametru [1 |&2;] opis [2 |&1;] `appname` [2 |&2;] wymagany. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Nazwa aplikacji, zapewniając obiektu.       [3 |&1;] `objecttype` [3 |&2;] wymagany. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Typ lub klasę obiektu, które można utworzyć."
    return:
      type: System.Object
      description: "Zwraca odwołanie do obiektu dostarczonego przez składnik COM."
  overload: Microsoft.VisualBasic.Interaction.GetObject*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "Nie istnieje żaden obiekt typu określonej klasy."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "Nie obiektu o określonej nazwie i ścieżka pliku nie istnieje."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)
  id: GetSetting(System.String,System.String,System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: GetSetting(String,String,String,String)
  nameWithType: Interaction.GetSetting(String,String,String,String)
  fullName: Microsoft.VisualBasic.Interaction.GetSetting(String,String,String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca wartość ustawienia klucza z wpisu aplikacji w rejestrze systemu Windows. <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> Funkcja zapewnia większą wydajność i wydajności podczas wykonywania operacji rejestru niż <xref uid=&quot;langword_csharp_GetAllSettings&quot; name=&quot;GetAllSettings&quot; href=&quot;&quot;> </xref>. Aby uzyskać więcej informacji zobacz <xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>.</xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>"
  remarks: "If any of the items named in the `GetSetting` arguments do not exist, `GetSetting` returns a value of `Default`.  \n  \n Because it operates under the `HKEY_LOCAL_USER` registry key, which is not active until a user logs on interactively, `GetSetting` requires that a user be logged on.  \n  \n Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the `HKEY_LOCAL_MACHINE\\Software\\` or the `HKEY_USER\\DEFAULT\\Software` registry keys.  \n  \n `GetSetting` requires `Read`<xref:System.Security.Permissions.RegistryPermission> ."
  example:
  - "This example first uses the `SaveSetting` function to make entries in the Windows registry for the application specified as `AppName`, and then uses the `GetSetting` function to display one of the settings. Because the `Default` argument is specified, some value is guaranteed to be returned. Notice that `Section` names cannot be retrieved with `GetSetting`. Finally, the `DeleteSetting` function removes all the application's entries.  \n  \n [!code-vb[VbVbalrCatRef#61](~/add/codesnippet/visualbasic/1601a1b5-4317-44fc-9f01-_1.vb)]"
  syntax:
    content: public static string GetSetting (string AppName, string Section, string Key, string Default = "");
    parameters:
    - id: AppName
      type: System.String
      description: "Wymagany. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>w wyrażeniu zawierającym nazwę aplikacji lub projektu, którego ustawienia klucza jest wymagane."
    - id: Section
      type: System.String
      description: "Wymagany. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>w wyrażeniu zawierającym nazwę sekcji, w którym znajduje się ustawienie klucza."
    - id: Key
      type: System.String
      description: "Wymagany. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>w wyrażeniu zawierającym nazwę ustawienia klucza do zwrócenia."
    - id: Default
      type: System.String
      description: "Opcjonalny. Wyrażenia zawierającego wartość do zwrócenia, jeśli wartość nie została ustawiona `Key` ustawienie. Pominięcie `Default` zakłada, że ciąg o zerowej długości (&quot;&quot;)."
    return:
      type: System.String
      description: "Zwraca wartość ustawienia klucza z wpisu aplikacji w rejestrze systemu Windows.       <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> Funkcja zapewnia większą wydajność i wydajności podczas wykonywania operacji rejestru niż <xref uid=&quot;langword_csharp_GetAllSettings&quot; name=&quot;GetAllSettings&quot; href=&quot;&quot;> </xref>."
  overload: Microsoft.VisualBasic.Interaction.GetSetting*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Jeden lub więcej argumentów nie są <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> wyrażeń lub użytkownik nie jest zalogowany."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)
  id: IIf(System.Boolean,System.Object,System.Object)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: IIf(Boolean,Object,Object)
  nameWithType: Interaction.IIf(Boolean,Object,Object)
  fullName: Microsoft.VisualBasic.Interaction.IIf(Boolean,Object,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca jedną z dwóch obiektów, zależnie od wyniku obliczenia wyrażenia."
  remarks: '`IIf` Funkcja udostępnia odpowiednik dla trójargumentowy [Operator warunkowy:?:](~/add/includes/ajax-current-ext-md.md) w programie Visual C++.'
  example:
  - "This example uses the `IIf` function to evaluate the `testMe` parameter of the `checkIt` procedure and returns the word \"Large\" if the amount is greater than 1000; otherwise, it returns the word \"Small\".  \n  \n [!code-vb[VbVbalrFunctions#33](~/add/codesnippet/visualbasic/296aac5d-5997-4225-8ac0-_1.vb)]  \n  \n Note that if `Option Strict` is `On`, you must use the `CStr` keyword to explicitly convert the return from `Object` to `String`."
  syntax:
    content: public static object IIf (bool Expression, object TruePart, object FalsePart);
    parameters:
    - id: Expression
      type: System.Boolean
      description: "Wymagany. <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>. Wyrażenie, które chcesz ocenić."
    - id: TruePart
      type: System.Object
      description: "Wymagany. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>. Jeśli zwrócony `Expression` daje w wyniku <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>."
    - id: FalsePart
      type: System.Object
      description: "Wymagany. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>. Jeśli zwrócony `Expression` daje w wyniku <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Object
      description: "Zwraca jedną z dwóch obiektów, zależnie od wyniku obliczenia wyrażenia."
  overload: Microsoft.VisualBasic.Interaction.IIf*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)
  id: InputBox(System.String,System.String,System.String,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: InputBox(String,String,String,Int32,Int32)
  nameWithType: Interaction.InputBox(String,String,String,Int32,Int32)
  fullName: Microsoft.VisualBasic.Interaction.InputBox(String,String,String,Int32,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Wyświetla monit w oknie dialogowym, czeka na użytkownikowi wprowadzenie tekstu, lub kliknij przycisk, a następnie zwraca ciąg zawierający zawartość pola tekstowego."
  remarks: "Gdy użytkownik kliknie **anulować**, zostanie zwrócony ciąg o zerowej długości.       Aby określić więcej niż pierwszy argument, należy użyć `InputBox` funkcja w wyrażeniu. Jeśli pominięto żadnych argumentów pozycyjnych muszą zachować odpowiedni ogranicznik przecinkami.      > [!NOTE] > `InputBox` Wymaga funkcji `UIPermission` na <xref:System.Security.Permissions.UIPermissionWindow>poziomu, który może mieć wpływ na jej wykonanie w sytuacjach częściowym zaufaniu.</xref:System.Security.Permissions.UIPermissionWindow> Aby uzyskać więcej informacji, zobacz i <xref:System.Security.Permissions.UIPermission>.</xref:System.Security.Permissions.UIPermission>"
  example:
  - "This example shows various ways to use the `InputBox` function to prompt the user to enter a value. If the x and y positions are omitted, the dialog box is automatically centered for the respective axes. The variable `MyValue` contains the value entered by the user if the user clicks OK or presses the ENTER key.  \n  \n [!code-vb[VbVbalrCatRef#67](~/add/codesnippet/visualbasic/e8c4ff4e-3901-4354-99c7-_1.vb)]"
  syntax:
    content: public static string InputBox (string Prompt, string Title = "", string DefaultResponse = "", int XPos = -1, int YPos = -1);
    parameters:
    - id: Prompt
      type: System.String
      description: "Wymagane <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> wyrażenie wyświetlany jako komunikat w oknie dialogowym. Maksymalna długość `Prompt` wynosi około 1024 znaków, w zależności od szerokość znaków używany. Jeśli `Prompt` składa się z więcej niż jeden wiersz, można oddzielić wiersze przy użyciu znak powrotu karetki (<xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;></xref>13<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;></xref>), znak wysuwu wiersza (<xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;></xref>10<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;></xref>), lub kombinacji źródła powrotu karetki/wiersza (<xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;></xref>13<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;> </xref> &amp; <xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;> </xref>10<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;></xref>) między każdym wierszu."
    - id: Title
      type: System.String
      description: "Opcjonalny. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>wyrażenie wyświetlany w pasku tytułu okna dialogowego. W przypadku pominięcia `Title`, nazwa aplikacji jest umieszczona na pasku tytułu."
    - id: DefaultResponse
      type: System.String
      description: "Opcjonalny. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>wyrażenie jest wyświetlana w polu tekstowym jako domyślny, jeśli podano żadnych innych danych wejściowych. W przypadku pominięcia `DefaultResponse`, pola tekstowego wyświetlany jest pusty."
    - id: XPos
      type: System.Int32
      description: "Opcjonalny. Wyrażenia liczbowego, który określa odległość od lewej krawędzi okna dialogowego od lewej krawędzi ekranu w twipach. W przypadku pominięcia `XPos`, okno dialogowe jest wyśrodkowywana w poziomie."
    - id: YPos
      type: System.Int32
      description: "Opcjonalny. Wyrażenia liczbowego, który określa odległość górnej krawędzi okna dialogowego, w górnej części ekranu w twipach. W przypadku pominięcia `YPos`, okno dialogowe znajduje się w pionie około jednej trzeciej sposób w dół ekranu."
    return:
      type: System.String
      description: "Wyświetla monit w oknie dialogowym, czeka na użytkownikowi wprowadzenie tekstu, lub kliknij przycisk, a następnie zwraca ciąg zawierający zawartość pola tekstowego."
  overload: Microsoft.VisualBasic.Interaction.InputBox*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)
  id: MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: MsgBox(Object,MsgBoxStyle,Object)
  nameWithType: Interaction.MsgBox(Object,MsgBoxStyle,Object)
  fullName: Microsoft.VisualBasic.Interaction.MsgBox(Object,MsgBoxStyle,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Wyświetla komunikat w oknie dialogowym, czeka na użytkownika, kliknij przycisk, a następnie zwraca liczbę całkowitą wskazującą, który użytkownik kliknął przycisk."
  remarks: "Jeśli pominięto żadnych argumentów pozycyjnych muszą zachować odpowiedni ogranicznik przecinkami.       Jeśli Wyświetla okno dialogowe **anulować** działa tak samo jak kliknięcie przycisku, naciskając klawisz ESC **anulować** Jeśli okno dialogowe zawiera **pomocy** przycisk, jest dostępna Pomoc kontekstowa dla okna dialogowego. Jednak żadnej wartości jest zwrócona, dopóki nie wybrano jeden z innych przycisków. W aplikacjach formularzy systemu Windows, wybierając **pomocy** wykonuje przycisk <xref:System.Windows.Forms.Control.HelpRequested>zdarzenie dla formularza.</xref:System.Windows.Forms.Control.HelpRequested>      > [!NOTE] > `MsgBox` Wymaga funkcji `UIPermission` na <xref:System.Security.Permissions.UIPermissionWindow>poziomu, który może mieć wpływ na jej wykonanie w sytuacjach częściowym zaufaniu.</xref:System.Security.Permissions.UIPermissionWindow> Aby uzyskać więcej informacji zobacz <xref:System.Security.Permissions.UIPermission>.</xref:System.Security.Permissions.UIPermission>       `MsgBoxStyle` Wartości wyliczenia są wymienione w poniższej tabeli.      ||||   |-|-|-|   | Element członkowski | Wartość | Opis elementu |   | `OKOnly`|0| Tylko przycisk wyświetla OK. |   | `OKCancel`|1| Przyciski Anuluj i wyświetla OK. |   | `AbortRetryIgnore`|2| Wyświetla przyciski przerwania, ponów próbę i Ignoruj. |   | `YesNoCancel`|3| Wyświetla tak, nie i przyciski &quot;Anuluj&quot;. |   | `YesNo`|4| Wyświetla przyciski Tak i nie. |   | `RetryCancel`|5| Wyświetla przyciski ponawiania i Anuluj. |   | `Critical`|16| Wyświetla ikonę krytyczny komunikat. |   | `Question`|32| Wyświetla ikonę ostrzeżenia zapytania. |   | `Exclamation`|48| Wyświetla ikonę ostrzeżenia. |   | `Information`|64| Wyświetla komunikat z informacjami ikony. |   | `DefaultButton1`|0| Pierwszy przycisk jest domyślnym. |   | `DefaultButton2`|256| Drugi przycisk jest domyślnym. |   | `DefaultButton3`|512| Trzeci przycisk jest domyślnym. |   | `ApplicationModal`|0| Aplikacja jest modalne. Użytkownik musi odpowiedzieć w oknie komunikatu przed kontynuowaniem pracy w bieżącej aplikacji. |   | `SystemModal`|4096| System jest modalne. Wszystkie aplikacje są wstrzymywane, dopóki użytkownik odpowiada na komunikat. |   | `MsgBoxSetForeground`|&65536; | Określa okno komunikatu jako okna pierwszoplanowego. |   | `MsgBoxRight`|&52428;8 | Tekst jest wyrównywany do prawej. |   | `MsgBoxRtlReading`|&10485;76 | Określa tekst powinien być wyświetlany w prawej do lewej odczytu w systemach hebrajski i arabski. |       Pierwsza grupa wartości (0 –&5;) określa liczbę i typ przycisków wyświetlanych w oknie dialogowym. Drugiej grupy (16, 32, 48, 64) opisuje styl ikony. Trzecia grupa (0, 256, 512) określa przycisk domyślny. Czwarta grupa (0, 4096) określa modalność pola wiadomości i piątej grupy określa, czy okno komunikatu jest oknem pierwszego planu, wraz z wyrównanie i kierunek tekstu. Podczas dodawania liczb w celu utworzenia końcowej dla `Buttons` argumentu, użyj tylko jeden numer z każdej grupy."
  example:
  - "This example uses the `MsgBox` function to display a critical-error message in a dialog box with Yes and No buttons. The No button is specified as the default response. This is done by combining the `MsgBox` constant values into one numeric expression. In this case, adding 4 (the Yes/No button combination) and 16 (the **Critical Message** window) and 256 (the second button as default button) gives a total of 276. The value returned by the `MsgBox` function depends on the button chosen by the user: Yes returns a value of 6; No returns a value of 7.  \n  \n [!code-vb[VbVbalrCatRef#20](~/add/codesnippet/visualbasic/b9e37542-f81a-4692-86e1-_1.vb)]"
  syntax:
    content: public static Microsoft.VisualBasic.MsgBoxResult MsgBox (object Prompt, Microsoft.VisualBasic.MsgBoxStyle Buttons = Microsoft.VisualBasic.MsgBoxStyle.ApplicationModal, object Title = null);
    parameters:
    - id: Prompt
      type: System.Object
      description: "Wymagany. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>wyrażenie jest wyświetlany jako komunikat w oknie dialogowym. Maksymalna długość `Prompt` wynosi około 1024 znaków, w zależności od szerokość znaków używany. Jeśli `Prompt` składa się z więcej niż jeden wiersz, można oddzielić wiersze przy użyciu znak powrotu karetki (<xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;></xref>13<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;></xref>), znak wysuwu wiersza (<xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;></xref>10<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;></xref>), lub kombinacji znak powrotu/wysuw wiersza karetki (<xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;></xref>13<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;> </xref> &amp; <xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;> </xref>10<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;></xref>) między każdym wierszu."
    - id: Buttons
      type: Microsoft.VisualBasic.MsgBoxStyle
      description: "Opcjonalny. Wyrażenia liczbowego, który jest sumą wartości określających liczbę i typ przycisków do wyświetlenia, styl ikony do użycia, tożsamość przycisk domyślny i warunki w oknie komunikatu. W przypadku pominięcia `Buttons`, wartością domyślną jest zero."
    - id: Title
      type: System.Object
      description: "Opcjonalny. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>wyrażenie wyświetlany w pasku tytułu okna dialogowego. W przypadku pominięcia `Title`, nazwa aplikacji jest umieszczona na pasku tytułu."
    return:
      type: Microsoft.VisualBasic.MsgBoxResult
      description: "<table><tbody><tr><td> Stałe       </td><td> Wartość       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_OK&quot; name=&quot;OK&quot; href=&quot;&quot;></xref>         </td><td> 1       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_Cancel&quot; name=&quot;Cancel&quot; href=&quot;&quot;></xref>         </td><td> 2       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_Abort&quot; name=&quot;Abort&quot; href=&quot;&quot;></xref>         </td><td> 3       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_Retry&quot; name=&quot;Retry&quot; href=&quot;&quot;></xref>         </td><td> 4       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_Ignore&quot; name=&quot;Ignore&quot; href=&quot;&quot;></xref>         </td><td> 5       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_Yes&quot; name=&quot;Yes&quot; href=&quot;&quot;></xref>         </td><td> 6       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_No&quot; name=&quot;No&quot; href=&quot;&quot;></xref>         </td><td> 7       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Interaction.MsgBox*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Prompt</code>nie jest <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> wyrażenie lub <code>Title</code> jest nieprawidłowy."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Proces nie jest uruchomiony w trybie interakcyjnym użytkownika."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "Jeden lub więcej parametrów nie w elemencie członkowskim o <xref uid=&quot;langword_csharp_MsgBoxResult&quot; name=&quot;MsgBoxResult&quot; href=&quot;&quot;> </xref> lub <xref uid=&quot;langword_csharp_MsgBoxStyle&quot; name=&quot;MsgBoxStyle&quot; href=&quot;&quot;> </xref> wyliczenia."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Partition(System.Int64,System.Int64,System.Int64,System.Int64)
  id: Partition(System.Int64,System.Int64,System.Int64,System.Int64)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Partition(Int64,Int64,Int64,Int64)
  nameWithType: Interaction.Partition(Int64,Int64,Int64,Int64)
  fullName: Microsoft.VisualBasic.Interaction.Partition(Int64,Int64,Int64,Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zwraca ciąg reprezentujący obliczony zakres, która zawiera numer."
  remarks: "`Partition` Funkcja oblicza zestaw zakresów liczbowych, każda z nich zawiera liczbę wartości określonych przez `Interval`. Pierwszy zakres zaczyna się od `Start`, a ostatni zakres kończy się na `Stop`. `Partition` Funkcja następnie identyfikuje zakres, który zawiera `Number` i zwraca ciąg opisujący ten zakres. Zakres jest reprezentowana w ciągu jako &quot;*lowervalue*:*wartość_górna*&quot;, gdzie Niski końca zakresu (*lowervalue*) jest oddzielony od górną granicę (*wartość_górna*) dwukropkiem (:).       W razie potrzeby `Partition` funkcja wstawia początkowe spacje przed *lowervalue* i *wartość_górna* , aby miały taką samą liczbę znaków jako reprezentacja ciągu wartości (`Stop` + 1). Gwarantuje to, że jeśli używasz dane wyjściowe `Partition` funkcji z wartościami kilka `Number`, tekst wynikowy będzie obsługiwane poprawnie podczas operacji wszystkie kolejne sortowania.       W poniższej tabeli przedstawiono niektóre przykładowe ciągi dla zakresów obliczane przy użyciu trzech zestawów `Start`, `Stop`, i `Interval`. &quot;Najpierw należeć do zakresu&quot; i kolumny &quot;Ostatni zakres&quot; Pokaż najmniejsza i największa zakresy możliwe podane wartości `Start` i `Stop`. &quot;Przed pierwszym zakresem&quot; i &quot;po ostatni zakres&quot; kolumny zawierają ciągi dla wartości zwracane `Number` mniej niż `Start` i większa od `Stop`odpowiednio.      ||||||||   |-|-|-|-|-|-|-|   | `Start`|`Stop`|`Interval`| Przed pierwszym zakresu | Najpierw zakresu | Ostatni zakres | Po ostatni zakres |   | 0 | 99 | 5 | &quot;: -1&quot; | &quot;  0: 4&quot;|&quot; 95: 99 &quot;|&quot; 100: &quot;|   | 20 | 199 | 10 | &quot;: 19&quot; | &quot; 20:29 &quot;|&quot; 190:199 &quot;|&quot; 200: &quot;|   | 100 | 1010 | 20 | &quot;: 99&quot; | &quot; 100: 119 &quot;|&quot; 1000:1010 &quot;|&quot; 1011: &quot;|       W powyższej tabeli trzeci wiersz zawiera wynik po `Start` i `Stop` zdefiniuj zbioru liczb, którego nie można podzielić równomiernie przez `Interval`. Ostatni zakres kończy się na `Stop`, dzięki czemu tylko 11 cyfr, nawet jeśli `Interval` wynosi 20.       Jeśli `Interval` 1, jest zakresem &quot;`Number`:`Number`&quot;, niezależnie od `Start` i `Stop` argumentów. Na przykład jeśli `Number` jest 267, `Stop` wynosi 1000, a `Interval` 1, `Partition` zwraca &quot;267: 267&quot;.       `Partition`mogą być przydatne podczas tworzenia zapytań bazy danych. Można utworzyć zapytanie SELECT, która zawiera liczby zamówień występować w różnych zakresach wartość, na przykład z faktury wartości z zakresu od 1 do 1000, 1001 do 2000 i tak dalej."
  example:
  - "The following example sets up a series of ranges for decades from 1950 through 2049. It locates the value of `year` within the appropriate range and returns a `String` value showing the range. If `year` has a value of 1984, for example, `Partition` returns \"1980:1989\".  \n  \n [!code-vb[VbVbalrFunctions#45](~/add/codesnippet/visualbasic/2056d306-036e-4f9b-954c-_1.vb)]"
  syntax:
    content: public static string Partition (long Number, long Start, long Stop, long Interval);
    parameters:
    - id: Number
      type: System.Int64
      description: "Wymagany. <xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>. Liczba całkowita, która ma zostać umieszczony w obrębie jednego z zakresów obliczeniowej."
    - id: Start
      type: System.Int64
      description: "Wymagany. <xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>. Liczba całkowita wskazująca początek zestawu obliczeniowej zakresów. `Start`nie może być mniejsza niż 0."
    - id: Stop
      type: System.Int64
      description: "Wymagany. <xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>. Liczba całkowita, który wskazuje koniec zbiór obliczeniowe zakresy. `Stop`nie może być mniejsza lub równa `Start`."
    - id: Interval
      type: System.Int64
      description: "Wymagany. <xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>. Liczba całkowita, która wskazuje rozmiar każdego zakresu obliczana między `Start` i `Stop`. `Interval`nie może być mniejsza niż 1."
    return:
      type: System.String
      description: "Zwraca ciąg reprezentujący obliczony zakres, która zawiera numer."
  overload: Microsoft.VisualBasic.Interaction.Partition*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>&lt; 0, <code>Stop</code> &lt;= <code>Start</code>, or <code>Interval</code> &lt; 1."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)
  id: SaveSetting(System.String,System.String,System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: SaveSetting(String,String,String,String)
  nameWithType: Interaction.SaveSetting(String,String,String,String)
  fullName: Microsoft.VisualBasic.Interaction.SaveSetting(String,String,String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Zapisuje lub utworzenie aplikacji wpis w rejestrze systemu Windows. <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> Funkcja zapewnia większą wydajność i wydajności podczas wykonywania operacji rejestru niż <xref uid=&quot;langword_csharp_SaveSetting&quot; name=&quot;SaveSetting&quot; href=&quot;&quot;> </xref>. Aby uzyskać więcej informacji zobacz <xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>.</xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>"
  remarks: "The `SaveSetting` function adds the key to `HKEY_CURRENT_USER\\Software\\VB and VBA Program Settings`.  \n  \n If the key setting cannot be saved for any reason, an error occurs.  \n  \n `SaveSetting` requires that a user be logged on since it operates under the `HKEY_LOCAL_USER` registry key, which is not active until a user logs on interactively.  \n  \n Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the `HKEY_LOCAL_MACHINE\\Software\\` or the `HKEY_USER\\DEFAULT\\Software` registry keys.  \n  \n `SaveSetting` requires `Write` and `Create`<xref:System.Security.Permissions.RegistryPermission> ."
  example:
  - "The following example first uses the `SaveSetting` function to make entries in the Windows registry for the `MyApp` application, and then uses the `DeleteSetting` function to remove them.  \n  \n [!code-vb[VbVbalrCatRef#56](~/add/codesnippet/visualbasic/771356b4-108a-4f31-9d7a-_1.vb)]"
  syntax:
    content: public static void SaveSetting (string AppName, string Section, string Key, string Setting);
    parameters:
    - id: AppName
      type: System.String
      description: "Wymagany. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>w wyrażeniu zawierającym nazwę aplikacji lub projektu, do którego stosuje się ustawienia."
    - id: Section
      type: System.String
      description: "Wymagany. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>w wyrażeniu zawierającym nazwę sekcji, w którym zapisany jest ustawienie klucza."
    - id: Key
      type: System.String
      description: "Wymagany. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>w wyrażeniu zawierającym nazwę klucza ustawienia są zapisywane."
    - id: Setting
      type: System.String
      description: "Wymagany. Wyrażenia zawierającego wartość, do której `Key` jest ustawiany."
  overload: Microsoft.VisualBasic.Interaction.SaveSetting*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Nie można utworzyć klucza rejestru lub użytkownik nie jest zalogowany."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)
  id: Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Shell(String,AppWinStyle,Boolean,Int32)
  nameWithType: Interaction.Shell(String,AppWinStyle,Boolean,Int32)
  fullName: Microsoft.VisualBasic.Interaction.Shell(String,AppWinStyle,Boolean,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Uruchamia program wykonywalny i zwraca całkowitą reprezentującą identyfikator procesu programu, jeśli jest nadal uruchomiona."
  remarks: "The return value of the `Shell` function depends on whether the program named in `PathName` is still executing when `Shell` returns. If you set `Wait` to `True` and the program finishes before the timeout expires, `Shell` returns zero. If the timeout expires, or if you omit `Wait` or set it to `False`, `Shell` returns the process ID of the program. The process ID is a unique number that identifies the running program.  \n  \n## Failure to Start  \n If the `Shell` function cannot start the named program, a <xref:System.IO.FileNotFoundException> error occurs. This can happen, for example, when you attempt to run a 16-bit program, such as `command.com`, from an application using <xref:System.Windows.Forms?displayProperty=fullName>. For a workaround, you can run a 32-bit program that calls the desired 16-bit program. In the case of `command.com`, you can run `cmd.exe` as an alternative.  \n  \n## Waiting for Completion  \n By default, the `Shell` function runs the program asynchronously. This means that a program started with the `Shell` function might not finish executing before the statements following the `Shell` function are executed. If you want to wait for the program to finish before you continue, set `Wait` to `True`.  \n  \n## Determining the Exit Code  \n A process can return an *exit code* when it terminates. However, you cannot use `Shell` to retrieve this exit code, because `Shell` returns zero if it waits for termination, and also because the process runs in a different object from `Shell`.  \n  \n To retrieve the exit code from a process, you must write your own code to initiate the process and wait for termination. The following example shows how to initiate a process, wait for it to terminate, and retrieve its exit code.  \n  \n```vb#  \nDim procID As Integer  \nDim newProc As Diagnostics.Process  \nnewProc = Diagnostics.Process.Start(\"C:\\WINDOWS\\NOTEPAD.EXE\")  \nprocID = newProc.Id  \nnewProc.WaitForExit()  \nDim procEC As Integer = -1  \nIf newProc.HasExited Then  \n    procEC = newProc.ExitCode  \nEnd If  \nMsgBox(\"Process with ID \" & CStr(ProcID) & _  \n    \" terminated with exit code \" & CStr(procEC))  \n```  \n  \n## Protecting the File Specification  \n You should always enclose the entire path and file specification in quotation marks, as the following example shows.  \n  \n```vb#  \nID = Shell(\"\"\"C:\\Program Files\\display.exe\"\" -a -q\", , True, 100000)  \n```  \n  \n Each pair of adjacent double quotation marks (`\" \"`) within the string literal is interpreted as one double quotation character in the string. Therefore, the preceding example presents the following string to the `Shell` function:  \n  \n```  \n\"C:\\Program Files\\display.exe\" -a -q  \n```  \n  \n If you did not have the path enclosed in quotation marks, Windows would look for a file called `Program.exe` in the C:\\ directory, instead of `display.exe` in the C:\\Program Files directory.  \n  \n> [!IMPORTANT]\n>  If you do not enclose the path and file specification in quotation marks, there is a security risk if the file name or a path node contains spaces. In the preceding example, the path node `\\Program Files` includes a space. If the specification were not inside quotation marks and a program named `Program.exe` had been installed in C:\\\\, for example by illicit tampering, Windows would execute it instead of `display.exe`.  \n  \n> [!IMPORTANT]\n>  The `Shell` function requires unmanaged code permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)."
  example:
  - "The following example uses the `Shell` function to run an application specified by the user. Specifying <xref:Microsoft.VisualBasic.AppWinStyle?displayProperty=fullName> as the second argument opens the application in normal size and gives it the focus.  \n  \n [!code-vb[VbVbalrFunctions#47](~/add/codesnippet/visualbasic/a0f7fa2d-96c5-4a1d-b721-_1.vb)]"
  syntax:
    content: public static int Shell (string PathName, Microsoft.VisualBasic.AppWinStyle Style = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, bool Wait = false, int Timeout = -1);
    parameters:
    - id: PathName
      type: System.String
      description: "Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>. Name of the program to execute, together with any required arguments and command-line switches. `PathName` can also include the drive and the directory path or folder.  \n  \n If you do not know the path to the program, you can use the <xref:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles*> to locate it. For example, you can call `My.Computer.FileSystem.GetFiles(\"C:\\\", True, \"testFile.txt\")`, which returns the full path of every file named `testFile.txt` anywhere on drive C:\\\\."
    - id: Style
      type: Microsoft.VisualBasic.AppWinStyle
      description: "Opcjonalny. <xref uid=&quot;langword_csharp_AppWinStyle&quot; name=&quot;AppWinStyle&quot; href=&quot;&quot;></xref>. Wartość wybranego spośród <xref href=&quot;Microsoft.VisualBasic.AppWinStyle&quot;> </xref> określenie styl okna, w którym jest uruchomienie programu. Jeśli `Style` zostanie pominięty, <xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;> </xref> używa <xref uid=&quot;langword_csharp_AppWinStyle.MinimizedFocus&quot; name=&quot;AppWinStyle.MinimizedFocus&quot; href=&quot;&quot;> </xref>, który uruchamia program w trybie zminimalizowanym i z fokusem."
    - id: Wait
      type: System.Boolean
      description: "Opcjonalny. <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>. Wartość wskazującą czy <xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;> </xref> funkcji ma oczekiwać na zakończenie pracy programu. If `Wait` is omitted, <xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;></xref> uses <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>."
    - id: Timeout
      type: System.Int32
      description: "Opcjonalny. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. Wyrażony w milisekundach czas oczekiwania na ukończenie, jeśli `Wait` jest <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>. Jeśli `Timeout` zostanie pominięty, <xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;> </xref> używa -1, co oznacza brak limitu czasu i <xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;> </xref> nie może zwracać zakończenie program. W związku z tym w przypadku pominięcia `Timeout` lub zestawu do jego-1, istnieje możliwość, która <xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;> </xref> nigdy nie może zwrócić kontrolkę do programu."
    return:
      type: System.Int32
      description: "Uruchamia program wykonywalny i zwraca całkowitą reprezentującą identyfikator procesu programu, jeśli jest nadal uruchomiona."
  overload: Microsoft.VisualBasic.Interaction.Shell*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Style</code>nie jest w zakresie od 0 do 9, włącznie."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;></xref>Nie można odnaleźć <code> PathName </code> pliku."
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "<code>PathName</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Switch(System.Object[])
  id: Switch(System.Object[])
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Switch(Object[])
  nameWithType: Interaction.Switch(Object[])
  fullName: Microsoft.VisualBasic.Interaction.Switch(Object[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Oblicza listę wyrażeń i zwraca <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> wartość odpowiadającą pierwszemu wyrażeniu, na liście jest <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>."
  remarks: "Argument przekazany do `VarExpr` składa się z par wyrażeń i wartości. `Switch` Funkcja ocenia wyrażenia nieparzystą z najniższą do najwyższej indeksu w `VarExpr`i zwraca wartość parzystych skojarzoną z pierwszym wyrażeniem, która daje w wyniku `True`. Na przykład jeśli `VarExpr(0)` jest `True`, `Switch` zwraca `VarExpr(1)`, a jeśli `VarExpr(0)` jest `False` , ale `VarExpr(2)` jest `True`, `Switch` zwraca `VarExpr(3)`i tak dalej.       Jeśli nie podasz `VarExpr` argumentu, `Switch` zwraca `Nothing`.      > [!NOTE] > Wyrażenia na liście argument może zawierać wywołania funkcji. W ramach przygotowania do listy argumentów dla wywołania `Switch`, kompilator Visual Basic wywołuje funkcję co w każdym wyrażeniu. Oznacza to, że nie może zależeć określonej funkcji nie jest wywoływana, gdy wyrażenie wcześniej w liście argumentów jest `True`."
  example:
  - "The following example uses the `Switch` function to return the name of a language that matches the name of a city. It requires that `Option Strict` be `Off`.  \n  \n [!code-vb[VbVbalrFunctions#48](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._108_1.vb)]  \n  \n Because the <xref:System.Diagnostics> namespace also contains a class called <xref:System.Diagnostics.Switch>, a call to the `Switch` function must be qualified with the <xref:Microsoft.VisualBasic> namespace."
  syntax:
    content: public static object Switch (object[] VarExpr);
    parameters:
    - id: VarExpr
      type: System.Object[]
      description: "Wymagany. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>Tablica parametrów. Musi być parzystą liczbą elementów. Możesz podać listę <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> zmiennych lub wyrażeń oddzielonych przecinkami lub tablicy jednowymiarowej z <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> elementów."
    return:
      type: System.Object
      description: "Oblicza listę wyrażeń i zwraca <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> wartość odpowiadającą pierwszemu wyrażeniu, na liście jest <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>."
  overload: Microsoft.VisualBasic.Interaction.Switch*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Liczba argumentów jest nieparzysta."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.NullReferenceException
  isExternal: true
  name: System.NullReferenceException
- uid: Microsoft.VisualBasic.Interaction.AppActivate(System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: AppActivate(Int32)
  nameWithType: Interaction.AppActivate(Int32)
  fullName: Microsoft.VisualBasic.Interaction.AppActivate(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.Interaction.AppActivate(System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: AppActivate(String)
  nameWithType: Interaction.AppActivate(String)
  fullName: Microsoft.VisualBasic.Interaction.AppActivate(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Interaction.Beep
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Beep()
  nameWithType: Interaction.Beep()
  fullName: Microsoft.VisualBasic.Interaction.Beep()
- uid: Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: CallByName(Object,String,CallType,Object[])
  nameWithType: Interaction.CallByName(Object,String,CallType,Object[])
  fullName: Microsoft.VisualBasic.Interaction.CallByName(Object,String,CallType,Object[])
- uid: Microsoft.VisualBasic.CallType
  parent: Microsoft.VisualBasic
  isExternal: false
  name: CallType
  nameWithType: CallType
  fullName: Microsoft.VisualBasic.CallType
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Choose(Double,Object[])
  nameWithType: Interaction.Choose(Double,Object[])
  fullName: Microsoft.VisualBasic.Interaction.Choose(Double,Object[])
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.VisualBasic.Interaction.Command
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Command()
  nameWithType: Interaction.Command()
  fullName: Microsoft.VisualBasic.Interaction.Command()
- uid: Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: CreateObject(String,String)
  nameWithType: Interaction.CreateObject(String,String)
  fullName: Microsoft.VisualBasic.Interaction.CreateObject(String,String)
- uid: Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: DeleteSetting(String,String,String)
  nameWithType: Interaction.DeleteSetting(String,String,String)
  fullName: Microsoft.VisualBasic.Interaction.DeleteSetting(String,String,String)
- uid: Microsoft.VisualBasic.Interaction.Environ(System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Environ(Int32)
  nameWithType: Interaction.Environ(Int32)
  fullName: Microsoft.VisualBasic.Interaction.Environ(Int32)
- uid: Microsoft.VisualBasic.Interaction.Environ(System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Environ(String)
  nameWithType: Interaction.Environ(String)
  fullName: Microsoft.VisualBasic.Interaction.Environ(String)
- uid: Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: GetAllSettings(String,String)
  nameWithType: Interaction.GetAllSettings(String,String)
  fullName: Microsoft.VisualBasic.Interaction.GetAllSettings(String,String)
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[,]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[,]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: GetObject(String,String)
  nameWithType: Interaction.GetObject(String,String)
  fullName: Microsoft.VisualBasic.Interaction.GetObject(String,String)
- uid: Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: GetSetting(String,String,String,String)
  nameWithType: Interaction.GetSetting(String,String,String,String)
  fullName: Microsoft.VisualBasic.Interaction.GetSetting(String,String,String,String)
- uid: Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: IIf(Boolean,Object,Object)
  nameWithType: Interaction.IIf(Boolean,Object,Object)
  fullName: Microsoft.VisualBasic.Interaction.IIf(Boolean,Object,Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: InputBox(String,String,String,Int32,Int32)
  nameWithType: Interaction.InputBox(String,String,String,Int32,Int32)
  fullName: Microsoft.VisualBasic.Interaction.InputBox(String,String,String,Int32,Int32)
- uid: Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: MsgBox(Object,MsgBoxStyle,Object)
  nameWithType: Interaction.MsgBox(Object,MsgBoxStyle,Object)
  fullName: Microsoft.VisualBasic.Interaction.MsgBox(Object,MsgBoxStyle,Object)
- uid: Microsoft.VisualBasic.MsgBoxResult
  parent: Microsoft.VisualBasic
  isExternal: false
  name: MsgBoxResult
  nameWithType: MsgBoxResult
  fullName: Microsoft.VisualBasic.MsgBoxResult
- uid: Microsoft.VisualBasic.MsgBoxStyle
  parent: Microsoft.VisualBasic
  isExternal: false
  name: MsgBoxStyle
  nameWithType: MsgBoxStyle
  fullName: Microsoft.VisualBasic.MsgBoxStyle
- uid: Microsoft.VisualBasic.Interaction.Partition(System.Int64,System.Int64,System.Int64,System.Int64)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Partition(Int64,Int64,Int64,Int64)
  nameWithType: Interaction.Partition(Int64,Int64,Int64,Int64)
  fullName: Microsoft.VisualBasic.Interaction.Partition(Int64,Int64,Int64,Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: SaveSetting(String,String,String,String)
  nameWithType: Interaction.SaveSetting(String,String,String,String)
  fullName: Microsoft.VisualBasic.Interaction.SaveSetting(String,String,String,String)
- uid: Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Shell(String,AppWinStyle,Boolean,Int32)
  nameWithType: Interaction.Shell(String,AppWinStyle,Boolean,Int32)
  fullName: Microsoft.VisualBasic.Interaction.Shell(String,AppWinStyle,Boolean,Int32)
- uid: Microsoft.VisualBasic.AppWinStyle
  parent: Microsoft.VisualBasic
  isExternal: false
  name: AppWinStyle
  nameWithType: AppWinStyle
  fullName: Microsoft.VisualBasic.AppWinStyle
- uid: Microsoft.VisualBasic.Interaction.Switch(System.Object[])
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Switch(Object[])
  nameWithType: Interaction.Switch(Object[])
  fullName: Microsoft.VisualBasic.Interaction.Switch(Object[])
- uid: Microsoft.VisualBasic.Interaction.AppActivate*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: AppActivate
  nameWithType: Interaction.AppActivate
- uid: Microsoft.VisualBasic.Interaction.Beep*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Beep
  nameWithType: Interaction.Beep
- uid: Microsoft.VisualBasic.Interaction.CallByName*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: CallByName
  nameWithType: Interaction.CallByName
- uid: Microsoft.VisualBasic.Interaction.Choose*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Choose
  nameWithType: Interaction.Choose
- uid: Microsoft.VisualBasic.Interaction.Command*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Command
  nameWithType: Interaction.Command
- uid: Microsoft.VisualBasic.Interaction.CreateObject*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: CreateObject
  nameWithType: Interaction.CreateObject
- uid: Microsoft.VisualBasic.Interaction.DeleteSetting*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: DeleteSetting
  nameWithType: Interaction.DeleteSetting
- uid: Microsoft.VisualBasic.Interaction.Environ*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Environ
  nameWithType: Interaction.Environ
- uid: Microsoft.VisualBasic.Interaction.GetAllSettings*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: GetAllSettings
  nameWithType: Interaction.GetAllSettings
- uid: Microsoft.VisualBasic.Interaction.GetObject*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: GetObject
  nameWithType: Interaction.GetObject
- uid: Microsoft.VisualBasic.Interaction.GetSetting*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: GetSetting
  nameWithType: Interaction.GetSetting
- uid: Microsoft.VisualBasic.Interaction.IIf*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: IIf
  nameWithType: Interaction.IIf
- uid: Microsoft.VisualBasic.Interaction.InputBox*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: InputBox
  nameWithType: Interaction.InputBox
- uid: Microsoft.VisualBasic.Interaction.MsgBox*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: MsgBox
  nameWithType: Interaction.MsgBox
- uid: Microsoft.VisualBasic.Interaction.Partition*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Partition
  nameWithType: Interaction.Partition
- uid: Microsoft.VisualBasic.Interaction.SaveSetting*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: SaveSetting
  nameWithType: Interaction.SaveSetting
- uid: Microsoft.VisualBasic.Interaction.Shell*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Shell
  nameWithType: Interaction.Shell
- uid: Microsoft.VisualBasic.Interaction.Switch*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Switch
  nameWithType: Interaction.Switch
