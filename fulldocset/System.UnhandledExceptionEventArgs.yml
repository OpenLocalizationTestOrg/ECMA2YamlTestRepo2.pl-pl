### YamlMime:ManagedReference
items:
- uid: System.UnhandledExceptionEventArgs
  id: UnhandledExceptionEventArgs
  children:
  - System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)
  - System.UnhandledExceptionEventArgs.ExceptionObject
  - System.UnhandledExceptionEventArgs.IsTerminating
  langs:
  - csharp
  name: UnhandledExceptionEventArgs
  nameWithType: UnhandledExceptionEventArgs
  fullName: System.UnhandledExceptionEventArgs
  type: Class
  summary: "Udostępnia dane dla zdarzenia, które jest wywoływane, gdy występuje wyjątek, który nie jest obsługiwany w dowolnej domenie aplikacji."
  remarks: "UnhandledExceptionEventArgs zapewnia dostęp do obiektu wyjątku i flagę wskazującą, czy środowisko uruchomieniowe języka wspólnego kończy działanie wątku. UnhandledExceptionEventArgs jest jednym z parametrów przekazanych do <xref:System.UnhandledExceptionEventHandler>dla <xref:System.AppDomain.UnhandledException?displayProperty=fullName>zdarzeń.</xref:System.AppDomain.UnhandledException?displayProperty=fullName> </xref:System.UnhandledExceptionEventHandler>       Aby uzyskać więcej informacji na temat delegatów obsługi zdarzeń, zobacz [zdarzenia](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class UnhandledExceptionEventArgs : EventArgs
  inheritance:
  - System.EventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)
  id: '#ctor(System.Object,System.Boolean)'
  parent: System.UnhandledExceptionEventArgs
  langs:
  - csharp
  name: UnhandledExceptionEventArgs(Object,Boolean)
  nameWithType: UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
  fullName: System.UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.UnhandledExceptionEventArgs&quot;> </xref> z obiekt wyjątku i wspólne flagi zakończenia środowiska uruchomieniowego języka."
  syntax:
    content: public UnhandledExceptionEventArgs (object exception, bool isTerminating);
    parameters:
    - id: exception
      type: System.Object
      description: "Wyjątek, który nie jest obsługiwana."
    - id: isTerminating
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli środowisko uruchomieniowe przerywa; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.UnhandledExceptionEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.UnhandledExceptionEventArgs.ExceptionObject
  id: ExceptionObject
  parent: System.UnhandledExceptionEventArgs
  langs:
  - csharp
  name: ExceptionObject
  nameWithType: UnhandledExceptionEventArgs.ExceptionObject
  fullName: System.UnhandledExceptionEventArgs.ExceptionObject
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Pobiera obiekt nieobsługiwany wyjątek."
  remarks: "Ta właściwość zwraca obiekt typu <xref:System.Object>zamiast jedną pochodną <xref:System.Exception>.</xref:System.Exception> </xref:System.Object> Specyfikacja języka wspólnego wymaga, aby wszystkie typy wyjątek pochodzi od <xref:System.Exception>, istnieje możliwość metody zgłaszanie wyjątków z obiektami nie pochodzi od <xref:System.Exception>.</xref:System.Exception> </xref:System.Exception> Możesz wykonywać następujące do pracy z tym wyjątkiem:-Zastosuj <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute>atrybutem <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=fullName>wartość `true` do zestawu, który zawiera program obsługi zdarzeń.</xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=fullName> </xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> To opakowuje wszystkie wyjątki nie pochodzi od <xref:System.Exception>klasy w <xref:System.Runtime.CompilerServices.RuntimeWrappedException>obiektu.</xref:System.Runtime.CompilerServices.RuntimeWrappedException> </xref:System.Exception> Można bezpiecznie rzutowanie (C#) lub przekonwertować (w języku Visual Basic) obiektu zwracanego przez tę właściwość, aby <xref:System.Exception>obiektu i pobrać oryginalnego obiektu wyjątek <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=fullName>Właściwości.</xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=fullName> </xref:System.Exception> Należy pamiętać, że niektóre kompilatory, takich jak C# i Visual Basic kompilatorów automatycznie zastosowaniu tego atrybutu.      -Rzutowanie tego obiektu zwracane przez tę właściwość, aby <xref:System.Exception>obiektu.</xref:System.Exception>"
  example:
  - "The following example demonstrates the <xref:System.AppDomain.UnhandledException> event. It defines an event handler, `MyHandler`, that is invoked whenever an unhandled exception is thrown in the default application domain. It then throws two exceptions. The first is handled by a **try/catch** block. The second is unhandled and invokes the `MyHandle` routine before the application terminates.  \n  \n [!code-cs[AppDomain_UnhandledException#1](~/add/codesnippet/csharp/p-system.unhandledexcept_1.cs)]\n [!code-vb[AppDomain_UnhandledException#1](~/add/codesnippet/visualbasic/p-system.unhandledexcept_1.vb)]\n [!code-cpp[AppDomain_UnhandledException#1](~/add/codesnippet/cpp/p-system.unhandledexcept_1.cpp)]"
  syntax:
    content: public object ExceptionObject { get; }
    return:
      type: System.Object
      description: "Obiekt nieobsługiwany wyjątek."
  overload: System.UnhandledExceptionEventArgs.ExceptionObject*
  exceptions: []
  platform:
  - net462
- uid: System.UnhandledExceptionEventArgs.IsTerminating
  id: IsTerminating
  parent: System.UnhandledExceptionEventArgs
  langs:
  - csharp
  name: IsTerminating
  nameWithType: UnhandledExceptionEventArgs.IsTerminating
  fullName: System.UnhandledExceptionEventArgs.IsTerminating
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Wskazuje, czy środowisko uruchomieniowe języka wspólnego kończy działanie wątku."
  remarks: "Począwszy od programu .NET Framework w wersji 2.0, ta właściwość zwraca `true` dla większości nieobsługiwane wyjątki, chyba że używana jest flaga zgodności aplikacji, aby powrócić do zachowania w wersjach 1.0 i 1.1. Przyczyną jest możliwość najbardziej nieobsługiwanych wyjątków w wątkach, łącznie z wątków z puli wątków, aby kontynuować naturalnie, które zwykle powoduje przerwanie aplikacji. Aby uzyskać więcej informacji, łącznie z listą przypadków, w których środowisko uruchomieniowe nie kończy się, zobacz [wyjątki w zarządzanych wątkach](~/add/includes/ajax-current-ext-md.md).      ## Poniższe uwagi dotyczą wersji systemu .NET Framework 1.0 i 1.1 informacje o wersji: Ta właściwość zwraca `true` gdy otrzymane w wyjątek, ale nie są obsługiwane przez wątku głównego aplikacji. Ta właściwość zwraca również wartość `true` gdy niezarządzany wątek jest wykonywanie kodu zarządzanego i odbiera nieobsługiwany wyjątek. Ponadto ta właściwość zwraca `false` wątków z puli wątków i zarządzanych wątków utworzone przez aplikację, ponieważ w wersjach 1.0 i 1.1 catch nieobsługiwanych wyjątków w takich wątków i je zignorować."
  syntax:
    content: public bool IsTerminating { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli środowisko uruchomieniowe przerywa; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.UnhandledExceptionEventArgs.IsTerminating*
  exceptions: []
  platform:
  - net462
references:
- uid: System.EventArgs
  isExternal: false
  name: System.EventArgs
- uid: System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: UnhandledExceptionEventArgs(Object,Boolean)
  nameWithType: UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
  fullName: System.UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.UnhandledExceptionEventArgs.ExceptionObject
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: ExceptionObject
  nameWithType: UnhandledExceptionEventArgs.ExceptionObject
  fullName: System.UnhandledExceptionEventArgs.ExceptionObject
- uid: System.UnhandledExceptionEventArgs.IsTerminating
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: IsTerminating
  nameWithType: UnhandledExceptionEventArgs.IsTerminating
  fullName: System.UnhandledExceptionEventArgs.IsTerminating
- uid: System.UnhandledExceptionEventArgs.#ctor*
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: UnhandledExceptionEventArgs
  nameWithType: UnhandledExceptionEventArgs.UnhandledExceptionEventArgs
- uid: System.UnhandledExceptionEventArgs.ExceptionObject*
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: ExceptionObject
  nameWithType: UnhandledExceptionEventArgs.ExceptionObject
- uid: System.UnhandledExceptionEventArgs.IsTerminating*
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: IsTerminating
  nameWithType: UnhandledExceptionEventArgs.IsTerminating
