### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.TraceEventCache
  id: TraceEventCache
  children:
  - System.Diagnostics.TraceEventCache.#ctor
  - System.Diagnostics.TraceEventCache.Callstack
  - System.Diagnostics.TraceEventCache.DateTime
  - System.Diagnostics.TraceEventCache.LogicalOperationStack
  - System.Diagnostics.TraceEventCache.ProcessId
  - System.Diagnostics.TraceEventCache.ThreadId
  - System.Diagnostics.TraceEventCache.Timestamp
  langs:
  - csharp
  name: TraceEventCache
  nameWithType: TraceEventCache
  fullName: System.Diagnostics.TraceEventCache
  type: Class
  summary: "Zapewnia dane zdarzeń śledzenia specyficzne dla wątku i procesu."
  remarks: "> [!NOTE]> TraceEventCache klasy, zaprojektowany jako optymalizację wydajności dla połączeń odbiornika śledzenia jest tylko dla deweloperów, tworzenie obiektów nasłuchujących śledzenia niestandardowych.       Klasa TraceEventCache jest używana jako parametr w metodach śledzenie dokładnie sprawdzić źródło zdarzenia śledzenia. Przykładem metody, które używają TraceEventCache są <xref:System.Diagnostics.TraceListener.TraceEvent%2A?displayProperty=fullName>i <xref:System.Diagnostics.TraceFilter.ShouldTrace%2A?displayProperty=fullName>.</xref:System.Diagnostics.TraceFilter.ShouldTrace%2A?displayProperty=fullName> </xref:System.Diagnostics.TraceListener.TraceEvent%2A?displayProperty=fullName> <xref:System.Diagnostics.TraceEventCache.LogicalOperationStack%2A>Właściwość zawiera dane, które służy do skorelowania śledzenia z powiązanych śladów.</xref:System.Diagnostics.TraceEventCache.LogicalOperationStack%2A>"
  syntax:
    content: public class TraceEventCache
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Diagnostics.TraceEventCache.#ctor
  id: '#ctor'
  parent: System.Diagnostics.TraceEventCache
  langs:
  - csharp
  name: TraceEventCache()
  nameWithType: TraceEventCache.TraceEventCache()
  fullName: System.Diagnostics.TraceEventCache.TraceEventCache()
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref> klasy."
  syntax:
    content: public TraceEventCache ();
    parameters: []
  overload: System.Diagnostics.TraceEventCache.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceEventCache.Callstack
  id: Callstack
  parent: System.Diagnostics.TraceEventCache
  langs:
  - csharp
  name: Callstack
  nameWithType: TraceEventCache.Callstack
  fullName: System.Diagnostics.TraceEventCache.Callstack
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Pobiera stos wywołań bieżącego wątku."
  remarks: "Właściwość stos wywołań pobiera stos wywołań z <xref:System.Environment.StackTrace%2A>właściwości <xref:System.Environment>klasy.</xref:System.Environment> </xref:System.Environment.StackTrace%2A> Wartość właściwości zawiera wywołania metody w odwrotnej kolejności. Oznacza to, że najnowsze wywołanie metody opisano najpierw. Dla każdego wywołania metody na stosie, znajduje się jeden wiersz informacje śledzenia stosu. Aby uzyskać więcej informacji zobacz <xref:System.Environment.StackTrace%2A>.</xref:System.Environment.StackTrace%2A>"
  syntax:
    content: public string Callstack { get; }
    return:
      type: System.String
      description: "Ciąg zawierający informacje śledzenia stosu. Ta wartość może być pustym ciągiem (&quot;&quot;)."
  overload: System.Diagnostics.TraceEventCache.Callstack*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceEventCache.DateTime
  id: DateTime
  parent: System.Diagnostics.TraceEventCache
  langs:
  - csharp
  name: DateTime
  nameWithType: TraceEventCache.DateTime
  fullName: System.Diagnostics.TraceEventCache.DateTime
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Pobiera datę i godzinę, o której wystąpił śledzenia zdarzeń."
  remarks: "Przy pierwszym uzyskaniu dostępu do właściwości w wystąpieniu <xref:System.Diagnostics.TraceEventCache>klasy bieżący czas jest zwracana.</xref:System.Diagnostics.TraceEventCache> Kolejne kwerendy tej właściwości, w tym wystąpieniu zwracają takim samym <xref:System.DateTime>wartości, dzięki któremu można użyć jako sygnaturę czasową.</xref:System.DateTime>"
  syntax:
    content: public DateTime DateTime { get; }
    return:
      type: System.DateTime
      description: "A <xref:System.DateTime>struktury, którego wartość jest datę i godzinę wyrażone w uniwersalnego czasu koordynowanego (UTC).</xref:System.DateTime>"
  overload: System.Diagnostics.TraceEventCache.DateTime*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceEventCache.LogicalOperationStack
  id: LogicalOperationStack
  parent: System.Diagnostics.TraceEventCache
  langs:
  - csharp
  name: LogicalOperationStack
  nameWithType: TraceEventCache.LogicalOperationStack
  fullName: System.Diagnostics.TraceEventCache.LogicalOperationStack
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Pobiera dane korelacji, zawarte w stosie."
  remarks: "Dane korelacji są przechowywane jako obiekt w kontekście wywołania o nazwie &quot;System.Diagnostics.Trace.CorrelationManagerSlot&quot;. <xref:System.Diagnostics.CorrelationManager>Klasa udostępnia metody używane do przechowywania tożsamości operacji logicznej w kontekście wątku wiązaniem i automatycznie dodają tagi każdego zdarzenia śledzenia generowane przez wątek z tożsamością przechowywanych.</xref:System.Diagnostics.CorrelationManager> <xref:System.Diagnostics.CorrelationManager>Jest dostępny za pośrednictwem <xref:System.Diagnostics.Trace.CorrelationManager%2A?displayProperty=fullName>Właściwości.</xref:System.Diagnostics.Trace.CorrelationManager%2A?displayProperty=fullName> </xref:System.Diagnostics.CorrelationManager> Każde wywołanie <xref:System.Diagnostics.CorrelationManager.StartLogicalOperation%2A>metody wypchnięcia nową tożsamość operacja logiczna na stosie.</xref:System.Diagnostics.CorrelationManager.StartLogicalOperation%2A> Każde wywołanie <xref:System.Diagnostics.CorrelationManager.StopLogicalOperation%2A>metody POP tożsamością operacja logiczna ze stosu</xref:System.Diagnostics.CorrelationManager.StopLogicalOperation%2A>"
  syntax:
    content: public System.Collections.Stack LogicalOperationStack { get; }
    return:
      type: System.Collections.Stack
      description: "A <xref href=&quot;System.Collections.Stack&quot;> </xref> zawierających dane korelacji."
  overload: System.Diagnostics.TraceEventCache.LogicalOperationStack*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceEventCache.ProcessId
  id: ProcessId
  parent: System.Diagnostics.TraceEventCache
  langs:
  - csharp
  name: ProcessId
  nameWithType: TraceEventCache.ProcessId
  fullName: System.Diagnostics.TraceEventCache.ProcessId
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Pobiera unikatowy identyfikator bieżącego procesu."
  remarks: "Aż do zakończenia procesu, identyfikator procesu jest unikatowym identyfikatorem procesu w systemie."
  syntax:
    content: public int ProcessId { get; }
    return:
      type: System.Int32
      description: "Wygenerowana przez system Unikatowy identyfikator bieżącego procesu."
  overload: System.Diagnostics.TraceEventCache.ProcessId*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceEventCache.ThreadId
  id: ThreadId
  parent: System.Diagnostics.TraceEventCache
  langs:
  - csharp
  name: ThreadId
  nameWithType: TraceEventCache.ThreadId
  fullName: System.Diagnostics.TraceEventCache.ThreadId
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Pobiera unikatowy identyfikator bieżącego wątku zarządzanego."
  remarks: "Identyfikator wątku jest wartością <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=fullName>Właściwości sformatowany jako ciąg.</xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=fullName>"
  syntax:
    content: public string ThreadId { get; }
    return:
      type: System.String
      description: "Ciąg, który reprezentuje całkowitą Unikatowy identyfikator dla tego wątku zarządzanego."
  overload: System.Diagnostics.TraceEventCache.ThreadId*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceEventCache.Timestamp
  id: Timestamp
  parent: System.Diagnostics.TraceEventCache
  langs:
  - csharp
  name: Timestamp
  nameWithType: TraceEventCache.Timestamp
  fullName: System.Diagnostics.TraceEventCache.Timestamp
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Pobiera bieżącą liczbę znaczników mechanizmu czasomierza."
  remarks: "Wywołania metody dostępu get <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A?displayProperty=fullName>metody można pobrać sygnatury czasowej.</xref:System.Diagnostics.Stopwatch.GetTimestamp%2A?displayProperty=fullName> Jeśli <xref:System.Diagnostics.Stopwatch>Klasa korzysta z licznika wydajności o wysokiej rozdzielczości, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A>zwraca bieżącą wartość tego licznika.</xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> </xref:System.Diagnostics.Stopwatch> Jeśli <xref:System.Diagnostics.Stopwatch>Klasa korzysta czasomierz systemu, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A>zwraca wartość <xref:System.DateTime.Ticks%2A>właściwości <xref:System.DateTime.Now%2A?displayProperty=fullName>.</xref:System.DateTime.Now%2A?displayProperty=fullName> </xref:System.DateTime.Ticks%2A> </xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> </xref:System.Diagnostics.Stopwatch>"
  syntax:
    content: public long Timestamp { get; }
    return:
      type: System.Int64
      description: "Wartość licznika znaczników podstawowy mechanizm czasomierza."
  overload: System.Diagnostics.TraceEventCache.Timestamp*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Diagnostics.TraceEventCache.#ctor
  parent: System.Diagnostics.TraceEventCache
  isExternal: false
  name: TraceEventCache()
  nameWithType: TraceEventCache.TraceEventCache()
  fullName: System.Diagnostics.TraceEventCache.TraceEventCache()
- uid: System.Diagnostics.TraceEventCache.Callstack
  parent: System.Diagnostics.TraceEventCache
  isExternal: false
  name: Callstack
  nameWithType: TraceEventCache.Callstack
  fullName: System.Diagnostics.TraceEventCache.Callstack
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.TraceEventCache.DateTime
  parent: System.Diagnostics.TraceEventCache
  isExternal: false
  name: DateTime
  nameWithType: TraceEventCache.DateTime
  fullName: System.Diagnostics.TraceEventCache.DateTime
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Diagnostics.TraceEventCache.LogicalOperationStack
  parent: System.Diagnostics.TraceEventCache
  isExternal: false
  name: LogicalOperationStack
  nameWithType: TraceEventCache.LogicalOperationStack
  fullName: System.Diagnostics.TraceEventCache.LogicalOperationStack
- uid: System.Collections.Stack
  parent: System.Collections
  isExternal: false
  name: Stack
  nameWithType: Stack
  fullName: System.Collections.Stack
- uid: System.Diagnostics.TraceEventCache.ProcessId
  parent: System.Diagnostics.TraceEventCache
  isExternal: false
  name: ProcessId
  nameWithType: TraceEventCache.ProcessId
  fullName: System.Diagnostics.TraceEventCache.ProcessId
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.TraceEventCache.ThreadId
  parent: System.Diagnostics.TraceEventCache
  isExternal: false
  name: ThreadId
  nameWithType: TraceEventCache.ThreadId
  fullName: System.Diagnostics.TraceEventCache.ThreadId
- uid: System.Diagnostics.TraceEventCache.Timestamp
  parent: System.Diagnostics.TraceEventCache
  isExternal: false
  name: Timestamp
  nameWithType: TraceEventCache.Timestamp
  fullName: System.Diagnostics.TraceEventCache.Timestamp
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Diagnostics.TraceEventCache.#ctor*
  parent: System.Diagnostics.TraceEventCache
  isExternal: false
  name: TraceEventCache
  nameWithType: TraceEventCache.TraceEventCache
- uid: System.Diagnostics.TraceEventCache.Callstack*
  parent: System.Diagnostics.TraceEventCache
  isExternal: false
  name: Callstack
  nameWithType: TraceEventCache.Callstack
- uid: System.Diagnostics.TraceEventCache.DateTime*
  parent: System.Diagnostics.TraceEventCache
  isExternal: false
  name: DateTime
  nameWithType: TraceEventCache.DateTime
- uid: System.Diagnostics.TraceEventCache.LogicalOperationStack*
  parent: System.Diagnostics.TraceEventCache
  isExternal: false
  name: LogicalOperationStack
  nameWithType: TraceEventCache.LogicalOperationStack
- uid: System.Diagnostics.TraceEventCache.ProcessId*
  parent: System.Diagnostics.TraceEventCache
  isExternal: false
  name: ProcessId
  nameWithType: TraceEventCache.ProcessId
- uid: System.Diagnostics.TraceEventCache.ThreadId*
  parent: System.Diagnostics.TraceEventCache
  isExternal: false
  name: ThreadId
  nameWithType: TraceEventCache.ThreadId
- uid: System.Diagnostics.TraceEventCache.Timestamp*
  parent: System.Diagnostics.TraceEventCache
  isExternal: false
  name: Timestamp
  nameWithType: TraceEventCache.Timestamp
