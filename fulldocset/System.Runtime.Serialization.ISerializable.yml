### YamlMime:ManagedReference
items:
- uid: System.Runtime.Serialization.ISerializable
  id: ISerializable
  children:
  - System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  langs:
  - csharp
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
  type: Interface
  summary: "Umożliwia obiekt do kontrolowania własną serializacji i deserializacji."
  remarks: "Wszystkie klasy, która może być serializowany muszą być oznaczone <xref:System.SerializableAttribute>.</xref:System.SerializableAttribute> Jeśli klasa musi kontrolować procesu serializacji, on implementować interfejsu ISerializable. <xref:System.Runtime.Serialization.Formatter>Wywołania <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>podczas serializacji i wypełnia podane <xref:System.Runtime.Serialization.SerializationInfo>przy użyciu danych wymaganych do reprezentowania obiektu.</xref:System.Runtime.Serialization.SerializationInfo> </xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> </xref:System.Runtime.Serialization.Formatter> <xref:System.Runtime.Serialization.Formatter>Tworzy <xref:System.Runtime.Serialization.SerializationInfo>z typem obiektu na wykresie.</xref:System.Runtime.Serialization.SerializationInfo> </xref:System.Runtime.Serialization.Formatter> Obiekty, które musi wysłać proxy może się użyć <xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A>i <xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A>metody <xref:System.Runtime.Serialization.SerializationInfo>Aby zmienić informacje przesyłane.</xref:System.Runtime.Serialization.SerializationInfo> </xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A> </xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A>       W przypadku dziedziczenia klas jest możliwy do serializacji klasy, która pochodzi z klasy podstawowej, która implementuje interfejs ISerializable. W takim przypadku Klasa pochodna powinny wywoływać implementację klasy podstawowej <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>wewnątrz jej implementacja <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>.</xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> </xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> W przeciwnym razie nie będzie serializacji danych z klasy podstawowej.       Interfejs ISerializable oznacza konstruktora z konstruktora podpisu (<xref:System.Runtime.Serialization.SerializationInfo> informacji, <xref:System.Runtime.Serialization.StreamingContext>kontekstu).</xref:System.Runtime.Serialization.StreamingContext> </xref:System.Runtime.Serialization.SerializationInfo> Podczas deserializacji, bieżąca Konstruktor jest wywoływany tylko po danych w <xref:System.Runtime.Serialization.SerializationInfo>został zdeserializowany przez program formatujący.</xref:System.Runtime.Serialization.SerializationInfo> Ogólnie rzecz biorąc ten konstruktor powinien być chroniony, jeśli klasa nie jest zapieczętowany.       Nie można zagwarantować kolejność, w którym są deserializacji obiektów. Na przykład jeśli jeden typ odwołuje się do typu, który nie został jeszcze zdeserializować, wyjątek zostanie przeprowadzona. W przypadku tworzenia typów, które mają takie zależności można obejść problem zaimplementowanie `IDeserializationCallback` interfejsu i `OnDeserialization` metody.       Architektura serializacji obsługuje typy obiektów, które rozszerzają <xref:System.MarshalByRefObject>taka sama jak typy, które rozszerzyć <xref:System.Object>.</xref:System.Object> </xref:System.MarshalByRefObject> Te typy może być oznaczony przez <xref:System.SerializableAttribute>i implementować interfejsu ISerializable jako inny typ obiektu.</xref:System.SerializableAttribute> Ich stan obiektu zostanie przechwycony i utrwalony na strumienia.       Gdy są używane te typy poprzez <xref:System.Runtime.Remoting>, w zdalnej infrastrukturze zapewnia Surogat, która zastępuje typowe serializacji i serializuje zamiast tego serwer proxy do <xref:System.MarshalByRefObject>.</xref:System.MarshalByRefObject> </xref:System.Runtime.Remoting> Surogatu jest pomocnika, który potrafi w celu serializacji i deserializacji obiektów określonego typu. Serwer proxy, niewidoczne dla użytkownika, w większości przypadków będzie typu <xref:System.Runtime.Remoting.ObjRef>.</xref:System.Runtime.Remoting.ObjRef>       Jako wzorzec projektowania ogólne wyjątkowo rzadko dla klasy z atrybutowi serializable można oznaczyć i rozszerzać <xref:System.MarshalByRefObject>.</xref:System.MarshalByRefObject> Deweloperzy należy rozważnie o możliwych scenariuszach serializacji i komunikacji zdalnej połączenie tych dwóch właściwości. Przykładem, gdy jest to odpowiednie jest z <xref:System.IO.MemoryStream>.</xref:System.IO.MemoryStream> Podczas klasę podstawową <xref:System.IO.MemoryStream>(<xref:System.IO.Stream>) rozciąga się od <xref:System.MarshalByRefObject>, można przechwytywać stan <xref:System.IO.MemoryStream>i przywrócenie go w momencie.</xref:System.IO.MemoryStream> </xref:System.MarshalByRefObject> </xref:System.IO.Stream> </xref:System.IO.MemoryStream> W związku z tym może być poprawne serializować stanu tego strumienia w bazie danych i przywróć ją w pewnym momencie nowsze w czasie. Jednakże w przypadku za pośrednictwem usługi zdalne obiektu tego typu może być serwerem proxy.       Aby uzyskać więcej informacji na temat serializacji klas, które rozszerzają <xref:System.MarshalByRefObject>, zobacz <xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector>.</xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector> </xref:System.MarshalByRefObject> Aby uzyskać więcej informacji na temat implementującego interfejs ISerializable, zobacz [serializacji niestandardowe](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of the ISerializable interface to define custom serialization behavior for a class.  \n  \n [!code-cpp[ISerializable Interface Example#1](~/add/codesnippet/cpp/t-system.runtime.seriali_4_1.cpp)]\n [!code-cs[ISerializable Interface Example#1](~/add/codesnippet/csharp/t-system.runtime.seriali_4_1.cs)]\n [!code-vb[ISerializable Interface Example#1](~/add/codesnippet/visualbasic/t-system.runtime.seriali_4_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface ISerializable
  implements: []
  platform:
  - net462
- uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.Serialization.ISerializable
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Serialization
  summary: "Wypełnia <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> z dane potrzebne do zserializowania obiektu docelowego."
  remarks: "Wszystkie obiekty, które znajdują się w <xref:System.Runtime.Serialization.SerializationInfo>automatycznie są śledzone i serializowany przez program formatujący.</xref:System.Runtime.Serialization.SerializationInfo>       Kod, który wywołuje metodę GetObjectData wymaga <xref:System.Security.Permissions.SecurityPermission>do świadczenia usług serializacji.</xref:System.Security.Permissions.SecurityPermission> Wyliczenie skojarzone: <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>.</xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>      > [!NOTE] > Nie gwarantuje, że ta metoda zostanie wywołana tylko raz dla każdego wystąpienia obiektu podczas serializacji. W związku z tym metody powinny być implementowane w taki sposób, że jego zachowanie jest taki sam, niezależnie od tego, ile razy, jest ona wywoływana."
  example:
  - "The following example uses the GetObjectData method to set alternate values for a serialized object. The code uses the <xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A> method of the <xref:System.Runtime.Serialization.SerializationInfo> class to store the alternate values when the object is serialized. Conversely, when the constructor of the `Person` class is called during deserialization, the alternatve values are retrieved using the <xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A> method and reassigned to the object's fields.  \n  \n [!code-cs[ISerializable_GetObjectData#0](~/add/codesnippet/csharp/8416df17-ca26-45ef-baab-_1.cs)]\n [!code-vb[ISerializable_GetObjectData#0](~/add/codesnippet/visualbasic/8416df17-ca26-45ef-baab-_1.vb)]"
  syntax:
    content: public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> Do wypełniania danych."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Miejsce docelowe (zobacz <xref:System.Runtime.Serialization.StreamingContext>) tej serializacji.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Runtime.Serialization.ISerializable.GetObjectData*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Obiekt wywołujący nie ma wymaganych uprawnień."
  platform:
  - net462
references:
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.Serialization.ISerializable
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Runtime.Serialization.ISerializable.GetObjectData*
  parent: System.Runtime.Serialization.ISerializable
  isExternal: false
  name: GetObjectData
  nameWithType: ISerializable.GetObjectData
