### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.IErrorHandler
  id: IErrorHandler
  children:
  - System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  - System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  langs:
  - csharp
  name: IErrorHandler
  nameWithType: IErrorHandler
  fullName: System.ServiceModel.Dispatcher.IErrorHandler
  type: Interface
  summary: "Umożliwia implementujący do kontrolowania komunikat o błędzie zwracany do obiektu wywołującego i opcjonalnie wykonać przetwarzania, takich jak rejestrowanie błędów niestandardowych."
  remarks: "Jawnie sterowania zachowaniem aplikacji w przypadku jest zwracany wyjątek, zaimplementuj interfejs interfejsy IErrorHandler i dodaj go do <xref:System.ServiceModel.Dispatcher.ChannelDispatcher>w <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>Właściwości.</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> </xref:System.ServiceModel.Dispatcher.ChannelDispatcher> Interfejsy IErrorHandler umożliwia jawnie kontrolować błąd protokołu SOAP wygenerowane, zdecyduj, czy go wysłać do klienta i wykonywać zadania skojarzone, takie jak rejestrowanie. Błąd procedury obsługi są wywoływane w kolejności, w jakiej zostały dodane do <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>Właściwości.</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>       Implementowanie <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>metody kontrolowania komunikat o błędzie, która jest zwracana do klienta.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>       Implementowanie <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>metody w celu zapewnienia zachowania związane z błędami Błąd rejestrowania, zapewniając błędu szybkie, zamykanie aplikacji, w tym i tak dalej.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>      > [!NOTE] > Ponieważ <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>z wielu różnych miejscach nie ma żadnych gwarancji o który wątek wywołano metodę można wywołać metody.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> Nie są zależne od <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>metody wywoływane w wątku operacji.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>       Wszystkie <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>implementacje są nazywane najpierw przed ich wysłaniem komunikatu odpowiedzi.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> Gdy wszystkie <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>implementacje została wywołana i przywrócić i w razie `fault` ma wartość inną niż`null`, są wysyłane do klienta zgodnie z kontrakt operacji.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> Jeśli `fault` jest `null` po wywołaniu wszystkich implementacji komunikat odpowiedzi jest kontrolowany przez <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=fullName>wartości właściwości.</xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=fullName>      > [!NOTE] > Wyjątki mogą występować po wszystkich <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>implementacje są nazywane i komunikat odpowiedzi jest przekazywany do kanału.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> Jeśli wystąpi wyjątek kanału (na przykład trudności serializacji komunikatu) są powiadamiani o interfejsy IErrorHandler obiektów. W takim przypadku należy nadal upewnij się, czy środowiska deweloperskiego przechwytuje i wyświetla takie wyjątki sprawia, że użycie śledzenia do odnajdywania problem. Aby uzyskać więcej informacji dotyczących śledzenia, zobacz [przy użyciu śledzenie, aby rozwiązać Twoja aplikacja](~/add/includes/ajax-current-ext-md.md).       Po odpowiedzi wiadomość została wysłana, wszystkie <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>implementacje są nazywane w tej samej kolejności.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>       Zazwyczaj implementacja interfejsy IErrorHandler jest dodawany do <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>Właściwości usługi (i klienta w przypadku komunikacji dupleksowej).</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>       Interfejsy IErrorHandler można dodać do środowiska wykonawczego, implementując zachowanie (albo <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName>, <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName>, lub <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=fullName>obiektu) i zachowanie programowo, w pliku konfiguracji lub z atrybutem niestandardowym można dołączyć sieci interfejsy IErrorHandler.</xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName>       Aby uzyskać więcej informacji dotyczących modyfikowania środowiska uruchomieniowego za pomocą zachowań, zobacz [Konfigurowanie i rozszerzanie środowiska uruchomieniowego za pomocą zachowań](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates a service that implements IErrorHandler that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the IErrorHandler implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n```  \n  \n<configuration>  \n  <system.serviceModel>  \n    <services>  \n      <service   \n        name=\"Microsoft.WCF.Documentation.SampleService\"  \n        behaviorConfiguration=\"metaAndErrors\">  \n        <host>  \n          <baseAddresses>  \n            <add baseAddress=\"http://localhost:8080/SampleService\"/>  \n          </baseAddresses>  \n        </host>  \n        <endpoint  \n          address=\"\"  \n          binding=\"wsHttpBinding\"  \n          contract=\"Microsoft.WCF.Documentation.ISampleService\"  \n         />  \n        <endpoint  \n          address=\"mex\"  \n          binding=\"mexHttpBinding\"  \n          contract=\"IMetadataExchange\"  \n         />  \n      </service>  \n    </services>  \n    <behaviors>  \n      <serviceBehaviors>  \n        <behavior name=\"metaAndErrors\">  \n          <serviceDebug includeExceptionDetailInFaults=\"true\"/>  \n          <serviceMetadata httpGetEnabled=\"true\"/>  \n          <enforceGreetingFaults />  \n        </behavior>  \n      </serviceBehaviors>  \n    </behaviors>  \n    <extensions>  \n      <behaviorExtensions>  \n        <add   \n          name=\"enforceGreetingFaults\"   \n          type=\"Microsoft.WCF.Documentation.EnforceGreetingFaultBehavior, HostApplication, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\"  \n        />  \n      </behaviorExtensions>  \n    </extensions>  \n  </system.serviceModel>  \n</configuration>  \n```"
  syntax:
    content: public interface IErrorHandler
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  id: HandleError(System.Exception)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  langs:
  - csharp
  name: HandleError(Exception)
  nameWithType: IErrorHandler.HandleError(Exception)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(Exception)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Umożliwia przetwarzanie związane z błędami i zwraca wartość wskazującą, czy Dyspozytor przerywa sesji i kontekst wystąpienia w niektórych przypadkach."
  remarks: "Metoda HandleError do wykonania powiązane z zachowań, takich jak rejestrowanie powiadomień systemowych, zamykanie aplikacji i tak dalej, błędów i zwraca wartość określającą, czy wyjątek został obsłużony odpowiednio.      > [!NOTE] > Ponieważ z wielu różnych miejscach nie ma żadnych gwarancji o który wątek wywołano metodę można wywołać metody HandleError. Nie zależą od metody HandleError wywoływane w wątku operację.       Wszystkie <xref:System.ServiceModel.Dispatcher.IErrorHandler>implementacje są nazywane.</xref:System.ServiceModel.Dispatcher.IErrorHandler> Domyślnie (gdy jest zwracana wartość `false`), w przypadku wyjątku, Dyspozytor przerywa dowolnej sesji i przerywa <xref:System.ServiceModel.InstanceContext>Jeśli <xref:System.ServiceModel.InstanceContextMode>jest inna niż <xref:System.ServiceModel.InstanceContextMode>.</xref:System.ServiceModel.InstanceContextMode> </xref:System.ServiceModel.InstanceContextMode> </xref:System.ServiceModel.InstanceContext>  Wyjątek jest on uznany za nieobsługiwany i każdy stan jest uznawany za uszkodzony.       Zwraca `true` z HandleError, aby zapobiec to zachowanie domyślne. Jeśli zwróci żadnych program obsługi błędów `true` zleca [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] bezpiecznego kontynuować korzystanie z stan skojarzony z żądaniem nie powiodło się.       Jeśli zwróci błąd obsługi `true` z HandleError nieobsłużony wyjątek jest uznawany za — metoda i stosuje się domyślny może spowodować przerwane <xref:System.ServiceModel.InstanceContext?displayProperty=fullName>i kanału podczas komunikacji kanału sesji lub <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName>właściwość nie jest ustawiona na <xref:System.ServiceModel.InstanceContextMode?displayProperty=fullName>.</xref:System.ServiceModel.InstanceContextMode?displayProperty=fullName> </xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName> </xref:System.ServiceModel.InstanceContext?displayProperty=fullName>       `error` Nigdy nie jest parametr `null` i zawiera obiekt wyjątku, który został zgłoszony."
  example:
  - "The following code example demonstrates a service that implements <xref:System.ServiceModel.Dispatcher.IErrorHandler> that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool HandleError (Exception error);
    parameters:
    - id: error
      type: System.Exception
      description: "Zgłoszono wyjątek podczas przetwarzania."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] nie powinny przerwania sesji (jeśli istnieje) i wystąpienia kontekstu, jeśli wystąpienie kontekstu nie jest <xref href=&quot;System.ServiceModel.InstanceContextMode&quot;> </xref>a w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Wartość domyślna to <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceModel.Dispatcher.IErrorHandler.HandleError*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  id: ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  langs:
  - csharp
  name: ProvideFault(Exception,MessageVersion,Message)
  nameWithType: IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Umożliwia tworzenie niestandardowego &lt;xref:System.ServiceModel.FaultException%601&gt; który zostanie zwrócony wyjątek w trakcie metody usługi."
  remarks: "Zaimplementuj metodę ProvideFault, aby utworzyć komunikat o błędzie niestandardowej, która jest zwracana do klienta.  Metoda ProvideFault zawsze zostanie wywołana dla wyjątków, które opuszczają operacje, z wyjątkiem, gdy WCF środowisko uruchomieniowe rozpoznaje wyjątek jako szczególnie krytyczny i ponownie zgłasza wyjątek, sam. Gdy wywoływana wszystkich implementacjach ProvideFault komunikat o błędzie jest wysyłany do klienta (Jeśli `fault` ma wartość inną niż`null`). Jeśli `fault` parametr jest `null` błędów domyślne są wysyłane do klienta.      > [!NOTE] > Wiadomości przychodzących, który spowodował błąd przetwarzania jest dostępny w tej metody z <xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=fullName>Właściwości.</xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=fullName>      > [!NOTE] > Ponieważ z wielu różnych miejscach nie ma żadnych gwarancji o który wątek wywołano metodę można wywołać metody ProvideFault. Nie zależą od metody ProvideFault wywoływane w wątku operację."
  example:
  - "The following code example demonstrates a service that implements <xref:System.ServiceModel.Dispatcher.IErrorHandler> that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public void ProvideFault (Exception error, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);
    parameters:
    - id: error
      type: System.Exception
      description: "<xref:System.Exception>Obiektu wyjątek w trakcie operacji usługi.</xref:System.Exception>"
    - id: version
      type: System.ServiceModel.Channels.MessageVersion
      description: "Wersja protokołu SOAP wiadomości."
    - id: fault
      type: System.ServiceModel.Channels.Message
      description: "&lt;Xref:System.ServiceModel.Channels.Message?displayProperty=fullName&gt; obiektu, która jest zwracana do klienta lub usługi, w przypadku dupleksowych."
  overload: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: HandleError(Exception)
  nameWithType: IErrorHandler.HandleError(Exception)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(Exception)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: ProvideFault(Exception,MessageVersion,Message)
  nameWithType: IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
- uid: System.ServiceModel.Channels.MessageVersion
  parent: System.ServiceModel.Channels
  isExternal: true
  name: MessageVersion
  nameWithType: MessageVersion
  fullName: System.ServiceModel.Channels.MessageVersion
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError*
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: HandleError
  nameWithType: IErrorHandler.HandleError
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault*
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: ProvideFault
  nameWithType: IErrorHandler.ProvideFault
