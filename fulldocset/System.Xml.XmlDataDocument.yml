### YamlMime:ManagedReference
items:
- uid: System.Xml.XmlDataDocument
  id: XmlDataDocument
  children:
  - System.Xml.XmlDataDocument.#ctor
  - System.Xml.XmlDataDocument.#ctor(System.Data.DataSet)
  - System.Xml.XmlDataDocument.CloneNode(System.Boolean)
  - System.Xml.XmlDataDocument.CreateElement(System.String,System.String,System.String)
  - System.Xml.XmlDataDocument.CreateEntityReference(System.String)
  - System.Xml.XmlDataDocument.CreateNavigator(System.Xml.XmlNode)
  - System.Xml.XmlDataDocument.DataSet
  - System.Xml.XmlDataDocument.GetElementById(System.String)
  - System.Xml.XmlDataDocument.GetElementFromRow(System.Data.DataRow)
  - System.Xml.XmlDataDocument.GetElementsByTagName(System.String)
  - System.Xml.XmlDataDocument.GetRowFromElement(System.Xml.XmlElement)
  - System.Xml.XmlDataDocument.Load(System.IO.Stream)
  - System.Xml.XmlDataDocument.Load(System.IO.TextReader)
  - System.Xml.XmlDataDocument.Load(System.String)
  - System.Xml.XmlDataDocument.Load(System.Xml.XmlReader)
  langs:
  - csharp
  name: XmlDataDocument
  nameWithType: XmlDataDocument
  fullName: System.Xml.XmlDataDocument
  type: Class
  summary: "Umożliwia danych strukturalnych przechowywane, pobieranie i manipulowanie za pośrednictwem relacyjne <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Ta klasa rozszerza <xref:System.Xml.XmlDocument>.</xref:System.Xml.XmlDocument> Dzięki temu można załadować danych relacyjnych lub danych XML i manipulowania danych przy użyciu sieci World Wide Web konsorcjum W3C modelu DOM (Document Object). Modelu DOM przedstawia dane jako hierarchię obiektów węzła. Ponieważ `XmlDataDocument` implementuje <xref:System.Xml.XPath.IXPathNavigable>interfejsu, może również służyć jako dokument źródłowy dla <xref:System.Xml.Xsl.XslTransform>klasy.</xref:System.Xml.Xsl.XslTransform> </xref:System.Xml.XPath.IXPathNavigable>       `XmlDataDocument`Zamknij przynależności ma `DataSet` klasy, która dostarcza relacyjny widok danych XML. Wszelkie zmiany wprowadzone do `XmlDataDocument` są uwzględniane w `DataSet` i na odwrót.       Aby załadować `DataSet` danych XML za pomocą <xref:System.Data.DataSet.ReadXmlSchema%2A>do tworzenia mapowania relacyjnego.</xref:System.Data.DataSet.ReadXmlSchema%2A> Dane XML mogą następnie ładowane przy użyciu <xref:System.Xml.XmlDataDocument.Load%2A>lub <xref:System.Xml.XmlDocument.LoadXml%2A>.</xref:System.Xml.XmlDocument.LoadXml%2A> </xref:System.Xml.XmlDataDocument.Load%2A>       Aby załadować relacyjnej bazie danych, określ `DataSet` zawierającego dane relacyjne jako parametr w <xref:System.Xml.XmlDataDocument.%23ctor%2A>konstruktora.</xref:System.Xml.XmlDataDocument.%23ctor%2A>"
  syntax:
    content: >-
      [System.Obsolete("XmlDataDocument class will be removed in a future release.")]

      public class XmlDataDocument : System.Xml.XmlDocument
  inheritance:
  - System.Object
  - System.Xml.XmlNode
  - System.Xml.XmlDocument
  implements: []
  inheritedMembers:
  - System.Xml.XmlDocument.BaseURI
  - System.Xml.XmlDocument.CreateAttribute(System.String)
  - System.Xml.XmlDocument.CreateAttribute(System.String,System.String)
  - System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateCDataSection(System.String)
  - System.Xml.XmlDocument.CreateComment(System.String)
  - System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateDocumentFragment
  - System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateElement(System.String)
  - System.Xml.XmlDocument.CreateElement(System.String,System.String)
  - System.Xml.XmlDocument.CreateNavigator
  - System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)
  - System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)
  - System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)
  - System.Xml.XmlDocument.CreateTextNode(System.String)
  - System.Xml.XmlDocument.CreateWhitespace(System.String)
  - System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)
  - System.Xml.XmlDocument.DocumentElement
  - System.Xml.XmlDocument.DocumentType
  - System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)
  - System.Xml.XmlDocument.Implementation
  - System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)
  - System.Xml.XmlDocument.InnerText
  - System.Xml.XmlDocument.InnerXml
  - System.Xml.XmlDocument.IsReadOnly
  - System.Xml.XmlDocument.LoadXml(System.String)
  - System.Xml.XmlDocument.LocalName
  - System.Xml.XmlDocument.Name
  - System.Xml.XmlDocument.NameTable
  - System.Xml.XmlDocument.NodeChanged
  - System.Xml.XmlDocument.NodeChanging
  - System.Xml.XmlDocument.NodeInserted
  - System.Xml.XmlDocument.NodeInserting
  - System.Xml.XmlDocument.NodeRemoved
  - System.Xml.XmlDocument.NodeRemoving
  - System.Xml.XmlDocument.NodeType
  - System.Xml.XmlDocument.OwnerDocument
  - System.Xml.XmlDocument.ParentNode
  - System.Xml.XmlDocument.PreserveWhitespace
  - System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)
  - System.Xml.XmlDocument.Save(System.IO.Stream)
  - System.Xml.XmlDocument.Save(System.IO.TextWriter)
  - System.Xml.XmlDocument.Save(System.String)
  - System.Xml.XmlDocument.Save(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.SchemaInfo
  - System.Xml.XmlDocument.Schemas
  - System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)
  - System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)
  - System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.XmlResolver
  - System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.Attributes
  - System.Xml.XmlNode.ChildNodes
  - System.Xml.XmlNode.Clone
  - System.Xml.XmlNode.FirstChild
  - System.Xml.XmlNode.GetEnumerator
  - System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)
  - System.Xml.XmlNode.GetPrefixOfNamespace(System.String)
  - System.Xml.XmlNode.HasChildNodes
  - System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.Item(System.String)
  - System.Xml.XmlNode.Item(System.String,System.String)
  - System.Xml.XmlNode.LastChild
  - System.Xml.XmlNode.NamespaceURI
  - System.Xml.XmlNode.NextSibling
  - System.Xml.XmlNode.Normalize
  - System.Xml.XmlNode.OuterXml
  - System.Xml.XmlNode.Prefix
  - System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.PreviousSibling
  - System.Xml.XmlNode.PreviousText
  - System.Xml.XmlNode.RemoveAll
  - System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.SelectNodes(System.String)
  - System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.SelectSingleNode(System.String)
  - System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.Supports(System.String,System.String)
  - System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator
  - System.Xml.XmlNode.System#ICloneable#Clone
  - System.Xml.XmlNode.Value
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.#ctor
  id: '#ctor'
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: XmlDataDocument()
  nameWithType: XmlDataDocument.XmlDataDocument()
  fullName: System.Xml.XmlDataDocument.XmlDataDocument()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Xml.XmlDataDocument&quot;> </xref> klasy."
  remarks: "Pusta <xref:System.Data.DataSet>jest utworzona i skojarzona z `XmlDataDocument`.</xref:System.Data.DataSet>"
  syntax:
    content: public XmlDataDocument ();
    parameters: []
  overload: System.Xml.XmlDataDocument.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.#ctor(System.Data.DataSet)
  id: '#ctor(System.Data.DataSet)'
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: XmlDataDocument(DataSet)
  nameWithType: XmlDataDocument.XmlDataDocument(DataSet)
  fullName: System.Xml.XmlDataDocument.XmlDataDocument(DataSet)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Xml.XmlDataDocument&quot;> </xref> klasy z określonym <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "`XmlDataDocument` Jest zsynchronizowany z określonym `DataSet`. Wszystkie dane w `DataSet` jest natychmiast dostępna za pośrednictwem `XmlDataDocument`. Zmiany wprowadzone w `DataSet` są propagowane w `XmlDataDocument`. Wszystkie zmiany dokonane w `XmlDataDocument`, o ile są one zgodne `DataSet` schematu, są propagowane w `DataSet`."
  example:
  - "The following example loads a customer table into an `XmlDataDocument`.  \n  \n The example uses the SQL Server 2000 Northwind database.  \n  \n [!code-cpp[Classic WebData XmlDataDocument.XmlDataDocument1 Example#1](~/add/codesnippet/cpp/m-system.xml.xmldatadocu_0_1.cpp)]\n [!code-cs[Classic WebData XmlDataDocument.XmlDataDocument1 Example#1](~/add/codesnippet/csharp/m-system.xml.xmldatadocu_0_1.cs)]\n [!code-vb[Classic WebData XmlDataDocument.XmlDataDocument1 Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldatadocu_0_1.vb)]"
  syntax:
    content: public XmlDataDocument (System.Data.DataSet dataset);
    parameters:
    - id: dataset
      type: System.Data.DataSet
      description: "The <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;></xref> to load into <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDataDocument.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.CloneNode(System.Boolean)
  id: CloneNode(System.Boolean)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: CloneNode(Boolean)
  nameWithType: XmlDataDocument.CloneNode(Boolean)
  fullName: System.Xml.XmlDataDocument.CloneNode(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Tworzy kopię bieżącego węzła."
  remarks: "Klonowanie `XmlDataDocument` również klonów <xref:System.Data.DataSet>schematu.</xref:System.Data.DataSet>       Jeśli `deep` ustawiono `false`, sklonowany `DataSet` ma nie dane; żadne wiersze.       Jeśli `deep` ustawiono `true`, sklonowany `DataSet` ustawieniu ze schematem i następnie wypełniony danymi.       Zobacz <xref:System.Xml.XmlNode.CloneNode%2A>w `XmlNode` klasy, aby wyświetlić tabelę opisujące, jak ta metoda ma zachowywać się przez poszczególne typy węzłów.</xref:System.Xml.XmlNode.CloneNode%2A>"
  example:
  - "The following example loads a `DataSet` into an `XmlDataDocument` and then creates a shallow clone of the `XmlDataDocument`.  \n  \n The example uses the SQL Server 2000 Northwind database.  \n  \n [!code-cpp[Classic WebData XmlDataDocument.CloneNode Example#1](~/add/codesnippet/cpp/m-system.xml.xmldatadocu_4_1.cpp)]\n [!code-vb[Classic WebData XmlDataDocument.CloneNode Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldatadocu_4_1.vb)]\n [!code-cs[Classic WebData XmlDataDocument.CloneNode Example#1](~/add/codesnippet/csharp/m-system.xml.xmldatadocu_4_1.cs)]"
  syntax:
    content: public override System.Xml.XmlNode CloneNode (bool deep);
    parameters:
    - id: deep
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby rekursywnie sklonować poddrzewo w określonym węźle; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> sklonować tylko węzeł."
    return:
      type: System.Xml.XmlNode
      description: "Sklonowany węzła."
  overload: System.Xml.XmlDataDocument.CloneNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.CreateElement(System.String,System.String,System.String)
  id: CreateElement(System.String,System.String,System.String)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: CreateElement(String,String,String)
  nameWithType: XmlDataDocument.CreateElement(String,String,String)
  fullName: System.Xml.XmlDataDocument.CreateElement(String,String,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Tworzy element z określonym <> </> *>, <> </> *> i <xref:System.Xml.XmlNode.NamespaceURI*>.</xref:System.Xml.XmlNode.NamespaceURI*>"
  remarks: "`Note to Inheritors`Przeciążenie tej funkcji, nie może służyć do rozszerzalności. Zamiast tego można zwrócić elementu utworzone przez klasę podstawową, ale w takim przypadku `XmlDataDocument`. Zapoznaj się z poniższym przykładem.      ```   class MyXmlDataDocument : XmlDataDocument {    public override XmlElement CreateElement(string prefix, string localName, string nsURI) {      //Ensure we are returning the base class implementation of element.      XmlElement e = base.CreateElement(prefix, localName, nsURI);      //Add additional code here.      return e;    //Return the element created by XmlDataDocument.    }       }   ```"
  syntax:
    content: public override System.Xml.XmlElement CreateElement (string prefix, string localName, string namespaceURI);
    parameters:
    - id: prefix
      type: System.String
      description: "Prefiks nowego elementu. Jeśli String.Empty lub <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, brak nie ma prefiksu."
    - id: localName
      type: System.String
      description: "Lokalna nazwa nowego elementu."
    - id: namespaceURI
      type: System.String
      description: "Przestrzeń nazw zasobów identyfikator URI (Uniform) nowego elementu. Jeśli String.Empty lub <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, nie namespaceURI nie istnieje."
    return:
      type: System.Xml.XmlElement
      description: "A new <xref href=&quot;System.Xml.XmlElement&quot;></xref>."
  overload: System.Xml.XmlDataDocument.CreateElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.CreateEntityReference(System.String)
  id: CreateEntityReference(System.String)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: CreateEntityReference(String)
  nameWithType: XmlDataDocument.CreateEntityReference(String)
  fullName: System.Xml.XmlDataDocument.CreateEntityReference(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Tworzy <xref href=&quot;System.Xml.XmlEntityReference&quot;> </xref> o określonej nazwie."
  remarks: "<xref:System.Xml.XmlEntityReference>Nie można utworzyć węzłów <xref:System.Xml.XmlDataDocument>obiektów.</xref:System.Xml.XmlDataDocument></xref:System.Xml.XmlEntityReference> Wywołanie tej metody zgłasza wyjątek."
  syntax:
    content: public override System.Xml.XmlEntityReference CreateEntityReference (string name);
    parameters:
    - id: name
      type: System.String
      description: "Nazwa odwołania do jednostki."
    return:
      type: System.Xml.XmlEntityReference
      description: "<xref href=&quot;System.Xml.XmlEntityReference&quot;> </xref> o określonej nazwie."
  overload: System.Xml.XmlDataDocument.CreateEntityReference*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Wywołanie tej metody."
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.CreateNavigator(System.Xml.XmlNode)
  id: CreateNavigator(System.Xml.XmlNode)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: CreateNavigator(XmlNode)
  nameWithType: XmlDataDocument.CreateNavigator(XmlNode)
  fullName: System.Xml.XmlDataDocument.CreateNavigator(XmlNode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Tworzy nowy <xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref> obiektu do nawigowania tego dokumentu. <xref uid=&quot;langword_csharp_XPathNavigator&quot; name=&quot;XPathNavigator&quot; href=&quot;&quot;> </xref> Znajduje się w węźle określony w <code> node </code> parametru."
  remarks: "`XPathNavigator` Zapewnia tylko do odczytu, losowy dostęp do danych. Ponieważ jest zoptymalizowany do przekształcenia XSLT, zapewnia korzyści wydajności, gdy jest używany jako mechanizmu wejściowych do <xref:System.Xml.Xsl.XslTransform.Transform%2A>metody.</xref:System.Xml.Xsl.XslTransform.Transform%2A>"
  example:
  - To see an XSLT transformation using `XmlDataDocument` and an `XPathNavigator`, see the <xref:System.Xml.Xsl.XslTransform.Transform%2A?displayProperty=fullName> method.
  syntax:
    content: protected override System.Xml.XPath.XPathNavigator CreateNavigator (System.Xml.XmlNode node);
    parameters:
    - id: node
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref> Ma Nawigatora wstępnie ustawiony na."
    return:
      type: System.Xml.XPath.XPathNavigator
      description: "<xref uid=&quot;langword_csharp_XPathNavigator&quot; name=&quot;XPathNavigator&quot; href=&quot;&quot;> </xref> Służące do nawigacji dokumentu."
  overload: System.Xml.XmlDataDocument.CreateNavigator*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.DataSet
  id: DataSet
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: DataSet
  nameWithType: XmlDataDocument.DataSet
  fullName: System.Xml.XmlDataDocument.DataSet
  type: Property
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Pobiera <xref href=&quot;System.Data.DataSet&quot;> </xref> zapewnia relacyjne reprezentację danych w <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;> </xref>."
  remarks: "`DataSet` Umożliwia dostęp do danych w `XmlDataDocument` przy użyciu modelu relacyjne. Oznacza to, że można danych należy traktować jak tabele i widoki, wiersze i kolumny, relacji i tak dalej. Zmiany wprowadzone w `DataSet` są od razu widoczne w `XmlDataDocument`."
  example:
  - "The following example modifies the price of a book using the `DataSet` methods.  \n  \n [!code-cpp[Classic WebData XmlDataDocument.DataSet Example#1](~/add/codesnippet/cpp/p-system.xml.xmldatadocu_1.cpp)]\n [!code-cs[Classic WebData XmlDataDocument.DataSet Example#1](~/add/codesnippet/csharp/p-system.xml.xmldatadocu_1.cs)]\n [!code-vb[Classic WebData XmlDataDocument.DataSet Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldatadocu_1.vb)]  \n  \n The example uses the following two files as input.  \n  \n `2books.xml`  \n  \n [!code-xml[Classic WebData XmlDataDocument.DataSet Example#2](~/add/codesnippet/xml/p-system.xml.xmldatadocu_2.xml)]  \n  \n `store.xsd`  \n  \n [!code-xml[Classic WebData XmlDataDocument.DataSet Example#3](~/add/codesnippet/xml/p-system.xml.xmldatadocu_3.xml)]"
  syntax:
    content: public System.Data.DataSet DataSet { get; }
    return:
      type: System.Data.DataSet
      description: "A <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> można uzyskać dostęp do danych <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;> </xref> przy użyciu modelu relacyjne."
  overload: System.Xml.XmlDataDocument.DataSet*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.GetElementById(System.String)
  id: GetElementById(System.String)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: GetElementById(String)
  nameWithType: XmlDataDocument.GetElementById(String)
  fullName: System.Xml.XmlDataDocument.GetElementById(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Pobiera <xref href=&quot;System.Xml.XmlElement&quot;> </xref> o określonym identyfikatorze. Ta metoda nie jest obsługiwana przez <xref href=&quot;System.Xml.XmlDataDocument&quot;> </xref> klasy. Wywołanie tej metody zgłasza wyjątek."
  remarks: "Ta metoda nie jest obsługiwana przez <xref:System.Xml.XmlDataDocument>klasę.</xref:System.Xml.XmlDataDocument>"
  syntax:
    content: public override System.Xml.XmlElement GetElementById (string elemId);
    parameters:
    - id: elemId
      type: System.String
      description: "Identyfikator atrybutu do dopasowania."
    return:
      type: System.Xml.XmlElement
      description: "<xref href=&quot;System.Xml.XmlElement&quot;> </xref> o określonym identyfikatorze."
  overload: System.Xml.XmlDataDocument.GetElementById*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Wywołanie tej metody."
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.GetElementFromRow(System.Data.DataRow)
  id: GetElementFromRow(System.Data.DataRow)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: GetElementFromRow(DataRow)
  nameWithType: XmlDataDocument.GetElementFromRow(DataRow)
  fullName: System.Xml.XmlDataDocument.GetElementFromRow(DataRow)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Pobiera <xref href=&quot;System.Xml.XmlElement&quot;> </xref> skojarzonego z określonym <xref href=&quot;System.Data.DataRow&quot;> </xref>."
  remarks: ''
  example:
  - "The following example loads a `DataSet` into an `XmlDataDocument` and then creates an `XmlElement` representing the first customer record.  \n  \n The example uses the SQL Server 2000 Northwind database.  \n  \n [!code-cs[Classic WebData XmlDataDocument.GetElementFromRow Example#1](~/add/codesnippet/csharp/m-system.xml.xmldatadocu_1_1.cs)]\n [!code-cpp[Classic WebData XmlDataDocument.GetElementFromRow Example#1](~/add/codesnippet/cpp/m-system.xml.xmldatadocu_1_1.cpp)]\n [!code-vb[Classic WebData XmlDataDocument.GetElementFromRow Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldatadocu_1_1.vb)]"
  syntax:
    content: public System.Xml.XmlElement GetElementFromRow (System.Data.DataRow r);
    parameters:
    - id: r
      type: System.Data.DataRow
      description: "<xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;> </xref> Których skojarzone <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref> do pobrania."
    return:
      type: System.Xml.XmlElement
      description: "<xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref> Zawierający reprezentację określonego <xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;> </xref>."
  overload: System.Xml.XmlDataDocument.GetElementFromRow*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.GetElementsByTagName(System.String)
  id: GetElementsByTagName(System.String)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: GetElementsByTagName(String)
  nameWithType: XmlDataDocument.GetElementsByTagName(String)
  fullName: System.Xml.XmlDataDocument.GetElementsByTagName(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Zwraca <xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> zawierający listę wszystkich elementów podrzędnych, spełniających określony <xref:System.Xml.XmlDocument.Name*>.</xref:System.Xml.XmlDocument.Name*>"
  remarks: >-
    > [!NOTE]

    >  It is recommended that you use the <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName> or <xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName> method instead of the GetElementsByTagName method.
  syntax:
    content: public override System.Xml.XmlNodeList GetElementsByTagName (string name);
    parameters:
    - id: name
      type: System.String
      description: "Kwalifikowana nazwa do dopasowania. Jest dopasowywana <> </> *> właściwości pasujących węzła. Specjalna wartość &quot;*&quot; dopasowuje wszystkie tagi."
    return:
      type: System.Xml.XmlNodeList
      description: "<xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> Zawierający listę wszystkich zgodne węzły."
  overload: System.Xml.XmlDataDocument.GetElementsByTagName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.GetRowFromElement(System.Xml.XmlElement)
  id: GetRowFromElement(System.Xml.XmlElement)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: GetRowFromElement(XmlElement)
  nameWithType: XmlDataDocument.GetRowFromElement(XmlElement)
  fullName: System.Xml.XmlDataDocument.GetRowFromElement(XmlElement)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Pobiera <xref href=&quot;System.Data.DataRow&quot;> </xref> skojarzonego z określonym <xref href=&quot;System.Xml.XmlElement&quot;> </xref>."
  remarks: ''
  example:
  - "The following example modifies the price of the first book.  \n  \n [!code-cs[XmlDataDocument.GetRowFromElement#1](~/add/codesnippet/csharp/m-system.xml.xmldatadocu_2_1.cs)]\n [!code-cpp[XmlDataDocument.GetRowFromElement#1](~/add/codesnippet/cpp/m-system.xml.xmldatadocu_2_1.cpp)]\n [!code-vb[XmlDataDocument.GetRowFromElement#1](~/add/codesnippet/visualbasic/m-system.xml.xmldatadocu_2_1.vb)]  \n  \n The example uses the following input files:  \n  \n `2books.xml`  \n  \n [!code-xml[Classic WebData XmlDataDocument.DataSet Example#2](~/add/codesnippet/xml/m-system.xml.xmldatadocu_2_2.xml)]  \n  \n `store.xsd`  \n  \n [!code-xml[Classic WebData XmlDataDocument.DataSet Example#3](~/add/codesnippet/xml/m-system.xml.xmldatadocu_2_3.xml)]"
  syntax:
    content: public System.Data.DataRow GetRowFromElement (System.Xml.XmlElement e);
    parameters:
    - id: e
      type: System.Xml.XmlElement
      description: "<xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref> Których skojarzone <xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;> </xref> do pobrania."
    return:
      type: System.Data.DataRow
      description: "<xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;> </xref> Zawierający reprezentację <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref>; <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> w przypadku nie <xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;> </xref> skojarzone z <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref>."
  overload: System.Xml.XmlDataDocument.GetRowFromElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.Load(System.IO.Stream)
  id: Load(System.IO.Stream)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: Load(Stream)
  nameWithType: XmlDataDocument.Load(Stream)
  fullName: System.Xml.XmlDataDocument.Load(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Ładunki <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;> </xref> z określonego strumienia."
  remarks: "`XmlDataDocument`nie obsługuje tworzenia odwołań do jednostek. Jeśli dane zawierają odwołania do jednostki, `Load` metoda rozpoznaje i rozwija wszystkie odwołania do jednostek.      > [!NOTE] > Aby wyświetlić dane XML relationally, należy najpierw określić schematu na potrzeby mapowania danych. Można to zrobić przez wywołanie <xref:System.Data.DataSet.ReadXmlSchema%2A>metody lub przez tworzenie tabel i kolumn w `DataSet` ręcznie.</xref:System.Data.DataSet.ReadXmlSchema%2A> Ten krok należy wykonać przed wywołaniem `Load`."
  syntax:
    content: public override void Load (System.IO.Stream inStream);
    parameters:
    - id: inStream
      type: System.IO.Stream
      description: "Strumień, zawierający można załadować dokumentu XML."
  overload: System.Xml.XmlDataDocument.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.Load(System.IO.TextReader)
  id: Load(System.IO.TextReader)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: Load(TextReader)
  nameWithType: XmlDataDocument.Load(TextReader)
  fullName: System.Xml.XmlDataDocument.Load(TextReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Ładunki <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;> </xref> z określonym <xref:System.IO.TextReader>.</xref:System.IO.TextReader>"
  remarks: "`XmlDataDocument`nie obsługuje tworzenia odwołań do jednostek. Jeśli dane zawierają odwołania do jednostki, `Load` metoda rozpoznaje i rozwija wszystkie odwołania do jednostek.      > [!NOTE] > Aby wyświetlić dane XML relationally, należy najpierw określić schematu na potrzeby mapowania danych. Można to zrobić przez wywołanie <xref:System.Data.DataSet.ReadXmlSchema%2A>metody lub przez tworzenie tabel i kolumn w `DataSet` ręcznie.</xref:System.Data.DataSet.ReadXmlSchema%2A> Ten krok należy wykonać przed wywołaniem `Load`."
  syntax:
    content: public override void Load (System.IO.TextReader txtReader);
    parameters:
    - id: txtReader
      type: System.IO.TextReader
      description: "<xref uid=&quot;langword_csharp_TextReader&quot; name=&quot;TextReader&quot; href=&quot;&quot;> </xref> Używane do strumieniowego źródła danych XML do dokumentu."
  overload: System.Xml.XmlDataDocument.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.Load(System.String)
  id: Load(System.String)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: Load(String)
  nameWithType: XmlDataDocument.Load(String)
  fullName: System.Xml.XmlDataDocument.Load(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Ładunki <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;> </xref> przy użyciu określonego adresu URL."
  remarks: "`XmlDataDocument`nie obsługuje tworzenia odwołań do jednostek. Jeśli dane zawierają odwołania do jednostki, `Load` metoda rozpoznaje i rozwija wszystkie odwołania do jednostek.      > [!NOTE] > Aby wyświetlić dane XML relationally, należy najpierw określić schematu na potrzeby mapowania danych. Można to zrobić przez wywołanie <xref:System.Data.DataSet.ReadXmlSchema%2A>metody lub przez tworzenie tabel i kolumn w `DataSet` ręcznie.</xref:System.Data.DataSet.ReadXmlSchema%2A> Ten krok należy wykonać przed wywołaniem `Load`."
  syntax:
    content: public override void Load (string filename);
    parameters:
    - id: filename
      type: System.String
      description: "Adres URL pliku zawierającego dokument XML do załadowania."
  overload: System.Xml.XmlDataDocument.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.Load(System.Xml.XmlReader)
  id: Load(System.Xml.XmlReader)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: Load(XmlReader)
  nameWithType: XmlDataDocument.Load(XmlReader)
  fullName: System.Xml.XmlDataDocument.Load(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Ładunki <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;> </xref> z określonym <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  remarks: "`XmlDataDocument`nie obsługuje tworzenia odwołań do jednostek. Jeśli źródło danych zawiera odwołania do jednostki, należy utworzyć <xref:System.Xml.XmlValidatingReader>z <xref:System.Xml.XmlValidatingReader.EntityHandling%2A>właściwości wartość elementu EntityHandling.ExpandEntities (jest to domyślne zachowanie) i przekaż `XmlValidatingReader` do `Load` metody.</xref:System.Xml.XmlValidatingReader.EntityHandling%2A> </xref:System.Xml.XmlValidatingReader> Jeśli nie używasz `XmlValidatingReader`, `Load` metoda zgłasza wyjątek.       `Load` Metody zawsze zachowuje znaczący biały znak. <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>Właściwość określa, czy biały znak są zachowywane.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A> Wartość domyślna to `false`, biały znak nie są zachowywane.       Jeśli czytnik jest w stanie początkowym (czyli ReadState=ReadState.Initial) `Load` zużywa całą zawartość czytnika danych i tworzy DOM z ich znalezienia.       Jeśli czytnik jest już ustawiony na jednego z węzłów przy głębokości &quot;n&quot;, ta metoda ładuje ten węzeł i wszystkie kolejne elementy równorzędne do tagu końcowego, który zamyka głębokość &quot;n&quot;. Ma to następujące wyniki.       Jeśli bieżącego węzła i jego następujące elementy równorzędne wyglądać podobnie do następującego: ```   <!--comment--><element1>one</element1><element2>two</element2>   ``` `Load` zgłasza wyjątek, ponieważ dokument nie może mieć dwóch elementów głównego poziomu.        Jeśli bieżącego węzła i jego następujące elementy równorzędne wyglądać podobnie do następującego: ```   <!--comment--><?process       instruction?><!--comment--></endtag>   ``` `Load` się pomyślnie; jednak trzeba będzie niekompletna drzewa modelu DOM, ponieważ nie istnieje żaden element głównego poziomu.        Należy dodać element poziomu głównego przed zapisaniem dokumentu. w przeciwnym razie <xref:System.Xml.XmlDocument.Save%2A>Metoda zgłasza wyjątek.</xref:System.Xml.XmlDocument.Save%2A>       Jeśli czytnik jest ustawiony na węzeł liścia, który jest nieprawidłowy dla poziomu głównego dokumentu (na przykład białe miejsca lub atrybut węzłem), czytnik będzie kontynuowane do odczytu, dopóki nie zostanie on ustawiony na węźle, który może służyć do katalogu głównego. Dokument rozpoczyna się w tym momencie ładowania."
  example:
  - "The following example modifies the price of a book using the `DataSet` methods.  \n  \n [!code-cpp[XmlDataDocument.Load#1](~/add/codesnippet/cpp/m-system.xml.xmldatadocu_3_1.cpp)]\n [!code-cs[XmlDataDocument.Load#1](~/add/codesnippet/csharp/m-system.xml.xmldatadocu_3_1.cs)]\n [!code-vb[XmlDataDocument.Load#1](~/add/codesnippet/visualbasic/m-system.xml.xmldatadocu_3_1.vb)]  \n  \n The example uses the following two input files.  \n  \n `2books.xml`  \n  \n [!code-xml[XmlDataDocument.Load#2](~/add/codesnippet/xml/m-system.xml.xmldatadocu_3_2.xml)]  \n  \n `store.xsd`  \n  \n [!code-xml[XmlDataDocument.Load#3](~/add/codesnippet/xml/m-system.xml.xmldatadocu_3_3.xsd)]"
  syntax:
    content: public override void Load (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "<xref uid=&quot;langword_csharp_XmlReader&quot; name=&quot;XmlReader&quot; href=&quot;&quot;> </xref> Zawierający można załadować dokumentu XML."
  overload: System.Xml.XmlDataDocument.Load*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Trwa ładowanie pliku XML zawiera odwołania do jednostek i czytnik nie może rozpoznać jednostki."
  platform:
  - net462
references:
- uid: System.Xml.XmlDocument
  isExternal: false
  name: System.Xml.XmlDocument
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Xml.XmlDataDocument.#ctor
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: XmlDataDocument()
  nameWithType: XmlDataDocument.XmlDataDocument()
  fullName: System.Xml.XmlDataDocument.XmlDataDocument()
- uid: System.Xml.XmlDataDocument.#ctor(System.Data.DataSet)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: XmlDataDocument(DataSet)
  nameWithType: XmlDataDocument.XmlDataDocument(DataSet)
  fullName: System.Xml.XmlDataDocument.XmlDataDocument(DataSet)
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Xml.XmlDataDocument.CloneNode(System.Boolean)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CloneNode(Boolean)
  nameWithType: XmlDataDocument.CloneNode(Boolean)
  fullName: System.Xml.XmlDataDocument.CloneNode(Boolean)
- uid: System.Xml.XmlNode
  parent: System.Xml
  isExternal: false
  name: XmlNode
  nameWithType: XmlNode
  fullName: System.Xml.XmlNode
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.XmlDataDocument.CreateElement(System.String,System.String,System.String)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CreateElement(String,String,String)
  nameWithType: XmlDataDocument.CreateElement(String,String,String)
  fullName: System.Xml.XmlDataDocument.CreateElement(String,String,String)
- uid: System.Xml.XmlElement
  parent: System.Xml
  isExternal: false
  name: XmlElement
  nameWithType: XmlElement
  fullName: System.Xml.XmlElement
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.XmlDataDocument.CreateEntityReference(System.String)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CreateEntityReference(String)
  nameWithType: XmlDataDocument.CreateEntityReference(String)
  fullName: System.Xml.XmlDataDocument.CreateEntityReference(String)
- uid: System.Xml.XmlEntityReference
  parent: System.Xml
  isExternal: false
  name: XmlEntityReference
  nameWithType: XmlEntityReference
  fullName: System.Xml.XmlEntityReference
- uid: System.Xml.XmlDataDocument.CreateNavigator(System.Xml.XmlNode)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CreateNavigator(XmlNode)
  nameWithType: XmlDataDocument.CreateNavigator(XmlNode)
  fullName: System.Xml.XmlDataDocument.CreateNavigator(XmlNode)
- uid: System.Xml.XPath.XPathNavigator
  parent: System.Xml.XPath
  isExternal: false
  name: XPathNavigator
  nameWithType: XPathNavigator
  fullName: System.Xml.XPath.XPathNavigator
- uid: System.Xml.XmlDataDocument.DataSet
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: DataSet
  nameWithType: XmlDataDocument.DataSet
  fullName: System.Xml.XmlDataDocument.DataSet
- uid: System.Xml.XmlDataDocument.GetElementById(System.String)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetElementById(String)
  nameWithType: XmlDataDocument.GetElementById(String)
  fullName: System.Xml.XmlDataDocument.GetElementById(String)
- uid: System.Xml.XmlDataDocument.GetElementFromRow(System.Data.DataRow)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetElementFromRow(DataRow)
  nameWithType: XmlDataDocument.GetElementFromRow(DataRow)
  fullName: System.Xml.XmlDataDocument.GetElementFromRow(DataRow)
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Xml.XmlDataDocument.GetElementsByTagName(System.String)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetElementsByTagName(String)
  nameWithType: XmlDataDocument.GetElementsByTagName(String)
  fullName: System.Xml.XmlDataDocument.GetElementsByTagName(String)
- uid: System.Xml.XmlNodeList
  parent: System.Xml
  isExternal: false
  name: XmlNodeList
  nameWithType: XmlNodeList
  fullName: System.Xml.XmlNodeList
- uid: System.Xml.XmlDataDocument.GetRowFromElement(System.Xml.XmlElement)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetRowFromElement(XmlElement)
  nameWithType: XmlDataDocument.GetRowFromElement(XmlElement)
  fullName: System.Xml.XmlDataDocument.GetRowFromElement(XmlElement)
- uid: System.Xml.XmlDataDocument.Load(System.IO.Stream)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: Load(Stream)
  nameWithType: XmlDataDocument.Load(Stream)
  fullName: System.Xml.XmlDataDocument.Load(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Xml.XmlDataDocument.Load(System.IO.TextReader)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: Load(TextReader)
  nameWithType: XmlDataDocument.Load(TextReader)
  fullName: System.Xml.XmlDataDocument.Load(TextReader)
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Xml.XmlDataDocument.Load(System.String)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: Load(String)
  nameWithType: XmlDataDocument.Load(String)
  fullName: System.Xml.XmlDataDocument.Load(String)
- uid: System.Xml.XmlDataDocument.Load(System.Xml.XmlReader)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: Load(XmlReader)
  nameWithType: XmlDataDocument.Load(XmlReader)
  fullName: System.Xml.XmlDataDocument.Load(XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml.XmlDataDocument.#ctor*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: XmlDataDocument
  nameWithType: XmlDataDocument.XmlDataDocument
- uid: System.Xml.XmlDataDocument.CloneNode*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CloneNode
  nameWithType: XmlDataDocument.CloneNode
- uid: System.Xml.XmlDataDocument.CreateElement*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CreateElement
  nameWithType: XmlDataDocument.CreateElement
- uid: System.Xml.XmlDataDocument.CreateEntityReference*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CreateEntityReference
  nameWithType: XmlDataDocument.CreateEntityReference
- uid: System.Xml.XmlDataDocument.CreateNavigator*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CreateNavigator
  nameWithType: XmlDataDocument.CreateNavigator
- uid: System.Xml.XmlDataDocument.DataSet*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: DataSet
  nameWithType: XmlDataDocument.DataSet
- uid: System.Xml.XmlDataDocument.GetElementById*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetElementById
  nameWithType: XmlDataDocument.GetElementById
- uid: System.Xml.XmlDataDocument.GetElementFromRow*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetElementFromRow
  nameWithType: XmlDataDocument.GetElementFromRow
- uid: System.Xml.XmlDataDocument.GetElementsByTagName*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetElementsByTagName
  nameWithType: XmlDataDocument.GetElementsByTagName
- uid: System.Xml.XmlDataDocument.GetRowFromElement*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetRowFromElement
  nameWithType: XmlDataDocument.GetRowFromElement
- uid: System.Xml.XmlDataDocument.Load*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: Load
  nameWithType: XmlDataDocument.Load
