### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.HMACSHA512
  id: HMACSHA512
  children:
  - System.Security.Cryptography.HMACSHA512.#ctor
  - System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])
  - System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues
  langs:
  - csharp
  name: HMACSHA512
  nameWithType: HMACSHA512
  fullName: System.Security.Cryptography.HMACSHA512
  type: Class
  summary: "Hash-based oblicza kod uwierzytelniania wiadomości (HMAC) przy użyciu <xref href=&quot;System.Security.Cryptography.SHA512&quot;> </xref> funkcji generowania skrótów."
  remarks: "HMACSHA512 jest typem algorytm skrótu z kluczem jest utworzone na podstawie funkcji skrótu SHA-512, używane jako Hash-based kodu (metoda HMAC Message Authentication). Proces HMAC łączy klucz tajny z danymi wiadomości i tworzy skrót wyniku. Wartość skrótu jest ponownie łączyć z kluczem tajnym, a wartość skrótu po raz drugi. Wynikowy skrót ma długość 512 bitów.       HMAC może służyć do określenia, czy została naruszona komunikatu wysłanego za pośrednictwem kanału niezabezpieczone, pod warunkiem, że nadawca i odbiorca udostępnić klucz tajny. Nadawca oblicza wartość skrótu dla oryginalnych danych i wysyła oryginalnych danych i wartości skrótu jako pojedynczej wiadomości. Odbiornik ponownie oblicza wartość skrótu dla odebranego komunikatu i sprawdza, czy obliczona HMAC zgodny przesyłane HMAC.       Jeśli wartości skrótu oryginalny i obliczona zgodne, wiadomość została uwierzytelniona. Jeśli nie są zgodne, danych lub wartość skrótu został zmieniony. HMAC zapewniają ochronę przed naruszeniem, ponieważ wiedzy klucz tajny musi zmienić komunikat i Odtwórz wartość skrótu poprawne.       HMACSHA512 akceptuje klucze o dowolnej wielkości, a także tworzy sekwencję wyznaczania wartości skrótu o długości 512 bitów."
  example:
  - "The following example shows how to sign a file by using the HMACSHA512 object and then how to verify the file.  \n  \n [!code-cpp[HMACSHA512#1](~/add/codesnippet/cpp/t-system.security.crypto_83_1.cpp)]\n [!code-vb[HMACSHA512#1](~/add/codesnippet/visualbasic/t-system.security.crypto_83_1.vb)]\n [!code-cs[HMACSHA512#1](~/add/codesnippet/csharp/t-system.security.crypto_83_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class HMACSHA512 : System.Security.Cryptography.HMAC
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  - System.Security.Cryptography.KeyedHashAlgorithm
  - System.Security.Cryptography.HMAC
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.BlockSizeValue
  - System.Security.Cryptography.HMAC.Create
  - System.Security.Cryptography.HMAC.Create(System.String)
  - System.Security.Cryptography.HMAC.Dispose(System.Boolean)
  - System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.HashFinal
  - System.Security.Cryptography.HMAC.HashName
  - System.Security.Cryptography.HMAC.Initialize
  - System.Security.Cryptography.HMAC.Key
  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  platform:
  - net462
- uid: System.Security.Cryptography.HMACSHA512.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.HMACSHA512
  langs:
  - csharp
  name: HMACSHA512()
  nameWithType: HMACSHA512.HMACSHA512()
  fullName: System.Security.Cryptography.HMACSHA512.HMACSHA512()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Security.Cryptography.HMACSHA512&quot;> </xref> klasy z losowo wygenerowany klucz."
  remarks: "W tym konstruktorze 64-bajtowych, losowo wygenerowany klucz jest używany."
  syntax:
    content: public HMACSHA512 ();
    parameters: []
  overload: System.Security.Cryptography.HMACSHA512.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Security.Cryptography.HMACSHA512
  langs:
  - csharp
  name: HMACSHA512(Byte[])
  nameWithType: HMACSHA512.HMACSHA512(Byte[])
  fullName: System.Security.Cryptography.HMACSHA512.HMACSHA512(Byte[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Security.Cryptography.HMACSHA512&quot;> </xref> klasy z określonymi danymi klucza."
  remarks: ''
  example:
  - For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACSHA512> class.
  syntax:
    content: public HMACSHA512 (byte[] key);
    parameters:
    - id: key
      type: System.Byte[]
      description: "Klucz tajny dla <xref href=&quot;System.Security.Cryptography.HMACSHA512&quot;> </xref> szyfrowania. Klucz musi być dowolnej długości. Jednak zalecany rozmiar to 128 bajtów. Jeśli klucz jest więcej niż 128 bajtów, jego skrót jest tworzony (przy użyciu algorytmu SHA-512) do uzyskania klucza 128 bajtów. Jeśli jest mniejsza niż 128 bajtów jest uzupełniana 128 bajtów."
  overload: System.Security.Cryptography.HMACSHA512.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>key</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues
  id: ProduceLegacyHmacValues
  parent: System.Security.Cryptography.HMACSHA512
  langs:
  - csharp
  name: ProduceLegacyHmacValues
  nameWithType: HMACSHA512.ProduceLegacyHmacValues
  fullName: System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Udostępnia obejścia [!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)] implementacja <xref href=&quot;System.Security.Cryptography.HMACSHA512&quot;> </xref> algorytmu, który jest niezgodny z [!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)] implementacji."
  remarks: "Właściwość typu ProduceLegacyHmacValues Boolean jest umożliwienie [!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)] aplikacjom interakcję z [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)] aplikacji. Kiedy ustawić tę właściwość na `true`, <xref:System.Security.Cryptography.HMACSHA512>obiektu tworzy wartości, które odpowiadają wartościom utworzonego przez [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)].</xref:System.Security.Cryptography.HMACSHA512> Tej właściwości należy ustawić tylko raz, po utworzeniu obiektu HMAC. Należy zresetować klucz później, jak pokazano w poniższym przykładzie.      ```   public static void Test()       {       HMACSHA512 hmac = new HMACSHA512();       hmac.ProduceLegacyHmacValues = true;       hmac.Key = // ...Get the HMAC key.       // ...       // Use the HMAC algorithm.       // ...       }   ```"
  syntax:
    content: public bool ProduceLegacyHmacValues { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby włączyć [!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)] aplikacjom interakcję z [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)] aplikacji; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.HMAC
  isExternal: false
  name: System.Security.Cryptography.HMAC
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.HMACSHA512.#ctor
  parent: System.Security.Cryptography.HMACSHA512
  isExternal: false
  name: HMACSHA512()
  nameWithType: HMACSHA512.HMACSHA512()
  fullName: System.Security.Cryptography.HMACSHA512.HMACSHA512()
- uid: System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])
  parent: System.Security.Cryptography.HMACSHA512
  isExternal: false
  name: HMACSHA512(Byte[])
  nameWithType: HMACSHA512.HMACSHA512(Byte[])
  fullName: System.Security.Cryptography.HMACSHA512.HMACSHA512(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues
  parent: System.Security.Cryptography.HMACSHA512
  isExternal: false
  name: ProduceLegacyHmacValues
  nameWithType: HMACSHA512.ProduceLegacyHmacValues
  fullName: System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.HMACSHA512.#ctor*
  parent: System.Security.Cryptography.HMACSHA512
  isExternal: false
  name: HMACSHA512
  nameWithType: HMACSHA512.HMACSHA512
- uid: System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues*
  parent: System.Security.Cryptography.HMACSHA512
  isExternal: false
  name: ProduceLegacyHmacValues
  nameWithType: HMACSHA512.ProduceLegacyHmacValues
