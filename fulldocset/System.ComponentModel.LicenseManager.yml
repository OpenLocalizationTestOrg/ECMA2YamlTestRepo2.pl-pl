### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.LicenseManager
  id: LicenseManager
  children:
  - System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  - System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  - System.ComponentModel.LicenseManager.CurrentContext
  - System.ComponentModel.LicenseManager.IsLicensed(System.Type)
  - System.ComponentModel.LicenseManager.IsValid(System.Type)
  - System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)
  - System.ComponentModel.LicenseManager.LockContext(System.Object)
  - System.ComponentModel.LicenseManager.UnlockContext(System.Object)
  - System.ComponentModel.LicenseManager.UsageMode
  - System.ComponentModel.LicenseManager.Validate(System.Type)
  - System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)
  langs:
  - csharp
  name: LicenseManager
  nameWithType: LicenseManager
  fullName: System.ComponentModel.LicenseManager
  type: Class
  summary: "Udostępnia właściwości i metody, aby dodać licencję do składnika i zarządzania <xref href=&quot;System.ComponentModel.LicenseProvider&quot;> </xref>. Ta klasa nie może być dziedziczona."
  remarks: "Klasa LicenseManager udostępnia następujące `static` właściwości: <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>i <xref:System.ComponentModel.LicenseManager.UsageMode%2A>.</xref:System.ComponentModel.LicenseManager.UsageMode%2A> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A> Ta klasa dostarcza także następujące `static` metody: <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>, <xref:System.ComponentModel.LicenseManager.IsValid%2A>i <xref:System.ComponentModel.LicenseManager.Validate%2A>.</xref:System.ComponentModel.LicenseManager.Validate%2A> </xref:System.ComponentModel.LicenseManager.IsValid%2A> </xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>       Podczas tworzenia składnika, który ma zostać licencji musi wykonaj następujące czynności: 1.  Określ <xref:System.ComponentModel.LicenseProvider>oznaczając składnika o <xref:System.ComponentModel.LicenseProviderAttribute>.</xref:System.ComponentModel.LicenseProviderAttribute> </xref:System.ComponentModel.LicenseProvider>      2.  Wywołanie <xref:System.ComponentModel.LicenseManager.Validate%2A>lub <xref:System.ComponentModel.LicenseManager.IsValid%2A>w Konstruktorze składnika.</xref:System.ComponentModel.LicenseManager.IsValid%2A> </xref:System.ComponentModel.LicenseManager.Validate%2A> <xref:System.ComponentModel.LicenseManager.Validate%2A>zgłasza wyjątek <xref:System.ComponentModel.LicenseException>podczas próby utworzenia wystąpienia bez prawidłowej licencji.</xref:System.ComponentModel.LicenseException></xref:System.ComponentModel.LicenseManager.Validate%2A> <xref:System.ComponentModel.LicenseManager.IsValid%2A>nie zgłasza wyjątek.</xref:System.ComponentModel.LicenseManager.IsValid%2A>      3.  Wywołanie <xref:System.ComponentModel.License.Dispose%2A>na licencji, który został udzielony, gdy składnik jest usunięty lub sfinalizowany.</xref:System.ComponentModel.License.Dispose%2A>       Aby uzyskać więcej informacji dotyczących licencji, zobacz [porady: składniki licencji i formanty](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example creates a licensed control using the <xref:System.ComponentModel.LicenseManager.Validate%2A> method. It uses a <xref:System.ComponentModel.LicenseProvider> that is implemented by the <xref:System.ComponentModel.LicFileLicenseProvider> class.  \n  \n [!code-cs[Classic LicenseManager Example#1](~/add/codesnippet/csharp/t-system.componentmodel._63_1.cs)]\n [!code-vb[Classic LicenseManager Example#1](~/add/codesnippet/visualbasic/t-system.componentmodel._63_1.vb)]\n [!code-cpp[Classic LicenseManager Example#1](~/add/codesnippet/cpp/t-system.componentmodel._63_1.cpp)]"
  syntax:
    content: public sealed class LicenseManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  id: CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: CreateWithContext(Type,LicenseContext)
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext)
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Tworzy wystąpienie określonego typu w danym kontekście, w którym możesz użyć wystąpienia licencjonowanego."
  remarks: "<xref:System.ComponentModel.LicenseContext>Można określić jako `creationContext` parametr jest używany jako <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>przez cały okres istnienia tego <xref:System.ComponentModel.License>.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A> </xref:System.ComponentModel.LicenseContext> Metoda CreateWithContext blokuje inne wątki <xref:System.AppDomain>Modyfikowanie <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, dzięki czemu CreateWithContext będzie działać jako operacją niepodzielną.</xref:System.ComponentModel.LicenseManager.CurrentContext%2A> </xref:System.AppDomain>"
  syntax:
    content: public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext);
    parameters:
    - id: type
      type: System.Type
      description: "A <xref:System.Type>reprezentujący typ tworzonego.</xref:System.Type>"
    - id: creationContext
      type: System.ComponentModel.LicenseContext
      description: "A <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> określający, jeśli używasz wystąpienia licencjonowanego."
    return:
      type: System.Object
      description: "Wystąpienia określonego typu."
  overload: System.ComponentModel.LicenseManager.CreateWithContext*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  id: CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: CreateWithContext(Type,LicenseContext,Object[])
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Tworzy wystąpienie określonego typu z określonymi argumentami, w danym kontekście, w którym możesz użyć wystąpienia licencjonowanego."
  remarks: "<xref:System.ComponentModel.LicenseContext>Można określić jako `creationContext` parametr jest używany jako <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>przez cały okres istnienia tego <xref:System.ComponentModel.License>.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A> </xref:System.ComponentModel.LicenseContext> Ta metoda umożliwia blokowanie inne wątki <xref:System.AppDomain>Modyfikowanie <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, dzięki czemu <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>będzie działać jako operacją niepodzielną.</xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A> </xref:System.AppDomain>"
  syntax:
    content: public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext, object[] args);
    parameters:
    - id: type
      type: System.Type
      description: "A <xref:System.Type>reprezentujący typ tworzonego.</xref:System.Type>"
    - id: creationContext
      type: System.ComponentModel.LicenseContext
      description: "A <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> określający, jeśli używasz wystąpienia licencjonowanego."
    - id: args
      type: System.Object[]
      description: "Tablica typu <xref:System.Object>reprezentujący argumenty typu.</xref:System.Object>"
    return:
      type: System.Object
      description: "Wystąpienia określonego typu z podanej tablicy argumentów."
  overload: System.ComponentModel.LicenseManager.CreateWithContext*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.CurrentContext
  id: CurrentContext
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: CurrentContext
  nameWithType: LicenseManager.CurrentContext
  fullName: System.ComponentModel.LicenseManager.CurrentContext
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Pobiera lub ustawia bieżący <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref>, który określa, że jeśli używasz obiektu licencjonowane."
  remarks: "Gdy użytkownik zażąda prawidłową <xref:System.ComponentModel.License>, użytkownik musi udzielić kontekst, w którym <xref:System.ComponentModel.License>jest nieprawidłowe <xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=fullName>metody.</xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=fullName> </xref:System.ComponentModel.License> </xref:System.ComponentModel.License> <xref:System.ComponentModel.LicenseContext>Zwróconych przez to właściwość powinien zostać przekazany do wszystkich <xref:System.ComponentModel.LicenseProvider>klasy.</xref:System.ComponentModel.LicenseProvider> </xref:System.ComponentModel.LicenseContext>"
  syntax:
    content: public static System.ComponentModel.LicenseContext CurrentContext { get; set; }
    return:
      type: System.ComponentModel.LicenseContext
      description: "A <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> określający, jeśli używasz obiektu licencjonowane."
  overload: System.ComponentModel.LicenseManager.CurrentContext*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Właściwość CurrentContext jest obecnie zablokowana i nie można zmienić."
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.IsLicensed(System.Type)
  id: IsLicensed(System.Type)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: IsLicensed(Type)
  nameWithType: LicenseManager.IsLicensed(Type)
  fullName: System.ComponentModel.LicenseManager.IsLicensed(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Zwraca, czy dany typ ma prawidłową licencję."
  syntax:
    content: public static bool IsLicensed (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>Aby znaleźć for. prawidłowej licencji</xref:System.Type>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli dany typ jest licencjonowany; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.LicenseManager.IsLicensed*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type)
  id: IsValid(System.Type)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: IsValid(Type)
  nameWithType: LicenseManager.IsValid(Type)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Określa, czy dla określonego typu można przydzielić prawidłowej licencji."
  remarks: "IsValid — metoda zwraca `true` podczas tego typu nie ma licencji lub licencja jest udzielana i licencja jest nieprawidłowa.       Ta metoda nie zgłasza, <xref:System.ComponentModel.LicenseException>gdy nie można udzielić prawidłową <xref:System.ComponentModel.License>.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseException> <xref:System.ComponentModel.LicenseManager.Validate%2A>Metoda zgłasza wyjątki.</xref:System.ComponentModel.LicenseManager.Validate%2A>"
  syntax:
    content: public static bool IsValid (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "A <xref:System.Type>reprezentujący typ obiektu, który żąda <xref href=&quot;System.ComponentModel.License&quot;> </xref>.</xref:System.Type>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli można przydzielić prawidłowej licencji; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.LicenseManager.IsValid*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)
  id: IsValid(System.Type,System.Object,System.ComponentModel.License@)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: IsValid(Type,Object,License)
  nameWithType: LicenseManager.IsValid(Type,Object,License)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type,Object,License)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Określa, czy dla określonego wystąpienia tego typu można przydzielić prawidłowej licencji. Ta metoda tworzy prawidłowy <xref href=&quot;System.ComponentModel.License&quot;> </xref>."
  remarks: "<xref:System.ComponentModel.LicenseManager.IsValid%2A>Metoda zwraca `true` podczas `type` parametru nie ma licencji lub gdy jest licencjonowana i `license` parametr jest prawidłowy.</xref:System.ComponentModel.LicenseManager.IsValid%2A>       Ta metoda nie zgłasza, <xref:System.ComponentModel.LicenseException>gdy nie można udzielić prawidłową <xref:System.ComponentModel.License>.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseException> <xref:System.ComponentModel.LicenseManager.Validate%2A>Metoda zgłasza wyjątki.</xref:System.ComponentModel.LicenseManager.Validate%2A>       Jeśli `license` parametr nie jest `null` po tym wywołaniu obiektu podanie <xref:System.ComponentModel.License>musi dysponować licencji przez wywołanie metody <xref:System.ComponentModel.License.Dispose%2A>metody, gdy obiekt jest usunięty z lub sfinalizowany.</xref:System.ComponentModel.License.Dispose%2A> </xref:System.ComponentModel.License>"
  syntax:
    content: public static bool IsValid (Type type, object instance, out System.ComponentModel.License license);
    parameters:
    - id: type
      type: System.Type
      description: "A <xref:System.Type>reprezentujący typ obiektu, który żąda licencji.</xref:System.Type>"
    - id: instance
      type: System.Object
      description: "Obiekt określonego typu lub typu pochodnego z określonego typu."
    - id: license
      type: System.ComponentModel.License
      description: "A <xref href=&quot;System.ComponentModel.License&quot;> </xref> czyli prawidłowej licencji lub <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> , jeśli nie można przydzielić prawidłowej licencji."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli jest to prawidłowy <xref href=&quot;System.ComponentModel.License&quot;> </xref> może być przyznany; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.LicenseManager.IsValid*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.LockContext(System.Object)
  id: LockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: LockContext(Object)
  nameWithType: LicenseManager.LockContext(Object)
  fullName: System.ComponentModel.LicenseManager.LockContext(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Zapobiega zmian do bieżącego <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> danego obiektu."
  remarks: "Użyj <xref:System.ComponentModel.LicenseContext>uzyskanie <xref:System.ComponentModel.License>obiektu.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseContext> Ta metoda umożliwia zablokowanie <xref:System.ComponentModel.LicenseContext>, zapobieganie <xref:System.ComponentModel.License>z pobieranych.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseContext>"
  syntax:
    content: public static void LockContext (object contextUser);
    parameters:
    - id: contextUser
      type: System.Object
      description: "Obiekt, którego bieżącego kontekstu, które chcesz zablokować."
  overload: System.ComponentModel.LicenseManager.LockContext*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Kontekst jest już zablokowany."
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.UnlockContext(System.Object)
  id: UnlockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: UnlockContext(Object)
  nameWithType: LicenseManager.UnlockContext(Object)
  fullName: System.ComponentModel.LicenseManager.UnlockContext(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Zezwala na zmiany wprowadzane do bieżącego <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> danego obiektu."
  remarks: "Użyj <xref:System.ComponentModel.LicenseContext>uzyskanie <xref:System.ComponentModel.License>obiektu.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseContext> Ta metoda umożliwia odblokowanie <xref:System.ComponentModel.LicenseContext>, dzięki czemu <xref:System.ComponentModel.License>mają zostać pobrane.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseContext>"
  syntax:
    content: public static void UnlockContext (object contextUser);
    parameters:
    - id: contextUser
      type: System.Object
      description: "Obiekt, którego bieżącego kontekstu chcesz odblokować."
  overload: System.ComponentModel.LicenseManager.UnlockContext*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>contextUser</code>reprezentuje użytkownika innego niż określona w poprzednie wywołanie <xref:System.ComponentModel.LicenseManager.LockContext*>."
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.UsageMode
  id: UsageMode
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: UsageMode
  nameWithType: LicenseManager.UsageMode
  fullName: System.ComponentModel.LicenseManager.UsageMode
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Pobiera <xref href=&quot;System.ComponentModel.LicenseUsageMode&quot;> </xref> określającej, używając obiektu licencjonowane dla <xref:System.ComponentModel.LicenseManager.CurrentContext*>.</xref:System.ComponentModel.LicenseManager.CurrentContext*>"
  remarks: "Jeśli ta właściwość nie może znaleźć <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>wartości, zwraca <xref:System.ComponentModel.LicenseUsageMode>.</xref:System.ComponentModel.LicenseUsageMode> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A>"
  syntax:
    content: public static System.ComponentModel.LicenseUsageMode UsageMode { get; }
    return:
      type: System.ComponentModel.LicenseUsageMode
      description: "Jeden z <xref href=&quot;System.ComponentModel.LicenseUsageMode&quot;> </xref> wartości, jak określono w <xref:System.ComponentModel.LicenseManager.CurrentContext*>Właściwości.</xref:System.ComponentModel.LicenseManager.CurrentContext*>"
  overload: System.ComponentModel.LicenseManager.UsageMode*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.Validate(System.Type)
  id: Validate(System.Type)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: Validate(Type)
  nameWithType: LicenseManager.Validate(Type)
  fullName: System.ComponentModel.LicenseManager.Validate(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Określa, czy może zostać przydzielony licencji dla określonego typu."
  remarks: "Ta metoda zgłasza <xref:System.ComponentModel.LicenseException>po prawidłowym <xref:System.ComponentModel.License>nie można udzielić.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseException> <xref:System.ComponentModel.LicenseManager.IsValid%2A>— Metoda nie zgłasza wyjątek.</xref:System.ComponentModel.LicenseManager.IsValid%2A>"
  syntax:
    content: public static void Validate (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "A <xref:System.Type>reprezentujący typ obiektu, który żąda licencji.</xref:System.Type>"
  overload: System.ComponentModel.LicenseManager.Validate*
  exceptions:
  - type: System.ComponentModel.LicenseException
    commentId: T:System.ComponentModel.LicenseException
    description: "A <xref href=&quot;System.ComponentModel.License&quot;> </xref> nie można udzielić."
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)
  id: Validate(System.Type,System.Object)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: Validate(Type,Object)
  nameWithType: LicenseManager.Validate(Type,Object)
  fullName: System.ComponentModel.LicenseManager.Validate(Type,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Określa, czy licencji można otrzymać wystąpienia określonego typu."
  remarks: "Ta metoda zgłasza <xref:System.ComponentModel.LicenseException>po prawidłowym <xref:System.ComponentModel.License>nie można udzielić.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseException> <xref:System.ComponentModel.LicenseManager.IsValid%2A>— Metoda nie zgłasza wyjątek.</xref:System.ComponentModel.LicenseManager.IsValid%2A>       Wszystkie obiekty z prośbą o <xref:System.ComponentModel.License>musi dysponować licencji przez wywołanie metody <xref:System.ComponentModel.License.Dispose%2A>metody, gdy obiekt jest usunięty z lub sfinalizowany.</xref:System.ComponentModel.License.Dispose%2A> </xref:System.ComponentModel.License>"
  syntax:
    content: public static System.ComponentModel.License Validate (Type type, object instance);
    parameters:
    - id: type
      type: System.Type
      description: "A <xref:System.Type>reprezentujący typ obiektu, który żąda licencji.</xref:System.Type>"
    - id: instance
      type: System.Object
      description: "<xref:System.Object>Określonego typu lub typu pochodnego od określonego typu.</xref:System.Object>"
    return:
      type: System.ComponentModel.License
      description: "A valid <xref href=&quot;System.ComponentModel.License&quot;></xref>."
  overload: System.ComponentModel.LicenseManager.Validate*
  exceptions:
  - type: System.ComponentModel.LicenseException
    commentId: T:System.ComponentModel.LicenseException
    description: "Typ jest licencjonowana, ale <xref href=&quot;System.ComponentModel.License&quot;> </xref> nie można udzielić."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ComponentModel.LicenseException
  parent: System.ComponentModel
  isExternal: false
  name: LicenseException
  nameWithType: LicenseException
  fullName: System.ComponentModel.LicenseException
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CreateWithContext(Type,LicenseContext)
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext)
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.LicenseContext
  parent: System.ComponentModel
  isExternal: false
  name: LicenseContext
  nameWithType: LicenseContext
  fullName: System.ComponentModel.LicenseContext
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CreateWithContext(Type,LicenseContext,Object[])
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.LicenseManager.CurrentContext
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CurrentContext
  nameWithType: LicenseManager.CurrentContext
  fullName: System.ComponentModel.LicenseManager.CurrentContext
- uid: System.ComponentModel.LicenseManager.IsLicensed(System.Type)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsLicensed(Type)
  nameWithType: LicenseManager.IsLicensed(Type)
  fullName: System.ComponentModel.LicenseManager.IsLicensed(Type)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsValid(Type)
  nameWithType: LicenseManager.IsValid(Type)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type)
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsValid(Type,Object,License)
  nameWithType: LicenseManager.IsValid(Type,Object,License)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type,Object,License)
- uid: System.ComponentModel.License
  parent: System.ComponentModel
  isExternal: false
  name: License
  nameWithType: License
  fullName: System.ComponentModel.License
- uid: System.ComponentModel.LicenseManager.LockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: LockContext(Object)
  nameWithType: LicenseManager.LockContext(Object)
  fullName: System.ComponentModel.LicenseManager.LockContext(Object)
- uid: System.ComponentModel.LicenseManager.UnlockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UnlockContext(Object)
  nameWithType: LicenseManager.UnlockContext(Object)
  fullName: System.ComponentModel.LicenseManager.UnlockContext(Object)
- uid: System.ComponentModel.LicenseManager.UsageMode
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UsageMode
  nameWithType: LicenseManager.UsageMode
  fullName: System.ComponentModel.LicenseManager.UsageMode
- uid: System.ComponentModel.LicenseUsageMode
  parent: System.ComponentModel
  isExternal: false
  name: LicenseUsageMode
  nameWithType: LicenseUsageMode
  fullName: System.ComponentModel.LicenseUsageMode
- uid: System.ComponentModel.LicenseManager.Validate(System.Type)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: Validate(Type)
  nameWithType: LicenseManager.Validate(Type)
  fullName: System.ComponentModel.LicenseManager.Validate(Type)
- uid: System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: Validate(Type,Object)
  nameWithType: LicenseManager.Validate(Type,Object)
  fullName: System.ComponentModel.LicenseManager.Validate(Type,Object)
- uid: System.ComponentModel.LicenseManager.CreateWithContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CreateWithContext
  nameWithType: LicenseManager.CreateWithContext
- uid: System.ComponentModel.LicenseManager.CurrentContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CurrentContext
  nameWithType: LicenseManager.CurrentContext
- uid: System.ComponentModel.LicenseManager.IsLicensed*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsLicensed
  nameWithType: LicenseManager.IsLicensed
- uid: System.ComponentModel.LicenseManager.IsValid*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsValid
  nameWithType: LicenseManager.IsValid
- uid: System.ComponentModel.LicenseManager.LockContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: LockContext
  nameWithType: LicenseManager.LockContext
- uid: System.ComponentModel.LicenseManager.UnlockContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UnlockContext
  nameWithType: LicenseManager.UnlockContext
- uid: System.ComponentModel.LicenseManager.UsageMode*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UsageMode
  nameWithType: LicenseManager.UsageMode
- uid: System.ComponentModel.LicenseManager.Validate*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: Validate
  nameWithType: LicenseManager.Validate
