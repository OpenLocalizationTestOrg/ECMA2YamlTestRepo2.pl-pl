### YamlMime:ManagedReference
items:
- uid: System.Configuration.Provider.ProviderBase
  id: ProviderBase
  children:
  - System.Configuration.Provider.ProviderBase.#ctor
  - System.Configuration.Provider.ProviderBase.Description
  - System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  - System.Configuration.Provider.ProviderBase.Name
  langs:
  - csharp
  name: ProviderBase
  nameWithType: ProviderBase
  fullName: System.Configuration.Provider.ProviderBase
  type: Class
  summary: "Udostępnia podstawową implementację dostawcy rozszerzonego modelu."
  remarks: "Model dostawcy jest przeznaczona do Hermetyzowanie całość lub część funkcji wielu funkcji programu ASP.NET, takich jak członkostwa, profile i konfiguracji chronionych. Umożliwia deweloperom tworzenie klasy obsługi udostępniające wiele implementacji hermetyzowany funkcji. Ponadto programiści mogą pisać nowych funkcji przy użyciu modelu dostawcy. Może to być efektywny sposób obsługuje wiele implementacji tej funkcji bez duplikowania kodu funkcji lub nagrywanie warstwy aplikacji, jeśli metoda implementacji musi zostać zmienione.       Klasa ProviderBase jest proste, zawierający tylko kilka podstawowe metody i właściwości, które są wspólne dla wszystkich dostawców. Dostawców właściwych dla funkcji (takich jak <xref:System.Web.Security.MembershipProvider>) dziedziczyć ProviderBase i ustal niezbędne metody i właściwości, które muszą obsługiwać dostawców konkretnej implementacji dla tej funkcji.</xref:System.Web.Security.MembershipProvider> Konkretnej implementacji dostawcy (takich jak <xref:System.Web.Security.SqlMembershipProvider>) z kolei dziedziczyć dostawcy właściwych dla funkcji (w tym przypadku <xref:System.Web.Security.MembershipProvider>).</xref:System.Web.Security.MembershipProvider> </xref:System.Web.Security.SqlMembershipProvider>       Najważniejszym aspektem modelu dostawcy jest, że implementacja (na przykład, czy dane jest trwała jako plik tekstowy lub w bazie danych) jest pobieranej z kodu aplikacji. Typ dostawcy konkretnej implementacji dla danej funkcji wyznaczono w pliku konfiguracji. Następnie dostawca funkcji na poziomie odczytuje w typie z pliku konfiguracji, a także pełni rolę fabrykę do kodu funkcji. Deweloper aplikacji może następnie używać klas funkcji w kodzie aplikacji. Typ implementacji można wymieniony w pliku konfiguracji, co eliminuje konieczność ponownego pisania kodu, aby pomieścić metodologii inną implementację.       Dostawcy dołączonego ASP.NET są przeważnie abstrakcje implementacje trwałości danych dla funkcji, takich jak profile lub członkostwa. Jednak ten model może odnosić się do innego rodzaju korzystanie z funkcji, który można pobieranej i wdrożone na wiele sposobów."
  example:
  - For an example of how to use the ProviderBase class, see [Profile Provider Implementation Example](~/add/includes/ajax-current-ext-md.md).
  syntax:
    content: public abstract class ProviderBase
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Configuration.Provider.ProviderBase.#ctor
  id: '#ctor'
  parent: System.Configuration.Provider.ProviderBase
  langs:
  - csharp
  name: ProviderBase()
  nameWithType: ProviderBase.ProviderBase()
  fullName: System.Configuration.Provider.ProviderBase.ProviderBase()
  type: Constructor
  assemblies:
  - System.Configuration
  namespace: System.Configuration.Provider
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Configuration.Provider.ProviderBase&quot;> </xref> klasy."
  syntax:
    content: protected ProviderBase ();
    parameters: []
  overload: System.Configuration.Provider.ProviderBase.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.Provider.ProviderBase.Description
  id: Description
  parent: System.Configuration.Provider.ProviderBase
  langs:
  - csharp
  name: Description
  nameWithType: ProviderBase.Description
  fullName: System.Configuration.Provider.ProviderBase.Description
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration.Provider
  summary: "Pobiera opis krótkie, przyjazną odpowiednią do wyświetlania w narzędzia administracyjne lub inne interfejsy użytkownika (UI)."
  remarks: "Jeśli skonfigurowanego dostawcy nie dostarcza opis, wartość <xref:System.Configuration.Provider.ProviderBase.Name%2A>zwracana jest właściwość jako domyślny.</xref:System.Configuration.Provider.ProviderBase.Name%2A>"
  syntax:
    content: public virtual string Description { get; }
    return:
      type: System.String
      description: "Krótkie, przyjazną opis odpowiednią do wyświetlania narzędzi administracyjnych lub innych UI."
  overload: System.Configuration.Provider.ProviderBase.Description*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  id: Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Configuration.Provider.ProviderBase
  langs:
  - csharp
  name: Initialize(String,NameValueCollection)
  nameWithType: ProviderBase.Initialize(String,NameValueCollection)
  fullName: System.Configuration.Provider.ProviderBase.Initialize(String,NameValueCollection)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration.Provider
  summary: "Inicjuje dostawcę."
  remarks: "Implementacja klasy podstawowej wewnętrznie śledzi liczbę razy dostawcy `Initialize` została wywołana metoda. Jeśli więcej niż raz, zainicjować dostawcy `InvalidOperationException` jest zgłaszany, informujący, że dostawca został już zainicjowany.       Ponieważ większość funkcji dostawców wywołania zainicjować przed wykonaniem inicjowania specyficznych dla dostawcy, ta metoda jest centralną lokalizację uniemożliwia podwójne inicjowania."
  example:
  - For an example of how to use Initialize, see [Profile Provider Implementation Example](~/add/includes/ajax-current-ext-md.md).
  syntax:
    content: public virtual void Initialize (string name, System.Collections.Specialized.NameValueCollection config);
    parameters:
    - id: name
      type: System.String
      description: "Przyjazna nazwa dostawcy."
    - id: config
      type: System.Collections.Specialized.NameValueCollection
      description: "Kolekcja par nazw i wartości reprezentujących atrybuty specyficzne dla dostawcy określonego w konfiguracji dla tego dostawcy."
  overload: System.Configuration.Provider.ProviderBase.Initialize*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Nazwa dostawcy jest <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Nazwa dostawcy ma długość równą zero."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Podjęta próba wywołać metodę Initialize dostawcę po dostawca został już zainicjowany."
  platform:
  - net462
- uid: System.Configuration.Provider.ProviderBase.Name
  id: Name
  parent: System.Configuration.Provider.ProviderBase
  langs:
  - csharp
  name: Name
  nameWithType: ProviderBase.Name
  fullName: System.Configuration.Provider.ProviderBase.Name
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration.Provider
  summary: "Pobiera przyjazną nazwę używaną do odwoływania się do dostawcy podczas konfiguracji."
  remarks: 'Jest zalecana wzorca dla tych parametrów: [*twórcy dostawcy*] [*typ implementacji*] [*funkcji*] dostawcy. Mimo że <xref:System.Configuration.Provider.ProviderBase.Description%2A>właściwość zawiera również opis przyjazną, właściwość Name jest używany jako identyfikator dla dostawcy.</xref:System.Configuration.Provider.ProviderBase.Description%2A>'
  syntax:
    content: public virtual string Name { get; }
    return:
      type: System.String
      description: "Przyjazna nazwa używana do odwoływania się do dostawcy podczas konfiguracji."
  overload: System.Configuration.Provider.ProviderBase.Name*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Configuration.Provider.ProviderBase.#ctor
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: ProviderBase()
  nameWithType: ProviderBase.ProviderBase()
  fullName: System.Configuration.Provider.ProviderBase.ProviderBase()
- uid: System.Configuration.Provider.ProviderBase.Description
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: Description
  nameWithType: ProviderBase.Description
  fullName: System.Configuration.Provider.ProviderBase.Description
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: Initialize(String,NameValueCollection)
  nameWithType: ProviderBase.Initialize(String,NameValueCollection)
  fullName: System.Configuration.Provider.ProviderBase.Initialize(String,NameValueCollection)
- uid: System.Collections.Specialized.NameValueCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: NameValueCollection
  nameWithType: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: System.Configuration.Provider.ProviderBase.Name
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: Name
  nameWithType: ProviderBase.Name
  fullName: System.Configuration.Provider.ProviderBase.Name
- uid: System.Configuration.Provider.ProviderBase.#ctor*
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: ProviderBase
  nameWithType: ProviderBase.ProviderBase
- uid: System.Configuration.Provider.ProviderBase.Description*
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: Description
  nameWithType: ProviderBase.Description
- uid: System.Configuration.Provider.ProviderBase.Initialize*
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: Initialize
  nameWithType: ProviderBase.Initialize
- uid: System.Configuration.Provider.ProviderBase.Name*
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: Name
  nameWithType: ProviderBase.Name
