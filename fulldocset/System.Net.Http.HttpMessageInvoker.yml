### YamlMime:ManagedReference
items:
- uid: System.Net.Http.HttpMessageInvoker
  id: HttpMessageInvoker
  children:
  - System.Net.Http.HttpMessageInvoker.#ctor(System.Net.Http.HttpMessageHandler)
  - System.Net.Http.HttpMessageInvoker.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)
  - System.Net.Http.HttpMessageInvoker.Dispose
  - System.Net.Http.HttpMessageInvoker.Dispose(System.Boolean)
  - System.Net.Http.HttpMessageInvoker.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  langs:
  - csharp
  name: HttpMessageInvoker
  nameWithType: HttpMessageInvoker
  fullName: System.Net.Http.HttpMessageInvoker
  type: Class
  summary: "Klasa specjalistyczne, który umożliwia aplikacjom wywoływanie <xref:System.Net.Http.HttpMessageInvoker.SendAsync*>metody w łańcuchu programu obsługi Http.</xref:System.Net.Http.HttpMessageInvoker.SendAsync*>"
  remarks: "Ta klasa jest typem podstawowym <xref:System.Net.Http.HttpClient>i innych nadawcy wiadomości.</xref:System.Net.Http.HttpClient>       Większość aplikacji łączących się z witryną sieci web będzie używać jednej z <xref:System.Net.Http.HttpClient.SendAsync%2A>metod w <xref:System.Net.Http.HttpClient>klasie.</xref:System.Net.Http.HttpClient> </xref:System.Net.Http.HttpClient.SendAsync%2A>"
  syntax:
    content: 'public class HttpMessageInvoker : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.Http.HttpMessageInvoker.#ctor(System.Net.Http.HttpMessageHandler)
  id: '#ctor(System.Net.Http.HttpMessageHandler)'
  parent: System.Net.Http.HttpMessageInvoker
  langs:
  - csharp
  name: HttpMessageInvoker(HttpMessageHandler)
  nameWithType: HttpMessageInvoker.HttpMessageInvoker(HttpMessageHandler)
  fullName: System.Net.Http.HttpMessageInvoker.HttpMessageInvoker(HttpMessageHandler)
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Inicjuje wystąpienie klasy <xref href=&quot;System.Net.Http.HttpMessageInvoker&quot;> </xref> z użyciem określonego komunikatu <xref href=&quot;System.Net.Http.HttpMessageHandler&quot;> </xref>."
  syntax:
    content: public HttpMessageInvoker (System.Net.Http.HttpMessageHandler handler);
    parameters:
    - id: handler
      type: System.Net.Http.HttpMessageHandler
      description: "<xref href=&quot;System.Net.Http.HttpMessageHandler&quot;> </xref> Odpowiedzialna za przetwarzanie komunikatów odpowiedzi HTTP."
  overload: System.Net.Http.HttpMessageInvoker.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpMessageInvoker.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)
  id: '#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)'
  parent: System.Net.Http.HttpMessageInvoker
  langs:
  - csharp
  name: HttpMessageInvoker(HttpMessageHandler,Boolean)
  nameWithType: HttpMessageInvoker.HttpMessageInvoker(HttpMessageHandler,Boolean)
  fullName: System.Net.Http.HttpMessageInvoker.HttpMessageInvoker(HttpMessageHandler,Boolean)
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Inicjuje wystąpienie klasy <xref href=&quot;System.Net.Http.HttpMessageInvoker&quot;> </xref> z użyciem określonego komunikatu <xref href=&quot;System.Net.Http.HttpMessageHandler&quot;> </xref>."
  syntax:
    content: public HttpMessageInvoker (System.Net.Http.HttpMessageHandler handler, bool disposeHandler);
    parameters:
    - id: handler
      type: System.Net.Http.HttpMessageHandler
      description: "<xref href=&quot;System.Net.Http.HttpMessageHandler&quot;> </xref> Odpowiedzialna za przetwarzanie komunikatów odpowiedzi HTTP."
    - id: disposeHandler
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli wewnętrznym programem obsługi powinny być usuwane przez metody Dispose(),<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> Jeśli zamierzasz użyć ponownie wewnętrznym programem obsługi."
  overload: System.Net.Http.HttpMessageInvoker.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpMessageInvoker.Dispose
  id: Dispose
  parent: System.Net.Http.HttpMessageInvoker
  langs:
  - csharp
  name: Dispose()
  nameWithType: HttpMessageInvoker.Dispose()
  fullName: System.Net.Http.HttpMessageInvoker.Dispose()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Zwalnia zasoby niezarządzane i usuwa zasoby zarządzane używane przez <xref href=&quot;System.Net.Http.HttpMessageInvoker&quot;> </xref>."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Net.Http.HttpMessageInvoker.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpMessageInvoker.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Http.HttpMessageInvoker
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HttpMessageInvoker.Dispose(Boolean)
  fullName: System.Net.Http.HttpMessageInvoker.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Zwalnia zasoby niezarządzane używane przez <xref href=&quot;System.Net.Http.HttpMessageInvoker&quot;> </xref> i opcjonalnie usuwa zarządzane zasoby."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby zwolnić zasoby zarządzane i niezarządzane; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> powoduje zwolnienie tylko niezarządzane zasoby."
  overload: System.Net.Http.HttpMessageInvoker.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpMessageInvoker.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpMessageInvoker
  langs:
  - csharp
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: HttpMessageInvoker.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.HttpMessageInvoker.SendAsync(HttpRequestMessage,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Wyślij żądanie HTTP jako operację asynchroniczną."
  remarks: "Ta operacja nie powoduje blokowania. Zwrócona <xref:System.Threading.Tasks.Task%601>obiektu ukończy po całej odpowiedzi, w tym do zawartości jest do odczytu.</xref:System.Threading.Tasks.Task%601>       Większość aplikacji łączących się z witryną sieci web będzie używać jednej z <xref:System.Net.Http.HttpClient.SendAsync%2A>metod w <xref:System.Net.Http.HttpClient>klasie.</xref:System.Net.Http.HttpClient> </xref:System.Net.Http.HttpClient.SendAsync%2A>"
  syntax:
    content: public virtual System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "Komunikat żądania HTTP do wysłania."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Token anulowania do anulowania operacji."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "Obiekt zadania reprezentujący operację asynchroniczną."
  overload: System.Net.Http.HttpMessageInvoker.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>request</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Net.Http.HttpMessageInvoker.#ctor(System.Net.Http.HttpMessageHandler)
  parent: System.Net.Http.HttpMessageInvoker
  isExternal: false
  name: HttpMessageInvoker(HttpMessageHandler)
  nameWithType: HttpMessageInvoker.HttpMessageInvoker(HttpMessageHandler)
  fullName: System.Net.Http.HttpMessageInvoker.HttpMessageInvoker(HttpMessageHandler)
- uid: System.Net.Http.HttpMessageHandler
  parent: System.Net.Http
  isExternal: false
  name: HttpMessageHandler
  nameWithType: HttpMessageHandler
  fullName: System.Net.Http.HttpMessageHandler
- uid: System.Net.Http.HttpMessageInvoker.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)
  parent: System.Net.Http.HttpMessageInvoker
  isExternal: false
  name: HttpMessageInvoker(HttpMessageHandler,Boolean)
  nameWithType: HttpMessageInvoker.HttpMessageInvoker(HttpMessageHandler,Boolean)
  fullName: System.Net.Http.HttpMessageInvoker.HttpMessageInvoker(HttpMessageHandler,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Http.HttpMessageInvoker.Dispose
  parent: System.Net.Http.HttpMessageInvoker
  isExternal: false
  name: Dispose()
  nameWithType: HttpMessageInvoker.Dispose()
  fullName: System.Net.Http.HttpMessageInvoker.Dispose()
- uid: System.Net.Http.HttpMessageInvoker.Dispose(System.Boolean)
  parent: System.Net.Http.HttpMessageInvoker
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HttpMessageInvoker.Dispose(Boolean)
  fullName: System.Net.Http.HttpMessageInvoker.Dispose(Boolean)
- uid: System.Net.Http.HttpMessageInvoker.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpMessageInvoker
  isExternal: false
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: HttpMessageInvoker.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.HttpMessageInvoker.SendAsync(HttpRequestMessage,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<HttpResponseMessage>
  nameWithType: Task<HttpResponseMessage>
  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.Http.HttpResponseMessage>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: HttpResponseMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpRequestMessage
  parent: System.Net.Http
  isExternal: false
  name: HttpRequestMessage
  nameWithType: HttpRequestMessage
  fullName: System.Net.Http.HttpRequestMessage
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Net.Http.HttpMessageInvoker.#ctor*
  parent: System.Net.Http.HttpMessageInvoker
  isExternal: false
  name: HttpMessageInvoker
  nameWithType: HttpMessageInvoker.HttpMessageInvoker
- uid: System.Net.Http.HttpMessageInvoker.Dispose*
  parent: System.Net.Http.HttpMessageInvoker
  isExternal: false
  name: Dispose
  nameWithType: HttpMessageInvoker.Dispose
- uid: System.Net.Http.HttpMessageInvoker.SendAsync*
  parent: System.Net.Http.HttpMessageInvoker
  isExternal: false
  name: SendAsync
  nameWithType: HttpMessageInvoker.SendAsync
