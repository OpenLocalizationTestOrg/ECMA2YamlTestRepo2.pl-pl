### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.HashAlgorithm
  id: HashAlgorithm
  children:
  - System.Security.Cryptography.HashAlgorithm.#ctor
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.Create
  - System.Security.Cryptography.HashAlgorithm.Create(System.String)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.HashFinal
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.Initialize
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  name: HashAlgorithm
  nameWithType: HashAlgorithm
  fullName: System.Security.Cryptography.HashAlgorithm
  type: Class
  summary: "Reprezentuje klasę podstawową, z których wszystkie implementacji skrót kryptograficzny musi pochodzić algorytmów."
  remarks: "Funkcje skrótu są niezbędne, aby nowoczesnych kryptografii. Funkcje te mapowania ciągów binarnych o dowolnej długości mały binarne ciągi o stałej długości, znany jako wartości skrótu. Funkcja skrót kryptograficzny ma właściwość czy on jest praktycznie niemożliwe znaleźć dwóch różnych parametrów wejściowych ten skrót do tej samej wartości. Funkcje skrótu są często używane z podpisami cyfrowymi i integralności danych.       Skrót jest używana jako unikatowy o stałym rozmiarze reprezentujący dużej ilości danych. Skróty dwóch zestawów danych powinien być zgodny Jeśli zgodny odpowiednich danych. Niewielkie zmiany w wyniku danych w dużych zmian nieprzewidywalne mieszania."
  example:
  - "The following code example computes the <xref:System.Security.Cryptography.SHA1CryptoServiceProvider> hash for an array. This example assumes that there is a predefined byte array `dataArray[]`. <xref:System.Security.Cryptography.SHA1CryptoServiceProvider> is a derived class of HashAlgorithm.  \n  \n [!code-cs[Classic HashAlgorithm Example#1](~/add/codesnippet/csharp/t-system.security.crypto_106_1.cs)]\n [!code-cpp[Classic HashAlgorithm Example#1](~/add/codesnippet/cpp/t-system.security.crypto_106_1.cpp)]\n [!code-vb[Classic HashAlgorithm Example#1](~/add/codesnippet/visualbasic/t-system.security.crypto_106_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class HashAlgorithm : System.Security.Cryptography.ICryptoTransform
  inheritance:
  - System.Object
  implements:
  - System.Security.Cryptography.ICryptoTransform
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: HashAlgorithm()
  nameWithType: HashAlgorithm.HashAlgorithm()
  fullName: System.Security.Cryptography.HashAlgorithm.HashAlgorithm()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Security.Cryptography.HashAlgorithm&quot;> </xref> klasy."
  remarks: "Nie można utworzyć wystąpienia klasy abstrakcyjnej. Kod aplikacji tworzy nowe wystąpienie klasy pochodnej."
  syntax:
    content: protected HashAlgorithm ();
    parameters: []
  overload: System.Security.Cryptography.HashAlgorithm.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  id: CanReuseTransform
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: CanReuseTransform
  nameWithType: HashAlgorithm.CanReuseTransform
  fullName: System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Pobiera wartość wskazującą, czy bieżący przekształcenia mogą być ponownie używane."
  syntax:
    content: public virtual bool CanReuseTransform { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.HashAlgorithm.CanReuseTransform*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  id: CanTransformMultipleBlocks
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: CanTransformMultipleBlocks
  nameWithType: HashAlgorithm.CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "W przypadku przesłonięcia w klasie pochodnej pobiera wartość wskazującą, czy można je przekształcać wiele bloków."
  syntax:
    content: public virtual bool CanTransformMultipleBlocks { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli można je przekształcać wiele bloków; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.Clear
  id: Clear
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: Clear()
  nameWithType: HashAlgorithm.Clear()
  fullName: System.Security.Cryptography.HashAlgorithm.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Zwalnia wszelkie zasoby używane przez <xref href=&quot;System.Security.Cryptography.HashAlgorithm&quot;> </xref> klasy."
  remarks: "Ta metoda jest proste wywołanie <xref:System.IDisposable.Dispose%2A?displayProperty=fullName>metody.</xref:System.IDisposable.Dispose%2A?displayProperty=fullName>       Wywoływanie `Dispose` umożliwia zasoby używane przez <xref:System.Security.Cryptography.HashAlgorithm>klasy można przydzielić do innych celów.</xref:System.Security.Cryptography.HashAlgorithm> Aby uzyskać więcej informacji na temat `Dispose`, zobacz [czyszczenie zasobów niezarządzanych](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.Cryptography.HashAlgorithm.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  id: ComputeHash(System.Byte[])
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: ComputeHash(Byte[])
  nameWithType: HashAlgorithm.ComputeHash(Byte[])
  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Oblicza wartość skrótu dla określonej tablicy bajtów."
  remarks: ''
  example:
  - "The following example computes the <xref:System.Security.Cryptography.MD5> hash value of a string and returns the hash as a 32-character, hexadecimal-formatted string.  The hash string created by this code example is compatible with any MD5 hash function (on any platform) that creates a 32-character, hexadecimal-formatted hash string.  \n  \n [!code-vb[Security.Cryptography.MD5#1](~/add/codesnippet/visualbasic/m-system.security.crypto_123_1.vb)]\n [!code-cs[Security.Cryptography.MD5#1](~/add/codesnippet/csharp/m-system.security.crypto_123_1.cs)]"
  syntax:
    content: public byte[] ComputeHash (byte[] buffer);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "Oblicz wartość skrótu dla dane wejściowe."
    return:
      type: System.Byte[]
      description: "Obliczona wartość skrótu."
  overload: System.Security.Cryptography.HashAlgorithm.ComputeHash*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Obiekt został już usunięty."
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  id: ComputeHash(System.IO.Stream)
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: ComputeHash(Stream)
  nameWithType: HashAlgorithm.ComputeHash(Stream)
  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(Stream)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Oblicza wartość skrótu dla określonego <xref:System.IO.Stream>obiektu.</xref:System.IO.Stream>"
  remarks: ''
  example:
  - "The following example calculates the <xref:System.Security.Cryptography.RIPEMD160> hash for all files in a directory.  \n  \n [!code-cpp[RIPEMD160#1](~/add/codesnippet/cpp/m-system.security.crypto_23_1.cpp)]\n [!code-vb[RIPEMD160#1](~/add/codesnippet/visualbasic/m-system.security.crypto_23_1.vb)]\n [!code-cs[RIPEMD160#1](~/add/codesnippet/csharp/m-system.security.crypto_23_1.cs)]"
  syntax:
    content: public byte[] ComputeHash (System.IO.Stream inputStream);
    parameters:
    - id: inputStream
      type: System.IO.Stream
      description: "Oblicz wartość skrótu dla dane wejściowe."
    return:
      type: System.Byte[]
      description: "Obliczona wartość skrótu."
  overload: System.Security.Cryptography.HashAlgorithm.ComputeHash*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Obiekt został już usunięty."
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  id: ComputeHash(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: ComputeHash(Byte[],Int32,Int32)
  nameWithType: HashAlgorithm.ComputeHash(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Oblicza wartość skrótu dla określonego regionu określonej tablicy bajtów."
  syntax:
    content: public byte[] ComputeHash (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "Oblicz wartość skrótu dla dane wejściowe."
    - id: offset
      type: System.Int32
      description: "Przesunięcie do tablicy typu byte, z którego można rozpocząć korzystanie z danych."
    - id: count
      type: System.Int32
      description: "Liczba bajtów w tablicy, która ma być używana jako dane."
    return:
      type: System.Byte[]
      description: "Obliczona wartość skrótu."
  overload: System.Security.Cryptography.HashAlgorithm.ComputeHash*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>count</code>wartość jest nieprawidłowa.       - lub - <code>buffer</code> długość jest nieprawidłowa."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>jest poza zakresem. Ten parametr wymaga liczby nieujemnej."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Obiekt został już usunięty."
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.Create
  id: Create
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: Create()
  nameWithType: HashAlgorithm.Create()
  fullName: System.Security.Cryptography.HashAlgorithm.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Tworzy wystąpienie domyślną implementację algorytmu wyznaczania wartości skrótu."
  remarks: "Domyślnie używa tego przeciążenia <xref:System.Security.Cryptography.SHA1CryptoServiceProvider>implementację algorytmu wyznaczania wartości skrótu.</xref:System.Security.Cryptography.SHA1CryptoServiceProvider> Jeśli chcesz określić inną implementację, użyj <xref:System.Security.Cryptography.HashAlgorithm.Create%28System.String%29>przeciążenia, które pozwalają określić nazwę algorytmu zamiast.</xref:System.Security.Cryptography.HashAlgorithm.Create%28System.String%29> Domyślna implementacja <xref:System.Security.Cryptography.HashAlgorithm>.</xref:System.Security.Cryptography.HashAlgorithm> definiuje system konfiguracji kryptografii"
  syntax:
    content: public static System.Security.Cryptography.HashAlgorithm Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.HashAlgorithm
      description: "Nowy <xref href=&quot;System.Security.Cryptography.SHA1CryptoServiceProvider&quot;> </xref> wystąpienia, chyba że zostały zmienione ustawienia domyślne przy użyciu."
  overload: System.Security.Cryptography.HashAlgorithm.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: Create(String)
  nameWithType: HashAlgorithm.Create(String)
  fullName: System.Security.Cryptography.HashAlgorithm.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Tworzy wystąpienie określonego implementację algorytmu wyznaczania wartości skrótu."
  syntax:
    content: public static System.Security.Cryptography.HashAlgorithm Create (string hashName);
    parameters:
    - id: hashName
      type: System.String
      description: "Implementacja algorytmu wyznaczania wartości skrótu do użycia. W poniższej tabeli przedstawiono prawidłowe wartości dla `hashName` parametr i algorytmy są one wykonywane na.       <table><thead><tr><th> Wartość parametru       </th><th> Implementuje       </th></tr></thead><tbody><tr><td> SHA       </td><td><xref href=&quot;System.Security.Cryptography.SHA1CryptoServiceProvider&quot;></xref></td></tr><tr><td> SHA1       </td><td><xref href=&quot;System.Security.Cryptography.SHA1CryptoServiceProvider&quot;></xref></td></tr><tr><td> System.Security.Cryptography.SHA1       </td><td><xref href=&quot;System.Security.Cryptography.SHA1CryptoServiceProvider&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HashAlgorithm       </td><td><xref href=&quot;System.Security.Cryptography.SHA1CryptoServiceProvider&quot;></xref></td></tr><tr><td> MD5       </td><td><xref href=&quot;System.Security.Cryptography.MD5CryptoServiceProvider&quot;></xref></td></tr><tr><td> System.Security.Cryptography.MD5       </td><td><xref href=&quot;System.Security.Cryptography.MD5CryptoServiceProvider&quot;></xref></td></tr><tr><td> SHA256       </td><td><xref href=&quot;System.Security.Cryptography.SHA256Managed&quot;></xref></td></tr><tr><td> SHA-256       </td><td><xref href=&quot;System.Security.Cryptography.SHA256Managed&quot;></xref></td></tr><tr><td> System.Security.Cryptography.SHA256       </td><td><xref href=&quot;System.Security.Cryptography.SHA256Managed&quot;></xref></td></tr><tr><td> SHA384       </td><td><xref href=&quot;System.Security.Cryptography.SHA384Managed&quot;></xref></td></tr><tr><td> ALGORYTM SHA-384       </td><td><xref href=&quot;System.Security.Cryptography.SHA384Managed&quot;></xref></td></tr><tr><td> System.Security.Cryptography.SHA384       </td><td><xref href=&quot;System.Security.Cryptography.SHA384Managed&quot;></xref></td></tr><tr><td> SHA512       </td><td><xref href=&quot;System.Security.Cryptography.SHA512Managed&quot;></xref></td></tr><tr><td> ALGORYTM SHA-512.       </td><td><xref href=&quot;System.Security.Cryptography.SHA512Managed&quot;></xref></td></tr><tr><td> System.Security.Cryptography.SHA512       </td><td><xref href=&quot;System.Security.Cryptography.SHA512Managed&quot;></xref></td></tr></tbody></table>"
    return:
      type: System.Security.Cryptography.HashAlgorithm
      description: "Nowe wystąpienie klasy algorytmu wyznaczania wartości skrótu określonej lub <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Jeśli <code> hashName </code> nie jest algorytm prawidłowy skrót."
  overload: System.Security.Cryptography.HashAlgorithm.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.Dispose
  id: Dispose
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: Dispose()
  nameWithType: HashAlgorithm.Dispose()
  fullName: System.Security.Cryptography.HashAlgorithm.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Zwalnia wszelkie zasoby używane przez bieżące wystąpienie klasy <xref href=&quot;System.Security.Cryptography.HashAlgorithm&quot;> </xref> klasy."
  remarks: "Wywołanie `Dispose` po zakończeniu przy użyciu <xref:System.Security.Cryptography.HashAlgorithm>.</xref:System.Security.Cryptography.HashAlgorithm> `Dispose` Pozostawia metody <xref:System.Security.Cryptography.HashAlgorithm>w stanie uniemożliwiającym jego używanie.</xref:System.Security.Cryptography.HashAlgorithm> Po wywołaniu `Dispose`, konieczne jest zwolnienie wszystkich odwołań do <xref:System.Security.Cryptography.HashAlgorithm>, moduł zbierający elementy bezużyteczne mógł odzyskać pamięć który <xref:System.Security.Cryptography.HashAlgorithm>klasy.</xref:System.Security.Cryptography.HashAlgorithm> </xref:System.Security.Cryptography.HashAlgorithm>       Aby uzyskać więcej informacji, zobacz [czyszczenie zasobów niezarządzanych](~/add/includes/ajax-current-ext-md.md) i [implementacja metody Dispose](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Wywołanie zawsze `Dispose` przed zwolnieniem ostatniego odwołania do <xref:System.Security.Cryptography.HashAlgorithm>.</xref:System.Security.Cryptography.HashAlgorithm> W przeciwnym razie używa zasobów nie zostanie zwolniona do wywołania modułu zbierającego elementy bezużyteczne <xref:System.Security.Cryptography.HashAlgorithm>obiektu `Finalize` metody.</xref:System.Security.Cryptography.HashAlgorithm>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Cryptography.HashAlgorithm.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HashAlgorithm.Dispose(Boolean)
  fullName: System.Security.Cryptography.HashAlgorithm.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Zwalnia zasoby niezarządzane używane przez <xref href=&quot;System.Security.Cryptography.HashAlgorithm&quot;> </xref> i opcjonalnie zwalnia zasoby zarządzane."
  remarks: "Ta metoda jest wywoływana przez metodę publiczną `Dispose()` — metoda i `Finalize` metody. `Dispose()`wywołuje chronioną metodę `Dispose(Boolean)` metody z `disposing` ustawiona `true`. `Finalize`wywołuje `Dispose` z `disposing` ustawioną `false`.       Gdy `disposing` parametr jest `true`, ta metoda zwalnia wszystkie zasoby zajmowane przez wszelkie obiekty zarządzane przez to <xref:System.Security.Cryptography.HashAlgorithm>odwołań.</xref:System.Security.Cryptography.HashAlgorithm> Ta metoda wywołuje `Dispose()` metody każdego odwołuje się do obiektu."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby zwolnić zasoby zarządzane i niezarządzane; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> aby zwolnić tylko zasoby niezarządzane."
  overload: System.Security.Cryptography.HashAlgorithm.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.Hash
  id: Hash
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: Hash
  nameWithType: HashAlgorithm.Hash
  fullName: System.Security.Cryptography.HashAlgorithm.Hash
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Pobiera wartość obliczona wartość skrótu."
  remarks: "Właściwość wyznaczania wartości skrótu jest tablicą bajtów; <xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A>właściwość ma wartość, która reprezentuje usługi bits.</xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A> W związku z tym liczba elementów w wyznaczania wartości skrótu jest jeden ósmego rozmiar <xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A>.</xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A>"
  syntax:
    content: public virtual byte[] Hash { get; }
    return:
      type: System.Byte[]
      description: "Bieżąca wartość obliczona wartość skrótu."
  overload: System.Security.Cryptography.HashAlgorithm.Hash*
  exceptions:
  - type: System.Security.Cryptography.CryptographicUnexpectedOperationException
    commentId: T:System.Security.Cryptography.CryptographicUnexpectedOperationException
    description: "<xref href=&quot;System.Security.Cryptography.HashAlgorithm.HashValue&quot;></xref>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Obiekt został już usunięty."
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)
  id: HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: HashCore(Byte[],Int32,Int32)
  nameWithType: HashAlgorithm.HashCore(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.HashAlgorithm.HashCore(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "W przypadku przesłonięcia w klasie pochodnej, danych trasy w algorytmu wyznaczania wartości skrótu dla przetwarzania skrót zapisywane do obiektu."
  remarks: "Ta metoda nie jest wywoływany przez kod aplikacji.       Ta metoda abstrakcyjna wykonuje obliczenia wyznaczania wartości skrótu. Każdego zapisu do obiektu strumienia kryptograficznego przekazuje dane za pomocą tej metody. Dla każdego bloku danych ta metoda aktualizacji stanu obiektu skrótu, toteż zwracana jest wartość skrótu poprawne na koniec strumienia danych."
  syntax:
    content: protected abstract void HashCore (byte[] array, int ibStart, int cbSize);
    parameters:
    - id: array
      type: System.Byte[]
      description: "Oblicz wartość skrótu dla dane wejściowe."
    - id: ibStart
      type: System.Int32
      description: "Przesunięcie do tablicy typu byte, z którego można rozpocząć korzystanie z danych."
    - id: cbSize
      type: System.Int32
      description: "Liczba bajtów w tablicy bajtów do użycia jako dane."
  overload: System.Security.Cryptography.HashAlgorithm.HashCore*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.HashFinal
  id: HashFinal
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: HashFinal()
  nameWithType: HashAlgorithm.HashFinal()
  fullName: System.Security.Cryptography.HashAlgorithm.HashFinal()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "W przypadku przesłonięcia w klasie pochodnej, kończenie znajdujących się w obliczania skrótu po przetworzeniu ostatniego danych przez obiekt strumienia kryptograficznego."
  remarks: "Ta metoda Kończenie znajdujących się w dowolnej częściowe obliczeń i zwraca wartość skrótu poprawne dla strumienia danych."
  syntax:
    content: protected abstract byte[] HashFinal ();
    parameters: []
    return:
      type: System.Byte[]
      description: "Obliczona wartość skrótu."
  overload: System.Security.Cryptography.HashAlgorithm.HashFinal*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.HashSize
  id: HashSize
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: HashSize
  nameWithType: HashAlgorithm.HashSize
  fullName: System.Security.Cryptography.HashAlgorithm.HashSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Pobiera rozmiar w bitach, obliczona wartość skrótu."
  syntax:
    content: public virtual int HashSize { get; }
    return:
      type: System.Int32
      description: "Rozmiar w bitach, obliczona wartość skrótu."
  overload: System.Security.Cryptography.HashAlgorithm.HashSize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.HashSizeValue
  id: HashSizeValue
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: HashSizeValue
  nameWithType: HashAlgorithm.HashSizeValue
  fullName: System.Security.Cryptography.HashAlgorithm.HashSizeValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Reprezentuje rozmiar w bitach, obliczona wartość skrótu."
  remarks: "Algorytm wyznaczania wartości skrótu Określa rozmiar skrótu. Na przykład <xref:System.Security.Cryptography.SHA1>używany rozmiar skrótu 160 bitów.</xref:System.Security.Cryptography.SHA1>       To pole jest dostępny za pośrednictwem <xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A>Właściwości.</xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A>"
  syntax:
    content: protected int HashSizeValue;
    return:
      type: System.Int32
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.HashValue
  id: HashValue
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: HashValue
  nameWithType: HashAlgorithm.HashValue
  fullName: System.Security.Cryptography.HashAlgorithm.HashValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Reprezentuje wartość obliczona wartość skrótu."
  remarks: "To pole jest dostępny za pośrednictwem <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A>Właściwości.</xref:System.Security.Cryptography.HashAlgorithm.Hash%2A>"
  syntax:
    content: protected byte[] HashValue;
    return:
      type: System.Byte[]
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.Initialize
  id: Initialize
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: Initialize()
  nameWithType: HashAlgorithm.Initialize()
  fullName: System.Security.Cryptography.HashAlgorithm.Initialize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inicjuje implementacja <xref href=&quot;System.Security.Cryptography.HashAlgorithm&quot;> </xref> klasy."
  syntax:
    content: public abstract void Initialize ();
    parameters: []
  overload: System.Security.Cryptography.HashAlgorithm.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.InputBlockSize
  id: InputBlockSize
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: InputBlockSize
  nameWithType: HashAlgorithm.InputBlockSize
  fullName: System.Security.Cryptography.HashAlgorithm.InputBlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "W przypadku przesłonięcia w klasie pochodnej pobiera rozmiar bloku wejściowego."
  remarks: "Jeśli nie została zastąpiona, ta właściwość zwraca wartość 1."
  syntax:
    content: public virtual int InputBlockSize { get; }
    return:
      type: System.Int32
      description: "Rozmiar bloku wejściowego."
  overload: System.Security.Cryptography.HashAlgorithm.InputBlockSize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  id: OutputBlockSize
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: OutputBlockSize
  nameWithType: HashAlgorithm.OutputBlockSize
  fullName: System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "W przypadku przesłonięcia w klasie pochodnej pobiera rozmiar bloku danych wyjściowych."
  remarks: "Jeśli nie została zastąpiona, ta właściwość zwraca wartość 1."
  syntax:
    content: public virtual int OutputBlockSize { get; }
    return:
      type: System.Int32
      description: "Rozmiar bloku danych wyjściowych."
  overload: System.Security.Cryptography.HashAlgorithm.OutputBlockSize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.State
  id: State
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: State
  nameWithType: HashAlgorithm.State
  fullName: System.Security.Cryptography.HashAlgorithm.State
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Reprezentuje stan obliczania skrótu."
  remarks: "To pole jest używane, aby uniemożliwić użytkownikom zmianę klucza algorytmu wyznaczania wartości skrótu kluczem podczas operacji wyznaczania wartości skrótu. Podczas zmiany klucza jest poprawny, wartość tego pola jest zero, przed i po zakończeniu operacji wyznaczania wartości skrótu. Podczas zmiany klucza nie jest autentyczna, wartość tego pola jest różna od zera."
  syntax:
    content: protected int State;
    return:
      type: System.Int32
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  id: TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  nameWithType: HashAlgorithm.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  fullName: System.Security.Cryptography.HashAlgorithm.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Oblicza wartość skrótu dla określonego regionu wejściowej tablicy bajtów i kopiuje określonego regionu wejściowej tablicy bajtów do określonego regionu wyjściowej tablicy bajtów."
  remarks: "Należy wywołać przed wywołaniem metody element TransformBlock <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A>metody.</xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> Obie metody należy wywołać przed pobraniem wartości końcowej skrótu.       Można pobrać wartości skrótu końcowego po wywołaniu <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A>metody, Pobierz zawartych w tablicy bajtów <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A>Właściwości.</xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> </xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A>       Wywołanie metody element TransformBlock z różnych danych wejściowych i wyjściowych tablice wyników w <xref:System.IO.IOException>.</xref:System.IO.IOException>"
  example:
  - "The following code examples use the <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> method with the TransformBlock method to hash a string.  \n  \n [!code-vb[Cryptography.HashAlgorithm.TransformFinalBlock#1](~/add/codesnippet/visualbasic/ecff726a-6c03-4fab-88fc-_1.vb)]\n [!code-cs[Cryptography.HashAlgorithm.TransformFinalBlock#1](~/add/codesnippet/csharp/ecff726a-6c03-4fab-88fc-_1.cs)]"
  syntax:
    content: public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: "Oblicz wartość skrótu dla dane wejściowe."
    - id: inputOffset
      type: System.Int32
      description: "Przesunięcie w tablicy bajtów wejściowych, z którego można rozpocząć korzystanie z danych."
    - id: inputCount
      type: System.Int32
      description: "Liczba bajtów w wejściowej tablicy bajtów do użycia jako dane."
    - id: outputBuffer
      type: System.Byte[]
      description: "Kopia część tablicy wejściowej używany do obliczania skrótu."
    - id: outputOffset
      type: System.Int32
      description: "Przesunięcie do tablicy typu byte dane wyjściowe, z którego ma zostać rozpoczęta zapisywania danych."
    return:
      type: System.Int32
      description: "Liczba zapisanych bajtów."
  overload: System.Security.Cryptography.HashAlgorithm.TransformBlock*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>inputCount</code>używa nieprawidłową wartość.       - lub - <code>inputBuffer</code> ma nieprawidłową długość."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>inputBuffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>inputOffset</code>jest poza zakresem. Ten parametr wymaga liczby nieujemnej."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Obiekt został już usunięty."
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  id: TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: TransformFinalBlock(Byte[],Int32,Int32)
  nameWithType: HashAlgorithm.TransformFinalBlock(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Oblicza wartość skrótu dla określonego regionu określonej tablicy bajtów."
  remarks: "Należy wywołać metodę TransformFinalBlock po wywołaniu <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A>metody, ale przed pobraniem wartości skrótu końcowej.</xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A>       Należy pamiętać, że zwracana wartość ta metoda nie jest wartość skrótu, ale tylko kopię skrótem część danych wejściowych.  Końcowa wartość skrótu należy pobrać po wywołaniu metody TransformFinalBlock, Pobierz zawartych w tablicy bajtów <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A>Właściwości.</xref:System.Security.Cryptography.HashAlgorithm.Hash%2A>"
  example:
  - "The following code examples use the TransformFinalBlock method with the <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> method to hash a string.  \n  \n [!code-vb[Cryptography.HashAlgorithm.TransformFinalBlock#1](~/add/codesnippet/visualbasic/e884136c-31d4-425b-a9d5-_1.vb)]\n [!code-cs[Cryptography.HashAlgorithm.TransformFinalBlock#1](~/add/codesnippet/csharp/e884136c-31d4-425b-a9d5-_1.cs)]"
  syntax:
    content: public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: "Oblicz wartość skrótu dla dane wejściowe."
    - id: inputOffset
      type: System.Int32
      description: "Przesunięcie do tablicy typu byte, z którego można rozpocząć korzystanie z danych."
    - id: inputCount
      type: System.Int32
      description: "Liczba bajtów w tablicy bajtów do użycia jako dane."
    return:
      type: System.Byte[]
      description: "Tablica jest kopią część danych wejściowych, który jest wartość skrótu."
  overload: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>inputCount</code>używa nieprawidłową wartość.       - lub - <code>inputBuffer</code> ma nieprawidłowe przesunięcie długości."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>inputBuffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>inputOffset</code>jest poza zakresem. Ten parametr wymaga liczby nieujemnej."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Obiekt został już usunięty."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.Cryptography.CryptographicUnexpectedOperationException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicUnexpectedOperationException
  nameWithType: CryptographicUnexpectedOperationException
  fullName: System.Security.Cryptography.CryptographicUnexpectedOperationException
- uid: System.Security.Cryptography.HashAlgorithm.#ctor
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashAlgorithm()
  nameWithType: HashAlgorithm.HashAlgorithm()
  fullName: System.Security.Cryptography.HashAlgorithm.HashAlgorithm()
- uid: System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: CanReuseTransform
  nameWithType: HashAlgorithm.CanReuseTransform
  fullName: System.Security.Cryptography.HashAlgorithm.CanReuseTransform
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: HashAlgorithm.CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.HashAlgorithm.Clear
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Clear()
  nameWithType: HashAlgorithm.Clear()
  fullName: System.Security.Cryptography.HashAlgorithm.Clear()
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: ComputeHash(Byte[])
  nameWithType: HashAlgorithm.ComputeHash(Byte[])
  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: ComputeHash(Stream)
  nameWithType: HashAlgorithm.ComputeHash(Stream)
  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: ComputeHash(Byte[],Int32,Int32)
  nameWithType: HashAlgorithm.ComputeHash(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(Byte[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.HashAlgorithm.Create
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Create()
  nameWithType: HashAlgorithm.Create()
  fullName: System.Security.Cryptography.HashAlgorithm.Create()
- uid: System.Security.Cryptography.HashAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithm
  nameWithType: HashAlgorithm
  fullName: System.Security.Cryptography.HashAlgorithm
- uid: System.Security.Cryptography.HashAlgorithm.Create(System.String)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Create(String)
  nameWithType: HashAlgorithm.Create(String)
  fullName: System.Security.Cryptography.HashAlgorithm.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.HashAlgorithm.Dispose
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Dispose()
  nameWithType: HashAlgorithm.Dispose()
  fullName: System.Security.Cryptography.HashAlgorithm.Dispose()
- uid: System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HashAlgorithm.Dispose(Boolean)
  fullName: System.Security.Cryptography.HashAlgorithm.Dispose(Boolean)
- uid: System.Security.Cryptography.HashAlgorithm.Hash
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Hash
  nameWithType: HashAlgorithm.Hash
  fullName: System.Security.Cryptography.HashAlgorithm.Hash
- uid: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashCore(Byte[],Int32,Int32)
  nameWithType: HashAlgorithm.HashCore(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.HashAlgorithm.HashCore(Byte[],Int32,Int32)
- uid: System.Security.Cryptography.HashAlgorithm.HashFinal
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashFinal()
  nameWithType: HashAlgorithm.HashFinal()
  fullName: System.Security.Cryptography.HashAlgorithm.HashFinal()
- uid: System.Security.Cryptography.HashAlgorithm.HashSize
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashSize
  nameWithType: HashAlgorithm.HashSize
  fullName: System.Security.Cryptography.HashAlgorithm.HashSize
- uid: System.Security.Cryptography.HashAlgorithm.HashSizeValue
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashSizeValue
  nameWithType: HashAlgorithm.HashSizeValue
  fullName: System.Security.Cryptography.HashAlgorithm.HashSizeValue
- uid: System.Security.Cryptography.HashAlgorithm.HashValue
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashValue
  nameWithType: HashAlgorithm.HashValue
  fullName: System.Security.Cryptography.HashAlgorithm.HashValue
- uid: System.Security.Cryptography.HashAlgorithm.Initialize
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Initialize()
  nameWithType: HashAlgorithm.Initialize()
  fullName: System.Security.Cryptography.HashAlgorithm.Initialize()
- uid: System.Security.Cryptography.HashAlgorithm.InputBlockSize
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: InputBlockSize
  nameWithType: HashAlgorithm.InputBlockSize
  fullName: System.Security.Cryptography.HashAlgorithm.InputBlockSize
- uid: System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: OutputBlockSize
  nameWithType: HashAlgorithm.OutputBlockSize
  fullName: System.Security.Cryptography.HashAlgorithm.OutputBlockSize
- uid: System.Security.Cryptography.HashAlgorithm.State
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: State
  nameWithType: HashAlgorithm.State
  fullName: System.Security.Cryptography.HashAlgorithm.State
- uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  nameWithType: HashAlgorithm.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  fullName: System.Security.Cryptography.HashAlgorithm.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
- uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: TransformFinalBlock(Byte[],Int32,Int32)
  nameWithType: HashAlgorithm.TransformFinalBlock(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(Byte[],Int32,Int32)
- uid: System.Security.Cryptography.HashAlgorithm.#ctor*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashAlgorithm
  nameWithType: HashAlgorithm.HashAlgorithm
- uid: System.Security.Cryptography.HashAlgorithm.CanReuseTransform*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: CanReuseTransform
  nameWithType: HashAlgorithm.CanReuseTransform
- uid: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: HashAlgorithm.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.HashAlgorithm.Clear*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Clear
  nameWithType: HashAlgorithm.Clear
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: ComputeHash
  nameWithType: HashAlgorithm.ComputeHash
- uid: System.Security.Cryptography.HashAlgorithm.Create*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Create
  nameWithType: HashAlgorithm.Create
- uid: System.Security.Cryptography.HashAlgorithm.Dispose*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Dispose
  nameWithType: HashAlgorithm.Dispose
- uid: System.Security.Cryptography.HashAlgorithm.Hash*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Hash
  nameWithType: HashAlgorithm.Hash
- uid: System.Security.Cryptography.HashAlgorithm.HashCore*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashCore
  nameWithType: HashAlgorithm.HashCore
- uid: System.Security.Cryptography.HashAlgorithm.HashFinal*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashFinal
  nameWithType: HashAlgorithm.HashFinal
- uid: System.Security.Cryptography.HashAlgorithm.HashSize*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashSize
  nameWithType: HashAlgorithm.HashSize
- uid: System.Security.Cryptography.HashAlgorithm.Initialize*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Initialize
  nameWithType: HashAlgorithm.Initialize
- uid: System.Security.Cryptography.HashAlgorithm.InputBlockSize*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: InputBlockSize
  nameWithType: HashAlgorithm.InputBlockSize
- uid: System.Security.Cryptography.HashAlgorithm.OutputBlockSize*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: OutputBlockSize
  nameWithType: HashAlgorithm.OutputBlockSize
- uid: System.Security.Cryptography.HashAlgorithm.TransformBlock*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: TransformBlock
  nameWithType: HashAlgorithm.TransformBlock
- uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: TransformFinalBlock
  nameWithType: HashAlgorithm.TransformFinalBlock
