### YamlMime:ManagedReference
items:
- uid: System.Data.Linq.DataContext
  id: DataContext
  children:
  - System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection)
  - System.Data.Linq.DataContext.#ctor(System.String)
  - System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection,System.Data.Linq.Mapping.MappingSource)
  - System.Data.Linq.DataContext.#ctor(System.String,System.Data.Linq.Mapping.MappingSource)
  - System.Data.Linq.DataContext.ChangeConflicts
  - System.Data.Linq.DataContext.CommandTimeout
  - System.Data.Linq.DataContext.Connection
  - System.Data.Linq.DataContext.CreateDatabase
  - System.Data.Linq.DataContext.CreateMethodCallQuery``1(System.Object,System.Reflection.MethodInfo,System.Object[])
  - System.Data.Linq.DataContext.DatabaseExists
  - System.Data.Linq.DataContext.DeferredLoadingEnabled
  - System.Data.Linq.DataContext.DeleteDatabase
  - System.Data.Linq.DataContext.Dispose
  - System.Data.Linq.DataContext.Dispose(System.Boolean)
  - System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])
  - System.Data.Linq.DataContext.ExecuteDynamicDelete(System.Object)
  - System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)
  - System.Data.Linq.DataContext.ExecuteDynamicUpdate(System.Object)
  - System.Data.Linq.DataContext.ExecuteMethodCall(System.Object,System.Reflection.MethodInfo,System.Object[])
  - System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])
  - System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])
  - System.Data.Linq.DataContext.GetChangeSet
  - System.Data.Linq.DataContext.GetCommand(System.Linq.IQueryable)
  - System.Data.Linq.DataContext.GetTable(System.Type)
  - System.Data.Linq.DataContext.GetTable``1
  - System.Data.Linq.DataContext.LoadOptions
  - System.Data.Linq.DataContext.Log
  - System.Data.Linq.DataContext.Mapping
  - System.Data.Linq.DataContext.ObjectTrackingEnabled
  - System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Collections.IEnumerable)
  - System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object)
  - System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object[])
  - System.Data.Linq.DataContext.SubmitChanges
  - System.Data.Linq.DataContext.SubmitChanges(System.Data.Linq.ConflictMode)
  - System.Data.Linq.DataContext.Transaction
  - System.Data.Linq.DataContext.Translate(System.Data.Common.DbDataReader)
  - System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)
  - System.Data.Linq.DataContext.Translate``1(System.Data.Common.DbDataReader)
  langs:
  - csharp
  name: DataContext
  nameWithType: DataContext
  fullName: System.Data.Linq.DataContext
  type: Class
  summary: "Reprezentuje główny punkt wejścia dla [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] framework."
  remarks: "Element DataContext jest źródłem wszystkich jednostek mapowane za pośrednictwem połączenia z bazą danych. Śledzi zmiany wprowadzone do wszystkich jednostek pobrane i obsługuje &quot;tożsamości pamięć podręczną&quot;, który gwarantuje, że jednostek pobrać więcej niż jeden raz są reprezentowane przez przy użyciu tego samego wystąpienia obiektu.       Ogólnie rzecz biorąc wystąpienie elementu DataContext zaprojektowano do ostatniego dla jednej &quot;jednostka pracy&quot;, jednak aplikacja definiuje czas. DataContext jest lekki, a nie kosztowne. Typowe [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] aplikacja tworzy DataContext wystąpień w zakresie metody lub jako członek tej klasy, które reprezentują logiczne zestaw operacji w bazie danych."
  syntax:
    content: 'public class DataContext : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection)
  id: '#ctor(System.Data.IDbConnection)'
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: DataContext(IDbConnection)
  nameWithType: DataContext.DataContext(IDbConnection)
  fullName: System.Data.Linq.DataContext.DataContext(IDbConnection)
  type: Constructor
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref> klasy odwołując połączenie używane przez [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]."
  remarks: "A <xref:System.Data.Linq.DataContext>Otwiera i zamyka połączenie z bazą danych, zgodnie z potrzebami, jeśli zostaną podane połączenie zamknięte lub parametry połączenia.</xref:System.Data.Linq.DataContext> Ogólnie rzecz biorąc, nie trzeba wywołać `Dispose` na <xref:System.Data.Linq.DataContext>.</xref:System.Data.Linq.DataContext> Jeśli podasz otwartego połączenia, <xref:System.Data.Linq.DataContext>nie zostanie zamknięte go.</xref:System.Data.Linq.DataContext> W związku z tym tworzy wystąpienia <xref:System.Data.Linq.DataContext>z otwartego połączenia, chyba że masz powód, dla to zrobić.</xref:System.Data.Linq.DataContext> W <xref:System.Transactions>transakcji, <xref:System.Data.Linq.DataContext>nie spowoduje otwarcie lub zamknięcie połączenia, aby uniknąć podwyższania poziomu.</xref:System.Data.Linq.DataContext> </xref:System.Transactions>"
  syntax:
    content: public DataContext (System.Data.IDbConnection connection);
    parameters:
    - id: connection
      type: System.Data.IDbConnection
      description: "Połączenie używane przez [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]."
  overload: System.Data.Linq.DataContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: DataContext(String)
  nameWithType: DataContext.DataContext(String)
  fullName: System.Data.Linq.DataContext.DataContext(String)
  type: Constructor
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref> klasy za pomocą odwołań do źródłowego pliku."
  syntax:
    content: public DataContext (string fileOrServerOrConnection);
    parameters:
    - id: fileOrServerOrConnection
      type: System.String
      description: "Ten argument może być jednym z następujących czynności: Nazwa pliku, w którym znajduje się baza danych programu SQL Server Express.       Nazwa serwera, na którym baza danych jest obecny. W takim przypadku dostawca używa domyślnej bazy danych dla użytkownika.       Ciąg połączenia ukończone. [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)]po prostu przekazuje ciąg do dostawcy bez żadnych modyfikacji."
  overload: System.Data.Linq.DataContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection,System.Data.Linq.Mapping.MappingSource)
  id: '#ctor(System.Data.IDbConnection,System.Data.Linq.Mapping.MappingSource)'
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: DataContext(IDbConnection,MappingSource)
  nameWithType: DataContext.DataContext(IDbConnection,MappingSource)
  fullName: System.Data.Linq.DataContext.DataContext(IDbConnection,MappingSource)
  type: Constructor
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref> klasy za pomocą odwołań do połączenia ze źródłem danych mapowania."
  syntax:
    content: public DataContext (System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mapping);
    parameters:
    - id: connection
      type: System.Data.IDbConnection
      description: "Połączenie używane przez program .NET Framework."
    - id: mapping
      type: System.Data.Linq.Mapping.MappingSource
      description: "Źródło mapowania."
  overload: System.Data.Linq.DataContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.#ctor(System.String,System.Data.Linq.Mapping.MappingSource)
  id: '#ctor(System.String,System.Data.Linq.Mapping.MappingSource)'
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: DataContext(String,MappingSource)
  nameWithType: DataContext.DataContext(String,MappingSource)
  fullName: System.Data.Linq.DataContext.DataContext(String,MappingSource)
  type: Constructor
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref> klasy za pomocą odwołań do źródła plików oraz źródła mapowania."
  syntax:
    content: public DataContext (string fileOrServerOrConnection, System.Data.Linq.Mapping.MappingSource mapping);
    parameters:
    - id: fileOrServerOrConnection
      type: System.String
      description: "Ten argument może być jednym z następujących czynności: Nazwa pliku, w którym znajduje się baza danych programu SQL Server Express.       Nazwa serwera, na którym baza danych jest obecny. W takim przypadku dostawca używa domyślnej bazy danych dla użytkownika.       Ciąg połączenia ukończone. [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)]po prostu przekazuje ciąg do dostawcy bez żadnych modyfikacji."
    - id: mapping
      type: System.Data.Linq.Mapping.MappingSource
      description: "Źródło mapowania."
  overload: System.Data.Linq.DataContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.ChangeConflicts
  id: ChangeConflicts
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: ChangeConflicts
  nameWithType: DataContext.ChangeConflicts
  fullName: System.Data.Linq.DataContext.ChangeConflicts
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Pobiera kolekcję obiektów, które spowodowały konfliktom współbieżności podczas <xref:System.Data.Linq.DataContext.SubmitChanges*>została wywołana.</xref:System.Data.Linq.DataContext.SubmitChanges*>"
  remarks: "W poniższym przykładzie pokazano, jak można powtórzyć kolekcji za pośrednictwem można pobrać informacji o konflikt."
  example:
  - >-
    [!code-cs[System.Data.Linq.ObjectChangeConflict#1](~/add/codesnippet/csharp/objconflict/program.cs#1)]
     [!code-vb[System.Data.Linq.ObjectChangeConflict#1](~/add/codesnippet/visualbasic/objconflict/module1.vb#1)]
  syntax:
    content: public System.Data.Linq.ChangeConflictCollection ChangeConflicts { get; }
    return:
      type: System.Data.Linq.ChangeConflictCollection
      description: "Kolekcja obiektów, które spowodowały konfliktom współbieżności."
  overload: System.Data.Linq.DataContext.ChangeConflicts*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.CommandTimeout
  id: CommandTimeout
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: CommandTimeout
  nameWithType: DataContext.CommandTimeout
  fullName: System.Data.Linq.DataContext.CommandTimeout
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Pobiera lub ustawia wartość, która zwiększa wartość limitu czasu dla zapytań, które mogłyby w przeciwnym razie upłynął limit czasu podczas domyślny limit czasu."
  remarks: "Ta właściwość pobiera lub ustawia limit czasu polecenia używane do wykonywania poleceń wygenerowanego (`IDbCommands`). Aby uzyskać więcej informacji zobacz <xref:System.Data.IDbCommand.CommandTimeout%2A>.</xref:System.Data.IDbCommand.CommandTimeout%2A>       Gdy ta właściwość nie jest ustawiona, wartość domyślna <xref:System.Data.IDbCommand.CommandTimeout%2A>służy do wykonywania polecenia zapytania.</xref:System.Data.IDbCommand.CommandTimeout%2A> Ta wartość domyślna jest ustawiana przez dostawcę magazynu. Należy pamiętać, że niektóre dostawców może zgłaszają wyjątki, jeśli ta wartość jest ustawiona na wartość inną niż zero."
  syntax:
    content: public int CommandTimeout { get; set; }
    return:
      type: System.Int32
      description: "Wartość całkowitą, która zwiększa wartość limitu czasu dla zapytań, które mogłyby w przeciwnym razie upłynął limit czasu podczas domyślny limit czasu."
  overload: System.Data.Linq.DataContext.CommandTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Connection
  id: Connection
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Connection
  nameWithType: DataContext.Connection
  fullName: System.Data.Linq.DataContext.Connection
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Pobiera połączenie używane przez platformę."
  remarks: "Ta właściwość umożliwia współdziałanie z kodem ADO.NET relacyjne.       Zwrócony połączenie zostanie zamknięte, jeśli nie został jawnie otwarty przez użytkownika."
  syntax:
    content: public System.Data.Common.DbConnection Connection { get; }
    return:
      type: System.Data.Common.DbConnection
      description: "Połączenie używane przez platformę."
  overload: System.Data.Linq.DataContext.Connection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.CreateDatabase
  id: CreateDatabase
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: CreateDatabase()
  nameWithType: DataContext.CreateDatabase()
  fullName: System.Data.Linq.DataContext.CreateDatabase()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Tworzy bazę danych na serwerze."
  remarks: "Nazwa bazy danych jest uzyskiwany przy użyciu następującego algorytmu:-Jeśli bazy danych zostanie zidentyfikowana w parametrach połączenia, jego nazwa jest używana.      -Jeśli <xref:System.Data.Linq.Mapping.DatabaseAttribute>jest obecny, atrybut jego <xref:System.Data.Linq.Mapping.DatabaseAttribute.Name%2A>właściwość jest używana jako nazwa bazy danych.</xref:System.Data.Linq.Mapping.DatabaseAttribute.Name%2A> </xref:System.Data.Linq.Mapping.DatabaseAttribute>      — Jeśli tag bazy danych w parametrach połączenia i silnie typizowaną nie istnieje <xref:System.Data.Linq.DataContext>jest używana, bazy danych, który ma taką samą nazwę jak <xref:System.Data.Linq.DataContext>zaznaczono opcję dziedziczenia klasy.</xref:System.Data.Linq.DataContext> </xref:System.Data.Linq.DataContext>      — Jeśli słabą <xref:System.Data.Linq.DataContext>jest używana, jest zgłaszany wyjątek.</xref:System.Data.Linq.DataContext>      -Jeśli <xref:System.Data.Linq.DataContext>został utworzony przy użyciu nazwy pliku, zostanie utworzona baza danych, odpowiadającego tej nazwy pliku.</xref:System.Data.Linq.DataContext>"
  example:
  - "The following code shows how to set up a temporary database and then remove it.  \n  \n [!code-vb[System.Data.Linq.DataContext#1](~/add/codesnippet/visualbasic/DataContext/Module1.vb#1)]\n [!code-cs[System.Data.Linq.DataContext#1](~/add/codesnippet/csharp/DataContext/Program.cs#1)]"
  syntax:
    content: public void CreateDatabase ();
    parameters: []
  overload: System.Data.Linq.DataContext.CreateDatabase*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.CreateMethodCallQuery``1(System.Object,System.Reflection.MethodInfo,System.Object[])
  id: CreateMethodCallQuery``1(System.Object,System.Reflection.MethodInfo,System.Object[])
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: CreateMethodCallQuery(Object,MethodInfo,Object[])
  nameWithType: DataContext.CreateMethodCallQuery(Object,MethodInfo,Object[])
  fullName: System.Data.Linq.DataContext.CreateMethodCallQuery(Object,MethodInfo,Object[])
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  syntax:
    content: protected System.Linq.IQueryable<TResult> CreateMethodCallQuery<TResult> (object instance, System.Reflection.MethodInfo methodInfo, object[] parameters);
    parameters:
    - id: instance
      type: System.Object
      description: "Do dodania."
    - id: methodInfo
      type: System.Reflection.MethodInfo
      description: "Do dodania."
    - id: parameters
      type: System.Object[]
      description: "Do dodania."
    return:
      type: System.Linq.IQueryable{TResult}
      description: "Do dodania."
  overload: System.Data.Linq.DataContext.CreateMethodCallQuery<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.DatabaseExists
  id: DatabaseExists
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: DatabaseExists()
  nameWithType: DataContext.DatabaseExists()
  fullName: System.Data.Linq.DataContext.DatabaseExists()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Określa, czy można otworzyć skojarzonej bazy danych."
  remarks: "Ta metoda korzysta z połączenia w <xref:System.Data.Linq.DataContext.Connection%2A>właściwość, aby podjąć próbę otwarcia skojarzonej bazie danych.</xref:System.Data.Linq.DataContext.Connection%2A>"
  example:
  - "The following example uses this method to determine whether a database already exists.  \n  \n [!code-vb[System.Data.Linq.DataContext#1](~/add/codesnippet/visualbasic/DataContext/Module1.vb#1)]\n [!code-cs[System.Data.Linq.DataContext#1](~/add/codesnippet/csharp/DataContext/Program.cs#1)]"
  syntax:
    content: public bool DatabaseExists ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli określona baza danych może zostać otwarta. w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.Linq.DataContext.DatabaseExists*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.DeferredLoadingEnabled
  id: DeferredLoadingEnabled
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: DeferredLoadingEnabled
  nameWithType: DataContext.DeferredLoadingEnabled
  fullName: System.Data.Linq.DataContext.DeferredLoadingEnabled
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Pobiera lub ustawia wartość wskazującą, czy relacje jeden do wielu lub jeden do jednego załadować z opóźnieniem."
  remarks: "Gdy uzyskuje dostęp do jednej z tych relacji null przez innych kod jest zwracany, gdy relacja jest jeden do jednego, a pustą kolekcję, gdy jest jeden do wielu. Relacje nadal można podać, ustawiając <xref:System.Data.Linq.DataContext.LoadOptions%2A>Właściwości.</xref:System.Data.Linq.DataContext.LoadOptions%2A>       Scenariusz głównego dla tej właściwości jest umożliwienie wyodrębnić fragment modelu obiektów i wysłać go (na przykład, aby usługi sieci Web).      > [!NOTE] > Jeśli ta właściwość jest ustawiona na `false` po wykonaniu zapytania, jest zgłaszany wyjątek. Zobacz **prawidłowe tryby** sekcji poniżej, aby uzyskać więcej informacji.      ## Ładowanie opóźnieniem prawidłowe tryby wymaga śledzenie obiektów. Tylko następujące trzy tryby są prawidłowe:- <xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A>= `false`.</xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A> DeferredLoadingEnabled jest ignorowany i wywnioskować jako `false`. To zachowanie odnosi się tylko do odczytu <xref:System.Data.Linq.DataContext>.</xref:System.Data.Linq.DataContext>      -   <xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A> = `true`.</xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A> DeferredLoadingEnabled = `false`. Ta sytuacja odpowiada <xref:System.Data.Linq.DataContext>umożliwia użytkownikom załadować wykresu obiektów przy użyciu <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>dyrektywy, ale nie umożliwia ładowanie odłożone.</xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> </xref:System.Data.Linq.DataContext>      -Są ustawione na `true`. Jest to wartość domyślna.       Nie można zmienić flagi, po wykonaniu zapytania. Każda zmiana po wykonaniu pierwszego zapytania, który używa, który <xref:System.Data.Linq.DataContext>zgłasza wyjątek.</xref:System.Data.Linq.DataContext>"
  syntax:
    content: public bool DeferredLoadingEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli włączono ładowanie odłożone; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.Linq.DataContext.DeferredLoadingEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.DeleteDatabase
  id: DeleteDatabase
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: DeleteDatabase()
  nameWithType: DataContext.DeleteDatabase()
  fullName: System.Data.Linq.DataContext.DeleteDatabase()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Usuwa skojarzonej bazie danych."
  remarks: "Ta metoda korzysta z połączenia w <xref:System.Data.Linq.DataContext.Connection%2A>Właściwości, aby zidentyfikować bazy danych do usunięcia.</xref:System.Data.Linq.DataContext.Connection%2A>"
  example:
  - "The following example shows how to delete a database that has been temporarily created.  \n  \n [!code-vb[System.Data.Linq.DataContext#1](~/add/codesnippet/visualbasic/DataContext/Module1.vb#1)]\n [!code-cs[System.Data.Linq.DataContext#1](~/add/codesnippet/csharp/DataContext/Program.cs#1)]"
  syntax:
    content: public void DeleteDatabase ();
    parameters: []
  overload: System.Data.Linq.DataContext.DeleteDatabase*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Dispose
  id: Dispose
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Dispose()
  nameWithType: DataContext.Dispose()
  fullName: System.Data.Linq.DataContext.Dispose()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Zwalnia wszelkie zasoby używane przez bieżące wystąpienie klasy <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref> klasy."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Data.Linq.DataContext.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DataContext.Dispose(Boolean)
  fullName: System.Data.Linq.DataContext.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Zwalnia zasoby niezarządzane używane przez <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref> i opcjonalnie zwalnia zasobów zarządzanych."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby zwolnić zasoby zarządzane i niezarządzane; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> aby zwolnić tylko zasoby niezarządzane."
  overload: System.Data.Linq.DataContext.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])
  id: ExecuteCommand(System.String,System.Object[])
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: ExecuteCommand(String,Object[])
  nameWithType: DataContext.ExecuteCommand(String,Object[])
  fullName: System.Data.Linq.DataContext.ExecuteCommand(String,Object[])
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Wykonuje polecenia SQL bezpośrednio w bazie danych."
  remarks: "This method is a pass-through mechanism for cases where [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] does not adequately provide for a particular scenario.  \n  \n The syntax for the command is almost the same as the syntax used to create an ADO.NET `DataCommand`. The only difference is in how the parameters are specified. Specifically, you specify parameters by enclosing them in braces ({…}) and enumerate them starting from 0. The parameter is associated with the equally numbered object in the parameters array.  \n  \n `ExecuteQuery` and `ExecuteCommand` allow you to specify a variable number of arguments for parameter substitution. For example, you can specify the parameters when invoking ExecuteQuery\\<TResult>:  \n  \n```  \ndb.ExecuteQuery<Customer>(\"select * from dbo.Customers where City = {0}\", \"London\");  \n```  \n  \n And, another example:  \n  \n```  \ndb.ExecuteCommand(\"UPDATE Products SET QuantityPerUnit = {0} WHERE ProductID = {1}\", \"24 boxes\", 5);  \n```  \n  \n The following example opens a connection and passes a SQL `UPDATE` command to the SQL engine."
  example:
  - >-
    [!code-cs[DLinqCommunicatingWithDatabase#3](~/add/codesnippet/csharp/CommWithDatabase/Program.cs#3)]
     [!code-vb[DLinqCommunicatingWithDatabase#3](~/add/codesnippet/visualbasic/CommWithDatabase/Module1.vb#3)]
  syntax:
    content: public int ExecuteCommand (string command, object[] parameters);
    parameters:
    - id: command
      type: System.String
      description: "Polecenie SQL do wykonania."
    - id: parameters
      type: System.Object[]
      description: "Tablica parametrów do przekazania do polecenia. Należy pamiętać o następujących zasadach: liczba obiektów w tablicy jest mniejsza niż największa liczba określone w parametrach polecenia, jest zgłaszany wyjątek.       Jeśli tablica zawiera obiekty, które nie są wywoływane w parametrach polecenia, nie wyjątku.       Jeśli jeden z parametrów ma wartość null, jest konwertowana na <xref uid=&quot;langword_csharp_DBNull.Value&quot; name=&quot;DBNull.Value&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "Liczba wierszy zmodyfikowane przez wykonanego polecenia."
  overload: System.Data.Linq.DataContext.ExecuteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.ExecuteDynamicDelete(System.Object)
  id: ExecuteDynamicDelete(System.Object)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: ExecuteDynamicDelete(Object)
  nameWithType: DataContext.ExecuteDynamicDelete(Object)
  fullName: System.Data.Linq.DataContext.ExecuteDynamicDelete(Object)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Wykonuje wewnątrz delete metody zastąpienie, redelegate do [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] zadanie generowania i wykonywania dynamicznego kodu SQL dla operacji usunięcia."
  remarks: "Zobacz <xref:System.Data.Linq.DataContext.ExecuteDynamicInsert%2A>.</xref:System.Data.Linq.DataContext.ExecuteDynamicInsert%2A>"
  syntax:
    content: protected void ExecuteDynamicDelete (object entity);
    parameters:
    - id: entity
      type: System.Object
      description: "Jednostka do usunięcia."
  overload: System.Data.Linq.DataContext.ExecuteDynamicDelete*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)
  id: ExecuteDynamicInsert(System.Object)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: ExecuteDynamicInsert(Object)
  nameWithType: DataContext.ExecuteDynamicInsert(Object)
  fullName: System.Data.Linq.DataContext.ExecuteDynamicInsert(Object)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Wykonuje wewnątrz insert metody zastąpienie, redelegate do [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] zadanie generowania i wykonywania dynamicznego kodu SQL dla operacji wstawienia."
  remarks: "Należy zwrócić uwagę następujące uwagi:-metoda ma modyfikator chronionego, jego użycie wymaga tworzenie podklas <xref:System.Data.Linq.DataContext>.</xref:System.Data.Linq.DataContext>      — Wyjątek jest zgłaszany, gdy ta operacja nie została wywołana wewnątrz <xref:System.Data.Linq.DataContext.SubmitChanges%2A>operacji.</xref:System.Data.Linq.DataContext.SubmitChanges%2A> Nie jest przeznaczona do wywoływania jako autonomiczny operacji poza zakresem <xref:System.Data.Linq.DataContext.SubmitChanges%2A>operacji.</xref:System.Data.Linq.DataContext.SubmitChanges%2A> <xref:System.Data.Linq.DataContext.SubmitChanges%2A>sam wywołania Przesłaniaj metody wcześniejszych metod jest przeznaczona do wywoływania wewnątrz metody zastąpienie, jeśli są one wykonywane.</xref:System.Data.Linq.DataContext.SubmitChanges%2A>      -Spoczywa dewelopera umożliwia przekazywanie prawidłowe jednostki. Implementacja sprawdza śledzenia jednostki przekazany w. Jednak jest obowiązkiem deweloperowi zachować kolejność lub Przekaż tego samego obiektu dwa razy.      -Spoczywa dewelopera do wywołania poprawne dynamicznego interfejsu API. Na przykład w `Update` zastąpić metodę tylko <xref:System.Data.Linq.DataContext.ExecuteDynamicUpdate%2A>można wywołać metody.</xref:System.Data.Linq.DataContext.ExecuteDynamicUpdate%2A> [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)]nie wykrywa ani nie Sprawdź, czy wywoływanej metody dynamicznej zgodna odpowiednich operacji. Wyniki są niezdefiniowane, gdy została wywołana metoda nie ma zastosowania (na przykład wywołanie elementu <xref:System.Data.Linq.DataContext.ExecuteDynamicDelete%2A>dla obiekt zaktualizowania).</xref:System.Data.Linq.DataContext.ExecuteDynamicDelete%2A>"
  syntax:
    content: protected void ExecuteDynamicInsert (object entity);
    parameters:
    - id: entity
      type: System.Object
      description: "Jednostka do wstawienia."
  overload: System.Data.Linq.DataContext.ExecuteDynamicInsert*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.ExecuteDynamicUpdate(System.Object)
  id: ExecuteDynamicUpdate(System.Object)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: ExecuteDynamicUpdate(Object)
  nameWithType: DataContext.ExecuteDynamicUpdate(Object)
  fullName: System.Data.Linq.DataContext.ExecuteDynamicUpdate(Object)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Wykonuje wewnątrz metody zastąpienie aktualizacji, aby redelegate do [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] zadanie generowania i wykonywania dynamicznego kodu SQL dla operacji update."
  remarks: "Zobacz <xref:System.Data.Linq.DataContext.ExecuteDynamicInsert%2A>.</xref:System.Data.Linq.DataContext.ExecuteDynamicInsert%2A>"
  syntax:
    content: protected void ExecuteDynamicUpdate (object entity);
    parameters:
    - id: entity
      type: System.Object
      description: "Jednostka do zaktualizowania."
  overload: System.Data.Linq.DataContext.ExecuteDynamicUpdate*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.ExecuteMethodCall(System.Object,System.Reflection.MethodInfo,System.Object[])
  id: ExecuteMethodCall(System.Object,System.Reflection.MethodInfo,System.Object[])
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: ExecuteMethodCall(Object,MethodInfo,Object[])
  nameWithType: DataContext.ExecuteMethodCall(Object,MethodInfo,Object[])
  fullName: System.Data.Linq.DataContext.ExecuteMethodCall(Object,MethodInfo,Object[])
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Wykonuje procedurę składowaną bazy danych lub funkcja skalarna skojarzone z określonej metody CLR."
  remarks: "Metoda ExecuteMethodCall jest używana w kodzie automatycznie generowanych i działa jako serwer proxy do funkcji bazy danych."
  syntax:
    content: protected System.Data.Linq.IExecuteResult ExecuteMethodCall (object instance, System.Reflection.MethodInfo methodInfo, object[] parameters);
    parameters:
    - id: instance
      type: System.Object
      description: "Wystąpienie wywołania metody (bieżącego obiektu)."
    - id: methodInfo
      type: System.Reflection.MethodInfo
      description: "Określa metodę CLR, która odpowiada metoda bazy danych."
    - id: parameters
      type: System.Object[]
      description: "Tablica parametrów do przekazania do polecenia."
    return:
      type: System.Data.Linq.IExecuteResult
      description: "Wynik (zwracanej wartości i parametry wyjściowe) wykonania określonej metody."
  overload: System.Data.Linq.DataContext.ExecuteMethodCall*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])
  id: ExecuteQuery(System.Type,System.String,System.Object[])
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: ExecuteQuery(Type,String,Object[])
  nameWithType: DataContext.ExecuteQuery(Type,String,Object[])
  fullName: System.Data.Linq.DataContext.ExecuteQuery(Type,String,Object[])
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Wykonuje zapytania SQL bezpośrednio w bazie danych."
  syntax:
    content: public System.Collections.IEnumerable ExecuteQuery (Type elementType, string query, object[] parameters);
    parameters:
    - id: elementType
      type: System.Type
      description: "Typ &lt;xref:System.Collections.Generic.IEnumerable%601&gt; ma zostać zwrócona.       Algorytm dopasowania kolumny w wyniku zapytania do pola lub właściwości w obiekcie działa w następujący sposób: Jeśli pole lub właściwość jest zamapowana na nazwę konkretnej kolumny, Oczekiwano nazwy tej kolumny w zestawie wyników.       Jeśli pole lub właściwość nie jest zamapowany, kolumnę z taką samą nazwę jak pole lub właściwość jest oczekiwany w zestawie wyników.       Porównanie jest wykonywane przez wyszukiwanie z uwzględnieniem wielkości liter dopasowanie najpierw. Jeśli nie ma tego dopasowania, kolejne wyszukiwania występuje pod kątem dopasowania bez uwzględniania wielkości liter.       Zapytanie musi zwracać wszystkie śledzone pola i właściwości obiektu (z wyjątkiem tych, które są ładowane na podstawie odroczonego) gdy są spełnione wszystkie następujące warunki: `T` jest jednostką jawnie śledzony przez <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref>.       <xref:System.Data.Linq.DataContext.ObjectTrackingEnabled*>is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>.</xref:System.Data.Linq.DataContext.ObjectTrackingEnabled*>       Jednostka ma klucz podstawowy.       W przeciwnym razie jest zwracany wyjątek."
    - id: query
      type: System.String
      description: "Zapytanie SQL do wykonania."
    - id: parameters
      type: System.Object[]
      description: "Tablica parametrów do przekazania do polecenia. Należy pamiętać o następujących zasadach: liczba obiektów w tablicy jest mniejsza niż największa liczba określone w parametrach polecenia, jest zgłaszany wyjątek.       Jeśli tablica zawiera obiekty, które nie są wywoływane w parametrach polecenia, nie wyjątku.       Jeśli parametr jest <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, jest konwertowana na <xref uid=&quot;langword_csharp_DBNull.Value&quot; name=&quot;DBNull.Value&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Collections.IEnumerable
      description: "&lt;Xref:System.Collections.Generic.IEnumerable%601&gt; kolekcji obiektów zwróconych przez kwerendę."
  overload: System.Data.Linq.DataContext.ExecuteQuery*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])
  id: ExecuteQuery``1(System.String,System.Object[])
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: ExecuteQuery(String,Object[])
  nameWithType: DataContext.ExecuteQuery(String,Object[])
  fullName: System.Data.Linq.DataContext.ExecuteQuery(String,Object[])
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  syntax:
    content: public System.Collections.Generic.IEnumerable<TResult> ExecuteQuery<TResult> (string query, object[] parameters);
    parameters:
    - id: query
      type: System.String
      description: "Do dodania."
    - id: parameters
      type: System.Object[]
      description: "Do dodania."
    return:
      type: System.Collections.Generic.IEnumerable{TResult}
      description: "Do dodania."
  overload: System.Data.Linq.DataContext.ExecuteQuery<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.GetChangeSet
  id: GetChangeSet
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: GetChangeSet()
  nameWithType: DataContext.GetChangeSet()
  fullName: System.Data.Linq.DataContext.GetChangeSet()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Pobiera obiekty zmodyfikowane śledzone przez <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref>."
  remarks: "Należy zwrócić uwagę następujące uwagi:-metoda GetChangeSet może mieć skutki uboczne, takich jak wnioskowania INSERT i usuwania działań, które zwykle są wykonywane w czasie <xref:System.Data.Linq.DataContext.SubmitChanges%2A>.</xref:System.Data.Linq.DataContext.SubmitChanges%2A> Na przykład obiekty, które są używane w następujące operacje można tworzyć odpowiednich operacji wykrywany na poniższej liście:- <xref:System.Data.Linq.EntitySet%601.Add%2A>Aby <xref:System.Data.Linq.Table%601.InsertOnSubmit%2A>.</xref:System.Data.Linq.Table%601.InsertOnSubmit%2A> </xref:System.Data.Linq.EntitySet%601.Add%2A>          - <xref:System.Data.Linq.EntityRef%601>Przypisanie wartości null (prawdopodobnie z powodu <xref:System.Data.Linq.EntitySet%601.Remove%2A>do <xref:System.Data.Linq.Table%601.DeleteOnSubmit%2A>.</xref:System.Data.Linq.Table%601.DeleteOnSubmit%2A> </xref:System.Data.Linq.EntitySet%601.Remove%2A> </xref:System.Data.Linq.EntityRef%601>      -Zestaw nie może zostać określona zgodnie z ograniczeń klucza obcego.      -Bazy danych generowane wartości (na przykład podstawowe i obce wartości klucza, sygnatury czasowe i tak dalej) nie są dostępne. Takie informacje wymaga wykonania polecenia bazy danych i prawdopodobnie propagacji pobrane informacje (na przykład klucz obcy z klucza podstawowego).      -Zestaw zmienionych obiektów jest obliczana w momencie wywołania. Kolejne wywołania <xref:System.Data.Linq.DataContext.SubmitChanges%2A>może utworzyć inny zestaw w przypadku wprowadzenia dodatkowych zmian.</xref:System.Data.Linq.DataContext.SubmitChanges%2A>       Dane wyjściowe, gdy żadne zmiany nie zostały wprowadzone wygląda następująco:`{Added: 0, Removed: 0, Modified: 0}`"
  example:
  - >-
    [!code-vb[DLinqDebuggingSupport#2](~/add/codesnippet/visualbasic/debuggingsupport/Module1.vb#2)]
     [!code-cs[DLinqDebuggingSupport#2](~/add/codesnippet/csharp/debuggingsupport/Program.cs#2)]
  syntax:
    content: public System.Data.Linq.ChangeSet GetChangeSet ();
    parameters: []
    return:
      type: System.Data.Linq.ChangeSet
      description: "Zestaw obiektów jest zwracana jako trzy kolekcji tylko do odczytu."
  overload: System.Data.Linq.DataContext.GetChangeSet*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.GetCommand(System.Linq.IQueryable)
  id: GetCommand(System.Linq.IQueryable)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: GetCommand(IQueryable)
  nameWithType: DataContext.GetCommand(IQueryable)
  fullName: System.Data.Linq.DataContext.GetCommand(IQueryable)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Pobiera informacje o poleceniach SQL generowane przez [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)]."
  remarks: "Ta metoda jest tylko metody pobierającej i nie ma wpływu na <xref:System.Data.Linq.DataContext>Stan.</xref:System.Data.Linq.DataContext>       Należy zwrócić uwagę następujące uwagi:-argument musi być inne niż null. W przeciwnym razie jest zgłaszany wyjątek argumentu o wartości null.      — Wyjątki tłumaczenia normalne zapytania zgłoszony podczas [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] zastosować wykonywanie zapytania dla zapytania, którego nie można przetłumaczyć.      -Zwracany jest tylko pierwsze polecenie zapytania. W szczególności dodatkowych poleceń, które są używane do ładowania wczesny (<xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>) nie są uwzględniane.</xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>      - <xref:System.Data.Linq.DataContext>nie śledzi użytkownik wykona przy użyciu polecenia.</xref:System.Data.Linq.DataContext> Na przykład wyniki z wykonanie polecenia zwracane nie są śledzone i nie wpływają na <xref:System.Data.Linq.DataContext>Stan.</xref:System.Data.Linq.DataContext>"
  example:
  - >-
    [!code-vb[DLinqDebuggingSupport#3](~/add/codesnippet/visualbasic/debuggingsupport/Module1.vb#3)]
     [!code-cs[DLinqDebuggingSupport#3](~/add/codesnippet/csharp/debuggingsupport/Program.cs#3)]
  syntax:
    content: public System.Data.Common.DbCommand GetCommand (System.Linq.IQueryable query);
    parameters:
    - id: query
      type: System.Linq.IQueryable
      description: "Zapytanie, którego informacje polecenia SQL ma być pobrana."
    return:
      type: System.Data.Common.DbCommand
      description: "Żądane polecenie Obiekt informacji."
  overload: System.Data.Linq.DataContext.GetCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.GetTable(System.Type)
  id: GetTable(System.Type)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: GetTable(Type)
  nameWithType: DataContext.GetTable(Type)
  fullName: System.Data.Linq.DataContext.GetTable(Type)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Zwraca kolekcję obiektów określonego typu, których typ jest zdefiniowany przez <code> type </code> parametru."
  remarks: "Jest to wersja lekko typizowany <xref:System.Data.Linq.DataContext.GetTable%2A>.</xref:System.Data.Linq.DataContext.GetTable%2A> Należy mieć lekko typizowaną wersję, ponieważ jest stosunkowo popularną praktyką dynamicznie tworzyć zapytania. Jest niedogodne wymusić stosowanie na potrzeby wywołania poprawna metoda ogólna odbicia.       Jeśli nie ma żadnych kolekcji dla określonego typu, jest zwracany wyjątek."
  syntax:
    content: public System.Data.Linq.ITable GetTable (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "Typ obiektów, które ma zostać zwrócona."
    return:
      type: System.Data.Linq.ITable
      description: "Kolekcja obiektów zdefiniowanych przez <code> type </code> parametru."
  overload: System.Data.Linq.DataContext.GetTable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.GetTable``1
  id: GetTable``1
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: GetTable()
  nameWithType: DataContext.GetTable()
  fullName: System.Data.Linq.DataContext.GetTable()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  syntax:
    content: 'public System.Data.Linq.Table<TEntity> GetTable<TEntity> () where TEntity : class;'
    parameters: []
    return:
      type: System.Data.Linq.Table`1
      description: "Do dodania."
  overload: System.Data.Linq.DataContext.GetTable<TEntity>*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.LoadOptions
  id: LoadOptions
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: LoadOptions
  nameWithType: DataContext.LoadOptions
  fullName: System.Data.Linq.DataContext.LoadOptions
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Pobiera lub ustawia <xref href=&quot;System.Data.Linq.DataLoadOptions&quot;> </xref> skojarzony z tym <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref>."
  remarks: "Ta właściwość pobiera lub ustawia opcje, które są używane do definiowania zachowania pobierania z wyprzedzeniem dla odroczone załadowanych elementów członkowskich i członkostwa w kolekcji powiązanych."
  syntax:
    content: public System.Data.Linq.DataLoadOptions LoadOptions { get; set; }
    return:
      type: System.Data.Linq.DataLoadOptions
      description: "Pobieranie z wyprzedzeniem załadować opcje powiązanych danych."
  overload: System.Data.Linq.DataContext.LoadOptions*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Log
  id: Log
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Log
  nameWithType: DataContext.Log
  fullName: System.Data.Linq.DataContext.Log
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Pobiera lub Ustawia lokalizację docelową, aby napisać zapytanie SQL lub polecenie."
  remarks: "Ta właściwość jest ustawiana `null` wyłączyć rejestrowanie polecenia."
  example:
  - "The following example displays generated SQL in the console window before it displays the results of the query.  \n  \n [!code-vb[System.Data.Linq.DataContext#2](~/add/codesnippet/visualbasic/DataContext/Module1.vb#2)]\n [!code-cs[System.Data.Linq.DataContext#2](~/add/codesnippet/csharp/DataContext/Program.cs#2)]"
  syntax:
    content: public System.IO.TextWriter Log { get; set; }
    return:
      type: System.IO.TextWriter
      description: "<xref:System.IO.TextReader>Do użycia przy zapisie polecenia.</xref:System.IO.TextReader>"
  overload: System.Data.Linq.DataContext.Log*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Mapping
  id: Mapping
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Mapping
  nameWithType: DataContext.Mapping
  fullName: System.Data.Linq.DataContext.Mapping
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Pobiera <xref href=&quot;System.Data.Linq.Mapping.MetaModel&quot;> </xref> na podstawie mapowania."
  syntax:
    content: public System.Data.Linq.Mapping.MetaModel Mapping { get; }
    return:
      type: System.Data.Linq.Mapping.MetaModel
      description: "Mapowanie między obiektami bazy danych i domeny."
  overload: System.Data.Linq.DataContext.Mapping*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.ObjectTrackingEnabled
  id: ObjectTrackingEnabled
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: ObjectTrackingEnabled
  nameWithType: DataContext.ObjectTrackingEnabled
  fullName: System.Data.Linq.DataContext.ObjectTrackingEnabled
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Pobiera lub ustawia wartość wskazującą, czy jest włączone śledzenie obiektów."
  remarks: "Ustawienie tej właściwości na `false` zwiększa wydajność w czasie pobierania, ponieważ brak mniejszą liczbę elementów do śledzenia.       Wyjątek: - Jeśli ustawiono właściwość `false` po wykonaniu zapytania.           Aby uzyskać więcej informacji zobacz sekcję prawidłowe tryby w <xref:System.Data.Linq.DataContext>.</xref:System.Data.Linq.DataContext>      — Jeśli właściwość jest ustawiona na `false` i <xref:System.Data.Linq.DataContext.SubmitChanges%2A>jest wywoływana.</xref:System.Data.Linq.DataContext.SubmitChanges%2A>       Jeśli jest ObjectTrackingEnabled `false`, <xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A>jest ignorowany i traktowany `false`.</xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A> W takim przypadku <xref:System.Data.Linq.DataContext>jest tylko do odczytu.</xref:System.Data.Linq.DataContext>       Jeśli jest ObjectTrackingEnabled `true`, <xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A>jest `false`.</xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A> W takim przypadku <xref:System.Data.Linq.DataContext>umożliwia ładowanie wykres obiektu przy użyciu <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>dyrektyw, ale nie umożliwia ładowanie odłożone.</xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> </xref:System.Data.Linq.DataContext>"
  syntax:
    content: public bool ObjectTrackingEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli jest włączone śledzenie obiektów; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Wartość domyślna to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.Linq.DataContext.ObjectTrackingEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Collections.IEnumerable)
  id: Refresh(System.Data.Linq.RefreshMode,System.Collections.IEnumerable)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Refresh(RefreshMode,IEnumerable)
  nameWithType: DataContext.Refresh(RefreshMode,IEnumerable)
  fullName: System.Data.Linq.DataContext.Refresh(RefreshMode,IEnumerable)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Odświeża kolekcję obiektów jednostki zgodnie z określonym trybie."
  syntax:
    content: public void Refresh (System.Data.Linq.RefreshMode mode, System.Collections.IEnumerable entities);
    parameters:
    - id: mode
      type: System.Data.Linq.RefreshMode
      description: "Wartość, która określa sposób optymistycznej współbieżności konflikty są obsługiwane."
    - id: entities
      type: System.Collections.IEnumerable
      description: "Kolekcja obiektów do odświeżenia."
  overload: System.Data.Linq.DataContext.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object)
  id: Refresh(System.Data.Linq.RefreshMode,System.Object)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Refresh(RefreshMode,Object)
  nameWithType: DataContext.Refresh(RefreshMode,Object)
  fullName: System.Data.Linq.DataContext.Refresh(RefreshMode,Object)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Odświeża do obiektu jednostki, zgodnie z określonym trybie."
  syntax:
    content: public void Refresh (System.Data.Linq.RefreshMode mode, object entity);
    parameters:
    - id: mode
      type: System.Data.Linq.RefreshMode
      description: "Wartość, która określa sposób optymistycznej współbieżności konflikty są obsługiwane."
    - id: entity
      type: System.Object
      description: "Obiekt do odświeżenia."
  overload: System.Data.Linq.DataContext.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object[])
  id: Refresh(System.Data.Linq.RefreshMode,System.Object[])
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Refresh(RefreshMode,Object[])
  nameWithType: DataContext.Refresh(RefreshMode,Object[])
  fullName: System.Data.Linq.DataContext.Refresh(RefreshMode,Object[])
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Odświeża tablicę obiektów jednostki zgodnie z określonym trybie."
  syntax:
    content: public void Refresh (System.Data.Linq.RefreshMode mode, object[] entities);
    parameters:
    - id: mode
      type: System.Data.Linq.RefreshMode
      description: "Wartość, która określa sposób optymistycznej współbieżności konflikty są obsługiwane."
    - id: entities
      type: System.Object[]
      description: "Tablica obiekty obiektów do odświeżenia."
  overload: System.Data.Linq.DataContext.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.SubmitChanges
  id: SubmitChanges
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: SubmitChanges()
  nameWithType: DataContext.SubmitChanges()
  fullName: System.Data.Linq.DataContext.SubmitChanges()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Oblicza zestaw zmodyfikowanych obiektów do wstawienia, zaktualizować lub usunąć i wykonuje odpowiednich poleceń do implementowania zmian w bazie danych."
  remarks: "Jeśli zastąpienie metody dla insert, update lub delete, <xref:System.Data.Linq.DataContext.SubmitChanges%2A>wykonuje te metody zamiast domyślnej [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] poleceń.</xref:System.Data.Linq.DataContext.SubmitChanges%2A>"
  syntax:
    content: public void SubmitChanges ();
    parameters: []
  overload: System.Data.Linq.DataContext.SubmitChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.SubmitChanges(System.Data.Linq.ConflictMode)
  id: SubmitChanges(System.Data.Linq.ConflictMode)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: SubmitChanges(ConflictMode)
  nameWithType: DataContext.SubmitChanges(ConflictMode)
  fullName: System.Data.Linq.DataContext.SubmitChanges(ConflictMode)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Wysyła zmian wprowadzonych w taki sposób, aby pobrać obiekty do podstawowej bazy danych i określa działanie podejmowane w przypadku niepowodzenia przesyłania."
  remarks: "Domyślny tryb awarii jest <xref:System.Data.Linq.ConflictMode>.</xref:System.Data.Linq.ConflictMode>"
  example:
  - >-
    [!code-cs[System.Data.Linq.ConflictModeEnumeration#1](~/add/codesnippet/csharp/cmodesnip/program.cs#1)]
     [!code-vb[System.Data.Linq.ConflictModeEnumeration#1](~/add/codesnippet/visualbasic/snipdump/module1.vb#1)]
  syntax:
    content: public virtual void SubmitChanges (System.Data.Linq.ConflictMode failureMode);
    parameters:
    - id: failureMode
      type: System.Data.Linq.ConflictMode
      description: "Akcja do wykonania, jeśli przesyłanie zakończy się niepowodzeniem. Nieprawidłowe argumenty są następujące:<xref href=&quot;System.Data.Linq.ConflictMode&quot;></xref><xref href=&quot;System.Data.Linq.ConflictMode&quot;></xref>"
  overload: System.Data.Linq.DataContext.SubmitChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Transaction
  id: Transaction
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Transaction
  nameWithType: DataContext.Transaction
  fullName: System.Data.Linq.DataContext.Transaction
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Pobiera lub ustawia transakcji lokalnej dla [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] na potrzeby dostępu do bazy danych."
  remarks: "Scenariusz podstawowy dla tej właściwości jest współdziałanie z relacyjnych [!INCLUDE[vstecado](~/add/includes/vstecado-md.md)] kodu. Na przykład użyć tej właściwości podczas pisania własnych `Create` / `Update` / `Delete` metod, aby ustawić `Transaction` właściwość ADO `Command` obiektu.       Należy pamiętać, że: — Jeśli ta właściwość nie została jawnie ustawiona, metoda pobierająca zwraca wartość null.      — Jeśli kod jest wykonywany w <xref:System.Transactions.Transaction>kontekstu, ustawienie dla tej właściwości zgłasza wyjątek.</xref:System.Transactions.Transaction>      — Jeśli ta właściwość jest ustawiony, a nowy <xref:System.Transactions.Transaction>jest otwarty, jest zgłaszany wyjątek podczas wykonywania zapytania lub aktualizacji.</xref:System.Transactions.Transaction>"
  syntax:
    content: public System.Data.Common.DbTransaction Transaction { get; set; }
    return:
      type: System.Data.Common.DbTransaction
      description: "Obiekt transakcji używany przez <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref> podczas wykonywania zapytań i poleceń."
  overload: System.Data.Linq.DataContext.Transaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Translate(System.Data.Common.DbDataReader)
  id: Translate(System.Data.Common.DbDataReader)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Translate(DbDataReader)
  nameWithType: DataContext.Translate(DbDataReader)
  fullName: System.Data.Linq.DataContext.Translate(DbDataReader)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Konwertuje istniejące <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref> do obiektów."
  syntax:
    content: public System.Data.Linq.IMultipleResults Translate (System.Data.Common.DbDataReader reader);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "<xref href=&quot;System.Data.IDataReader&quot;> </xref> Do skonwertowania."
    return:
      type: System.Data.Linq.IMultipleResults
      description: "Lista obiektów zwrócona przez konwersji."
  overload: System.Data.Linq.DataContext.Translate*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)
  id: Translate(System.Type,System.Data.Common.DbDataReader)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Translate(Type,DbDataReader)
  nameWithType: DataContext.Translate(Type,DbDataReader)
  fullName: System.Data.Linq.DataContext.Translate(Type,DbDataReader)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Konwertuje istniejące <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref> do obiektów."
  syntax:
    content: public System.Collections.IEnumerable Translate (Type elementType, System.Data.Common.DbDataReader reader);
    parameters:
    - id: elementType
      type: System.Type
      description: "Typ &lt;xref:System.Collections.Generic.IEnumerable%601&gt; ma zostać zwrócona.       Algorytm dopasowania kolumny w wyniku do pól i właściwości w obiekcie działa w następujący sposób: Jeśli pole lub właściwość jest zamapowana na nazwę konkretnej kolumny, Oczekiwano nazwy tej kolumny w zestawie wyników.       Jeśli pole lub właściwość nie jest zamapowany, kolumnę z taką samą nazwę jak pole lub właściwość jest oczekiwany w zestawie wyników.       Porównanie jest wykonywane przez wyszukiwanie z uwzględnieniem wielkości liter dopasowanie najpierw. Jeśli nie ma tego dopasowania, kolejne wyszukiwania jest występuje pod kątem dopasowania bez uwzględniania wielkości liter.       Zapytanie musi zwracać wszystkie śledzone pola i właściwości obiektu (z wyjątkiem tych, które są ładowane na podstawie odroczonego) gdy są spełnione wszystkie następujące warunki: `T` jest jednostką jawnie śledzony przez <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref>.       <xref:System.Data.Linq.DataContext.ObjectTrackingEnabled*>is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>.</xref:System.Data.Linq.DataContext.ObjectTrackingEnabled*>       Jednostka ma klucz podstawowy.       W przeciwnym razie jest zwracany wyjątek."
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "<xref href=&quot;System.Data.IDataReader&quot;> </xref> Do skonwertowania."
    return:
      type: System.Collections.IEnumerable
      description: "Lista obiektów zwrócona przez konwersji."
  overload: System.Data.Linq.DataContext.Translate*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Translate``1(System.Data.Common.DbDataReader)
  id: Translate``1(System.Data.Common.DbDataReader)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Translate(DbDataReader)
  nameWithType: DataContext.Translate(DbDataReader)
  fullName: System.Data.Linq.DataContext.Translate(DbDataReader)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  syntax:
    content: public System.Collections.Generic.IEnumerable<TResult> Translate<TResult> (System.Data.Common.DbDataReader reader);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "Do dodania."
    return:
      type: System.Collections.Generic.IEnumerable{TResult}
      description: "Do dodania."
  overload: System.Data.Linq.DataContext.Translate<TResult>*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DataContext(IDbConnection)
  nameWithType: DataContext.DataContext(IDbConnection)
  fullName: System.Data.Linq.DataContext.DataContext(IDbConnection)
- uid: System.Data.IDbConnection
  parent: System.Data
  isExternal: false
  name: IDbConnection
  nameWithType: IDbConnection
  fullName: System.Data.IDbConnection
- uid: System.Data.Linq.DataContext.#ctor(System.String)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DataContext(String)
  nameWithType: DataContext.DataContext(String)
  fullName: System.Data.Linq.DataContext.DataContext(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection,System.Data.Linq.Mapping.MappingSource)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DataContext(IDbConnection,MappingSource)
  nameWithType: DataContext.DataContext(IDbConnection,MappingSource)
  fullName: System.Data.Linq.DataContext.DataContext(IDbConnection,MappingSource)
- uid: System.Data.Linq.Mapping.MappingSource
  parent: System.Data.Linq.Mapping
  isExternal: false
  name: MappingSource
  nameWithType: MappingSource
  fullName: System.Data.Linq.Mapping.MappingSource
- uid: System.Data.Linq.DataContext.#ctor(System.String,System.Data.Linq.Mapping.MappingSource)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DataContext(String,MappingSource)
  nameWithType: DataContext.DataContext(String,MappingSource)
  fullName: System.Data.Linq.DataContext.DataContext(String,MappingSource)
- uid: System.Data.Linq.DataContext.ChangeConflicts
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ChangeConflicts
  nameWithType: DataContext.ChangeConflicts
  fullName: System.Data.Linq.DataContext.ChangeConflicts
- uid: System.Data.Linq.ChangeConflictCollection
  parent: System.Data.Linq
  isExternal: false
  name: ChangeConflictCollection
  nameWithType: ChangeConflictCollection
  fullName: System.Data.Linq.ChangeConflictCollection
- uid: System.Data.Linq.DataContext.CommandTimeout
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: CommandTimeout
  nameWithType: DataContext.CommandTimeout
  fullName: System.Data.Linq.DataContext.CommandTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.Linq.DataContext.Connection
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Connection
  nameWithType: DataContext.Connection
  fullName: System.Data.Linq.DataContext.Connection
- uid: System.Data.Common.DbConnection
  parent: System.Data.Common
  isExternal: false
  name: DbConnection
  nameWithType: DbConnection
  fullName: System.Data.Common.DbConnection
- uid: System.Data.Linq.DataContext.CreateDatabase
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: CreateDatabase()
  nameWithType: DataContext.CreateDatabase()
  fullName: System.Data.Linq.DataContext.CreateDatabase()
- uid: System.Data.Linq.DataContext.CreateMethodCallQuery``1(System.Object,System.Reflection.MethodInfo,System.Object[])
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: CreateMethodCallQuery(Object,MethodInfo,Object[])
  nameWithType: DataContext.CreateMethodCallQuery(Object,MethodInfo,Object[])
  fullName: System.Data.Linq.DataContext.CreateMethodCallQuery(Object,MethodInfo,Object[])
- uid: System.Linq.IQueryable{TResult}
  parent: System.Linq
  isExternal: true
  name: IQueryable<TResult>
  nameWithType: IQueryable<TResult>
  fullName: System.Linq.IQueryable<TResult>
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable<TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Linq.DataContext.DatabaseExists
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DatabaseExists()
  nameWithType: DataContext.DatabaseExists()
  fullName: System.Data.Linq.DataContext.DatabaseExists()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Linq.DataContext.DeferredLoadingEnabled
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DeferredLoadingEnabled
  nameWithType: DataContext.DeferredLoadingEnabled
  fullName: System.Data.Linq.DataContext.DeferredLoadingEnabled
- uid: System.Data.Linq.DataContext.DeleteDatabase
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DeleteDatabase()
  nameWithType: DataContext.DeleteDatabase()
  fullName: System.Data.Linq.DataContext.DeleteDatabase()
- uid: System.Data.Linq.DataContext.Dispose
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Dispose()
  nameWithType: DataContext.Dispose()
  fullName: System.Data.Linq.DataContext.Dispose()
- uid: System.Data.Linq.DataContext.Dispose(System.Boolean)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DataContext.Dispose(Boolean)
  fullName: System.Data.Linq.DataContext.Dispose(Boolean)
- uid: System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteCommand(String,Object[])
  nameWithType: DataContext.ExecuteCommand(String,Object[])
  fullName: System.Data.Linq.DataContext.ExecuteCommand(String,Object[])
- uid: System.Data.Linq.DataContext.ExecuteDynamicDelete(System.Object)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteDynamicDelete(Object)
  nameWithType: DataContext.ExecuteDynamicDelete(Object)
  fullName: System.Data.Linq.DataContext.ExecuteDynamicDelete(Object)
- uid: System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteDynamicInsert(Object)
  nameWithType: DataContext.ExecuteDynamicInsert(Object)
  fullName: System.Data.Linq.DataContext.ExecuteDynamicInsert(Object)
- uid: System.Data.Linq.DataContext.ExecuteDynamicUpdate(System.Object)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteDynamicUpdate(Object)
  nameWithType: DataContext.ExecuteDynamicUpdate(Object)
  fullName: System.Data.Linq.DataContext.ExecuteDynamicUpdate(Object)
- uid: System.Data.Linq.DataContext.ExecuteMethodCall(System.Object,System.Reflection.MethodInfo,System.Object[])
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteMethodCall(Object,MethodInfo,Object[])
  nameWithType: DataContext.ExecuteMethodCall(Object,MethodInfo,Object[])
  fullName: System.Data.Linq.DataContext.ExecuteMethodCall(Object,MethodInfo,Object[])
- uid: System.Data.Linq.IExecuteResult
  parent: System.Data.Linq
  isExternal: false
  name: IExecuteResult
  nameWithType: IExecuteResult
  fullName: System.Data.Linq.IExecuteResult
- uid: System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteQuery(Type,String,Object[])
  nameWithType: DataContext.ExecuteQuery(Type,String,Object[])
  fullName: System.Data.Linq.DataContext.ExecuteQuery(Type,String,Object[])
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteQuery(String,Object[])
  nameWithType: DataContext.ExecuteQuery(String,Object[])
  fullName: System.Data.Linq.DataContext.ExecuteQuery(String,Object[])
- uid: System.Collections.Generic.IEnumerable{TResult}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<TResult>
  nameWithType: IEnumerable<TResult>
  fullName: System.Collections.Generic.IEnumerable<TResult>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Linq.DataContext.GetChangeSet
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: GetChangeSet()
  nameWithType: DataContext.GetChangeSet()
  fullName: System.Data.Linq.DataContext.GetChangeSet()
- uid: System.Data.Linq.ChangeSet
  parent: System.Data.Linq
  isExternal: false
  name: ChangeSet
  nameWithType: ChangeSet
  fullName: System.Data.Linq.ChangeSet
- uid: System.Data.Linq.DataContext.GetCommand(System.Linq.IQueryable)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: GetCommand(IQueryable)
  nameWithType: DataContext.GetCommand(IQueryable)
  fullName: System.Data.Linq.DataContext.GetCommand(IQueryable)
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Linq.IQueryable
  parent: System.Linq
  isExternal: true
  name: IQueryable
  nameWithType: IQueryable
  fullName: System.Linq.IQueryable
- uid: System.Data.Linq.DataContext.GetTable(System.Type)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: GetTable(Type)
  nameWithType: DataContext.GetTable(Type)
  fullName: System.Data.Linq.DataContext.GetTable(Type)
- uid: System.Data.Linq.ITable
  parent: System.Data.Linq
  isExternal: false
  name: ITable
  nameWithType: ITable
  fullName: System.Data.Linq.ITable
- uid: System.Data.Linq.DataContext.GetTable``1
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: GetTable()
  nameWithType: DataContext.GetTable()
  fullName: System.Data.Linq.DataContext.GetTable()
- uid: System.Data.Linq.Table`1
  parent: System.Data.Linq
  isExternal: false
  name: Table<TEntity>
  nameWithType: Table<TEntity>
  fullName: System.Data.Linq.Table<TEntity>
- uid: System.Data.Linq.DataContext.LoadOptions
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: LoadOptions
  nameWithType: DataContext.LoadOptions
  fullName: System.Data.Linq.DataContext.LoadOptions
- uid: System.Data.Linq.DataLoadOptions
  parent: System.Data.Linq
  isExternal: false
  name: DataLoadOptions
  nameWithType: DataLoadOptions
  fullName: System.Data.Linq.DataLoadOptions
- uid: System.Data.Linq.DataContext.Log
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Log
  nameWithType: DataContext.Log
  fullName: System.Data.Linq.DataContext.Log
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Data.Linq.DataContext.Mapping
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Mapping
  nameWithType: DataContext.Mapping
  fullName: System.Data.Linq.DataContext.Mapping
- uid: System.Data.Linq.Mapping.MetaModel
  parent: System.Data.Linq.Mapping
  isExternal: false
  name: MetaModel
  nameWithType: MetaModel
  fullName: System.Data.Linq.Mapping.MetaModel
- uid: System.Data.Linq.DataContext.ObjectTrackingEnabled
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ObjectTrackingEnabled
  nameWithType: DataContext.ObjectTrackingEnabled
  fullName: System.Data.Linq.DataContext.ObjectTrackingEnabled
- uid: System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Collections.IEnumerable)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Refresh(RefreshMode,IEnumerable)
  nameWithType: DataContext.Refresh(RefreshMode,IEnumerable)
  fullName: System.Data.Linq.DataContext.Refresh(RefreshMode,IEnumerable)
- uid: System.Data.Linq.RefreshMode
  parent: System.Data.Linq
  isExternal: false
  name: RefreshMode
  nameWithType: RefreshMode
  fullName: System.Data.Linq.RefreshMode
- uid: System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Refresh(RefreshMode,Object)
  nameWithType: DataContext.Refresh(RefreshMode,Object)
  fullName: System.Data.Linq.DataContext.Refresh(RefreshMode,Object)
- uid: System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object[])
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Refresh(RefreshMode,Object[])
  nameWithType: DataContext.Refresh(RefreshMode,Object[])
  fullName: System.Data.Linq.DataContext.Refresh(RefreshMode,Object[])
- uid: System.Data.Linq.DataContext.SubmitChanges
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: SubmitChanges()
  nameWithType: DataContext.SubmitChanges()
  fullName: System.Data.Linq.DataContext.SubmitChanges()
- uid: System.Data.Linq.DataContext.SubmitChanges(System.Data.Linq.ConflictMode)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: SubmitChanges(ConflictMode)
  nameWithType: DataContext.SubmitChanges(ConflictMode)
  fullName: System.Data.Linq.DataContext.SubmitChanges(ConflictMode)
- uid: System.Data.Linq.ConflictMode
  parent: System.Data.Linq
  isExternal: false
  name: ConflictMode
  nameWithType: ConflictMode
  fullName: System.Data.Linq.ConflictMode
- uid: System.Data.Linq.DataContext.Transaction
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Transaction
  nameWithType: DataContext.Transaction
  fullName: System.Data.Linq.DataContext.Transaction
- uid: System.Data.Common.DbTransaction
  parent: System.Data.Common
  isExternal: false
  name: DbTransaction
  nameWithType: DbTransaction
  fullName: System.Data.Common.DbTransaction
- uid: System.Data.Linq.DataContext.Translate(System.Data.Common.DbDataReader)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Translate(DbDataReader)
  nameWithType: DataContext.Translate(DbDataReader)
  fullName: System.Data.Linq.DataContext.Translate(DbDataReader)
- uid: System.Data.Linq.IMultipleResults
  parent: System.Data.Linq
  isExternal: false
  name: IMultipleResults
  nameWithType: IMultipleResults
  fullName: System.Data.Linq.IMultipleResults
- uid: System.Data.Common.DbDataReader
  parent: System.Data.Common
  isExternal: false
  name: DbDataReader
  nameWithType: DbDataReader
  fullName: System.Data.Common.DbDataReader
- uid: System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Translate(Type,DbDataReader)
  nameWithType: DataContext.Translate(Type,DbDataReader)
  fullName: System.Data.Linq.DataContext.Translate(Type,DbDataReader)
- uid: System.Data.Linq.DataContext.Translate``1(System.Data.Common.DbDataReader)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Translate(DbDataReader)
  nameWithType: DataContext.Translate(DbDataReader)
  fullName: System.Data.Linq.DataContext.Translate(DbDataReader)
- uid: System.Data.Linq.DataContext.#ctor*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DataContext
  nameWithType: DataContext.DataContext
- uid: System.Data.Linq.DataContext.ChangeConflicts*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ChangeConflicts
  nameWithType: DataContext.ChangeConflicts
- uid: System.Data.Linq.DataContext.CommandTimeout*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: CommandTimeout
  nameWithType: DataContext.CommandTimeout
- uid: System.Data.Linq.DataContext.Connection*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Connection
  nameWithType: DataContext.Connection
- uid: System.Data.Linq.DataContext.CreateDatabase*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: CreateDatabase
  nameWithType: DataContext.CreateDatabase
- uid: System.Data.Linq.DataContext.CreateMethodCallQuery<TResult>*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: CreateMethodCallQuery<TResult>
  nameWithType: DataContext.CreateMethodCallQuery<TResult>
- uid: System.Data.Linq.DataContext.DatabaseExists*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DatabaseExists
  nameWithType: DataContext.DatabaseExists
- uid: System.Data.Linq.DataContext.DeferredLoadingEnabled*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DeferredLoadingEnabled
  nameWithType: DataContext.DeferredLoadingEnabled
- uid: System.Data.Linq.DataContext.DeleteDatabase*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DeleteDatabase
  nameWithType: DataContext.DeleteDatabase
- uid: System.Data.Linq.DataContext.Dispose*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Dispose
  nameWithType: DataContext.Dispose
- uid: System.Data.Linq.DataContext.ExecuteCommand*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteCommand
  nameWithType: DataContext.ExecuteCommand
- uid: System.Data.Linq.DataContext.ExecuteDynamicDelete*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteDynamicDelete
  nameWithType: DataContext.ExecuteDynamicDelete
- uid: System.Data.Linq.DataContext.ExecuteDynamicInsert*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteDynamicInsert
  nameWithType: DataContext.ExecuteDynamicInsert
- uid: System.Data.Linq.DataContext.ExecuteDynamicUpdate*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteDynamicUpdate
  nameWithType: DataContext.ExecuteDynamicUpdate
- uid: System.Data.Linq.DataContext.ExecuteMethodCall*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteMethodCall
  nameWithType: DataContext.ExecuteMethodCall
- uid: System.Data.Linq.DataContext.ExecuteQuery*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteQuery
  nameWithType: DataContext.ExecuteQuery
- uid: System.Data.Linq.DataContext.ExecuteQuery<TResult>*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteQuery<TResult>
  nameWithType: DataContext.ExecuteQuery<TResult>
- uid: System.Data.Linq.DataContext.GetChangeSet*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: GetChangeSet
  nameWithType: DataContext.GetChangeSet
- uid: System.Data.Linq.DataContext.GetCommand*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: GetCommand
  nameWithType: DataContext.GetCommand
- uid: System.Data.Linq.DataContext.GetTable*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: GetTable
  nameWithType: DataContext.GetTable
- uid: System.Data.Linq.DataContext.GetTable<TEntity>*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: GetTable<TEntity>
  nameWithType: DataContext.GetTable<TEntity>
- uid: System.Data.Linq.DataContext.LoadOptions*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: LoadOptions
  nameWithType: DataContext.LoadOptions
- uid: System.Data.Linq.DataContext.Log*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Log
  nameWithType: DataContext.Log
- uid: System.Data.Linq.DataContext.Mapping*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Mapping
  nameWithType: DataContext.Mapping
- uid: System.Data.Linq.DataContext.ObjectTrackingEnabled*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ObjectTrackingEnabled
  nameWithType: DataContext.ObjectTrackingEnabled
- uid: System.Data.Linq.DataContext.Refresh*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Refresh
  nameWithType: DataContext.Refresh
- uid: System.Data.Linq.DataContext.SubmitChanges*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: SubmitChanges
  nameWithType: DataContext.SubmitChanges
- uid: System.Data.Linq.DataContext.Transaction*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Transaction
  nameWithType: DataContext.Transaction
- uid: System.Data.Linq.DataContext.Translate*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Translate
  nameWithType: DataContext.Translate
- uid: System.Data.Linq.DataContext.Translate<TResult>*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Translate<TResult>
  nameWithType: DataContext.Translate<TResult>
