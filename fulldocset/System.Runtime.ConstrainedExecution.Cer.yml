### YamlMime:ManagedReference
items:
- uid: System.Runtime.ConstrainedExecution.Cer
  id: Cer
  children:
  - System.Runtime.ConstrainedExecution.Cer.MayFail
  - System.Runtime.ConstrainedExecution.Cer.None
  - System.Runtime.ConstrainedExecution.Cer.Success
  langs:
  - csharp
  name: Cer
  nameWithType: Cer
  fullName: System.Runtime.ConstrainedExecution.Cer
  type: Enum
  summary: "Określa zachowanie metody wywołanego w regionie ograniczonego wykonania."
  remarks: "Wyliczenie Cer określa zachowanie metody, typu lub zestawu w regionie ograniczonego wykonania (CER). Użyj jednej z trzech wartości dostępne, aby wskazać, że jednostka kończy się pomyślnie, nie zna CER lub (sposób niejednoznaczny) będzie mógł zgłosić powodzenie lub niepowodzenie.       CER zapewnia gwarancje, które wykona region kodu nieprzerwaną nawet wtedy, gdy asynchroniczne np. wyjątek braku pamięci przerwanego wątku lub przepełnienie stosu jest wyjątek."
  example:
  - "The following code example demonstrates the use of the Cer enumeration when specifying a constrained execution region for a method. This code example is part of a larger example provided for the <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.%23ctor%2A> constructor.  \n  \n [!code-vb[System.Runtime.ConstrainedExecution#3](~/add/codesnippet/visualbasic/t-system.runtime.constra_2_1.vb)]\n [!code-cs[System.Runtime.ConstrainedExecution#3](~/add/codesnippet/csharp/t-system.runtime.constra_2_1.cs)]"
  syntax:
    content: public enum Cer
  inheritance:
  - System.Enum
  platform:
  - net462
- uid: System.Runtime.ConstrainedExecution.Cer.MayFail
  id: MayFail
  parent: System.Runtime.ConstrainedExecution.Cer
  langs:
  - csharp
  name: MayFail
  nameWithType: Cer.MayFail
  fullName: System.Runtime.ConstrainedExecution.Cer.MayFail
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Runtime.ConstrainedExecution
  summary: "W wypadku wyjątkowe warunki metoda może zakończyć się niepowodzeniem. W takim przypadku metoda zgłosi powrót do wywoływania metody czy powodzeniem lub niepowodzeniem. Metoda musi mieć CER wokół treści metody, aby upewnić się, czy może raportować wartość zwracaną."
  syntax:
    content: MayFail
    return:
      type: System.Runtime.ConstrainedExecution.Cer
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.ConstrainedExecution.Cer.None
  id: None
  parent: System.Runtime.ConstrainedExecution.Cer
  langs:
  - csharp
  name: None
  nameWithType: Cer.None
  fullName: System.Runtime.ConstrainedExecution.Cer.None
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Runtime.ConstrainedExecution
  summary: 'Metoda, typu lub zestawu ma nie zawierają CER. Nie przyjmuje zaletą gwarancje CER. Oznacza to następujące czynności:'
  remarks: "-W wypadku wyjątkowych warunków metody może zakończyć się niepowodzeniem.      — Metoda może być lub może nie raport, który nie powiodło się (jest deterministyczna).      — Metoda nie jest zapisywany z CERs myślą (jest to najbardziej prawdopodobny scenariusz).       Jeśli metoda, typu lub zestawu nie jest wyraźnie oznaczona powiodła się, niejawnie jest oznaczony jako `Cer.None`."
  syntax:
    content: None
    return:
      type: System.Runtime.ConstrainedExecution.Cer
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.ConstrainedExecution.Cer.Success
  id: Success
  parent: System.Runtime.ConstrainedExecution.Cer
  langs:
  - csharp
  name: Success
  nameWithType: Cer.Success
  fullName: System.Runtime.ConstrainedExecution.Cer.Success
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Runtime.ConstrainedExecution
  summary: "W wypadku wyjątkowe warunki metoda jest gwarantowana powiodło się. Zawsze należy konstruować CER wokół metodę, która jest wywoływana, nawet gdy jest wywoływana z regionu z systemem innym niż CER. Metoda zakończy się pomyślnie, jeśli rozwiązanie przeznaczenie. Na przykład oznaczenia <xref:System.Collections.ArrayList.Count*>z `ReliabilityContractAttribute(Cer.Success)` oznacza, że po uruchomieniu w CER zawsze zwraca liczbę liczba elementów w <xref href=&quot;System.Collections.ArrayList&quot;> </xref> i nigdy nie może narazić pola wewnętrzne w stanie nieokreślony.</xref:System.Collections.ArrayList.Count*>"
  syntax:
    content: Success
    return:
      type: System.Runtime.ConstrainedExecution.Cer
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Enum
  isExternal: false
  name: System.Enum
- uid: System.Runtime.ConstrainedExecution.Cer.MayFail
  parent: System.Runtime.ConstrainedExecution.Cer
  isExternal: false
  name: MayFail
  nameWithType: Cer.MayFail
  fullName: System.Runtime.ConstrainedExecution.Cer.MayFail
- uid: System.Runtime.ConstrainedExecution.Cer
  parent: System.Runtime.ConstrainedExecution
  isExternal: false
  name: Cer
  nameWithType: Cer
  fullName: System.Runtime.ConstrainedExecution.Cer
- uid: System.Runtime.ConstrainedExecution.Cer.None
  parent: System.Runtime.ConstrainedExecution.Cer
  isExternal: false
  name: None
  nameWithType: Cer.None
  fullName: System.Runtime.ConstrainedExecution.Cer.None
- uid: System.Runtime.ConstrainedExecution.Cer.Success
  parent: System.Runtime.ConstrainedExecution.Cer
  isExternal: false
  name: Success
  nameWithType: Cer.Success
  fullName: System.Runtime.ConstrainedExecution.Cer.Success
