### YamlMime:ManagedReference
items:
- uid: System.Windows.PropertyMetadata
  id: PropertyMetadata
  children:
  - System.Windows.PropertyMetadata.#ctor
  - System.Windows.PropertyMetadata.#ctor(System.Object)
  - System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  - System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  - System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  - System.Windows.PropertyMetadata.CoerceValueCallback
  - System.Windows.PropertyMetadata.DefaultValue
  - System.Windows.PropertyMetadata.IsSealed
  - System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  - System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  - System.Windows.PropertyMetadata.PropertyChangedCallback
  langs:
  - csharp
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
  type: Class
  summary: "Definiuje zachowanie niektórych aspektów właściwości zależności, ponieważ jest ono stosowane do określonego typu, w tym warunki, który został zarejestrowany."
  remarks: "Metadane właściwości mogą być definiowane i używanych podczas rejestrowania właściwości zależności, podczas wywoływania metody <xref:System.Windows.DependencyProperty.Register%2A>— Metoda (lub odchyleń dla właściwości tylko do odczytu zależności lub dołączone właściwości), lub po pierwotnej rejestracji właściciel podczas wywoływania metody <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>metody.</xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.Register%2A> <xref:System.Windows.DependencyProperty.AddOwner%2A>ma również metadane właściwości.</xref:System.Windows.DependencyProperty.AddOwner%2A>       Ta klasa jest klasą bazową konkretnych mogą być używane w każdej z tych wywołań. Jednak często zdarza się, aby określić metadanych za pomocą jednej z klas pochodnych, takich jak <xref:System.Windows.FrameworkPropertyMetadata>.</xref:System.Windows.FrameworkPropertyMetadata> Te klasy pochodnej obsługuje bardziej szczegółowe metadanych jako wartości właściwości typu Boolean, które są przydatne w przypadku wykrycia albo włączenie niektórych właściwości systemu i układu zachowania, które są implementowane tylko na [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] poziom framework.       Kilka właściwości tej klasy są odczytu i zapisu do modelu obiektu, ale można zapisywać tylko przed wystąpieniem używany w operacji system właściwości, takie jak <xref:System.Windows.DependencyProperty.Register%2A>lub <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>.</xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.Register%2A> Każdej z tych właściwości można również zostały ustawione przez konstruktora, ale są dostępne, aby <xref:System.Windows.PropertyMetadata.Merge%2A>implementacje metod można włączyć dla nich.</xref:System.Windows.PropertyMetadata.Merge%2A>      <a name=&quot;xamlTextUsage_PropertyMetadata&quot;></a>## XAML tekst użycia tego typu i elementy członkowskie tego typu nie są zwykle używane w [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public class PropertyMetadata
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor
  id: '#ctor'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata()
  nameWithType: PropertyMetadata.PropertyMetadata()
  fullName: System.Windows.PropertyMetadata.PropertyMetadata()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> klasy."
  syntax:
    content: public PropertyMetadata ();
    parameters: []
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object)
  nameWithType: PropertyMetadata.PropertyMetadata(Object)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> klasy z określoną wartość domyślną dla właściwości zależności, który będzie dotyczyć tych metadanych."
  remarks: "Typ wartości podanej dla `defaultValue` muszą być zgodne, lub być związane z typem określonym w pierwotnej rejestracji właściwości zależności, która będzie dotyczyć tych metadanych. Niezgodność między typ wartości domyślnej metadanych i typu właściwości zależności, który jest stosowany do może być trudne do debugowania, ponieważ niezgodność nie jest wykrywalny podczas kompilacji (niezgodność zgłosi wyjątek czasu wykonywania).       Chociaż jest to wartość domyślna dla konstruktora bez parametrów, `defaultValue` z <xref:System.Windows.DependencyProperty.UnsetValue>nie można określić.</xref:System.Windows.DependencyProperty.UnsetValue> Takie próby zgłosi wyjątek."
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor1param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor1param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "Wartość domyślna, aby określić dla właściwości zależności, zwykle dostarczonych jako wartość określonego typu."
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>Nie można ustawić na wartość <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; zobacz uwagi."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Windows.PropertyChangedCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> klasy z określonym <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> odwołanie do implementacji."
  remarks: ''
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor1paramcallback](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor1paramcallback)]"
  syntax:
    content: public PropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "Odwołanie do implementacji programu obsługi, która jest wywoływana przez system właściwości przy każdej zmianie efektywną wartość właściwości."
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object,PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> klasy z wartością określoną wartość domyślną i <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> odwołanie do implementacji."
  remarks: "Typ podanej wartości `defaultValue` muszą być zgodne, lub być związane z typem określonym w pierwotnej rejestracji właściwości zależności, która będzie dotyczyć tych metadanych. Niezgodność między typ wartości domyślnej metadanych i typu właściwości zależności, który jest stosowany do może być trudne do debugowania, ponieważ niezgodność nie jest wykrywalny podczas kompilacji (niezgodność zgłosi wyjątek czasu wykonywania).       Chociaż jest to wartość domyślna dla konstruktora bez parametrów, `defaultValue` z <xref:System.Windows.DependencyProperty.UnsetValue>nie można określić.</xref:System.Windows.DependencyProperty.UnsetValue> Takie próby zgłosi wyjątek."
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor2param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor2param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "Wartość domyślna właściwości zależności, zwykle dostarczonych jako wartość określonego typu."
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "Odwołanie do implementacji programu obsługi, która jest wywoływana przez system właściwości przy każdej zmianie efektywną wartość właściwości."
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>Nie można ustawić na wartość <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; zobacz uwagi."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> z określoną wartość domyślną i wywołania zwrotne."
  remarks: "Jeśli chcesz określić <xref:System.Windows.CoerceValueCallback>, ale nie <xref:System.Windows.PropertyChangedCallback>, można przekazać `null` dla `propertyChangedCallback` parametru.</xref:System.Windows.PropertyChangedCallback> </xref:System.Windows.CoerceValueCallback>       Typ wartości podanej dla `defaultValue` muszą być zgodne, lub być związane z typem określonym w pierwotnej rejestracji właściwości zależności, która będzie dotyczyć tych metadanych. Niezgodność między typ wartości domyślnej metadanych i typu właściwości zależności, który jest stosowany do może być trudne do debugowania, ponieważ niezgodność nie jest wykrywalny podczas kompilacji (niezgodność zgłosi wyjątek czasu wykonywania).       Chociaż jest to wartość domyślna dla konstruktora bez parametrów, `defaultValue` z <xref:System.Windows.DependencyProperty.UnsetValue>nie można określić.</xref:System.Windows.DependencyProperty.UnsetValue> Takie próby zgłosi wyjątek."
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor3param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor3param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "Wartość domyślna właściwości zależności, zwykle dostarczonych jako wartość określonego typu."
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "Odwołanie do implementacji programu obsługi, która jest wywoływana przez system właściwości przy każdej zmianie efektywną wartość właściwości."
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: "Odwołanie do implementacji programu obsługi, który ma być wywoływana, gdy wywołań systemowych właściwości <xref:System.Windows.DependencyObject.CoerceValue*>względem tej właściwości.</xref:System.Windows.DependencyObject.CoerceValue*>"
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>Nie można ustawić na wartość <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; zobacz uwagi."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.CoerceValueCallback
  id: CoerceValueCallback
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
  fullName: System.Windows.PropertyMetadata.CoerceValueCallback
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Pobiera lub ustawia odwołanie do <xref href=&quot;System.Windows.CoerceValueCallback&quot;> </xref> implementacji określony w metadanych."
  remarks: "Wywołania zwrotne w metadanych właściwości nie są zwykle publicznych elementów członkowskich w typie zawierającym, więc wartość tej właściwości nie jest ważna w przypadku większości scenariuszy używające tylko metadane istniejącej właściwości zależności. Powodem, dla którego ta właściwość jest narażony jest tak, aby podklasy metadanych można wykonywać ich logiki scalania odpowiednie metadane podstawowej i zastępowanie Dodawanie metadanych określenia <xref:System.Windows.CoerceValueCallback>.</xref:System.Windows.CoerceValueCallback> Domyślna logika scalania dla CoerceValueCallback jest jednak zastąpić poprzednią.       CoerceValueCallback jest zdefiniowany w modelu obiektów w trybie odczytu i zapisu. Jest tak CoerceValueCallback można dostosować po zainicjowaniu elementu <xref:System.Windows.PropertyMetadata>samego obiektu.</xref:System.Windows.PropertyMetadata> Jednak po metadanych jest używany jako część wywołania <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwość zostanie zapieczętować tego wystąpienia metadanych i właściwości są teraz uważany za niezmienialny.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Trwa próba skonfigurowania CoerceValueCallback raz <xref:System.Windows.PropertyMetadata.IsSealed%2A>jest `true` na te metadane wystąpienia zgłosi wyjątek.</xref:System.Windows.PropertyMetadata.IsSealed%2A>"
  syntax:
    content: public System.Windows.CoerceValueCallback CoerceValueCallback { get; set; }
    return:
      type: System.Windows.CoerceValueCallback
      description: "A <xref href=&quot;System.Windows.CoerceValueCallback&quot;> </xref> odwołanie do implementacji."
  overload: System.Windows.PropertyMetadata.CoerceValueCallback*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Nie można ustawić właściwości metadanych, po zastosowaniu ich do operacji właściwości zależności."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.DefaultValue
  id: DefaultValue
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
  fullName: System.Windows.PropertyMetadata.DefaultValue
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Pobiera lub ustawia wartość domyślna właściwości zależności."
  remarks: "Wartość domyślna jest zdefiniowany w modelu obiektów jako odczytu i zapisu. Jest tak DefaultValue można dostosować po zainicjowaniu elementu <xref:System.Windows.PropertyMetadata>samego obiektu.</xref:System.Windows.PropertyMetadata> Jednak po metadanych jest używany jako część wywołania <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwość zostanie zapieczętować tego wystąpienia metadanych i właściwości są teraz uważany za niezmienialny.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Trwa próba skonfigurowania DefaultValue raz <xref:System.Windows.PropertyMetadata.IsSealed%2A>jest `true` na te metadane wystąpienia zgłosi wyjątek.</xref:System.Windows.PropertyMetadata.IsSealed%2A>       Chociaż jest to wartość domyślna dla konstruktora bez parametrów, `defaultValue` z <xref:System.Windows.DependencyProperty.UnsetValue>nie można ustawić za pomocą DefaultValue lub konstruktora.</xref:System.Windows.DependencyProperty.UnsetValue> Takie próby zgłosi wyjątek.      <a name=&quot;xamlTextUsage_PropertyChangedCallback&quot;></a>## XAML tekst użycia elementy członkowskie tego typu nie są zwykle używane w [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public object DefaultValue { get; set; }
    return:
      type: System.Object
      description: "Wartość domyślna właściwości. Wartość domyślna dla <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> wystąpienia utworzone za pomocą konstruktora bez parametrów zostaną <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; zobacz uwagi."
  overload: System.Windows.PropertyMetadata.DefaultValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Nie można ustawić na wartość <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref> po utworzeniu; zobacz uwagi."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Nie można ustawić właściwości metadanych, po zastosowaniu ich do operacji właściwości zależności."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.IsSealed
  id: IsSealed
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
  fullName: System.Windows.PropertyMetadata.IsSealed
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Pobiera wartość określającą, czy metadane zostały zastosowane do właściwości w sposób, co w stanie modyfikować tego wystąpienia metadanych."
  remarks: "Różne właściwości <xref:System.Windows.PropertyMetadata>, takich jak <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, są zdefiniowane w modelu obiektów w trybie odczytu i zapisu.</xref:System.Windows.PropertyMetadata.DefaultValue%2A> </xref:System.Windows.PropertyMetadata> Jest więc te właściwości można dostosować po zainicjowaniu elementu <xref:System.Windows.PropertyMetadata>samego obiektu.</xref:System.Windows.PropertyMetadata> Jednak po metadanych jest stosowany do właściwości zależności w ramach wywołania <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwość zostanie zapieczętować tego wystąpienia metadanych i właściwości są teraz uważany za niezmienialny.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> W czasie jednej z tych wywołań <xref:System.Windows.PropertyMetadata.OnApply%2A>nosi nazwę, a wartość tej właściwości jest równa `true`.</xref:System.Windows.PropertyMetadata.OnApply%2A>"
  example:
  - "The following example  checks IsSealed prior to a set operation of a custom metadata property.  \n  \n [!code-cs[PropertyMetadataAPIs#MergeImpl](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#mergeimpl)]"
  syntax:
    content: protected bool IsSealed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli wystąpienie metadanych jest niezmienialny; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.PropertyMetadata.IsSealed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  id: Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: Merge(PropertyMetadata,DependencyProperty)
  nameWithType: PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  fullName: System.Windows.PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Scala te metadane z metadanymi podstawowej."
  remarks: "Ta metoda jest używana wewnętrznie, gdy metadane są zastępowane (<xref:System.Windows.DependencyProperty.OverrideMetadata%2A> metody).</xref:System.Windows.DependencyProperty.OverrideMetadata%2A>"
  example:
  - "The following example implements a merge for a custom metadata type that adds an additional property to the property metadata.  \n  \n [!code-cs[PropertyMetadataAPIs#MergeImpl](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#mergeimpl)]"
  syntax:
    content: protected virtual void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);
    parameters:
    - id: baseMetadata
      type: System.Windows.PropertyMetadata
      description: "Podstawowy metadanych do scalenia z wartościami tego wystąpienia."
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Właściwości zależności, do którego stosowana jest metadanych."
  overload: System.Windows.PropertyMetadata.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  id: OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: OnApply(DependencyProperty,Type)
  nameWithType: PropertyMetadata.OnApply(DependencyProperty,Type)
  fullName: System.Windows.PropertyMetadata.OnApply(DependencyProperty,Type)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Wywoływane, gdy zastosowano te metadane dla właściwości, co oznacza, że metadane jest zapieczętowany."
  remarks: "Podklasy powinny zapewnić, że wszystkie zmienność struktury danych <xref:System.Windows.PropertyMetadata>podklasy powinien być oznaczony jako niezmienialny po OnApply jest wywoływana.</xref:System.Windows.PropertyMetadata> To będzie wywoływana po zastosowaniu metadanych dla działania systemu właściwości (rejestrowanie, dodawanie właściciela, zastępowanie metadanych)."
  syntax:
    content: protected virtual void OnApply (System.Windows.DependencyProperty dp, Type targetType);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Właściwości zależności, do którego zastosowano metadanych."
    - id: targetType
      type: System.Type
      description: "Typ skojarzony z metadanych, jeśli jest to metadanych określonego typu. Jeśli jest to domyślny metadanych, ta wartość jest odwołanie o wartości null."
  overload: System.Windows.PropertyMetadata.OnApply*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback
  id: PropertyChangedCallback
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
  fullName: System.Windows.PropertyMetadata.PropertyChangedCallback
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Pobiera lub ustawia odwołanie do <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> implementacji określony w metadanych."
  remarks: "Wywołania zwrotne w metadanych właściwości nie są zwykle publiczne elementy członkowskie na typ definiujący, dlatego wartość tej właściwości nie jest ważna w przypadku większości scenariuszy używające tylko metadane istniejącej właściwości zależności. Powodem, dla którego ta właściwość jest narażony jest tak, aby klasy metadanych można wykonywać ich logiki scalania odpowiednie metadane podstawowej i zastępowanie Dodawanie metadanych określenia <xref:System.Windows.PropertyChangedCallback>.</xref:System.Windows.PropertyChangedCallback> Domyślna logika scalania dla jest obsługa wszystkich implementacji PropertyChangedCallback w tabeli i Wywołaj każdego z nich z ustanowiono przez klasę najgłębszym w hierarchii z pierwszego.       PropertyChangedCallback jest zdefiniowany w modelu obiektów w trybie odczytu i zapisu. Jest tak PropertyChangedCallback można dostosować po zainicjowaniu elementu <xref:System.Windows.PropertyMetadata>samego obiektu.</xref:System.Windows.PropertyMetadata> Jednak po metadanych jest używany jako część wywołania <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwość zostanie zapieczętować tego wystąpienia metadanych i właściwości są teraz uważany za niezmienialny.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Trwa próba skonfigurowania PropertyChangedCallback raz <xref:System.Windows.PropertyMetadata.IsSealed%2A>jest `true` na te metadane wystąpienia zgłosi wyjątek.</xref:System.Windows.PropertyMetadata.IsSealed%2A>"
  syntax:
    content: public System.Windows.PropertyChangedCallback PropertyChangedCallback { get; set; }
    return:
      type: System.Windows.PropertyChangedCallback
      description: "A <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> odwołanie do implementacji."
  overload: System.Windows.PropertyMetadata.PropertyChangedCallback*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Nie można ustawić właściwości metadanych, po zastosowaniu ich do operacji właściwości zależności."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.PropertyMetadata.#ctor
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata()
  nameWithType: PropertyMetadata.PropertyMetadata()
  fullName: System.Windows.PropertyMetadata.PropertyMetadata()
- uid: System.Windows.PropertyMetadata.#ctor(System.Object)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object)
  nameWithType: PropertyMetadata.PropertyMetadata(Object)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object)
- uid: System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
- uid: System.Windows.PropertyChangedCallback
  parent: System.Windows
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyChangedCallback
  fullName: System.Windows.PropertyChangedCallback
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object,PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
- uid: System.Windows.CoerceValueCallback
  parent: System.Windows
  isExternal: false
  name: CoerceValueCallback
  nameWithType: CoerceValueCallback
  fullName: System.Windows.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.CoerceValueCallback
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
  fullName: System.Windows.PropertyMetadata.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.DefaultValue
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
  fullName: System.Windows.PropertyMetadata.DefaultValue
- uid: System.Windows.PropertyMetadata.IsSealed
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
  fullName: System.Windows.PropertyMetadata.IsSealed
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: Merge(PropertyMetadata,DependencyProperty)
  nameWithType: PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  fullName: System.Windows.PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
- uid: System.Windows.PropertyMetadata
  parent: System.Windows
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: OnApply(DependencyProperty,Type)
  nameWithType: PropertyMetadata.OnApply(DependencyProperty,Type)
  fullName: System.Windows.PropertyMetadata.OnApply(DependencyProperty,Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
  fullName: System.Windows.PropertyMetadata.PropertyChangedCallback
- uid: System.Windows.PropertyMetadata.#ctor*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata.PropertyMetadata
- uid: System.Windows.PropertyMetadata.CoerceValueCallback*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.DefaultValue*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
- uid: System.Windows.PropertyMetadata.IsSealed*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
- uid: System.Windows.PropertyMetadata.Merge*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: Merge
  nameWithType: PropertyMetadata.Merge
- uid: System.Windows.PropertyMetadata.OnApply*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: OnApply
  nameWithType: PropertyMetadata.OnApply
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
