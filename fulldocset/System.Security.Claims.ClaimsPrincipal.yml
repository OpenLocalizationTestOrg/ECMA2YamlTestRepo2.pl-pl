### YamlMime:ManagedReference
items:
- uid: System.Security.Claims.ClaimsPrincipal
  id: ClaimsPrincipal
  children:
  - System.Security.Claims.ClaimsPrincipal.#ctor
  - System.Security.Claims.ClaimsPrincipal.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  - System.Security.Claims.ClaimsPrincipal.#ctor(System.IO.BinaryReader)
  - System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IIdentity)
  - System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IPrincipal)
  - System.Security.Claims.ClaimsPrincipal.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  - System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.ClaimsPrincipal.Claims
  - System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
  - System.Security.Claims.ClaimsPrincipal.Clone
  - System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)
  - System.Security.Claims.ClaimsPrincipal.Current
  - System.Security.Claims.ClaimsPrincipal.CustomSerializationData
  - System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsPrincipal.FindAll(System.String)
  - System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)
  - System.Security.Claims.ClaimsPrincipal.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)
  - System.Security.Claims.ClaimsPrincipal.Identities
  - System.Security.Claims.ClaimsPrincipal.Identity
  - System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)
  - System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
  - System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)
  - System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])
  langs:
  - csharp
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
  type: Class
  summary: "<xref:System.Security.Principal.IPrincipal>Implementację, która obsługuje wiele tożsamości opartego na oświadczeniach.</xref:System.Security.Principal.IPrincipal>"
  remarks: "Począwszy od programu .NET Framework 4.5, Windows Identity Foundation (WIF) i tożsamości opartego na oświadczeniach zostały pełni zintegrowane w programie .NET Framework. Oznacza to, że wiele klas reprezentujących podmiot zabezpieczeń w programie .NET Framework teraz pochodzi od ClaimsPrincipal niż wdrożenie <xref:System.Security.Principal.IPrincipal>interfejsu.</xref:System.Security.Principal.IPrincipal> Oprócz wykonania <xref:System.Security.Principal.IPrincipal>interfejsu ClaimsPrincipal udostępnia właściwości i metody, które są przydatne podczas pracy z oświadczeniami.</xref:System.Security.Principal.IPrincipal>       ClaimsPrincipal udostępnia kolekcję tożsamości, z których każdy jest <xref:System.Security.Claims.ClaimsIdentity>.</xref:System.Security.Claims.ClaimsIdentity> W przypadku typowych tej kolekcji, który jest dostępny za pośrednictwem <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>właściwość, będzie mieć tylko jeden element.</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>       Wprowadzenie ClaimsPrincipal w programie .NET 4.5 jako podmiot zabezpieczeń, z którego pochodzi najbardziej głównych klas nie wymusza wprowadzanie zmian w sposób, w którym postępowania z tożsamością. Tak, jednak otworzyć więcej możliwości i oferować więcej szansa, aby uzyskać bardziej precyzyjną kontrolę dostępu. Na przykład:-kodu aplikacji może współpracować bezpośrednio z oświadczeń zawartych w bieżący podmiot zabezpieczeń do kierowania dodatkowe zadania uwierzytelniania, autoryzacji i personalizacji.      -FrontPage zasobów z oświadczeń przetwarzania potoku, którego może dotyczyć żądań uwierzytelniania i zasady autoryzacji nawet przed wykonywania osiągnie kodu. Na przykład można skonfigurować do aplikacji sieci web lub usługi w Menedżerze uwierzytelniania oświadczeń niestandardowych, wystąpienia klasy, która jest pochodną <xref:System.Security.Claims.ClaimsAuthenticationManager>klasy.</xref:System.Security.Claims.ClaimsAuthenticationManager> Po odpowiednim skonfigurowaniu potoku przetwarzania żądań wywołuje <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A>metody dla Menedżera uwierzytelniania oświadczeń przekazanie jej ClaimsPrincipal, reprezentujący kontekstu żądania przychodzącego.</xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A> Menedżera uwierzytelniania oświadczeń można wykonywać uwierzytelnianie na podstawie wartości oświadczenia przychodzącego. On też filtrować, przekształcanie i dodawać oświadczenia do zestawu oświadczeń przychodzących. Na przykład można wzbogacić oświadczenia przychodzącego ustawiony za pomocą nowych oświadczeń, utworzyć ze źródła danych lokalnych, takich jak lokalny profil użytkownika — można skonfigurować aplikacji sieci web w Menedżerze autoryzacji oświadczeń niestandardowych, wystąpienia klasy, która jest pochodną <xref:System.Security.Claims.ClaimsAuthorizationManager>klasy.</xref:System.Security.Claims.ClaimsAuthorizationManager> Po odpowiednim skonfigurowaniu potoku przetwarzania żądań pakietów przychodzących ClaimsPrincipal w <xref:System.Security.Claims.AuthorizationContext>i wywołuje <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A>Metoda Menedżera autoryzacji oświadczeń.</xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> </xref:System.Security.Claims.AuthorizationContext> Menedżera autoryzacji oświadczeń może wtedy wymusić autoryzacji na podstawie oświadczeń przychodzących.      -Wbudowanego kontroli dostępu opartej na oświadczeniach kodu może zostać wykonana przez konfigurowanie aplikacji przy użyciu niestandardowego oświadczeń Menedżera autoryzacji i za pomocą <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>klasy do wykonywania kontroli dostępu konieczne lub <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute>wykonywania procedur kontroli dostępu deklaratywne.</xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> </xref:System.IdentityModel.Services.ClaimsPrincipalPermission> Kontroli dostępu opartej na oświadczeniach kodu są wykonywane w tekście, poza potoku przetwarzania i dlatego są dostępne dla wszystkich aplikacji tak długo, jak Menedżer autoryzacji oświadczeń jest skonfigurowany.       Możesz uzyskać wystąpienia ClaimsPrincipal podmiot zabezpieczeń skojarzony z żądaniem w aplikacji RP (lub podmiot zabezpieczeń, pod którym wątek jest wykonywany) przez rzutowanie <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>Właściwości ClaimsPrincipal.</xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> Skojarzona z obiektem ClaimsPrincipal oświadczenia są dostępne za pośrednictwem jego <xref:System.Security.Claims.ClaimsPrincipal.Claims%2A>Właściwości.</xref:System.Security.Claims.ClaimsPrincipal.Claims%2A> <xref:System.Security.Claims.ClaimsPrincipal.Claims%2A>Właściwość zwraca wszystkie oświadczenia zawarty w tożsamościami skojarzonymi z podmiot zabezpieczeń.</xref:System.Security.Claims.ClaimsPrincipal.Claims%2A> W przypadku rzadko, w którym elementu ClaimsPrincipal zawiera wiele <xref:System.Security.Claims.ClaimsIdentity>wystąpień, można użyć <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>Właściwości lub mogą korzystać podstawowej tożsamości za pomocą <xref:System.Security.Claims.ClaimsPrincipal.Identity%2A>Właściwości.</xref:System.Security.Claims.ClaimsPrincipal.Identity%2A> </xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> </xref:System.Security.Claims.ClaimsIdentity> ClaimsPrincipal zapewnia kilka metod za pomocą których można przeszukać tych oświadczeń i w pełni obsługuje język kwerendy zintegrowanym (LINQ). Można dodać tożsamości do podmiotu zabezpieczeń przy użyciu <xref:System.Security.Claims.ClaimsPrincipal.AddIdentities%2A>lub <xref:System.Security.Claims.ClaimsPrincipal.AddIdentity%2A>metody.</xref:System.Security.Claims.ClaimsPrincipal.AddIdentity%2A> </xref:System.Security.Claims.ClaimsPrincipal.AddIdentities%2A>      > [!NOTE] > Można dodać tożsamości do elementu ClaimsPrincipal, obiekt wywołujący musi mieć pełne zaufanie.       Domyślnie priorytet ma WIF <xref:System.Security.Principal.WindowsIdentity>obiekty podczas wybierania podstawowej tożsamości, aby powrócić do <xref:System.Security.Claims.ClaimsPrincipal.Identity%2A>Właściwości.</xref:System.Security.Claims.ClaimsPrincipal.Identity%2A> </xref:System.Security.Principal.WindowsIdentity> To zachowanie można zmienić, podając delegata za pośrednictwem <xref:System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector%2A>właściwości do wykonania zaznaczenia.</xref:System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector%2A> <xref:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector%2A>Właściwość oferuje podobne funkcje dla <xref:System.Security.Claims.ClaimsPrincipal.Current%2A>Właściwości.</xref:System.Security.Claims.ClaimsPrincipal.Current%2A> </xref:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector%2A>       W modelu na podstawie oświadczeń Określa, czy podmiot zabezpieczeń znajduje się w określonej roli zależy od wnioski przedstawione przez jego podstawowej tożsamości. <xref:System.Security.Claims.ClaimsPrincipal.IsInRole%2A>Metoda sprawdza zasadniczo każda tożsamość skojarzoną z podmiot zabezpieczeń, aby określić, czy posiada oświadczenie z wartością określoną rolę.</xref:System.Security.Claims.ClaimsPrincipal.IsInRole%2A> Typ oświadczenia (reprezentowany przez jej <xref:System.Security.Claims.Claim.Type%2A?displayProperty=fullName>Właściwości) używany do określenia, jakie oświadczenia należy zbadać podczas roli kontroli jest określona w tożsamości za pomocą jego <xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName>Właściwości.</xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName> </xref:System.Security.Claims.Claim.Type%2A?displayProperty=fullName> W związku z tym oświadczenia zbadane podczas kontroli roli może być innego typu dla różnych tożsamościami skojarzonymi z podmiot zabezpieczeń."
  example:
  - "The following example extracts the claims presented by a user in an HTTP request and writes them to the HTTP response. The current user is read from the <xref:System.Web.HttpContext> as a ClaimsPrincipal. The claims are then read from it and then are written to the response.  \n  \n```  \n  \nClaimsPrincipal principal = HttpContext.Current.User as ClaimsPrincipal;  \nif (null != principal)  \n{  \n   foreach (Claim claim in principal.Claims)  \n   {  \n      Response.Write(\"CLAIM TYPE: \" + claim.Type + \"; CLAIM VALUE: \" + claim.Value + \"</br>\");  \n   }  \n}  \n```"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class ClaimsPrincipal : System.Security.Principal.IPrincipal
  inheritance:
  - System.Object
  implements:
  - System.Security.Principal.IPrincipal
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.#ctor
  id: '#ctor'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: ClaimsPrincipal()
  nameWithType: ClaimsPrincipal.ClaimsPrincipal()
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> klasy."
  remarks: "Brak tożsamości są skojarzone z nowego wystąpienia. ( <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>Kolekcja jest pusta).</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>"
  syntax:
    content: public ClaimsPrincipal ();
    parameters: []
  overload: System.Security.Claims.ClaimsPrincipal.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: ClaimsPrincipal(IEnumerable<ClaimsIdentity>)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IEnumerable<ClaimsIdentity>)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(IEnumerable<ClaimsIdentity>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> przy użyciu tożsamości określone oświadczenia."
  remarks: "<xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>Kolekcji jest inicjowany z określonej tożsamości.</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>"
  syntax:
    content: public ClaimsPrincipal (System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity> identities);
    parameters:
    - id: identities
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}
      description: "Tożsamości, z którego można zainicjować nowe podmiot zabezpieczeń oświadczeń."
  overload: System.Security.Claims.ClaimsPrincipal.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identities</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.IO.BinaryReader)
  id: '#ctor(System.IO.BinaryReader)'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: ClaimsPrincipal(BinaryReader)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(BinaryReader)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(BinaryReader)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: public ClaimsPrincipal (System.IO.BinaryReader reader);
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "Do dodania."
  overload: System.Security.Claims.ClaimsPrincipal.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IIdentity)
  id: '#ctor(System.Security.Principal.IIdentity)'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: ClaimsPrincipal(IIdentity)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IIdentity)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(IIdentity)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> klasy z określoną tożsamością."
  remarks: "Jeśli określona tożsamość jest z <xref:System.Security.Claims.ClaimsIdentity>, jest używana do inicjowania <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>kolekcji.</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> </xref:System.Security.Claims.ClaimsIdentity> W przeciwnym razie <xref:System.Security.Claims.ClaimsIdentity>jest tworzony przy użyciu określonej tożsamości i jest używany do zainicjowania dla kolekcji.</xref:System.Security.Claims.ClaimsIdentity>"
  syntax:
    content: public ClaimsPrincipal (System.Security.Principal.IIdentity identity);
    parameters:
    - id: identity
      type: System.Security.Principal.IIdentity
      description: "Tożsamość, z którego można zainicjować nowe podmiot zabezpieczeń oświadczeń."
  overload: System.Security.Claims.ClaimsPrincipal.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IPrincipal)
  id: '#ctor(System.Security.Principal.IPrincipal)'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: ClaimsPrincipal(IPrincipal)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IPrincipal)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(IPrincipal)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> klasy z określonego podmiotu."
  remarks: "Jeśli określony podmiot zabezpieczeń jest z <xref:System.Security.Claims.ClaimsPrincipal>, wszystkie jego tożsamości są dodawane do <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>kolekcji.</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> </xref:System.Security.Claims.ClaimsPrincipal> Jeśli określony podmiot zabezpieczeń nie można przypisać z <xref:System.Security.Claims.ClaimsPrincipal>, nowy <xref:System.Security.Claims.ClaimsIdentity>jest tworzona na podstawie <xref:System.Security.Principal.IIdentity>w jego <xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=fullName>Właściwości i dodać do <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>kolekcji.</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> </xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=fullName> </xref:System.Security.Principal.IIdentity> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsPrincipal>"
  syntax:
    content: public ClaimsPrincipal (System.Security.Principal.IPrincipal principal);
    parameters:
    - id: principal
      type: System.Security.Principal.IPrincipal
      description: "Podmiot zabezpieczeń, z którego można zainicjować nowe podmiot zabezpieczeń oświadczeń."
  overload: System.Security.Claims.ClaimsPrincipal.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>principal</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: ClaimsPrincipal(SerializationInfo,StreamingContext)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> klasy z szeregowanego strumienia utworzone za pomocą <xref href=&quot;System.Runtime.Serialization.ISerializable&quot;> </xref>."
  syntax:
    content: protected ClaimsPrincipal (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Dane serializowane."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Kontekst serializacji."
  overload: System.Security.Claims.ClaimsPrincipal.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>info</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  id: AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: AddIdentities(IEnumerable<ClaimsIdentity>)
  nameWithType: ClaimsPrincipal.AddIdentities(IEnumerable<ClaimsIdentity>)
  fullName: System.Security.Claims.ClaimsPrincipal.AddIdentities(IEnumerable<ClaimsIdentity>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Dodaje określone oświadczenia tożsamości do tego podmiotu zabezpieczeń oświadczeń."
  remarks: "Tożsamości są dodawane do <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>kolekcji.</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>"
  syntax:
    content: public virtual void AddIdentities (System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity> identities);
    parameters:
    - id: identities
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}
      description: "Aby dodać tożsamości oświadczeń."
  overload: System.Security.Claims.ClaimsPrincipal.AddIdentities*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identities</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)
  id: AddIdentity(System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: AddIdentity(ClaimsIdentity)
  nameWithType: ClaimsPrincipal.AddIdentity(ClaimsIdentity)
  fullName: System.Security.Claims.ClaimsPrincipal.AddIdentity(ClaimsIdentity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Dodaje określone oświadczenia tożsamości do tego podmiotu zabezpieczeń oświadczeń."
  remarks: "Tożsamość jest dodawany do <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>kolekcji.</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>"
  syntax:
    content: public virtual void AddIdentity (System.Security.Claims.ClaimsIdentity identity);
    parameters:
    - id: identity
      type: System.Security.Claims.ClaimsIdentity
      description: "Tożsamość oświadczeń do dodania."
  overload: System.Security.Claims.ClaimsPrincipal.AddIdentity*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.Claims
  id: Claims
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: Claims
  nameWithType: ClaimsPrincipal.Claims
  fullName: System.Security.Claims.ClaimsPrincipal.Claims
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Pobiera kolekcję zawierającą wszystkie oświadczenia ze wszystkich tożsamości oświadczeń skojarzone z tym podmiot zabezpieczeń oświadczeń."
  remarks: "Podmiot zabezpieczeń oświadczeń ma kolekcję <xref:System.Security.Claims.ClaimsIdentity>obiektów, które jest dostępny za pośrednictwem właściwości tożsamości.</xref:System.Security.Claims.ClaimsIdentity> Każdy <xref:System.Security.Claims.ClaimsIdentity>w kolekcji zawiera co najmniej jedno oświadczenie.</xref:System.Security.Claims.ClaimsIdentity> Właściwość oświadczenia zwraca wszystkie oświadczenia ze wszystkich tożsamości oświadczeń w tej kolekcji.       Właściwość oświadczenia może sprawdzić implementacji niestandardowych <xref:System.Security.Claims.ClaimsAuthenticationManager>klasy do podejmowania decyzji uwierzytelniania lub do filtrowania, Przekształć lub wzbogacić zestawu oświadczeń przychodzących; przez implementacje niestandardowe <xref:System.Security.Claims.ClaimsAuthorizationManager>klasy w celu wymuszenia zasad autoryzacji, lub przez kod aplikacji do podejmowania decyzji dotyczących autoryzacji lub dostosować użytkownika wystąpić na podstawie oświadczeń istnieje w kolekcji.</xref:System.Security.Claims.ClaimsAuthorizationManager> </xref:System.Security.Claims.ClaimsAuthenticationManager>"
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> Claims { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "Oświadczenia skojarzonego z tego podmiotu zabezpieczeń."
  overload: System.Security.Claims.ClaimsPrincipal.Claims*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
  id: ClaimsPrincipalSelector
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: ClaimsPrincipalSelector
  nameWithType: ClaimsPrincipal.ClaimsPrincipalSelector
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Pobiera i ustawia delegata używany do wybierania zwrócony przez podmiot zabezpieczeń oświadczeń <xref:System.Security.Claims.ClaimsPrincipal.Current*>Właściwości.</xref:System.Security.Claims.ClaimsPrincipal.Current*>"
  remarks: "Można ustawić tę właściwość, aby zastąpić domyślne zachowanie <xref:System.Security.Claims.ClaimsPrincipal.Current%2A>Właściwości.</xref:System.Security.Claims.ClaimsPrincipal.Current%2A>"
  syntax:
    content: public static Func<System.Security.Claims.ClaimsPrincipal> ClaimsPrincipalSelector { get; set; }
    return:
      type: System.Func{System.Security.Claims.ClaimsPrincipal}
      description: "Delegat. Wartość domyślna to <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.Clone
  id: Clone
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: Clone()
  nameWithType: ClaimsPrincipal.Clone()
  fullName: System.Security.Claims.ClaimsPrincipal.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Zwraca kopię tego wystąpienia."
  syntax:
    content: public virtual System.Security.Claims.ClaimsPrincipal Clone ();
    parameters: []
    return:
      type: System.Security.Claims.ClaimsPrincipal
      description: "Nową kopię <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> obiektu."
  overload: System.Security.Claims.ClaimsPrincipal.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)
  id: CreateClaimsIdentity(System.IO.BinaryReader)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: CreateClaimsIdentity(BinaryReader)
  nameWithType: ClaimsPrincipal.CreateClaimsIdentity(BinaryReader)
  fullName: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(BinaryReader)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Tworzy nową tożsamość oświadczeń."
  syntax:
    content: protected virtual System.Security.Claims.ClaimsIdentity CreateClaimsIdentity (System.IO.BinaryReader reader);
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "Czytnik binarnego."
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: "Tożsamość oświadczeń utworzony."
  overload: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.Current
  id: Current
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: Current
  nameWithType: ClaimsPrincipal.Current
  fullName: System.Security.Claims.ClaimsPrincipal.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Pobiera bieżący podmiot zabezpieczeń oświadczeń."
  remarks: "Domyślnie <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>jest zwracana.</xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> To zachowanie można zmienić, określając <xref:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector%2A>Właściwości w celu określenia delegowaną, która ma być wywoływana w celu ustalenia bieżący podmiot zabezpieczeń.</xref:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector%2A>"
  syntax:
    content: public static System.Security.Claims.ClaimsPrincipal Current { get; }
    return:
      type: System.Security.Claims.ClaimsPrincipal
      description: "Bieżący podmiot zabezpieczeń oświadczeń."
  overload: System.Security.Claims.ClaimsPrincipal.Current*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.CustomSerializationData
  id: CustomSerializationData
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: CustomSerializationData
  nameWithType: ClaimsPrincipal.CustomSerializationData
  fullName: System.Security.Claims.ClaimsPrincipal.CustomSerializationData
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: protected virtual byte[] CustomSerializationData { get; }
    return:
      type: System.Byte[]
      description: "Do dodania."
  overload: System.Security.Claims.ClaimsPrincipal.CustomSerializationData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})
  id: FindAll(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: FindAll(Predicate<Claim>)
  nameWithType: ClaimsPrincipal.FindAll(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsPrincipal.FindAll(Predicate<Claim>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Pobiera wszystkie oświadczenia, które są dopasowane przez określony predykat."
  remarks: "Zwraca oświadczenia z tożsamości wszystkie skojarzone z podmiot zabezpieczeń oświadczeń."
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> FindAll (Predicate<System.Security.Claims.Claim> match);
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "Funkcja, która wykonuje logika dopasowywania."
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "Oświadczenia zgodne."
  overload: System.Security.Claims.ClaimsPrincipal.FindAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>match</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.String)
  id: FindAll(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: FindAll(String)
  nameWithType: ClaimsPrincipal.FindAll(String)
  fullName: System.Security.Claims.ClaimsPrincipal.FindAll(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Pobiera wszystkie lub oświadczenia, które mają określonego typu oświadczenia."
  remarks: "Zwraca oświadczenia z tożsamości wszystkie skojarzone z podmiot zabezpieczeń oświadczeń. Porównanie jest utworzone za pomocą liczby porządkowej przypadku wrażliwe na `type`."
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> FindAll (string type);
    parameters:
    - id: type
      type: System.String
      description: "Typ oświadczenia, względem którego odpowiadające oświadczeń."
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "Oświadczenia zgodne."
  overload: System.Security.Claims.ClaimsPrincipal.FindAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})
  id: FindFirst(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: FindFirst(Predicate<Claim>)
  nameWithType: ClaimsPrincipal.FindFirst(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsPrincipal.FindFirst(Predicate<Claim>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Pobiera pierwszego oświadczenia dostosowanego przez określony predykat."
  syntax:
    content: public virtual System.Security.Claims.Claim FindFirst (Predicate<System.Security.Claims.Claim> match);
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "Funkcja, która wykonuje logika dopasowywania."
    return:
      type: System.Security.Claims.Claim
      description: "Pierwszy dopasowywania oświadczeń lub <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Jeżeli nie znaleziono."
  overload: System.Security.Claims.ClaimsPrincipal.FindFirst*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>match</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)
  id: FindFirst(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: FindFirst(String)
  nameWithType: ClaimsPrincipal.FindFirst(String)
  fullName: System.Security.Claims.ClaimsPrincipal.FindFirst(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Pobiera pierwszego oświadczenia z określonego typu oświadczenia."
  syntax:
    content: public virtual System.Security.Claims.Claim FindFirst (string type);
    parameters:
    - id: type
      type: System.String
      description: "Typ oświadczenia do dopasowania."
    return:
      type: System.Security.Claims.Claim
      description: "Pierwszy dopasowywania oświadczeń lub <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Jeżeli nie znaleziono."
  overload: System.Security.Claims.ClaimsPrincipal.FindFirst*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ClaimsPrincipal.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsPrincipal.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Wypełnia <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> z dane potrzebne do serializacji bieżącego <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> obiektu."
  syntax:
    content: protected virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Obiekt do wypełniania danych."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Lokalizacja docelowa tej serializacji. Can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Claims.ClaimsPrincipal.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>info</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})
  id: HasClaim(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: HasClaim(Predicate<Claim>)
  nameWithType: ClaimsPrincipal.HasClaim(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsPrincipal.HasClaim(Predicate<Claim>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Określa, czy żadnego tożsamości oświadczeń skojarzone z tym podmiot zabezpieczeń oświadczeń zawiera oświadczenia dostosowanego przez określony predykat."
  syntax:
    content: public virtual bool HasClaim (Predicate<System.Security.Claims.Claim> match);
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "Funkcja, która wykonuje logika dopasowywania."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli oświadczenie zgodne istnieje; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Claims.ClaimsPrincipal.HasClaim*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>match</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)
  id: HasClaim(System.String,System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: HasClaim(String,String)
  nameWithType: ClaimsPrincipal.HasClaim(String,String)
  fullName: System.Security.Claims.ClaimsPrincipal.HasClaim(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Określa, czy dowolne tożsamości oświadczeń skojarzone z tym podmiot zabezpieczeń oświadczeń zawiera oświadczenie o określony typ oświadczenia i wartości."
  remarks: "Nie sprawdza <xref:System.Security.Claims.Claim.Issuer%2A>lub <xref:System.Security.Claims.Claim.OriginalIssuer%2A>Właściwości.</xref:System.Security.Claims.Claim.OriginalIssuer%2A> </xref:System.Security.Claims.Claim.Issuer%2A> Porównanie jest utworzone za pomocą porządkową, z uwzględnieniem wielkości liter w wartości. w przypadku liter w typie."
  syntax:
    content: public virtual bool HasClaim (string type, string value);
    parameters:
    - id: type
      type: System.String
      description: "Typ oświadczenia do dopasowania."
    - id: value
      type: System.String
      description: "Wartość oświadczenia do dopasowania."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli oświadczenie zgodne istnieje; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Claims.ClaimsPrincipal.HasClaim*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is **null**.       -or-       <code>value</code> is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.Identities
  id: Identities
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: Identities
  nameWithType: ClaimsPrincipal.Identities
  fullName: System.Security.Claims.ClaimsPrincipal.Identities
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Pobiera kolekcję zawierającą wszystkie tożsamości oświadczeń skojarzone z tym podmiot zabezpieczeń oświadczeń."
  remarks: "W typowych przypadkach kolekcja zawiera tylko jeden element.       Istnieje możliwość kolekcji zawiera niektóre elementy, które są `null`."
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity> Identities { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}
      description: "Kolekcja tożsamości oświadczeń."
  overload: System.Security.Claims.ClaimsPrincipal.Identities*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.Identity
  id: Identity
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: Identity
  nameWithType: ClaimsPrincipal.Identity
  fullName: System.Security.Claims.ClaimsPrincipal.Identity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Pobiera podstawowy oświadczeń tożsamość skojarzoną z tym podmiot zabezpieczeń oświadczeń."
  remarks: "Domyślnie platformę priorytetem tożsamości typu <xref:System.Security.Principal.WindowsIdentity>wracając tożsamości.</xref:System.Security.Principal.WindowsIdentity> Pierwszy <xref:System.Security.Principal.WindowsIdentity>w <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>kolekcji jest zwracana.</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> </xref:System.Security.Principal.WindowsIdentity> W przypadku nie <xref:System.Security.Principal.WindowsIdentity>w kolekcji, pierwszy tożsamości z <xref:System.Security.Claims.ClaimsIdentity>jest zwracana.</xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Principal.WindowsIdentity> W przypadku nie <xref:System.Security.Claims.ClaimsIdentity>, `null` jest zwracana.</xref:System.Security.Claims.ClaimsIdentity> Jeśli <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>Kolekcja jest pusta, <xref:System.ArgumentNullException>jest generowany.</xref:System.ArgumentNullException> </xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>       Domyślne zachowanie można zmienić, ustawiając <xref:System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector%2A>Właściwości w celu określenia delegowaną, która ma być wywoływana w celu ustalenia tożsamości.</xref:System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector%2A>"
  syntax:
    content: public virtual System.Security.Principal.IIdentity Identity { get; }
    return:
      type: System.Security.Principal.IIdentity
      description: "Głównej oświadczoną tożsamość skojarzoną z tym podmiot zabezpieczeń oświadczeń."
  overload: System.Security.Claims.ClaimsPrincipal.Identity*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)
  id: IsInRole(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: IsInRole(String)
  nameWithType: ClaimsPrincipal.IsInRole(String)
  fullName: System.Security.Claims.ClaimsPrincipal.IsInRole(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Zwraca wartość wskazującą, czy jednostka (użytkownik) reprezentowany przez ten podmiot zabezpieczeń oświadczeń jest w określonej roli."
  remarks: "Metoda IsInRole sprawdza, czy tożsamości, która posiada ten podmiot zabezpieczeń oświadczeń zawiera oświadczenie typu <xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName>gdy wartość oświadczenia jest określony przez wartość `role` parametru.</xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName>      > [!NOTE] > Każdego <xref:System.Security.Claims.ClaimsIdentity>ma swoją własną definicję typu oświadczenia, który reprezentuje roli.</xref:System.Security.Claims.ClaimsIdentity> Można uzyskać dostępu do tego typu oświadczenia i ustawiana za pośrednictwem <xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName>Właściwości.</xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName>"
  syntax:
    content: public virtual bool IsInRole (string role);
    parameters:
    - id: role
      type: System.String
      description: "Rola, do których chcesz sprawdzić."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli podmiot zabezpieczeń oświadczeń znajduje się w określonej roli; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Claims.ClaimsPrincipal.IsInRole*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
  id: PrimaryIdentitySelector
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: PrimaryIdentitySelector
  nameWithType: ClaimsPrincipal.PrimaryIdentitySelector
  fullName: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Pobiera i ustawia delegata używany do wybierania tożsamość oświadczeń zwrócony przez <xref:System.Security.Claims.ClaimsPrincipal.Identity*>Właściwości.</xref:System.Security.Claims.ClaimsPrincipal.Identity*>"
  remarks: "Można ustawić tę właściwość, aby zastąpić domyślne zachowanie <xref:System.Security.Claims.ClaimsPrincipal.Identity%2A>Właściwości.</xref:System.Security.Claims.ClaimsPrincipal.Identity%2A>"
  syntax:
    content: public static Func<System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>,System.Security.Claims.ClaimsIdentity> PrimaryIdentitySelector { get; set; }
    return:
      type: System.Func{System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity},System.Security.Claims.ClaimsIdentity}
      description: "Delegat. Wartość domyślna to <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)
  id: WriteTo(System.IO.BinaryWriter)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: WriteTo(BinaryWriter)
  nameWithType: ClaimsPrincipal.WriteTo(BinaryWriter)
  fullName: System.Security.Claims.ClaimsPrincipal.WriteTo(BinaryWriter)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: public virtual void WriteTo (System.IO.BinaryWriter writer);
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "Do dodania."
  overload: System.Security.Claims.ClaimsPrincipal.WriteTo*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])
  id: WriteTo(System.IO.BinaryWriter,System.Byte[])
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: WriteTo(BinaryWriter,Byte[])
  nameWithType: ClaimsPrincipal.WriteTo(BinaryWriter,Byte[])
  fullName: System.Security.Claims.ClaimsPrincipal.WriteTo(BinaryWriter,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: protected virtual void WriteTo (System.IO.BinaryWriter writer, byte[] userData);
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "Do dodania."
    - id: userData
      type: System.Byte[]
      description: "Do dodania."
  overload: System.Security.Claims.ClaimsPrincipal.WriteTo*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Claims.ClaimsPrincipal.#ctor
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipal()
  nameWithType: ClaimsPrincipal.ClaimsPrincipal()
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal()
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipal(IEnumerable<ClaimsIdentity>)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IEnumerable<ClaimsIdentity>)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(IEnumerable<ClaimsIdentity>)
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<ClaimsIdentity>
  nameWithType: IEnumerable<ClaimsIdentity>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Security.Claims.ClaimsIdentity>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    nameWithType: ClaimsIdentity
    fullName: ClaimsIdentity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.IO.BinaryReader)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipal(BinaryReader)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(BinaryReader)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(BinaryReader)
- uid: System.IO.BinaryReader
  parent: System.IO
  isExternal: true
  name: BinaryReader
  nameWithType: BinaryReader
  fullName: System.IO.BinaryReader
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IIdentity)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipal(IIdentity)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IIdentity)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(IIdentity)
- uid: System.Security.Principal.IIdentity
  parent: System.Security.Principal
  isExternal: true
  name: IIdentity
  nameWithType: IIdentity
  fullName: System.Security.Principal.IIdentity
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IPrincipal)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipal(IPrincipal)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IPrincipal)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(IPrincipal)
- uid: System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipal(SerializationInfo,StreamingContext)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: AddIdentities(IEnumerable<ClaimsIdentity>)
  nameWithType: ClaimsPrincipal.AddIdentities(IEnumerable<ClaimsIdentity>)
  fullName: System.Security.Claims.ClaimsPrincipal.AddIdentities(IEnumerable<ClaimsIdentity>)
- uid: System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: AddIdentity(ClaimsIdentity)
  nameWithType: ClaimsPrincipal.AddIdentity(ClaimsIdentity)
  fullName: System.Security.Claims.ClaimsPrincipal.AddIdentity(ClaimsIdentity)
- uid: System.Security.Claims.ClaimsIdentity
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsIdentity
  nameWithType: ClaimsIdentity
  fullName: System.Security.Claims.ClaimsIdentity
- uid: System.Security.Claims.ClaimsPrincipal.Claims
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Claims
  nameWithType: ClaimsPrincipal.Claims
  fullName: System.Security.Claims.ClaimsPrincipal.Claims
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Claim>
  nameWithType: IEnumerable<Claim>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Security.Claims.Claim>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipalSelector
  nameWithType: ClaimsPrincipal.ClaimsPrincipalSelector
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
- uid: System.Func{System.Security.Claims.ClaimsPrincipal}
  parent: System
  isExternal: true
  name: Func<ClaimsPrincipal>
  nameWithType: Func<ClaimsPrincipal>
  fullName: System.Func<System.Security.Claims.ClaimsPrincipal>
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: Func<System.Security.Claims.ClaimsPrincipal>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.ClaimsPrincipal
    name: ClaimsPrincipal
    nameWithType: ClaimsPrincipal
    fullName: ClaimsPrincipal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.ClaimsPrincipal.Clone
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Clone()
  nameWithType: ClaimsPrincipal.Clone()
  fullName: System.Security.Claims.ClaimsPrincipal.Clone()
- uid: System.Security.Claims.ClaimsPrincipal
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
- uid: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: CreateClaimsIdentity(BinaryReader)
  nameWithType: ClaimsPrincipal.CreateClaimsIdentity(BinaryReader)
  fullName: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(BinaryReader)
- uid: System.Security.Claims.ClaimsPrincipal.Current
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Current
  nameWithType: ClaimsPrincipal.Current
  fullName: System.Security.Claims.ClaimsPrincipal.Current
- uid: System.Security.Claims.ClaimsPrincipal.CustomSerializationData
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: CustomSerializationData
  nameWithType: ClaimsPrincipal.CustomSerializationData
  fullName: System.Security.Claims.ClaimsPrincipal.CustomSerializationData
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: FindAll(Predicate<Claim>)
  nameWithType: ClaimsPrincipal.FindAll(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsPrincipal.FindAll(Predicate<Claim>)
- uid: System.Predicate{System.Security.Claims.Claim}
  parent: System
  isExternal: true
  name: Predicate<Claim>
  nameWithType: Predicate<Claim>
  fullName: System.Predicate<System.Security.Claims.Claim>
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: Predicate<System.Security.Claims.Claim>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: FindAll(String)
  nameWithType: ClaimsPrincipal.FindAll(String)
  fullName: System.Security.Claims.ClaimsPrincipal.FindAll(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: FindFirst(Predicate<Claim>)
  nameWithType: ClaimsPrincipal.FindFirst(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsPrincipal.FindFirst(Predicate<Claim>)
- uid: System.Security.Claims.Claim
  parent: System.Security.Claims
  isExternal: false
  name: Claim
  nameWithType: Claim
  fullName: System.Security.Claims.Claim
- uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: FindFirst(String)
  nameWithType: ClaimsPrincipal.FindFirst(String)
  fullName: System.Security.Claims.ClaimsPrincipal.FindFirst(String)
- uid: System.Security.Claims.ClaimsPrincipal.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ClaimsPrincipal.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsPrincipal.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: HasClaim(Predicate<Claim>)
  nameWithType: ClaimsPrincipal.HasClaim(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsPrincipal.HasClaim(Predicate<Claim>)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: HasClaim(String,String)
  nameWithType: ClaimsPrincipal.HasClaim(String,String)
  fullName: System.Security.Claims.ClaimsPrincipal.HasClaim(String,String)
- uid: System.Security.Claims.ClaimsPrincipal.Identities
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Identities
  nameWithType: ClaimsPrincipal.Identities
  fullName: System.Security.Claims.ClaimsPrincipal.Identities
- uid: System.Security.Claims.ClaimsPrincipal.Identity
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Identity
  nameWithType: ClaimsPrincipal.Identity
  fullName: System.Security.Claims.ClaimsPrincipal.Identity
- uid: System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: IsInRole(String)
  nameWithType: ClaimsPrincipal.IsInRole(String)
  fullName: System.Security.Claims.ClaimsPrincipal.IsInRole(String)
- uid: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: PrimaryIdentitySelector
  nameWithType: ClaimsPrincipal.PrimaryIdentitySelector
  fullName: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
- uid: System.Func{System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity},System.Security.Claims.ClaimsIdentity}
  parent: System
  isExternal: true
  name: Func<IEnumerable<ClaimsIdentity>,ClaimsIdentity>
  nameWithType: Func<IEnumerable<ClaimsIdentity>,ClaimsIdentity>
  fullName: System.Func<System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>,System.Security.Claims.ClaimsIdentity>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>,System.Security.Claims.ClaimsIdentity>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Security.Claims.ClaimsIdentity>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    nameWithType: ClaimsIdentity
    fullName: ClaimsIdentity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    nameWithType: ClaimsIdentity
    fullName: ClaimsIdentity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: WriteTo(BinaryWriter)
  nameWithType: ClaimsPrincipal.WriteTo(BinaryWriter)
  fullName: System.Security.Claims.ClaimsPrincipal.WriteTo(BinaryWriter)
- uid: System.IO.BinaryWriter
  parent: System.IO
  isExternal: true
  name: BinaryWriter
  nameWithType: BinaryWriter
  fullName: System.IO.BinaryWriter
- uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: WriteTo(BinaryWriter,Byte[])
  nameWithType: ClaimsPrincipal.WriteTo(BinaryWriter,Byte[])
  fullName: System.Security.Claims.ClaimsPrincipal.WriteTo(BinaryWriter,Byte[])
- uid: System.Security.Claims.ClaimsPrincipal.#ctor*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal.ClaimsPrincipal
- uid: System.Security.Claims.ClaimsPrincipal.AddIdentities*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: AddIdentities
  nameWithType: ClaimsPrincipal.AddIdentities
- uid: System.Security.Claims.ClaimsPrincipal.AddIdentity*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: AddIdentity
  nameWithType: ClaimsPrincipal.AddIdentity
- uid: System.Security.Claims.ClaimsPrincipal.Claims*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Claims
  nameWithType: ClaimsPrincipal.Claims
- uid: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipalSelector
  nameWithType: ClaimsPrincipal.ClaimsPrincipalSelector
- uid: System.Security.Claims.ClaimsPrincipal.Clone*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Clone
  nameWithType: ClaimsPrincipal.Clone
- uid: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: CreateClaimsIdentity
  nameWithType: ClaimsPrincipal.CreateClaimsIdentity
- uid: System.Security.Claims.ClaimsPrincipal.Current*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Current
  nameWithType: ClaimsPrincipal.Current
- uid: System.Security.Claims.ClaimsPrincipal.CustomSerializationData*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: CustomSerializationData
  nameWithType: ClaimsPrincipal.CustomSerializationData
- uid: System.Security.Claims.ClaimsPrincipal.FindAll*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: FindAll
  nameWithType: ClaimsPrincipal.FindAll
- uid: System.Security.Claims.ClaimsPrincipal.FindFirst*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: FindFirst
  nameWithType: ClaimsPrincipal.FindFirst
- uid: System.Security.Claims.ClaimsPrincipal.GetObjectData*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: GetObjectData
  nameWithType: ClaimsPrincipal.GetObjectData
- uid: System.Security.Claims.ClaimsPrincipal.HasClaim*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: HasClaim
  nameWithType: ClaimsPrincipal.HasClaim
- uid: System.Security.Claims.ClaimsPrincipal.Identities*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Identities
  nameWithType: ClaimsPrincipal.Identities
- uid: System.Security.Claims.ClaimsPrincipal.Identity*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Identity
  nameWithType: ClaimsPrincipal.Identity
- uid: System.Security.Claims.ClaimsPrincipal.IsInRole*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: IsInRole
  nameWithType: ClaimsPrincipal.IsInRole
- uid: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: PrimaryIdentitySelector
  nameWithType: ClaimsPrincipal.PrimaryIdentitySelector
- uid: System.Security.Claims.ClaimsPrincipal.WriteTo*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: WriteTo
  nameWithType: ClaimsPrincipal.WriteTo
