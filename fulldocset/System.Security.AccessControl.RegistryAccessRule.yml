### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.RegistryAccessRule
  id: RegistryAccessRule
  children:
  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.RegistryAccessRule.RegistryRights
  langs:
  - csharp
  name: RegistryAccessRule
  nameWithType: RegistryAccessRule
  fullName: System.Security.AccessControl.RegistryAccessRule
  type: Class
  summary: "Reprezentuje zestaw praw dostępu dozwolony lub niedozwolony dla użytkownika lub grupy. Ta klasa nie może być dziedziczona."
  remarks: "Klasa RegistryAccessRule jest jeden zestaw klas, które umożliwiają zarządzanie Windows kontrolę dostępu dla kluczy rejestru programu .NET Framework. Omówienie tych klas i ich związek z podstawowej struktury kontroli dostępu do systemu Windows temacie <xref:System.Security.AccessControl.RegistrySecurity>.</xref:System.Security.AccessControl.RegistrySecurity>      > [!NOTE] > Kontrolę dostępu systemu Windows można stosować tylko do kluczy rejestru. Nie można zastosować do pary poszczególnych klucz/wartość przechowywanych w kluczu.       Aby uzyskać listę reguł obecnie stosowane do klucza rejestru, należy użyć <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName>metodę, aby pobrać <xref:System.Security.AccessControl.RegistrySecurity>obiekt, a następnie użyć jego <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A>metodę, aby uzyskać kolekcję obiektów RegistryAccessRule.</xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> </xref:System.Security.AccessControl.RegistrySecurity> </xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName>       Obiekty RegistryAccessRule nie mapowanie jeden do jednego z wpisów kontroli dostępu na liście podstawowej DACL kontroli dostępu (DACL). Po otrzymaniu zbiór wszystkich reguł dostępu do klucza rejestru zestaw zawiera minimalną liczbę reguł obecnie wymaganych do wyrażenia wszystkich wpisów kontroli dostępu.      > [!NOTE] > Zmienić podstawowej wpisów kontroli dostępu, jak dodać i usunąć reguły. Informacje w regułach są scalane, jeśli to możliwe, aby utrzymać najmniejszą liczbę wpisów kontroli dostępu. W związku z tym odczytu bieżącą listę reguł, może nie wygląda tak samo jak lista wszystkich reguł, które zostały dodane.       Umożliwia określenie uprawnień dostępu do Zezwalaj lub Odmów użytkownikowi lub grupie RegistryAccessRule obiektów. RegistryAccessRule, który obiekt zawsze reprezentuje zezwolenie na dostęp lub odmowa dostępu, nigdy nie oba.       Aby zastosować regułę do klucza rejestru, użyj <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName>metodę, aby pobrać <xref:System.Security.AccessControl.RegistrySecurity>obiektu.</xref:System.Security.AccessControl.RegistrySecurity> </xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> Modyfikowanie <xref:System.Security.AccessControl.RegistrySecurity>obiektu za pomocą jej metod dodać regułę, a następnie użyć <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName>metody ponownie dołączyć obiektu zabezpieczeń.</xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> </xref:System.Security.AccessControl.RegistrySecurity>      > [!IMPORTANT] > Zmiany <xref:System.Security.AccessControl.RegistrySecurity>obiektu nie wpływają na poziomy dostępu do klucza rejestru do czasu wywołania <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName>metody można przypisać obiektu zmieniony zabezpieczeń do klucza rejestru.</xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> </xref:System.Security.AccessControl.RegistrySecurity>       Obiekty RegistryAccessRule są niezmienne. Zabezpieczeń dla klucza rejestru jest zmodyfikowany za pomocą metody <xref:System.Security.AccessControl.RegistrySecurity>klasy można dodać ani usunąć reguły; zgodnie z tym podstawowej wpisów kontroli dostępu są modyfikowane.</xref:System.Security.AccessControl.RegistrySecurity>"
  example:
  - "The following code example demonstrates access rules with inheritance and propagation. The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object, then creates and adds two rules that have the <xref:System.Security.AccessControl.InheritanceFlags> flag. The first rule has no propagation flags, while the second has <xref:System.Security.AccessControl.PropagationFlags> and <xref:System.Security.AccessControl.PropagationFlags>.  \n  \n The program displays the rules in the <xref:System.Security.AccessControl.RegistrySecurity> object, and then uses the object to create a subkey. The program creates a child subkey and a grandchild subkey, and then displays the security for each subkey. Finally, the program deletes the test keys.  \n  \n [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/add/codesnippet/visualbasic/t-system.security.access_11_1.vb)]\n [!code-cs[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/add/codesnippet/csharp/t-system.security.access_11_1.cs)]"
  syntax:
    content: 'public sealed class RegistryAccessRule : System.Security.AccessControl.AccessRule'
  inheritance:
  - System.Object
  - System.Security.AccessControl.AuthorizationRule
  - System.Security.AccessControl.AccessRule
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.AccessRule.AccessControlType
  - System.Security.AccessControl.AuthorizationRule.AccessMask
  - System.Security.AccessControl.AuthorizationRule.IdentityReference
  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags
  - System.Security.AccessControl.AuthorizationRule.IsInherited
  - System.Security.AccessControl.AuthorizationRule.PropagationFlags
  platform:
  - net462
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.RegistryAccessRule
  langs:
  - csharp
  name: RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Security.AccessControl.RegistryAccessRule&quot;> </xref> klasy Określanie użytkownika lub grupy, ta reguła ma zastosowanie do prawa dostępu i określa, czy prawa dostępu określonego zezwolono na dostęp lub odmowa dostępu."
  remarks: "Ten konstruktor Określa domyślne propagacji i dziedziczenia. To, że <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>do <xref:System.Security.AccessControl.PropagationFlags?displayProperty=fullName>.</xref:System.Security.AccessControl.PropagationFlags?displayProperty=fullName> </xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>"
  syntax:
    content: public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "Użytkownik lub grupa, którego będzie stosowana ta reguła. Musi być typu <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> lub typu, takich jak <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> którego można przekonwertować na typ <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
    - id: registryRights
      type: System.Security.AccessControl.RegistryRights
      description: "Bitowe połączenie <xref href=&quot;System.Security.AccessControl.RegistryRights&quot;> </xref> wartości, wskazując praw dozwolony lub niedozwolony."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "Jeden z <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> wartość wskazującą, czy prawa zezwolono na dostęp lub odmowa dostępu."
  overload: System.Security.AccessControl.RegistryAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>registryRights</code>Określa nieprawidłową wartość.       - lub - <code>type</code> określa nieprawidłową wartość."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - lub - <code>eventRights</code> wynosi zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>nie jest ani typu <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> ani typu, takich jak <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> którego można przekonwertować na typ <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.RegistryAccessRule
  langs:
  - csharp
  name: RegistryAccessRule(String,RegistryRights,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(String,RegistryRights,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(String,RegistryRights,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Security.AccessControl.RegistryAccessRule&quot;> </xref> klasy, określając nazwę użytkownika lub grupy, ta reguła ma zastosowanie do prawa dostępu i określa, czy prawa dostępu określonego zezwolono na dostęp lub odmowa dostępu."
  remarks: "Ten konstruktor Określa domyślne propagacji i dziedziczenia. To, że <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>do <xref:System.Security.AccessControl.PropagationFlags?displayProperty=fullName>.</xref:System.Security.AccessControl.PropagationFlags?displayProperty=fullName> </xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>       Ten konstruktor jest odpowiednikiem tworzenie <xref:System.Security.Principal.NTAccount>obiektu, przekazując `identity` do <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName>Konstruktor i przekazywanie nowo utworzony <xref:System.Security.Principal.NTAccount>do obiektu <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.AccessControlType%29>konstruktora.</xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.AccessControlType%29> </xref:System.Security.Principal.NTAccount> </xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> </xref:System.Security.Principal.NTAccount>"
  example:
  - "The following code example creates registry access rules and adds them to a <xref:System.Security.AccessControl.RegistrySecurity> object, showing how rules that allow and deny rights remain separate, while compatible rules of the same kind are merged.  \n  \n [!code-cs[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/add/codesnippet/csharp/cf7d2ba9-37b1-4239-a52a-_1.cs)]\n [!code-vb[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/cf7d2ba9-37b1-4239-a52a-_1.vb)]"
  syntax:
    content: public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.String
      description: "Nazwa użytkownika lub grupy, będzie stosowana ta reguła."
    - id: registryRights
      type: System.Security.AccessControl.RegistryRights
      description: "Bitowe połączenie <xref href=&quot;System.Security.AccessControl.RegistryRights&quot;> </xref> wartości, wskazując praw dozwolony lub niedozwolony."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "Jeden z <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> wartość wskazującą, czy prawa zezwolono na dostęp lub odmowa dostępu."
  overload: System.Security.AccessControl.RegistryAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>registryRights</code>Określa nieprawidłową wartość.       - lub - <code>type</code> określa nieprawidłową wartość."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>registryRights</code>wynosi zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - lub - <code>identity</code> jest ciągiem o zerowej długości.       - lub - <code>identity</code> ma więcej niż 512 znaków."
  platform:
  - net462
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.RegistryAccessRule
  langs:
  - csharp
  name: RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Security.AccessControl.RegistryAccessRule&quot;> </xref> klasy Określanie użytkownika lub grupy, ta reguła ma zastosowanie do prawa dostępu flagi dziedziczenia flagi propagacji i określa, czy prawa dostępu określonego zezwolono na dostęp lub odmowa dostępu."
  remarks: "All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag. If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected. If the flag is present, the rule is propagated as shown in the following table. The table assumes there is a subkey S with child subkey CS and grandchild subkey GS. That is, the path for the grandchild subkey is S\\CS\\GS.  \n  \n|Propagation flags|S|CS|GS|  \n|-----------------------|-------|--------|--------|  \n|<xref:System.Security.AccessControl.PropagationFlags>|X|X|X|  \n|<xref:System.Security.AccessControl.PropagationFlags>|X|X||  \n|<xref:System.Security.AccessControl.PropagationFlags>||X|X|  \n|<xref:System.Security.AccessControl.PropagationFlags>, <xref:System.Security.AccessControl.PropagationFlags>||X||  \n  \n The pattern for the grandchild subkey governs all subkeys contained by the grandchild subkey.  \n  \n For example, if the <xref:System.Security.AccessControl.InheritanceFlags> flag is specified for `inheritanceFlags` and the <xref:System.Security.AccessControl.PropagationFlags> propagation flag is specified for `propagationFlags`, this rule does not apply to the immediate subkey, but does apply to all its immediate child subkeys and to all subkeys they contain.  \n  \n> [!NOTE]\n>  Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag for `inheritanceFlags`, there is no point in doing so. For the purposes of access control, the name/value pairs in a subkey are not separate objects. The access rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags> flag. Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags> flag needlessly complicates the maintenance of rules, because it interferes with the combination of otherwise compatible rules."
  syntax:
    content: public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "Użytkownik lub grupa, którego będzie stosowana ta reguła. Musi być typu <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> lub typu, takich jak <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> którego można przekonwertować na typ <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
    - id: registryRights
      type: System.Security.AccessControl.RegistryRights
      description: "Bitowe połączenie <xref href=&quot;System.Security.AccessControl.RegistryRights&quot;> </xref> wartości określających prawa dozwolony lub niedozwolony."
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "Bitowe połączenie <xref href=&quot;System.Security.AccessControl.InheritanceFlags&quot;> </xref> flagi określające, jak prawa dostępu są dziedziczone z innych obiektów."
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "Bitowe połączenie <xref href=&quot;System.Security.AccessControl.PropagationFlags&quot;> </xref> flagi określające, jak prawa dostępu są propagowane do innych obiektów."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "Jeden z <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> wartości określający, czy prawa zezwolono na dostęp lub odmowa dostępu."
  overload: System.Security.AccessControl.RegistryAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>registryRights</code>Określa nieprawidłową wartość.       - lub - <code>type</code> określa nieprawidłową wartość.       - lub - <code>inheritanceFlags</code> określa nieprawidłową wartość.       - lub - <code>propagationFlags</code> określa nieprawidłową wartość."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - lub - <code>registryRights</code> wynosi zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>nie jest ani typu <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>, ani typu, takich jak <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> którego można przekonwertować na typ <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.RegistryAccessRule
  langs:
  - csharp
  name: RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Security.AccessControl.RegistryAccessRule&quot;> </xref> klasy określający nazwę użytkownika lub grupy, ta reguła ma zastosowanie do prawa dostępu flagi dziedziczenia flagi propagacji i określa, czy prawa dostępu określonego zezwolono na dostęp lub odmowa dostępu."
  remarks: "All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag. If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected. If the flag is present, the rule is propagated as shown in the following table. The table assumes there is a subkey S with child subkey CS and grandchild subkey GS. That is, the path for the grandchild subkey is S\\CS\\GS.  \n  \n|Propagation flags|S|CS|GS|  \n|-----------------------|-------|--------|--------|  \n|<xref:System.Security.AccessControl.PropagationFlags>|X|X|X|  \n|<xref:System.Security.AccessControl.PropagationFlags>|X|X||  \n|<xref:System.Security.AccessControl.PropagationFlags>||X|X|  \n|<xref:System.Security.AccessControl.PropagationFlags>, <xref:System.Security.AccessControl.PropagationFlags>||X||  \n  \n The pattern for the grandchild subkey governs all subkeys contained by the grandchild subkey.  \n  \n For example, if the <xref:System.Security.AccessControl.InheritanceFlags> flag is specified for `inheritanceFlags` and the <xref:System.Security.AccessControl.PropagationFlags> propagation flag is specified for `propagationFlags`, this rule does not apply to the immediate subkey, but does apply to all its immediate child subkeys and to all subkeys they contain.  \n  \n> [!NOTE]\n>  Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag for `inheritanceFlags`, there is no point in doing so. For the purposes of access control, the name/value pairs in a subkey are not separate objects. The access rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags> flag. Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags> flag needlessly complicates the maintenance of rules, because it interferes with the combination of otherwise compatible rules.  \n  \n This constructor is equivalent to creating an <xref:System.Security.Principal.NTAccount> object, by passing `identity` to the <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> constructor, and passing the newly created <xref:System.Security.Principal.NTAccount> object to the <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.InheritanceFlags%2CSystem.Security.AccessControl.PropagationFlags%2CSystem.Security.AccessControl.AccessControlType%29> constructor."
  example:
  - "The following code example demonstrates access rules with inheritance and propagation. The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object, and then creates and adds two rules that have the <xref:System.Security.AccessControl.InheritanceFlags> flag. The first rule has no propagation flags, while the second has <xref:System.Security.AccessControl.PropagationFlags> and <xref:System.Security.AccessControl.PropagationFlags>.  \n  \n The program displays the rules in the <xref:System.Security.AccessControl.RegistrySecurity> object, and then uses the <xref:System.Security.AccessControl.RegistrySecurity> object to create a subkey. The program creates a child subkey and a grandchild subkey, and then displays the rules for each subkey. Finally, the program deletes the test keys.  \n  \n [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/add/codesnippet/visualbasic/43217ff3-f8bd-4a0e-bd95-_1.vb)]\n [!code-cs[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/add/codesnippet/csharp/43217ff3-f8bd-4a0e-bd95-_1.cs)]"
  syntax:
    content: public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.String
      description: "Nazwa użytkownika lub grupy, będzie stosowana ta reguła."
    - id: registryRights
      type: System.Security.AccessControl.RegistryRights
      description: "Bitowe połączenie <xref href=&quot;System.Security.AccessControl.RegistryRights&quot;> </xref> wartości, wskazując praw dozwolony lub niedozwolony."
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "Bitowe połączenie <xref href=&quot;System.Security.AccessControl.InheritanceFlags&quot;> </xref> flagi określające, jak prawa dostępu są dziedziczone z innych obiektów."
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "Bitowe połączenie <xref href=&quot;System.Security.AccessControl.PropagationFlags&quot;> </xref> flagi określające, jak prawa dostępu są propagowane do innych obiektów."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "Jeden z <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> wartości określający, czy prawa zezwolono na dostęp lub odmowa dostępu."
  overload: System.Security.AccessControl.RegistryAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>registryRights</code>Określa nieprawidłową wartość.       - lub - <code>type</code> określa nieprawidłową wartość.       - lub - <code>inheritanceFlags</code> określa nieprawidłową wartość.       - lub - <code>propagationFlags</code> określa nieprawidłową wartość."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>eventRights</code>wynosi zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - lub - <code>identity</code> jest ciągiem o zerowej długości.       - lub - <code>identity</code> ma więcej niż 512 znaków."
  platform:
  - net462
- uid: System.Security.AccessControl.RegistryAccessRule.RegistryRights
  id: RegistryRights
  parent: System.Security.AccessControl.RegistryAccessRule
  langs:
  - csharp
  name: RegistryRights
  nameWithType: RegistryAccessRule.RegistryRights
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryRights
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Pobiera prawa dozwolony lub odrzucany przez regułę dostępu."
  remarks: "<xref:System.Security.AccessControl.RegistryAccessRule>obiekty są niezmienne.</xref:System.Security.AccessControl.RegistryAccessRule> Można utworzyć nową regułę dostępu reprezentujący inny użytkownik, inne prawa lub innej <xref:System.Security.AccessControl.AccessControlType>, ale nie można zmodyfikować istniejącą regułę dostępu.</xref:System.Security.AccessControl.AccessControlType>"
  syntax:
    content: public System.Security.AccessControl.RegistryRights RegistryRights { get; }
    return:
      type: System.Security.AccessControl.RegistryRights
      description: "Bitowe połączenie <xref href=&quot;System.Security.AccessControl.RegistryRights&quot;> </xref> wartości, wskazując praw dozwolony lub odrzucany przez regułę dostępu."
  overload: System.Security.AccessControl.RegistryAccessRule.RegistryRights*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.AccessControl.AccessRule
  isExternal: false
  name: System.Security.AccessControl.AccessRule
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  nameWithType: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Security.AccessControl.RegistryRights
  parent: System.Security.AccessControl
  isExternal: false
  name: RegistryRights
  nameWithType: RegistryRights
  fullName: System.Security.AccessControl.RegistryRights
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  nameWithType: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryAccessRule(String,RegistryRights,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(String,RegistryRights,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(String,RegistryRights,AccessControlType)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
- uid: System.Security.AccessControl.InheritanceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: InheritanceFlags
  nameWithType: InheritanceFlags
  fullName: System.Security.AccessControl.InheritanceFlags
- uid: System.Security.AccessControl.PropagationFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: PropagationFlags
  nameWithType: PropagationFlags
  fullName: System.Security.AccessControl.PropagationFlags
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
- uid: System.Security.AccessControl.RegistryAccessRule.RegistryRights
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryRights
  nameWithType: RegistryAccessRule.RegistryRights
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryRights
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor*
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryAccessRule
  nameWithType: RegistryAccessRule.RegistryAccessRule
- uid: System.Security.AccessControl.RegistryAccessRule.RegistryRights*
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryRights
  nameWithType: RegistryAccessRule.RegistryRights
