### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.QueryStringConverter
  id: QueryStringConverter
  children:
  - System.ServiceModel.Dispatcher.QueryStringConverter.#ctor
  - System.ServiceModel.Dispatcher.QueryStringConverter.CanConvert(System.Type)
  - System.ServiceModel.Dispatcher.QueryStringConverter.ConvertStringToValue(System.String,System.Type)
  - System.ServiceModel.Dispatcher.QueryStringConverter.ConvertValueToString(System.Object,System.Type)
  langs:
  - csharp
  name: QueryStringConverter
  nameWithType: QueryStringConverter
  fullName: System.ServiceModel.Dispatcher.QueryStringConverter
  type: Class
  summary: "Ta klasa konwertuje parametru w ciąg zapytania do obiektu odpowiedniego typu. Go przekonwertować parametru z obiektu do reprezentacji ciągu zapytania."
  remarks: "Parametry można określić w ciągu zapytania w adresie URL. Ta klasa ma wskaźników określonych w ciągu i konwertuje je na obiekty. Na przykład następujące kontrakt jest zdefiniowany.      ```   [ServiceContract]   interface Calculator   {      [WebGet(UriTemplate=&quot;Add?n1={n1}&n2={n2}&quot;)]      [OperationContract]      long Add(long n1, long n2);   }   ```A [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] usługa implementuje ten interfejs i naraża go na punkt końcowy z <xref:System.ServiceModel.Description.WebHttpBehavior>na http://localhost:&8000;/MyCalcService.</xref:System.ServiceModel.Description.WebHttpBehavior> `Add` Operacja usługi może być wywoływany przez wysyłanie HTTP GET do http://localhost:&8000;/MyCalcService/Add? n1 =&10; n2 =&5;. QueryStringConverter odbiera ten adres URL i konwertuje dwóch parametrów (n1 i n2) określonego w adresie URL do dwóch `long` obiektów z odpowiednimi wartościami.       Klasy mogą dziedziczyć po QueryStringConverter, aby kontrolować sposób parametrów ciągu zapytania są mapowane do parametrów operacji usługi.       QueryStringConverter obsługuje następujące typy domyślnie:- <xref:System.Byte>- <xref:System.SByte>— <xref:System.Int16>— <xref:System.Int32>— <xref:System.Int64>— <xref:System.UInt16>— <xref:System.UInt32>— <xref:System.UInt64>— <xref:System.Single>— <xref:System.Double>— <xref:System.Char>— <xref:System.Decimal>— <xref:System.Boolean>— <xref:System.String>— <xref:System.DateTime>— <xref:System.TimeSpan>— <xref:System.Guid>— <xref:System.Byte>tablicy — <xref:System.Uri>— <xref:System.Object>— <xref:System.DateTimeOffset>— wyliczenia — typy, które mają `TypeConverterAttribute` który można przekonwertować typu do i z reprezentacji w postaci ciągu.</xref:System.DateTimeOffset> </xref:System.Object> </xref:System.Uri> </xref:System.Byte> </xref:System.Guid> </xref:System.TimeSpan> </xref:System.DateTime> </xref:System.String> </xref:System.Boolean> </xref:System.Decimal> </xref:System.Char> </xref:System.Double> </xref:System.Single> </xref:System.UInt64> </xref:System.UInt32> </xref:System.UInt16> </xref:System.Int64> </xref:System.Int32> </xref:System.Int16> </xref:System.SByte> </xref:System.Byte>"
  example:
  - "The following code shows how to use the QueryStringConverter class to convert between a string and a 32-bit integer.  \n  \n [!code-vb[QueryStringConverter#0](~/add/codesnippet/visualbasic/t-system.servicemodel.di_3_1.vb)]\n [!code-cs[QueryStringConverter#0](~/add/codesnippet/csharp/t-system.servicemodel.di_3_1.cs)]"
  syntax:
    content: public class QueryStringConverter
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.QueryStringConverter.#ctor
  id: '#ctor'
  parent: System.ServiceModel.Dispatcher.QueryStringConverter
  langs:
  - csharp
  name: QueryStringConverter()
  nameWithType: QueryStringConverter.QueryStringConverter()
  fullName: System.ServiceModel.Dispatcher.QueryStringConverter.QueryStringConverter()
  type: Constructor
  assemblies:
  - System.ServiceModel.Web
  namespace: System.ServiceModel.Dispatcher
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.ServiceModel.Dispatcher.QueryStringConverter&quot;> </xref> klasy."
  remarks: ''
  example:
  - "The following code shows how to create an instance of the <xref:System.ServiceModel.Dispatcher.QueryStringConverter> class.  \n  \n [!code-vb[QueryStringConverter#1](~/add/codesnippet/visualbasic/m-system.servicemodel.di_0_1.vb)]\n [!code-cs[QueryStringConverter#1](~/add/codesnippet/csharp/m-system.servicemodel.di_0_1.cs)]"
  syntax:
    content: public QueryStringConverter ();
    parameters: []
  overload: System.ServiceModel.Dispatcher.QueryStringConverter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.QueryStringConverter.CanConvert(System.Type)
  id: CanConvert(System.Type)
  parent: System.ServiceModel.Dispatcher.QueryStringConverter
  langs:
  - csharp
  name: CanConvert(Type)
  nameWithType: QueryStringConverter.CanConvert(Type)
  fullName: System.ServiceModel.Dispatcher.QueryStringConverter.CanConvert(Type)
  type: Method
  assemblies:
  - System.ServiceModel.Web
  namespace: System.ServiceModel.Dispatcher
  summary: "Określa, czy do i z reprezentacji ciągu można przekonwertować określonego typu."
  remarks: ''
  example:
  - "The following code shows how to determine whether the <xref:System.ServiceModel.Dispatcher.QueryStringConverter> can convert to and from the specified type.  \n  \n [!code-vb[QueryStringConverter#2](~/add/codesnippet/visualbasic/m-system.servicemodel.di_2_1.vb)]\n [!code-cs[QueryStringConverter#2](~/add/codesnippet/csharp/m-system.servicemodel.di_2_1.cs)]"
  syntax:
    content: public virtual bool CanConvert (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>Przekonwertować.</xref:System.Type>"
    return:
      type: System.Boolean
      description: "Wartość, która określa, czy można przekonwertować typu."
  overload: System.ServiceModel.Dispatcher.QueryStringConverter.CanConvert*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.QueryStringConverter.ConvertStringToValue(System.String,System.Type)
  id: ConvertStringToValue(System.String,System.Type)
  parent: System.ServiceModel.Dispatcher.QueryStringConverter
  langs:
  - csharp
  name: ConvertStringToValue(String,Type)
  nameWithType: QueryStringConverter.ConvertStringToValue(String,Type)
  fullName: System.ServiceModel.Dispatcher.QueryStringConverter.ConvertStringToValue(String,Type)
  type: Method
  assemblies:
  - System.ServiceModel.Web
  namespace: System.ServiceModel.Dispatcher
  summary: "Konwertuje określony typ parametru ciągu zapytania."
  remarks: "Jeśli `parameterType` jest typem wartości i parametru jest `null`, domyślna wartość `parameterType` jest zwracany."
  example:
  - "The following code shows how to convert a string to the specified type.  \n  \n [!code-vb[QueryStringConverter#2](~/add/codesnippet/visualbasic/ee6d3c2e-1d57-42a1-a8dd-_1.vb)]\n [!code-cs[QueryStringConverter#2](~/add/codesnippet/csharp/ee6d3c2e-1d57-42a1-a8dd-_1.cs)]"
  syntax:
    content: public virtual object ConvertStringToValue (string parameter, Type parameterType);
    parameters:
    - id: parameter
      type: System.String
      description: "Formularz ciąg parametr i wartość."
    - id: parameterType
      type: System.Type
      description: "<xref:System.Type>Można przekonwertować parametru.</xref:System.Type>"
    return:
      type: System.Object
      description: "Przekonwertowanego parametru."
  overload: System.ServiceModel.Dispatcher.QueryStringConverter.ConvertStringToValue*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "Podany ciąg ma niepoprawny format."
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.QueryStringConverter.ConvertValueToString(System.Object,System.Type)
  id: ConvertValueToString(System.Object,System.Type)
  parent: System.ServiceModel.Dispatcher.QueryStringConverter
  langs:
  - csharp
  name: ConvertValueToString(Object,Type)
  nameWithType: QueryStringConverter.ConvertValueToString(Object,Type)
  fullName: System.ServiceModel.Dispatcher.QueryStringConverter.ConvertValueToString(Object,Type)
  type: Method
  assemblies:
  - System.ServiceModel.Web
  namespace: System.ServiceModel.Dispatcher
  summary: "Konwertuje parametr reprezentację ciągu zapytania."
  remarks: ''
  example:
  - "The following code shows how to convert a typed value into a string representation of the value.  \n  \n [!code-vb[QueryStringConverter#3](~/add/codesnippet/visualbasic/6edfb790-d20b-4419-8935-_1.vb)]\n [!code-cs[QueryStringConverter#3](~/add/codesnippet/csharp/6edfb790-d20b-4419-8935-_1.cs)]"
  syntax:
    content: public virtual string ConvertValueToString (object parameter, Type parameterType);
    parameters:
    - id: parameter
      type: System.Object
      description: "Parametr można przekonwertować."
    - id: parameterType
      type: System.Type
      description: "<xref:System.Type>Parametru do konwersji.</xref:System.Type>"
    return:
      type: System.String
      description: "Nazwa parametru i wartość."
  overload: System.ServiceModel.Dispatcher.QueryStringConverter.ConvertValueToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.FormatException
  isExternal: true
  name: System.FormatException
- uid: System.ServiceModel.Dispatcher.QueryStringConverter.#ctor
  parent: System.ServiceModel.Dispatcher.QueryStringConverter
  isExternal: false
  name: QueryStringConverter()
  nameWithType: QueryStringConverter.QueryStringConverter()
  fullName: System.ServiceModel.Dispatcher.QueryStringConverter.QueryStringConverter()
- uid: System.ServiceModel.Dispatcher.QueryStringConverter.CanConvert(System.Type)
  parent: System.ServiceModel.Dispatcher.QueryStringConverter
  isExternal: false
  name: CanConvert(Type)
  nameWithType: QueryStringConverter.CanConvert(Type)
  fullName: System.ServiceModel.Dispatcher.QueryStringConverter.CanConvert(Type)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ServiceModel.Dispatcher.QueryStringConverter.ConvertStringToValue(System.String,System.Type)
  parent: System.ServiceModel.Dispatcher.QueryStringConverter
  isExternal: false
  name: ConvertStringToValue(String,Type)
  nameWithType: QueryStringConverter.ConvertStringToValue(String,Type)
  fullName: System.ServiceModel.Dispatcher.QueryStringConverter.ConvertStringToValue(String,Type)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ServiceModel.Dispatcher.QueryStringConverter.ConvertValueToString(System.Object,System.Type)
  parent: System.ServiceModel.Dispatcher.QueryStringConverter
  isExternal: false
  name: ConvertValueToString(Object,Type)
  nameWithType: QueryStringConverter.ConvertValueToString(Object,Type)
  fullName: System.ServiceModel.Dispatcher.QueryStringConverter.ConvertValueToString(Object,Type)
- uid: System.ServiceModel.Dispatcher.QueryStringConverter.#ctor*
  parent: System.ServiceModel.Dispatcher.QueryStringConverter
  isExternal: false
  name: QueryStringConverter
  nameWithType: QueryStringConverter.QueryStringConverter
- uid: System.ServiceModel.Dispatcher.QueryStringConverter.CanConvert*
  parent: System.ServiceModel.Dispatcher.QueryStringConverter
  isExternal: false
  name: CanConvert
  nameWithType: QueryStringConverter.CanConvert
- uid: System.ServiceModel.Dispatcher.QueryStringConverter.ConvertStringToValue*
  parent: System.ServiceModel.Dispatcher.QueryStringConverter
  isExternal: false
  name: ConvertStringToValue
  nameWithType: QueryStringConverter.ConvertStringToValue
- uid: System.ServiceModel.Dispatcher.QueryStringConverter.ConvertValueToString*
  parent: System.ServiceModel.Dispatcher.QueryStringConverter
  isExternal: false
  name: ConvertValueToString
  nameWithType: QueryStringConverter.ConvertValueToString
