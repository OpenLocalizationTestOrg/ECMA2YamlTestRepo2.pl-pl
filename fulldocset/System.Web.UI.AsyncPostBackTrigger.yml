### YamlMime:ManagedReference
items:
- uid: System.Web.UI.AsyncPostBackTrigger
  id: AsyncPostBackTrigger
  children:
  - System.Web.UI.AsyncPostBackTrigger.#ctor
  - System.Web.UI.AsyncPostBackTrigger.ControlID
  - System.Web.UI.AsyncPostBackTrigger.EventName
  - System.Web.UI.AsyncPostBackTrigger.HasTriggered
  - System.Web.UI.AsyncPostBackTrigger.Initialize
  - System.Web.UI.AsyncPostBackTrigger.OnEvent(System.Object,System.EventArgs)
  - System.Web.UI.AsyncPostBackTrigger.ToString
  langs:
  - csharp
  name: AsyncPostBackTrigger
  nameWithType: AsyncPostBackTrigger
  fullName: System.Web.UI.AsyncPostBackTrigger
  type: Class
  summary: "Definiuje kontroli i opcjonalnie zdarzeń formantu jako wyzwalacza asynchronicznej formantu odświeżania strony <xref href=&quot;System.Web.UI.UpdatePanel&quot;> </xref> kontrolkę służącą do odświeżania."
  remarks: "Formant AsyncPostBackTrigger umożliwia włączenie formantów jako wyzwalacze <xref:System.Web.UI.UpdatePanel>kontroli.</xref:System.Web.UI.UpdatePanel> Formanty, które są wyzwalacze panelu aktualizacji powodować odświeżenie zawartości panelu po asynchronicznego ogłaszania zwrotnego. Definiowanie kontrolkę asynchroniczne wyzwalacza jest przydatne w następujących scenariuszach: - dla formantów znajdujących się poza panelu.      — Dla formantów, które znajdują się wewnątrz panelu po <xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A>jest właściwość `false`.</xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A>      — Dla formantów, które znajdują się wewnątrz zagnieżdżonych panele, aby spowodować odświeżanie paneli nadrzędnej.       Formant, który odwołuje się do sterowania AsyncPostBackTrigger musi być w tym samym kontenerze nazewnictwa jako panelu aktualizacji, do których jest wyzwalacz. Wyzwalacze, które są oparte na kontrolek w inne nazewnictwa kontenery nie są obsługiwane.       Dodaj AsyncPostBackTrigger steruje przy użyciu **UpdatePanelTrigger edytora kolekcji** okno dialogowe w Projektancie lub przez tworzenie `Triggers` deklaratywnie w elemencie <xref:System.Web.UI.UpdatePanel>kontroli.</xref:System.Web.UI.UpdatePanel> <xref:System.Web.UI.AsyncPostBackTrigger.ControlID%2A>Właściwość jest wymagana, ale <xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A>właściwość jest opcjonalna.</xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A> </xref:System.Web.UI.AsyncPostBackTrigger.ControlID%2A> Jeśli <xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A>nie określono właściwości <xref:System.ComponentModel.DefaultEventAttribute>atrybut kontrolki służy do określania domyślne zdarzenie.</xref:System.ComponentModel.DefaultEventAttribute> </xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A> Na przykład domyślne zdarzenie dla <xref:System.Web.UI.WebControls.Button>formant jest <xref:System.Web.UI.WebControls.Button.Click>zdarzeń.</xref:System.Web.UI.WebControls.Button.Click> </xref:System.Web.UI.WebControls.Button> <xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A>Właściwość jest rozróżniana wielkość liter.</xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A>       Można także odwoływać kontenera nazewnictwa jako wyzwalacz. W takim przypadku wszystkie formantów podrzędnych w kontenerze, które powoduje odświeżenie strony są traktowane jako wyzwalacze <xref:System.Web.UI.UpdatePanel>kontroli.</xref:System.Web.UI.UpdatePanel>       Programowe dodawanie formantów AsyncPostBackTrigger nie jest obsługiwane. Aby programowo zarejestrować formant odświeżania strony, należy użyć <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A>metody <xref:System.Web.UI.ScriptManager>kontroli.</xref:System.Web.UI.ScriptManager> </xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> Następnie wywołaj <xref:System.Web.UI.UpdatePanel.Update%2A>metody <xref:System.Web.UI.UpdatePanel>kontroli, gdy formant ogłoszeń Wstecz.</xref:System.Web.UI.UpdatePanel> </xref:System.Web.UI.UpdatePanel.Update%2A>       W przypadku definiowania formantu przy użyciu zarówno <xref:System.Web.UI.PostBackTrigger>i AsyncPostBackTrigger, jest zgłaszany wyjątek.</xref:System.Web.UI.PostBackTrigger>"
  example:
  - "The following example shows how to add an AsyncPostBackTrigger control declaratively. A <xref:System.Web.UI.WebControls.Button> control that is outside an <xref:System.Web.UI.UpdatePanel> control lets users enter a search term to find in the `Products` table of the Northwind database. A <xref:System.Web.UI.WebControls.GridView> control that is inside the <xref:System.Web.UI.UpdatePanel> control shows the results. The <xref:System.Web.UI.WebControls.Button> control is specified as an asynchronous trigger for the <xref:System.Web.UI.UpdatePanel> control.  \n  \n [!code-vb[System.Web.UI.AsyncPostBackTrigger#1](~/add/codesnippet/visualbasic/t-system.web.ui.asyncpos_1.aspx)]\n [!code-cs[System.Web.UI.AsyncPostBackTrigger#1](~/add/codesnippet/csharp/t-system.web.ui.asyncpos_1.aspx)]"
  syntax:
    content: 'public class AsyncPostBackTrigger : System.Web.UI.UpdatePanelControlTrigger'
  inheritance:
  - System.Object
  - System.Web.UI.UpdatePanelTrigger
  - System.Web.UI.UpdatePanelControlTrigger
  implements: []
  inheritedMembers:
  - System.Web.UI.UpdatePanelControlTrigger.FindTargetControl(System.Boolean)
  - System.Web.UI.UpdatePanelTrigger.Owner
  platform:
  - net462
- uid: System.Web.UI.AsyncPostBackTrigger.#ctor
  id: '#ctor'
  parent: System.Web.UI.AsyncPostBackTrigger
  langs:
  - csharp
  name: AsyncPostBackTrigger()
  nameWithType: AsyncPostBackTrigger.AsyncPostBackTrigger()
  fullName: System.Web.UI.AsyncPostBackTrigger.AsyncPostBackTrigger()
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Web.UI.AsyncPostBackTrigger&quot;> </xref> klasy."
  remarks: "Dodaj <xref:System.Web.UI.AsyncPostBackTrigger>za pomocą kontrolki **UpdatePanelTrigger edytora kolekcji** okno dialogowe w Projektancie lub przez tworzenie `Triggers` deklaratywnie w elemencie <xref:System.Web.UI.UpdatePanel>kontroli.</xref:System.Web.UI.UpdatePanel> </xref:System.Web.UI.AsyncPostBackTrigger>       Dodawanie <xref:System.Web.UI.AsyncPostBackTrigger>formanty programowo nie jest obsługiwana.</xref:System.Web.UI.AsyncPostBackTrigger>"
  syntax:
    content: public AsyncPostBackTrigger ();
    parameters: []
  overload: System.Web.UI.AsyncPostBackTrigger.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.AsyncPostBackTrigger.ControlID
  id: ControlID
  parent: System.Web.UI.AsyncPostBackTrigger
  langs:
  - csharp
  name: ControlID
  nameWithType: AsyncPostBackTrigger.ControlID
  fullName: System.Web.UI.AsyncPostBackTrigger.ControlID
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI
  summary: "Pobiera lub ustawia nazwę formantu, który wyzwala asynchronicznego ogłaszania zwrotnego dla <xref href=&quot;System.Web.UI.UpdatePanel&quot;> </xref> formantu."
  syntax:
    content: public string ControlID { get; set; }
    return:
      type: System.String
      description: "Identyfikator formantu serwera."
  overload: System.Web.UI.AsyncPostBackTrigger.ControlID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.AsyncPostBackTrigger.EventName
  id: EventName
  parent: System.Web.UI.AsyncPostBackTrigger
  langs:
  - csharp
  name: EventName
  nameWithType: AsyncPostBackTrigger.EventName
  fullName: System.Web.UI.AsyncPostBackTrigger.EventName
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI
  summary: "Pobiera lub ustawia zdarzenia odświeżania strony formantu, który wyzwala <xref href=&quot;System.Web.UI.UpdatePanel&quot;> </xref> formantu do zaktualizowania."
  remarks: "Właściwość EventName jest opcjonalna. Jeśli nie zostanie określony, <xref:System.ComponentModel.DefaultEventAttribute>atrybut kontrolki służy do określania domyślne zdarzenie.</xref:System.ComponentModel.DefaultEventAttribute> W poniższej tabeli wymieniono zdarzenia domyślny dla niektórych formantów standardowych programu ASP.NET 2.0.      | Formant | Zdarzenie domyślne |   |-------------|-------------------|   | <xref:System.Web.UI.WebControls.Button>| <xref:System.Web.UI.WebControls.Button.Click>|   | <xref:System.Web.UI.WebControls.Calendar>| <xref:System.Web.UI.WebControls.Calendar.SelectionChanged>|   | <xref:System.Web.UI.WebControls.CheckBox>| <xref:System.Web.UI.WebControls.CheckBox.CheckedChanged>|   | <xref:System.Web.UI.WebControls.GridView>| <xref:System.Web.UI.WebControls.GridView.SelectedIndexChanged>|   | <xref:System.Web.UI.WebControls.TextBox>| <xref:System.Web.UI.WebControls.TextBox.TextChanged>|</xref:System.Web.UI.WebControls.TextBox.TextChanged></xref:System.Web.UI.WebControls.TextBox></xref:System.Web.UI.WebControls.GridView.SelectedIndexChanged></xref:System.Web.UI.WebControls.GridView></xref:System.Web.UI.WebControls.CheckBox.CheckedChanged></xref:System.Web.UI.WebControls.CheckBox></xref:System.Web.UI.WebControls.Calendar.SelectionChanged></xref:System.Web.UI.WebControls.Calendar></xref:System.Web.UI.WebControls.Button.Click></xref:System.Web.UI.WebControls.Button>"
  syntax:
    content: public string EventName { get; set; }
    return:
      type: System.String
      description: "Nazwa zdarzenia. Wartość domyślna to <xref:System.String>.</xref:System.String>"
  overload: System.Web.UI.AsyncPostBackTrigger.EventName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.AsyncPostBackTrigger.HasTriggered
  id: HasTriggered
  parent: System.Web.UI.AsyncPostBackTrigger
  langs:
  - csharp
  name: HasTriggered()
  nameWithType: AsyncPostBackTrigger.HasTriggered()
  fullName: System.Web.UI.AsyncPostBackTrigger.HasTriggered()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI
  summary: "Zwraca wartość wskazującą, czy wyzwalacz został wywołany."
  remarks: "Deweloperzy formantu można zastąpić metodę HasTriggered w celu zapewnienia niestandardowa logika do określenia, czy wyzwalacz został wywołany. Aby wyświetlić niestandardowe wyzwalacza w `Triggers` elementu <xref:System.Web.UI.UpdatePanel>kontroli, możesz dodać dyrektywy do strony lub do elementu w pliku Web.config.</xref:System.Web.UI.UpdatePanel>"
  syntax:
    content: protected override bool HasTriggered ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli wyzwalacz został wywołany; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.AsyncPostBackTrigger.HasTriggered*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.AsyncPostBackTrigger.Initialize
  id: Initialize
  parent: System.Web.UI.AsyncPostBackTrigger
  langs:
  - csharp
  name: Initialize()
  nameWithType: AsyncPostBackTrigger.Initialize()
  fullName: System.Web.UI.AsyncPostBackTrigger.Initialize()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI
  summary: "Inicjuje <xref href=&quot;System.Web.UI.AsyncPostBackTrigger&quot;> </xref> kontroli oraz określa, czy zdarzenia o nazwie w wyzwalaczu istnieje i jest prawidłowy."
  syntax:
    content: protected override void Initialize ();
    parameters: []
  overload: System.Web.UI.AsyncPostBackTrigger.Initialize*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "No <xref href=\"System.Web.UI.ScriptManager\"></xref> control was found on the page.  \n  \n \\- or -  \n  \n The event that is named in the <xref:System.Web.UI.AsyncPostBackTrigger.EventName*> property is not found for the control that is named in the <xref:System.Web.UI.UpdatePanelControlTrigger.ControlID*> property.  \n  \n \\- or -  \n  \n The event that is named in the <xref:System.Web.UI.AsyncPostBackTrigger.EventName*> property for the control that is named in the <xref:System.Web.UI.UpdatePanelControlTrigger.ControlID*> property does not match a standard event handler signature."
  platform:
  - net462
- uid: System.Web.UI.AsyncPostBackTrigger.OnEvent(System.Object,System.EventArgs)
  id: OnEvent(System.Object,System.EventArgs)
  parent: System.Web.UI.AsyncPostBackTrigger
  langs:
  - csharp
  name: OnEvent(Object,EventArgs)
  nameWithType: AsyncPostBackTrigger.OnEvent(Object,EventArgs)
  fullName: System.Web.UI.AsyncPostBackTrigger.OnEvent(Object,EventArgs)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI
  summary: "Zgłasza zdarzenie, które wyzwoli ogłaszania zwrotnego i odświeżenia <xref href=&quot;System.Web.UI.UpdatePanel&quot;> </xref> formantu."
  syntax:
    content: public void OnEvent (object sender, EventArgs e);
    parameters:
    - id: sender
      type: System.Object
      description: "Nadawca zdarzeń."
    - id: e
      type: System.EventArgs
      description: "Dane zdarzenia."
  overload: System.Web.UI.AsyncPostBackTrigger.OnEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.AsyncPostBackTrigger.ToString
  id: ToString
  parent: System.Web.UI.AsyncPostBackTrigger
  langs:
  - csharp
  name: ToString()
  nameWithType: AsyncPostBackTrigger.ToString()
  fullName: System.Web.UI.AsyncPostBackTrigger.ToString()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI
  summary: "Zwraca reprezentację ciągu bieżącego <xref href=&quot;System.Web.UI.AsyncPostBackTrigger&quot;> </xref> formantu."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "Ciąg reprezentujący bieżące <xref href=&quot;System.Web.UI.AsyncPostBackTrigger&quot;> </xref> formantu."
  overload: System.Web.UI.AsyncPostBackTrigger.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.UpdatePanelControlTrigger
  isExternal: false
  name: System.Web.UI.UpdatePanelControlTrigger
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Web.UI.AsyncPostBackTrigger.#ctor
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: AsyncPostBackTrigger()
  nameWithType: AsyncPostBackTrigger.AsyncPostBackTrigger()
  fullName: System.Web.UI.AsyncPostBackTrigger.AsyncPostBackTrigger()
- uid: System.Web.UI.AsyncPostBackTrigger.ControlID
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: ControlID
  nameWithType: AsyncPostBackTrigger.ControlID
  fullName: System.Web.UI.AsyncPostBackTrigger.ControlID
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.AsyncPostBackTrigger.EventName
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: EventName
  nameWithType: AsyncPostBackTrigger.EventName
  fullName: System.Web.UI.AsyncPostBackTrigger.EventName
- uid: System.Web.UI.AsyncPostBackTrigger.HasTriggered
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: HasTriggered()
  nameWithType: AsyncPostBackTrigger.HasTriggered()
  fullName: System.Web.UI.AsyncPostBackTrigger.HasTriggered()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.AsyncPostBackTrigger.Initialize
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: Initialize()
  nameWithType: AsyncPostBackTrigger.Initialize()
  fullName: System.Web.UI.AsyncPostBackTrigger.Initialize()
- uid: System.Web.UI.AsyncPostBackTrigger.OnEvent(System.Object,System.EventArgs)
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: OnEvent(Object,EventArgs)
  nameWithType: AsyncPostBackTrigger.OnEvent(Object,EventArgs)
  fullName: System.Web.UI.AsyncPostBackTrigger.OnEvent(Object,EventArgs)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.AsyncPostBackTrigger.ToString
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: ToString()
  nameWithType: AsyncPostBackTrigger.ToString()
  fullName: System.Web.UI.AsyncPostBackTrigger.ToString()
- uid: System.Web.UI.AsyncPostBackTrigger.#ctor*
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: AsyncPostBackTrigger
  nameWithType: AsyncPostBackTrigger.AsyncPostBackTrigger
- uid: System.Web.UI.AsyncPostBackTrigger.ControlID*
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: ControlID
  nameWithType: AsyncPostBackTrigger.ControlID
- uid: System.Web.UI.AsyncPostBackTrigger.EventName*
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: EventName
  nameWithType: AsyncPostBackTrigger.EventName
- uid: System.Web.UI.AsyncPostBackTrigger.HasTriggered*
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: HasTriggered
  nameWithType: AsyncPostBackTrigger.HasTriggered
- uid: System.Web.UI.AsyncPostBackTrigger.Initialize*
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: Initialize
  nameWithType: AsyncPostBackTrigger.Initialize
- uid: System.Web.UI.AsyncPostBackTrigger.OnEvent*
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: OnEvent
  nameWithType: AsyncPostBackTrigger.OnEvent
- uid: System.Web.UI.AsyncPostBackTrigger.ToString*
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: ToString
  nameWithType: AsyncPostBackTrigger.ToString
