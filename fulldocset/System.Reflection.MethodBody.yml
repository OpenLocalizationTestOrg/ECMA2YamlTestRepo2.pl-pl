### YamlMime:ManagedReference
items:
- uid: System.Reflection.MethodBody
  id: MethodBody
  children:
  - System.Reflection.MethodBody.#ctor
  - System.Reflection.MethodBody.ExceptionHandlingClauses
  - System.Reflection.MethodBody.GetILAsByteArray
  - System.Reflection.MethodBody.InitLocals
  - System.Reflection.MethodBody.LocalSignatureMetadataToken
  - System.Reflection.MethodBody.LocalVariables
  - System.Reflection.MethodBody.MaxStackSize
  langs:
  - csharp
  name: MethodBody
  nameWithType: MethodBody
  fullName: System.Reflection.MethodBody
  type: Class
  summary: "Zapewnia dostęp do MSIL i metadanych dla treści metody."
  remarks: "Klasa MethodBody zapewnia dostęp do informacji o zmiennych lokalnych i klauzule obsługi wyjątków w treści metody oraz Microsoft język pośredni (MSIL) tworzącą treści metody.       Można użyć metody rozpoznawania tokenu klasy modułu, takich jak <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, i <xref:System.Reflection.Module.ResolveType%2A>, aby rozwiązać tokenów w treści metody, aby <xref:System.Type>obiektów, <xref:System.Reflection.MethodInfo>obiekty i <xref:System.Reflection.FieldInfo>obiektów, które zapewniają szczegółowe informacje na temat typów, metod i pól uzyskiwał MSIL w treści metody.</xref:System.Reflection.FieldInfo> </xref:System.Reflection.MethodInfo> </xref:System.Type> </xref:System.Reflection.Module.ResolveType%2A> </xref:System.Reflection.Module.ResolveMethod%2A> </xref:System.Reflection.Module.ResolveType%2A>      > [!NOTE] > Podczas analizowania treści metody wymaga dogłębnej wiedzy formatów instrukcja MSIL i metadanych. Informacje można znaleźć w dokumentacji infrastruktury języka wspólnego (CLI), szczególnie &quot;Partycji II: metadane definicji i semantyki&quot; i &quot;Partycji III: CIL instrukcji Set&quot;. Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# i wspólne normy infrastruktury języka](http://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [standardowe ECMA-335 - infrastruktury języka wspólnego (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) w witrynie sieci Web międzynarodowej Ecma.       Aby uzyskać obiekt MethodBody dla danej metody, należy najpierw uzyskać <xref:System.Reflection.MethodInfo>obiektu metody, następnie wywołaj <xref:System.Reflection.MethodInfo>obiektu <xref:System.Reflection.MethodBase.GetMethodBody%2A>metody.</xref:System.Reflection.MethodBase.GetMethodBody%2A> </xref:System.Reflection.MethodInfo> </xref:System.Reflection.MethodInfo>"
  example:
  - "The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a MethodBody object for the test method.  \n  \n The example uses the <xref:System.Reflection.MethodBody.LocalVariables%2A> property to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects and then displays their types and index order. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of exception-handling clauses.  \n  \n> [!NOTE]\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \n  \n [!code-cpp[MethodBody#1](~/add/codesnippet/cpp/t-system.reflection.meth_1.cpp)]\n [!code-vb[MethodBody#1](~/add/codesnippet/visualbasic/t-system.reflection.meth_1.vb)]\n [!code-cs[MethodBody#1](~/add/codesnippet/csharp/t-system.reflection.meth_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class MethodBody
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.#ctor
  id: '#ctor'
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: MethodBody()
  nameWithType: MethodBody.MethodBody()
  fullName: System.Reflection.MethodBody.MethodBody()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Reflection.MethodBody&quot;> </xref> klasy."
  remarks: "Ten konstruktor jest wywoływany przez klas pochodnych podczas budowy <xref:System.Reflection.MethodBody>obiektów.</xref:System.Reflection.MethodBody>"
  syntax:
    content: protected MethodBody ();
    parameters: []
  overload: System.Reflection.MethodBody.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.ExceptionHandlingClauses
  id: ExceptionHandlingClauses
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: ExceptionHandlingClauses
  nameWithType: MethodBody.ExceptionHandlingClauses
  fullName: System.Reflection.MethodBody.ExceptionHandlingClauses
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Pobiera listę zawierającą wszystkie klauzule obsługi wyjątków w treści metody."
  remarks: "Lista zawiera wszystkie klauzule z wszystkich bloków try w treści metody. Każdy <xref:System.Reflection.ExceptionHandlingClause>obiekt zawiera informacje umożliwiające identyfikację bloku try, z którym jest skojarzona.</xref:System.Reflection.ExceptionHandlingClause>      > [!NOTE] > Pracy z klauzule obsługi wyjątków wymaga dogłębnej wiedzy formatów instrukcja MSIL i metadanych. Informacje można znaleźć w dokumentacji infrastruktury języka wspólnego (CLI), szczególnie &quot;Partycji II: metadane definicji i semantyki&quot; i &quot;Partycji III: CIL instrukcji Set&quot;. Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# i wspólne normy infrastruktury języka](http://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [standardowe ECMA-335 - infrastruktury języka wspólnego (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) w witrynie sieci Web międzynarodowej Ecma."
  example:
  - "The following code example defines a test method named `MethodBodyExample` and displays information about its exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The ExceptionHandlingClauses property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects.  \n  \n> [!NOTE]\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \n  \n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \n  \n [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/p-system.reflection.meth_2_1.cpp)]\n [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/p-system.reflection.meth_2_1.vb)]\n [!code-cs[MethodBody#2](~/add/codesnippet/csharp/p-system.reflection.meth_2_1.cs)]  \n[!code-cpp[MethodBody#4](~/add/codesnippet/cpp/p-system.reflection.meth_2_2.cpp)]\n[!code-vb[MethodBody#4](~/add/codesnippet/visualbasic/p-system.reflection.meth_2_2.vb)]\n[!code-cs[MethodBody#4](~/add/codesnippet/csharp/p-system.reflection.meth_2_2.cs)]  \n[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/p-system.reflection.meth_2_3.cpp)]\n[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/p-system.reflection.meth_2_3.vb)]\n[!code-cs[MethodBody#5](~/add/codesnippet/csharp/p-system.reflection.meth_2_3.cs)]  \n[!code-cpp[MethodBody#7](~/add/codesnippet/cpp/p-system.reflection.meth_2_4.cpp)]\n[!code-vb[MethodBody#7](~/add/codesnippet/visualbasic/p-system.reflection.meth_2_4.vb)]\n[!code-cs[MethodBody#7](~/add/codesnippet/csharp/p-system.reflection.meth_2_4.cs)]"
  syntax:
    content: public virtual System.Collections.Generic.IList<System.Reflection.ExceptionHandlingClause> ExceptionHandlingClauses { get; }
    return:
      type: System.Collections.Generic.IList{System.Reflection.ExceptionHandlingClause}
      description: "&lt;Xref:System.Collections.Generic.IList%601&gt; z <xref href=&quot;System.Reflection.ExceptionHandlingClause&quot;> </xref> obiekty reprezentujące klauzule obsługi wyjątków w treści metody."
  overload: System.Reflection.MethodBody.ExceptionHandlingClauses*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.GetILAsByteArray
  id: GetILAsByteArray
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: GetILAsByteArray()
  nameWithType: MethodBody.GetILAsByteArray()
  fullName: System.Reflection.MethodBody.GetILAsByteArray()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Zwraca tablicę bajtów MSIL dla treści metody."
  remarks: "Można użyć metody rozpoznawania tokenu klasy modułu, takich jak <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, i <xref:System.Reflection.Module.ResolveMember%2A>, aby rozwiązać tokenów w treści metody, aby <xref:System.Type>obiektów, <xref:System.Reflection.MethodInfo>obiekty i <xref:System.Reflection.FieldInfo>obiektów, które zapewniają szczegółowe informacje na temat typów, metod i pól uzyskiwał MSIL w treści metody.</xref:System.Reflection.FieldInfo> </xref:System.Reflection.MethodInfo> </xref:System.Type> </xref:System.Reflection.Module.ResolveMember%2A> </xref:System.Reflection.Module.ResolveMethod%2A> </xref:System.Reflection.Module.ResolveType%2A>      > [!NOTE] > Podczas analizowania treści metody wymaga dogłębnej wiedzy formatów instrukcja MSIL i metadanych. Informacje można znaleźć w dokumentacji infrastruktury języka wspólnego (CLI), szczególnie &quot;Partycji II: metadane definicji i semantyki&quot; i &quot;Partycji III: CIL instrukcji Set&quot;. Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# i wspólne normy infrastruktury języka](http://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [standardowe ECMA-335 - infrastruktury języka wspólnego (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) w witrynie sieci Web międzynarodowej Ecma."
  syntax:
    content: public virtual byte[] GetILAsByteArray ();
    parameters: []
    return:
      type: System.Byte[]
      description: "Tablica typu <xref:System.Byte>zawierający MSIL dla treści metody.</xref:System.Byte>"
  overload: System.Reflection.MethodBody.GetILAsByteArray*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.InitLocals
  id: InitLocals
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: InitLocals
  nameWithType: MethodBody.InitLocals
  fullName: System.Reflection.MethodBody.InitLocals
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Pobiera wartość wskazującą, czy wartości domyślne dla ich typy są inicjowane zmiennych lokalnych w treści metody."
  remarks: "Właściwość initlocal odwołuje się do zmiennych, które nie są jawnie zainicjowane; oznacza to, że zmienne, które są zadeklarowane ze składnią, takich jak `int x;` w języku C# lub `Dim x As Integer` w języku Visual Basic.       Zmienne odwołania są zainicjowane do `null` domyślnie. Liczbowa zmienne są inicjowane od zera."
  example:
  - "The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.MaxStackSize%2A> and InitLocals properties are displayed.  \n  \n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \n  \n [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/p-system.reflection.meth_3_1.cpp)]\n [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/p-system.reflection.meth_3_1.vb)]\n [!code-cs[MethodBody#2](~/add/codesnippet/csharp/p-system.reflection.meth_3_1.cs)]  \n[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/p-system.reflection.meth_3_2.cpp)]\n[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/p-system.reflection.meth_3_2.vb)]\n[!code-cs[MethodBody#5](~/add/codesnippet/csharp/p-system.reflection.meth_3_2.cs)]"
  syntax:
    content: public virtual bool InitLocals { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>czy treść metody zawiera kod, aby zainicjować zmienne lokalne, aby <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> dla typów odwołań, lub wartość zero, zainicjować dla typów wartości; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Reflection.MethodBody.InitLocals*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.LocalSignatureMetadataToken
  id: LocalSignatureMetadataToken
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: LocalSignatureMetadataToken
  nameWithType: MethodBody.LocalSignatureMetadataToken
  fullName: System.Reflection.MethodBody.LocalSignatureMetadataToken
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Pobiera token metadanych dla podpisu, który opisuje zmiennych lokalnych w metodzie w metadanych."
  remarks: "Użyj <xref:System.Reflection.MethodBody.LocalVariables%2A>Właściwości, aby uzyskać informacje dotyczące metody zmiennych lokalnych.</xref:System.Reflection.MethodBody.LocalVariables%2A>      > [!NOTE] > Informacji na temat podpisów zmiennych lokalnych można znaleźć w dokumentacji infrastruktury języka wspólnego (CLI), szczególnie &quot;partycji II: metadane definicji i semantyki&quot;. Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# i wspólne normy infrastruktury języka](http://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [standardowe ECMA-335 - infrastruktury języka wspólnego (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) w witrynie sieci Web międzynarodowej Ecma."
  syntax:
    content: public virtual int LocalSignatureMetadataToken { get; }
    return:
      type: System.Int32
      description: "Liczba całkowita, która reprezentuje token metadanych."
  overload: System.Reflection.MethodBody.LocalSignatureMetadataToken*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.LocalVariables
  id: LocalVariables
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: LocalVariables
  nameWithType: MethodBody.LocalVariables
  fullName: System.Reflection.MethodBody.LocalVariables
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Pobiera listę zmiennych lokalnych zadeklarowanych w treści metody."
  remarks: "Nie trzeba token metadanych dla zmiennej podpisu lokalnego pochodzącymi <xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A>Właściwości.</xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A>"
  example:
  - "The following code example defines a test method named `MethodBodyExample` and displays its local variable information. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The LocalVariables property is used to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects.  \n  \n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \n  \n [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/p-system.reflection.meth_0_1.cpp)]\n [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/p-system.reflection.meth_0_1.vb)]\n [!code-cs[MethodBody#2](~/add/codesnippet/csharp/p-system.reflection.meth_0_1.cs)]  \n[!code-cpp[MethodBody#3](~/add/codesnippet/cpp/p-system.reflection.meth_0_2.cpp)]\n[!code-vb[MethodBody#3](~/add/codesnippet/visualbasic/p-system.reflection.meth_0_2.vb)]\n[!code-cs[MethodBody#3](~/add/codesnippet/csharp/p-system.reflection.meth_0_2.cs)]  \n[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/p-system.reflection.meth_0_3.cpp)]\n[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/p-system.reflection.meth_0_3.vb)]\n[!code-cs[MethodBody#5](~/add/codesnippet/csharp/p-system.reflection.meth_0_3.cs)]  \n[!code-cpp[MethodBody#6](~/add/codesnippet/cpp/p-system.reflection.meth_0_4.cpp)]\n[!code-vb[MethodBody#6](~/add/codesnippet/visualbasic/p-system.reflection.meth_0_4.vb)]\n[!code-cs[MethodBody#6](~/add/codesnippet/csharp/p-system.reflection.meth_0_4.cs)]"
  syntax:
    content: public virtual System.Collections.Generic.IList<System.Reflection.LocalVariableInfo> LocalVariables { get; }
    return:
      type: System.Collections.Generic.IList{System.Reflection.LocalVariableInfo}
      description: "&lt;Xref:System.Collections.Generic.IList%601&gt; z <xref:System.Reflection.LocalVariableInfo>obiektów, które opisują zmiennych lokalnych zadeklarowany w treści metody.</xref:System.Reflection.LocalVariableInfo>"
  overload: System.Reflection.MethodBody.LocalVariables*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.MaxStackSize
  id: MaxStackSize
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: MaxStackSize
  nameWithType: MethodBody.MaxStackSize
  fullName: System.Reflection.MethodBody.MaxStackSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Pobiera maksymalną liczbę elementów na stosie operand podczas wykonywania metody."
  remarks: 'Aby uzyskać więcej informacji zobacz dokumentację infrastruktury języka wspólnego (CLI), szczególnie &quot;Partycji II: metadane definicji i semantyki&quot; i &quot;III: CIL instrukcji zestawu partycji&quot;. Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# i wspólne normy infrastruktury języka](http://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [standardowe ECMA-335 - infrastruktury języka wspólnego (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) w witrynie sieci Web międzynarodowej Ecma.'
  example:
  - "The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The MaxStackSize and <xref:System.Reflection.MethodBody.InitLocals%2A> properties are displayed.  \n  \n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \n  \n [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/p-system.reflection.meth_1_1.cpp)]\n [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/p-system.reflection.meth_1_1.vb)]\n [!code-cs[MethodBody#2](~/add/codesnippet/csharp/p-system.reflection.meth_1_1.cs)]  \n[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/p-system.reflection.meth_1_2.cpp)]\n[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/p-system.reflection.meth_1_2.vb)]\n[!code-cs[MethodBody#5](~/add/codesnippet/csharp/p-system.reflection.meth_1_2.cs)]"
  syntax:
    content: public virtual int MaxStackSize { get; }
    return:
      type: System.Int32
      description: "Maksymalna liczba elementów na stosie operand podczas wykonywania metody."
  overload: System.Reflection.MethodBody.MaxStackSize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Reflection.MethodBody.#ctor
  parent: System.Reflection.MethodBody
  isExternal: false
  name: MethodBody()
  nameWithType: MethodBody.MethodBody()
  fullName: System.Reflection.MethodBody.MethodBody()
- uid: System.Reflection.MethodBody.ExceptionHandlingClauses
  parent: System.Reflection.MethodBody
  isExternal: false
  name: ExceptionHandlingClauses
  nameWithType: MethodBody.ExceptionHandlingClauses
  fullName: System.Reflection.MethodBody.ExceptionHandlingClauses
- uid: System.Collections.Generic.IList{System.Reflection.ExceptionHandlingClause}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<ExceptionHandlingClause>
  nameWithType: IList<ExceptionHandlingClause>
  fullName: System.Collections.Generic.IList<System.Reflection.ExceptionHandlingClause>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Reflection.ExceptionHandlingClause>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.ExceptionHandlingClause
    name: ExceptionHandlingClause
    nameWithType: ExceptionHandlingClause
    fullName: ExceptionHandlingClause
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Reflection.MethodBody.GetILAsByteArray
  parent: System.Reflection.MethodBody
  isExternal: false
  name: GetILAsByteArray()
  nameWithType: MethodBody.GetILAsByteArray()
  fullName: System.Reflection.MethodBody.GetILAsByteArray()
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.MethodBody.InitLocals
  parent: System.Reflection.MethodBody
  isExternal: false
  name: InitLocals
  nameWithType: MethodBody.InitLocals
  fullName: System.Reflection.MethodBody.InitLocals
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBody.LocalSignatureMetadataToken
  parent: System.Reflection.MethodBody
  isExternal: false
  name: LocalSignatureMetadataToken
  nameWithType: MethodBody.LocalSignatureMetadataToken
  fullName: System.Reflection.MethodBody.LocalSignatureMetadataToken
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.MethodBody.LocalVariables
  parent: System.Reflection.MethodBody
  isExternal: false
  name: LocalVariables
  nameWithType: MethodBody.LocalVariables
  fullName: System.Reflection.MethodBody.LocalVariables
- uid: System.Collections.Generic.IList{System.Reflection.LocalVariableInfo}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<LocalVariableInfo>
  nameWithType: IList<LocalVariableInfo>
  fullName: System.Collections.Generic.IList<System.Reflection.LocalVariableInfo>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Reflection.LocalVariableInfo>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.LocalVariableInfo
    name: LocalVariableInfo
    nameWithType: LocalVariableInfo
    fullName: LocalVariableInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Reflection.MethodBody.MaxStackSize
  parent: System.Reflection.MethodBody
  isExternal: false
  name: MaxStackSize
  nameWithType: MethodBody.MaxStackSize
  fullName: System.Reflection.MethodBody.MaxStackSize
- uid: System.Reflection.MethodBody.#ctor*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: MethodBody
  nameWithType: MethodBody.MethodBody
- uid: System.Reflection.MethodBody.ExceptionHandlingClauses*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: ExceptionHandlingClauses
  nameWithType: MethodBody.ExceptionHandlingClauses
- uid: System.Reflection.MethodBody.GetILAsByteArray*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: GetILAsByteArray
  nameWithType: MethodBody.GetILAsByteArray
- uid: System.Reflection.MethodBody.InitLocals*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: InitLocals
  nameWithType: MethodBody.InitLocals
- uid: System.Reflection.MethodBody.LocalSignatureMetadataToken*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: LocalSignatureMetadataToken
  nameWithType: MethodBody.LocalSignatureMetadataToken
- uid: System.Reflection.MethodBody.LocalVariables*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: LocalVariables
  nameWithType: MethodBody.LocalVariables
- uid: System.Reflection.MethodBody.MaxStackSize*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: MaxStackSize
  nameWithType: MethodBody.MaxStackSize
