### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.Design.UndoEngine
  id: UndoEngine
  children:
  - System.ComponentModel.Design.UndoEngine.#ctor(System.IServiceProvider)
  - System.ComponentModel.Design.UndoEngine.AddUndoUnit(System.ComponentModel.Design.UndoEngine.UndoUnit)
  - System.ComponentModel.Design.UndoEngine.CreateUndoUnit(System.String,System.Boolean)
  - System.ComponentModel.Design.UndoEngine.DiscardUndoUnit(System.ComponentModel.Design.UndoEngine.UndoUnit)
  - System.ComponentModel.Design.UndoEngine.Dispose
  - System.ComponentModel.Design.UndoEngine.Dispose(System.Boolean)
  - System.ComponentModel.Design.UndoEngine.Enabled
  - System.ComponentModel.Design.UndoEngine.GetRequiredService(System.Type)
  - System.ComponentModel.Design.UndoEngine.GetService(System.Type)
  - System.ComponentModel.Design.UndoEngine.OnUndoing(System.EventArgs)
  - System.ComponentModel.Design.UndoEngine.OnUndone(System.EventArgs)
  - System.ComponentModel.Design.UndoEngine.Undoing
  - System.ComponentModel.Design.UndoEngine.UndoInProgress
  - System.ComponentModel.Design.UndoEngine.Undone
  langs:
  - csharp
  name: UndoEngine
  nameWithType: UndoEngine
  fullName: System.ComponentModel.Design.UndoEngine
  type: Class
  summary: "Określa funkcje ogólne Cofnij/ponów w czasie projektowania."
  remarks: "Klasa abstrakcyjna UndoEngine udostępnia domyślną implementację funkcji cofania zmian w czasie projektowania. Jednostka cofania reprezentuje pojedynczą jednostkę pracy można cofnąć. Ta jednostka jest dodawana do stosu, a użytkownik może przemieszczając stos, aby cofnąć każdej akcji. Jednostki cofania zwykle są przeznaczone do przełączania, co oznacza, że ten cofania wywołanie zwraca dwukrotnie aplikacji do stanu początkowego.       Klasa UndoEngine wykorzystuje następujące właściwości obiektów uruchomionych w Projektancie: — wszystkie interesujące obiekty można utrwalone niektórych format przez moduł ładowania projektanta.      -Wszystkie obiekty podnieść powiadomienia o zmianie właściwości, gdy właściwość zostanie zmieniona.      - <xref:System.ComponentModel.Design.IDesignerHost>oferuje pomysł transakcje, które mogą być używane do przeznaczeniem akcję cofania, obejmującej wiele operacji mniejsze.</xref:System.ComponentModel.Design.IDesignerHost>       Z tych funkcji UndoEngine można przeznaczeniem żadnych jednostek cofania, których potrzebuje automatycznie.      > [!NOTE] > Nie należy zmieniać wartości właściwości bezpośrednio. Klasa UndoEngine wymaga użycia odpowiednie <xref:System.ComponentModel.TypeDescriptor>w celu zmiany wartości właściwości.</xref:System.ComponentModel.TypeDescriptor>       Jednostek cofania UndoEngine monitorów, aby utworzyć powiadomienia o zmianach, oraz zawierać samych jednostek stanów Zserializowany obiekt. W poniższej tabeli przedstawiono usługi, które muszą być dostępne po utworzeniu UndoEngine.      | Usługa | Opis elementu |   |-------------|-----------------|   | <xref:System.ComponentModel.Design.Serialization.ComponentSerializationService>| Przed i po zmianie wartości właściwości i obiekt składnika jest zapisywany. |   | <xref:System.ComponentModel.Design.IComponentChangeService>| Powiadamia Aparat cofania zmian wprowadzonych do składników. |   | <xref:System.ComponentModel.Design.IDesignerHost>| Używane do śledzenia transakcji. |      > [!NOTE] > Ponieważ klasa UndoEngine wymaga <xref:System.ComponentModel.Design.Serialization.ComponentSerializationService>i <xref:System.ComponentModel.Design.IComponentChangeService>, jest dostępna tylko w czasie projektowania.</xref:System.ComponentModel.Design.IComponentChangeService> </xref:System.ComponentModel.Design.Serialization.ComponentSerializationService> </xref:System.ComponentModel.Design.IDesignerHost> </xref:System.ComponentModel.Design.IComponentChangeService> </xref:System.ComponentModel.Design.Serialization.ComponentSerializationService>       Aparat cofania śledzi transakcji i tworzy jednostkę pojedynczego cofania, który obejmuje transakcji. W związku z tym aparatem cofania ma kontroli nad czas trwania akcji można cofnąć. Ponadto ponieważ może mieć nazwę transakcji, akcji możliwych do cofnięcia dziedziczyć po ich nazwy bieżącej transakcji. Jeśli żadna transakcja nie jest dostępne, a zmiana jest zgłaszany, aparat cofania tworzy nazwę cofania opartą na typ zmiany (na przykład &quot;Zmień właściwość &quot;Text&quot;&quot;)."
  syntax:
    content: 'public abstract class UndoEngine : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.Design.UndoEngine.#ctor(System.IServiceProvider)
  id: '#ctor(System.IServiceProvider)'
  parent: System.ComponentModel.Design.UndoEngine
  langs:
  - csharp
  name: UndoEngine(IServiceProvider)
  nameWithType: UndoEngine.UndoEngine(IServiceProvider)
  fullName: System.ComponentModel.Design.UndoEngine.UndoEngine(IServiceProvider)
  type: Constructor
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.ComponentModel.Design.UndoEngine&quot;> </xref> klasy."
  remarks: "<xref:System.ComponentModel.Design.UndoEngine>Wymaga kilku usług z `provider` parametru powinna być użyteczna.</xref:System.ComponentModel.Design.UndoEngine>"
  syntax:
    content: protected UndoEngine (IServiceProvider provider);
    parameters:
    - id: provider
      type: System.IServiceProvider
      description: "Element nadrzędny usługodawcy."
  overload: System.ComponentModel.Design.UndoEngine.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>provider</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Nie można odnaleźć wymaganych usług. Zobacz <xref href=&quot;System.ComponentModel.Design.UndoEngine&quot;> </xref> dla wymaganych usług. Po usunięciu tej usługi, upewnij się, zapewnieniu jej zamiennika."
  platform:
  - net462
- uid: System.ComponentModel.Design.UndoEngine.AddUndoUnit(System.ComponentModel.Design.UndoEngine.UndoUnit)
  id: AddUndoUnit(System.ComponentModel.Design.UndoEngine.UndoUnit)
  parent: System.ComponentModel.Design.UndoEngine
  langs:
  - csharp
  name: AddUndoUnit(UndoEngine+UndoUnit)
  nameWithType: UndoEngine.AddUndoUnit(UndoEngine+UndoUnit)
  fullName: System.ComponentModel.Design.UndoEngine.AddUndoUnit(UndoEngine+UndoUnit)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  syntax:
    content: protected abstract void AddUndoUnit (System.ComponentModel.Design.UndoEngine.UndoUnit unit);
    parameters:
    - id: unit
      type: System.ComponentModel.Design.UndoEngine.UndoUnit
      description: "Do dodania."
  overload: System.ComponentModel.Design.UndoEngine.AddUndoUnit*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.UndoEngine.CreateUndoUnit(System.String,System.Boolean)
  id: CreateUndoUnit(System.String,System.Boolean)
  parent: System.ComponentModel.Design.UndoEngine
  langs:
  - csharp
  name: CreateUndoUnit(String,Boolean)
  nameWithType: UndoEngine.CreateUndoUnit(String,Boolean)
  fullName: System.ComponentModel.Design.UndoEngine.CreateUndoUnit(String,Boolean)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "Tworzy nowy <xref:System.ComponentModel.Design.UndoEngine.UndoUnit>.</xref:System.ComponentModel.Design.UndoEngine.UndoUnit>"
  remarks: "Domyślna implementacja metody CreateUndoUnit po prostu zwraca nowe <xref:System.ComponentModel.Design.UndoEngine.UndoUnit>.</xref:System.ComponentModel.Design.UndoEngine.UndoUnit>       Domyślnie <xref:System.ComponentModel.Design.UndoEngine>nie działa z `primary` parametru, ale niektóre implementacje cofania, takich jak zasoby dotyczące modelu COM `Microsoft.VisualStudio.OLE.Interop.IOleParentUndoUnit` wzorzec projektowania, może być konieczne uwidocznić różnicę między jednostkę podstawową i jej funkcji podrzędnych.</xref:System.ComponentModel.Design.UndoEngine>"
  syntax:
    content: protected virtual System.ComponentModel.Design.UndoEngine.UndoUnit CreateUndoUnit (string name, bool primary);
    parameters:
    - id: name
      type: System.String
      description: "Nazwa jednostki do utworzenia."
    - id: primary
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby utworzyć pierwszy z serii jednostek zagnieżdżonych; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> można utworzyć kolejnych jednostek zagnieżdżonych."
    return:
      type: System.ComponentModel.Design.UndoEngine.UndoUnit
      description: "Nowy <xref:System.ComponentModel.Design.UndoEngine.UndoUnit>o określonej nazwie.</xref:System.ComponentModel.Design.UndoEngine.UndoUnit>"
  overload: System.ComponentModel.Design.UndoEngine.CreateUndoUnit*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.UndoEngine.DiscardUndoUnit(System.ComponentModel.Design.UndoEngine.UndoUnit)
  id: DiscardUndoUnit(System.ComponentModel.Design.UndoEngine.UndoUnit)
  parent: System.ComponentModel.Design.UndoEngine
  langs:
  - csharp
  name: DiscardUndoUnit(UndoEngine+UndoUnit)
  nameWithType: UndoEngine.DiscardUndoUnit(UndoEngine+UndoUnit)
  fullName: System.ComponentModel.Design.UndoEngine.DiscardUndoUnit(UndoEngine+UndoUnit)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  syntax:
    content: protected virtual void DiscardUndoUnit (System.ComponentModel.Design.UndoEngine.UndoUnit unit);
    parameters:
    - id: unit
      type: System.ComponentModel.Design.UndoEngine.UndoUnit
      description: "Do dodania."
  overload: System.ComponentModel.Design.UndoEngine.DiscardUndoUnit*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.UndoEngine.Dispose
  id: Dispose
  parent: System.ComponentModel.Design.UndoEngine
  langs:
  - csharp
  name: Dispose()
  nameWithType: UndoEngine.Dispose()
  fullName: System.ComponentModel.Design.UndoEngine.Dispose()
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "Zwalnia wszelkie zasoby używane przez <xref href=&quot;System.ComponentModel.Design.UndoEngine&quot;> </xref>."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.ComponentModel.Design.UndoEngine.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.UndoEngine.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.ComponentModel.Design.UndoEngine
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: UndoEngine.Dispose(Boolean)
  fullName: System.ComponentModel.Design.UndoEngine.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "Zwalnia zasoby niezarządzane używane przez <xref href=&quot;System.ComponentModel.Design.UndoEngine&quot;> </xref> i opcjonalnie zwalnia zasoby zarządzane."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Aby zwolnić zasoby zarządzane i niezarządzane, a <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> aby zwolnić tylko zasoby niezarządzane."
  overload: System.ComponentModel.Design.UndoEngine.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.UndoEngine.Enabled
  id: Enabled
  parent: System.ComponentModel.Design.UndoEngine
  langs:
  - csharp
  name: Enabled
  nameWithType: UndoEngine.Enabled
  fullName: System.ComponentModel.Design.UndoEngine.Enabled
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "Włącza lub wyłącza <xref href=&quot;System.ComponentModel.Design.UndoEngine&quot;> </xref>."
  syntax:
    content: public bool Enabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli <xref href=&quot;System.ComponentModel.Design.UndoEngine&quot;> </xref> jest włączone; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.Design.UndoEngine.Enabled*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.UndoEngine.GetRequiredService(System.Type)
  id: GetRequiredService(System.Type)
  parent: System.ComponentModel.Design.UndoEngine
  langs:
  - csharp
  name: GetRequiredService(Type)
  nameWithType: UndoEngine.GetRequiredService(Type)
  fullName: System.ComponentModel.Design.UndoEngine.GetRequiredService(Type)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "Pobiera żądanej usługi."
  syntax:
    content: protected object GetRequiredService (Type serviceType);
    parameters:
    - id: serviceType
      type: System.Type
      description: "Typ usługi do pobrania."
    return:
      type: System.Object
      description: "Żądana usługa, jeśli znaleziono."
  overload: System.ComponentModel.Design.UndoEngine.GetRequiredService*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>serviceType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>serviceType</code>jest wymagany, ale nie można odnaleźć. Po usunięciu tej usługi, upewnij się, zapewnieniu jej zamiennika."
  platform:
  - net462
- uid: System.ComponentModel.Design.UndoEngine.GetService(System.Type)
  id: GetService(System.Type)
  parent: System.ComponentModel.Design.UndoEngine
  langs:
  - csharp
  name: GetService(Type)
  nameWithType: UndoEngine.GetService(Type)
  fullName: System.ComponentModel.Design.UndoEngine.GetService(Type)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "Pobiera żądanej usługi."
  syntax:
    content: protected object GetService (Type serviceType);
    parameters:
    - id: serviceType
      type: System.Type
      description: "Typ usługi do pobrania."
    return:
      type: System.Object
      description: "Żądana usługa lub <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Jeżeli nie znaleziono żądanej usługi."
  overload: System.ComponentModel.Design.UndoEngine.GetService*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>serviceType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.Design.UndoEngine.OnUndoing(System.EventArgs)
  id: OnUndoing(System.EventArgs)
  parent: System.ComponentModel.Design.UndoEngine
  langs:
  - csharp
  name: OnUndoing(EventArgs)
  nameWithType: UndoEngine.OnUndoing(EventArgs)
  fullName: System.ComponentModel.Design.UndoEngine.OnUndoing(EventArgs)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "Zgłasza <xref href=&quot;System.ComponentModel.Design.UndoEngine.Undoing&quot;> </xref> zdarzeń."
  syntax:
    content: protected virtual void OnUndoing (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>Zawierający dane zdarzenia.</xref:System.EventArgs>"
  overload: System.ComponentModel.Design.UndoEngine.OnUndoing*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.UndoEngine.OnUndone(System.EventArgs)
  id: OnUndone(System.EventArgs)
  parent: System.ComponentModel.Design.UndoEngine
  langs:
  - csharp
  name: OnUndone(EventArgs)
  nameWithType: UndoEngine.OnUndone(EventArgs)
  fullName: System.ComponentModel.Design.UndoEngine.OnUndone(EventArgs)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "Zgłasza <xref href=&quot;System.ComponentModel.Design.UndoEngine.Undone&quot;> </xref> zdarzeń."
  syntax:
    content: protected virtual void OnUndone (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>Zawierający dane zdarzenia.</xref:System.EventArgs>"
  overload: System.ComponentModel.Design.UndoEngine.OnUndone*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.UndoEngine.Undoing
  id: Undoing
  parent: System.ComponentModel.Design.UndoEngine
  langs:
  - csharp
  name: Undoing
  nameWithType: UndoEngine.Undoing
  fullName: System.ComponentModel.Design.UndoEngine.Undoing
  type: Event
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "Występuje bezpośrednio przed wykonaniem akcji cofania."
  syntax:
    content: public event EventHandler Undoing;
    return:
      type: System.EventHandler
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.UndoEngine.UndoInProgress
  id: UndoInProgress
  parent: System.ComponentModel.Design.UndoEngine
  langs:
  - csharp
  name: UndoInProgress
  nameWithType: UndoEngine.UndoInProgress
  fullName: System.ComponentModel.Design.UndoEngine.UndoInProgress
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "Wskazuje, czy akcja Cofnij jest w toku."
  syntax:
    content: public bool UndoInProgress { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli akcja Cofnij jest w toku; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.Design.UndoEngine.UndoInProgress*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.UndoEngine.Undone
  id: Undone
  parent: System.ComponentModel.Design.UndoEngine
  langs:
  - csharp
  name: Undone
  nameWithType: UndoEngine.Undone
  fullName: System.ComponentModel.Design.UndoEngine.Undone
  type: Event
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "Występuje, natychmiast po wykonaniu akcji cofania."
  remarks: "Zdarzenie cofnąć zawsze jest wywoływane, nawet jeśli jest zgłaszany wyjątek."
  syntax:
    content: public event EventHandler Undone;
    return:
      type: System.EventHandler
      description: "Do dodania."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ComponentModel.Design.UndoEngine.#ctor(System.IServiceProvider)
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: UndoEngine(IServiceProvider)
  nameWithType: UndoEngine.UndoEngine(IServiceProvider)
  fullName: System.ComponentModel.Design.UndoEngine.UndoEngine(IServiceProvider)
- uid: System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.ComponentModel.Design.UndoEngine.AddUndoUnit(System.ComponentModel.Design.UndoEngine.UndoUnit)
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: AddUndoUnit(UndoEngine+UndoUnit)
  nameWithType: UndoEngine.AddUndoUnit(UndoEngine+UndoUnit)
  fullName: System.ComponentModel.Design.UndoEngine.AddUndoUnit(UndoEngine+UndoUnit)
- uid: System.ComponentModel.Design.UndoEngine.UndoUnit
  parent: System.ComponentModel.Design
  isExternal: false
  name: UndoEngine+UndoUnit
  nameWithType: UndoEngine+UndoUnit
  fullName: System.ComponentModel.Design.UndoEngine+UndoUnit
- uid: System.ComponentModel.Design.UndoEngine.CreateUndoUnit(System.String,System.Boolean)
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: CreateUndoUnit(String,Boolean)
  nameWithType: UndoEngine.CreateUndoUnit(String,Boolean)
  fullName: System.ComponentModel.Design.UndoEngine.CreateUndoUnit(String,Boolean)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.Design.UndoEngine.DiscardUndoUnit(System.ComponentModel.Design.UndoEngine.UndoUnit)
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: DiscardUndoUnit(UndoEngine+UndoUnit)
  nameWithType: UndoEngine.DiscardUndoUnit(UndoEngine+UndoUnit)
  fullName: System.ComponentModel.Design.UndoEngine.DiscardUndoUnit(UndoEngine+UndoUnit)
- uid: System.ComponentModel.Design.UndoEngine.Dispose
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: Dispose()
  nameWithType: UndoEngine.Dispose()
  fullName: System.ComponentModel.Design.UndoEngine.Dispose()
- uid: System.ComponentModel.Design.UndoEngine.Dispose(System.Boolean)
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: UndoEngine.Dispose(Boolean)
  fullName: System.ComponentModel.Design.UndoEngine.Dispose(Boolean)
- uid: System.ComponentModel.Design.UndoEngine.Enabled
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: Enabled
  nameWithType: UndoEngine.Enabled
  fullName: System.ComponentModel.Design.UndoEngine.Enabled
- uid: System.ComponentModel.Design.UndoEngine.GetRequiredService(System.Type)
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: GetRequiredService(Type)
  nameWithType: UndoEngine.GetRequiredService(Type)
  fullName: System.ComponentModel.Design.UndoEngine.GetRequiredService(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.Design.UndoEngine.GetService(System.Type)
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: GetService(Type)
  nameWithType: UndoEngine.GetService(Type)
  fullName: System.ComponentModel.Design.UndoEngine.GetService(Type)
- uid: System.ComponentModel.Design.UndoEngine.OnUndoing(System.EventArgs)
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: OnUndoing(EventArgs)
  nameWithType: UndoEngine.OnUndoing(EventArgs)
  fullName: System.ComponentModel.Design.UndoEngine.OnUndoing(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.ComponentModel.Design.UndoEngine.OnUndone(System.EventArgs)
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: OnUndone(EventArgs)
  nameWithType: UndoEngine.OnUndone(EventArgs)
  fullName: System.ComponentModel.Design.UndoEngine.OnUndone(EventArgs)
- uid: System.ComponentModel.Design.UndoEngine.Undoing
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: Undoing
  nameWithType: UndoEngine.Undoing
  fullName: System.ComponentModel.Design.UndoEngine.Undoing
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.ComponentModel.Design.UndoEngine.UndoInProgress
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: UndoInProgress
  nameWithType: UndoEngine.UndoInProgress
  fullName: System.ComponentModel.Design.UndoEngine.UndoInProgress
- uid: System.ComponentModel.Design.UndoEngine.Undone
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: Undone
  nameWithType: UndoEngine.Undone
  fullName: System.ComponentModel.Design.UndoEngine.Undone
- uid: System.ComponentModel.Design.UndoEngine.#ctor*
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: UndoEngine
  nameWithType: UndoEngine.UndoEngine
- uid: System.ComponentModel.Design.UndoEngine.AddUndoUnit*
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: AddUndoUnit
  nameWithType: UndoEngine.AddUndoUnit
- uid: System.ComponentModel.Design.UndoEngine.CreateUndoUnit*
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: CreateUndoUnit
  nameWithType: UndoEngine.CreateUndoUnit
- uid: System.ComponentModel.Design.UndoEngine.DiscardUndoUnit*
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: DiscardUndoUnit
  nameWithType: UndoEngine.DiscardUndoUnit
- uid: System.ComponentModel.Design.UndoEngine.Dispose*
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: Dispose
  nameWithType: UndoEngine.Dispose
- uid: System.ComponentModel.Design.UndoEngine.Enabled*
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: Enabled
  nameWithType: UndoEngine.Enabled
- uid: System.ComponentModel.Design.UndoEngine.GetRequiredService*
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: GetRequiredService
  nameWithType: UndoEngine.GetRequiredService
- uid: System.ComponentModel.Design.UndoEngine.GetService*
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: GetService
  nameWithType: UndoEngine.GetService
- uid: System.ComponentModel.Design.UndoEngine.OnUndoing*
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: OnUndoing
  nameWithType: UndoEngine.OnUndoing
- uid: System.ComponentModel.Design.UndoEngine.OnUndone*
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: OnUndone
  nameWithType: UndoEngine.OnUndone
- uid: System.ComponentModel.Design.UndoEngine.UndoInProgress*
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: UndoInProgress
  nameWithType: UndoEngine.UndoInProgress
