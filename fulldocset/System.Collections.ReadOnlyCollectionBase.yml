### YamlMime:ManagedReference
items:
- uid: System.Collections.ReadOnlyCollectionBase
  id: ReadOnlyCollectionBase
  children:
  - System.Collections.ReadOnlyCollectionBase.#ctor
  - System.Collections.ReadOnlyCollectionBase.Count
  - System.Collections.ReadOnlyCollectionBase.GetEnumerator
  - System.Collections.ReadOnlyCollectionBase.InnerList
  - System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized
  - System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot
  langs:
  - csharp
  name: ReadOnlyCollectionBase
  nameWithType: ReadOnlyCollectionBase
  fullName: System.Collections.ReadOnlyCollectionBase
  type: Class
  summary: "Udostępnia <xref uid=&quot;langword_csharp_abstract&quot; name=&quot;abstract&quot; href=&quot;&quot;> </xref> klasę podstawową dla jednoznacznie tylko do odczytu kolekcja nierodzajową."
  remarks: "Wystąpienie ReadOnlyCollectionBase zawsze jest tylko do odczytu. Zobacz <xref:System.Collections.CollectionBase>wersji można modyfikować tej klasy.</xref:System.Collections.CollectionBase>"
  example:
  - "The following code example implements the ReadOnlyCollectionBase class.  \n  \n [!code-cpp[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/cpp/t-system.collections.rea_1.cpp)]\n [!code-cs[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/csharp/t-system.collections.rea_1.cs)]\n [!code-vb[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/visualbasic/t-system.collections.rea_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class ReadOnlyCollectionBase : System.Collections.ICollection
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.ReadOnlyCollectionBase.#ctor
  id: '#ctor'
  parent: System.Collections.ReadOnlyCollectionBase
  langs:
  - csharp
  name: ReadOnlyCollectionBase()
  nameWithType: ReadOnlyCollectionBase.ReadOnlyCollectionBase()
  fullName: System.Collections.ReadOnlyCollectionBase.ReadOnlyCollectionBase()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Collections.ReadOnlyCollectionBase&quot;> </xref> klasy."
  remarks: "Ten konstruktor jest operacją O(1)."
  syntax:
    content: protected ReadOnlyCollectionBase ();
    parameters: []
  overload: System.Collections.ReadOnlyCollectionBase.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ReadOnlyCollectionBase.Count
  id: Count
  parent: System.Collections.ReadOnlyCollectionBase
  langs:
  - csharp
  name: Count
  nameWithType: ReadOnlyCollectionBase.Count
  fullName: System.Collections.ReadOnlyCollectionBase.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Pobiera liczbę elementów zawartych w <xref href=&quot;System.Collections.ReadOnlyCollectionBase&quot;> </xref> wystąpienia."
  remarks: ''
  example:
  - "The following code example implements the <xref:System.Collections.ReadOnlyCollectionBase> class.  \n  \n [!code-cpp[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/cpp/p-system.collections.rea_1_1.cpp)]\n [!code-cs[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/csharp/p-system.collections.rea_1_1.cs)]\n [!code-vb[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/visualbasic/p-system.collections.rea_1_1.vb)]"
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "Liczba elementów zawartych w <xref href=&quot;System.Collections.ReadOnlyCollectionBase&quot;> </xref> wystąpienia.       Pobieranie wartości tej właściwości jest operacją O(1)."
  overload: System.Collections.ReadOnlyCollectionBase.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ReadOnlyCollectionBase.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.ReadOnlyCollectionBase
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ReadOnlyCollectionBase.GetEnumerator()
  fullName: System.Collections.ReadOnlyCollectionBase.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Zwraca moduł wyliczający, który iteruje po <xref href=&quot;System.Collections.ReadOnlyCollectionBase&quot;> </xref> wystąpienia."
  remarks: "`foreach` Instrukcji języka C# (`for each` w języku Visual Basic) ukrywa złożoność wyliczenia.  W związku z tym przy użyciu `foreach` jest zalecane, zamiast bezpośrednie manipulowanie modułu wyliczającego.       Moduły wyliczające może służyć do odczytywania danych w kolekcji, ale nie może służyć do modyfikowania kolekcji źródłowej.       Początkowo moduł wyliczający jest umieszczony przed pierwszym elementem w kolekcji. <xref:System.Collections.IEnumerator.Reset%2A>również wprowadzono moduł wyliczający wróć do tej pozycji.</xref:System.Collections.IEnumerator.Reset%2A>  W tym miejscu <xref:System.Collections.IEnumerator.Current%2A>jest niezdefiniowany.</xref:System.Collections.IEnumerator.Current%2A> W związku z tym należy wywołać <xref:System.Collections.IEnumerator.MoveNext%2A>można poprawić modułu wyliczającego pierwszy element do kolekcji przed odczytaniem wartość <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>zwraca ten sam obiekt do momentu <xref:System.Collections.IEnumerator.MoveNext%2A>lub <xref:System.Collections.IEnumerator.Reset%2A>jest wywoływana.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Ustawia <xref:System.Collections.IEnumerator.Current%2A>do następnego elementu.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Jeśli <xref:System.Collections.IEnumerator.MoveNext%2A>przekazuje końcem kolekcji, moduł wyliczający jest umieszczony za ostatnim elementem w kolekcji i <xref:System.Collections.IEnumerator.MoveNext%2A>zwraca `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Gdy moduł wyliczający jest w tym miejscu kolejnych wywołań <xref:System.Collections.IEnumerator.MoveNext%2A>zwracają również `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Jeśli przez ostatnie wywołanie <xref:System.Collections.IEnumerator.MoveNext%2A>zwrócił `false`, <xref:System.Collections.IEnumerator.Current%2A>jest niezdefiniowany.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Aby ustawić <xref:System.Collections.IEnumerator.Current%2A>pierwszy element w kolekcji, należy wywołać, <xref:System.Collections.IEnumerator.Reset%2A>następuje <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Moduł wyliczający pozostaje ważny tak długo, jak kolekcji pozostaje niezmieniona. Jeśli wprowadzono zmiany w kolekcji, takie jak dodawanie, modyfikowanie lub usuwanie elementów, moduł wyliczający jest bezpowrotnie nieważne i jego zachowanie jest niezdefiniowana.       Moduł wyliczający nie ma wyłączny dostęp do kolekcji; w związku z tym wyliczania kolekcji leżą nie jest bezpieczne wątkowo procedurą.  W celu zagwarantowania bezpieczeństwa wątków podczas wyliczania, można zablokować kolekcję podczas całej wyliczenia.  Aby zezwolić na dostęp przez wiele wątków do odczytu i zapisu do kolekcji, musi implementować własne synchronizacji.       Ta metoda jest operacją O(1)."
  example:
  - "The following code example implements the <xref:System.Collections.ReadOnlyCollectionBase> class.  \n  \n [!code-cpp[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/cpp/m-system.collections.rea_1.cpp)]\n [!code-cs[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/csharp/m-system.collections.rea_1.cs)]\n [!code-vb[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/visualbasic/m-system.collections.rea_1.vb)]"
  syntax:
    content: public virtual System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>Dla <xref href=&quot;System.Collections.ReadOnlyCollectionBase&quot;> </xref> wystąpienia.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.ReadOnlyCollectionBase.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ReadOnlyCollectionBase.InnerList
  id: InnerList
  parent: System.Collections.ReadOnlyCollectionBase
  langs:
  - csharp
  name: InnerList
  nameWithType: ReadOnlyCollectionBase.InnerList
  fullName: System.Collections.ReadOnlyCollectionBase.InnerList
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Pobiera listę elementów zawartych w <xref href=&quot;System.Collections.ReadOnlyCollectionBase&quot;> </xref> wystąpienia."
  remarks: "Pobieranie wartości tej właściwości jest operacją O(1)."
  example:
  - "The following code example implements the <xref:System.Collections.ReadOnlyCollectionBase> class.  \n  \n [!code-cpp[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/cpp/p-system.collections.rea_0_1.cpp)]\n [!code-cs[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/csharp/p-system.collections.rea_0_1.cs)]\n [!code-vb[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/visualbasic/p-system.collections.rea_0_1.vb)]"
  syntax:
    content: protected System.Collections.ArrayList InnerList { get; }
    return:
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> Reprezentujący <xref href=&quot;System.Collections.ReadOnlyCollectionBase&quot;> </xref> wystąpienia samej siebie."
  overload: System.Collections.ReadOnlyCollectionBase.InnerList*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.ReadOnlyCollectionBase
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Kopiuje całą <xref href=&quot;System.Collections.ReadOnlyCollectionBase&quot;> </xref> do jednowymiarowego zgodnego <xref:System.Array>, rozpoczynając od określonego indeksu tablicy docelowej.</xref:System.Array>"
  remarks: "Określona tablica musi być zgodne z typem.       Ta metoda używa <xref:System.Array.Copy%2A?displayProperty=fullName>można skopiować elementów.</xref:System.Array.Copy%2A?displayProperty=fullName>       Ta metoda jest O (`n`) operację, której `n` <xref:System.Collections.ReadOnlyCollectionBase.Count%2A>.</xref:System.Collections.ReadOnlyCollectionBase.Count%2A>"
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "Jednowymiarowa <xref:System.Array>który jest miejscem docelowym elementów kopiowanych z <xref href=&quot;System.Collections.ReadOnlyCollectionBase&quot;> </xref>.</xref:System.Array> <xref:System.Array>Musi mieć indeksowania liczony od zera.</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "Liczony od zera indeks w `array` od rozpoczyna się kopiowanie które."
  overload: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>jest mniejsza od zera."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>jest wielowymiarowy.       - lub - liczba elementów w źródle <xref href=&quot;System.Collections.ReadOnlyCollectionBase&quot;> </xref> jest większa niż dostępne miejsce od <code>index</code> do końca tablicy docelowej <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Typ źródła <xref href=&quot;System.Collections.ReadOnlyCollectionBase&quot;> </xref> nie można automatycznie rzutować na typ docelowy <code> array </code>."
  platform:
  - net462
- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.ReadOnlyCollectionBase
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Pobiera wartość wskazującą czy uzyskują dostęp do <xref href=&quot;System.Collections.ReadOnlyCollectionBase&quot;> </xref> jest synchronizowany obiekt (wielowątkowość)."
  remarks: "A <xref:System.Collections.ReadOnlyCollectionBase>obiektu nie jest zsynchronizowana.</xref:System.Collections.ReadOnlyCollectionBase> Klasy pochodne zapewniają zsynchronizowanej wersji <xref:System.Collections.ReadOnlyCollectionBase>przy użyciu <xref:System.Collections.ICollection.SyncRoot%2A>Właściwości.</xref:System.Collections.ICollection.SyncRoot%2A> </xref:System.Collections.ReadOnlyCollectionBase>       Wyliczanie za pomocą kolekcji leżą nie jest procedurą wątkowo. Nawet jeśli kolekcja jest synchronizowane, inne wątki mogą modyfikować kolekcji, co powoduje, że moduł wyliczający, który ma zostać zgłoszony wyjątek. W celu zagwarantowania bezpieczeństwa wątków podczas wyliczania, możesz zablokować kolekcji podczas wyliczania całego lub przechwytują wyjątki wynikające ze zmian wprowadzonych przez inne wątki."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property during the entire enumeration.  \n  \n [!code-cpp[System.Collections.ReadOnlyCollectionBase#2](~/add/codesnippet/cpp/b4b4a174-5e26-4494-90e3-_1.cpp)]\n [!code-cs[System.Collections.ReadOnlyCollectionBase#2](~/add/codesnippet/csharp/b4b4a174-5e26-4494-90e3-_1.cs)]\n [!code-vb[System.Collections.ReadOnlyCollectionBase#2](~/add/codesnippet/visualbasic/b4b4a174-5e26-4494-90e3-_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli dostęp do <xref href=&quot;System.Collections.ReadOnlyCollectionBase&quot;> </xref> jest synchronizowany obiekt (wielowątkowość); w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Wartość domyślna to <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.ReadOnlyCollectionBase
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Pobiera obiekt, który może służyć do synchronizujący dostęp do <xref href=&quot;System.Collections.ReadOnlyCollectionBase&quot;> </xref> obiektu."
  remarks: "Klasy pochodne zapewniają własne zsynchronizowanej wersji <xref:System.Collections.ReadOnlyCollectionBase>przy użyciu <xref:System.Collections.ICollection.SyncRoot%2A>Właściwości.</xref:System.Collections.ICollection.SyncRoot%2A> </xref:System.Collections.ReadOnlyCollectionBase> Synchronizowanie kodu musi wykonywać operacje <xref:System.Collections.ICollection.SyncRoot%2A>Właściwość <xref:System.Collections.ReadOnlyCollectionBase>obiektu, nie są bezpośrednio w <xref:System.Collections.ReadOnlyCollectionBase>obiektu.</xref:System.Collections.ReadOnlyCollectionBase> </xref:System.Collections.ReadOnlyCollectionBase> </xref:System.Collections.ICollection.SyncRoot%2A> Zapewnia to poprawne działanie kolekcje, które pochodzą od innych obiektów. W szczególności przechowuje prawidłowego synchronizacji z innych wątków, które mogą być jednocześnie modyfikowanie <xref:System.Collections.ReadOnlyCollectionBase>obiektu.</xref:System.Collections.ReadOnlyCollectionBase>       Wyliczanie za pomocą kolekcji leżą nie jest procedurą wątkowo. Nawet jeśli kolekcja jest synchronizowane, inne wątki mogą modyfikować kolekcji, co powoduje, że moduł wyliczający, który ma zostać zgłoszony wyjątek. W celu zagwarantowania bezpieczeństwa wątków podczas wyliczania, możesz zablokować kolekcji podczas wyliczania całego lub przechwytują wyjątki wynikające ze zmian wprowadzonych przez inne wątki."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property during the entire enumeration.  \n  \n [!code-cpp[System.Collections.ReadOnlyCollectionBase#2](~/add/codesnippet/cpp/87c3d4a6-47b9-4735-a8a0-_1.cpp)]\n [!code-cs[System.Collections.ReadOnlyCollectionBase#2](~/add/codesnippet/csharp/87c3d4a6-47b9-4735-a8a0-_1.cs)]\n [!code-vb[System.Collections.ReadOnlyCollectionBase#2](~/add/codesnippet/visualbasic/87c3d4a6-47b9-4735-a8a0-_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: "Obiekt, który może służyć do synchronizujący dostęp do <xref href=&quot;System.Collections.ReadOnlyCollectionBase&quot;> </xref> obiektu."
  overload: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Collections.ReadOnlyCollectionBase.#ctor
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: ReadOnlyCollectionBase()
  nameWithType: ReadOnlyCollectionBase.ReadOnlyCollectionBase()
  fullName: System.Collections.ReadOnlyCollectionBase.ReadOnlyCollectionBase()
- uid: System.Collections.ReadOnlyCollectionBase.Count
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: Count
  nameWithType: ReadOnlyCollectionBase.Count
  fullName: System.Collections.ReadOnlyCollectionBase.Count
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.ReadOnlyCollectionBase.GetEnumerator
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: GetEnumerator()
  nameWithType: ReadOnlyCollectionBase.GetEnumerator()
  fullName: System.Collections.ReadOnlyCollectionBase.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.ReadOnlyCollectionBase.InnerList
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: InnerList
  nameWithType: ReadOnlyCollectionBase.InnerList
  fullName: System.Collections.ReadOnlyCollectionBase.InnerList
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.IsSynchronized
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.SyncRoot
- uid: System.Collections.ReadOnlyCollectionBase.#ctor*
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: ReadOnlyCollectionBase
  nameWithType: ReadOnlyCollectionBase.ReadOnlyCollectionBase
- uid: System.Collections.ReadOnlyCollectionBase.Count*
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: Count
  nameWithType: ReadOnlyCollectionBase.Count
- uid: System.Collections.ReadOnlyCollectionBase.GetEnumerator*
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: GetEnumerator
  nameWithType: ReadOnlyCollectionBase.GetEnumerator
- uid: System.Collections.ReadOnlyCollectionBase.InnerList*
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: InnerList
  nameWithType: ReadOnlyCollectionBase.InnerList
- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo*
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.CopyTo
- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.SyncRoot
