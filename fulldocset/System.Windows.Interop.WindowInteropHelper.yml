### YamlMime:ManagedReference
items:
- uid: System.Windows.Interop.WindowInteropHelper
  id: WindowInteropHelper
  children:
  - System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)
  - System.Windows.Interop.WindowInteropHelper.EnsureHandle
  - System.Windows.Interop.WindowInteropHelper.Handle
  - System.Windows.Interop.WindowInteropHelper.Owner
  langs:
  - csharp
  name: WindowInteropHelper
  nameWithType: WindowInteropHelper
  fullName: System.Windows.Interop.WindowInteropHelper
  type: Class
  summary: "Ułatwia współdziałanie między [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] i [!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)] kodu."
  remarks: "Elementy członkowskie tej klasy umożliwia obiekt wywołujący, aby korzystać z wewnętrznego [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] HWND i element nadrzędny HWND z [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>.</xref:System.Windows.Window>  Właściwe zabezpieczenia są sprawdzane przez te elementy członkowskie.       Jeśli potrzebne jest bardziej szczegółowe obiektu, w oparciu o jego właściwości HWND, należy użyć tej klasy.       Przykładowy scenariusz jest muszą obsługiwać [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] okno dialogowe w [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] aplikacji. Inicjowanie WindowInteropHelper z [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] obiektu okna dla okna dialogowego. Następnie można uzyskać [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] uchwyt okna (HWND) z <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>Właściwości i określ właściciela dla [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] okna z <xref:System.Windows.Interop.WindowInteropHelper.Owner%2A>Właściwości.</xref:System.Windows.Interop.WindowInteropHelper.Owner%2A> </xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> Poniższy przykładowy kod przedstawia sposób użycia WindowInteropHelper odnośnie do hostowania [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] okno dialogowe w [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] aplikacji.       [!code-cs[CorePseudocode #WindowInteropHelper](~/add/codesnippet/csharp/CorePseudocode/corepseudocode.cs#windowinterophelper)][!code-vb[CorePseudocode #WindowInteropHelper](~/add/codesnippet/visualbasic/corepseudocode/corepseudocode.vb#windowinterophelper) ] innym scenariuszu obsługiwane przez tę klasę jest uzyskanie <xref:System.Windows.Interop.HwndSource>obiekt z [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>obiektu.</xref:System.Windows.Window> </xref:System.Windows.Interop.HwndSource>   <xref:System.Windows.Interop.HwndSource>Umożliwia bezpośrednie przetwarzania [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] komunikaty za pośrednictwem <xref:System.Windows.Interop.HwndSource.AddHook%2A>metody.</xref:System.Windows.Interop.HwndSource.AddHook%2A> </xref:System.Windows.Interop.HwndSource> Za pomocą <xref:System.Windows.Interop.HwndSource>i <xref:System.Windows.Interop.HwndSource.AddHook%2A>zamiast <xref:System.Windows.Window>może nadal obsługiwać wiadomości, których nie jest równorzędny lub obsługi w [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)].</xref:System.Windows.Window> </xref:System.Windows.Interop.HwndSource.AddHook%2A> </xref:System.Windows.Interop.HwndSource> Utwórz WindowInteropHelper ze <xref:System.Windows.Window>źródła, następnie wywołaj <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>na WindowInteropHelper można pobrać z HWND do <xref:System.Windows.Interop.HwndSource>.</xref:System.Windows.Interop.HwndSource> </xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> </xref:System.Windows.Window>"
  syntax:
    content: public sealed class WindowInteropHelper
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)
  id: '#ctor(System.Windows.Window)'
  parent: System.Windows.Interop.WindowInteropHelper
  langs:
  - csharp
  name: WindowInteropHelper(Window)
  nameWithType: WindowInteropHelper.WindowInteropHelper(Window)
  fullName: System.Windows.Interop.WindowInteropHelper.WindowInteropHelper(Window)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Interop
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Windows.Interop.WindowInteropHelper&quot;> </xref> klasy dla określonej [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] okna."
  remarks: "Można okna dialogowego lub okna, który nie jest przeznaczony do hostowania w granicach [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] aplikacji."
  syntax:
    content: public WindowInteropHelper (System.Windows.Window window);
    parameters:
    - id: window
      type: System.Windows.Window
      description: "A [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] obiekt window."
  overload: System.Windows.Interop.WindowInteropHelper.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Interop.WindowInteropHelper.EnsureHandle
  id: EnsureHandle
  parent: System.Windows.Interop.WindowInteropHelper
  langs:
  - csharp
  name: EnsureHandle()
  nameWithType: WindowInteropHelper.EnsureHandle()
  fullName: System.Windows.Interop.WindowInteropHelper.EnsureHandle()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Interop
  summary: "Tworzy HWND okna, jeśli HWND nie została jeszcze utworzona."
  remarks: "Użyj metody EnsureHandle, aby oddzielić okna Tworzenie dojścia (HWND) za pomocą rzeczywiste przedstawiający zarządzanych <xref:System.Windows.Window>.</xref:System.Windows.Window> Jest to przydatne, gdy klient automatyzacji, który można wykonywać zadań bez konieczności przedstawiający okno.       Jeśli okno natywnego nie został utworzony, ta metoda tworzy okno natywnych zestawów <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>Właściwości i zwraca HWND.</xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> Jeśli utworzono już natywnego okna, jest zwracana uchwyt okna istniejących natywnych.       Natywny okna zostanie utworzony w wyniku wywołaniem tej metody <xref:System.Windows.Window.SourceInitialized>zdarzenie jest wywoływane.</xref:System.Windows.Window.SourceInitialized>       Wykonywanie zapytania <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>właściwości po wywołaniu metody EnsureHandle zwraca istniejących uchwytu okna.</xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> Drzewa wizualnego nie jest dołączony do okna dopiero po <xref:System.Windows.Window.Show%2A>Metoda jest wywoływana.</xref:System.Windows.Window.Show%2A>       Wywołanie metody EnsureHandle więcej niż jeden raz nie powoduje utworzenia nowego dojścia do okna. Wywołanie metody EnsureHandle, gdy uchwyt został już utworzony przez wywołanie do <xref:System.Windows.Window.Show%2A>Metoda nie powoduje utworzenia nowego uchwytu okna.</xref:System.Windows.Window.Show%2A> Natywny okna jest tworzony tylko, gdy uchwyt nie istnieje, gdy wywoływana jest metoda EnsureHandle.       Okno właściwości, które są skonfigurowane przy użyciu okna natywnych interfejsów API za pomocą p/invoke nie może występować w oknie zarządzanych interfejsów API. Na przykład jeśli ustawisz okna do najwyższego poziomu przy użyciu natywnych flagi MS_EX_TOPMOST po wywołania metody EnsureHandle <xref:System.Windows.Window.Topmost%2A>Właściwości nie jest gwarantowana w celu odzwierciedlenia natywnego ustawienie.</xref:System.Windows.Window.Topmost%2A>"
  syntax:
    content: public IntPtr EnsureHandle ();
    parameters: []
    return:
      type: System.IntPtr
      description: "<xref:System.IntPtr>Reprezentujący HWND.</xref:System.IntPtr>"
  overload: System.Windows.Interop.WindowInteropHelper.EnsureHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Interop.WindowInteropHelper.Handle
  id: Handle
  parent: System.Windows.Interop.WindowInteropHelper
  langs:
  - csharp
  name: Handle
  nameWithType: WindowInteropHelper.Handle
  fullName: System.Windows.Interop.WindowInteropHelper.Handle
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Interop
  summary: "Pobiera uchwytu okna dla [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] okna, który jest używany do tworzenia to <xref href=&quot;System.Windows.Interop.WindowInteropHelper&quot;> </xref>."
  syntax:
    content: public IntPtr Handle { get; }
    return:
      type: System.IntPtr
      description: "[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] Uchwyt okna (HWND)."
  overload: System.Windows.Interop.WindowInteropHelper.Handle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Interop.WindowInteropHelper.Owner
  id: Owner
  parent: System.Windows.Interop.WindowInteropHelper
  langs:
  - csharp
  name: Owner
  nameWithType: WindowInteropHelper.Owner
  fullName: System.Windows.Interop.WindowInteropHelper.Owner
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Interop
  summary: "Pobiera lub ustawia dojście [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] okno właściciela."
  remarks: "Przez ustawienie dla tej właściwości można zmienić elementu nadrzędnego systemu windows. Jak ma wartość true w przypadku ogólnych [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] programowania, nie nadrzędne systemu windows, które są już używane."
  syntax:
    content: public IntPtr Owner { get; set; }
    return:
      type: System.IntPtr
      description: "Uchwyt okna właściciela (HWND)."
  overload: System.Windows.Interop.WindowInteropHelper.Owner*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: WindowInteropHelper(Window)
  nameWithType: WindowInteropHelper.WindowInteropHelper(Window)
  fullName: System.Windows.Interop.WindowInteropHelper.WindowInteropHelper(Window)
- uid: System.Windows.Window
  parent: System.Windows
  isExternal: false
  name: Window
  nameWithType: Window
  fullName: System.Windows.Window
- uid: System.Windows.Interop.WindowInteropHelper.EnsureHandle
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: EnsureHandle()
  nameWithType: WindowInteropHelper.EnsureHandle()
  fullName: System.Windows.Interop.WindowInteropHelper.EnsureHandle()
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Windows.Interop.WindowInteropHelper.Handle
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: Handle
  nameWithType: WindowInteropHelper.Handle
  fullName: System.Windows.Interop.WindowInteropHelper.Handle
- uid: System.Windows.Interop.WindowInteropHelper.Owner
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: Owner
  nameWithType: WindowInteropHelper.Owner
  fullName: System.Windows.Interop.WindowInteropHelper.Owner
- uid: System.Windows.Interop.WindowInteropHelper.#ctor*
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: WindowInteropHelper
  nameWithType: WindowInteropHelper.WindowInteropHelper
- uid: System.Windows.Interop.WindowInteropHelper.EnsureHandle*
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: EnsureHandle
  nameWithType: WindowInteropHelper.EnsureHandle
- uid: System.Windows.Interop.WindowInteropHelper.Handle*
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: Handle
  nameWithType: WindowInteropHelper.Handle
- uid: System.Windows.Interop.WindowInteropHelper.Owner*
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: Owner
  nameWithType: WindowInteropHelper.Owner
