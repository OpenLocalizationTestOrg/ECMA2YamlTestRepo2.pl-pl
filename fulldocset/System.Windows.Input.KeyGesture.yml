### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.KeyGesture
  id: KeyGesture
  children:
  - System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)
  - System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  - System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)
  - System.Windows.Input.KeyGesture.DisplayString
  - System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)
  - System.Windows.Input.KeyGesture.Key
  - System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)
  - System.Windows.Input.KeyGesture.Modifiers
  langs:
  - csharp
  name: KeyGesture
  nameWithType: KeyGesture
  fullName: System.Windows.Input.KeyGesture
  type: Class
  summary: "Określa kombinację klawiszy, który może służyć do wywołania polecenia."
  remarks: "W większości przypadków elementu KeyGesture musi być skojarzony z jedną lub więcej <xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> Wyjątek od tej reguły są klawiszy funkcyjnych i klucze numerycznej, które może być nieprawidłowa elementu KeyGesture samodzielnie. Na przykład można utworzyć elementu KeyGesture przy użyciu tylko klawisz F12, ale umożliwia X klucza w elementu KeyGesture go muszą łączyć się z klawisz modyfikujący.       Ogólnie rzecz biorąc, możesz użyć <xref:System.Windows.Input.KeyBinding>powiązać elementu KeyGesture do <xref:System.Windows.Input.ICommand>, dzięki czemu polecenie jest wywoływane, gdy występuje elementu KeyGesture.</xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.KeyBinding>       Dla elementu KeyGesture [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] użycia, właściwości, które zwykle są ustawione w [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] jest <xref:System.Windows.Input.KeyBinding.Gesture%2A>, w przypadku której gestu reprezentuje zarówno klucz standard, jak i klucz modyfikujący.</xref:System.Windows.Input.KeyBinding.Gesture%2A> Można również ustawić <xref:System.Windows.Input.KeyBinding.Gesture%2A>Właściwości właśnie klucza funkcji lub po prostu modyfikujący kombinacja klucza.</xref:System.Windows.Input.KeyBinding.Gesture%2A> Jednak częściej można ustawić są <xref:System.Windows.Input.KeyBinding.Key%2A>Właściwości powiązania danego polecenia jest kluczem funkcji z brak modyfikatorów lub <xref:System.Windows.Input.KeyBinding.Modifiers%2A>klawisze modyfikujące tylko, jeśli jest powiązanie danego polecenia.</xref:System.Windows.Input.KeyBinding.Modifiers%2A> </xref:System.Windows.Input.KeyBinding.Key%2A>      <a name=&quot;xamlAttributeUsage_KeyGesture&quot;></a>## Użycie atrybutu XAML ```   <object property=&quot;oneOrMoreModifierKeys+key&quot;/>   - or -   <object property=&quot;functionKey&quot;/>   ``` <a name=&quot;xamlValues_KeyGesture&quot;> </a> ## wartości XAML `functionKey` <xref:System.Windows.Input.Key>pojedynczą wartość klucza, który musi być jednym z klawiszy funkcyjnych (F1 –&12;) lub klucze numerycznej.</xref:System.Windows.Input.Key>                 `oneOrMoreModifierKeys`Klawisze modyfikujące, zdefiniowane przez <xref:System.Windows.Input.ModifierKeys>Wyliczenie rozdzielone znakiem &quot;+&quot;.</xref:System.Windows.Input.ModifierKeys>       `key`    <xref:System.Windows.Input.Key>Pojedynczą wartość klucza.</xref:System.Windows.Input.Key>"
  example:
  - "The following example shows how to bind the <xref:System.Windows.Input.ApplicationCommands.Close%2A> command to a KeyGesture using a <xref:System.Windows.Input.KeyBinding>.  \n  \n [!code-cs[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithkeyandmodifiers)]  \n  \n The following example shows how to use KeyGesture in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]. Note that the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage does not directly declare a `<KeyGesture>` element. That object element usage is not possible because KeyGesture does not expose a public default constructor. Instead, the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage uses the typeconverter behavior to declare an entire KeyGesture inline as the `Gesture` attribute value.  \n  \n [!code-xml[commandWithHandler#CommandHandlerKeyBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlerkeybinding)]"
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Windows.Input.KeyGestureConverter))]

      [System.Windows.Markup.ValueSerializer(typeof(System.Windows.Input.KeyGestureValueSerializer))]

      public class KeyGesture : System.Windows.Input.InputGesture
  inheritance:
  - System.Object
  - System.Windows.Input.InputGesture
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)
  id: '#ctor(System.Windows.Input.Key)'
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: KeyGesture(Key)
  nameWithType: KeyGesture.KeyGesture(Key)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref> klasy z określonym <xref href=&quot;System.Windows.Input.Key&quot;> </xref>."
  remarks: "W większości przypadków <xref:System.Windows.Input.KeyGesture>musi być skojarzony z jedną lub więcej <xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.KeyGesture>  Wyjątek od tej reguły są klawiszy funkcyjnych i klucze numerycznej, które mogą być prawidłowym <xref:System.Windows.Input.KeyGesture>samodzielnie.</xref:System.Windows.Input.KeyGesture>"
  example:
  - "The following example shows how to use this constructor to create a <xref:System.Windows.Input.KeyGesture> and associate it with a <xref:System.Windows.Input.KeyBinding>.  The <xref:System.Windows.Input.KeyBinding> is then added to the <xref:System.Windows.Input.InputBindingCollection> of a <xref:System.Windows.Window>.  \n  \n [!code-cs[commandlibrarysnippets#KeyBindingWithNoModifier](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithnomodifier)]\n [!code-vb[commandlibrarysnippets#KeyBindingWithNoModifier](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithnomodifier)]"
  syntax:
    content: public KeyGesture (System.Windows.Input.Key key);
    parameters:
    - id: key
      type: System.Windows.Input.Key
      description: "Klucz skojarzony z tym gestu."
  overload: System.Windows.Input.KeyGesture.#ctor*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>key</code>nie jest prawidłową <xref href=&quot;System.Windows.Input.Key&quot;> </xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>key</code>nie jest prawidłową <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>."
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  id: '#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)'
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: KeyGesture(Key,ModifierKeys)
  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref> klasy z określonym <xref href=&quot;System.Windows.Input.Key&quot;> </xref> i <xref href=&quot;System.Windows.Input.ModifierKeys&quot;> </xref>."
  remarks: "W większości przypadków <xref:System.Windows.Input.KeyGesture>musi być skojarzony z jedną lub więcej <xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.KeyGesture> Wyjątek od tej reguły są klawiszy funkcyjnych i klucze numerycznej, które mogą być prawidłowym <xref:System.Windows.Input.KeyGesture>samodzielnie.</xref:System.Windows.Input.KeyGesture>"
  example:
  - "The following example shows how to use this constructor to create a <xref:System.Windows.Input.KeyGesture> and associate it with a <xref:System.Windows.Input.KeyBinding>. The <xref:System.Windows.Input.KeyBinding> is then added to the <xref:System.Windows.Input.InputBindingCollection> of a <xref:System.Windows.Window>.  \n  \n [!code-cs[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithkeyandmodifiers)]"
  syntax:
    content: public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers);
    parameters:
    - id: key
      type: System.Windows.Input.Key
      description: "Klucz skojarzony z gestu."
    - id: modifiers
      type: System.Windows.Input.ModifierKeys
      description: "Klawisze modyfikujące skojarzone z gestu."
  overload: System.Windows.Input.KeyGesture.#ctor*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>modifiers</code>is not a valid <xref href=&quot;System.Windows.Input.ModifierKeys&quot;></xref>       -or-       <code>key</code> is not a valid <xref href=&quot;System.Windows.Input.Key&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>key</code>i <code>modifiers</code> nie tworzą prawidłową <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>."
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)
  id: '#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)'
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: KeyGesture(Key,ModifierKeys,String)
  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys,String)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys,String)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Inicjuje nowe wystąpienie klasy <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref> klasy z określonym <xref href=&quot;System.Windows.Input.Key&quot;> </xref>, <xref href=&quot;System.Windows.Input.ModifierKeys&quot;> </xref>, a ciąg wyświetlany."
  remarks: "<xref:System.Windows.Input.KeyGesture.DisplayString%2A>Właściwość jest ustawiona na `displayString` parametru.</xref:System.Windows.Input.KeyGesture.DisplayString%2A>"
  syntax:
    content: public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers, string displayString);
    parameters:
    - id: key
      type: System.Windows.Input.Key
      description: "Klucz skojarzony z gestu."
    - id: modifiers
      type: System.Windows.Input.ModifierKeys
      description: "Klawisze modyfikujące skojarzone z gestu."
    - id: displayString
      type: System.String
      description: "Reprezentacja ciągu <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>."
  overload: System.Windows.Input.KeyGesture.#ctor*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>modifiers</code>is not a valid <xref href=&quot;System.Windows.Input.ModifierKeys&quot;></xref>       -or-       <code>key</code> is not a valid <xref href=&quot;System.Windows.Input.Key&quot;></xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>displayString</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>key</code>i <code>modifiers</code> nie tworzą prawidłową <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>."
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.DisplayString
  id: DisplayString
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: DisplayString
  nameWithType: KeyGesture.DisplayString
  fullName: System.Windows.Input.KeyGesture.DisplayString
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Pobiera reprezentację ciągu tego <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>."
  remarks: "Jeśli nie ustawiono ciągu wyświetlanego w konstruktorze, zwracany jest pustym ciągiem.       Jeśli ta właściwość jest pusta, <xref:System.Windows.Input.KeyGesture.GetDisplayStringForCulture%2A>Metoda zwraca ciąg utworzony na podstawie <xref:System.Windows.Input.KeyGesture.Key%2A>i <xref:System.Windows.Input.KeyGesture.Modifiers%2A>.</xref:System.Windows.Input.KeyGesture.Modifiers%2A> </xref:System.Windows.Input.KeyGesture.Key%2A> </xref:System.Windows.Input.KeyGesture.GetDisplayStringForCulture%2A>"
  syntax:
    content: public string DisplayString { get; }
    return:
      type: System.String
      description: "Ciąg wyświetlany w tym <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>. Wartość domyślna to <xref:System.String.Empty>.</xref:System.String.Empty>"
  overload: System.Windows.Input.KeyGesture.DisplayString*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)
  id: GetDisplayStringForCulture(System.Globalization.CultureInfo)
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: GetDisplayStringForCulture(CultureInfo)
  nameWithType: KeyGesture.GetDisplayStringForCulture(CultureInfo)
  fullName: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(CultureInfo)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Zwraca wartość typu ciąg, który może służyć do wyświetlenia <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>."
  remarks: "Jeśli ciąg wyświetlany została ustawiona przez konstruktora, który jest zwracany ciąg; w przeciwnym razie wartość ciągu jest tworzona na podstawie <xref:System.Windows.Input.KeyGesture.Key%2A>i <xref:System.Windows.Input.KeyGesture.Modifiers%2A>z jakiejkolwiek konwersji konieczne jest regulowane przez określony <xref:System.Globalization.CultureInfo>obiektu.</xref:System.Globalization.CultureInfo> </xref:System.Windows.Input.KeyGesture.Modifiers%2A> </xref:System.Windows.Input.KeyGesture.Key%2A>"
  syntax:
    content: public string GetDisplayStringForCulture (System.Globalization.CultureInfo culture);
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: "Informacje specyficzne dla kultury."
    return:
      type: System.String
      description: "Ciąg wyświetlany"
  overload: System.Windows.Input.KeyGesture.GetDisplayStringForCulture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.Key
  id: Key
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: Key
  nameWithType: KeyGesture.Key
  fullName: System.Windows.Input.KeyGesture.Key
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Pobiera klucz skojarzony z tym <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>."
  remarks: "W większości przypadków <xref:System.Windows.Input.KeyGesture>musi być skojarzony z jedną lub więcej <xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.KeyGesture>  Wyjątek od tej reguły są klawiszy funkcyjnych i klucze numerycznej, które mogą być prawidłowym <xref:System.Windows.Input.KeyGesture>samodzielnie.</xref:System.Windows.Input.KeyGesture>"
  syntax:
    content: public System.Windows.Input.Key Key { get; }
    return:
      type: System.Windows.Input.Key
      description: "Klucz skojarzony z gestu.  Wartość domyślna to <xref href=&quot;System.Windows.Input.Key&quot;> </xref>."
  overload: System.Windows.Input.KeyGesture.Key*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)
  id: Matches(System.Object,System.Windows.Input.InputEventArgs)
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: Matches(Object,InputEventArgs)
  nameWithType: KeyGesture.Matches(Object,InputEventArgs)
  fullName: System.Windows.Input.KeyGesture.Matches(Object,InputEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Określa, czy to <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref> odpowiada wejścia skojarzonego z określonym <xref href=&quot;System.Windows.Input.InputEventArgs&quot;> </xref> obiektu."
  remarks: '`targetElement`może służyć do bardziej szczegółowych decyzji na Określa, czy polecenie powinna być wywoływana dla określonego elementu.'
  example:
  - "The following example shows how to test whether a <xref:System.Windows.Input.KeyGesture> matches the input associated with an instance of an <xref:System.Windows.Input.InputEventArgs>. A <xref:System.Windows.UIElement.KeyDown> event handler is created that compares the event data with the <xref:System.Windows.Input.KeyGesture> by using the Matches method.  \n  \n [!code-cs[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keydownhandlerkeygesturematches)]\n [!code-vb[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keydownhandlerkeygesturematches)]"
  syntax:
    content: public override bool Matches (object targetElement, System.Windows.Input.InputEventArgs inputEventArgs);
    parameters:
    - id: targetElement
      type: System.Object
      description: "Element docelowy."
    - id: inputEventArgs
      type: System.Windows.Input.InputEventArgs
      description: "Dane wejściowe zdarzenia do porównania z tym gestu do."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Jeśli dane zdarzenia odpowiada to <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>; w przeciwnym razie <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Input.KeyGesture.Matches*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.Modifiers
  id: Modifiers
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: Modifiers
  nameWithType: KeyGesture.Modifiers
  fullName: System.Windows.Input.KeyGesture.Modifiers
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Pobiera klawisze modyfikujące skojarzony z tym <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>."
  remarks: "W większości przypadków <xref:System.Windows.Input.KeyGesture>musi być skojarzony z jedną lub więcej <xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.KeyGesture> Wyjątek od tej reguły są klawiszy funkcyjnych i klucze numerycznej, które mogą być prawidłowym <xref:System.Windows.Input.KeyGesture>samodzielnie.</xref:System.Windows.Input.KeyGesture> Na przykład można utworzyć <xref:System.Windows.Input.KeyGesture>przy użyciu tylko klawisz F12, ale umożliwia X klucza w <xref:System.Windows.Input.KeyGesture>go muszą łączyć się z klawisz modyfikujący.</xref:System.Windows.Input.KeyGesture> </xref:System.Windows.Input.KeyGesture>"
  syntax:
    content: public System.Windows.Input.ModifierKeys Modifiers { get; }
    return:
      type: System.Windows.Input.ModifierKeys
      description: "Klawisze modyfikujące skojarzone z gestu. Wartość domyślna to <xref href=&quot;System.Windows.Input.ModifierKeys&quot;> </xref>."
  overload: System.Windows.Input.KeyGesture.Modifiers*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.InputGesture
  isExternal: false
  name: System.Windows.Input.InputGesture
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: KeyGesture(Key)
  nameWithType: KeyGesture.KeyGesture(Key)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key)
- uid: System.Windows.Input.Key
  parent: System.Windows.Input
  isExternal: false
  name: Key
  nameWithType: Key
  fullName: System.Windows.Input.Key
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: KeyGesture(Key,ModifierKeys)
  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys)
- uid: System.Windows.Input.ModifierKeys
  parent: System.Windows.Input
  isExternal: false
  name: ModifierKeys
  nameWithType: ModifierKeys
  fullName: System.Windows.Input.ModifierKeys
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: KeyGesture(Key,ModifierKeys,String)
  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys,String)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Input.KeyGesture.DisplayString
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: DisplayString
  nameWithType: KeyGesture.DisplayString
  fullName: System.Windows.Input.KeyGesture.DisplayString
- uid: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: GetDisplayStringForCulture(CultureInfo)
  nameWithType: KeyGesture.GetDisplayStringForCulture(CultureInfo)
  fullName: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(CultureInfo)
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Windows.Input.KeyGesture.Key
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Key
  nameWithType: KeyGesture.Key
  fullName: System.Windows.Input.KeyGesture.Key
- uid: System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Matches(Object,InputEventArgs)
  nameWithType: KeyGesture.Matches(Object,InputEventArgs)
  fullName: System.Windows.Input.KeyGesture.Matches(Object,InputEventArgs)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.InputEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: InputEventArgs
  nameWithType: InputEventArgs
  fullName: System.Windows.Input.InputEventArgs
- uid: System.Windows.Input.KeyGesture.Modifiers
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Modifiers
  nameWithType: KeyGesture.Modifiers
  fullName: System.Windows.Input.KeyGesture.Modifiers
- uid: System.Windows.Input.KeyGesture.#ctor*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: KeyGesture
  nameWithType: KeyGesture.KeyGesture
- uid: System.Windows.Input.KeyGesture.DisplayString*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: DisplayString
  nameWithType: KeyGesture.DisplayString
- uid: System.Windows.Input.KeyGesture.GetDisplayStringForCulture*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: GetDisplayStringForCulture
  nameWithType: KeyGesture.GetDisplayStringForCulture
- uid: System.Windows.Input.KeyGesture.Key*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Key
  nameWithType: KeyGesture.Key
- uid: System.Windows.Input.KeyGesture.Matches*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Matches
  nameWithType: KeyGesture.Matches
- uid: System.Windows.Input.KeyGesture.Modifiers*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Modifiers
  nameWithType: KeyGesture.Modifiers
